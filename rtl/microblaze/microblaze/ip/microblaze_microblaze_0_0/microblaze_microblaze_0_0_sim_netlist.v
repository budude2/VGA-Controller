// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2018.3 (win64) Build 2405991 Thu Dec  6 23:38:27 MST 2018
// Date        : Fri May 10 15:35:47 2019
// Host        : DESKTOP-KBPHQS1 running 64-bit major release  (build 9200)
// Command     : write_verilog -force -mode funcsim
//               C:/Users/xtjac/School/VGA-Controller/rtl/microblaze/microblaze/ip/microblaze_microblaze_0_0/microblaze_microblaze_0_0_sim_netlist.v
// Design      : microblaze_microblaze_0_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7a100tcsg324-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "microblaze_microblaze_0_0,MicroBlaze,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "MicroBlaze,Vivado 2018.3" *) 
(* NotValidForBitStream *)
module microblaze_microblaze_0_0
   (Clk,
    Reset,
    Interrupt,
    Interrupt_Address,
    Interrupt_Ack,
    Instr_Addr,
    Instr,
    IFetch,
    I_AS,
    IReady,
    IWAIT,
    ICE,
    IUE,
    Data_Addr,
    Data_Read,
    Data_Write,
    D_AS,
    Read_Strobe,
    Write_Strobe,
    DReady,
    DWait,
    DCE,
    DUE,
    Byte_Enable,
    M_AXI_DP_AWADDR,
    M_AXI_DP_AWPROT,
    M_AXI_DP_AWVALID,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WDATA,
    M_AXI_DP_WSTRB,
    M_AXI_DP_WVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_BRESP,
    M_AXI_DP_BVALID,
    M_AXI_DP_BREADY,
    M_AXI_DP_ARADDR,
    M_AXI_DP_ARPROT,
    M_AXI_DP_ARVALID,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RDATA,
    M_AXI_DP_RRESP,
    M_AXI_DP_RVALID,
    M_AXI_DP_RREADY,
    Dbg_Clk,
    Dbg_TDI,
    Dbg_TDO,
    Dbg_Reg_En,
    Dbg_Shift,
    Dbg_Capture,
    Dbg_Update,
    Debug_Rst,
    Dbg_Disable);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 CLK.CLK CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME CLK.CLK, ASSOCIATED_BUSIF M0_AXIS:S0_AXIS:M1_AXIS:S1_AXIS:M2_AXIS:S2_AXIS:M3_AXIS:S3_AXIS:M4_AXIS:S4_AXIS:M5_AXIS:S5_AXIS:M6_AXIS:S6_AXIS:M7_AXIS:S7_AXIS:M8_AXIS:S8_AXIS:M9_AXIS:S9_AXIS:M10_AXIS:S10_AXIS:M11_AXIS:S11_AXIS:M12_AXIS:S12_AXIS:M13_AXIS:S13_AXIS:M14_AXIS:S14_AXIS:M15_AXIS:S15_AXIS:DLMB:ILMB:M_AXI_DP:M_AXI_IP:M_AXI_DC:M_AXI_IC:M_ACE_DC:M_ACE_IC:MON_DLMB:MON_ILMB:MON_AXI_DP:MON_AXI_IP:MON_AXI_DC:MON_AXI_IC:MON_ACE_DC:MON_ACE_IC, ASSOCIATED_RESET Reset, FREQ_HZ 100000000, PHASE 0.000, CLK_DOMAIN microblaze_clk_100MHz, INSERT_VIP 0" *) input Clk;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 RST.RESET RST" *) (* x_interface_parameter = "XIL_INTERFACENAME RST.RESET, POLARITY ACTIVE_HIGH, TYPE PROCESSOR, INSERT_VIP 0" *) input Reset;
  (* x_interface_info = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT INTERRUPT" *) (* x_interface_parameter = "XIL_INTERFACENAME INTERRUPT, SENSITIVITY LEVEL_HIGH, LOW_LATENCY 1" *) input Interrupt;
  (* x_interface_info = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT ADDRESS" *) input [0:31]Interrupt_Address;
  (* x_interface_info = "xilinx.com:interface:mbinterrupt:1.0 INTERRUPT ACK" *) output [0:1]Interrupt_Ack;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB ABUS" *) (* x_interface_parameter = "XIL_INTERFACENAME ILMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_ONLY" *) output [0:31]Instr_Addr;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB READDBUS" *) input [0:31]Instr;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB READSTROBE" *) output IFetch;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB ADDRSTROBE" *) output I_AS;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB READY" *) input IReady;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB WAIT" *) input IWAIT;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB CE" *) input ICE;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 ILMB UE" *) input IUE;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB ABUS" *) (* x_interface_parameter = "XIL_INTERFACENAME DLMB, ADDR_WIDTH 32, DATA_WIDTH 32, READ_WRITE_MODE READ_WRITE" *) output [0:31]Data_Addr;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB READDBUS" *) input [0:31]Data_Read;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB WRITEDBUS" *) output [0:31]Data_Write;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB ADDRSTROBE" *) output D_AS;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB READSTROBE" *) output Read_Strobe;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB WRITESTROBE" *) output Write_Strobe;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB READY" *) input DReady;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB WAIT" *) input DWait;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB CE" *) input DCE;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB UE" *) input DUE;
  (* x_interface_info = "xilinx.com:interface:lmb:1.0 DLMB BE" *) output [0:3]Byte_Enable;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWADDR" *) (* x_interface_parameter = "XIL_INTERFACENAME M_AXI_DP, ID_WIDTH 0, READ_WRITE_MODE READ_WRITE, SUPPORTS_NARROW_BURST 0, HAS_BURST 0, HAS_LOCK 0, DATA_WIDTH 32, ADDR_WIDTH 32, NUM_READ_OUTSTANDING 1, NUM_WRITE_OUTSTANDING 1, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, MAX_BURST_LENGTH 1, PROTOCOL AXI4LITE, FREQ_HZ 100000000, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, HAS_PROT 1, HAS_CACHE 0, HAS_QOS 0, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, PHASE 0.000, CLK_DOMAIN microblaze_clk_100MHz, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) output [31:0]M_AXI_DP_AWADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWPROT" *) output [2:0]M_AXI_DP_AWPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWVALID" *) output M_AXI_DP_AWVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP AWREADY" *) input M_AXI_DP_AWREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP WDATA" *) output [31:0]M_AXI_DP_WDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP WSTRB" *) output [3:0]M_AXI_DP_WSTRB;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP WVALID" *) output M_AXI_DP_WVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP WREADY" *) input M_AXI_DP_WREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP BRESP" *) input [1:0]M_AXI_DP_BRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP BVALID" *) input M_AXI_DP_BVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP BREADY" *) output M_AXI_DP_BREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARADDR" *) output [31:0]M_AXI_DP_ARADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARPROT" *) output [2:0]M_AXI_DP_ARPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARVALID" *) output M_AXI_DP_ARVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP ARREADY" *) input M_AXI_DP_ARREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP RDATA" *) input [31:0]M_AXI_DP_RDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP RRESP" *) input [1:0]M_AXI_DP_RRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP RVALID" *) input M_AXI_DP_RVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M_AXI_DP RREADY" *) output M_AXI_DP_RREADY;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG CLK" *) input Dbg_Clk;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG TDI" *) input Dbg_TDI;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG TDO" *) output Dbg_TDO;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG REG_EN" *) input [0:7]Dbg_Reg_En;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG SHIFT" *) input Dbg_Shift;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG CAPTURE" *) input Dbg_Capture;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG UPDATE" *) input Dbg_Update;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG RST" *) input Debug_Rst;
  (* x_interface_info = "xilinx.com:interface:mbdebug:3.0 DEBUG DISABLE" *) input Dbg_Disable;

  wire [0:3]Byte_Enable;
  wire Clk;
  wire DCE;
  wire DReady;
  wire DUE;
  wire DWait;
  wire D_AS;
  wire [0:31]Data_Addr;
  wire [0:31]Data_Read;
  wire [0:31]Data_Write;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire Dbg_Disable;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_Update;
  wire Debug_Rst;
  wire ICE;
  wire IFetch;
  wire IReady;
  wire IUE;
  wire IWAIT;
  wire I_AS;
  wire [0:31]Instr;
  wire [0:31]Instr_Addr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [31:0]M_AXI_DP_ARADDR;
  wire [2:0]M_AXI_DP_ARPROT;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID;
  wire [31:0]M_AXI_DP_AWADDR;
  wire [2:0]M_AXI_DP_AWPROT;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID;
  wire M_AXI_DP_BREADY;
  wire [1:0]M_AXI_DP_BRESP;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RREADY;
  wire [1:0]M_AXI_DP_RRESP;
  wire M_AXI_DP_RVALID;
  wire [31:0]M_AXI_DP_WDATA;
  wire M_AXI_DP_WREADY;
  wire [3:0]M_AXI_DP_WSTRB;
  wire M_AXI_DP_WVALID;
  wire Read_Strobe;
  wire Reset;
  wire Write_Strobe;
  wire NLW_U0_Dbg_ARREADY_UNCONNECTED;
  wire NLW_U0_Dbg_AWREADY_UNCONNECTED;
  wire NLW_U0_Dbg_BVALID_UNCONNECTED;
  wire NLW_U0_Dbg_Continue_UNCONNECTED;
  wire NLW_U0_Dbg_Intr_UNCONNECTED;
  wire NLW_U0_Dbg_RVALID_UNCONNECTED;
  wire NLW_U0_Dbg_Trace_Valid_UNCONNECTED;
  wire NLW_U0_Dbg_WREADY_UNCONNECTED;
  wire NLW_U0_Dbg_Wakeup_UNCONNECTED;
  wire NLW_U0_Hibernate_UNCONNECTED;
  wire NLW_U0_M0_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M0_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M10_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M10_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M11_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M11_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M12_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M12_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M13_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M13_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M14_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M14_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M15_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M15_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M1_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M1_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M2_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M2_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M3_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M3_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M4_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M4_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M5_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M5_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M6_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M6_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M7_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M7_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M8_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M8_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_M9_AXIS_TLAST_UNCONNECTED;
  wire NLW_U0_M9_AXIS_TVALID_UNCONNECTED;
  wire NLW_U0_MB_Error_UNCONNECTED;
  wire NLW_U0_MB_Halted_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ACREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CDLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CDVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_CRVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_RACK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WACK_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_DC_WVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_DP_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ACREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CDLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CDVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_CRVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_RACK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WACK_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IC_WVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_ARLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_ARVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_AWLOCK_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_AWVALID_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_BREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_RREADY_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_WLAST_UNCONNECTED;
  wire NLW_U0_M_AXI_IP_WVALID_UNCONNECTED;
  wire NLW_U0_Pause_Ack_UNCONNECTED;
  wire NLW_U0_S0_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S10_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S11_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S12_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S13_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S14_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S15_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S1_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S2_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S3_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S4_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S5_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S6_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S7_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S8_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_S9_AXIS_TREADY_UNCONNECTED;
  wire NLW_U0_Sleep_UNCONNECTED;
  wire NLW_U0_Suspend_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Hit_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Rdy_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Read_UNCONNECTED;
  wire NLW_U0_Trace_DCache_Req_UNCONNECTED;
  wire NLW_U0_Trace_Data_Access_UNCONNECTED;
  wire NLW_U0_Trace_Data_Read_UNCONNECTED;
  wire NLW_U0_Trace_Data_Write_UNCONNECTED;
  wire NLW_U0_Trace_Delay_Slot_UNCONNECTED;
  wire NLW_U0_Trace_EX_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_Exception_Taken_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Hit_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Rdy_UNCONNECTED;
  wire NLW_U0_Trace_ICache_Req_UNCONNECTED;
  wire NLW_U0_Trace_Jump_Hit_UNCONNECTED;
  wire NLW_U0_Trace_Jump_Taken_UNCONNECTED;
  wire NLW_U0_Trace_MB_Halted_UNCONNECTED;
  wire NLW_U0_Trace_MEM_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_OF_PipeRun_UNCONNECTED;
  wire NLW_U0_Trace_Reg_Write_UNCONNECTED;
  wire NLW_U0_Trace_Valid_Instr_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_Dbg_RDATA_UNCONNECTED;
  wire [1:0]NLW_U0_Dbg_RRESP_UNCONNECTED;
  wire [0:35]NLW_U0_Dbg_Trace_Data_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_Ack_Out_UNCONNECTED;
  wire [0:7]NLW_U0_Dbg_Trig_In_UNCONNECTED;
  wire [0:4095]NLW_U0_LOCKSTEP_Master_Out_UNCONNECTED;
  wire [0:4095]NLW_U0_LOCKSTEP_Out_UNCONNECTED;
  wire [31:0]NLW_U0_M0_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M10_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M11_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M12_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M13_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M14_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M15_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M1_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M2_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M3_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M4_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M5_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M6_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M7_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M8_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M9_AXIS_TDATA_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_ARDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DC_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_ARSIZE_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_ARSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_ARUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_AWCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DC_AWDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DC_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWSIZE_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DC_AWSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_AWUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_CDDATA_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_DC_CRRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_DC_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DC_WSTRB_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DC_WUSER_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DP_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DP_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DP_ARLEN_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DP_ARSIZE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_DP_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_DP_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_DP_AWLEN_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_DP_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_DP_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_ARDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IC_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_ARSIZE_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_ARSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_ARUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_AWCACHE_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IC_AWDOMAIN_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IC_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWSIZE_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IC_AWSNOOP_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_AWUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_CDDATA_UNCONNECTED;
  wire [4:0]NLW_U0_M_AXI_IC_CRRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IC_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IC_WSTRB_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IC_WUSER_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IP_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IP_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IP_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M_AXI_IP_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M_AXI_IP_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M_AXI_IP_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M_AXI_IP_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M_AXI_IP_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M_AXI_IP_WSTRB_UNCONNECTED;
  wire [255:0]NLW_U0_RAM_From_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Data_Address_UNCONNECTED;
  wire [0:3]NLW_U0_Trace_Data_Byte_Enable_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Data_Write_Value_UNCONNECTED;
  wire [0:4]NLW_U0_Trace_Exception_Kind_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_Instruction_UNCONNECTED;
  wire [0:14]NLW_U0_Trace_MSR_Reg_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_New_Reg_Value_UNCONNECTED;
  wire [0:31]NLW_U0_Trace_PC_UNCONNECTED;
  wire [0:7]NLW_U0_Trace_PID_Reg_UNCONNECTED;
  wire [0:4]NLW_U0_Trace_Reg_Addr_UNCONNECTED;

  (* C_ADDR_TAG_BITS = "0" *) 
  (* C_ALLOW_DCACHE_WR = "1" *) 
  (* C_ALLOW_ICACHE_WR = "1" *) 
  (* C_AREA_OPTIMIZED = "2" *) 
  (* C_ASYNC_INTERRUPT = "1" *) 
  (* C_ASYNC_WAKEUP = "3" *) 
  (* C_AVOID_PRIMITIVES = "0" *) 
  (* C_BASE_VECTORS = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_BRANCH_TARGET_CACHE_SIZE = "0" *) 
  (* C_CACHE_BYTE_SIZE = "4096" *) 
  (* C_DADDR_SIZE = "32" *) 
  (* C_DATA_SIZE = "32" *) 
  (* C_DCACHE_ADDR_TAG = "0" *) 
  (* C_DCACHE_ALWAYS_USED = "0" *) 
  (* C_DCACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_DCACHE_BYTE_SIZE = "4096" *) 
  (* C_DCACHE_DATA_WIDTH = "0" *) 
  (* C_DCACHE_FORCE_TAG_LUTRAM = "0" *) 
  (* C_DCACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) 
  (* C_DCACHE_LINE_LEN = "4" *) 
  (* C_DCACHE_USE_WRITEBACK = "0" *) 
  (* C_DCACHE_VICTIMS = "0" *) 
  (* C_DEBUG_COUNTER_WIDTH = "32" *) 
  (* C_DEBUG_ENABLED = "1" *) 
  (* C_DEBUG_EVENT_COUNTERS = "5" *) 
  (* C_DEBUG_EXTERNAL_TRACE = "0" *) 
  (* C_DEBUG_INTERFACE = "0" *) 
  (* C_DEBUG_LATENCY_COUNTERS = "1" *) 
  (* C_DEBUG_PROFILE_SIZE = "0" *) 
  (* C_DEBUG_TRACE_ASYNC_RESET = "0" *) 
  (* C_DEBUG_TRACE_SIZE = "8192" *) 
  (* C_DIV_ZERO_EXCEPTION = "0" *) 
  (* C_DYNAMIC_BUS_SIZING = "0" *) 
  (* C_D_AXI = "1" *) 
  (* C_D_LMB = "1" *) 
  (* C_ECC_USE_CE_EXCEPTION = "0" *) 
  (* C_EDGE_IS_POSITIVE = "1" *) 
  (* C_ENDIANNESS = "1" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FAULT_TOLERANT = "0" *) 
  (* C_FPU_EXCEPTION = "0" *) 
  (* C_FREQ = "100000000" *) 
  (* C_FSL_EXCEPTION = "0" *) 
  (* C_FSL_LINKS = "0" *) 
  (* C_IADDR_SIZE = "32" *) 
  (* C_ICACHE_ALWAYS_USED = "0" *) 
  (* C_ICACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_ICACHE_DATA_WIDTH = "0" *) 
  (* C_ICACHE_FORCE_TAG_LUTRAM = "0" *) 
  (* C_ICACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) 
  (* C_ICACHE_LINE_LEN = "4" *) 
  (* C_ICACHE_STREAMS = "0" *) 
  (* C_ICACHE_VICTIMS = "0" *) 
  (* C_ILL_OPCODE_EXCEPTION = "0" *) 
  (* C_IMPRECISE_EXCEPTIONS = "0" *) 
  (* C_INSTANCE = "microblaze_microblaze_0_0" *) 
  (* C_INSTR_SIZE = "32" *) 
  (* C_INTERCONNECT = "2" *) 
  (* C_INTERRUPT_IS_EDGE = "0" *) 
  (* C_I_AXI = "0" *) 
  (* C_I_LMB = "1" *) 
  (* C_LMB_DATA_SIZE = "32" *) 
  (* C_LOCKSTEP_MASTER = "0" *) 
  (* C_LOCKSTEP_SLAVE = "0" *) 
  (* C_M0_AXIS_DATA_WIDTH = "32" *) 
  (* C_M10_AXIS_DATA_WIDTH = "32" *) 
  (* C_M11_AXIS_DATA_WIDTH = "32" *) 
  (* C_M12_AXIS_DATA_WIDTH = "32" *) 
  (* C_M13_AXIS_DATA_WIDTH = "32" *) 
  (* C_M14_AXIS_DATA_WIDTH = "32" *) 
  (* C_M15_AXIS_DATA_WIDTH = "32" *) 
  (* C_M1_AXIS_DATA_WIDTH = "32" *) 
  (* C_M2_AXIS_DATA_WIDTH = "32" *) 
  (* C_M3_AXIS_DATA_WIDTH = "32" *) 
  (* C_M4_AXIS_DATA_WIDTH = "32" *) 
  (* C_M5_AXIS_DATA_WIDTH = "32" *) 
  (* C_M6_AXIS_DATA_WIDTH = "32" *) 
  (* C_M7_AXIS_DATA_WIDTH = "32" *) 
  (* C_M8_AXIS_DATA_WIDTH = "32" *) 
  (* C_M9_AXIS_DATA_WIDTH = "32" *) 
  (* C_MMU_DTLB_SIZE = "2" *) 
  (* C_MMU_ITLB_SIZE = "1" *) 
  (* C_MMU_PRIVILEGED_INSTR = "0" *) 
  (* C_MMU_TLB_ACCESS = "3" *) 
  (* C_MMU_ZONES = "2" *) 
  (* C_M_AXI_DC_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_DC_ARUSER_WIDTH = "5" *) 
  (* C_M_AXI_DC_AWUSER_WIDTH = "5" *) 
  (* C_M_AXI_DC_BUSER_WIDTH = "1" *) 
  (* C_M_AXI_DC_DATA_WIDTH = "32" *) 
  (* C_M_AXI_DC_EXCLUSIVE_ACCESS = "0" *) 
  (* C_M_AXI_DC_RUSER_WIDTH = "1" *) 
  (* C_M_AXI_DC_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_DC_USER_VALUE = "31" *) 
  (* C_M_AXI_DC_WUSER_WIDTH = "1" *) 
  (* C_M_AXI_DP_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_DP_DATA_WIDTH = "32" *) 
  (* C_M_AXI_DP_EXCLUSIVE_ACCESS = "0" *) 
  (* C_M_AXI_DP_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_D_BUS_EXCEPTION = "0" *) 
  (* C_M_AXI_IC_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_IC_ARUSER_WIDTH = "5" *) 
  (* C_M_AXI_IC_AWUSER_WIDTH = "5" *) 
  (* C_M_AXI_IC_BUSER_WIDTH = "1" *) 
  (* C_M_AXI_IC_DATA_WIDTH = "32" *) 
  (* C_M_AXI_IC_RUSER_WIDTH = "1" *) 
  (* C_M_AXI_IC_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_IC_USER_VALUE = "31" *) 
  (* C_M_AXI_IC_WUSER_WIDTH = "1" *) 
  (* C_M_AXI_IP_ADDR_WIDTH = "32" *) 
  (* C_M_AXI_IP_DATA_WIDTH = "32" *) 
  (* C_M_AXI_IP_THREAD_ID_WIDTH = "1" *) 
  (* C_M_AXI_I_BUS_EXCEPTION = "0" *) 
  (* C_NUMBER_OF_PC_BRK = "1" *) 
  (* C_NUMBER_OF_RD_ADDR_BRK = "0" *) 
  (* C_NUMBER_OF_WR_ADDR_BRK = "0" *) 
  (* C_NUM_SYNC_FF_CLK = "2" *) 
  (* C_NUM_SYNC_FF_CLK_DEBUG = "2" *) 
  (* C_NUM_SYNC_FF_CLK_IRQ = "1" *) 
  (* C_NUM_SYNC_FF_DBG_CLK = "1" *) 
  (* C_NUM_SYNC_FF_DBG_TRACE_CLK = "2" *) 
  (* C_OPCODE_0x0_ILLEGAL = "0" *) 
  (* C_OPTIMIZATION = "0" *) 
  (* C_PC_WIDTH = "32" *) 
  (* C_PIADDR_SIZE = "32" *) 
  (* C_PVR = "0" *) 
  (* C_PVR_USER1 = "8'b00000000" *) 
  (* C_PVR_USER2 = "0" *) 
  (* C_RESET_MSR = "0" *) 
  (* C_S0_AXIS_DATA_WIDTH = "32" *) 
  (* C_S10_AXIS_DATA_WIDTH = "32" *) 
  (* C_S11_AXIS_DATA_WIDTH = "32" *) 
  (* C_S12_AXIS_DATA_WIDTH = "32" *) 
  (* C_S13_AXIS_DATA_WIDTH = "32" *) 
  (* C_S14_AXIS_DATA_WIDTH = "32" *) 
  (* C_S15_AXIS_DATA_WIDTH = "32" *) 
  (* C_S1_AXIS_DATA_WIDTH = "32" *) 
  (* C_S2_AXIS_DATA_WIDTH = "32" *) 
  (* C_S3_AXIS_DATA_WIDTH = "32" *) 
  (* C_S4_AXIS_DATA_WIDTH = "32" *) 
  (* C_S5_AXIS_DATA_WIDTH = "32" *) 
  (* C_S6_AXIS_DATA_WIDTH = "32" *) 
  (* C_S7_AXIS_DATA_WIDTH = "32" *) 
  (* C_S8_AXIS_DATA_WIDTH = "32" *) 
  (* C_S9_AXIS_DATA_WIDTH = "32" *) 
  (* C_SCO = "0" *) 
  (* C_UNALIGNED_EXCEPTIONS = "0" *) 
  (* C_USE_BARREL = "1" *) 
  (* C_USE_BRANCH_TARGET_CACHE = "0" *) 
  (* C_USE_CONFIG_RESET = "0" *) 
  (* C_USE_DCACHE = "0" *) 
  (* C_USE_DIV = "1" *) 
  (* C_USE_EXTENDED_FSL_INSTR = "0" *) 
  (* C_USE_EXT_BRK = "0" *) 
  (* C_USE_EXT_NM_BRK = "0" *) 
  (* C_USE_FPU = "0" *) 
  (* C_USE_HW_MUL = "1" *) 
  (* C_USE_ICACHE = "0" *) 
  (* C_USE_INTERRUPT = "2" *) 
  (* C_USE_MMU = "0" *) 
  (* C_USE_MSR_INSTR = "1" *) 
  (* C_USE_NON_SECURE = "0" *) 
  (* C_USE_PCMP_INSTR = "1" *) 
  (* C_USE_REORDER_INSTR = "0" *) 
  (* C_USE_STACK_PROTECTION = "0" *) 
  (* downgradeipidentifiedwarnings = "yes" *) 
  microblaze_microblaze_0_0_MicroBlaze U0
       (.Byte_Enable(Byte_Enable),
        .Clk(Clk),
        .Config_Reset(1'b0),
        .DCE(DCE),
        .DEBUG_ACLK(1'b0),
        .DEBUG_ARESETN(1'b0),
        .DReady(DReady),
        .DUE(DUE),
        .DWait(DWait),
        .D_AS(D_AS),
        .Data_Addr(Data_Addr),
        .Data_Read(Data_Read),
        .Data_Write(Data_Write),
        .Dbg_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_ARREADY(NLW_U0_Dbg_ARREADY_UNCONNECTED),
        .Dbg_ARVALID(1'b0),
        .Dbg_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_AWREADY(NLW_U0_Dbg_AWREADY_UNCONNECTED),
        .Dbg_AWVALID(1'b0),
        .Dbg_BREADY(1'b0),
        .Dbg_BRESP(NLW_U0_Dbg_BRESP_UNCONNECTED[1:0]),
        .Dbg_BVALID(NLW_U0_Dbg_BVALID_UNCONNECTED),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Continue(NLW_U0_Dbg_Continue_UNCONNECTED),
        .Dbg_Disable(Dbg_Disable),
        .Dbg_Intr(NLW_U0_Dbg_Intr_UNCONNECTED),
        .Dbg_RDATA(NLW_U0_Dbg_RDATA_UNCONNECTED[31:0]),
        .Dbg_RREADY(1'b0),
        .Dbg_RRESP(NLW_U0_Dbg_RRESP_UNCONNECTED[1:0]),
        .Dbg_RVALID(NLW_U0_Dbg_RVALID_UNCONNECTED),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(1'b0),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trace_Clk(1'b0),
        .Dbg_Trace_Data(NLW_U0_Dbg_Trace_Data_UNCONNECTED[0:35]),
        .Dbg_Trace_Ready(1'b0),
        .Dbg_Trace_Valid(NLW_U0_Dbg_Trace_Valid_UNCONNECTED),
        .Dbg_Trig_Ack_In({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Trig_Ack_Out(NLW_U0_Dbg_Trig_Ack_Out_UNCONNECTED[0:7]),
        .Dbg_Trig_In(NLW_U0_Dbg_Trig_In_UNCONNECTED[0:7]),
        .Dbg_Trig_Out({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_Update(Dbg_Update),
        .Dbg_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Dbg_WREADY(NLW_U0_Dbg_WREADY_UNCONNECTED),
        .Dbg_WVALID(1'b0),
        .Dbg_Wakeup(NLW_U0_Dbg_Wakeup_UNCONNECTED),
        .Debug_Rst(Debug_Rst),
        .Ext_BRK(1'b0),
        .Ext_NM_BRK(1'b0),
        .Hibernate(NLW_U0_Hibernate_UNCONNECTED),
        .ICE(ICE),
        .IFetch(IFetch),
        .IReady(IReady),
        .IUE(IUE),
        .IWAIT(IWAIT),
        .I_AS(I_AS),
        .Instr(Instr),
        .Instr_Addr(Instr_Addr),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .Interrupt_Address(Interrupt_Address),
        .LOCKSTEP_Master_Out(NLW_U0_LOCKSTEP_Master_Out_UNCONNECTED[0:4095]),
        .LOCKSTEP_Out(NLW_U0_LOCKSTEP_Out_UNCONNECTED[0:4095]),
        .LOCKSTEP_Slave_In({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M0_AXIS_TDATA(NLW_U0_M0_AXIS_TDATA_UNCONNECTED[31:0]),
        .M0_AXIS_TLAST(NLW_U0_M0_AXIS_TLAST_UNCONNECTED),
        .M0_AXIS_TREADY(1'b0),
        .M0_AXIS_TVALID(NLW_U0_M0_AXIS_TVALID_UNCONNECTED),
        .M10_AXIS_TDATA(NLW_U0_M10_AXIS_TDATA_UNCONNECTED[31:0]),
        .M10_AXIS_TLAST(NLW_U0_M10_AXIS_TLAST_UNCONNECTED),
        .M10_AXIS_TREADY(1'b0),
        .M10_AXIS_TVALID(NLW_U0_M10_AXIS_TVALID_UNCONNECTED),
        .M11_AXIS_TDATA(NLW_U0_M11_AXIS_TDATA_UNCONNECTED[31:0]),
        .M11_AXIS_TLAST(NLW_U0_M11_AXIS_TLAST_UNCONNECTED),
        .M11_AXIS_TREADY(1'b0),
        .M11_AXIS_TVALID(NLW_U0_M11_AXIS_TVALID_UNCONNECTED),
        .M12_AXIS_TDATA(NLW_U0_M12_AXIS_TDATA_UNCONNECTED[31:0]),
        .M12_AXIS_TLAST(NLW_U0_M12_AXIS_TLAST_UNCONNECTED),
        .M12_AXIS_TREADY(1'b0),
        .M12_AXIS_TVALID(NLW_U0_M12_AXIS_TVALID_UNCONNECTED),
        .M13_AXIS_TDATA(NLW_U0_M13_AXIS_TDATA_UNCONNECTED[31:0]),
        .M13_AXIS_TLAST(NLW_U0_M13_AXIS_TLAST_UNCONNECTED),
        .M13_AXIS_TREADY(1'b0),
        .M13_AXIS_TVALID(NLW_U0_M13_AXIS_TVALID_UNCONNECTED),
        .M14_AXIS_TDATA(NLW_U0_M14_AXIS_TDATA_UNCONNECTED[31:0]),
        .M14_AXIS_TLAST(NLW_U0_M14_AXIS_TLAST_UNCONNECTED),
        .M14_AXIS_TREADY(1'b0),
        .M14_AXIS_TVALID(NLW_U0_M14_AXIS_TVALID_UNCONNECTED),
        .M15_AXIS_TDATA(NLW_U0_M15_AXIS_TDATA_UNCONNECTED[31:0]),
        .M15_AXIS_TLAST(NLW_U0_M15_AXIS_TLAST_UNCONNECTED),
        .M15_AXIS_TREADY(1'b0),
        .M15_AXIS_TVALID(NLW_U0_M15_AXIS_TVALID_UNCONNECTED),
        .M1_AXIS_TDATA(NLW_U0_M1_AXIS_TDATA_UNCONNECTED[31:0]),
        .M1_AXIS_TLAST(NLW_U0_M1_AXIS_TLAST_UNCONNECTED),
        .M1_AXIS_TREADY(1'b0),
        .M1_AXIS_TVALID(NLW_U0_M1_AXIS_TVALID_UNCONNECTED),
        .M2_AXIS_TDATA(NLW_U0_M2_AXIS_TDATA_UNCONNECTED[31:0]),
        .M2_AXIS_TLAST(NLW_U0_M2_AXIS_TLAST_UNCONNECTED),
        .M2_AXIS_TREADY(1'b0),
        .M2_AXIS_TVALID(NLW_U0_M2_AXIS_TVALID_UNCONNECTED),
        .M3_AXIS_TDATA(NLW_U0_M3_AXIS_TDATA_UNCONNECTED[31:0]),
        .M3_AXIS_TLAST(NLW_U0_M3_AXIS_TLAST_UNCONNECTED),
        .M3_AXIS_TREADY(1'b0),
        .M3_AXIS_TVALID(NLW_U0_M3_AXIS_TVALID_UNCONNECTED),
        .M4_AXIS_TDATA(NLW_U0_M4_AXIS_TDATA_UNCONNECTED[31:0]),
        .M4_AXIS_TLAST(NLW_U0_M4_AXIS_TLAST_UNCONNECTED),
        .M4_AXIS_TREADY(1'b0),
        .M4_AXIS_TVALID(NLW_U0_M4_AXIS_TVALID_UNCONNECTED),
        .M5_AXIS_TDATA(NLW_U0_M5_AXIS_TDATA_UNCONNECTED[31:0]),
        .M5_AXIS_TLAST(NLW_U0_M5_AXIS_TLAST_UNCONNECTED),
        .M5_AXIS_TREADY(1'b0),
        .M5_AXIS_TVALID(NLW_U0_M5_AXIS_TVALID_UNCONNECTED),
        .M6_AXIS_TDATA(NLW_U0_M6_AXIS_TDATA_UNCONNECTED[31:0]),
        .M6_AXIS_TLAST(NLW_U0_M6_AXIS_TLAST_UNCONNECTED),
        .M6_AXIS_TREADY(1'b0),
        .M6_AXIS_TVALID(NLW_U0_M6_AXIS_TVALID_UNCONNECTED),
        .M7_AXIS_TDATA(NLW_U0_M7_AXIS_TDATA_UNCONNECTED[31:0]),
        .M7_AXIS_TLAST(NLW_U0_M7_AXIS_TLAST_UNCONNECTED),
        .M7_AXIS_TREADY(1'b0),
        .M7_AXIS_TVALID(NLW_U0_M7_AXIS_TVALID_UNCONNECTED),
        .M8_AXIS_TDATA(NLW_U0_M8_AXIS_TDATA_UNCONNECTED[31:0]),
        .M8_AXIS_TLAST(NLW_U0_M8_AXIS_TLAST_UNCONNECTED),
        .M8_AXIS_TREADY(1'b0),
        .M8_AXIS_TVALID(NLW_U0_M8_AXIS_TVALID_UNCONNECTED),
        .M9_AXIS_TDATA(NLW_U0_M9_AXIS_TDATA_UNCONNECTED[31:0]),
        .M9_AXIS_TLAST(NLW_U0_M9_AXIS_TLAST_UNCONNECTED),
        .M9_AXIS_TREADY(1'b0),
        .M9_AXIS_TVALID(NLW_U0_M9_AXIS_TVALID_UNCONNECTED),
        .MB_Error(NLW_U0_MB_Error_UNCONNECTED),
        .MB_Halted(NLW_U0_MB_Halted_UNCONNECTED),
        .M_AXI_DC_ACADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_DC_ACPROT({1'b0,1'b0,1'b0}),
        .M_AXI_DC_ACREADY(NLW_U0_M_AXI_DC_ACREADY_UNCONNECTED),
        .M_AXI_DC_ACSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_DC_ACVALID(1'b0),
        .M_AXI_DC_ARADDR(NLW_U0_M_AXI_DC_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_DC_ARBAR(NLW_U0_M_AXI_DC_ARBAR_UNCONNECTED[1:0]),
        .M_AXI_DC_ARBURST(NLW_U0_M_AXI_DC_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_DC_ARCACHE(NLW_U0_M_AXI_DC_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_DC_ARDOMAIN(NLW_U0_M_AXI_DC_ARDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_DC_ARID(NLW_U0_M_AXI_DC_ARID_UNCONNECTED[0]),
        .M_AXI_DC_ARLEN(NLW_U0_M_AXI_DC_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_DC_ARLOCK(NLW_U0_M_AXI_DC_ARLOCK_UNCONNECTED),
        .M_AXI_DC_ARPROT(NLW_U0_M_AXI_DC_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_DC_ARQOS(NLW_U0_M_AXI_DC_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_DC_ARREADY(1'b0),
        .M_AXI_DC_ARSIZE(NLW_U0_M_AXI_DC_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_DC_ARSNOOP(NLW_U0_M_AXI_DC_ARSNOOP_UNCONNECTED[3:0]),
        .M_AXI_DC_ARUSER(NLW_U0_M_AXI_DC_ARUSER_UNCONNECTED[4:0]),
        .M_AXI_DC_ARVALID(NLW_U0_M_AXI_DC_ARVALID_UNCONNECTED),
        .M_AXI_DC_AWADDR(NLW_U0_M_AXI_DC_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_DC_AWBAR(NLW_U0_M_AXI_DC_AWBAR_UNCONNECTED[1:0]),
        .M_AXI_DC_AWBURST(NLW_U0_M_AXI_DC_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_DC_AWCACHE(NLW_U0_M_AXI_DC_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_DC_AWDOMAIN(NLW_U0_M_AXI_DC_AWDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_DC_AWID(NLW_U0_M_AXI_DC_AWID_UNCONNECTED[0]),
        .M_AXI_DC_AWLEN(NLW_U0_M_AXI_DC_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_DC_AWLOCK(NLW_U0_M_AXI_DC_AWLOCK_UNCONNECTED),
        .M_AXI_DC_AWPROT(NLW_U0_M_AXI_DC_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_DC_AWQOS(NLW_U0_M_AXI_DC_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_DC_AWREADY(1'b0),
        .M_AXI_DC_AWSIZE(NLW_U0_M_AXI_DC_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_DC_AWSNOOP(NLW_U0_M_AXI_DC_AWSNOOP_UNCONNECTED[2:0]),
        .M_AXI_DC_AWUSER(NLW_U0_M_AXI_DC_AWUSER_UNCONNECTED[4:0]),
        .M_AXI_DC_AWVALID(NLW_U0_M_AXI_DC_AWVALID_UNCONNECTED),
        .M_AXI_DC_BID(1'b0),
        .M_AXI_DC_BREADY(NLW_U0_M_AXI_DC_BREADY_UNCONNECTED),
        .M_AXI_DC_BRESP({1'b0,1'b0}),
        .M_AXI_DC_BUSER(1'b0),
        .M_AXI_DC_BVALID(1'b0),
        .M_AXI_DC_CDDATA(NLW_U0_M_AXI_DC_CDDATA_UNCONNECTED[31:0]),
        .M_AXI_DC_CDLAST(NLW_U0_M_AXI_DC_CDLAST_UNCONNECTED),
        .M_AXI_DC_CDREADY(1'b0),
        .M_AXI_DC_CDVALID(NLW_U0_M_AXI_DC_CDVALID_UNCONNECTED),
        .M_AXI_DC_CRREADY(1'b0),
        .M_AXI_DC_CRRESP(NLW_U0_M_AXI_DC_CRRESP_UNCONNECTED[4:0]),
        .M_AXI_DC_CRVALID(NLW_U0_M_AXI_DC_CRVALID_UNCONNECTED),
        .M_AXI_DC_RACK(NLW_U0_M_AXI_DC_RACK_UNCONNECTED),
        .M_AXI_DC_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_DC_RID(1'b0),
        .M_AXI_DC_RLAST(1'b0),
        .M_AXI_DC_RREADY(NLW_U0_M_AXI_DC_RREADY_UNCONNECTED),
        .M_AXI_DC_RRESP({1'b0,1'b0}),
        .M_AXI_DC_RUSER(1'b0),
        .M_AXI_DC_RVALID(1'b0),
        .M_AXI_DC_WACK(NLW_U0_M_AXI_DC_WACK_UNCONNECTED),
        .M_AXI_DC_WDATA(NLW_U0_M_AXI_DC_WDATA_UNCONNECTED[31:0]),
        .M_AXI_DC_WLAST(NLW_U0_M_AXI_DC_WLAST_UNCONNECTED),
        .M_AXI_DC_WREADY(1'b0),
        .M_AXI_DC_WSTRB(NLW_U0_M_AXI_DC_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_DC_WUSER(NLW_U0_M_AXI_DC_WUSER_UNCONNECTED[0]),
        .M_AXI_DC_WVALID(NLW_U0_M_AXI_DC_WVALID_UNCONNECTED),
        .M_AXI_DP_ARADDR(M_AXI_DP_ARADDR),
        .M_AXI_DP_ARBURST(NLW_U0_M_AXI_DP_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_DP_ARCACHE(NLW_U0_M_AXI_DP_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_DP_ARID(NLW_U0_M_AXI_DP_ARID_UNCONNECTED[0]),
        .M_AXI_DP_ARLEN(NLW_U0_M_AXI_DP_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_DP_ARLOCK(NLW_U0_M_AXI_DP_ARLOCK_UNCONNECTED),
        .M_AXI_DP_ARPROT(M_AXI_DP_ARPROT),
        .M_AXI_DP_ARQOS(NLW_U0_M_AXI_DP_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_ARSIZE(NLW_U0_M_AXI_DP_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_DP_ARVALID(M_AXI_DP_ARVALID),
        .M_AXI_DP_AWADDR(M_AXI_DP_AWADDR),
        .M_AXI_DP_AWBURST(NLW_U0_M_AXI_DP_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_DP_AWCACHE(NLW_U0_M_AXI_DP_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_DP_AWID(NLW_U0_M_AXI_DP_AWID_UNCONNECTED[0]),
        .M_AXI_DP_AWLEN(NLW_U0_M_AXI_DP_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_DP_AWLOCK(NLW_U0_M_AXI_DP_AWLOCK_UNCONNECTED),
        .M_AXI_DP_AWPROT(M_AXI_DP_AWPROT),
        .M_AXI_DP_AWQOS(NLW_U0_M_AXI_DP_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_AWSIZE(NLW_U0_M_AXI_DP_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_DP_AWVALID(M_AXI_DP_AWVALID),
        .M_AXI_DP_BID(1'b0),
        .M_AXI_DP_BREADY(M_AXI_DP_BREADY),
        .M_AXI_DP_BRESP(M_AXI_DP_BRESP),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RID(1'b0),
        .M_AXI_DP_RLAST(1'b0),
        .M_AXI_DP_RREADY(M_AXI_DP_RREADY),
        .M_AXI_DP_RRESP(M_AXI_DP_RRESP),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WDATA(M_AXI_DP_WDATA),
        .M_AXI_DP_WLAST(NLW_U0_M_AXI_DP_WLAST_UNCONNECTED),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .M_AXI_DP_WSTRB(M_AXI_DP_WSTRB),
        .M_AXI_DP_WVALID(M_AXI_DP_WVALID),
        .M_AXI_IC_ACADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IC_ACPROT({1'b0,1'b0,1'b0}),
        .M_AXI_IC_ACREADY(NLW_U0_M_AXI_IC_ACREADY_UNCONNECTED),
        .M_AXI_IC_ACSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IC_ACVALID(1'b0),
        .M_AXI_IC_ARADDR(NLW_U0_M_AXI_IC_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_IC_ARBAR(NLW_U0_M_AXI_IC_ARBAR_UNCONNECTED[1:0]),
        .M_AXI_IC_ARBURST(NLW_U0_M_AXI_IC_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_IC_ARCACHE(NLW_U0_M_AXI_IC_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_IC_ARDOMAIN(NLW_U0_M_AXI_IC_ARDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_IC_ARID(NLW_U0_M_AXI_IC_ARID_UNCONNECTED[0]),
        .M_AXI_IC_ARLEN(NLW_U0_M_AXI_IC_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_IC_ARLOCK(NLW_U0_M_AXI_IC_ARLOCK_UNCONNECTED),
        .M_AXI_IC_ARPROT(NLW_U0_M_AXI_IC_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_IC_ARQOS(NLW_U0_M_AXI_IC_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_IC_ARREADY(1'b0),
        .M_AXI_IC_ARSIZE(NLW_U0_M_AXI_IC_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_IC_ARSNOOP(NLW_U0_M_AXI_IC_ARSNOOP_UNCONNECTED[3:0]),
        .M_AXI_IC_ARUSER(NLW_U0_M_AXI_IC_ARUSER_UNCONNECTED[4:0]),
        .M_AXI_IC_ARVALID(NLW_U0_M_AXI_IC_ARVALID_UNCONNECTED),
        .M_AXI_IC_AWADDR(NLW_U0_M_AXI_IC_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_IC_AWBAR(NLW_U0_M_AXI_IC_AWBAR_UNCONNECTED[1:0]),
        .M_AXI_IC_AWBURST(NLW_U0_M_AXI_IC_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_IC_AWCACHE(NLW_U0_M_AXI_IC_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_IC_AWDOMAIN(NLW_U0_M_AXI_IC_AWDOMAIN_UNCONNECTED[1:0]),
        .M_AXI_IC_AWID(NLW_U0_M_AXI_IC_AWID_UNCONNECTED[0]),
        .M_AXI_IC_AWLEN(NLW_U0_M_AXI_IC_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_IC_AWLOCK(NLW_U0_M_AXI_IC_AWLOCK_UNCONNECTED),
        .M_AXI_IC_AWPROT(NLW_U0_M_AXI_IC_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_IC_AWQOS(NLW_U0_M_AXI_IC_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_IC_AWREADY(1'b0),
        .M_AXI_IC_AWSIZE(NLW_U0_M_AXI_IC_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_IC_AWSNOOP(NLW_U0_M_AXI_IC_AWSNOOP_UNCONNECTED[2:0]),
        .M_AXI_IC_AWUSER(NLW_U0_M_AXI_IC_AWUSER_UNCONNECTED[4:0]),
        .M_AXI_IC_AWVALID(NLW_U0_M_AXI_IC_AWVALID_UNCONNECTED),
        .M_AXI_IC_BID(1'b0),
        .M_AXI_IC_BREADY(NLW_U0_M_AXI_IC_BREADY_UNCONNECTED),
        .M_AXI_IC_BRESP({1'b0,1'b0}),
        .M_AXI_IC_BUSER(1'b0),
        .M_AXI_IC_BVALID(1'b0),
        .M_AXI_IC_CDDATA(NLW_U0_M_AXI_IC_CDDATA_UNCONNECTED[31:0]),
        .M_AXI_IC_CDLAST(NLW_U0_M_AXI_IC_CDLAST_UNCONNECTED),
        .M_AXI_IC_CDREADY(1'b0),
        .M_AXI_IC_CDVALID(NLW_U0_M_AXI_IC_CDVALID_UNCONNECTED),
        .M_AXI_IC_CRREADY(1'b0),
        .M_AXI_IC_CRRESP(NLW_U0_M_AXI_IC_CRRESP_UNCONNECTED[4:0]),
        .M_AXI_IC_CRVALID(NLW_U0_M_AXI_IC_CRVALID_UNCONNECTED),
        .M_AXI_IC_RACK(NLW_U0_M_AXI_IC_RACK_UNCONNECTED),
        .M_AXI_IC_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IC_RID(1'b0),
        .M_AXI_IC_RLAST(1'b0),
        .M_AXI_IC_RREADY(NLW_U0_M_AXI_IC_RREADY_UNCONNECTED),
        .M_AXI_IC_RRESP({1'b0,1'b0}),
        .M_AXI_IC_RUSER(1'b0),
        .M_AXI_IC_RVALID(1'b0),
        .M_AXI_IC_WACK(NLW_U0_M_AXI_IC_WACK_UNCONNECTED),
        .M_AXI_IC_WDATA(NLW_U0_M_AXI_IC_WDATA_UNCONNECTED[31:0]),
        .M_AXI_IC_WLAST(NLW_U0_M_AXI_IC_WLAST_UNCONNECTED),
        .M_AXI_IC_WREADY(1'b0),
        .M_AXI_IC_WSTRB(NLW_U0_M_AXI_IC_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_IC_WUSER(NLW_U0_M_AXI_IC_WUSER_UNCONNECTED[0]),
        .M_AXI_IC_WVALID(NLW_U0_M_AXI_IC_WVALID_UNCONNECTED),
        .M_AXI_IP_ARADDR(NLW_U0_M_AXI_IP_ARADDR_UNCONNECTED[31:0]),
        .M_AXI_IP_ARBURST(NLW_U0_M_AXI_IP_ARBURST_UNCONNECTED[1:0]),
        .M_AXI_IP_ARCACHE(NLW_U0_M_AXI_IP_ARCACHE_UNCONNECTED[3:0]),
        .M_AXI_IP_ARID(NLW_U0_M_AXI_IP_ARID_UNCONNECTED[0]),
        .M_AXI_IP_ARLEN(NLW_U0_M_AXI_IP_ARLEN_UNCONNECTED[7:0]),
        .M_AXI_IP_ARLOCK(NLW_U0_M_AXI_IP_ARLOCK_UNCONNECTED),
        .M_AXI_IP_ARPROT(NLW_U0_M_AXI_IP_ARPROT_UNCONNECTED[2:0]),
        .M_AXI_IP_ARQOS(NLW_U0_M_AXI_IP_ARQOS_UNCONNECTED[3:0]),
        .M_AXI_IP_ARREADY(1'b0),
        .M_AXI_IP_ARSIZE(NLW_U0_M_AXI_IP_ARSIZE_UNCONNECTED[2:0]),
        .M_AXI_IP_ARVALID(NLW_U0_M_AXI_IP_ARVALID_UNCONNECTED),
        .M_AXI_IP_AWADDR(NLW_U0_M_AXI_IP_AWADDR_UNCONNECTED[31:0]),
        .M_AXI_IP_AWBURST(NLW_U0_M_AXI_IP_AWBURST_UNCONNECTED[1:0]),
        .M_AXI_IP_AWCACHE(NLW_U0_M_AXI_IP_AWCACHE_UNCONNECTED[3:0]),
        .M_AXI_IP_AWID(NLW_U0_M_AXI_IP_AWID_UNCONNECTED[0]),
        .M_AXI_IP_AWLEN(NLW_U0_M_AXI_IP_AWLEN_UNCONNECTED[7:0]),
        .M_AXI_IP_AWLOCK(NLW_U0_M_AXI_IP_AWLOCK_UNCONNECTED),
        .M_AXI_IP_AWPROT(NLW_U0_M_AXI_IP_AWPROT_UNCONNECTED[2:0]),
        .M_AXI_IP_AWQOS(NLW_U0_M_AXI_IP_AWQOS_UNCONNECTED[3:0]),
        .M_AXI_IP_AWREADY(1'b0),
        .M_AXI_IP_AWSIZE(NLW_U0_M_AXI_IP_AWSIZE_UNCONNECTED[2:0]),
        .M_AXI_IP_AWVALID(NLW_U0_M_AXI_IP_AWVALID_UNCONNECTED),
        .M_AXI_IP_BID(1'b0),
        .M_AXI_IP_BREADY(NLW_U0_M_AXI_IP_BREADY_UNCONNECTED),
        .M_AXI_IP_BRESP({1'b0,1'b0}),
        .M_AXI_IP_BVALID(1'b0),
        .M_AXI_IP_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M_AXI_IP_RID(1'b0),
        .M_AXI_IP_RLAST(1'b0),
        .M_AXI_IP_RREADY(NLW_U0_M_AXI_IP_RREADY_UNCONNECTED),
        .M_AXI_IP_RRESP({1'b0,1'b0}),
        .M_AXI_IP_RVALID(1'b0),
        .M_AXI_IP_WDATA(NLW_U0_M_AXI_IP_WDATA_UNCONNECTED[31:0]),
        .M_AXI_IP_WLAST(NLW_U0_M_AXI_IP_WLAST_UNCONNECTED),
        .M_AXI_IP_WREADY(1'b0),
        .M_AXI_IP_WSTRB(NLW_U0_M_AXI_IP_WSTRB_UNCONNECTED[3:0]),
        .M_AXI_IP_WVALID(NLW_U0_M_AXI_IP_WVALID_UNCONNECTED),
        .Mb_Reset(1'b0),
        .Non_Secure({1'b0,1'b0,1'b0,1'b0}),
        .Pause(1'b0),
        .Pause_Ack(NLW_U0_Pause_Ack_UNCONNECTED),
        .RAM_From(NLW_U0_RAM_From_UNCONNECTED[255:0]),
        .RAM_To({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .Read_Strobe(Read_Strobe),
        .Reset(Reset),
        .Reset_Mode({1'b0,1'b0}),
        .S0_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXIS_TLAST(1'b0),
        .S0_AXIS_TREADY(NLW_U0_S0_AXIS_TREADY_UNCONNECTED),
        .S0_AXIS_TVALID(1'b0),
        .S10_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXIS_TLAST(1'b0),
        .S10_AXIS_TREADY(NLW_U0_S10_AXIS_TREADY_UNCONNECTED),
        .S10_AXIS_TVALID(1'b0),
        .S11_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXIS_TLAST(1'b0),
        .S11_AXIS_TREADY(NLW_U0_S11_AXIS_TREADY_UNCONNECTED),
        .S11_AXIS_TVALID(1'b0),
        .S12_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXIS_TLAST(1'b0),
        .S12_AXIS_TREADY(NLW_U0_S12_AXIS_TREADY_UNCONNECTED),
        .S12_AXIS_TVALID(1'b0),
        .S13_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXIS_TLAST(1'b0),
        .S13_AXIS_TREADY(NLW_U0_S13_AXIS_TREADY_UNCONNECTED),
        .S13_AXIS_TVALID(1'b0),
        .S14_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXIS_TLAST(1'b0),
        .S14_AXIS_TREADY(NLW_U0_S14_AXIS_TREADY_UNCONNECTED),
        .S14_AXIS_TVALID(1'b0),
        .S15_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXIS_TLAST(1'b0),
        .S15_AXIS_TREADY(NLW_U0_S15_AXIS_TREADY_UNCONNECTED),
        .S15_AXIS_TVALID(1'b0),
        .S1_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXIS_TLAST(1'b0),
        .S1_AXIS_TREADY(NLW_U0_S1_AXIS_TREADY_UNCONNECTED),
        .S1_AXIS_TVALID(1'b0),
        .S2_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXIS_TLAST(1'b0),
        .S2_AXIS_TREADY(NLW_U0_S2_AXIS_TREADY_UNCONNECTED),
        .S2_AXIS_TVALID(1'b0),
        .S3_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXIS_TLAST(1'b0),
        .S3_AXIS_TREADY(NLW_U0_S3_AXIS_TREADY_UNCONNECTED),
        .S3_AXIS_TVALID(1'b0),
        .S4_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXIS_TLAST(1'b0),
        .S4_AXIS_TREADY(NLW_U0_S4_AXIS_TREADY_UNCONNECTED),
        .S4_AXIS_TVALID(1'b0),
        .S5_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXIS_TLAST(1'b0),
        .S5_AXIS_TREADY(NLW_U0_S5_AXIS_TREADY_UNCONNECTED),
        .S5_AXIS_TVALID(1'b0),
        .S6_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXIS_TLAST(1'b0),
        .S6_AXIS_TREADY(NLW_U0_S6_AXIS_TREADY_UNCONNECTED),
        .S6_AXIS_TVALID(1'b0),
        .S7_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXIS_TLAST(1'b0),
        .S7_AXIS_TREADY(NLW_U0_S7_AXIS_TREADY_UNCONNECTED),
        .S7_AXIS_TVALID(1'b0),
        .S8_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXIS_TLAST(1'b0),
        .S8_AXIS_TREADY(NLW_U0_S8_AXIS_TREADY_UNCONNECTED),
        .S8_AXIS_TVALID(1'b0),
        .S9_AXIS_TDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXIS_TLAST(1'b0),
        .S9_AXIS_TREADY(NLW_U0_S9_AXIS_TREADY_UNCONNECTED),
        .S9_AXIS_TVALID(1'b0),
        .Scan_En(1'b0),
        .Scan_Reset(1'b0),
        .Scan_Reset_Sel(1'b0),
        .Sleep(NLW_U0_Sleep_UNCONNECTED),
        .Suspend(NLW_U0_Suspend_UNCONNECTED),
        .Trace_DCache_Hit(NLW_U0_Trace_DCache_Hit_UNCONNECTED),
        .Trace_DCache_Rdy(NLW_U0_Trace_DCache_Rdy_UNCONNECTED),
        .Trace_DCache_Read(NLW_U0_Trace_DCache_Read_UNCONNECTED),
        .Trace_DCache_Req(NLW_U0_Trace_DCache_Req_UNCONNECTED),
        .Trace_Data_Access(NLW_U0_Trace_Data_Access_UNCONNECTED),
        .Trace_Data_Address(NLW_U0_Trace_Data_Address_UNCONNECTED[0:31]),
        .Trace_Data_Byte_Enable(NLW_U0_Trace_Data_Byte_Enable_UNCONNECTED[0:3]),
        .Trace_Data_Read(NLW_U0_Trace_Data_Read_UNCONNECTED),
        .Trace_Data_Write(NLW_U0_Trace_Data_Write_UNCONNECTED),
        .Trace_Data_Write_Value(NLW_U0_Trace_Data_Write_Value_UNCONNECTED[0:31]),
        .Trace_Delay_Slot(NLW_U0_Trace_Delay_Slot_UNCONNECTED),
        .Trace_EX_PipeRun(NLW_U0_Trace_EX_PipeRun_UNCONNECTED),
        .Trace_Exception_Kind(NLW_U0_Trace_Exception_Kind_UNCONNECTED[0:4]),
        .Trace_Exception_Taken(NLW_U0_Trace_Exception_Taken_UNCONNECTED),
        .Trace_ICache_Hit(NLW_U0_Trace_ICache_Hit_UNCONNECTED),
        .Trace_ICache_Rdy(NLW_U0_Trace_ICache_Rdy_UNCONNECTED),
        .Trace_ICache_Req(NLW_U0_Trace_ICache_Req_UNCONNECTED),
        .Trace_Instruction(NLW_U0_Trace_Instruction_UNCONNECTED[0:31]),
        .Trace_Jump_Hit(NLW_U0_Trace_Jump_Hit_UNCONNECTED),
        .Trace_Jump_Taken(NLW_U0_Trace_Jump_Taken_UNCONNECTED),
        .Trace_MB_Halted(NLW_U0_Trace_MB_Halted_UNCONNECTED),
        .Trace_MEM_PipeRun(NLW_U0_Trace_MEM_PipeRun_UNCONNECTED),
        .Trace_MSR_Reg(NLW_U0_Trace_MSR_Reg_UNCONNECTED[0:14]),
        .Trace_New_Reg_Value(NLW_U0_Trace_New_Reg_Value_UNCONNECTED[0:31]),
        .Trace_OF_PipeRun(NLW_U0_Trace_OF_PipeRun_UNCONNECTED),
        .Trace_PC(NLW_U0_Trace_PC_UNCONNECTED[0:31]),
        .Trace_PID_Reg(NLW_U0_Trace_PID_Reg_UNCONNECTED[0:7]),
        .Trace_Reg_Addr(NLW_U0_Trace_Reg_Addr_UNCONNECTED[0:4]),
        .Trace_Reg_Write(NLW_U0_Trace_Reg_Write_UNCONNECTED),
        .Trace_Valid_Instr(NLW_U0_Trace_Valid_Instr_UNCONNECTED),
        .Wakeup({1'b0,1'b0}),
        .Write_Strobe(Write_Strobe));
endmodule

(* ORIG_REF_NAME = "ALU" *) 
module microblaze_microblaze_0_0_ALU
   (ex_fwd,
    ex_databus_addr,
    D,
    ex_sel_alu_reg,
    ex_sel_alu_reg_0,
    LO,
    ex_alu_result,
    ex_use_carry,
    DI_0,
    \m0_addr_3lsb_reg[2] ,
    S_1,
    ex_unsigned_op,
    Q,
    \m0_databus_addr_i_reg[9] ,
    \Using_FPGA.Native ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    I2,
    I0,
    \m0_Ex_Result_i_reg[23] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    \m0_Ex_Result_i_reg[22] ,
    \m0_Ex_Result_i_reg[21] ,
    \m0_Ex_Result_i_reg[20] ,
    \m0_Ex_Result_i_reg[19] ,
    \m0_Ex_Result_i_reg[18] ,
    \m0_Ex_Result_i_reg[17] ,
    \m0_Ex_Result_i_reg[16] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output [2:0]ex_fwd;
  output [29:0]ex_databus_addr;
  output [4:0]D;
  output ex_sel_alu_reg;
  output ex_sel_alu_reg_0;
  output LO;
  output [1:0]ex_alu_result;
  input ex_use_carry;
  input DI_0;
  input \m0_addr_3lsb_reg[2] ;
  input S_1;
  input ex_unsigned_op;
  input [31:0]Q;
  input [1:0]\m0_databus_addr_i_reg[9] ;
  input [31:0]\Using_FPGA.Native ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input I2;
  input I0;
  input \m0_Ex_Result_i_reg[23] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input \m0_Ex_Result_i_reg[22] ;
  input \m0_Ex_Result_i_reg[21] ;
  input \m0_Ex_Result_i_reg[20] ;
  input \m0_Ex_Result_i_reg[19] ;
  input \m0_Ex_Result_i_reg[18] ;
  input \m0_Ex_Result_i_reg[17] ;
  input \m0_Ex_Result_i_reg[16] ;
  input lopt;
  input lopt_1;
  output lopt_2;
  output lopt_3;
  input lopt_4;

  wire [4:0]D;
  wire DI_0;
  wire EX_Enable_ALU;
  wire I0;
  wire I2;
  wire LO;
  wire [31:0]Q;
  wire S_1;
  wire [31:0]\Using_FPGA.Native ;
  wire alu_carry_1;
  wire alu_carry_10;
  wire alu_carry_11;
  wire alu_carry_12;
  wire alu_carry_13;
  wire alu_carry_14;
  wire alu_carry_15;
  wire alu_carry_16;
  wire alu_carry_17;
  wire alu_carry_18;
  wire alu_carry_19;
  wire alu_carry_2;
  wire alu_carry_20;
  wire alu_carry_21;
  wire alu_carry_22;
  wire alu_carry_23;
  wire alu_carry_24;
  wire alu_carry_25;
  wire alu_carry_26;
  wire alu_carry_27;
  wire alu_carry_28;
  wire alu_carry_29;
  wire alu_carry_3;
  wire alu_carry_30;
  wire alu_carry_31;
  wire alu_carry_4;
  wire alu_carry_5;
  wire alu_carry_6;
  wire alu_carry_7;
  wire alu_carry_8;
  wire alu_carry_9;
  wire alu_carry_in;
  wire [1:0]ex_alu_result;
  wire ex_alu_sel_logic;
  wire [29:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire [2:0]ex_fwd;
  wire ex_sel_alu_reg;
  wire ex_sel_alu_reg_0;
  wire ex_sel_alu_res;
  wire ex_unsigned_op;
  wire ex_use_carry;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire \m0_Ex_Result_i_reg[16] ;
  wire \m0_Ex_Result_i_reg[17] ;
  wire \m0_Ex_Result_i_reg[18] ;
  wire \m0_Ex_Result_i_reg[19] ;
  wire \m0_Ex_Result_i_reg[20] ;
  wire \m0_Ex_Result_i_reg[21] ;
  wire \m0_Ex_Result_i_reg[22] ;
  wire \m0_Ex_Result_i_reg[23] ;
  wire \m0_addr_3lsb_reg[2] ;
  wire [1:0]\m0_databus_addr_i_reg[9] ;

  microblaze_microblaze_0_0_MB_MUXCY_823 \Use_Carry_Decoding.CarryIn_MUXCY 
       (.CI(alu_carry_in),
        .DI_0(DI_0),
        .ex_use_carry(ex_use_carry),
        .lopt(lopt),
        .\m0_addr_3lsb_reg[2] (\m0_addr_3lsb_reg[2] ));
  microblaze_microblaze_0_0_ALU_Bit__parameterized2 \Using_FPGA.ALL_Bits[0].ALU_Bit_I1 
       (.EX_Enable_ALU(EX_Enable_ALU),
        .\EX_Op2_reg[0] (LO),
        .I0(I0),
        .I2(I2),
        .LO(alu_carry_31),
        .Q(Q[31]),
        .S_1(S_1),
        .\Using_FPGA.Native (\Using_FPGA.Native [31]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[29]),
        .ex_unsigned_op(ex_unsigned_op),
        .lopt(lopt_92),
        .lopt_1(lopt_93),
        .lopt_2(lopt_94),
        .lopt_3(lopt_95),
        .lopt_4(lopt_97),
        .\m0_databus_addr_i_reg[0] (\m0_databus_addr_i_reg[9] ));
  microblaze_microblaze_0_0_ALU_Bit \Using_FPGA.ALL_Bits[10].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_22),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_21),
        .Q(Q[21]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[19]),
        .lopt(lopt_65),
        .lopt_1(lopt_66),
        .lopt_10(lopt_75),
        .lopt_11(lopt_76),
        .lopt_2(lopt_67),
        .lopt_3(lopt_68),
        .lopt_4(lopt_69),
        .lopt_5(lopt_70),
        .lopt_6(lopt_71),
        .lopt_7(lopt_72),
        .lopt_8(lopt_73),
        .lopt_9(lopt_74),
        .\m0_databus_addr_i_reg[10] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[10]_0 (\Using_FPGA.Native [21]));
  microblaze_microblaze_0_0_ALU_Bit_824 \Using_FPGA.ALL_Bits[11].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_21),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_20),
        .Q(Q[20]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[18]),
        .lopt(lopt_59),
        .lopt_1(lopt_60),
        .lopt_2(lopt_61),
        .lopt_3(lopt_64),
        .\m0_databus_addr_i_reg[11] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[11]_0 (\Using_FPGA.Native [20]));
  microblaze_microblaze_0_0_ALU_Bit_825 \Using_FPGA.ALL_Bits[12].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_20),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_19),
        .Q(Q[19]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[17]),
        .lopt(lopt_56),
        .lopt_1(lopt_57),
        .lopt_2(lopt_58),
        .lopt_3(lopt_63),
        .\m0_databus_addr_i_reg[12] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[12]_0 (\Using_FPGA.Native [19]));
  microblaze_microblaze_0_0_ALU_Bit_826 \Using_FPGA.ALL_Bits[13].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_19),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_18),
        .Q(Q[18]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[16]),
        .lopt(lopt_53),
        .lopt_1(lopt_54),
        .lopt_2(lopt_55),
        .lopt_3(lopt_62),
        .\m0_databus_addr_i_reg[13] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[13]_0 (\Using_FPGA.Native [18]));
  microblaze_microblaze_0_0_ALU_Bit_827 \Using_FPGA.ALL_Bits[14].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_18),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_17),
        .Q(Q[17]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[15]),
        .lopt(lopt_53),
        .lopt_1(lopt_54),
        .lopt_10(lopt_63),
        .lopt_11(lopt_64),
        .lopt_2(lopt_55),
        .lopt_3(lopt_56),
        .lopt_4(lopt_57),
        .lopt_5(lopt_58),
        .lopt_6(lopt_59),
        .lopt_7(lopt_60),
        .lopt_8(lopt_61),
        .lopt_9(lopt_62),
        .\m0_databus_addr_i_reg[14] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[14]_0 (\Using_FPGA.Native [17]));
  microblaze_microblaze_0_0_ALU_Bit_828 \Using_FPGA.ALL_Bits[15].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_17),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_16),
        .Q(Q[16]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[14]),
        .lopt(lopt_47),
        .lopt_1(lopt_48),
        .lopt_2(lopt_49),
        .lopt_3(lopt_52),
        .\m0_databus_addr_i_reg[15] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[15]_0 (\Using_FPGA.Native [16]));
  microblaze_microblaze_0_0_ALU_Bit_829 \Using_FPGA.ALL_Bits[16].ALU_Bit_I1 
       (.D(D[4]),
        .EX_CarryOut(alu_carry_16),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_15),
        .Q(Q[15]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[13]),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt_44),
        .lopt_1(lopt_45),
        .lopt_2(lopt_46),
        .lopt_3(lopt_51),
        .\m0_Ex_Result_i_reg[16] (\m0_Ex_Result_i_reg[16] ),
        .\m0_databus_addr_i_reg[16] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[16]_0 (\Using_FPGA.Native [15]));
  microblaze_microblaze_0_0_ALU_Bit_830 \Using_FPGA.ALL_Bits[17].ALU_Bit_I1 
       (.D(D[3]),
        .EX_CarryOut(alu_carry_15),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_14),
        .Q(Q[14]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[12]),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt_41),
        .lopt_1(lopt_42),
        .lopt_2(lopt_43),
        .lopt_3(lopt_50),
        .\m0_Ex_Result_i_reg[17] (\m0_Ex_Result_i_reg[17] ),
        .\m0_databus_addr_i_reg[17] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[17]_0 (\Using_FPGA.Native [14]));
  microblaze_microblaze_0_0_ALU_Bit_831 \Using_FPGA.ALL_Bits[18].ALU_Bit_I1 
       (.D(D[2]),
        .EX_CarryOut(alu_carry_14),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_13),
        .Q(Q[13]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[11]),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt_41),
        .lopt_1(lopt_42),
        .lopt_10(lopt_51),
        .lopt_11(lopt_52),
        .lopt_2(lopt_43),
        .lopt_3(lopt_44),
        .lopt_4(lopt_45),
        .lopt_5(lopt_46),
        .lopt_6(lopt_47),
        .lopt_7(lopt_48),
        .lopt_8(lopt_49),
        .lopt_9(lopt_50),
        .\m0_Ex_Result_i_reg[18] (\m0_Ex_Result_i_reg[18] ),
        .\m0_databus_addr_i_reg[18] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[18]_0 (\Using_FPGA.Native [13]));
  microblaze_microblaze_0_0_ALU_Bit_832 \Using_FPGA.ALL_Bits[19].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_13),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_12),
        .Q(Q[12]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[10]),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_fwd(ex_fwd[2]),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt_35),
        .lopt_1(lopt_36),
        .lopt_2(lopt_37),
        .lopt_3(lopt_40),
        .\m0_Ex_Result_i_reg[19] (\m0_Ex_Result_i_reg[19] ),
        .\m0_databus_addr_i_reg[19] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[19]_0 (\Using_FPGA.Native [12]));
  microblaze_microblaze_0_0_ALU_Bit_833 \Using_FPGA.ALL_Bits[1].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_31),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_30),
        .Q(Q[30]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[28]),
        .lopt(lopt_89),
        .lopt_1(lopt_90),
        .lopt_2(lopt_91),
        .lopt_3(lopt_96),
        .\m0_databus_addr_i_reg[1] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[1]_0 (\Using_FPGA.Native [30]));
  microblaze_microblaze_0_0_ALU_Bit_834 \Using_FPGA.ALL_Bits[20].ALU_Bit_I1 
       (.D(D[1]),
        .EX_CarryOut(alu_carry_12),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_11),
        .Q(Q[11]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[9]),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt_32),
        .lopt_1(lopt_33),
        .lopt_2(lopt_34),
        .lopt_3(lopt_39),
        .\m0_Ex_Result_i_reg[20] (\m0_Ex_Result_i_reg[20] ),
        .\m0_databus_addr_i_reg[20] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[20]_0 (\Using_FPGA.Native [11]));
  microblaze_microblaze_0_0_ALU_Bit_835 \Using_FPGA.ALL_Bits[21].ALU_Bit_I1 
       (.D(D[0]),
        .EX_CarryOut(alu_carry_11),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_10),
        .Q(Q[10]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[8]),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt_29),
        .lopt_1(lopt_30),
        .lopt_2(lopt_31),
        .lopt_3(lopt_38),
        .\m0_Ex_Result_i_reg[21] (\m0_Ex_Result_i_reg[21] ),
        .\m0_databus_addr_i_reg[21] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[21]_0 (\Using_FPGA.Native [10]));
  microblaze_microblaze_0_0_ALU_Bit_836 \Using_FPGA.ALL_Bits[22].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_10),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_9),
        .Q(Q[9]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[7]),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_fwd(ex_fwd[1]),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt_29),
        .lopt_1(lopt_30),
        .lopt_10(lopt_39),
        .lopt_11(lopt_40),
        .lopt_2(lopt_31),
        .lopt_3(lopt_32),
        .lopt_4(lopt_33),
        .lopt_5(lopt_34),
        .lopt_6(lopt_35),
        .lopt_7(lopt_36),
        .lopt_8(lopt_37),
        .lopt_9(lopt_38),
        .\m0_Ex_Result_i_reg[22] (\m0_Ex_Result_i_reg[22] ),
        .\m0_databus_addr_i_reg[22] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[22]_0 (\Using_FPGA.Native [9]));
  microblaze_microblaze_0_0_ALU_Bit_837 \Using_FPGA.ALL_Bits[23].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_9),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_8),
        .Q(Q[8]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[6]),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_fwd(ex_fwd[0]),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt_23),
        .lopt_1(lopt_24),
        .lopt_2(lopt_25),
        .lopt_3(lopt_28),
        .\m0_Ex_Result_i_reg[23] (\m0_Ex_Result_i_reg[23] ),
        .\m0_databus_addr_i_reg[23] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[23]_0 (\Using_FPGA.Native [8]));
  microblaze_microblaze_0_0_ALU_Bit_838 \Using_FPGA.ALL_Bits[24].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_8),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_7),
        .Q(Q[7]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[5]),
        .lopt(lopt_20),
        .lopt_1(lopt_21),
        .lopt_2(lopt_22),
        .lopt_3(lopt_27),
        .\m0_databus_addr_i_reg[24] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[24]_0 (\Using_FPGA.Native [7]));
  microblaze_microblaze_0_0_ALU_Bit_839 \Using_FPGA.ALL_Bits[25].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_7),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_6),
        .Q(Q[6]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[4]),
        .lopt(lopt_17),
        .lopt_1(lopt_18),
        .lopt_2(lopt_19),
        .lopt_3(lopt_26),
        .\m0_databus_addr_i_reg[25] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[25]_0 (\Using_FPGA.Native [6]));
  microblaze_microblaze_0_0_ALU_Bit_840 \Using_FPGA.ALL_Bits[26].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_6),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_5),
        .Q(Q[5]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[3]),
        .ex_sel_alu_reg(ex_sel_alu_reg),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt_17),
        .lopt_1(lopt_18),
        .lopt_10(lopt_27),
        .lopt_11(lopt_28),
        .lopt_2(lopt_19),
        .lopt_3(lopt_20),
        .lopt_4(lopt_21),
        .lopt_5(lopt_22),
        .lopt_6(lopt_23),
        .lopt_7(lopt_24),
        .lopt_8(lopt_25),
        .lopt_9(lopt_26),
        .\m0_databus_addr_i_reg[26] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[26]_0 (\Using_FPGA.Native [5]));
  microblaze_microblaze_0_0_ALU_Bit_841 \Using_FPGA.ALL_Bits[27].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_5),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_4),
        .Q(Q[4]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[2]),
        .ex_sel_alu_reg(ex_sel_alu_reg_0),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt_11),
        .lopt_1(lopt_12),
        .lopt_2(lopt_13),
        .lopt_3(lopt_16),
        .\m0_databus_addr_i_reg[27] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[27]_0 (\Using_FPGA.Native [4]));
  microblaze_microblaze_0_0_ALU_Bit_842 \Using_FPGA.ALL_Bits[28].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_4),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_3),
        .Q(Q[3]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[1]),
        .lopt(lopt_8),
        .lopt_1(lopt_9),
        .lopt_2(lopt_10),
        .lopt_3(lopt_15),
        .\m0_databus_addr_i_reg[28] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[28]_0 (\Using_FPGA.Native [3]));
  microblaze_microblaze_0_0_ALU_Bit_843 \Using_FPGA.ALL_Bits[29].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_3),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_2),
        .Q(Q[2]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[0]),
        .lopt(lopt_5),
        .lopt_1(lopt_6),
        .lopt_2(lopt_7),
        .lopt_3(lopt_14),
        .\m0_databus_addr_i_reg[29] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[29]_0 (\Using_FPGA.Native [2]));
  microblaze_microblaze_0_0_ALU_Bit_844 \Using_FPGA.ALL_Bits[2].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_30),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_29),
        .Q(Q[29]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[27]),
        .lopt(lopt_89),
        .lopt_1(lopt_90),
        .lopt_10(lopt_97),
        .lopt_2(lopt_91),
        .lopt_3(lopt_92),
        .lopt_4(ex_unsigned_op),
        .lopt_5(S_1),
        .lopt_6(lopt_93),
        .lopt_7(lopt_94),
        .lopt_8(lopt_95),
        .lopt_9(lopt_96),
        .\m0_databus_addr_i_reg[2] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[2]_0 (\Using_FPGA.Native [29]));
  microblaze_microblaze_0_0_ALU_Bit_845 \Using_FPGA.ALL_Bits[30].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_2),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_1),
        .Q(Q[1]),
        .ex_alu_result(ex_alu_result[1]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .lopt(lopt_5),
        .lopt_1(lopt_6),
        .lopt_10(lopt_15),
        .lopt_11(lopt_16),
        .lopt_2(lopt_7),
        .lopt_3(lopt_8),
        .lopt_4(lopt_9),
        .lopt_5(lopt_10),
        .lopt_6(lopt_11),
        .lopt_7(lopt_12),
        .lopt_8(lopt_13),
        .lopt_9(lopt_14),
        .\m0_addr_3lsb_reg[1] (\m0_databus_addr_i_reg[9] ),
        .\m0_addr_3lsb_reg[1]_0 (\Using_FPGA.Native [1]));
  microblaze_microblaze_0_0_ALU_Bit_846 \Using_FPGA.ALL_Bits[31].ALU_Bit_I1 
       (.EX_CarryIn(alu_carry_in),
        .EX_CarryOut(alu_carry_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q[0]),
        .ex_alu_result(ex_alu_result[0]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .lopt(lopt_1),
        .lopt_1(lopt_2),
        .lopt_2(lopt_3),
        .lopt_3(lopt_4),
        .\m0_addr_3lsb_reg[2] (\m0_databus_addr_i_reg[9] ),
        .\m0_addr_3lsb_reg[2]_0 (\Using_FPGA.Native [0]));
  microblaze_microblaze_0_0_ALU_Bit_847 \Using_FPGA.ALL_Bits[3].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_29),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_28),
        .Q(Q[28]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[26]),
        .lopt(lopt_83),
        .lopt_1(lopt_84),
        .lopt_2(lopt_85),
        .lopt_3(lopt_88),
        .\m0_databus_addr_i_reg[3] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[3]_0 (\Using_FPGA.Native [28]));
  microblaze_microblaze_0_0_ALU_Bit_848 \Using_FPGA.ALL_Bits[4].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_28),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_27),
        .Q(Q[27]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[25]),
        .lopt(lopt_80),
        .lopt_1(lopt_81),
        .lopt_2(lopt_82),
        .lopt_3(lopt_87),
        .\m0_databus_addr_i_reg[4] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[4]_0 (\Using_FPGA.Native [27]));
  microblaze_microblaze_0_0_ALU_Bit_849 \Using_FPGA.ALL_Bits[5].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_27),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_26),
        .Q(Q[26]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[24]),
        .lopt(lopt_77),
        .lopt_1(lopt_78),
        .lopt_2(lopt_79),
        .lopt_3(lopt_86),
        .\m0_databus_addr_i_reg[5] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[5]_0 (\Using_FPGA.Native [26]));
  microblaze_microblaze_0_0_ALU_Bit_850 \Using_FPGA.ALL_Bits[6].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_26),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_25),
        .Q(Q[25]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[23]),
        .lopt(lopt_77),
        .lopt_1(lopt_78),
        .lopt_10(lopt_87),
        .lopt_11(lopt_88),
        .lopt_2(lopt_79),
        .lopt_3(lopt_80),
        .lopt_4(lopt_81),
        .lopt_5(lopt_82),
        .lopt_6(lopt_83),
        .lopt_7(lopt_84),
        .lopt_8(lopt_85),
        .lopt_9(lopt_86),
        .\m0_databus_addr_i_reg[6] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[6]_0 (\Using_FPGA.Native [25]));
  microblaze_microblaze_0_0_ALU_Bit_851 \Using_FPGA.ALL_Bits[7].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_25),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_24),
        .Q(Q[24]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[22]),
        .lopt(lopt_71),
        .lopt_1(lopt_72),
        .lopt_2(lopt_73),
        .lopt_3(lopt_76),
        .\m0_databus_addr_i_reg[7] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[7]_0 (\Using_FPGA.Native [24]));
  microblaze_microblaze_0_0_ALU_Bit_852 \Using_FPGA.ALL_Bits[8].ALU_Bit_I1 
       (.EX_CarryOut(alu_carry_24),
        .EX_Enable_ALU(EX_Enable_ALU),
        .LO(alu_carry_23),
        .Q(Q[23]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[21]),
        .lopt(lopt_68),
        .lopt_1(lopt_69),
        .lopt_2(lopt_70),
        .lopt_3(lopt_75),
        .\m0_databus_addr_i_reg[8] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[8]_0 (\Using_FPGA.Native [23]));
  microblaze_microblaze_0_0_ALU_Bit_853 \Using_FPGA.ALL_Bits[9].ALU_Bit_I1 
       (.EX_CarryIn(alu_carry_22),
        .EX_CarryOut(alu_carry_23),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q[22]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr[20]),
        .lopt(lopt_65),
        .lopt_1(lopt_66),
        .lopt_2(lopt_67),
        .lopt_3(lopt_74),
        .\m0_databus_addr_i_reg[9] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[9]_0 (\Using_FPGA.Native [22]));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[10] ,
    \m0_databus_addr_i_reg[10]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[10] ;
  input [0:0]\m0_databus_addr_i_reg[10]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [1:0]\m0_databus_addr_i_reg[10] ;
  wire [0:0]\m0_databus_addr_i_reg[10]_0 ;
  wire op2_is_1;

  microblaze_microblaze_0_0_MB_LUT6_2_913 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[10] (\m0_databus_addr_i_reg[10] ),
        .\m0_databus_addr_i_reg[10]_0 (\m0_databus_addr_i_reg[10]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_914 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_824
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[11] ,
    \m0_databus_addr_i_reg[11]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[11] ;
  input [0:0]\m0_databus_addr_i_reg[11]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[11] ;
  wire [0:0]\m0_databus_addr_i_reg[11]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_911 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[11] (\m0_databus_addr_i_reg[11] ),
        .\m0_databus_addr_i_reg[11]_0 (\m0_databus_addr_i_reg[11]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_912 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_825
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[12] ,
    \m0_databus_addr_i_reg[12]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[12] ;
  input [0:0]\m0_databus_addr_i_reg[12]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[12] ;
  wire [0:0]\m0_databus_addr_i_reg[12]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_909 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[12] (\m0_databus_addr_i_reg[12] ),
        .\m0_databus_addr_i_reg[12]_0 (\m0_databus_addr_i_reg[12]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_910 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_826
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[13] ,
    \m0_databus_addr_i_reg[13]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[13] ;
  input [0:0]\m0_databus_addr_i_reg[13]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[13] ;
  wire [0:0]\m0_databus_addr_i_reg[13]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_907 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[13] (\m0_databus_addr_i_reg[13] ),
        .\m0_databus_addr_i_reg[13]_0 (\m0_databus_addr_i_reg[13]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_908 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_827
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[14] ,
    \m0_databus_addr_i_reg[14]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[14] ;
  input [0:0]\m0_databus_addr_i_reg[14]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [1:0]\m0_databus_addr_i_reg[14] ;
  wire [0:0]\m0_databus_addr_i_reg[14]_0 ;
  wire op2_is_1;

  microblaze_microblaze_0_0_MB_LUT6_2_905 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[14] (\m0_databus_addr_i_reg[14] ),
        .\m0_databus_addr_i_reg[14]_0 (\m0_databus_addr_i_reg[14]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_906 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_828
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[15] ,
    \m0_databus_addr_i_reg[15]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[15] ;
  input [0:0]\m0_databus_addr_i_reg[15]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[15] ;
  wire [0:0]\m0_databus_addr_i_reg[15]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_903 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[15] (\m0_databus_addr_i_reg[15] ),
        .\m0_databus_addr_i_reg[15]_0 (\m0_databus_addr_i_reg[15]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_904 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_829
   (D,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[16] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    Q,
    \m0_databus_addr_i_reg[16] ,
    \m0_databus_addr_i_reg[16]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output [0:0]D;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[16] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[16] ;
  input [0:0]\m0_databus_addr_i_reg[16]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]D;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire ex_sel_alu_res;
  wire lopt;
  wire \^lopt_1 ;
  wire \m0_Ex_Result_i_reg[16] ;
  wire [1:0]\m0_databus_addr_i_reg[16] ;
  wire [0:0]\m0_databus_addr_i_reg[16]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_901 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[16] (\m0_databus_addr_i_reg[16] ),
        .\m0_databus_addr_i_reg[16]_0 (\m0_databus_addr_i_reg[16]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_902 \Not_Last_Bit.MUXCY_XOR_I 
       (.D(D),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ),
        .\m0_Ex_Result_i_reg[16] (\m0_Ex_Result_i_reg[16] ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_830
   (D,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[17] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    Q,
    \m0_databus_addr_i_reg[17] ,
    \m0_databus_addr_i_reg[17]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output [0:0]D;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[17] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[17] ;
  input [0:0]\m0_databus_addr_i_reg[17]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]D;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire ex_sel_alu_res;
  wire lopt;
  wire \^lopt_1 ;
  wire \m0_Ex_Result_i_reg[17] ;
  wire [1:0]\m0_databus_addr_i_reg[17] ;
  wire [0:0]\m0_databus_addr_i_reg[17]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_899 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[17] (\m0_databus_addr_i_reg[17] ),
        .\m0_databus_addr_i_reg[17]_0 (\m0_databus_addr_i_reg[17]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_900 \Not_Last_Bit.MUXCY_XOR_I 
       (.D(D),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ),
        .\m0_Ex_Result_i_reg[17] (\m0_Ex_Result_i_reg[17] ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_831
   (D,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[18] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    Q,
    \m0_databus_addr_i_reg[18] ,
    \m0_databus_addr_i_reg[18]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output [0:0]D;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[18] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[18] ;
  input [0:0]\m0_databus_addr_i_reg[18]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]D;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire ex_sel_alu_res;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire \m0_Ex_Result_i_reg[18] ;
  wire [1:0]\m0_databus_addr_i_reg[18] ;
  wire [0:0]\m0_databus_addr_i_reg[18]_0 ;
  wire op2_is_1;

  microblaze_microblaze_0_0_MB_LUT6_2_897 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[18] (\m0_databus_addr_i_reg[18] ),
        .\m0_databus_addr_i_reg[18]_0 (\m0_databus_addr_i_reg[18]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_898 \Not_Last_Bit.MUXCY_XOR_I 
       (.D(D),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9),
        .\m0_Ex_Result_i_reg[18] (\m0_Ex_Result_i_reg[18] ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_832
   (ex_fwd,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[19] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    Q,
    \m0_databus_addr_i_reg[19] ,
    \m0_databus_addr_i_reg[19]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output [0:0]ex_fwd;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[19] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[19] ;
  input [0:0]\m0_databus_addr_i_reg[19]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire [0:0]ex_fwd;
  wire ex_sel_alu_res;
  wire lopt;
  wire \^lopt_1 ;
  wire \m0_Ex_Result_i_reg[19] ;
  wire [1:0]\m0_databus_addr_i_reg[19] ;
  wire [0:0]\m0_databus_addr_i_reg[19]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_895 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[19] (\m0_databus_addr_i_reg[19] ),
        .\m0_databus_addr_i_reg[19]_0 (\m0_databus_addr_i_reg[19]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_896 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_fwd(ex_fwd),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ),
        .\m0_Ex_Result_i_reg[19] (\m0_Ex_Result_i_reg[19] ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_833
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[1] ,
    \m0_databus_addr_i_reg[1]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[1] ;
  input [0:0]\m0_databus_addr_i_reg[1]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[1] ;
  wire [0:0]\m0_databus_addr_i_reg[1]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_893 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[1] (\m0_databus_addr_i_reg[1] ),
        .\m0_databus_addr_i_reg[1]_0 (\m0_databus_addr_i_reg[1]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_894 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_834
   (D,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[20] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    Q,
    \m0_databus_addr_i_reg[20] ,
    \m0_databus_addr_i_reg[20]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output [0:0]D;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[20] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[20] ;
  input [0:0]\m0_databus_addr_i_reg[20]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]D;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire ex_sel_alu_res;
  wire lopt;
  wire \^lopt_1 ;
  wire \m0_Ex_Result_i_reg[20] ;
  wire [1:0]\m0_databus_addr_i_reg[20] ;
  wire [0:0]\m0_databus_addr_i_reg[20]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_891 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[20] (\m0_databus_addr_i_reg[20] ),
        .\m0_databus_addr_i_reg[20]_0 (\m0_databus_addr_i_reg[20]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_892 \Not_Last_Bit.MUXCY_XOR_I 
       (.D(D),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ),
        .\m0_Ex_Result_i_reg[20] (\m0_Ex_Result_i_reg[20] ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_835
   (D,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[21] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    Q,
    \m0_databus_addr_i_reg[21] ,
    \m0_databus_addr_i_reg[21]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output [0:0]D;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[21] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[21] ;
  input [0:0]\m0_databus_addr_i_reg[21]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire [0:0]D;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire ex_sel_alu_res;
  wire lopt;
  wire \^lopt_1 ;
  wire \m0_Ex_Result_i_reg[21] ;
  wire [1:0]\m0_databus_addr_i_reg[21] ;
  wire [0:0]\m0_databus_addr_i_reg[21]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_889 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[21] (\m0_databus_addr_i_reg[21] ),
        .\m0_databus_addr_i_reg[21]_0 (\m0_databus_addr_i_reg[21]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_890 \Not_Last_Bit.MUXCY_XOR_I 
       (.D(D),
        .DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ),
        .\m0_Ex_Result_i_reg[21] (\m0_Ex_Result_i_reg[21] ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_836
   (ex_fwd,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[22] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    Q,
    \m0_databus_addr_i_reg[22] ,
    \m0_databus_addr_i_reg[22]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output [0:0]ex_fwd;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[22] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[22] ;
  input [0:0]\m0_databus_addr_i_reg[22]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire [0:0]ex_fwd;
  wire ex_sel_alu_res;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire \m0_Ex_Result_i_reg[22] ;
  wire [1:0]\m0_databus_addr_i_reg[22] ;
  wire [0:0]\m0_databus_addr_i_reg[22]_0 ;
  wire op2_is_1;

  microblaze_microblaze_0_0_MB_LUT6_2_887 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[22] (\m0_databus_addr_i_reg[22] ),
        .\m0_databus_addr_i_reg[22]_0 (\m0_databus_addr_i_reg[22]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_888 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_fwd(ex_fwd),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9),
        .\m0_Ex_Result_i_reg[22] (\m0_Ex_Result_i_reg[22] ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_837
   (ex_fwd,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[23] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    Q,
    \m0_databus_addr_i_reg[23] ,
    \m0_databus_addr_i_reg[23]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output [0:0]ex_fwd;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[23] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[23] ;
  input [0:0]\m0_databus_addr_i_reg[23]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire [0:0]ex_fwd;
  wire ex_sel_alu_res;
  wire lopt;
  wire \^lopt_1 ;
  wire \m0_Ex_Result_i_reg[23] ;
  wire [1:0]\m0_databus_addr_i_reg[23] ;
  wire [0:0]\m0_databus_addr_i_reg[23]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_885 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[23] (\m0_databus_addr_i_reg[23] ),
        .\m0_databus_addr_i_reg[23]_0 (\m0_databus_addr_i_reg[23]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_886 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_fwd(ex_fwd),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ),
        .\m0_Ex_Result_i_reg[23] (\m0_Ex_Result_i_reg[23] ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_838
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[24] ,
    \m0_databus_addr_i_reg[24]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[24] ;
  input [0:0]\m0_databus_addr_i_reg[24]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[24] ;
  wire [0:0]\m0_databus_addr_i_reg[24]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_883 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[24] (\m0_databus_addr_i_reg[24] ),
        .\m0_databus_addr_i_reg[24]_0 (\m0_databus_addr_i_reg[24]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_884 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_839
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[25] ,
    \m0_databus_addr_i_reg[25]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[25] ;
  input [0:0]\m0_databus_addr_i_reg[25]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[25] ;
  wire [0:0]\m0_databus_addr_i_reg[25]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_881 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[25] (\m0_databus_addr_i_reg[25] ),
        .\m0_databus_addr_i_reg[25]_0 (\m0_databus_addr_i_reg[25]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_882 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_840
   (ex_sel_alu_reg,
    ex_databus_addr,
    EX_CarryOut,
    ex_sel_alu_res,
    Q,
    \m0_databus_addr_i_reg[26] ,
    \m0_databus_addr_i_reg[26]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output ex_sel_alu_reg;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input ex_sel_alu_res;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[26] ;
  input [0:0]\m0_databus_addr_i_reg[26]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire ex_sel_alu_reg;
  wire ex_sel_alu_res;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [1:0]\m0_databus_addr_i_reg[26] ;
  wire [0:0]\m0_databus_addr_i_reg[26]_0 ;
  wire op2_is_1;

  microblaze_microblaze_0_0_MB_LUT6_2_879 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[26] (\m0_databus_addr_i_reg[26] ),
        .\m0_databus_addr_i_reg[26]_0 (\m0_databus_addr_i_reg[26]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_880 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .ex_sel_alu_reg(ex_sel_alu_reg),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_841
   (ex_sel_alu_reg,
    ex_databus_addr,
    EX_CarryOut,
    ex_sel_alu_res,
    Q,
    \m0_databus_addr_i_reg[27] ,
    \m0_databus_addr_i_reg[27]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output ex_sel_alu_reg;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input ex_sel_alu_res;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[27] ;
  input [0:0]\m0_databus_addr_i_reg[27]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire ex_sel_alu_reg;
  wire ex_sel_alu_res;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[27] ;
  wire [0:0]\m0_databus_addr_i_reg[27]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_877 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[27] (\m0_databus_addr_i_reg[27] ),
        .\m0_databus_addr_i_reg[27]_0 (\m0_databus_addr_i_reg[27]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_878 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .ex_sel_alu_reg(ex_sel_alu_reg),
        .ex_sel_alu_res(ex_sel_alu_res),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_842
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[28] ,
    \m0_databus_addr_i_reg[28]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[28] ;
  input [0:0]\m0_databus_addr_i_reg[28]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[28] ;
  wire [0:0]\m0_databus_addr_i_reg[28]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_875 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[28] (\m0_databus_addr_i_reg[28] ),
        .\m0_databus_addr_i_reg[28]_0 (\m0_databus_addr_i_reg[28]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_876 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_843
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[29] ,
    \m0_databus_addr_i_reg[29]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[29] ;
  input [0:0]\m0_databus_addr_i_reg[29]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[29] ;
  wire [0:0]\m0_databus_addr_i_reg[29]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_873 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[29] (\m0_databus_addr_i_reg[29] ),
        .\m0_databus_addr_i_reg[29]_0 (\m0_databus_addr_i_reg[29]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_874 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_844
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[2] ,
    \m0_databus_addr_i_reg[2]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[2] ;
  input [0:0]\m0_databus_addr_i_reg[2]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [1:0]\m0_databus_addr_i_reg[2] ;
  wire [0:0]\m0_databus_addr_i_reg[2]_0 ;
  wire op2_is_1;

  microblaze_microblaze_0_0_MB_LUT6_2_871 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[2] (\m0_databus_addr_i_reg[2] ),
        .\m0_databus_addr_i_reg[2]_0 (\m0_databus_addr_i_reg[2]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_872 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_845
   (EX_CarryOut,
    ex_alu_result,
    Q,
    \m0_addr_3lsb_reg[1] ,
    \m0_addr_3lsb_reg[1]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ex_alu_result;
  input [0:0]Q;
  input [1:0]\m0_addr_3lsb_reg[1] ;
  input [0:0]\m0_addr_3lsb_reg[1]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire [0:0]ex_alu_result;
  wire ex_alu_sel_logic;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [1:0]\m0_addr_3lsb_reg[1] ;
  wire [0:0]\m0_addr_3lsb_reg[1]_0 ;
  wire op2_is_1;

  microblaze_microblaze_0_0_MB_LUT6_2_869 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_addr_3lsb_reg[1] (\m0_addr_3lsb_reg[1] ),
        .\m0_addr_3lsb_reg[1]_0 (\m0_addr_3lsb_reg[1]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_870 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_alu_result(ex_alu_result),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_846
   (EX_CarryOut,
    ex_alu_result,
    Q,
    \m0_addr_3lsb_reg[2] ,
    \m0_addr_3lsb_reg[2]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    EX_CarryIn,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_alu_result;
  input [0:0]Q;
  input [1:0]\m0_addr_3lsb_reg[2] ;
  input [0:0]\m0_addr_3lsb_reg[2]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input EX_CarryIn;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryIn;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire alu_AddSub;
  wire [0:0]ex_alu_result;
  wire ex_alu_sel_logic;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_addr_3lsb_reg[2] ;
  wire [0:0]\m0_addr_3lsb_reg[2]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_867 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_addr_3lsb_reg[2] (\m0_addr_3lsb_reg[2] ),
        .\m0_addr_3lsb_reg[2]_0 (\m0_addr_3lsb_reg[2]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_868 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryIn(EX_CarryIn),
        .EX_CarryOut(EX_CarryOut),
        .S(alu_AddSub),
        .ex_alu_result(ex_alu_result),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_847
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[3] ,
    \m0_databus_addr_i_reg[3]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[3] ;
  input [0:0]\m0_databus_addr_i_reg[3]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[3] ;
  wire [0:0]\m0_databus_addr_i_reg[3]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_865 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[3] (\m0_databus_addr_i_reg[3] ),
        .\m0_databus_addr_i_reg[3]_0 (\m0_databus_addr_i_reg[3]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_866 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_848
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[4] ,
    \m0_databus_addr_i_reg[4]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[4] ;
  input [0:0]\m0_databus_addr_i_reg[4]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[4] ;
  wire [0:0]\m0_databus_addr_i_reg[4]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_863 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[4] (\m0_databus_addr_i_reg[4] ),
        .\m0_databus_addr_i_reg[4]_0 (\m0_databus_addr_i_reg[4]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_864 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_849
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[5] ,
    \m0_databus_addr_i_reg[5]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[5] ;
  input [0:0]\m0_databus_addr_i_reg[5]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[5] ;
  wire [0:0]\m0_databus_addr_i_reg[5]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_861 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[5] (\m0_databus_addr_i_reg[5] ),
        .\m0_databus_addr_i_reg[5]_0 (\m0_databus_addr_i_reg[5]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_862 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_850
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[6] ,
    \m0_databus_addr_i_reg[6]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[6] ;
  input [0:0]\m0_databus_addr_i_reg[6]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [1:0]\m0_databus_addr_i_reg[6] ;
  wire [0:0]\m0_databus_addr_i_reg[6]_0 ;
  wire op2_is_1;

  microblaze_microblaze_0_0_MB_LUT6_2_859 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[6] (\m0_databus_addr_i_reg[6] ),
        .\m0_databus_addr_i_reg[6]_0 (\m0_databus_addr_i_reg[6]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_860 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_851
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[7] ,
    \m0_databus_addr_i_reg[7]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[7] ;
  input [0:0]\m0_databus_addr_i_reg[7]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[7] ;
  wire [0:0]\m0_databus_addr_i_reg[7]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_857 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[7] (\m0_databus_addr_i_reg[7] ),
        .\m0_databus_addr_i_reg[7]_0 (\m0_databus_addr_i_reg[7]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_858 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_852
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[8] ,
    \m0_databus_addr_i_reg[8]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[8] ;
  input [0:0]\m0_databus_addr_i_reg[8]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input LO;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire LO;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[8] ;
  wire [0:0]\m0_databus_addr_i_reg[8]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2_855 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[8] (\m0_databus_addr_i_reg[8] ),
        .\m0_databus_addr_i_reg[8]_0 (\m0_databus_addr_i_reg[8]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_856 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryOut(EX_CarryOut),
        .LO(LO),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit_853
   (EX_CarryOut,
    ex_databus_addr,
    Q,
    \m0_databus_addr_i_reg[9] ,
    \m0_databus_addr_i_reg[9]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    EX_CarryIn,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[9] ;
  input [0:0]\m0_databus_addr_i_reg[9]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input EX_CarryIn;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire EX_CarryIn;
  wire EX_CarryOut;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire alu_AddSub;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire lopt;
  wire \^lopt_1 ;
  wire [1:0]\m0_databus_addr_i_reg[9] ;
  wire [0:0]\m0_databus_addr_i_reg[9]_0 ;
  wire op2_is_1;

  assign \^lopt_1  = lopt_3;
  assign lopt_1 = op2_is_1;
  assign lopt_2 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT6_2 \Not_Last_Bit.I_ALU_LUT_V5 
       (.DI(op2_is_1),
        .EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .S(alu_AddSub),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .\m0_databus_addr_i_reg[9] (\m0_databus_addr_i_reg[9] ),
        .\m0_databus_addr_i_reg[9]_0 (\m0_databus_addr_i_reg[9]_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_854 \Not_Last_Bit.MUXCY_XOR_I 
       (.DI(op2_is_1),
        .EX_CarryIn(EX_CarryIn),
        .EX_CarryOut(EX_CarryOut),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt),
        .lopt_1(\^lopt_1 ));
endmodule

(* ORIG_REF_NAME = "ALU_Bit" *) 
module microblaze_microblaze_0_0_ALU_Bit__parameterized2
   (\EX_Op2_reg[0] ,
    ex_databus_addr,
    S_1,
    ex_unsigned_op,
    LO,
    Q,
    \m0_databus_addr_i_reg[0] ,
    \Using_FPGA.Native ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    I2,
    I0,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output \EX_Op2_reg[0] ;
  output [0:0]ex_databus_addr;
  input S_1;
  input ex_unsigned_op;
  input LO;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[0] ;
  input [0:0]\Using_FPGA.Native ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input I2;
  input I0;
  input lopt;
  input lopt_1;
  output lopt_2;
  output lopt_3;
  input lopt_4;

  wire EX_Enable_ALU;
  wire \EX_Op2_reg[0] ;
  wire I0;
  wire I2;
  wire LO;
  wire [0:0]Q;
  wire S_1;
  wire [0:0]\Using_FPGA.Native ;
  wire alu_AddSub;
  wire alu_AddSub_1;
  wire ex_alu_sel_logic;
  wire [0:0]ex_databus_addr;
  wire ex_unsigned_op;
  wire invert_result;
  wire lopt;
  wire lopt_1;
  wire \^lopt_2 ;
  wire [1:0]\m0_databus_addr_i_reg[0] ;
  wire op2_is_1;

  assign \^lopt_2  = lopt_4;
  assign lopt_2 = op2_is_1;
  assign lopt_3 = alu_AddSub;
  microblaze_microblaze_0_0_MB_LUT4 \Last_Bit.I_ALU_LUT_2 
       (.I2(I2),
        .Q(Q),
        .S(alu_AddSub),
        .alu_AddSub_1(alu_AddSub_1),
        .\m0_databus_addr_i_reg[0] (\m0_databus_addr_i_reg[0] [1]));
  microblaze_microblaze_0_0_MB_LUT6__parameterized8 \Last_Bit.I_ALU_LUT_V5 
       (.EX_Enable_ALU(EX_Enable_ALU),
        .Q(Q),
        .\Using_FPGA.Native_0 (\m0_databus_addr_i_reg[0] ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .alu_AddSub_1(alu_AddSub_1),
        .ex_alu_sel_logic(ex_alu_sel_logic));
  microblaze_microblaze_0_0_MB_MULT_AND \Last_Bit.MULT_AND_I 
       (.DI(op2_is_1),
        .I0(I0),
        .\Using_FPGA.Native_I1 (\m0_databus_addr_i_reg[0] [1]));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_915 \Last_Bit.MUXCY_XOR_I 
       (.CI(invert_result),
        .DI(op2_is_1),
        .\EX_Op2_reg[0] (\EX_Op2_reg[0] ),
        .S(alu_AddSub),
        .ex_databus_addr(ex_databus_addr),
        .lopt(lopt_1),
        .lopt_1(\^lopt_2 ));
  microblaze_microblaze_0_0_MB_MUXCY_916 \Last_Bit.Pre_MUXCY_I 
       (.CI(invert_result),
        .LO(LO),
        .S_1(S_1),
        .ex_unsigned_op(ex_unsigned_op),
        .lopt(lopt));
endmodule

(* ORIG_REF_NAME = "Barrel_Shifter_gti" *) 
module microblaze_microblaze_0_0_Barrel_Shifter_gti
   (m0_barrel_result,
    sync_reset,
    \Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ,
    ex_void_bit,
    Clk,
    Q,
    ex_left_shift_i,
    D,
    \Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 ,
    \Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 ,
    \Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 );
  output [0:31]m0_barrel_result;
  input sync_reset;
  input \Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ;
  input ex_void_bit;
  input Clk;
  input [1:0]Q;
  input ex_left_shift_i;
  input [31:0]D;
  input [31:0]\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 ;
  input [31:0]\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 ;
  input [30:0]\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 ;

  wire Clk;
  wire [31:0]D;
  wire I0;
  wire I00_out;
  wire I010_out;
  wire I011_out;
  wire I012_out;
  wire I013_out;
  wire I014_out;
  wire I015_out;
  wire I016_out;
  wire I017_out;
  wire I018_out;
  wire I019_out;
  wire I01_out;
  wire I020_out;
  wire I021_out;
  wire I022_out;
  wire I023_out;
  wire I024_out;
  wire I025_out;
  wire I026_out;
  wire I027_out;
  wire I028_out;
  wire I029_out;
  wire I02_out;
  wire I03_out;
  wire I04_out;
  wire I05_out;
  wire I06_out;
  wire I07_out;
  wire I08_out;
  wire I09_out;
  wire I1;
  wire I3;
  wire I4;
  wire I5;
  wire [1:0]Q;
  wire [31:0]\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[10] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[11] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[12] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[13] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[14] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[15] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[16] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[17] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[18] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[19] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[1] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[20] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[21] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[22] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[23] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[24] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[25] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[26] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[27] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[28] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[29] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[2] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[30] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[31] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[3] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[4] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[5] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[6] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[7] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[8] ;
  wire \Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[9] ;
  wire [31:0]\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[10] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[11] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[12] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[13] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[14] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[15] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[16] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[17] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[18] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[19] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[1] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[20] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[21] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[22] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[23] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[24] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[25] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[26] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[27] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[28] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[29] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[2] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[30] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[31] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[3] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[4] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[5] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[6] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[7] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[8] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[9] ;
  wire [30:0]\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[10] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[11] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[12] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[13] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[14] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[15] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[16] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[17] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[18] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[19] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[1] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[20] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[21] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[22] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[23] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[24] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[25] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[26] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[27] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[28] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[29] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[2] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[30] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[3] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[4] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[5] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[6] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[7] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[8] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[9] ;
  wire ex_left_shift_i;
  wire ex_void_bit;
  wire [0:31]m0_barrel_result;
  (* DIRECT_RESET *) wire mask_reset;
  wire mem_left_shift;
  wire [0:31]mem_mux3;
  wire [0:1]mem_shift16_8;
  wire mem_void_bit;

  assign mask_reset = sync_reset;
  microblaze_microblaze_0_0_MB_LUT6__parameterized22 \Use_HW_BS.Using_BitField.Res_Bits[0].MEM_Res_LUT6 
       (.I0(I0),
        .I1(I1),
        .Q(I3),
        .m0_barrel_result(m0_barrel_result[0]),
        .\m1_M0_Result_i_reg[0] (I4),
        .\m1_M0_Result_i_reg[0]_0 (I5),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_792 \Use_HW_BS.Using_BitField.Res_Bits[10].MEM_Res_LUT6 
       (.I020_out(I020_out),
        .I09_out(I09_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[10] ),
        .m0_barrel_result(m0_barrel_result[10]),
        .\m1_M0_Result_i_reg[10] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[10] ),
        .\m1_M0_Result_i_reg[10]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[10] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_793 \Use_HW_BS.Using_BitField.Res_Bits[11].MEM_Res_LUT6 
       (.I010_out(I010_out),
        .I019_out(I019_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[11] ),
        .m0_barrel_result(m0_barrel_result[11]),
        .\m1_M0_Result_i_reg[11] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[11] ),
        .\m1_M0_Result_i_reg[11]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[11] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_794 \Use_HW_BS.Using_BitField.Res_Bits[12].MEM_Res_LUT6 
       (.I011_out(I011_out),
        .I018_out(I018_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[12] ),
        .m0_barrel_result(m0_barrel_result[12]),
        .\m1_M0_Result_i_reg[12] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[12] ),
        .\m1_M0_Result_i_reg[12]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[12] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_795 \Use_HW_BS.Using_BitField.Res_Bits[13].MEM_Res_LUT6 
       (.I012_out(I012_out),
        .I017_out(I017_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[13] ),
        .m0_barrel_result(m0_barrel_result[13]),
        .\m1_M0_Result_i_reg[13] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[13] ),
        .\m1_M0_Result_i_reg[13]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[13] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_796 \Use_HW_BS.Using_BitField.Res_Bits[14].MEM_Res_LUT6 
       (.I013_out(I013_out),
        .I016_out(I016_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[14] ),
        .m0_barrel_result(m0_barrel_result[14]),
        .\m1_M0_Result_i_reg[14] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[14] ),
        .\m1_M0_Result_i_reg[14]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[14] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_797 \Use_HW_BS.Using_BitField.Res_Bits[15].MEM_Res_LUT6 
       (.I014_out(I014_out),
        .I015_out(I015_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[15] ),
        .m0_barrel_result(m0_barrel_result[15]),
        .\m1_M0_Result_i_reg[15] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[15] ),
        .\m1_M0_Result_i_reg[15]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[15] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_798 \Use_HW_BS.Using_BitField.Res_Bits[16].MEM_Res_LUT6 
       (.I014_out(I014_out),
        .I015_out(I015_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[16] ),
        .m0_barrel_result(m0_barrel_result[16]),
        .\m1_M0_Result_i_reg[16] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[16] ),
        .\m1_M0_Result_i_reg[16]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[16] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_799 \Use_HW_BS.Using_BitField.Res_Bits[17].MEM_Res_LUT6 
       (.I013_out(I013_out),
        .I016_out(I016_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[17] ),
        .m0_barrel_result(m0_barrel_result[17]),
        .\m1_M0_Result_i_reg[17] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[17] ),
        .\m1_M0_Result_i_reg[17]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[17] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_800 \Use_HW_BS.Using_BitField.Res_Bits[18].MEM_Res_LUT6 
       (.I012_out(I012_out),
        .I017_out(I017_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[18] ),
        .m0_barrel_result(m0_barrel_result[18]),
        .\m1_M0_Result_i_reg[18] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[18] ),
        .\m1_M0_Result_i_reg[18]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[18] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_801 \Use_HW_BS.Using_BitField.Res_Bits[19].MEM_Res_LUT6 
       (.I011_out(I011_out),
        .I018_out(I018_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[19] ),
        .m0_barrel_result(m0_barrel_result[19]),
        .\m1_M0_Result_i_reg[19] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[19] ),
        .\m1_M0_Result_i_reg[19]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[19] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_802 \Use_HW_BS.Using_BitField.Res_Bits[1].MEM_Res_LUT6 
       (.I00_out(I00_out),
        .I029_out(I029_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[1] ),
        .m0_barrel_result(m0_barrel_result[1]),
        .\m1_M0_Result_i_reg[1] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[1] ),
        .\m1_M0_Result_i_reg[1]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[1] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_803 \Use_HW_BS.Using_BitField.Res_Bits[20].MEM_Res_LUT6 
       (.I010_out(I010_out),
        .I019_out(I019_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[20] ),
        .m0_barrel_result(m0_barrel_result[20]),
        .\m1_M0_Result_i_reg[20] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[20] ),
        .\m1_M0_Result_i_reg[20]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[20] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_804 \Use_HW_BS.Using_BitField.Res_Bits[21].MEM_Res_LUT6 
       (.I020_out(I020_out),
        .I09_out(I09_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[21] ),
        .m0_barrel_result(m0_barrel_result[21]),
        .\m1_M0_Result_i_reg[21] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[21] ),
        .\m1_M0_Result_i_reg[21]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[21] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_805 \Use_HW_BS.Using_BitField.Res_Bits[22].MEM_Res_LUT6 
       (.I021_out(I021_out),
        .I08_out(I08_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[22] ),
        .m0_barrel_result(m0_barrel_result[22]),
        .\m1_M0_Result_i_reg[22] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[22] ),
        .\m1_M0_Result_i_reg[22]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[22] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_806 \Use_HW_BS.Using_BitField.Res_Bits[23].MEM_Res_LUT6 
       (.I022_out(I022_out),
        .I07_out(I07_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[23] ),
        .m0_barrel_result(m0_barrel_result[23]),
        .\m1_M0_Result_i_reg[23] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[23] ),
        .\m1_M0_Result_i_reg[23]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[23] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_807 \Use_HW_BS.Using_BitField.Res_Bits[24].MEM_Res_LUT6 
       (.I023_out(I023_out),
        .I06_out(I06_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[24] ),
        .m0_barrel_result(m0_barrel_result[24]),
        .\m1_M0_Result_i_reg[24] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[24] ),
        .\m1_M0_Result_i_reg[24]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[24] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_808 \Use_HW_BS.Using_BitField.Res_Bits[25].MEM_Res_LUT6 
       (.I024_out(I024_out),
        .I05_out(I05_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[25] ),
        .m0_barrel_result(m0_barrel_result[25]),
        .\m1_M0_Result_i_reg[25] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[25] ),
        .\m1_M0_Result_i_reg[25]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[25] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_809 \Use_HW_BS.Using_BitField.Res_Bits[26].MEM_Res_LUT6 
       (.I025_out(I025_out),
        .I04_out(I04_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[26] ),
        .m0_barrel_result(m0_barrel_result[26]),
        .\m1_M0_Result_i_reg[26] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[26] ),
        .\m1_M0_Result_i_reg[26]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[26] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_810 \Use_HW_BS.Using_BitField.Res_Bits[27].MEM_Res_LUT6 
       (.I026_out(I026_out),
        .I03_out(I03_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[27] ),
        .m0_barrel_result(m0_barrel_result[27]),
        .\m1_M0_Result_i_reg[27] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[27] ),
        .\m1_M0_Result_i_reg[27]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[27] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_811 \Use_HW_BS.Using_BitField.Res_Bits[28].MEM_Res_LUT6 
       (.I027_out(I027_out),
        .I02_out(I02_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[28] ),
        .m0_barrel_result(m0_barrel_result[28]),
        .\m1_M0_Result_i_reg[28] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[28] ),
        .\m1_M0_Result_i_reg[28]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[28] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_812 \Use_HW_BS.Using_BitField.Res_Bits[29].MEM_Res_LUT6 
       (.I01_out(I01_out),
        .I028_out(I028_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[29] ),
        .m0_barrel_result(m0_barrel_result[29]),
        .\m1_M0_Result_i_reg[29] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[29] ),
        .\m1_M0_Result_i_reg[29]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[29] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_813 \Use_HW_BS.Using_BitField.Res_Bits[2].MEM_Res_LUT6 
       (.I01_out(I01_out),
        .I028_out(I028_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[2] ),
        .m0_barrel_result(m0_barrel_result[2]),
        .\m1_M0_Result_i_reg[2] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[2] ),
        .\m1_M0_Result_i_reg[2]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[2] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_814 \Use_HW_BS.Using_BitField.Res_Bits[30].MEM_Res_LUT6 
       (.I00_out(I00_out),
        .I029_out(I029_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[30] ),
        .m0_barrel_result(m0_barrel_result[30]),
        .\m1_M0_Result_i_reg[30] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[30] ),
        .\m1_M0_Result_i_reg[30]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[30] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_815 \Use_HW_BS.Using_BitField.Res_Bits[31].MEM_Res_LUT6 
       (.I0(I0),
        .I1(I1),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[31] ),
        .m0_barrel_result(m0_barrel_result[31]),
        .\m1_M0_Result_i_reg[31] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[31] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_816 \Use_HW_BS.Using_BitField.Res_Bits[3].MEM_Res_LUT6 
       (.I027_out(I027_out),
        .I02_out(I02_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[3] ),
        .m0_barrel_result(m0_barrel_result[3]),
        .\m1_M0_Result_i_reg[3] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[3] ),
        .\m1_M0_Result_i_reg[3]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[3] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_817 \Use_HW_BS.Using_BitField.Res_Bits[4].MEM_Res_LUT6 
       (.I026_out(I026_out),
        .I03_out(I03_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[4] ),
        .m0_barrel_result(m0_barrel_result[4]),
        .\m1_M0_Result_i_reg[4] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[4] ),
        .\m1_M0_Result_i_reg[4]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[4] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_818 \Use_HW_BS.Using_BitField.Res_Bits[5].MEM_Res_LUT6 
       (.I025_out(I025_out),
        .I04_out(I04_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[5] ),
        .m0_barrel_result(m0_barrel_result[5]),
        .\m1_M0_Result_i_reg[5] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[5] ),
        .\m1_M0_Result_i_reg[5]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[5] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_819 \Use_HW_BS.Using_BitField.Res_Bits[6].MEM_Res_LUT6 
       (.I024_out(I024_out),
        .I05_out(I05_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[6] ),
        .m0_barrel_result(m0_barrel_result[6]),
        .\m1_M0_Result_i_reg[6] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[6] ),
        .\m1_M0_Result_i_reg[6]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[6] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_820 \Use_HW_BS.Using_BitField.Res_Bits[7].MEM_Res_LUT6 
       (.I023_out(I023_out),
        .I06_out(I06_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[7] ),
        .m0_barrel_result(m0_barrel_result[7]),
        .\m1_M0_Result_i_reg[7] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[7] ),
        .\m1_M0_Result_i_reg[7]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[7] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_821 \Use_HW_BS.Using_BitField.Res_Bits[8].MEM_Res_LUT6 
       (.I022_out(I022_out),
        .I07_out(I07_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[8] ),
        .m0_barrel_result(m0_barrel_result[8]),
        .\m1_M0_Result_i_reg[8] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[8] ),
        .\m1_M0_Result_i_reg[8]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[8] ),
        .mem_left_shift(mem_left_shift));
  microblaze_microblaze_0_0_MB_LUT6__parameterized22_822 \Use_HW_BS.Using_BitField.Res_Bits[9].MEM_Res_LUT6 
       (.I021_out(I021_out),
        .I08_out(I08_out),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[9] ),
        .m0_barrel_result(m0_barrel_result[9]),
        .\m1_M0_Result_i_reg[9] (\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[9] ),
        .\m1_M0_Result_i_reg[9]_0 (\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[9] ),
        .mem_left_shift(mem_left_shift));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[0] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [31]),
        .Q(I3),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[10] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [21]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[10] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[11] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [20]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[11] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[12] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [19]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[12] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[13] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [18]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[13] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[14] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [17]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[14] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[15] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [16]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[15] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[16] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [15]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[16] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[17] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [14]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[17] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[18] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [13]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[18] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[19] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [12]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[19] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[1] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [30]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[1] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[20] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [11]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[20] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[21] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [10]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[21] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[22] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [9]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[22] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[23] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [8]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[23] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[24] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [7]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[24] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[25] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [6]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[25] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[26] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [5]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[26] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[27] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [4]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[27] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[28] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [3]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[28] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[29] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [2]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[29] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[2] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [29]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[2] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[30] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [1]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[30] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[31] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [0]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[31] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[3] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [28]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[3] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[4] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [27]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[4] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[5] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [26]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[5] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[6] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [25]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[6] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[7] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [24]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[7] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[8] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [23]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[8] ),
        .R(1'b0));
  FDRE \Use_HW_BS.Using_BitField.mem_Rd_reg[9] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 [22]),
        .Q(\Use_HW_BS.Using_BitField.mem_Rd_reg_n_0_[9] ),
        .R(1'b0));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[0] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [31]),
        .Q(I4),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[10] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [21]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[10] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[11] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [20]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[11] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[12] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [19]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[12] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[13] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [18]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[13] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[14] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [17]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[14] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[15] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [16]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[15] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[16] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [15]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[16] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[17] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [14]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[17] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[18] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [13]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[18] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[19] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [12]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[19] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[1] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [30]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[1] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[20] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [11]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[20] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[21] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [10]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[21] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[22] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [9]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[22] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[23] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [8]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[23] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[24] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [7]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[24] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[25] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [6]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[25] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[26] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [5]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[26] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[27] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [4]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[27] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[28] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [3]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[28] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[29] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [2]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[29] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[2] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [29]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[2] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[30] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [1]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[30] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[31] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [0]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[31] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[3] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [28]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[3] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[4] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [27]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[4] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[5] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [26]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[5] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[6] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [25]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[6] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[7] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [24]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[7] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[8] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [23]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[8] ),
        .S(mask_reset));
  FDSE \Use_HW_BS.Using_BitField.mem_mask0_reg[9] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 [22]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask0_reg_n_0_[9] ),
        .S(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[0] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [30]),
        .Q(I5),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[10] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [20]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[10] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[11] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [19]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[11] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[12] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [18]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[12] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[13] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [17]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[13] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[14] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [16]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[14] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[15] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [15]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[15] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[16] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [14]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[16] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[17] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [13]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[17] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[18] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [12]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[18] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[19] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [11]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[19] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[1] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [29]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[1] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[20] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [10]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[20] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[21] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [9]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[21] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[22] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [8]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[22] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[23] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [7]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[23] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[24] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [6]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[24] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[25] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [5]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[25] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[26] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [4]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[26] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[27] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [3]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[27] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[28] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [2]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[28] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[29] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [1]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[29] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[2] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [28]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[2] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[30] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [0]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[30] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[3] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [27]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[3] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[4] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [26]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[4] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[5] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [25]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[5] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[6] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [24]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[6] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[7] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [23]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[7] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[8] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [22]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[8] ),
        .R(mask_reset));
  FDRE \Use_HW_BS.Using_BitField.mem_mask1_reg[9] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 [21]),
        .Q(\Use_HW_BS.Using_BitField.mem_mask1_reg_n_0_[9] ),
        .R(mask_reset));
  FDSE \Use_HW_BS.mem_left_shift_reg 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(ex_left_shift_i),
        .Q(mem_left_shift),
        .S(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[0] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[31]),
        .Q(mem_mux3[0]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[10] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[21]),
        .Q(mem_mux3[10]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[11] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[20]),
        .Q(mem_mux3[11]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[12] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[19]),
        .Q(mem_mux3[12]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[13] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[18]),
        .Q(mem_mux3[13]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[14] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[17]),
        .Q(mem_mux3[14]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[15] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[16]),
        .Q(mem_mux3[15]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[16] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[15]),
        .Q(mem_mux3[16]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[17] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[14]),
        .Q(mem_mux3[17]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[18] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[13]),
        .Q(mem_mux3[18]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[19] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[12]),
        .Q(mem_mux3[19]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[1] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[30]),
        .Q(mem_mux3[1]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[20] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[11]),
        .Q(mem_mux3[20]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[21] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[10]),
        .Q(mem_mux3[21]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[22] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[9]),
        .Q(mem_mux3[22]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[23] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[8]),
        .Q(mem_mux3[23]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[24] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[7]),
        .Q(mem_mux3[24]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[25] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[6]),
        .Q(mem_mux3[25]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[26] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[5]),
        .Q(mem_mux3[26]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[27] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[4]),
        .Q(mem_mux3[27]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[28] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[3]),
        .Q(mem_mux3[28]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[29] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[2]),
        .Q(mem_mux3[29]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[2] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[29]),
        .Q(mem_mux3[2]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[30] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[1]),
        .Q(mem_mux3[30]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[31] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[0]),
        .Q(mem_mux3[31]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[3] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[28]),
        .Q(mem_mux3[3]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[4] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[27]),
        .Q(mem_mux3[4]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[5] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[26]),
        .Q(mem_mux3[5]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[6] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[25]),
        .Q(mem_mux3[6]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[7] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[24]),
        .Q(mem_mux3[7]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[8] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[23]),
        .Q(mem_mux3[8]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_mux3_reg[9] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(D[22]),
        .Q(mem_mux3[9]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_shift16_8_reg[0] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(Q[1]),
        .Q(mem_shift16_8[0]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_shift16_8_reg[1] 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(Q[0]),
        .Q(mem_shift16_8[1]),
        .R(mask_reset));
  FDRE \Use_HW_BS.mem_void_bit_reg 
       (.C(Clk),
        .CE(\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 ),
        .D(ex_void_bit),
        .Q(mem_void_bit),
        .R(mask_reset));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1 
       (.I0(mem_mux3[8]),
        .I1(mem_mux3[0]),
        .I2(mem_mux3[24]),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[16]),
        .O(I0));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__0 
       (.I0(mem_mux3[9]),
        .I1(mem_mux3[1]),
        .I2(mem_mux3[25]),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[17]),
        .O(I00_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__1 
       (.I0(mem_mux3[10]),
        .I1(mem_mux3[2]),
        .I2(mem_mux3[26]),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[18]),
        .O(I01_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__10 
       (.I0(mem_mux3[19]),
        .I1(mem_mux3[11]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[27]),
        .O(I010_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__11 
       (.I0(mem_mux3[20]),
        .I1(mem_mux3[12]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[28]),
        .O(I011_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__12 
       (.I0(mem_mux3[21]),
        .I1(mem_mux3[13]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[29]),
        .O(I012_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__13 
       (.I0(mem_mux3[22]),
        .I1(mem_mux3[14]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[30]),
        .O(I013_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__14 
       (.I0(mem_mux3[23]),
        .I1(mem_mux3[15]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[31]),
        .O(I014_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__2 
       (.I0(mem_mux3[11]),
        .I1(mem_mux3[3]),
        .I2(mem_mux3[27]),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[19]),
        .O(I02_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__3 
       (.I0(mem_mux3[12]),
        .I1(mem_mux3[4]),
        .I2(mem_mux3[28]),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[20]),
        .O(I03_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__4 
       (.I0(mem_mux3[13]),
        .I1(mem_mux3[5]),
        .I2(mem_mux3[29]),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[21]),
        .O(I04_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__5 
       (.I0(mem_mux3[14]),
        .I1(mem_mux3[6]),
        .I2(mem_mux3[30]),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[22]),
        .O(I05_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__6 
       (.I0(mem_mux3[15]),
        .I1(mem_mux3[7]),
        .I2(mem_mux3[31]),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[23]),
        .O(I06_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__7 
       (.I0(mem_mux3[16]),
        .I1(mem_mux3[8]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[24]),
        .O(I07_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__8 
       (.I0(mem_mux3[17]),
        .I1(mem_mux3[9]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[25]),
        .O(I08_out));
  LUT6 #(
    .INIT(64'hF0FFAACCF000AACC)) 
    \Using_FPGA.Native_i_1__9 
       (.I0(mem_mux3[18]),
        .I1(mem_mux3[10]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .I5(mem_mux3[26]),
        .O(I09_out));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'hF0F0AACC)) 
    \Using_FPGA.Native_i_2 
       (.I0(mem_mux3[24]),
        .I1(mem_mux3[16]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .O(I015_out));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'hF0F0AACC)) 
    \Using_FPGA.Native_i_2__0 
       (.I0(mem_mux3[25]),
        .I1(mem_mux3[17]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .O(I016_out));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT5 #(
    .INIT(32'hF0F0AACC)) 
    \Using_FPGA.Native_i_2__1 
       (.I0(mem_mux3[26]),
        .I1(mem_mux3[18]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .O(I017_out));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'hCCCA)) 
    \Using_FPGA.Native_i_2__10 
       (.I0(mem_mux3[27]),
        .I1(mem_void_bit),
        .I2(mem_shift16_8[1]),
        .I3(mem_shift16_8[0]),
        .O(I026_out));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'hCCCA)) 
    \Using_FPGA.Native_i_2__11 
       (.I0(mem_mux3[28]),
        .I1(mem_void_bit),
        .I2(mem_shift16_8[1]),
        .I3(mem_shift16_8[0]),
        .O(I027_out));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'hCCCA)) 
    \Using_FPGA.Native_i_2__12 
       (.I0(mem_mux3[29]),
        .I1(mem_void_bit),
        .I2(mem_shift16_8[1]),
        .I3(mem_shift16_8[0]),
        .O(I028_out));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'hCCCA)) 
    \Using_FPGA.Native_i_2__13 
       (.I0(mem_mux3[30]),
        .I1(mem_void_bit),
        .I2(mem_shift16_8[1]),
        .I3(mem_shift16_8[0]),
        .O(I029_out));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'hCCCA)) 
    \Using_FPGA.Native_i_2__14 
       (.I0(mem_mux3[31]),
        .I1(mem_void_bit),
        .I2(mem_shift16_8[1]),
        .I3(mem_shift16_8[0]),
        .O(I1));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT5 #(
    .INIT(32'hF0F0AACC)) 
    \Using_FPGA.Native_i_2__2 
       (.I0(mem_mux3[27]),
        .I1(mem_mux3[19]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .O(I018_out));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT5 #(
    .INIT(32'hF0F0AACC)) 
    \Using_FPGA.Native_i_2__3 
       (.I0(mem_mux3[28]),
        .I1(mem_mux3[20]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .O(I019_out));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT5 #(
    .INIT(32'hF0F0AACC)) 
    \Using_FPGA.Native_i_2__4 
       (.I0(mem_mux3[29]),
        .I1(mem_mux3[21]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .O(I020_out));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT5 #(
    .INIT(32'hF0F0AACC)) 
    \Using_FPGA.Native_i_2__5 
       (.I0(mem_mux3[30]),
        .I1(mem_mux3[22]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .O(I021_out));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT5 #(
    .INIT(32'hF0F0AACC)) 
    \Using_FPGA.Native_i_2__6 
       (.I0(mem_mux3[31]),
        .I1(mem_mux3[23]),
        .I2(mem_void_bit),
        .I3(mem_shift16_8[1]),
        .I4(mem_shift16_8[0]),
        .O(I022_out));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'hCCCA)) 
    \Using_FPGA.Native_i_2__7 
       (.I0(mem_mux3[24]),
        .I1(mem_void_bit),
        .I2(mem_shift16_8[1]),
        .I3(mem_shift16_8[0]),
        .O(I023_out));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'hCCCA)) 
    \Using_FPGA.Native_i_2__8 
       (.I0(mem_mux3[25]),
        .I1(mem_void_bit),
        .I2(mem_shift16_8[1]),
        .I3(mem_shift16_8[0]),
        .O(I024_out));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'hCCCA)) 
    \Using_FPGA.Native_i_2__9 
       (.I0(mem_mux3[26]),
        .I1(mem_void_bit),
        .I2(mem_shift16_8[1]),
        .I3(mem_shift16_8[0]),
        .O(I025_out));
endmodule

(* ORIG_REF_NAME = "Byte_Doublet_Handle_ff" *) 
module microblaze_microblaze_0_0_Byte_Doublet_Handle_ff
   (\m1_unaligned_addr_3lsb_reg[2]_0 ,
    \m1_unaligned_addr_3lsb_reg[1]_0 ,
    \m1_op3_reg[24]_0 ,
    WB_Byte_Access_reg,
    \No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 ,
    \No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_1 ,
    \m1_op3_reg[8]_0 ,
    \WB_DataBus_Byte_Enable_reg[0]_0 ,
    \WB_DataBus_Write_Data_reg[0]_0 ,
    sync_reset,
    \m0_op3_reg[31]_0 ,
    ex_alu_result,
    Clk,
    m0_piperun,
    m1_byte_access,
    m1_doublet_access,
    wb_byte_access,
    Q,
    m2_piperun,
    \m3_databus_write_data_i_reg[0]_0 ,
    m3_piperun,
    m1_piperun);
  output \m1_unaligned_addr_3lsb_reg[2]_0 ;
  output \m1_unaligned_addr_3lsb_reg[1]_0 ;
  output [27:0]\m1_op3_reg[24]_0 ;
  output WB_Byte_Access_reg;
  output [1:0]\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 ;
  output \No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_1 ;
  output [7:0]\m1_op3_reg[8]_0 ;
  output [3:0]\WB_DataBus_Byte_Enable_reg[0]_0 ;
  output [31:0]\WB_DataBus_Write_Data_reg[0]_0 ;
  input sync_reset;
  input \m0_op3_reg[31]_0 ;
  input [1:0]ex_alu_result;
  input Clk;
  input m0_piperun;
  input m1_byte_access;
  input m1_doublet_access;
  input wb_byte_access;
  input [31:0]Q;
  input m2_piperun;
  input [35:0]\m3_databus_write_data_i_reg[0]_0 ;
  input m3_piperun;
  input m1_piperun;

  wire Clk;
  wire [1:0]\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 ;
  wire \No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_1 ;
  wire [31:0]Q;
  wire WB_Byte_Access_reg;
  wire [3:0]\WB_DataBus_Byte_Enable_reg[0]_0 ;
  wire [31:0]\WB_DataBus_Write_Data_reg[0]_0 ;
  wire [1:0]ex_alu_result;
  wire [1:2]m0_addr_3lsb;
  wire [0:31]m0_op3;
  wire \m0_op3_reg[31]_0 ;
  wire m0_piperun;
  wire m1_byte_access;
  wire m1_doublet_access;
  wire [0:23]m1_op3;
  wire [27:0]\m1_op3_reg[24]_0 ;
  wire [7:0]\m1_op3_reg[8]_0 ;
  wire m1_piperun;
  wire \m1_unaligned_addr_3lsb_reg[1]_0 ;
  wire \m1_unaligned_addr_3lsb_reg[2]_0 ;
  wire [0:1]m2_byte_selects;
  wire \m2_byte_selects[0]_i_1_n_0 ;
  wire \m2_byte_selects[1]_i_1_n_0 ;
  wire m2_piperun;
  wire [0:1]m3_byte_selects;
  wire \m3_databus_byte_enable_i_reg_n_0_[0] ;
  wire \m3_databus_byte_enable_i_reg_n_0_[1] ;
  wire \m3_databus_byte_enable_i_reg_n_0_[2] ;
  wire \m3_databus_byte_enable_i_reg_n_0_[3] ;
  wire [35:0]\m3_databus_write_data_i_reg[0]_0 ;
  wire \m3_databus_write_data_i_reg_n_0_[0] ;
  wire \m3_databus_write_data_i_reg_n_0_[10] ;
  wire \m3_databus_write_data_i_reg_n_0_[11] ;
  wire \m3_databus_write_data_i_reg_n_0_[12] ;
  wire \m3_databus_write_data_i_reg_n_0_[13] ;
  wire \m3_databus_write_data_i_reg_n_0_[14] ;
  wire \m3_databus_write_data_i_reg_n_0_[15] ;
  wire \m3_databus_write_data_i_reg_n_0_[16] ;
  wire \m3_databus_write_data_i_reg_n_0_[17] ;
  wire \m3_databus_write_data_i_reg_n_0_[18] ;
  wire \m3_databus_write_data_i_reg_n_0_[19] ;
  wire \m3_databus_write_data_i_reg_n_0_[1] ;
  wire \m3_databus_write_data_i_reg_n_0_[20] ;
  wire \m3_databus_write_data_i_reg_n_0_[21] ;
  wire \m3_databus_write_data_i_reg_n_0_[22] ;
  wire \m3_databus_write_data_i_reg_n_0_[23] ;
  wire \m3_databus_write_data_i_reg_n_0_[24] ;
  wire \m3_databus_write_data_i_reg_n_0_[25] ;
  wire \m3_databus_write_data_i_reg_n_0_[26] ;
  wire \m3_databus_write_data_i_reg_n_0_[27] ;
  wire \m3_databus_write_data_i_reg_n_0_[28] ;
  wire \m3_databus_write_data_i_reg_n_0_[29] ;
  wire \m3_databus_write_data_i_reg_n_0_[2] ;
  wire \m3_databus_write_data_i_reg_n_0_[30] ;
  wire \m3_databus_write_data_i_reg_n_0_[31] ;
  wire \m3_databus_write_data_i_reg_n_0_[3] ;
  wire \m3_databus_write_data_i_reg_n_0_[4] ;
  wire \m3_databus_write_data_i_reg_n_0_[5] ;
  wire \m3_databus_write_data_i_reg_n_0_[6] ;
  wire \m3_databus_write_data_i_reg_n_0_[7] ;
  wire \m3_databus_write_data_i_reg_n_0_[8] ;
  wire \m3_databus_write_data_i_reg_n_0_[9] ;
  wire m3_piperun;
  wire sync_reset;
  wire wb_byte_access;

  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT4 #(
    .INIT(16'h88CF)) 
    \Byte_Enable[0]_INST_0 
       (.I0(\m1_unaligned_addr_3lsb_reg[2]_0 ),
        .I1(\m1_unaligned_addr_3lsb_reg[1]_0 ),
        .I2(m1_doublet_access),
        .I3(m1_byte_access),
        .O(\m1_op3_reg[24]_0 [3]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT4 #(
    .INIT(16'h44CF)) 
    \Byte_Enable[1]_INST_0 
       (.I0(\m1_unaligned_addr_3lsb_reg[2]_0 ),
        .I1(\m1_unaligned_addr_3lsb_reg[1]_0 ),
        .I2(m1_doublet_access),
        .I3(m1_byte_access),
        .O(\m1_op3_reg[24]_0 [2]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h232F)) 
    \Byte_Enable[2]_INST_0 
       (.I0(\m1_unaligned_addr_3lsb_reg[2]_0 ),
        .I1(\m1_unaligned_addr_3lsb_reg[1]_0 ),
        .I2(m1_byte_access),
        .I3(m1_doublet_access),
        .O(\m1_op3_reg[24]_0 [1]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h131F)) 
    \Byte_Enable[3]_INST_0 
       (.I0(\m1_unaligned_addr_3lsb_reg[2]_0 ),
        .I1(\m1_unaligned_addr_3lsb_reg[1]_0 ),
        .I2(m1_byte_access),
        .I3(m1_doublet_access),
        .O(\m1_op3_reg[24]_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Data_Write[0]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [11]),
        .I1(m1_byte_access),
        .I2(m1_op3[16]),
        .I3(m1_doublet_access),
        .I4(m1_op3[0]),
        .O(\m1_op3_reg[24]_0 [27]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Data_Write[16]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [11]),
        .I1(m1_byte_access),
        .I2(m1_op3[16]),
        .O(\m1_op3_reg[24]_0 [19]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Data_Write[17]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [10]),
        .I1(m1_byte_access),
        .I2(m1_op3[17]),
        .O(\m1_op3_reg[24]_0 [18]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Data_Write[18]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [9]),
        .I1(m1_byte_access),
        .I2(m1_op3[18]),
        .O(\m1_op3_reg[24]_0 [17]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Data_Write[19]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [8]),
        .I1(m1_byte_access),
        .I2(m1_op3[19]),
        .O(\m1_op3_reg[24]_0 [16]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Data_Write[1]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [10]),
        .I1(m1_byte_access),
        .I2(m1_op3[17]),
        .I3(m1_doublet_access),
        .I4(m1_op3[1]),
        .O(\m1_op3_reg[24]_0 [26]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Data_Write[20]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [7]),
        .I1(m1_byte_access),
        .I2(m1_op3[20]),
        .O(\m1_op3_reg[24]_0 [15]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Data_Write[21]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [6]),
        .I1(m1_byte_access),
        .I2(m1_op3[21]),
        .O(\m1_op3_reg[24]_0 [14]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Data_Write[22]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [5]),
        .I1(m1_byte_access),
        .I2(m1_op3[22]),
        .O(\m1_op3_reg[24]_0 [13]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Data_Write[23]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [4]),
        .I1(m1_byte_access),
        .I2(m1_op3[23]),
        .O(\m1_op3_reg[24]_0 [12]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Data_Write[2]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [9]),
        .I1(m1_byte_access),
        .I2(m1_op3[18]),
        .I3(m1_doublet_access),
        .I4(m1_op3[2]),
        .O(\m1_op3_reg[24]_0 [25]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Data_Write[3]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [8]),
        .I1(m1_byte_access),
        .I2(m1_op3[19]),
        .I3(m1_doublet_access),
        .I4(m1_op3[3]),
        .O(\m1_op3_reg[24]_0 [24]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Data_Write[4]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [7]),
        .I1(m1_byte_access),
        .I2(m1_op3[20]),
        .I3(m1_doublet_access),
        .I4(m1_op3[4]),
        .O(\m1_op3_reg[24]_0 [23]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Data_Write[5]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [6]),
        .I1(m1_byte_access),
        .I2(m1_op3[21]),
        .I3(m1_doublet_access),
        .I4(m1_op3[5]),
        .O(\m1_op3_reg[24]_0 [22]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Data_Write[6]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [5]),
        .I1(m1_byte_access),
        .I2(m1_op3[22]),
        .I3(m1_doublet_access),
        .I4(m1_op3[6]),
        .O(\m1_op3_reg[24]_0 [21]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Data_Write[7]_INST_0 
       (.I0(\m1_op3_reg[24]_0 [4]),
        .I1(m1_byte_access),
        .I2(m1_op3[23]),
        .I3(m1_doublet_access),
        .I4(m1_op3[7]),
        .O(\m1_op3_reg[24]_0 [20]));
  FDRE \No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_byte_selects[0]),
        .Q(\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[1] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_byte_selects[1]),
        .Q(\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \WB_DataBus_Byte_Enable_reg[0] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_byte_enable_i_reg_n_0_[0] ),
        .Q(\WB_DataBus_Byte_Enable_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \WB_DataBus_Byte_Enable_reg[1] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_byte_enable_i_reg_n_0_[1] ),
        .Q(\WB_DataBus_Byte_Enable_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \WB_DataBus_Byte_Enable_reg[2] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_byte_enable_i_reg_n_0_[2] ),
        .Q(\WB_DataBus_Byte_Enable_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \WB_DataBus_Byte_Enable_reg[3] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_byte_enable_i_reg_n_0_[3] ),
        .Q(\WB_DataBus_Byte_Enable_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[0] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[0] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [31]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[10] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[10] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [21]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[11] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[11] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [20]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[12] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[12] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [19]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[13] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[13] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [18]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[14] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[14] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [17]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[15] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[15] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [16]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[16] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[16] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [15]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[17] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[17] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[18] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[18] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[19] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[19] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[1] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[1] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [30]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[20] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[20] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [11]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[21] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[21] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[22] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[22] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[23] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[23] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[24] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[24] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [7]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[25] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[25] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [6]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[26] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[26] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[27] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[27] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[28] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[28] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[29] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[29] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[2] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[2] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [29]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[30] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[30] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[31] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[31] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[3] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[3] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [28]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[4] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[4] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [27]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[5] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[5] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [26]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[6] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[6] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [25]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[7] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[7] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [24]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[8] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[8] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [23]),
        .R(sync_reset));
  FDRE \WB_DataBus_Write_Data_reg[9] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\m3_databus_write_data_i_reg_n_0_[9] ),
        .Q(\WB_DataBus_Write_Data_reg[0]_0 [22]),
        .R(sync_reset));
  FDRE \m0_addr_3lsb_reg[1] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(ex_alu_result[1]),
        .Q(m0_addr_3lsb[1]),
        .R(sync_reset));
  FDRE \m0_addr_3lsb_reg[2] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(ex_alu_result[0]),
        .Q(m0_addr_3lsb[2]),
        .R(sync_reset));
  FDRE \m0_op3_reg[0] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[31]),
        .Q(m0_op3[0]),
        .R(sync_reset));
  FDRE \m0_op3_reg[10] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[21]),
        .Q(m0_op3[10]),
        .R(sync_reset));
  FDRE \m0_op3_reg[11] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[20]),
        .Q(m0_op3[11]),
        .R(sync_reset));
  FDRE \m0_op3_reg[12] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[19]),
        .Q(m0_op3[12]),
        .R(sync_reset));
  FDRE \m0_op3_reg[13] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[18]),
        .Q(m0_op3[13]),
        .R(sync_reset));
  FDRE \m0_op3_reg[14] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[17]),
        .Q(m0_op3[14]),
        .R(sync_reset));
  FDRE \m0_op3_reg[15] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[16]),
        .Q(m0_op3[15]),
        .R(sync_reset));
  FDRE \m0_op3_reg[16] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[15]),
        .Q(m0_op3[16]),
        .R(sync_reset));
  FDRE \m0_op3_reg[17] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[14]),
        .Q(m0_op3[17]),
        .R(sync_reset));
  FDRE \m0_op3_reg[18] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[13]),
        .Q(m0_op3[18]),
        .R(sync_reset));
  FDRE \m0_op3_reg[19] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[12]),
        .Q(m0_op3[19]),
        .R(sync_reset));
  FDRE \m0_op3_reg[1] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[30]),
        .Q(m0_op3[1]),
        .R(sync_reset));
  FDRE \m0_op3_reg[20] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[11]),
        .Q(m0_op3[20]),
        .R(sync_reset));
  FDRE \m0_op3_reg[21] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[10]),
        .Q(m0_op3[21]),
        .R(sync_reset));
  FDRE \m0_op3_reg[22] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[9]),
        .Q(m0_op3[22]),
        .R(sync_reset));
  FDRE \m0_op3_reg[23] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[8]),
        .Q(m0_op3[23]),
        .R(sync_reset));
  FDRE \m0_op3_reg[24] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[7]),
        .Q(m0_op3[24]),
        .R(sync_reset));
  FDRE \m0_op3_reg[25] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[6]),
        .Q(m0_op3[25]),
        .R(sync_reset));
  FDRE \m0_op3_reg[26] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[5]),
        .Q(m0_op3[26]),
        .R(sync_reset));
  FDRE \m0_op3_reg[27] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[4]),
        .Q(m0_op3[27]),
        .R(sync_reset));
  FDRE \m0_op3_reg[28] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[3]),
        .Q(m0_op3[28]),
        .R(sync_reset));
  FDRE \m0_op3_reg[29] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[2]),
        .Q(m0_op3[29]),
        .R(sync_reset));
  FDRE \m0_op3_reg[2] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[29]),
        .Q(m0_op3[2]),
        .R(sync_reset));
  FDRE \m0_op3_reg[30] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[1]),
        .Q(m0_op3[30]),
        .R(sync_reset));
  FDRE \m0_op3_reg[31] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[0]),
        .Q(m0_op3[31]),
        .R(sync_reset));
  FDRE \m0_op3_reg[3] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[28]),
        .Q(m0_op3[3]),
        .R(sync_reset));
  FDRE \m0_op3_reg[4] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[27]),
        .Q(m0_op3[4]),
        .R(sync_reset));
  FDRE \m0_op3_reg[5] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[26]),
        .Q(m0_op3[5]),
        .R(sync_reset));
  FDRE \m0_op3_reg[6] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[25]),
        .Q(m0_op3[6]),
        .R(sync_reset));
  FDRE \m0_op3_reg[7] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[24]),
        .Q(m0_op3[7]),
        .R(sync_reset));
  FDRE \m0_op3_reg[8] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[23]),
        .Q(m0_op3[8]),
        .R(sync_reset));
  FDRE \m0_op3_reg[9] 
       (.C(Clk),
        .CE(\m0_op3_reg[31]_0 ),
        .D(Q[22]),
        .Q(m0_op3[9]),
        .R(sync_reset));
  FDRE \m1_op3_reg[0] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[0]),
        .Q(m1_op3[0]),
        .R(sync_reset));
  FDRE \m1_op3_reg[10] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[10]),
        .Q(\m1_op3_reg[8]_0 [5]),
        .R(sync_reset));
  FDRE \m1_op3_reg[11] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[11]),
        .Q(\m1_op3_reg[8]_0 [4]),
        .R(sync_reset));
  FDRE \m1_op3_reg[12] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[12]),
        .Q(\m1_op3_reg[8]_0 [3]),
        .R(sync_reset));
  FDRE \m1_op3_reg[13] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[13]),
        .Q(\m1_op3_reg[8]_0 [2]),
        .R(sync_reset));
  FDRE \m1_op3_reg[14] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[14]),
        .Q(\m1_op3_reg[8]_0 [1]),
        .R(sync_reset));
  FDRE \m1_op3_reg[15] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[15]),
        .Q(\m1_op3_reg[8]_0 [0]),
        .R(sync_reset));
  FDRE \m1_op3_reg[16] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[16]),
        .Q(m1_op3[16]),
        .R(sync_reset));
  FDRE \m1_op3_reg[17] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[17]),
        .Q(m1_op3[17]),
        .R(sync_reset));
  FDRE \m1_op3_reg[18] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[18]),
        .Q(m1_op3[18]),
        .R(sync_reset));
  FDRE \m1_op3_reg[19] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[19]),
        .Q(m1_op3[19]),
        .R(sync_reset));
  FDRE \m1_op3_reg[1] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[1]),
        .Q(m1_op3[1]),
        .R(sync_reset));
  FDRE \m1_op3_reg[20] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[20]),
        .Q(m1_op3[20]),
        .R(sync_reset));
  FDRE \m1_op3_reg[21] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[21]),
        .Q(m1_op3[21]),
        .R(sync_reset));
  FDRE \m1_op3_reg[22] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[22]),
        .Q(m1_op3[22]),
        .R(sync_reset));
  FDRE \m1_op3_reg[23] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[23]),
        .Q(m1_op3[23]),
        .R(sync_reset));
  FDRE \m1_op3_reg[24] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[24]),
        .Q(\m1_op3_reg[24]_0 [11]),
        .R(sync_reset));
  FDRE \m1_op3_reg[25] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[25]),
        .Q(\m1_op3_reg[24]_0 [10]),
        .R(sync_reset));
  FDRE \m1_op3_reg[26] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[26]),
        .Q(\m1_op3_reg[24]_0 [9]),
        .R(sync_reset));
  FDRE \m1_op3_reg[27] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[27]),
        .Q(\m1_op3_reg[24]_0 [8]),
        .R(sync_reset));
  FDRE \m1_op3_reg[28] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[28]),
        .Q(\m1_op3_reg[24]_0 [7]),
        .R(sync_reset));
  FDRE \m1_op3_reg[29] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[29]),
        .Q(\m1_op3_reg[24]_0 [6]),
        .R(sync_reset));
  FDRE \m1_op3_reg[2] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[2]),
        .Q(m1_op3[2]),
        .R(sync_reset));
  FDRE \m1_op3_reg[30] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[30]),
        .Q(\m1_op3_reg[24]_0 [5]),
        .R(sync_reset));
  FDRE \m1_op3_reg[31] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[31]),
        .Q(\m1_op3_reg[24]_0 [4]),
        .R(sync_reset));
  FDRE \m1_op3_reg[3] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[3]),
        .Q(m1_op3[3]),
        .R(sync_reset));
  FDRE \m1_op3_reg[4] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[4]),
        .Q(m1_op3[4]),
        .R(sync_reset));
  FDRE \m1_op3_reg[5] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[5]),
        .Q(m1_op3[5]),
        .R(sync_reset));
  FDRE \m1_op3_reg[6] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[6]),
        .Q(m1_op3[6]),
        .R(sync_reset));
  FDRE \m1_op3_reg[7] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[7]),
        .Q(m1_op3[7]),
        .R(sync_reset));
  FDRE \m1_op3_reg[8] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[8]),
        .Q(\m1_op3_reg[8]_0 [7]),
        .R(sync_reset));
  FDRE \m1_op3_reg[9] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_op3[9]),
        .Q(\m1_op3_reg[8]_0 [6]),
        .R(sync_reset));
  FDRE \m1_unaligned_addr_3lsb_reg[1] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_addr_3lsb[1]),
        .Q(\m1_unaligned_addr_3lsb_reg[1]_0 ),
        .R(sync_reset));
  FDRE \m1_unaligned_addr_3lsb_reg[2] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_addr_3lsb[2]),
        .Q(\m1_unaligned_addr_3lsb_reg[2]_0 ),
        .R(sync_reset));
  LUT1 #(
    .INIT(2'h1)) 
    \m2_byte_selects[0]_i_1 
       (.I0(\m1_unaligned_addr_3lsb_reg[1]_0 ),
        .O(\m2_byte_selects[0]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \m2_byte_selects[1]_i_1 
       (.I0(\m1_unaligned_addr_3lsb_reg[2]_0 ),
        .O(\m2_byte_selects[1]_i_1_n_0 ));
  FDRE \m2_byte_selects_reg[0] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\m2_byte_selects[0]_i_1_n_0 ),
        .Q(m2_byte_selects[0]),
        .R(sync_reset));
  FDRE \m2_byte_selects_reg[1] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\m2_byte_selects[1]_i_1_n_0 ),
        .Q(m2_byte_selects[1]),
        .R(sync_reset));
  FDRE \m3_byte_selects_reg[0] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_byte_selects[0]),
        .Q(m3_byte_selects[0]),
        .R(sync_reset));
  FDRE \m3_byte_selects_reg[1] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_byte_selects[1]),
        .Q(m3_byte_selects[1]),
        .R(sync_reset));
  FDRE \m3_databus_byte_enable_i_reg[0] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [3]),
        .Q(\m3_databus_byte_enable_i_reg_n_0_[0] ),
        .R(sync_reset));
  FDRE \m3_databus_byte_enable_i_reg[1] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [2]),
        .Q(\m3_databus_byte_enable_i_reg_n_0_[1] ),
        .R(sync_reset));
  FDRE \m3_databus_byte_enable_i_reg[2] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [1]),
        .Q(\m3_databus_byte_enable_i_reg_n_0_[2] ),
        .R(sync_reset));
  FDRE \m3_databus_byte_enable_i_reg[3] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [0]),
        .Q(\m3_databus_byte_enable_i_reg_n_0_[3] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[0] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [35]),
        .Q(\m3_databus_write_data_i_reg_n_0_[0] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[10] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [25]),
        .Q(\m3_databus_write_data_i_reg_n_0_[10] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[11] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [24]),
        .Q(\m3_databus_write_data_i_reg_n_0_[11] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[12] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [23]),
        .Q(\m3_databus_write_data_i_reg_n_0_[12] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[13] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [22]),
        .Q(\m3_databus_write_data_i_reg_n_0_[13] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[14] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [21]),
        .Q(\m3_databus_write_data_i_reg_n_0_[14] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[15] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [20]),
        .Q(\m3_databus_write_data_i_reg_n_0_[15] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[16] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [19]),
        .Q(\m3_databus_write_data_i_reg_n_0_[16] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[17] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [18]),
        .Q(\m3_databus_write_data_i_reg_n_0_[17] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[18] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [17]),
        .Q(\m3_databus_write_data_i_reg_n_0_[18] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[19] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [16]),
        .Q(\m3_databus_write_data_i_reg_n_0_[19] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[1] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [34]),
        .Q(\m3_databus_write_data_i_reg_n_0_[1] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[20] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [15]),
        .Q(\m3_databus_write_data_i_reg_n_0_[20] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[21] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [14]),
        .Q(\m3_databus_write_data_i_reg_n_0_[21] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[22] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [13]),
        .Q(\m3_databus_write_data_i_reg_n_0_[22] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[23] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [12]),
        .Q(\m3_databus_write_data_i_reg_n_0_[23] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[24] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [11]),
        .Q(\m3_databus_write_data_i_reg_n_0_[24] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[25] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [10]),
        .Q(\m3_databus_write_data_i_reg_n_0_[25] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[26] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [9]),
        .Q(\m3_databus_write_data_i_reg_n_0_[26] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[27] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [8]),
        .Q(\m3_databus_write_data_i_reg_n_0_[27] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[28] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [7]),
        .Q(\m3_databus_write_data_i_reg_n_0_[28] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[29] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [6]),
        .Q(\m3_databus_write_data_i_reg_n_0_[29] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[2] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [33]),
        .Q(\m3_databus_write_data_i_reg_n_0_[2] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[30] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [5]),
        .Q(\m3_databus_write_data_i_reg_n_0_[30] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[31] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [4]),
        .Q(\m3_databus_write_data_i_reg_n_0_[31] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[3] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [32]),
        .Q(\m3_databus_write_data_i_reg_n_0_[3] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[4] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [31]),
        .Q(\m3_databus_write_data_i_reg_n_0_[4] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[5] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [30]),
        .Q(\m3_databus_write_data_i_reg_n_0_[5] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[6] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [29]),
        .Q(\m3_databus_write_data_i_reg_n_0_[6] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[7] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [28]),
        .Q(\m3_databus_write_data_i_reg_n_0_[7] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[8] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [27]),
        .Q(\m3_databus_write_data_i_reg_n_0_[8] ),
        .R(sync_reset));
  FDRE \m3_databus_write_data_i_reg[9] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\m3_databus_write_data_i_reg[0]_0 [26]),
        .Q(\m3_databus_write_data_i_reg_n_0_[9] ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'hFB)) 
    \trace_new_reg_value_i[24]_i_5 
       (.I0(\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 [1]),
        .I1(wb_byte_access),
        .I2(\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 [0]),
        .O(\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT3 #(
    .INIT(8'hDF)) 
    \trace_new_reg_value_i[24]_i_6 
       (.I0(wb_byte_access),
        .I1(\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 [0]),
        .I2(\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 [1]),
        .O(WB_Byte_Access_reg));
endmodule

(* ORIG_REF_NAME = "Cache_ff" *) 
module microblaze_microblaze_0_0_Cache_ff
   ();

  (* RTL_KEEP = "true" *) wire c2_first_cycle_cmb;

  LUT1 #(
    .INIT(2'h2)) 
    DCache_I1i_0
       (.I0(1'b0),
        .O(c2_first_cycle_cmb));
endmodule

(* ORIG_REF_NAME = "Cache_ff" *) 
module microblaze_microblaze_0_0_Cache_ff__parameterized1
   ();

  (* RTL_KEEP = "true" *) wire c2_first_cycle_cmb;

  LUT1 #(
    .INIT(2'h2)) 
    ICache_I1i_0
       (.I0(1'b0),
        .O(c2_first_cycle_cmb));
endmodule

(* ORIG_REF_NAME = "DAXI_interface_ff" *) 
module microblaze_microblaze_0_0_DAXI_interface_ff
   (m3_active_access,
    D,
    \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg_0 ,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ,
    \Use_DAXI.m2_active_access_unmasked_reg_0 ,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ,
    \Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ,
    S,
    \Use_DAXI.M_AXI_DP_BREADY_I_reg_1 ,
    m2_databus_access_i_reg,
    Q,
    sync_reset,
    m2_piperun,
    m2_active_access,
    Clk,
    m1_piperun,
    \Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 ,
    \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg_1 ,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ,
    \Use_DAXI.m2_active_access_unmasked_reg_1 ,
    \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ,
    \Use_DAXI.M_AXI_DP_BREADY_I_reg_2 ,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ,
    \Use_DAXI.wb_data_has_been_used_reg_0 ,
    M_AXI_DP_BVALID,
    M_AXI_DP_RVALID,
    m3_piperun,
    M_AXI_DP_ARREADY,
    m2_dlmb_drop_request,
    m2_allow_dready,
    DReady,
    \LOCKSTEP_Out_reg[721] ,
    DWait,
    m3_sel_load_res,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Use_DAXI.M_AXI_DP_ARADDR_reg[1]_0 ,
    M_AXI_DP_RDATA);
  output m3_active_access;
  output [70:0]D;
  output \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg_0 ;
  output \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ;
  output \Use_DAXI.m2_active_access_unmasked_reg_0 ;
  output \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ;
  output \Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ;
  output S;
  output \Use_DAXI.M_AXI_DP_BREADY_I_reg_1 ;
  output m2_databus_access_i_reg;
  output [31:0]Q;
  input sync_reset;
  input m2_piperun;
  input m2_active_access;
  input Clk;
  input m1_piperun;
  input [65:0]\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 ;
  input \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg_1 ;
  input \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ;
  input \Use_DAXI.m2_active_access_unmasked_reg_1 ;
  input \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ;
  input \Use_DAXI.M_AXI_DP_BREADY_I_reg_2 ;
  input \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ;
  input \Use_DAXI.wb_data_has_been_used_reg_0 ;
  input M_AXI_DP_BVALID;
  input M_AXI_DP_RVALID;
  input m3_piperun;
  input M_AXI_DP_ARREADY;
  input m2_dlmb_drop_request;
  input m2_allow_dready;
  input DReady;
  input \LOCKSTEP_Out_reg[721] ;
  input DWait;
  input m3_sel_load_res;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [1:0]\Use_DAXI.M_AXI_DP_ARADDR_reg[1]_0 ;
  input [31:0]M_AXI_DP_RDATA;

  wire Clk;
  wire [70:0]D;
  wire DReady;
  wire DWait;
  wire \LOCKSTEP_Out_reg[721] ;
  wire M3_DAXI_Data_Strobe;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire [31:0]Q;
  wire S;
  wire \Use_DAXI.M3_DAXI_Data_Strobe_i_1_n_0 ;
  wire [1:0]\Use_DAXI.M_AXI_DP_ARADDR_reg[1]_0 ;
  wire [65:0]\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 ;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ;
  wire \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg_1 ;
  wire \Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_BREADY_I_reg_1 ;
  wire \Use_DAXI.M_AXI_DP_BREADY_I_reg_2 ;
  wire \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ;
  wire \Use_DAXI.m2_active_access_unmasked_reg_0 ;
  wire \Use_DAXI.m2_active_access_unmasked_reg_1 ;
  wire \Use_DAXI.wb_data_has_been_used_reg_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire m1_piperun;
  wire m2_active_access;
  wire m2_allow_dready;
  wire m2_databus_access_i_reg;
  wire m2_dlmb_drop_request;
  wire m2_piperun;
  wire m3_active_access;
  wire m3_daxi_stall;
  wire m3_piperun;
  wire m3_sel_load_res;
  wire p_0_out;
  wire p_1_out;
  wire sync_reset;
  wire wb_daxi_data_strobe;

  LUT6 #(
    .INIT(64'h0000040400000444)) 
    M_AXI_DP_ARVALID_INST_0
       (.I0(D[2]),
        .I1(\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ),
        .I2(m2_allow_dready),
        .I3(DReady),
        .I4(\LOCKSTEP_Out_reg[721] ),
        .I5(DWait),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h00FC00FC000000AA)) 
    \Use_DAXI.M3_DAXI_Data_Strobe_i_1 
       (.I0(M3_DAXI_Data_Strobe),
        .I1(M_AXI_DP_BVALID),
        .I2(M_AXI_DP_RVALID),
        .I3(sync_reset),
        .I4(m3_piperun),
        .I5(m3_daxi_stall),
        .O(\Use_DAXI.M3_DAXI_Data_Strobe_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \Use_DAXI.M3_DAXI_Data_Strobe_i_2 
       (.I0(D[0]),
        .I1(D[2]),
        .O(m3_daxi_stall));
  FDRE \Use_DAXI.M3_DAXI_Data_Strobe_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DAXI.M3_DAXI_Data_Strobe_i_1_n_0 ),
        .Q(M3_DAXI_Data_Strobe),
        .R(1'b0));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[0] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[1]_0 [0]),
        .Q(D[39]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[10] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [44]),
        .Q(D[49]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[11] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [45]),
        .Q(D[50]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[12] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [46]),
        .Q(D[51]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[13] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [47]),
        .Q(D[52]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[14] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [48]),
        .Q(D[53]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[15] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [49]),
        .Q(D[54]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[16] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [50]),
        .Q(D[55]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[17] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [51]),
        .Q(D[56]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[18] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [52]),
        .Q(D[57]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[19] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [53]),
        .Q(D[58]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[1] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[1]_0 [1]),
        .Q(D[40]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[20] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [54]),
        .Q(D[59]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[21] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [55]),
        .Q(D[60]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[22] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [56]),
        .Q(D[61]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[23] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [57]),
        .Q(D[62]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[24] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [58]),
        .Q(D[63]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[25] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [59]),
        .Q(D[64]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[26] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [60]),
        .Q(D[65]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[27] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [61]),
        .Q(D[66]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[28] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [62]),
        .Q(D[67]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[29] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [63]),
        .Q(D[68]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[2] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [36]),
        .Q(D[41]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[30] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [64]),
        .Q(D[69]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[31] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [65]),
        .Q(D[70]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[3] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [37]),
        .Q(D[42]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[4] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [38]),
        .Q(D[43]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[5] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [39]),
        .Q(D[44]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[6] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [40]),
        .Q(D[45]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[7] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [41]),
        .Q(D[46]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[8] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [42]),
        .Q(D[47]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_ARADDR_reg[9] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [43]),
        .Q(D[48]),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFF00FF00FFFFFF40)) 
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_i_2 
       (.I0(D[2]),
        .I1(\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ),
        .I2(M_AXI_DP_ARREADY),
        .I3(sync_reset),
        .I4(m2_dlmb_drop_request),
        .I5(m1_piperun),
        .O(\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ));
  FDRE \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ),
        .Q(\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ),
        .R(1'b0));
  FDRE \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg_1 ),
        .Q(\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg_0 ),
        .R(1'b0));
  FDRE \Use_DAXI.M_AXI_DP_BREADY_I_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DAXI.M_AXI_DP_BREADY_I_reg_2 ),
        .Q(D[2]),
        .R(1'b0));
  FDRE \Use_DAXI.M_AXI_DP_RREADY_I_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ),
        .Q(D[0]),
        .R(1'b0));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[0] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [4]),
        .Q(D[7]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[10] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [14]),
        .Q(D[17]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[11] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [15]),
        .Q(D[18]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[12] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [16]),
        .Q(D[19]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[13] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [17]),
        .Q(D[20]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[14] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [18]),
        .Q(D[21]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[15] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [19]),
        .Q(D[22]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[16] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [20]),
        .Q(D[23]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[17] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [21]),
        .Q(D[24]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[18] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [22]),
        .Q(D[25]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[19] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [23]),
        .Q(D[26]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[1] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [5]),
        .Q(D[8]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[20] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [24]),
        .Q(D[27]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[21] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [25]),
        .Q(D[28]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[22] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [26]),
        .Q(D[29]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[23] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [27]),
        .Q(D[30]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[24] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [28]),
        .Q(D[31]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[25] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [29]),
        .Q(D[32]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[26] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [30]),
        .Q(D[33]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[27] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [31]),
        .Q(D[34]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[28] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [32]),
        .Q(D[35]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[29] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [33]),
        .Q(D[36]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[2] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [6]),
        .Q(D[9]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[30] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [34]),
        .Q(D[37]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[31] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [35]),
        .Q(D[38]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[3] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [7]),
        .Q(D[10]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[4] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [8]),
        .Q(D[11]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[5] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [9]),
        .Q(D[12]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[6] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [10]),
        .Q(D[13]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[7] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [11]),
        .Q(D[14]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[8] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [12]),
        .Q(D[15]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WDATA_reg[9] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [13]),
        .Q(D[16]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WSTRB_reg[0] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [0]),
        .Q(D[3]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WSTRB_reg[1] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [1]),
        .Q(D[4]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WSTRB_reg[2] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [2]),
        .Q(D[5]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WSTRB_reg[3] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 [3]),
        .Q(D[6]),
        .R(sync_reset));
  FDRE \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ),
        .Q(\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFF10)) 
    \Use_DAXI.WB_DAXI_Valid_Read_Data[0]_i_1 
       (.I0(D[0]),
        .I1(D[2]),
        .I2(wb_daxi_data_strobe),
        .I3(sync_reset),
        .O(p_1_out));
  LUT3 #(
    .INIT(8'hE0)) 
    \Use_DAXI.WB_DAXI_Valid_Read_Data[0]_i_2 
       (.I0(D[2]),
        .I1(D[0]),
        .I2(M_AXI_DP_RVALID),
        .O(p_0_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[0] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[31]),
        .Q(Q[31]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[10] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[21]),
        .Q(Q[21]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[11] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[20]),
        .Q(Q[20]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[12] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[19]),
        .Q(Q[19]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[13] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[18]),
        .Q(Q[18]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[14] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[17]),
        .Q(Q[17]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[15] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[16]),
        .Q(Q[16]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[16] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[15]),
        .Q(Q[15]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[17] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[14]),
        .Q(Q[14]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[18] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[13]),
        .Q(Q[13]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[19] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[12]),
        .Q(Q[12]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[1] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[30]),
        .Q(Q[30]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[20] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[11]),
        .Q(Q[11]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[21] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[10]),
        .Q(Q[10]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[22] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[9]),
        .Q(Q[9]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[23] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[8]),
        .Q(Q[8]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[24] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[7]),
        .Q(Q[7]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[25] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[6]),
        .Q(Q[6]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[26] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[5]),
        .Q(Q[5]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[27] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[4]),
        .Q(Q[4]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[28] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[3]),
        .Q(Q[3]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[29] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[2]),
        .Q(Q[2]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[2] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[29]),
        .Q(Q[29]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[30] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[1]),
        .Q(Q[1]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[31] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[0]),
        .Q(Q[0]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[3] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[28]),
        .Q(Q[28]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[4] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[27]),
        .Q(Q[27]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[5] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[26]),
        .Q(Q[26]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[6] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[25]),
        .Q(Q[25]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[7] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[24]),
        .Q(Q[24]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[8] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[23]),
        .Q(Q[23]),
        .R(p_1_out));
  FDRE \Use_DAXI.WB_DAXI_Valid_Read_Data_reg[9] 
       (.C(Clk),
        .CE(p_0_out),
        .D(M_AXI_DP_RDATA[22]),
        .Q(Q[22]),
        .R(p_1_out));
  FDRE \Use_DAXI.m2_active_access_unmasked_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DAXI.m2_active_access_unmasked_reg_1 ),
        .Q(\Use_DAXI.m2_active_access_unmasked_reg_0 ),
        .R(sync_reset));
  FDRE \Use_DAXI.m3_active_access_reg 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_active_access),
        .Q(m3_active_access),
        .R(sync_reset));
  FDRE \Use_DAXI.wb_data_has_been_used_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DAXI.wb_data_has_been_used_reg_0 ),
        .Q(wb_daxi_data_strobe),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__217 
       (.I0(M3_DAXI_Data_Strobe),
        .O(S));
  LUT4 #(
    .INIT(16'h1FFF)) 
    \Using_FPGA.Native_i_1__30 
       (.I0(D[2]),
        .I1(D[0]),
        .I2(m3_sel_load_res),
        .I3(\Using_FPGA.Native ),
        .O(\Use_DAXI.M_AXI_DP_BREADY_I_reg_1 ));
  LUT6 #(
    .INIT(64'hF7F7F7F7F7F7F7FF)) 
    \Using_FPGA.Native_i_1__35 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(m2_dlmb_drop_request),
        .I3(\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg_0 ),
        .I4(\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ),
        .I5(\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ),
        .O(m2_databus_access_i_reg));
endmodule

(* ORIG_REF_NAME = "DLMB_Interface_ff" *) 
module microblaze_microblaze_0_0_DLMB_Interface_ff
   (m2_allow_dready,
    m1_dlmb_issued,
    \Use_DLMB.m2_dready_hold_reg_0 ,
    m2_potential_bubble,
    m2_dlmb_dready,
    DWait_0,
    m2_active_access,
    D,
    m2_dlmb_drop_request,
    S,
    \Use_DLMB.m1_dlmb_issued_reg_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[15]_0 ,
    Q,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[14]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[13]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[12]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[11]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[10]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[9]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[8]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[23]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[22]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[21]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[20]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[19]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[18]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[17]_0 ,
    \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[16]_0 ,
    sync_reset,
    m2_piperun,
    Clk,
    \Use_DLMB.m2_allow_dready_reg_0 ,
    \Use_DLMB.m1_dlmb_issued_reg_1 ,
    \Use_DLMB.m2_dready_hold_reg_1 ,
    \Use_DLMB.m2_potential_bubble_reg_0 ,
    m3_piperun,
    m1_piperun,
    DWait,
    DReady,
    \Use_DAXI.m3_active_access_reg ,
    \LOCKSTEP_Out_reg[629] ,
    \LOCKSTEP_Out_reg[555] ,
    \trace_new_reg_value_i_reg[31] ,
    \trace_new_reg_value_i_reg[16] ,
    \trace_new_reg_value_i_reg[31]_0 ,
    wb_databus_read_data,
    wb_doublet_access,
    \trace_new_reg_value_i_reg[23] ,
    \trace_new_reg_value_i[31]_i_2_0 ,
    Data_Read);
  output m2_allow_dready;
  output m1_dlmb_issued;
  output \Use_DLMB.m2_dready_hold_reg_0 ;
  output m2_potential_bubble;
  output m2_dlmb_dready;
  output DWait_0;
  output m2_active_access;
  output [1:0]D;
  output m2_dlmb_drop_request;
  output S;
  output \Use_DLMB.m1_dlmb_issued_reg_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[15]_0 ;
  output [15:0]Q;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[14]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[13]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[12]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[11]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[10]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[9]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[8]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[23]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[22]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[21]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[20]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[19]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[18]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[17]_0 ;
  output \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[16]_0 ;
  input sync_reset;
  input m2_piperun;
  input Clk;
  input \Use_DLMB.m2_allow_dready_reg_0 ;
  input \Use_DLMB.m1_dlmb_issued_reg_1 ;
  input \Use_DLMB.m2_dready_hold_reg_1 ;
  input \Use_DLMB.m2_potential_bubble_reg_0 ;
  input m3_piperun;
  input m1_piperun;
  input DWait;
  input DReady;
  input \Use_DAXI.m3_active_access_reg ;
  input \LOCKSTEP_Out_reg[629] ;
  input \LOCKSTEP_Out_reg[555] ;
  input \trace_new_reg_value_i_reg[31] ;
  input [31:0]\trace_new_reg_value_i_reg[16] ;
  input \trace_new_reg_value_i_reg[31]_0 ;
  input [7:0]wb_databus_read_data;
  input wb_doublet_access;
  input [0:0]\trace_new_reg_value_i_reg[23] ;
  input \trace_new_reg_value_i[31]_i_2_0 ;
  input [0:31]Data_Read;

  wire Clk;
  wire [1:0]D;
  wire DReady;
  wire DWait;
  wire DWait_0;
  wire [0:31]Data_Read;
  wire \LOCKSTEP_Out_reg[555] ;
  wire \LOCKSTEP_Out_reg[629] ;
  wire [15:0]Q;
  wire S;
  wire \Use_DAXI.m3_active_access_reg ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[10]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[11]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[12]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[13]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[14]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[15]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[16]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[17]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[18]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[19]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[20]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[21]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[22]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[23]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[8]_0 ;
  wire \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[9]_0 ;
  wire \Use_DLMB.m1_dlmb_issued_reg_0 ;
  wire \Use_DLMB.m1_dlmb_issued_reg_1 ;
  wire \Use_DLMB.m1_dready_hold_i_1_n_0 ;
  wire \Use_DLMB.m2_allow_dready_reg_0 ;
  wire \Use_DLMB.m2_dready_hold_reg_0 ;
  wire \Use_DLMB.m2_dready_hold_reg_1 ;
  wire \Use_DLMB.m2_potential_bubble_reg_0 ;
  wire \Use_DLMB.m3_DLMB_Data_Strobe_i_i_1_n_0 ;
  wire [0:31]dlmb_data_bubble;
  wire [0:31]dlmb_data_direct;
  wire m1_dlmb_issued;
  wire m1_dready_hold;
  wire m1_piperun;
  wire m2_active_access;
  wire m2_allow_dready;
  wire m2_dlmb_dready;
  wire m2_dlmb_drop_request;
  wire m2_piperun;
  wire m2_potential_bubble;
  wire m3_DLMB_Data_Strobe_i;
  wire [0:31]m3_dlmb_read_data_i;
  wire m3_piperun;
  wire m3_use_bubble;
  wire p_5_out;
  wire sync_reset;
  wire \trace_new_reg_value_i[24]_i_3_n_0 ;
  wire \trace_new_reg_value_i[25]_i_3_n_0 ;
  wire \trace_new_reg_value_i[26]_i_3_n_0 ;
  wire \trace_new_reg_value_i[27]_i_3_n_0 ;
  wire \trace_new_reg_value_i[28]_i_3_n_0 ;
  wire \trace_new_reg_value_i[29]_i_3_n_0 ;
  wire \trace_new_reg_value_i[30]_i_3_n_0 ;
  wire \trace_new_reg_value_i[31]_i_2_0 ;
  wire \trace_new_reg_value_i[31]_i_3_n_0 ;
  wire [31:0]\trace_new_reg_value_i_reg[16] ;
  wire [0:0]\trace_new_reg_value_i_reg[23] ;
  wire \trace_new_reg_value_i_reg[31] ;
  wire \trace_new_reg_value_i_reg[31]_0 ;
  wire [7:0]wb_databus_read_data;
  wire [16:31]wb_dlmb_valid_read_data;
  wire wb_doublet_access;

  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT5 #(
    .INIT(32'h0022002A)) 
    M_AXI_DP_AWVALID_INST_0
       (.I0(\LOCKSTEP_Out_reg[555] ),
        .I1(m2_allow_dready),
        .I2(DReady),
        .I3(\Use_DLMB.m2_dready_hold_reg_0 ),
        .I4(DWait),
        .O(D[1]));
  LUT5 #(
    .INIT(32'h0022002A)) 
    M_AXI_DP_WVALID_INST_0
       (.I0(\LOCKSTEP_Out_reg[629] ),
        .I1(m2_allow_dready),
        .I2(DReady),
        .I3(\Use_DLMB.m2_dready_hold_reg_0 ),
        .I4(DWait),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hFFFFFFFF55545050)) 
    \Use_DAXI.M_AXI_DP_AWVALID_unmasked_i_2 
       (.I0(m1_piperun),
        .I1(DWait),
        .I2(\Use_DLMB.m2_dready_hold_reg_0 ),
        .I3(DReady),
        .I4(m2_allow_dready),
        .I5(sync_reset),
        .O(DWait_0));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT4 #(
    .INIT(16'hFECC)) 
    \Use_DAXI.M_AXI_DP_BREADY_I_i_2 
       (.I0(DWait),
        .I1(\Use_DLMB.m2_dready_hold_reg_0 ),
        .I2(DReady),
        .I3(m2_allow_dready),
        .O(m2_dlmb_drop_request));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT5 #(
    .INIT(32'h0022002A)) 
    \Use_DAXI.m3_active_access_i_1 
       (.I0(\Use_DAXI.m3_active_access_reg ),
        .I1(m2_allow_dready),
        .I2(DReady),
        .I3(\Use_DLMB.m2_dready_hold_reg_0 ),
        .I4(DWait),
        .O(m2_active_access));
  LUT2 #(
    .INIT(4'hB)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1 
       (.I0(sync_reset),
        .I1(m3_DLMB_Data_Strobe_i),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_2 
       (.I0(dlmb_data_bubble[0]),
        .I1(dlmb_data_direct[0]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[0]));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[10]_i_1 
       (.I0(dlmb_data_bubble[10]),
        .I1(dlmb_data_direct[10]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[10]));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[11]_i_1 
       (.I0(dlmb_data_bubble[11]),
        .I1(dlmb_data_direct[11]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[11]));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[12]_i_1 
       (.I0(dlmb_data_bubble[12]),
        .I1(dlmb_data_direct[12]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[12]));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[13]_i_1 
       (.I0(dlmb_data_bubble[13]),
        .I1(dlmb_data_direct[13]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[13]));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[14]_i_1 
       (.I0(dlmb_data_bubble[14]),
        .I1(dlmb_data_direct[14]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[14]));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[15]_i_1 
       (.I0(dlmb_data_bubble[15]),
        .I1(dlmb_data_direct[15]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[15]));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[16]_i_1 
       (.I0(dlmb_data_bubble[16]),
        .I1(dlmb_data_direct[16]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[16]));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[17]_i_1 
       (.I0(dlmb_data_bubble[17]),
        .I1(dlmb_data_direct[17]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[17]));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[18]_i_1 
       (.I0(dlmb_data_bubble[18]),
        .I1(dlmb_data_direct[18]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[18]));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[19]_i_1 
       (.I0(dlmb_data_bubble[19]),
        .I1(dlmb_data_direct[19]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[19]));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[1]_i_1 
       (.I0(dlmb_data_bubble[1]),
        .I1(dlmb_data_direct[1]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[1]));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[20]_i_1 
       (.I0(dlmb_data_bubble[20]),
        .I1(dlmb_data_direct[20]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[20]));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[21]_i_1 
       (.I0(dlmb_data_bubble[21]),
        .I1(dlmb_data_direct[21]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[21]));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[22]_i_1 
       (.I0(dlmb_data_bubble[22]),
        .I1(dlmb_data_direct[22]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[22]));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[23]_i_1 
       (.I0(dlmb_data_bubble[23]),
        .I1(dlmb_data_direct[23]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[23]));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[24]_i_1 
       (.I0(dlmb_data_bubble[24]),
        .I1(dlmb_data_direct[24]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[24]));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[25]_i_1 
       (.I0(dlmb_data_bubble[25]),
        .I1(dlmb_data_direct[25]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[25]));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[26]_i_1 
       (.I0(dlmb_data_bubble[26]),
        .I1(dlmb_data_direct[26]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[26]));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[27]_i_1 
       (.I0(dlmb_data_bubble[27]),
        .I1(dlmb_data_direct[27]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[27]));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[28]_i_1 
       (.I0(dlmb_data_bubble[28]),
        .I1(dlmb_data_direct[28]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[28]));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[29]_i_1 
       (.I0(dlmb_data_bubble[29]),
        .I1(dlmb_data_direct[29]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[29]));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[2]_i_1 
       (.I0(dlmb_data_bubble[2]),
        .I1(dlmb_data_direct[2]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[2]));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[30]_i_1 
       (.I0(dlmb_data_bubble[30]),
        .I1(dlmb_data_direct[30]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[30]));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[31]_i_1 
       (.I0(dlmb_data_bubble[31]),
        .I1(dlmb_data_direct[31]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[31]));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[3]_i_1 
       (.I0(dlmb_data_bubble[3]),
        .I1(dlmb_data_direct[3]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[3]));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[4]_i_1 
       (.I0(dlmb_data_bubble[4]),
        .I1(dlmb_data_direct[4]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[4]));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[5]_i_1 
       (.I0(dlmb_data_bubble[5]),
        .I1(dlmb_data_direct[5]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[5]));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[6]_i_1 
       (.I0(dlmb_data_bubble[6]),
        .I1(dlmb_data_direct[6]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[6]));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[7]_i_1 
       (.I0(dlmb_data_bubble[7]),
        .I1(dlmb_data_direct[7]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[7]));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[8]_i_1 
       (.I0(dlmb_data_bubble[8]),
        .I1(dlmb_data_direct[8]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[8]));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_DLMB.WB_DLMB_Valid_Read_Data[9]_i_1 
       (.I0(dlmb_data_bubble[9]),
        .I1(dlmb_data_direct[9]),
        .I2(m3_use_bubble),
        .O(m3_dlmb_read_data_i[9]));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[0] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[0]),
        .Q(Q[15]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[10] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[10]),
        .Q(Q[5]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[11] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[11]),
        .Q(Q[4]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[12] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[12]),
        .Q(Q[3]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[13] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[13]),
        .Q(Q[2]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[14] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[14]),
        .Q(Q[1]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[15] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[15]),
        .Q(Q[0]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[16] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[16]),
        .Q(wb_dlmb_valid_read_data[16]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[17] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[17]),
        .Q(wb_dlmb_valid_read_data[17]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[18] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[18]),
        .Q(wb_dlmb_valid_read_data[18]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[19] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[19]),
        .Q(wb_dlmb_valid_read_data[19]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[1] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[1]),
        .Q(Q[14]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[20] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[20]),
        .Q(wb_dlmb_valid_read_data[20]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[21] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[21]),
        .Q(wb_dlmb_valid_read_data[21]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[22] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[22]),
        .Q(wb_dlmb_valid_read_data[22]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[23] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[23]),
        .Q(wb_dlmb_valid_read_data[23]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[24] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[24]),
        .Q(wb_dlmb_valid_read_data[24]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[25] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[25]),
        .Q(wb_dlmb_valid_read_data[25]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[26] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[26]),
        .Q(wb_dlmb_valid_read_data[26]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[27] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[27]),
        .Q(wb_dlmb_valid_read_data[27]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[28] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[28]),
        .Q(wb_dlmb_valid_read_data[28]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[29] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[29]),
        .Q(wb_dlmb_valid_read_data[29]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[2] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[2]),
        .Q(Q[13]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[30] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[30]),
        .Q(wb_dlmb_valid_read_data[30]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[31] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[31]),
        .Q(wb_dlmb_valid_read_data[31]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[3] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[3]),
        .Q(Q[12]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[4] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[4]),
        .Q(Q[11]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[5] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[5]),
        .Q(Q[10]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[6] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[6]),
        .Q(Q[9]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[7] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[7]),
        .Q(Q[8]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[8] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[8]),
        .Q(Q[7]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.WB_DLMB_Valid_Read_Data_reg[9] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_dlmb_read_data_i[9]),
        .Q(Q[6]),
        .R(\Use_DLMB.WB_DLMB_Valid_Read_Data[0]_i_1_n_0 ));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[0] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[0]),
        .Q(dlmb_data_bubble[0]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[10] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[10]),
        .Q(dlmb_data_bubble[10]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[11] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[11]),
        .Q(dlmb_data_bubble[11]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[12] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[12]),
        .Q(dlmb_data_bubble[12]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[13] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[13]),
        .Q(dlmb_data_bubble[13]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[14] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[14]),
        .Q(dlmb_data_bubble[14]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[15] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[15]),
        .Q(dlmb_data_bubble[15]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[16] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[16]),
        .Q(dlmb_data_bubble[16]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[17] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[17]),
        .Q(dlmb_data_bubble[17]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[18] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[18]),
        .Q(dlmb_data_bubble[18]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[19] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[19]),
        .Q(dlmb_data_bubble[19]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[1] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[1]),
        .Q(dlmb_data_bubble[1]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[20] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[20]),
        .Q(dlmb_data_bubble[20]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[21] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[21]),
        .Q(dlmb_data_bubble[21]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[22] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[22]),
        .Q(dlmb_data_bubble[22]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[23] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[23]),
        .Q(dlmb_data_bubble[23]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[24] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[24]),
        .Q(dlmb_data_bubble[24]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[25] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[25]),
        .Q(dlmb_data_bubble[25]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[26] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[26]),
        .Q(dlmb_data_bubble[26]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[27] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[27]),
        .Q(dlmb_data_bubble[27]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[28] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[28]),
        .Q(dlmb_data_bubble[28]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[29] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[29]),
        .Q(dlmb_data_bubble[29]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[2] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[2]),
        .Q(dlmb_data_bubble[2]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[30] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[30]),
        .Q(dlmb_data_bubble[30]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[31] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[31]),
        .Q(dlmb_data_bubble[31]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[3] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[3]),
        .Q(dlmb_data_bubble[3]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[4] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[4]),
        .Q(dlmb_data_bubble[4]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[5] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[5]),
        .Q(dlmb_data_bubble[5]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[6] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[6]),
        .Q(dlmb_data_bubble[6]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[7] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[7]),
        .Q(dlmb_data_bubble[7]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[8] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[8]),
        .Q(dlmb_data_bubble[8]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_bubble_reg[9] 
       (.C(Clk),
        .CE(DReady),
        .D(dlmb_data_direct[9]),
        .Q(dlmb_data_bubble[9]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[0] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[0]),
        .Q(dlmb_data_direct[0]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[10] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[10]),
        .Q(dlmb_data_direct[10]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[11] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[11]),
        .Q(dlmb_data_direct[11]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[12] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[12]),
        .Q(dlmb_data_direct[12]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[13] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[13]),
        .Q(dlmb_data_direct[13]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[14] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[14]),
        .Q(dlmb_data_direct[14]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[15] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[15]),
        .Q(dlmb_data_direct[15]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[16] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[16]),
        .Q(dlmb_data_direct[16]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[17] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[17]),
        .Q(dlmb_data_direct[17]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[18] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[18]),
        .Q(dlmb_data_direct[18]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[19] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[19]),
        .Q(dlmb_data_direct[19]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[1] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[1]),
        .Q(dlmb_data_direct[1]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[20] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[20]),
        .Q(dlmb_data_direct[20]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[21] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[21]),
        .Q(dlmb_data_direct[21]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[22] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[22]),
        .Q(dlmb_data_direct[22]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[23] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[23]),
        .Q(dlmb_data_direct[23]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[24] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[24]),
        .Q(dlmb_data_direct[24]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[25] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[25]),
        .Q(dlmb_data_direct[25]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[26] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[26]),
        .Q(dlmb_data_direct[26]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[27] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[27]),
        .Q(dlmb_data_direct[27]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[28] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[28]),
        .Q(dlmb_data_direct[28]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[29] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[29]),
        .Q(dlmb_data_direct[29]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[2] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[2]),
        .Q(dlmb_data_direct[2]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[30] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[30]),
        .Q(dlmb_data_direct[30]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[31] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[31]),
        .Q(dlmb_data_direct[31]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[3] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[3]),
        .Q(dlmb_data_direct[3]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[4] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[4]),
        .Q(dlmb_data_direct[4]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[5] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[5]),
        .Q(dlmb_data_direct[5]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[6] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[6]),
        .Q(dlmb_data_direct[6]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[7] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[7]),
        .Q(dlmb_data_direct[7]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[8] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[8]),
        .Q(dlmb_data_direct[8]),
        .R(sync_reset));
  FDRE \Use_DLMB.dlmb_data_direct_reg[9] 
       (.C(Clk),
        .CE(DReady),
        .D(Data_Read[9]),
        .Q(dlmb_data_direct[9]),
        .R(sync_reset));
  FDRE \Use_DLMB.m1_dlmb_issued_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DLMB.m1_dlmb_issued_reg_1 ),
        .Q(m1_dlmb_issued),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h000000EA)) 
    \Use_DLMB.m1_dready_hold_i_1 
       (.I0(m1_dready_hold),
        .I1(DReady),
        .I2(m1_dlmb_issued),
        .I3(m1_piperun),
        .I4(sync_reset),
        .O(\Use_DLMB.m1_dready_hold_i_1_n_0 ));
  FDRE \Use_DLMB.m1_dready_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DLMB.m1_dready_hold_i_1_n_0 ),
        .Q(m1_dready_hold),
        .R(1'b0));
  FDRE \Use_DLMB.m2_allow_dready_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DLMB.m2_allow_dready_reg_0 ),
        .Q(m2_allow_dready),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hA8A8FFFFA8A8F000)) 
    \Use_DLMB.m2_dready_hold_i_2 
       (.I0(m1_dlmb_issued),
        .I1(m1_dready_hold),
        .I2(DReady),
        .I3(m2_allow_dready),
        .I4(m1_piperun),
        .I5(\Use_DLMB.m2_dready_hold_reg_0 ),
        .O(\Use_DLMB.m1_dlmb_issued_reg_0 ));
  FDRE \Use_DLMB.m2_dready_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DLMB.m2_dready_hold_reg_1 ),
        .Q(\Use_DLMB.m2_dready_hold_reg_0 ),
        .R(1'b0));
  FDRE \Use_DLMB.m2_potential_bubble_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DLMB.m2_potential_bubble_reg_0 ),
        .Q(m2_potential_bubble),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0C0C000A)) 
    \Use_DLMB.m3_DLMB_Data_Strobe_i_i_1 
       (.I0(m3_DLMB_Data_Strobe_i),
        .I1(m2_dlmb_dready),
        .I2(sync_reset),
        .I3(m3_piperun),
        .I4(m2_piperun),
        .O(\Use_DLMB.m3_DLMB_Data_Strobe_i_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    \Use_DLMB.m3_DLMB_Data_Strobe_i_i_2 
       (.I0(m2_allow_dready),
        .I1(DReady),
        .I2(\Use_DLMB.m2_dready_hold_reg_0 ),
        .O(m2_dlmb_dready));
  FDRE \Use_DLMB.m3_DLMB_Data_Strobe_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_DLMB.m3_DLMB_Data_Strobe_i_i_1_n_0 ),
        .Q(m3_DLMB_Data_Strobe_i),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h8880)) 
    \Use_DLMB.m3_use_bubble_i_1 
       (.I0(m2_potential_bubble),
        .I1(m1_dlmb_issued),
        .I2(m1_dready_hold),
        .I3(DReady),
        .O(p_5_out));
  FDRE \Use_DLMB.m3_use_bubble_reg 
       (.C(Clk),
        .CE(m2_piperun),
        .D(p_5_out),
        .Q(m3_use_bubble),
        .R(sync_reset));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__206 
       (.I0(m3_DLMB_Data_Strobe_i),
        .O(S));
  LUT6 #(
    .INIT(64'h11111111000F1111)) 
    \trace_new_reg_value_i[16]_i_2 
       (.I0(wb_dlmb_valid_read_data[16]),
        .I1(\trace_new_reg_value_i_reg[16] [15]),
        .I2(Q[15]),
        .I3(\trace_new_reg_value_i_reg[16] [31]),
        .I4(wb_doublet_access),
        .I5(\trace_new_reg_value_i_reg[23] ),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[16]_0 ));
  LUT6 #(
    .INIT(64'h11111111000F1111)) 
    \trace_new_reg_value_i[17]_i_2 
       (.I0(wb_dlmb_valid_read_data[17]),
        .I1(\trace_new_reg_value_i_reg[16] [14]),
        .I2(Q[14]),
        .I3(\trace_new_reg_value_i_reg[16] [30]),
        .I4(wb_doublet_access),
        .I5(\trace_new_reg_value_i_reg[23] ),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[17]_0 ));
  LUT6 #(
    .INIT(64'h11111111000F1111)) 
    \trace_new_reg_value_i[18]_i_2 
       (.I0(wb_dlmb_valid_read_data[18]),
        .I1(\trace_new_reg_value_i_reg[16] [13]),
        .I2(Q[13]),
        .I3(\trace_new_reg_value_i_reg[16] [29]),
        .I4(wb_doublet_access),
        .I5(\trace_new_reg_value_i_reg[23] ),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[18]_0 ));
  LUT6 #(
    .INIT(64'h11111111000F1111)) 
    \trace_new_reg_value_i[19]_i_2 
       (.I0(wb_dlmb_valid_read_data[19]),
        .I1(\trace_new_reg_value_i_reg[16] [12]),
        .I2(Q[12]),
        .I3(\trace_new_reg_value_i_reg[16] [28]),
        .I4(wb_doublet_access),
        .I5(\trace_new_reg_value_i_reg[23] ),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[19]_0 ));
  LUT6 #(
    .INIT(64'h11111111000F1111)) 
    \trace_new_reg_value_i[20]_i_2 
       (.I0(wb_dlmb_valid_read_data[20]),
        .I1(\trace_new_reg_value_i_reg[16] [11]),
        .I2(Q[11]),
        .I3(\trace_new_reg_value_i_reg[16] [27]),
        .I4(wb_doublet_access),
        .I5(\trace_new_reg_value_i_reg[23] ),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[20]_0 ));
  LUT6 #(
    .INIT(64'h11111111000F1111)) 
    \trace_new_reg_value_i[21]_i_2 
       (.I0(wb_dlmb_valid_read_data[21]),
        .I1(\trace_new_reg_value_i_reg[16] [10]),
        .I2(Q[10]),
        .I3(\trace_new_reg_value_i_reg[16] [26]),
        .I4(wb_doublet_access),
        .I5(\trace_new_reg_value_i_reg[23] ),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[21]_0 ));
  LUT6 #(
    .INIT(64'h11111111000F1111)) 
    \trace_new_reg_value_i[22]_i_2 
       (.I0(wb_dlmb_valid_read_data[22]),
        .I1(\trace_new_reg_value_i_reg[16] [9]),
        .I2(Q[9]),
        .I3(\trace_new_reg_value_i_reg[16] [25]),
        .I4(wb_doublet_access),
        .I5(\trace_new_reg_value_i_reg[23] ),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[22]_0 ));
  LUT6 #(
    .INIT(64'h11111111000F1111)) 
    \trace_new_reg_value_i[23]_i_2 
       (.I0(wb_dlmb_valid_read_data[23]),
        .I1(\trace_new_reg_value_i_reg[16] [8]),
        .I2(Q[8]),
        .I3(\trace_new_reg_value_i_reg[16] [24]),
        .I4(wb_doublet_access),
        .I5(\trace_new_reg_value_i_reg[23] ),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[23]_0 ));
  LUT6 #(
    .INIT(64'hDDD1FFFFDDD10000)) 
    \trace_new_reg_value_i[24]_i_2 
       (.I0(\trace_new_reg_value_i[24]_i_3_n_0 ),
        .I1(\trace_new_reg_value_i_reg[31] ),
        .I2(Q[7]),
        .I3(\trace_new_reg_value_i_reg[16] [23]),
        .I4(\trace_new_reg_value_i_reg[31]_0 ),
        .I5(wb_databus_read_data[7]),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[8]_0 ));
  LUT5 #(
    .INIT(32'h1010101F)) 
    \trace_new_reg_value_i[24]_i_3 
       (.I0(wb_dlmb_valid_read_data[24]),
        .I1(\trace_new_reg_value_i_reg[16] [7]),
        .I2(\trace_new_reg_value_i[31]_i_2_0 ),
        .I3(wb_dlmb_valid_read_data[16]),
        .I4(\trace_new_reg_value_i_reg[16] [15]),
        .O(\trace_new_reg_value_i[24]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hDDD1FFFFDDD10000)) 
    \trace_new_reg_value_i[25]_i_2 
       (.I0(\trace_new_reg_value_i[25]_i_3_n_0 ),
        .I1(\trace_new_reg_value_i_reg[31] ),
        .I2(Q[6]),
        .I3(\trace_new_reg_value_i_reg[16] [22]),
        .I4(\trace_new_reg_value_i_reg[31]_0 ),
        .I5(wb_databus_read_data[6]),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[9]_0 ));
  LUT5 #(
    .INIT(32'h1010101F)) 
    \trace_new_reg_value_i[25]_i_3 
       (.I0(wb_dlmb_valid_read_data[25]),
        .I1(\trace_new_reg_value_i_reg[16] [6]),
        .I2(\trace_new_reg_value_i[31]_i_2_0 ),
        .I3(wb_dlmb_valid_read_data[17]),
        .I4(\trace_new_reg_value_i_reg[16] [14]),
        .O(\trace_new_reg_value_i[25]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hDDD1FFFFDDD10000)) 
    \trace_new_reg_value_i[26]_i_2 
       (.I0(\trace_new_reg_value_i[26]_i_3_n_0 ),
        .I1(\trace_new_reg_value_i_reg[31] ),
        .I2(Q[5]),
        .I3(\trace_new_reg_value_i_reg[16] [21]),
        .I4(\trace_new_reg_value_i_reg[31]_0 ),
        .I5(wb_databus_read_data[5]),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[10]_0 ));
  LUT5 #(
    .INIT(32'h1010101F)) 
    \trace_new_reg_value_i[26]_i_3 
       (.I0(wb_dlmb_valid_read_data[26]),
        .I1(\trace_new_reg_value_i_reg[16] [5]),
        .I2(\trace_new_reg_value_i[31]_i_2_0 ),
        .I3(wb_dlmb_valid_read_data[18]),
        .I4(\trace_new_reg_value_i_reg[16] [13]),
        .O(\trace_new_reg_value_i[26]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hDDD1FFFFDDD10000)) 
    \trace_new_reg_value_i[27]_i_2 
       (.I0(\trace_new_reg_value_i[27]_i_3_n_0 ),
        .I1(\trace_new_reg_value_i_reg[31] ),
        .I2(Q[4]),
        .I3(\trace_new_reg_value_i_reg[16] [20]),
        .I4(\trace_new_reg_value_i_reg[31]_0 ),
        .I5(wb_databus_read_data[4]),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[11]_0 ));
  LUT5 #(
    .INIT(32'h1010101F)) 
    \trace_new_reg_value_i[27]_i_3 
       (.I0(wb_dlmb_valid_read_data[27]),
        .I1(\trace_new_reg_value_i_reg[16] [4]),
        .I2(\trace_new_reg_value_i[31]_i_2_0 ),
        .I3(wb_dlmb_valid_read_data[19]),
        .I4(\trace_new_reg_value_i_reg[16] [12]),
        .O(\trace_new_reg_value_i[27]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hDDD1FFFFDDD10000)) 
    \trace_new_reg_value_i[28]_i_2 
       (.I0(\trace_new_reg_value_i[28]_i_3_n_0 ),
        .I1(\trace_new_reg_value_i_reg[31] ),
        .I2(Q[3]),
        .I3(\trace_new_reg_value_i_reg[16] [19]),
        .I4(\trace_new_reg_value_i_reg[31]_0 ),
        .I5(wb_databus_read_data[3]),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[12]_0 ));
  LUT5 #(
    .INIT(32'h1010101F)) 
    \trace_new_reg_value_i[28]_i_3 
       (.I0(wb_dlmb_valid_read_data[28]),
        .I1(\trace_new_reg_value_i_reg[16] [3]),
        .I2(\trace_new_reg_value_i[31]_i_2_0 ),
        .I3(wb_dlmb_valid_read_data[20]),
        .I4(\trace_new_reg_value_i_reg[16] [11]),
        .O(\trace_new_reg_value_i[28]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hDDD1FFFFDDD10000)) 
    \trace_new_reg_value_i[29]_i_2 
       (.I0(\trace_new_reg_value_i[29]_i_3_n_0 ),
        .I1(\trace_new_reg_value_i_reg[31] ),
        .I2(Q[2]),
        .I3(\trace_new_reg_value_i_reg[16] [18]),
        .I4(\trace_new_reg_value_i_reg[31]_0 ),
        .I5(wb_databus_read_data[2]),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[13]_0 ));
  LUT5 #(
    .INIT(32'h1010101F)) 
    \trace_new_reg_value_i[29]_i_3 
       (.I0(wb_dlmb_valid_read_data[29]),
        .I1(\trace_new_reg_value_i_reg[16] [2]),
        .I2(\trace_new_reg_value_i[31]_i_2_0 ),
        .I3(wb_dlmb_valid_read_data[21]),
        .I4(\trace_new_reg_value_i_reg[16] [10]),
        .O(\trace_new_reg_value_i[29]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hDDD1FFFFDDD10000)) 
    \trace_new_reg_value_i[30]_i_2 
       (.I0(\trace_new_reg_value_i[30]_i_3_n_0 ),
        .I1(\trace_new_reg_value_i_reg[31] ),
        .I2(Q[1]),
        .I3(\trace_new_reg_value_i_reg[16] [17]),
        .I4(\trace_new_reg_value_i_reg[31]_0 ),
        .I5(wb_databus_read_data[1]),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[14]_0 ));
  LUT5 #(
    .INIT(32'h1010101F)) 
    \trace_new_reg_value_i[30]_i_3 
       (.I0(wb_dlmb_valid_read_data[30]),
        .I1(\trace_new_reg_value_i_reg[16] [1]),
        .I2(\trace_new_reg_value_i[31]_i_2_0 ),
        .I3(wb_dlmb_valid_read_data[22]),
        .I4(\trace_new_reg_value_i_reg[16] [9]),
        .O(\trace_new_reg_value_i[30]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hDDD1FFFFDDD10000)) 
    \trace_new_reg_value_i[31]_i_2 
       (.I0(\trace_new_reg_value_i[31]_i_3_n_0 ),
        .I1(\trace_new_reg_value_i_reg[31] ),
        .I2(Q[0]),
        .I3(\trace_new_reg_value_i_reg[16] [16]),
        .I4(\trace_new_reg_value_i_reg[31]_0 ),
        .I5(wb_databus_read_data[0]),
        .O(\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[15]_0 ));
  LUT5 #(
    .INIT(32'h1010101F)) 
    \trace_new_reg_value_i[31]_i_3 
       (.I0(wb_dlmb_valid_read_data[31]),
        .I1(\trace_new_reg_value_i_reg[16] [0]),
        .I2(\trace_new_reg_value_i[31]_i_2_0 ),
        .I3(wb_dlmb_valid_read_data[23]),
        .I4(\trace_new_reg_value_i_reg[16] [8]),
        .O(\trace_new_reg_value_i[31]_i_3_n_0 ));
endmodule

(* ORIG_REF_NAME = "DSide_Logic_ff" *) 
module microblaze_microblaze_0_0_DSide_Logic_ff
   (m3_databus_ready,
    wb_databus_read_data,
    S,
    S_0,
    Q,
    \trace_new_reg_value_i_reg[0] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output m3_databus_ready;
  output [15:0]wb_databus_read_data;
  input S;
  input S_0;
  input [15:0]Q;
  input [15:0]\trace_new_reg_value_i_reg[0] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire [15:0]Q;
  wire S;
  wire S_0;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire m3_databus_ready;
  wire m3_ready_tmp;
  wire [15:0]\trace_new_reg_value_i_reg[0] ;
  wire [15:0]wb_databus_read_data;

  assign \^lopt_3  = lopt_1;
  assign \^lopt_4  = lopt_2;
  assign lopt = \^lopt_2 ;
  assign lopt_3 = \^lopt_5 ;
  assign lopt_6 = lopt_4;
  assign lopt_7 = lopt_5;
  microblaze_microblaze_0_0_carry_or_bb_49 \Using_Ready_FPGA.Rdy_Or1 
       (.S(S),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(S_0),
        .lopt_3(\^lopt_2 ),
        .lopt_4(\^lopt_3 ),
        .lopt_5(\^lopt_4 ),
        .lopt_6(\^lopt_5 ),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7),
        .m3_ready_tmp(m3_ready_tmp));
  microblaze_microblaze_0_0_carry_or_bb_50 \Using_Ready_FPGA.Rdy_Or2 
       (.S_0(S_0),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .m3_databus_ready(m3_databus_ready),
        .m3_ready_tmp(m3_ready_tmp));
  microblaze_microblaze_0_0_Read_Data_Mux_ff read_data_mux_I1
       (.Q(Q),
        .\trace_new_reg_value_i_reg[0] (\trace_new_reg_value_i_reg[0] ),
        .wb_databus_read_data(wb_databus_read_data));
endmodule

(* ORIG_REF_NAME = "Data_Flow_Logic_ff" *) 
module microblaze_microblaze_0_0_Data_Flow_Logic_ff
   (\Using_FPGA.Native ,
    m0_ex_sel_res_reg_0,
    m1_m0_sel_res_reg_0,
    m3_m2_sel_res_reg_0,
    D,
    WB_Fwd,
    \m2_M1_Result_i_reg[29]_0 ,
    \m2_M1_Result_i_reg[30]_0 ,
    \m2_M1_Result_i_reg[31]_0 ,
    \m1_M0_Result_i_reg[0]_0 ,
    \m0_Ex_Result_i_reg[0]_0 ,
    m2_m1_sel_res_reg_0,
    m2_m1_sel_res_reg_1,
    M1_Sel_Mul_Res_reg,
    m2_m1_sel_res_reg_2,
    \m1_M0_Result_i_reg[16]_0 ,
    M1_Sel_Mul_Res_reg_0,
    M1_Sel_Mul_Res_reg_1,
    M1_Sel_Mul_Res_reg_2,
    m2_m1_sel_res_reg_3,
    M1_Sel_Mul_Res_reg_3,
    M1_Sel_Mul_Res_reg_4,
    \m1_M0_Result_i_reg[25]_0 ,
    M1_Sel_Mul_Res_reg_5,
    m2_m1_sel_res_reg_4,
    m2_m1_sel_res_reg_5,
    \m0_Ex_Result_i_reg[1]_0 ,
    \m1_M0_Result_i_reg[1]_0 ,
    \m1_M0_Result_i_reg[2]_0 ,
    \m0_Ex_Result_i_reg[2]_0 ,
    \m0_Ex_Result_i_reg[3]_0 ,
    \m1_M0_Result_i_reg[3]_0 ,
    \m0_Ex_Result_i_reg[4]_0 ,
    \m1_M0_Result_i_reg[4]_0 ,
    \m1_M0_Result_i_reg[5]_0 ,
    \m0_Ex_Result_i_reg[5]_0 ,
    \m0_Ex_Result_i_reg[6]_0 ,
    \m1_M0_Result_i_reg[6]_0 ,
    \m0_Ex_Result_i_reg[7]_0 ,
    \m1_M0_Result_i_reg[7]_0 ,
    \m1_M0_Result_i_reg[8]_0 ,
    \m0_Ex_Result_i_reg[8]_0 ,
    \m1_M0_Result_i_reg[9]_0 ,
    \m0_Ex_Result_i_reg[9]_0 ,
    \m0_Ex_Result_i_reg[10]_0 ,
    \m1_M0_Result_i_reg[10]_0 ,
    \m0_Ex_Result_i_reg[11]_0 ,
    \m1_M0_Result_i_reg[11]_0 ,
    \m1_M0_Result_i_reg[12]_0 ,
    \m0_Ex_Result_i_reg[12]_0 ,
    \m1_M0_Result_i_reg[13]_0 ,
    \m0_Ex_Result_i_reg[13]_0 ,
    \m1_M0_Result_i_reg[14]_0 ,
    \m0_Ex_Result_i_reg[14]_0 ,
    \m0_Ex_Result_i_reg[15]_0 ,
    \m1_M0_Result_i_reg[15]_0 ,
    \m1_M0_Result_i_reg[29]_0 ,
    \m0_Ex_Result_i_reg[29]_0 ,
    \m0_Ex_Result_i_reg[30]_0 ,
    \m1_M0_Result_i_reg[30]_0 ,
    \m1_M0_Result_i_reg[31]_0 ,
    \m0_Ex_Result_i_reg[31]_0 ,
    EX_CarryIn,
    sync_reset,
    \m0_Ex_Result_i_reg[31]_1 ,
    m0_ex_sel_res_reg_1,
    Clk,
    m0_piperun,
    m1_m0_sel_res0,
    m1_piperun,
    m2_m1_sel_res0,
    m2_piperun,
    m3_piperun,
    wb_m3_sel_res0,
    \data_rd_reg_reg[0] ,
    \data_rd_reg_reg[31] ,
    wb_gpr_wr_dbg,
    read_register_MSR_1,
    \EX_Branch_CMP_Op1_reg[28] ,
    \EX_Branch_CMP_Op1_reg[28]_0 ,
    m1_mul_result,
    m1_sel_mul_res,
    m0_barrel_result,
    m0_sel_barrel_res,
    Q,
    m3_sel_div_res,
    \EX_Op3_reg[30] ,
    \EX_Op3_reg[30]_0 ,
    of_op3_sel,
    \m0_Ex_Result_i_reg[0]_1 ,
    GPR_Op3,
    \EX_Op3_reg[29] ,
    \EX_Op3_reg[29]_0 ,
    \EX_Op3[29]_i_2_0 ,
    \EX_Op3[29]_i_2_1 ,
    \EX_Op3_reg[30]_1 ,
    \EX_Op2_reg[1] ,
    \EX_Op2_reg[1]_0 ,
    \EX_Op2_reg[0] ,
    \EX_Op2_reg[2] ,
    \EX_Op2_reg[5] ,
    \EX_Op2_reg[8] ,
    \EX_Op2_reg[9] ,
    \EX_Op2_reg[12] ,
    \EX_Op2_reg[13] ,
    \EX_Op2_reg[14] ,
    \EX_Op2_reg[16] ,
    of_op2_sel,
    \EX_Op2_reg[18] ,
    \EX_Op2_reg[21] ,
    \EX_Op2_reg[22] ,
    \EX_Op2_reg[25] ,
    \EX_Op2_reg[28] ,
    \EX_Op2_reg[29] ,
    \EX_Op2_reg[3] ,
    \EX_Op2_reg[6] ,
    \EX_Op2_reg[7] ,
    \EX_Op2_reg[10] ,
    \EX_Op2_reg[11] ,
    \EX_Op2_reg[15] ,
    \EX_Op2_reg[20] ,
    \EX_Op2_reg[30] ,
    \EX_Op2_reg[17] ,
    \EX_Op2_reg[4] ,
    \EX_Op2_reg[1]_1 ,
    \EX_Op2_reg[19] ,
    \EX_Op2_reg[23] ,
    \EX_Op2_reg[24] ,
    \EX_Op2_reg[26] ,
    \EX_Op2_reg[27] ,
    of_op1_sel,
    GPR_Op1,
    \trace_new_reg_value_i_reg[0] ,
    wb_exception_taken,
    \trace_new_reg_value_i_reg[15] ,
    wb_databus_read_data,
    \trace_new_reg_value_i_reg[16] ,
    wb_byte_access,
    \trace_new_reg_value_i_reg[17] ,
    \trace_new_reg_value_i_reg[18] ,
    \trace_new_reg_value_i_reg[19] ,
    \trace_new_reg_value_i_reg[20] ,
    \trace_new_reg_value_i_reg[21] ,
    \trace_new_reg_value_i_reg[22] ,
    \trace_new_reg_value_i_reg[23] ,
    \trace_new_reg_value_i_reg[24] ,
    \trace_new_reg_value_i_reg[25] ,
    \trace_new_reg_value_i_reg[26] ,
    \trace_new_reg_value_i_reg[27] ,
    \trace_new_reg_value_i_reg[28] ,
    \trace_new_reg_value_i_reg[29] ,
    \trace_new_reg_value_i_reg[30] ,
    \trace_new_reg_value_i_reg[31] ,
    m2_is_div_instr,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output \Using_FPGA.Native ;
  output m0_ex_sel_res_reg_0;
  output m1_m0_sel_res_reg_0;
  output m3_m2_sel_res_reg_0;
  output [27:0]D;
  output [0:31]WB_Fwd;
  output \m2_M1_Result_i_reg[29]_0 ;
  output \m2_M1_Result_i_reg[30]_0 ;
  output \m2_M1_Result_i_reg[31]_0 ;
  output [0:0]\m1_M0_Result_i_reg[0]_0 ;
  output [0:0]\m0_Ex_Result_i_reg[0]_0 ;
  output [30:0]m2_m1_sel_res_reg_0;
  output m2_m1_sel_res_reg_1;
  output M1_Sel_Mul_Res_reg;
  output [30:0]m2_m1_sel_res_reg_2;
  output \m1_M0_Result_i_reg[16]_0 ;
  output M1_Sel_Mul_Res_reg_0;
  output M1_Sel_Mul_Res_reg_1;
  output M1_Sel_Mul_Res_reg_2;
  output m2_m1_sel_res_reg_3;
  output M1_Sel_Mul_Res_reg_3;
  output M1_Sel_Mul_Res_reg_4;
  output \m1_M0_Result_i_reg[25]_0 ;
  output M1_Sel_Mul_Res_reg_5;
  output [28:0]m2_m1_sel_res_reg_4;
  output m2_m1_sel_res_reg_5;
  output \m0_Ex_Result_i_reg[1]_0 ;
  output \m1_M0_Result_i_reg[1]_0 ;
  output \m1_M0_Result_i_reg[2]_0 ;
  output \m0_Ex_Result_i_reg[2]_0 ;
  output \m0_Ex_Result_i_reg[3]_0 ;
  output \m1_M0_Result_i_reg[3]_0 ;
  output \m0_Ex_Result_i_reg[4]_0 ;
  output \m1_M0_Result_i_reg[4]_0 ;
  output \m1_M0_Result_i_reg[5]_0 ;
  output \m0_Ex_Result_i_reg[5]_0 ;
  output \m0_Ex_Result_i_reg[6]_0 ;
  output \m1_M0_Result_i_reg[6]_0 ;
  output \m0_Ex_Result_i_reg[7]_0 ;
  output \m1_M0_Result_i_reg[7]_0 ;
  output \m1_M0_Result_i_reg[8]_0 ;
  output \m0_Ex_Result_i_reg[8]_0 ;
  output \m1_M0_Result_i_reg[9]_0 ;
  output \m0_Ex_Result_i_reg[9]_0 ;
  output \m0_Ex_Result_i_reg[10]_0 ;
  output \m1_M0_Result_i_reg[10]_0 ;
  output \m0_Ex_Result_i_reg[11]_0 ;
  output \m1_M0_Result_i_reg[11]_0 ;
  output \m1_M0_Result_i_reg[12]_0 ;
  output \m0_Ex_Result_i_reg[12]_0 ;
  output \m1_M0_Result_i_reg[13]_0 ;
  output \m0_Ex_Result_i_reg[13]_0 ;
  output \m1_M0_Result_i_reg[14]_0 ;
  output \m0_Ex_Result_i_reg[14]_0 ;
  output \m0_Ex_Result_i_reg[15]_0 ;
  output \m1_M0_Result_i_reg[15]_0 ;
  output \m1_M0_Result_i_reg[29]_0 ;
  output \m0_Ex_Result_i_reg[29]_0 ;
  output \m0_Ex_Result_i_reg[30]_0 ;
  output \m1_M0_Result_i_reg[30]_0 ;
  output \m1_M0_Result_i_reg[31]_0 ;
  output \m0_Ex_Result_i_reg[31]_0 ;
  input EX_CarryIn;
  input sync_reset;
  input \m0_Ex_Result_i_reg[31]_1 ;
  input m0_ex_sel_res_reg_1;
  input Clk;
  input m0_piperun;
  input m1_m0_sel_res0;
  input m1_piperun;
  input m2_m1_sel_res0;
  input m2_piperun;
  input m3_piperun;
  input wb_m3_sel_res0;
  input [27:0]\data_rd_reg_reg[0] ;
  input \data_rd_reg_reg[31] ;
  input wb_gpr_wr_dbg;
  input read_register_MSR_1;
  input \EX_Branch_CMP_Op1_reg[28] ;
  input \EX_Branch_CMP_Op1_reg[28]_0 ;
  input [0:31]m1_mul_result;
  input m1_sel_mul_res;
  input [0:31]m0_barrel_result;
  input m0_sel_barrel_res;
  input [31:0]Q;
  input m3_sel_div_res;
  input \EX_Op3_reg[30] ;
  input \EX_Op3_reg[30]_0 ;
  input [0:2]of_op3_sel;
  input [31:0]\m0_Ex_Result_i_reg[0]_1 ;
  input [29:0]GPR_Op3;
  input \EX_Op3_reg[29] ;
  input \EX_Op3_reg[29]_0 ;
  input \EX_Op3[29]_i_2_0 ;
  input \EX_Op3[29]_i_2_1 ;
  input \EX_Op3_reg[30]_1 ;
  input \EX_Op2_reg[1] ;
  input \EX_Op2_reg[1]_0 ;
  input \EX_Op2_reg[0] ;
  input \EX_Op2_reg[2] ;
  input \EX_Op2_reg[5] ;
  input \EX_Op2_reg[8] ;
  input \EX_Op2_reg[9] ;
  input \EX_Op2_reg[12] ;
  input \EX_Op2_reg[13] ;
  input \EX_Op2_reg[14] ;
  input \EX_Op2_reg[16] ;
  input [0:2]of_op2_sel;
  input \EX_Op2_reg[18] ;
  input \EX_Op2_reg[21] ;
  input \EX_Op2_reg[22] ;
  input \EX_Op2_reg[25] ;
  input \EX_Op2_reg[28] ;
  input \EX_Op2_reg[29] ;
  input \EX_Op2_reg[3] ;
  input \EX_Op2_reg[6] ;
  input \EX_Op2_reg[7] ;
  input \EX_Op2_reg[10] ;
  input \EX_Op2_reg[11] ;
  input \EX_Op2_reg[15] ;
  input \EX_Op2_reg[20] ;
  input \EX_Op2_reg[30] ;
  input \EX_Op2_reg[17] ;
  input \EX_Op2_reg[4] ;
  input \EX_Op2_reg[1]_1 ;
  input \EX_Op2_reg[19] ;
  input \EX_Op2_reg[23] ;
  input \EX_Op2_reg[24] ;
  input \EX_Op2_reg[26] ;
  input \EX_Op2_reg[27] ;
  input [1:0]of_op1_sel;
  input [28:0]GPR_Op1;
  input [31:0]\trace_new_reg_value_i_reg[0] ;
  input wb_exception_taken;
  input \trace_new_reg_value_i_reg[15] ;
  input [15:0]wb_databus_read_data;
  input \trace_new_reg_value_i_reg[16] ;
  input wb_byte_access;
  input \trace_new_reg_value_i_reg[17] ;
  input \trace_new_reg_value_i_reg[18] ;
  input \trace_new_reg_value_i_reg[19] ;
  input \trace_new_reg_value_i_reg[20] ;
  input \trace_new_reg_value_i_reg[21] ;
  input \trace_new_reg_value_i_reg[22] ;
  input \trace_new_reg_value_i_reg[23] ;
  input \trace_new_reg_value_i_reg[24] ;
  input \trace_new_reg_value_i_reg[25] ;
  input \trace_new_reg_value_i_reg[26] ;
  input \trace_new_reg_value_i_reg[27] ;
  input \trace_new_reg_value_i_reg[28] ;
  input \trace_new_reg_value_i_reg[29] ;
  input \trace_new_reg_value_i_reg[30] ;
  input \trace_new_reg_value_i_reg[31] ;
  input m2_is_div_instr;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;

  wire Clk;
  wire [27:0]D;
  wire \EX_Branch_CMP_Op1[0]_i_4_n_0 ;
  wire \EX_Branch_CMP_Op1[10]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[11]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[12]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[13]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[14]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[15]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[16]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[17]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[17]_i_3_n_0 ;
  wire \EX_Branch_CMP_Op1[17]_i_4_n_0 ;
  wire \EX_Branch_CMP_Op1[18]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[18]_i_3_n_0 ;
  wire \EX_Branch_CMP_Op1[18]_i_4_n_0 ;
  wire \EX_Branch_CMP_Op1[19]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[1]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[20]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[21]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[21]_i_3_n_0 ;
  wire \EX_Branch_CMP_Op1[21]_i_4_n_0 ;
  wire \EX_Branch_CMP_Op1[22]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[23]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[24]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[25]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[26]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[27]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[28]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[2]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[3]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[4]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[5]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[6]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[7]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[8]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[9]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1_reg[28] ;
  wire \EX_Branch_CMP_Op1_reg[28]_0 ;
  wire EX_CarryIn;
  wire \EX_Op2[19]_i_2_n_0 ;
  wire \EX_Op2[19]_i_3_n_0 ;
  wire \EX_Op2[19]_i_4_n_0 ;
  wire \EX_Op2[22]_i_2_n_0 ;
  wire \EX_Op2[22]_i_3_n_0 ;
  wire \EX_Op2[22]_i_4_n_0 ;
  wire \EX_Op2[23]_i_2_n_0 ;
  wire \EX_Op2[23]_i_3_n_0 ;
  wire \EX_Op2[23]_i_4_n_0 ;
  wire \EX_Op2[24]_i_2_n_0 ;
  wire \EX_Op2[24]_i_3_n_0 ;
  wire \EX_Op2[24]_i_4_n_0 ;
  wire \EX_Op2[26]_i_2_n_0 ;
  wire \EX_Op2[26]_i_3_n_0 ;
  wire \EX_Op2[26]_i_4_n_0 ;
  wire \EX_Op2[27]_i_2_n_0 ;
  wire \EX_Op2[27]_i_3_n_0 ;
  wire \EX_Op2[27]_i_4_n_0 ;
  wire \EX_Op2[28]_i_2_n_0 ;
  wire \EX_Op2[28]_i_3_n_0 ;
  wire \EX_Op2[28]_i_4_n_0 ;
  wire \EX_Op2_reg[0] ;
  wire \EX_Op2_reg[10] ;
  wire \EX_Op2_reg[11] ;
  wire \EX_Op2_reg[12] ;
  wire \EX_Op2_reg[13] ;
  wire \EX_Op2_reg[14] ;
  wire \EX_Op2_reg[15] ;
  wire \EX_Op2_reg[16] ;
  wire \EX_Op2_reg[17] ;
  wire \EX_Op2_reg[18] ;
  wire \EX_Op2_reg[19] ;
  wire \EX_Op2_reg[1] ;
  wire \EX_Op2_reg[1]_0 ;
  wire \EX_Op2_reg[1]_1 ;
  wire \EX_Op2_reg[20] ;
  wire \EX_Op2_reg[21] ;
  wire \EX_Op2_reg[22] ;
  wire \EX_Op2_reg[23] ;
  wire \EX_Op2_reg[24] ;
  wire \EX_Op2_reg[25] ;
  wire \EX_Op2_reg[26] ;
  wire \EX_Op2_reg[27] ;
  wire \EX_Op2_reg[28] ;
  wire \EX_Op2_reg[29] ;
  wire \EX_Op2_reg[2] ;
  wire \EX_Op2_reg[30] ;
  wire \EX_Op2_reg[3] ;
  wire \EX_Op2_reg[4] ;
  wire \EX_Op2_reg[5] ;
  wire \EX_Op2_reg[6] ;
  wire \EX_Op2_reg[7] ;
  wire \EX_Op2_reg[8] ;
  wire \EX_Op2_reg[9] ;
  wire \EX_Op3[0]_i_4_n_0 ;
  wire \EX_Op3[10]_i_2_n_0 ;
  wire \EX_Op3[11]_i_2_n_0 ;
  wire \EX_Op3[12]_i_2_n_0 ;
  wire \EX_Op3[13]_i_2_n_0 ;
  wire \EX_Op3[14]_i_2_n_0 ;
  wire \EX_Op3[15]_i_2_n_0 ;
  wire \EX_Op3[16]_i_2_n_0 ;
  wire \EX_Op3[17]_i_2_n_0 ;
  wire \EX_Op3[18]_i_2_n_0 ;
  wire \EX_Op3[19]_i_2_n_0 ;
  wire \EX_Op3[1]_i_2_n_0 ;
  wire \EX_Op3[20]_i_2_n_0 ;
  wire \EX_Op3[20]_i_3_n_0 ;
  wire \EX_Op3[20]_i_4_n_0 ;
  wire \EX_Op3[21]_i_2_n_0 ;
  wire \EX_Op3[22]_i_2_n_0 ;
  wire \EX_Op3[23]_i_2_n_0 ;
  wire \EX_Op3[24]_i_2_n_0 ;
  wire \EX_Op3[25]_i_2_n_0 ;
  wire \EX_Op3[26]_i_2_n_0 ;
  wire \EX_Op3[27]_i_2_n_0 ;
  wire \EX_Op3[28]_i_2_n_0 ;
  wire \EX_Op3[29]_i_2_0 ;
  wire \EX_Op3[29]_i_2_1 ;
  wire \EX_Op3[29]_i_2_n_0 ;
  wire \EX_Op3[29]_i_3_n_0 ;
  wire \EX_Op3[2]_i_2_n_0 ;
  wire \EX_Op3[3]_i_2_n_0 ;
  wire \EX_Op3[4]_i_2_n_0 ;
  wire \EX_Op3[5]_i_2_n_0 ;
  wire \EX_Op3[6]_i_2_n_0 ;
  wire \EX_Op3[7]_i_2_n_0 ;
  wire \EX_Op3[8]_i_2_n_0 ;
  wire \EX_Op3[9]_i_2_n_0 ;
  wire \EX_Op3_reg[29] ;
  wire \EX_Op3_reg[29]_0 ;
  wire \EX_Op3_reg[30] ;
  wire \EX_Op3_reg[30]_0 ;
  wire \EX_Op3_reg[30]_1 ;
  wire [28:0]GPR_Op1;
  wire [29:0]GPR_Op3;
  wire M1_Sel_Mul_Res_reg;
  wire M1_Sel_Mul_Res_reg_0;
  wire M1_Sel_Mul_Res_reg_1;
  wire M1_Sel_Mul_Res_reg_2;
  wire M1_Sel_Mul_Res_reg_3;
  wire M1_Sel_Mul_Res_reg_4;
  wire M1_Sel_Mul_Res_reg_5;
  wire [31:0]Q;
  wire \Using_FPGA.Native ;
  wire [0:31]WB_Fwd;
  wire [27:0]\data_rd_reg_reg[0] ;
  wire \data_rd_reg_reg[31] ;
  wire ex_pre_alu_carry;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]\m0_Ex_Result_i_reg[0]_0 ;
  wire [31:0]\m0_Ex_Result_i_reg[0]_1 ;
  wire \m0_Ex_Result_i_reg[10]_0 ;
  wire \m0_Ex_Result_i_reg[11]_0 ;
  wire \m0_Ex_Result_i_reg[12]_0 ;
  wire \m0_Ex_Result_i_reg[13]_0 ;
  wire \m0_Ex_Result_i_reg[14]_0 ;
  wire \m0_Ex_Result_i_reg[15]_0 ;
  wire \m0_Ex_Result_i_reg[1]_0 ;
  wire \m0_Ex_Result_i_reg[29]_0 ;
  wire \m0_Ex_Result_i_reg[2]_0 ;
  wire \m0_Ex_Result_i_reg[30]_0 ;
  wire \m0_Ex_Result_i_reg[31]_0 ;
  wire \m0_Ex_Result_i_reg[31]_1 ;
  wire \m0_Ex_Result_i_reg[3]_0 ;
  wire \m0_Ex_Result_i_reg[4]_0 ;
  wire \m0_Ex_Result_i_reg[5]_0 ;
  wire \m0_Ex_Result_i_reg[6]_0 ;
  wire \m0_Ex_Result_i_reg[7]_0 ;
  wire \m0_Ex_Result_i_reg[8]_0 ;
  wire \m0_Ex_Result_i_reg[9]_0 ;
  wire [0:31]m0_barrel_result;
  wire [0:31]m0_ex_result;
  wire m0_ex_sel_res_reg_0;
  wire m0_ex_sel_res_reg_1;
  wire [1:31]m0_fwd;
  wire m0_piperun;
  wire m0_sel_barrel_res;
  wire \m1_M0_Result_i[16]_i_1_n_0 ;
  wire \m1_M0_Result_i[25]_i_1_n_0 ;
  wire [0:0]\m1_M0_Result_i_reg[0]_0 ;
  wire \m1_M0_Result_i_reg[10]_0 ;
  wire \m1_M0_Result_i_reg[11]_0 ;
  wire \m1_M0_Result_i_reg[12]_0 ;
  wire \m1_M0_Result_i_reg[13]_0 ;
  wire \m1_M0_Result_i_reg[14]_0 ;
  wire \m1_M0_Result_i_reg[15]_0 ;
  wire \m1_M0_Result_i_reg[16]_0 ;
  wire \m1_M0_Result_i_reg[1]_0 ;
  wire \m1_M0_Result_i_reg[25]_0 ;
  wire \m1_M0_Result_i_reg[29]_0 ;
  wire \m1_M0_Result_i_reg[2]_0 ;
  wire \m1_M0_Result_i_reg[30]_0 ;
  wire \m1_M0_Result_i_reg[31]_0 ;
  wire \m1_M0_Result_i_reg[3]_0 ;
  wire \m1_M0_Result_i_reg[4]_0 ;
  wire \m1_M0_Result_i_reg[5]_0 ;
  wire \m1_M0_Result_i_reg[6]_0 ;
  wire \m1_M0_Result_i_reg[7]_0 ;
  wire \m1_M0_Result_i_reg[8]_0 ;
  wire \m1_M0_Result_i_reg[9]_0 ;
  wire \m1_M0_Result_i_reg_n_0_[0] ;
  wire \m1_M0_Result_i_reg_n_0_[10] ;
  wire \m1_M0_Result_i_reg_n_0_[11] ;
  wire \m1_M0_Result_i_reg_n_0_[12] ;
  wire \m1_M0_Result_i_reg_n_0_[13] ;
  wire \m1_M0_Result_i_reg_n_0_[14] ;
  wire \m1_M0_Result_i_reg_n_0_[15] ;
  wire \m1_M0_Result_i_reg_n_0_[16] ;
  wire \m1_M0_Result_i_reg_n_0_[17] ;
  wire \m1_M0_Result_i_reg_n_0_[18] ;
  wire \m1_M0_Result_i_reg_n_0_[19] ;
  wire \m1_M0_Result_i_reg_n_0_[1] ;
  wire \m1_M0_Result_i_reg_n_0_[20] ;
  wire \m1_M0_Result_i_reg_n_0_[21] ;
  wire \m1_M0_Result_i_reg_n_0_[22] ;
  wire \m1_M0_Result_i_reg_n_0_[23] ;
  wire \m1_M0_Result_i_reg_n_0_[24] ;
  wire \m1_M0_Result_i_reg_n_0_[25] ;
  wire \m1_M0_Result_i_reg_n_0_[26] ;
  wire \m1_M0_Result_i_reg_n_0_[27] ;
  wire \m1_M0_Result_i_reg_n_0_[28] ;
  wire \m1_M0_Result_i_reg_n_0_[29] ;
  wire \m1_M0_Result_i_reg_n_0_[2] ;
  wire \m1_M0_Result_i_reg_n_0_[30] ;
  wire \m1_M0_Result_i_reg_n_0_[31] ;
  wire \m1_M0_Result_i_reg_n_0_[3] ;
  wire \m1_M0_Result_i_reg_n_0_[4] ;
  wire \m1_M0_Result_i_reg_n_0_[5] ;
  wire \m1_M0_Result_i_reg_n_0_[6] ;
  wire \m1_M0_Result_i_reg_n_0_[7] ;
  wire \m1_M0_Result_i_reg_n_0_[8] ;
  wire \m1_M0_Result_i_reg_n_0_[9] ;
  wire [1:31]m1_fwd;
  wire m1_m0_sel_res0;
  wire m1_m0_sel_res_reg_0;
  wire [0:31]m1_mul_result;
  wire m1_piperun;
  wire m1_sel_mul_res;
  wire \m2_M1_Result_i[16]_i_1_n_0 ;
  wire \m2_M1_Result_i[25]_i_1_n_0 ;
  wire \m2_M1_Result_i_reg[29]_0 ;
  wire \m2_M1_Result_i_reg[30]_0 ;
  wire \m2_M1_Result_i_reg[31]_0 ;
  wire \m2_M1_Result_i_reg_n_0_[0] ;
  wire \m2_M1_Result_i_reg_n_0_[10] ;
  wire \m2_M1_Result_i_reg_n_0_[11] ;
  wire \m2_M1_Result_i_reg_n_0_[12] ;
  wire \m2_M1_Result_i_reg_n_0_[13] ;
  wire \m2_M1_Result_i_reg_n_0_[14] ;
  wire \m2_M1_Result_i_reg_n_0_[15] ;
  wire \m2_M1_Result_i_reg_n_0_[16] ;
  wire \m2_M1_Result_i_reg_n_0_[17] ;
  wire \m2_M1_Result_i_reg_n_0_[18] ;
  wire \m2_M1_Result_i_reg_n_0_[19] ;
  wire \m2_M1_Result_i_reg_n_0_[1] ;
  wire \m2_M1_Result_i_reg_n_0_[20] ;
  wire \m2_M1_Result_i_reg_n_0_[21] ;
  wire \m2_M1_Result_i_reg_n_0_[22] ;
  wire \m2_M1_Result_i_reg_n_0_[23] ;
  wire \m2_M1_Result_i_reg_n_0_[24] ;
  wire \m2_M1_Result_i_reg_n_0_[25] ;
  wire \m2_M1_Result_i_reg_n_0_[26] ;
  wire \m2_M1_Result_i_reg_n_0_[27] ;
  wire \m2_M1_Result_i_reg_n_0_[28] ;
  wire \m2_M1_Result_i_reg_n_0_[29] ;
  wire \m2_M1_Result_i_reg_n_0_[2] ;
  wire \m2_M1_Result_i_reg_n_0_[30] ;
  wire \m2_M1_Result_i_reg_n_0_[31] ;
  wire \m2_M1_Result_i_reg_n_0_[3] ;
  wire \m2_M1_Result_i_reg_n_0_[4] ;
  wire \m2_M1_Result_i_reg_n_0_[5] ;
  wire \m2_M1_Result_i_reg_n_0_[6] ;
  wire \m2_M1_Result_i_reg_n_0_[7] ;
  wire \m2_M1_Result_i_reg_n_0_[8] ;
  wire \m2_M1_Result_i_reg_n_0_[9] ;
  wire [0:31]m2_fwd;
  wire m2_is_div_instr;
  wire m2_m1_sel_res;
  wire m2_m1_sel_res0;
  wire [30:0]m2_m1_sel_res_reg_0;
  wire m2_m1_sel_res_reg_1;
  wire [30:0]m2_m1_sel_res_reg_2;
  wire m2_m1_sel_res_reg_3;
  wire [28:0]m2_m1_sel_res_reg_4;
  wire m2_m1_sel_res_reg_5;
  wire m2_piperun;
  wire [16:25]m3_fwd;
  wire [0:31]m3_m2_result;
  wire m3_m2_sel_res0;
  wire m3_m2_sel_res_reg_0;
  wire m3_piperun;
  wire m3_sel_div_res;
  wire [1:0]of_op1_sel;
  wire [0:2]of_op2_sel;
  wire [0:2]of_op3_sel;
  wire read_register_MSR_1;
  wire sync_reset;
  wire [31:0]\trace_new_reg_value_i_reg[0] ;
  wire \trace_new_reg_value_i_reg[15] ;
  wire \trace_new_reg_value_i_reg[16] ;
  wire \trace_new_reg_value_i_reg[17] ;
  wire \trace_new_reg_value_i_reg[18] ;
  wire \trace_new_reg_value_i_reg[19] ;
  wire \trace_new_reg_value_i_reg[20] ;
  wire \trace_new_reg_value_i_reg[21] ;
  wire \trace_new_reg_value_i_reg[22] ;
  wire \trace_new_reg_value_i_reg[23] ;
  wire \trace_new_reg_value_i_reg[24] ;
  wire \trace_new_reg_value_i_reg[25] ;
  wire \trace_new_reg_value_i_reg[26] ;
  wire \trace_new_reg_value_i_reg[27] ;
  wire \trace_new_reg_value_i_reg[28] ;
  wire \trace_new_reg_value_i_reg[29] ;
  wire \trace_new_reg_value_i_reg[30] ;
  wire \trace_new_reg_value_i_reg[31] ;
  wire \wb_Mem_Result_i[0]_i_1_n_0 ;
  wire \wb_Mem_Result_i[10]_i_1_n_0 ;
  wire \wb_Mem_Result_i[11]_i_1_n_0 ;
  wire \wb_Mem_Result_i[12]_i_1_n_0 ;
  wire \wb_Mem_Result_i[13]_i_1_n_0 ;
  wire \wb_Mem_Result_i[14]_i_1_n_0 ;
  wire \wb_Mem_Result_i[15]_i_1_n_0 ;
  wire \wb_Mem_Result_i[17]_i_1_n_0 ;
  wire \wb_Mem_Result_i[18]_i_1_n_0 ;
  wire \wb_Mem_Result_i[19]_i_1_n_0 ;
  wire \wb_Mem_Result_i[1]_i_1_n_0 ;
  wire \wb_Mem_Result_i[20]_i_1_n_0 ;
  wire \wb_Mem_Result_i[21]_i_1_n_0 ;
  wire \wb_Mem_Result_i[22]_i_1_n_0 ;
  wire \wb_Mem_Result_i[23]_i_1_n_0 ;
  wire \wb_Mem_Result_i[24]_i_1_n_0 ;
  wire \wb_Mem_Result_i[26]_i_1_n_0 ;
  wire \wb_Mem_Result_i[27]_i_1_n_0 ;
  wire \wb_Mem_Result_i[28]_i_1_n_0 ;
  wire \wb_Mem_Result_i[29]_i_1_n_0 ;
  wire \wb_Mem_Result_i[2]_i_1_n_0 ;
  wire \wb_Mem_Result_i[30]_i_1_n_0 ;
  wire \wb_Mem_Result_i[31]_i_1_n_0 ;
  wire \wb_Mem_Result_i[3]_i_1_n_0 ;
  wire \wb_Mem_Result_i[4]_i_1_n_0 ;
  wire \wb_Mem_Result_i[5]_i_1_n_0 ;
  wire \wb_Mem_Result_i[6]_i_1_n_0 ;
  wire \wb_Mem_Result_i[7]_i_1_n_0 ;
  wire \wb_Mem_Result_i[8]_i_1_n_0 ;
  wire \wb_Mem_Result_i[9]_i_1_n_0 ;
  wire wb_byte_access;
  wire [15:0]wb_databus_read_data;
  wire wb_exception_taken;
  wire wb_gpr_wr_dbg;
  wire wb_m3_sel_res0;
  wire [0:31]wb_mem_result;
  wire wb_sel_mem_res_i;

  assign \^lopt_4  = lopt_1;
  assign \^lopt_5  = lopt_2;
  assign lopt = \^lopt_3 ;
  assign lopt_3 = \^lopt_6 ;
  assign lopt_6 = lopt_9;
  assign lopt_7 = lopt_4;
  assign lopt_8 = lopt_5;
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[0]_i_1 
       (.I0(m2_fwd[0]),
        .I1(\wb_Mem_Result_i[0]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[0]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[0]_i_4_n_0 ),
        .O(m2_m1_sel_res_reg_4[28]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[0]_i_4 
       (.I0(\m1_M0_Result_i_reg[0]_0 ),
        .I1(\m0_Ex_Result_i_reg[0]_0 ),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [31]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[28]),
        .O(\EX_Branch_CMP_Op1[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[10]_i_1 
       (.I0(m2_fwd[10]),
        .I1(\wb_Mem_Result_i[10]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[10]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[10]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[18]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[10]_i_2 
       (.I0(m1_fwd[10]),
        .I1(m0_fwd[10]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [21]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[18]),
        .O(\EX_Branch_CMP_Op1[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[11]_i_1 
       (.I0(m2_fwd[11]),
        .I1(\wb_Mem_Result_i[11]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[11]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[11]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[17]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[11]_i_2 
       (.I0(m1_fwd[11]),
        .I1(m0_fwd[11]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [20]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[17]),
        .O(\EX_Branch_CMP_Op1[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[12]_i_1 
       (.I0(m2_fwd[12]),
        .I1(\wb_Mem_Result_i[12]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[12]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[12]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[16]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[12]_i_2 
       (.I0(m1_fwd[12]),
        .I1(m0_fwd[12]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [19]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[16]),
        .O(\EX_Branch_CMP_Op1[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[13]_i_1 
       (.I0(m2_fwd[13]),
        .I1(\wb_Mem_Result_i[13]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[13]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[13]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[15]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[13]_i_2 
       (.I0(m1_fwd[13]),
        .I1(m0_fwd[13]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [18]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[15]),
        .O(\EX_Branch_CMP_Op1[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[14]_i_1 
       (.I0(m2_fwd[14]),
        .I1(\wb_Mem_Result_i[14]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[14]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[14]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[14]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[14]_i_2 
       (.I0(m1_fwd[14]),
        .I1(m0_fwd[14]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [17]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[14]),
        .O(\EX_Branch_CMP_Op1[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[15]_i_1 
       (.I0(m2_fwd[15]),
        .I1(\wb_Mem_Result_i[15]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[15]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[15]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[13]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[15]_i_2 
       (.I0(m1_fwd[15]),
        .I1(m0_fwd[15]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [16]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[13]),
        .O(\EX_Branch_CMP_Op1[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[16]_i_1 
       (.I0(m2_fwd[16]),
        .I1(m3_fwd[16]),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[16]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[16]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[12]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[16]_i_2 
       (.I0(\m2_M1_Result_i[16]_i_1_n_0 ),
        .I1(\m1_M0_Result_i[16]_i_1_n_0 ),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [15]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[12]),
        .O(\EX_Branch_CMP_Op1[16]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[17]_i_1 
       (.I0(m2_fwd[17]),
        .I1(\wb_Mem_Result_i[17]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[17]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[17]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[11]));
  LUT6 #(
    .INIT(64'h0F000FFFAACCAACC)) 
    \EX_Branch_CMP_Op1[17]_i_2 
       (.I0(\m0_Ex_Result_i_reg[0]_1 [14]),
        .I1(GPR_Op1[11]),
        .I2(\EX_Branch_CMP_Op1[17]_i_3_n_0 ),
        .I3(of_op1_sel[0]),
        .I4(\EX_Branch_CMP_Op1[17]_i_4_n_0 ),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1[17]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Branch_CMP_Op1[17]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[17] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[17]),
        .I3(m1_sel_mul_res),
        .O(\EX_Branch_CMP_Op1[17]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Branch_CMP_Op1[17]_i_4 
       (.I0(m0_ex_result[17]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[17]),
        .I3(m0_sel_barrel_res),
        .O(\EX_Branch_CMP_Op1[17]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[18]_i_1 
       (.I0(m2_fwd[18]),
        .I1(\wb_Mem_Result_i[18]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[18]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[18]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[10]));
  LUT6 #(
    .INIT(64'h0F000FFFAACCAACC)) 
    \EX_Branch_CMP_Op1[18]_i_2 
       (.I0(\m0_Ex_Result_i_reg[0]_1 [13]),
        .I1(GPR_Op1[10]),
        .I2(\EX_Branch_CMP_Op1[18]_i_3_n_0 ),
        .I3(of_op1_sel[0]),
        .I4(\EX_Branch_CMP_Op1[18]_i_4_n_0 ),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1[18]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Branch_CMP_Op1[18]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[18] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[18]),
        .I3(m1_sel_mul_res),
        .O(\EX_Branch_CMP_Op1[18]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Branch_CMP_Op1[18]_i_4 
       (.I0(m0_ex_result[18]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[18]),
        .I3(m0_sel_barrel_res),
        .O(\EX_Branch_CMP_Op1[18]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[19]_i_1 
       (.I0(m2_fwd[19]),
        .I1(\wb_Mem_Result_i[19]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[19]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[19]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[9]));
  LUT6 #(
    .INIT(64'h5F503F3F5F503030)) 
    \EX_Branch_CMP_Op1[19]_i_2 
       (.I0(\EX_Op2[19]_i_3_n_0 ),
        .I1(\EX_Op2[19]_i_4_n_0 ),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [12]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[9]),
        .O(\EX_Branch_CMP_Op1[19]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[1]_i_1 
       (.I0(m2_fwd[1]),
        .I1(\wb_Mem_Result_i[1]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[1]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[1]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[27]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[1]_i_2 
       (.I0(m1_fwd[1]),
        .I1(m0_fwd[1]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [30]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[27]),
        .O(\EX_Branch_CMP_Op1[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[20]_i_1 
       (.I0(m2_fwd[20]),
        .I1(\wb_Mem_Result_i[20]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[20]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[20]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[8]));
  LUT6 #(
    .INIT(64'h0F000FFFAACCAACC)) 
    \EX_Branch_CMP_Op1[20]_i_2 
       (.I0(\m0_Ex_Result_i_reg[0]_1 [11]),
        .I1(GPR_Op1[8]),
        .I2(\EX_Op3[20]_i_3_n_0 ),
        .I3(of_op1_sel[0]),
        .I4(\EX_Op3[20]_i_4_n_0 ),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1[20]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[21]_i_1 
       (.I0(m2_fwd[21]),
        .I1(\wb_Mem_Result_i[21]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[21]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[21]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[7]));
  LUT6 #(
    .INIT(64'h0F000FFFAACCAACC)) 
    \EX_Branch_CMP_Op1[21]_i_2 
       (.I0(\m0_Ex_Result_i_reg[0]_1 [10]),
        .I1(GPR_Op1[7]),
        .I2(\EX_Branch_CMP_Op1[21]_i_3_n_0 ),
        .I3(of_op1_sel[0]),
        .I4(\EX_Branch_CMP_Op1[21]_i_4_n_0 ),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1[21]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Branch_CMP_Op1[21]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[21] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[21]),
        .I3(m1_sel_mul_res),
        .O(\EX_Branch_CMP_Op1[21]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Branch_CMP_Op1[21]_i_4 
       (.I0(m0_ex_result[21]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[21]),
        .I3(m0_sel_barrel_res),
        .O(\EX_Branch_CMP_Op1[21]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[22]_i_1 
       (.I0(m2_fwd[22]),
        .I1(\wb_Mem_Result_i[22]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[22]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[22]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[6]));
  LUT6 #(
    .INIT(64'h0F000FFFAACCAACC)) 
    \EX_Branch_CMP_Op1[22]_i_2 
       (.I0(\m0_Ex_Result_i_reg[0]_1 [9]),
        .I1(GPR_Op1[6]),
        .I2(\EX_Op2[22]_i_3_n_0 ),
        .I3(of_op1_sel[0]),
        .I4(\EX_Op2[22]_i_4_n_0 ),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1[22]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[23]_i_1 
       (.I0(m2_fwd[23]),
        .I1(\wb_Mem_Result_i[23]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[23]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[23]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[5]));
  LUT6 #(
    .INIT(64'h0F000FFFAACCAACC)) 
    \EX_Branch_CMP_Op1[23]_i_2 
       (.I0(\m0_Ex_Result_i_reg[0]_1 [8]),
        .I1(GPR_Op1[5]),
        .I2(\EX_Op2[23]_i_3_n_0 ),
        .I3(of_op1_sel[0]),
        .I4(\EX_Op2[23]_i_4_n_0 ),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1[23]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[24]_i_1 
       (.I0(m2_fwd[24]),
        .I1(\wb_Mem_Result_i[24]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[24]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[24]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[4]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[24]_i_2 
       (.I0(m1_fwd[24]),
        .I1(m0_fwd[24]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [7]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[4]),
        .O(\EX_Branch_CMP_Op1[24]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[25]_i_1 
       (.I0(m2_fwd[25]),
        .I1(m3_fwd[25]),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[25]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[25]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[3]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[25]_i_2 
       (.I0(\m2_M1_Result_i[25]_i_1_n_0 ),
        .I1(\m1_M0_Result_i[25]_i_1_n_0 ),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [6]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[3]),
        .O(\EX_Branch_CMP_Op1[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[26]_i_1 
       (.I0(m2_fwd[26]),
        .I1(\wb_Mem_Result_i[26]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[26]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[26]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[2]));
  LUT6 #(
    .INIT(64'hAFA0AFA0CFCFC0C0)) 
    \EX_Branch_CMP_Op1[26]_i_2 
       (.I0(m1_fwd[26]),
        .I1(m0_fwd[26]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [5]),
        .I4(GPR_Op1[2]),
        .I5(of_op1_sel[0]),
        .O(\EX_Branch_CMP_Op1[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[27]_i_1 
       (.I0(m2_fwd[27]),
        .I1(\wb_Mem_Result_i[27]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[27]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[27]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[1]));
  LUT6 #(
    .INIT(64'h0F000FFFAACCAACC)) 
    \EX_Branch_CMP_Op1[27]_i_2 
       (.I0(\m0_Ex_Result_i_reg[0]_1 [4]),
        .I1(GPR_Op1[1]),
        .I2(\EX_Op2[27]_i_3_n_0 ),
        .I3(of_op1_sel[0]),
        .I4(\EX_Op2[27]_i_4_n_0 ),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1[27]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[28]_i_1 
       (.I0(m2_fwd[28]),
        .I1(\wb_Mem_Result_i[28]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[28]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[28]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[0]));
  LUT6 #(
    .INIT(64'h0F000FFFAACCAACC)) 
    \EX_Branch_CMP_Op1[28]_i_2 
       (.I0(\m0_Ex_Result_i_reg[0]_1 [3]),
        .I1(GPR_Op1[0]),
        .I2(\EX_Op2[28]_i_3_n_0 ),
        .I3(of_op1_sel[0]),
        .I4(\EX_Op2[28]_i_4_n_0 ),
        .I5(of_op1_sel[1]),
        .O(\EX_Branch_CMP_Op1[28]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[2]_i_1 
       (.I0(m2_fwd[2]),
        .I1(\wb_Mem_Result_i[2]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[2]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[2]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[26]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[2]_i_2 
       (.I0(m1_fwd[2]),
        .I1(m0_fwd[2]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [29]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[26]),
        .O(\EX_Branch_CMP_Op1[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Branch_CMP_Op1[30]_i_2 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[30] ),
        .I2(\EX_Branch_CMP_Op1_reg[28] ),
        .I3(\wb_Mem_Result_i[30]_i_1_n_0 ),
        .O(m2_m1_sel_res_reg_5));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[3]_i_1 
       (.I0(m2_fwd[3]),
        .I1(\wb_Mem_Result_i[3]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[3]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[3]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[25]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[3]_i_2 
       (.I0(m1_fwd[3]),
        .I1(m0_fwd[3]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [28]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[25]),
        .O(\EX_Branch_CMP_Op1[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[4]_i_1 
       (.I0(m2_fwd[4]),
        .I1(\wb_Mem_Result_i[4]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[4]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[4]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[24]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[4]_i_2 
       (.I0(m1_fwd[4]),
        .I1(m0_fwd[4]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [27]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[24]),
        .O(\EX_Branch_CMP_Op1[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[5]_i_1 
       (.I0(m2_fwd[5]),
        .I1(\wb_Mem_Result_i[5]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[5]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[5]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[23]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[5]_i_2 
       (.I0(m1_fwd[5]),
        .I1(m0_fwd[5]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [26]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[23]),
        .O(\EX_Branch_CMP_Op1[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[6]_i_1 
       (.I0(m2_fwd[6]),
        .I1(\wb_Mem_Result_i[6]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[6]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[6]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[22]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[6]_i_2 
       (.I0(m1_fwd[6]),
        .I1(m0_fwd[6]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [25]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[22]),
        .O(\EX_Branch_CMP_Op1[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[7]_i_1 
       (.I0(m2_fwd[7]),
        .I1(\wb_Mem_Result_i[7]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[7]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[7]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[21]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[7]_i_2 
       (.I0(m1_fwd[7]),
        .I1(m0_fwd[7]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [24]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[21]),
        .O(\EX_Branch_CMP_Op1[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[8]_i_1 
       (.I0(m2_fwd[8]),
        .I1(\wb_Mem_Result_i[8]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[8]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[8]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[20]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[8]_i_2 
       (.I0(m1_fwd[8]),
        .I1(m0_fwd[8]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [23]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[20]),
        .O(\EX_Branch_CMP_Op1[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[9]_i_1 
       (.I0(m2_fwd[9]),
        .I1(\wb_Mem_Result_i[9]_i_1_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .I3(WB_Fwd[9]),
        .I4(\EX_Branch_CMP_Op1_reg[28] ),
        .I5(\EX_Branch_CMP_Op1[9]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_4[19]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Branch_CMP_Op1[9]_i_2 
       (.I0(m1_fwd[9]),
        .I1(m0_fwd[9]),
        .I2(of_op1_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [22]),
        .I4(of_op1_sel[0]),
        .I5(GPR_Op1[19]),
        .O(\EX_Branch_CMP_Op1[9]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT5 #(
    .INIT(32'hE2220000)) 
    \EX_Op1[29]_i_3 
       (.I0(\wb_Mem_Result_i[29]_i_1_n_0 ),
        .I1(\EX_Branch_CMP_Op1_reg[28] ),
        .I2(\m2_M1_Result_i_reg_n_0_[29] ),
        .I3(m2_m1_sel_res),
        .I4(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .O(\m2_M1_Result_i_reg[29]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op1[29]_i_8 
       (.I0(\m1_M0_Result_i_reg_n_0_[29] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[29]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[29]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op1[29]_i_9 
       (.I0(m0_ex_result[29]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[29]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[29]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op1[30]_i_10 
       (.I0(m0_ex_result[30]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[30]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[30]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT5 #(
    .INIT(32'hE2220000)) 
    \EX_Op1[30]_i_3 
       (.I0(\wb_Mem_Result_i[30]_i_1_n_0 ),
        .I1(\EX_Branch_CMP_Op1_reg[28] ),
        .I2(\m2_M1_Result_i_reg_n_0_[30] ),
        .I3(m2_m1_sel_res),
        .I4(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .O(\m2_M1_Result_i_reg[30]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op1[30]_i_9 
       (.I0(\m1_M0_Result_i_reg_n_0_[30] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[30]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[30]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT5 #(
    .INIT(32'hE2220000)) 
    \EX_Op1[31]_i_6 
       (.I0(\wb_Mem_Result_i[31]_i_1_n_0 ),
        .I1(\EX_Branch_CMP_Op1_reg[28] ),
        .I2(\m2_M1_Result_i_reg_n_0_[31] ),
        .I3(m2_m1_sel_res),
        .I4(\EX_Branch_CMP_Op1_reg[28]_0 ),
        .O(\m2_M1_Result_i_reg[31]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op1[31]_i_8 
       (.I0(\m1_M0_Result_i_reg_n_0_[31] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[31]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[31]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op1[31]_i_9 
       (.I0(m0_ex_result[31]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[31]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[31]_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[0]_i_1 
       (.I0(m2_fwd[0]),
        .I1(\wb_Mem_Result_i[0]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[0]),
        .I4(\EX_Op2_reg[1]_0 ),
        .I5(\EX_Op2_reg[0] ),
        .O(m2_m1_sel_res_reg_2[30]));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[10]_i_1 
       (.I0(m2_fwd[10]),
        .I1(\wb_Mem_Result_i[10]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[10]),
        .I4(\EX_Op2_reg[10] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[20]));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[10]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[10] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[10]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[10]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[10]_i_4 
       (.I0(m0_ex_result[10]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[10]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[10]_0 ));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[11]_i_1 
       (.I0(m2_fwd[11]),
        .I1(\wb_Mem_Result_i[11]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[11]),
        .I4(\EX_Op2_reg[11] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[19]));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[11]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[11] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[11]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[11]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[11]_i_4 
       (.I0(m0_ex_result[11]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[11]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[11]_0 ));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[12]_i_1 
       (.I0(m2_fwd[12]),
        .I1(\wb_Mem_Result_i[12]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[12]),
        .I4(\EX_Op2_reg[12] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[18]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[12]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[12] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[12]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[12]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[12]_i_4 
       (.I0(m0_ex_result[12]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[12]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[12]_0 ));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[13]_i_1 
       (.I0(m2_fwd[13]),
        .I1(\wb_Mem_Result_i[13]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[13]),
        .I4(\EX_Op2_reg[13] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[17]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[13]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[13] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[13]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[13]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[13]_i_4 
       (.I0(m0_ex_result[13]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[13]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[13]_0 ));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[14]_i_1 
       (.I0(m2_fwd[14]),
        .I1(\wb_Mem_Result_i[14]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[14]),
        .I4(\EX_Op2_reg[14] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[16]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[14]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[14] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[14]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[14]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[14]_i_4 
       (.I0(m0_ex_result[14]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[14]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[14]_0 ));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[15]_i_1 
       (.I0(m2_fwd[15]),
        .I1(\wb_Mem_Result_i[15]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[15]),
        .I4(\EX_Op2_reg[15] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[15]));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[15]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[15] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[15]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[15]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[15]_i_4 
       (.I0(m0_ex_result[15]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[15]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[15]_0 ));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \EX_Op2[16]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[16] ),
        .I2(\EX_Op2_reg[1]_0 ),
        .I3(m3_fwd[16]),
        .I4(\EX_Op2_reg[1] ),
        .I5(\EX_Op2_reg[16] ),
        .O(m2_m1_sel_res_reg_2[14]));
  LUT6 #(
    .INIT(64'hF888FFFFF8880000)) 
    \EX_Op2[16]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[16] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[16]),
        .I3(m1_sel_mul_res),
        .I4(of_op2_sel[2]),
        .I5(\m1_M0_Result_i[16]_i_1_n_0 ),
        .O(\m1_M0_Result_i_reg[16]_0 ));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \EX_Op2[17]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[17] ),
        .I2(\EX_Op2_reg[1]_0 ),
        .I3(\wb_Mem_Result_i[17]_i_1_n_0 ),
        .I4(\EX_Op2_reg[1] ),
        .I5(\EX_Op2_reg[17] ),
        .O(m2_m1_sel_res_reg_2[13]));
  LUT6 #(
    .INIT(64'hF888FFFFF8880000)) 
    \EX_Op2[17]_i_3 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[17]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[17] ),
        .I4(of_op2_sel[2]),
        .I5(m0_fwd[17]),
        .O(M1_Sel_Mul_Res_reg_3));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \EX_Op2[18]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[18] ),
        .I2(\EX_Op2_reg[1]_0 ),
        .I3(\wb_Mem_Result_i[18]_i_1_n_0 ),
        .I4(\EX_Op2_reg[1] ),
        .I5(\EX_Op2_reg[18] ),
        .O(m2_m1_sel_res_reg_2[12]));
  LUT6 #(
    .INIT(64'hF888FFFFF8880000)) 
    \EX_Op2[18]_i_3 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[18]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[18] ),
        .I4(of_op2_sel[2]),
        .I5(m0_fwd[18]),
        .O(M1_Sel_Mul_Res_reg_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[19]_i_1 
       (.I0(m2_fwd[19]),
        .I1(\wb_Mem_Result_i[19]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[19]),
        .I4(\EX_Op2_reg[1]_0 ),
        .I5(\EX_Op2[19]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_2[11]));
  LUT6 #(
    .INIT(64'h5F503F3F5F503030)) 
    \EX_Op2[19]_i_2 
       (.I0(\EX_Op2[19]_i_3_n_0 ),
        .I1(\EX_Op2[19]_i_4_n_0 ),
        .I2(of_op2_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [12]),
        .I4(of_op2_sel[2]),
        .I5(\EX_Op2_reg[19] ),
        .O(\EX_Op2[19]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[19]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[19] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[19]),
        .I3(m1_sel_mul_res),
        .O(\EX_Op2[19]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[19]_i_4 
       (.I0(m0_ex_result[19]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[19]),
        .I3(m0_sel_barrel_res),
        .O(\EX_Op2[19]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[1]_i_1 
       (.I0(m2_fwd[1]),
        .I1(\wb_Mem_Result_i[1]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[1]),
        .I4(\EX_Op2_reg[1]_0 ),
        .I5(\EX_Op2_reg[1]_1 ),
        .O(m2_m1_sel_res_reg_2[29]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[1]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[1] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[1]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[1]_i_4 
       (.I0(m0_ex_result[1]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[1]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[1]_0 ));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \EX_Op2[20]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[20] ),
        .I2(\EX_Op2_reg[1]_0 ),
        .I3(\wb_Mem_Result_i[20]_i_1_n_0 ),
        .I4(\EX_Op2_reg[1] ),
        .I5(\EX_Op2_reg[20] ),
        .O(m2_m1_sel_res_reg_2[10]));
  LUT6 #(
    .INIT(64'hF8880000F888FFFF)) 
    \EX_Op2[20]_i_3 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[20]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[20] ),
        .I4(of_op2_sel[2]),
        .I5(\EX_Op3[20]_i_4_n_0 ),
        .O(M1_Sel_Mul_Res_reg_4));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \EX_Op2[21]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[21] ),
        .I2(\EX_Op2_reg[1]_0 ),
        .I3(\wb_Mem_Result_i[21]_i_1_n_0 ),
        .I4(\EX_Op2_reg[1] ),
        .I5(\EX_Op2_reg[21] ),
        .O(m2_m1_sel_res_reg_2[9]));
  LUT6 #(
    .INIT(64'hF888FFFFF8880000)) 
    \EX_Op2[21]_i_3 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[21]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[21] ),
        .I4(of_op2_sel[2]),
        .I5(m0_fwd[21]),
        .O(M1_Sel_Mul_Res_reg_1));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[22]_i_1 
       (.I0(m2_fwd[22]),
        .I1(\wb_Mem_Result_i[22]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[22]),
        .I4(\EX_Op2_reg[1]_0 ),
        .I5(\EX_Op2[22]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_2[8]));
  LUT6 #(
    .INIT(64'h5F503F3F5F503030)) 
    \EX_Op2[22]_i_2 
       (.I0(\EX_Op2[22]_i_3_n_0 ),
        .I1(\EX_Op2[22]_i_4_n_0 ),
        .I2(of_op2_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [9]),
        .I4(of_op2_sel[2]),
        .I5(\EX_Op2_reg[22] ),
        .O(\EX_Op2[22]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[22]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[22] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[22]),
        .I3(m1_sel_mul_res),
        .O(\EX_Op2[22]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[22]_i_4 
       (.I0(m0_ex_result[22]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[22]),
        .I3(m0_sel_barrel_res),
        .O(\EX_Op2[22]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[23]_i_1 
       (.I0(m2_fwd[23]),
        .I1(\wb_Mem_Result_i[23]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[23]),
        .I4(\EX_Op2_reg[1]_0 ),
        .I5(\EX_Op2[23]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_2[7]));
  LUT6 #(
    .INIT(64'h5F503F3F5F503030)) 
    \EX_Op2[23]_i_2 
       (.I0(\EX_Op2[23]_i_3_n_0 ),
        .I1(\EX_Op2[23]_i_4_n_0 ),
        .I2(of_op2_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [8]),
        .I4(of_op2_sel[2]),
        .I5(\EX_Op2_reg[23] ),
        .O(\EX_Op2[23]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[23]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[23] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[23]),
        .I3(m1_sel_mul_res),
        .O(\EX_Op2[23]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[23]_i_4 
       (.I0(m0_ex_result[23]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[23]),
        .I3(m0_sel_barrel_res),
        .O(\EX_Op2[23]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[24]_i_1 
       (.I0(m2_fwd[24]),
        .I1(\wb_Mem_Result_i[24]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[24]),
        .I4(\EX_Op2_reg[1]_0 ),
        .I5(\EX_Op2[24]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_2[6]));
  LUT6 #(
    .INIT(64'h5F503F3F5F503030)) 
    \EX_Op2[24]_i_2 
       (.I0(\EX_Op2[24]_i_3_n_0 ),
        .I1(\EX_Op2[24]_i_4_n_0 ),
        .I2(of_op2_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [7]),
        .I4(of_op2_sel[2]),
        .I5(\EX_Op2_reg[24] ),
        .O(\EX_Op2[24]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[24]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[24] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[24]),
        .I3(m1_sel_mul_res),
        .O(\EX_Op2[24]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[24]_i_4 
       (.I0(m0_ex_result[24]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[24]),
        .I3(m0_sel_barrel_res),
        .O(\EX_Op2[24]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h8F80FFFF8F800000)) 
    \EX_Op2[25]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[25] ),
        .I2(\EX_Op2_reg[1]_0 ),
        .I3(m3_fwd[25]),
        .I4(\EX_Op2_reg[1] ),
        .I5(\EX_Op2_reg[25] ),
        .O(m2_m1_sel_res_reg_2[5]));
  LUT6 #(
    .INIT(64'hF888FFFFF8880000)) 
    \EX_Op2[25]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[25] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[25]),
        .I3(m1_sel_mul_res),
        .I4(of_op2_sel[2]),
        .I5(\m1_M0_Result_i[25]_i_1_n_0 ),
        .O(\m1_M0_Result_i_reg[25]_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[26]_i_1 
       (.I0(m2_fwd[26]),
        .I1(\wb_Mem_Result_i[26]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[26]),
        .I4(\EX_Op2_reg[1]_0 ),
        .I5(\EX_Op2[26]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_2[4]));
  LUT6 #(
    .INIT(64'h5F503F3F5F503030)) 
    \EX_Op2[26]_i_2 
       (.I0(\EX_Op2[26]_i_3_n_0 ),
        .I1(\EX_Op2[26]_i_4_n_0 ),
        .I2(of_op2_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [5]),
        .I4(of_op2_sel[2]),
        .I5(\EX_Op2_reg[26] ),
        .O(\EX_Op2[26]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[26]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[26] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[26]),
        .I3(m1_sel_mul_res),
        .O(\EX_Op2[26]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[26]_i_4 
       (.I0(m0_ex_result[26]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[26]),
        .I3(m0_sel_barrel_res),
        .O(\EX_Op2[26]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[27]_i_1 
       (.I0(m2_fwd[27]),
        .I1(\wb_Mem_Result_i[27]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[27]),
        .I4(\EX_Op2_reg[1]_0 ),
        .I5(\EX_Op2[27]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_2[3]));
  LUT6 #(
    .INIT(64'h5F503F3F5F503030)) 
    \EX_Op2[27]_i_2 
       (.I0(\EX_Op2[27]_i_3_n_0 ),
        .I1(\EX_Op2[27]_i_4_n_0 ),
        .I2(of_op2_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [4]),
        .I4(of_op2_sel[2]),
        .I5(\EX_Op2_reg[27] ),
        .O(\EX_Op2[27]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[27]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[27] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[27]),
        .I3(m1_sel_mul_res),
        .O(\EX_Op2[27]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[27]_i_4 
       (.I0(m0_ex_result[27]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[27]),
        .I3(m0_sel_barrel_res),
        .O(\EX_Op2[27]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[28]_i_1 
       (.I0(m2_fwd[28]),
        .I1(\wb_Mem_Result_i[28]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[28]),
        .I4(\EX_Op2_reg[1]_0 ),
        .I5(\EX_Op2[28]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_2[2]));
  LUT6 #(
    .INIT(64'h5F503F3F5F503030)) 
    \EX_Op2[28]_i_2 
       (.I0(\EX_Op2[28]_i_3_n_0 ),
        .I1(\EX_Op2[28]_i_4_n_0 ),
        .I2(of_op2_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [3]),
        .I4(of_op2_sel[2]),
        .I5(\EX_Op2_reg[28] ),
        .O(\EX_Op2[28]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[28]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[28] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[28]),
        .I3(m1_sel_mul_res),
        .O(\EX_Op2[28]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[28]_i_4 
       (.I0(m0_ex_result[28]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[28]),
        .I3(m0_sel_barrel_res),
        .O(\EX_Op2[28]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[29]_i_1 
       (.I0(m2_fwd[29]),
        .I1(\wb_Mem_Result_i[29]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[29]),
        .I4(\EX_Op2_reg[1]_0 ),
        .I5(\EX_Op2_reg[29] ),
        .O(m2_m1_sel_res_reg_2[1]));
  LUT6 #(
    .INIT(64'hF888FFFFF8880000)) 
    \EX_Op2[29]_i_3 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[29]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[29] ),
        .I4(of_op2_sel[2]),
        .I5(m0_fwd[29]),
        .O(M1_Sel_Mul_Res_reg_2));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[2]_i_1 
       (.I0(m2_fwd[2]),
        .I1(\wb_Mem_Result_i[2]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[2]),
        .I4(\EX_Op2_reg[2] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[28]));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[2]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[2] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[2]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[2]_i_4 
       (.I0(m0_ex_result[2]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[2]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[2]_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[30]_i_1 
       (.I0(m2_fwd[30]),
        .I1(\wb_Mem_Result_i[30]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[30]),
        .I4(\EX_Op2_reg[1]_0 ),
        .I5(\EX_Op2_reg[30] ),
        .O(m2_m1_sel_res_reg_2[0]));
  LUT6 #(
    .INIT(64'hF888FFFFF8880000)) 
    \EX_Op2[30]_i_3 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[30]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[30] ),
        .I4(of_op2_sel[2]),
        .I5(m0_fwd[30]),
        .O(M1_Sel_Mul_Res_reg_5));
  LUT6 #(
    .INIT(64'h8FFF8F8F80008080)) 
    \EX_Op2[31]_i_2 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[31] ),
        .I2(of_op2_sel[0]),
        .I3(of_op2_sel[1]),
        .I4(of_op2_sel[2]),
        .I5(\wb_Mem_Result_i[31]_i_1_n_0 ),
        .O(m2_m1_sel_res_reg_3));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[3]_i_1 
       (.I0(m2_fwd[3]),
        .I1(\wb_Mem_Result_i[3]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[3]),
        .I4(\EX_Op2_reg[3] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[27]));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[3]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[3] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[3]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[3]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[3]_i_4 
       (.I0(m0_ex_result[3]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[3]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[3]_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[4]_i_1 
       (.I0(m2_fwd[4]),
        .I1(\wb_Mem_Result_i[4]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[4]),
        .I4(\EX_Op2_reg[1]_0 ),
        .I5(\EX_Op2_reg[4] ),
        .O(m2_m1_sel_res_reg_2[26]));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[4]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[4] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[4]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[4]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[4]_i_4 
       (.I0(m0_ex_result[4]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[4]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[4]_0 ));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[5]_i_1 
       (.I0(m2_fwd[5]),
        .I1(\wb_Mem_Result_i[5]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[5]),
        .I4(\EX_Op2_reg[5] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[25]));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[5]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[5] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[5]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[5]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[5]_i_4 
       (.I0(m0_ex_result[5]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[5]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[5]_0 ));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[6]_i_1 
       (.I0(m2_fwd[6]),
        .I1(\wb_Mem_Result_i[6]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[6]),
        .I4(\EX_Op2_reg[6] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[24]));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[6]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[6] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[6]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[6]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[6]_i_4 
       (.I0(m0_ex_result[6]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[6]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[6]_0 ));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[7]_i_1 
       (.I0(m2_fwd[7]),
        .I1(\wb_Mem_Result_i[7]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[7]),
        .I4(\EX_Op2_reg[7] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[23]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[7]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[7] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[7]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[7]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[7]_i_4 
       (.I0(m0_ex_result[7]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[7]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[7]_0 ));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[8]_i_1 
       (.I0(m2_fwd[8]),
        .I1(\wb_Mem_Result_i[8]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[8]),
        .I4(\EX_Op2_reg[8] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[22]));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[8]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[8] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[8]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[8]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[8]_i_4 
       (.I0(m0_ex_result[8]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[8]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[8]_0 ));
  LUT6 #(
    .INIT(64'hAFA0AFA0C0C0CFCF)) 
    \EX_Op2[9]_i_1 
       (.I0(m2_fwd[9]),
        .I1(\wb_Mem_Result_i[9]_i_1_n_0 ),
        .I2(\EX_Op2_reg[1] ),
        .I3(WB_Fwd[9]),
        .I4(\EX_Op2_reg[9] ),
        .I5(\EX_Op2_reg[1]_0 ),
        .O(m2_m1_sel_res_reg_2[21]));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[9]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[9] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[9]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[9]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op2[9]_i_4 
       (.I0(m0_ex_result[9]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[9]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[9]_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[0]_i_1 
       (.I0(m2_fwd[0]),
        .I1(\wb_Mem_Result_i[0]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[0]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[0]_i_4_n_0 ),
        .O(m2_m1_sel_res_reg_0[30]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[0]_i_4 
       (.I0(\m1_M0_Result_i_reg[0]_0 ),
        .I1(\m0_Ex_Result_i_reg[0]_0 ),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [31]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[29]),
        .O(\EX_Op3[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[10]_i_1 
       (.I0(m2_fwd[10]),
        .I1(\wb_Mem_Result_i[10]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[10]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[10]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[20]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[10]_i_2 
       (.I0(m1_fwd[10]),
        .I1(m0_fwd[10]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [21]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[19]),
        .O(\EX_Op3[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[11]_i_1 
       (.I0(m2_fwd[11]),
        .I1(\wb_Mem_Result_i[11]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[11]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[11]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[19]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[11]_i_2 
       (.I0(m1_fwd[11]),
        .I1(m0_fwd[11]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [20]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[18]),
        .O(\EX_Op3[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[12]_i_1 
       (.I0(m2_fwd[12]),
        .I1(\wb_Mem_Result_i[12]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[12]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[12]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[18]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[12]_i_2 
       (.I0(m1_fwd[12]),
        .I1(m0_fwd[12]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [19]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[17]),
        .O(\EX_Op3[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[13]_i_1 
       (.I0(m2_fwd[13]),
        .I1(\wb_Mem_Result_i[13]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[13]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[13]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[17]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[13]_i_2 
       (.I0(m1_fwd[13]),
        .I1(m0_fwd[13]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [18]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[16]),
        .O(\EX_Op3[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[14]_i_1 
       (.I0(m2_fwd[14]),
        .I1(\wb_Mem_Result_i[14]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[14]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[14]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[16]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[14]_i_2 
       (.I0(m1_fwd[14]),
        .I1(m0_fwd[14]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [17]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[15]),
        .O(\EX_Op3[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[15]_i_1 
       (.I0(m2_fwd[15]),
        .I1(\wb_Mem_Result_i[15]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[15]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[15]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[15]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[15]_i_2 
       (.I0(m1_fwd[15]),
        .I1(m0_fwd[15]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [16]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[14]),
        .O(\EX_Op3[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[16]_i_1 
       (.I0(m2_fwd[16]),
        .I1(m3_fwd[16]),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[16]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[16]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[14]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[16]_i_2 
       (.I0(\m2_M1_Result_i[16]_i_1_n_0 ),
        .I1(\m1_M0_Result_i[16]_i_1_n_0 ),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [15]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[13]),
        .O(\EX_Op3[16]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[17]_i_1 
       (.I0(m2_fwd[17]),
        .I1(\wb_Mem_Result_i[17]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[17]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[17]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[13]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[17]_i_2 
       (.I0(m1_fwd[17]),
        .I1(m0_fwd[17]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [14]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[12]),
        .O(\EX_Op3[17]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[18]_i_1 
       (.I0(m2_fwd[18]),
        .I1(\wb_Mem_Result_i[18]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[18]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[18]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[12]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[18]_i_2 
       (.I0(m1_fwd[18]),
        .I1(m0_fwd[18]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [13]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[11]),
        .O(\EX_Op3[18]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[19]_i_1 
       (.I0(m2_fwd[19]),
        .I1(\wb_Mem_Result_i[19]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[19]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[19]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[11]));
  LUT6 #(
    .INIT(64'h0F000FFFAACCAACC)) 
    \EX_Op3[19]_i_2 
       (.I0(\m0_Ex_Result_i_reg[0]_1 [12]),
        .I1(GPR_Op3[10]),
        .I2(\EX_Op2[19]_i_3_n_0 ),
        .I3(of_op3_sel[2]),
        .I4(\EX_Op2[19]_i_4_n_0 ),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3[19]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[1]_i_1 
       (.I0(m2_fwd[1]),
        .I1(\wb_Mem_Result_i[1]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[1]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[1]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[29]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[1]_i_2 
       (.I0(m1_fwd[1]),
        .I1(m0_fwd[1]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [30]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[28]),
        .O(\EX_Op3[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[20]_i_1 
       (.I0(m2_fwd[20]),
        .I1(\wb_Mem_Result_i[20]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[20]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[20]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[10]));
  LUT6 #(
    .INIT(64'h0F000FFFAACCAACC)) 
    \EX_Op3[20]_i_2 
       (.I0(\m0_Ex_Result_i_reg[0]_1 [11]),
        .I1(GPR_Op3[9]),
        .I2(\EX_Op3[20]_i_3_n_0 ),
        .I3(of_op3_sel[2]),
        .I4(\EX_Op3[20]_i_4_n_0 ),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3[20]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op3[20]_i_3 
       (.I0(\m1_M0_Result_i_reg_n_0_[20] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[20]),
        .I3(m1_sel_mul_res),
        .O(\EX_Op3[20]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT4 #(
    .INIT(16'h0777)) 
    \EX_Op3[20]_i_4 
       (.I0(m0_ex_result[20]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[20]),
        .I3(m0_sel_barrel_res),
        .O(\EX_Op3[20]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[21]_i_1 
       (.I0(m2_fwd[21]),
        .I1(\wb_Mem_Result_i[21]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[21]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[21]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[9]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[21]_i_2 
       (.I0(m1_fwd[21]),
        .I1(m0_fwd[21]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [10]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[8]),
        .O(\EX_Op3[21]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[22]_i_1 
       (.I0(m2_fwd[22]),
        .I1(\wb_Mem_Result_i[22]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[22]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[22]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[8]));
  LUT6 #(
    .INIT(64'h0F000FFFAACCAACC)) 
    \EX_Op3[22]_i_2 
       (.I0(\m0_Ex_Result_i_reg[0]_1 [9]),
        .I1(GPR_Op3[7]),
        .I2(\EX_Op2[22]_i_3_n_0 ),
        .I3(of_op3_sel[2]),
        .I4(\EX_Op2[22]_i_4_n_0 ),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3[22]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[23]_i_1 
       (.I0(m2_fwd[23]),
        .I1(\wb_Mem_Result_i[23]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[23]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[23]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[7]));
  LUT6 #(
    .INIT(64'h5F503F3F5F503030)) 
    \EX_Op3[23]_i_2 
       (.I0(\EX_Op2[23]_i_3_n_0 ),
        .I1(\EX_Op2[23]_i_4_n_0 ),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [8]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[6]),
        .O(\EX_Op3[23]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[24]_i_1 
       (.I0(m2_fwd[24]),
        .I1(\wb_Mem_Result_i[24]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[24]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[24]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[6]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[24]_i_2 
       (.I0(m1_fwd[24]),
        .I1(m0_fwd[24]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [7]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[5]),
        .O(\EX_Op3[24]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[25]_i_1 
       (.I0(m2_fwd[25]),
        .I1(m3_fwd[25]),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[25]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[25]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[5]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[25]_i_2 
       (.I0(\m2_M1_Result_i[25]_i_1_n_0 ),
        .I1(\m1_M0_Result_i[25]_i_1_n_0 ),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [6]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[4]),
        .O(\EX_Op3[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[26]_i_1 
       (.I0(m2_fwd[26]),
        .I1(\wb_Mem_Result_i[26]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[26]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[26]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[4]));
  LUT6 #(
    .INIT(64'hAFA0AFA0CFCFC0C0)) 
    \EX_Op3[26]_i_2 
       (.I0(m1_fwd[26]),
        .I1(m0_fwd[26]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [5]),
        .I4(GPR_Op3[3]),
        .I5(of_op3_sel[2]),
        .O(\EX_Op3[26]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[27]_i_1 
       (.I0(m2_fwd[27]),
        .I1(\wb_Mem_Result_i[27]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[27]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[27]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[3]));
  LUT6 #(
    .INIT(64'h5F505F503F3F3030)) 
    \EX_Op3[27]_i_2 
       (.I0(\EX_Op2[27]_i_3_n_0 ),
        .I1(\EX_Op2[27]_i_4_n_0 ),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [4]),
        .I4(GPR_Op3[2]),
        .I5(of_op3_sel[2]),
        .O(\EX_Op3[27]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[28]_i_1 
       (.I0(m2_fwd[28]),
        .I1(\wb_Mem_Result_i[28]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[28]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[28]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[2]));
  LUT6 #(
    .INIT(64'h0F000FFFAACCAACC)) 
    \EX_Op3[28]_i_2 
       (.I0(\m0_Ex_Result_i_reg[0]_1 [3]),
        .I1(GPR_Op3[1]),
        .I2(\EX_Op2[28]_i_3_n_0 ),
        .I3(of_op3_sel[2]),
        .I4(\EX_Op2[28]_i_4_n_0 ),
        .I5(of_op3_sel[1]),
        .O(\EX_Op3[28]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[29]_i_1 
       (.I0(m2_fwd[29]),
        .I1(\wb_Mem_Result_i[29]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[29]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[29]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[1]));
  LUT6 #(
    .INIT(64'h88B888B8BBBB8888)) 
    \EX_Op3[29]_i_2 
       (.I0(\EX_Op3[29]_i_3_n_0 ),
        .I1(of_op3_sel[1]),
        .I2(\EX_Op3_reg[29] ),
        .I3(\EX_Op3_reg[29]_0 ),
        .I4(GPR_Op3[0]),
        .I5(of_op3_sel[2]),
        .O(\EX_Op3[29]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hABA8)) 
    \EX_Op3[29]_i_3 
       (.I0(m1_fwd[29]),
        .I1(\EX_Op3[29]_i_2_0 ),
        .I2(\EX_Op3[29]_i_2_1 ),
        .I3(m0_fwd[29]),
        .O(\EX_Op3[29]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[2]_i_1 
       (.I0(m2_fwd[2]),
        .I1(\wb_Mem_Result_i[2]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[2]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[2]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[28]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[2]_i_2 
       (.I0(m1_fwd[2]),
        .I1(m0_fwd[2]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [29]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[27]),
        .O(\EX_Op3[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[30]_i_1 
       (.I0(m2_fwd[30]),
        .I1(\wb_Mem_Result_i[30]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[30]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3_reg[30]_1 ),
        .O(m2_m1_sel_res_reg_0[0]));
  LUT4 #(
    .INIT(16'hABA8)) 
    \EX_Op3[30]_i_3 
       (.I0(m1_fwd[30]),
        .I1(\EX_Op3[29]_i_2_0 ),
        .I2(\EX_Op3[29]_i_2_1 ),
        .I3(m0_fwd[30]),
        .O(M1_Sel_Mul_Res_reg));
  LUT6 #(
    .INIT(64'h8FFF8F8F80008080)) 
    \EX_Op3[31]_i_2 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[31] ),
        .I2(of_op3_sel[0]),
        .I3(of_op3_sel[1]),
        .I4(of_op3_sel[2]),
        .I5(\wb_Mem_Result_i[31]_i_1_n_0 ),
        .O(m2_m1_sel_res_reg_1));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[3]_i_1 
       (.I0(m2_fwd[3]),
        .I1(\wb_Mem_Result_i[3]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[3]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[3]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[27]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[3]_i_2 
       (.I0(m1_fwd[3]),
        .I1(m0_fwd[3]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [28]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[26]),
        .O(\EX_Op3[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[4]_i_1 
       (.I0(m2_fwd[4]),
        .I1(\wb_Mem_Result_i[4]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[4]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[4]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[26]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[4]_i_2 
       (.I0(m1_fwd[4]),
        .I1(m0_fwd[4]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [27]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[25]),
        .O(\EX_Op3[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[5]_i_1 
       (.I0(m2_fwd[5]),
        .I1(\wb_Mem_Result_i[5]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[5]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[5]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[25]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[5]_i_2 
       (.I0(m1_fwd[5]),
        .I1(m0_fwd[5]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [26]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[24]),
        .O(\EX_Op3[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[6]_i_1 
       (.I0(m2_fwd[6]),
        .I1(\wb_Mem_Result_i[6]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[6]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[6]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[24]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[6]_i_2 
       (.I0(m1_fwd[6]),
        .I1(m0_fwd[6]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [25]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[23]),
        .O(\EX_Op3[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[7]_i_1 
       (.I0(m2_fwd[7]),
        .I1(\wb_Mem_Result_i[7]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[7]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[7]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[23]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[7]_i_2 
       (.I0(m1_fwd[7]),
        .I1(m0_fwd[7]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [24]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[22]),
        .O(\EX_Op3[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[8]_i_1 
       (.I0(m2_fwd[8]),
        .I1(\wb_Mem_Result_i[8]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[8]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[8]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[22]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[8]_i_2 
       (.I0(m1_fwd[8]),
        .I1(m0_fwd[8]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [23]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[21]),
        .O(\EX_Op3[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[9]_i_1 
       (.I0(m2_fwd[9]),
        .I1(\wb_Mem_Result_i[9]_i_1_n_0 ),
        .I2(\EX_Op3_reg[30] ),
        .I3(WB_Fwd[9]),
        .I4(\EX_Op3_reg[30]_0 ),
        .I5(\EX_Op3[9]_i_2_n_0 ),
        .O(m2_m1_sel_res_reg_0[21]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op3[9]_i_2 
       (.I0(m1_fwd[9]),
        .I1(m0_fwd[9]),
        .I2(of_op3_sel[1]),
        .I3(\m0_Ex_Result_i_reg[0]_1 [22]),
        .I4(of_op3_sel[2]),
        .I5(GPR_Op3[20]),
        .O(\EX_Op3[9]_i_2_n_0 ));
  microblaze_microblaze_0_0_MB_MUXCY_790 \Using_DAXI_ALU_Carry.Override_Ex_MUXCY_I 
       (.EX_CarryIn(EX_CarryIn),
        .ex_pre_alu_carry(ex_pre_alu_carry),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(\^lopt_5 ),
        .lopt_6(\^lopt_6 ),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9));
  microblaze_microblaze_0_0_MB_MUXCY_791 \Using_DAXI_ALU_Carry.Override_M3_MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_pre_alu_carry(ex_pre_alu_carry),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[0]_i_2 
       (.I0(WB_Fwd[0]),
        .I1(\data_rd_reg_reg[0] [27]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[27]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[10]_i_1 
       (.I0(WB_Fwd[10]),
        .I1(\data_rd_reg_reg[0] [17]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[17]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[11]_i_1 
       (.I0(WB_Fwd[11]),
        .I1(\data_rd_reg_reg[0] [16]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[16]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[12]_i_1 
       (.I0(WB_Fwd[12]),
        .I1(\data_rd_reg_reg[0] [15]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[15]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[13]_i_1 
       (.I0(WB_Fwd[13]),
        .I1(\data_rd_reg_reg[0] [14]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[14]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[14]_i_1 
       (.I0(WB_Fwd[14]),
        .I1(\data_rd_reg_reg[0] [13]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[13]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[15]_i_1 
       (.I0(WB_Fwd[15]),
        .I1(\data_rd_reg_reg[0] [12]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[12]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[16]_i_1 
       (.I0(WB_Fwd[16]),
        .I1(\data_rd_reg_reg[0] [11]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[11]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[17]_i_1 
       (.I0(WB_Fwd[17]),
        .I1(\data_rd_reg_reg[0] [10]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[10]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[18]_i_1 
       (.I0(WB_Fwd[18]),
        .I1(\data_rd_reg_reg[0] [9]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[9]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[19]_i_1 
       (.I0(WB_Fwd[19]),
        .I1(\data_rd_reg_reg[0] [8]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[8]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[1]_i_1 
       (.I0(WB_Fwd[1]),
        .I1(\data_rd_reg_reg[0] [26]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[26]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[20]_i_1 
       (.I0(WB_Fwd[20]),
        .I1(\data_rd_reg_reg[0] [7]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[7]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[21]_i_1 
       (.I0(WB_Fwd[21]),
        .I1(\data_rd_reg_reg[0] [6]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[6]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[22]_i_1 
       (.I0(WB_Fwd[22]),
        .I1(\data_rd_reg_reg[0] [5]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[5]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[23]_i_1 
       (.I0(WB_Fwd[23]),
        .I1(\data_rd_reg_reg[0] [4]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[4]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[24]_i_1 
       (.I0(WB_Fwd[24]),
        .I1(\data_rd_reg_reg[0] [3]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[3]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[26]_i_1 
       (.I0(WB_Fwd[26]),
        .I1(\data_rd_reg_reg[0] [2]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[2]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[27]_i_1 
       (.I0(WB_Fwd[27]),
        .I1(\data_rd_reg_reg[0] [1]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[1]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[2]_i_1 
       (.I0(WB_Fwd[2]),
        .I1(\data_rd_reg_reg[0] [25]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[25]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[31]_i_1 
       (.I0(WB_Fwd[31]),
        .I1(\data_rd_reg_reg[0] [0]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[0]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[3]_i_1 
       (.I0(WB_Fwd[3]),
        .I1(\data_rd_reg_reg[0] [24]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[24]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[4]_i_1 
       (.I0(WB_Fwd[4]),
        .I1(\data_rd_reg_reg[0] [23]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[23]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[5]_i_1 
       (.I0(WB_Fwd[5]),
        .I1(\data_rd_reg_reg[0] [22]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[22]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[6]_i_1 
       (.I0(WB_Fwd[6]),
        .I1(\data_rd_reg_reg[0] [21]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[21]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[7]_i_1 
       (.I0(WB_Fwd[7]),
        .I1(\data_rd_reg_reg[0] [20]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[20]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[8]_i_1 
       (.I0(WB_Fwd[8]),
        .I1(\data_rd_reg_reg[0] [19]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[19]));
  LUT5 #(
    .INIT(32'hA000ACCC)) 
    \data_rd_reg[9]_i_1 
       (.I0(WB_Fwd[9]),
        .I1(\data_rd_reg_reg[0] [18]),
        .I2(\data_rd_reg_reg[31] ),
        .I3(wb_gpr_wr_dbg),
        .I4(read_register_MSR_1),
        .O(D[18]));
  FDRE \m0_Ex_Result_i_reg[0] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [31]),
        .Q(m0_ex_result[0]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[10] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [21]),
        .Q(m0_ex_result[10]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[11] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [20]),
        .Q(m0_ex_result[11]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[12] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [19]),
        .Q(m0_ex_result[12]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[13] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [18]),
        .Q(m0_ex_result[13]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[14] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [17]),
        .Q(m0_ex_result[14]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[15] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [16]),
        .Q(m0_ex_result[15]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[16] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [15]),
        .Q(m0_ex_result[16]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[17] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [14]),
        .Q(m0_ex_result[17]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[18] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [13]),
        .Q(m0_ex_result[18]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[19] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [12]),
        .Q(m0_ex_result[19]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[1] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [30]),
        .Q(m0_ex_result[1]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[20] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [11]),
        .Q(m0_ex_result[20]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[21] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [10]),
        .Q(m0_ex_result[21]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[22] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [9]),
        .Q(m0_ex_result[22]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[23] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [8]),
        .Q(m0_ex_result[23]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[24] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [7]),
        .Q(m0_ex_result[24]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[25] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [6]),
        .Q(m0_ex_result[25]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[26] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [5]),
        .Q(m0_ex_result[26]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[27] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [4]),
        .Q(m0_ex_result[27]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[28] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [3]),
        .Q(m0_ex_result[28]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[29] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [2]),
        .Q(m0_ex_result[29]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[2] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [29]),
        .Q(m0_ex_result[2]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[30] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [1]),
        .Q(m0_ex_result[30]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[31] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [0]),
        .Q(m0_ex_result[31]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[3] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [28]),
        .Q(m0_ex_result[3]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[4] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [27]),
        .Q(m0_ex_result[4]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[5] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [26]),
        .Q(m0_ex_result[5]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[6] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [25]),
        .Q(m0_ex_result[6]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[7] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [24]),
        .Q(m0_ex_result[7]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[8] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [23]),
        .Q(m0_ex_result[8]),
        .R(sync_reset));
  FDRE \m0_Ex_Result_i_reg[9] 
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(\m0_Ex_Result_i_reg[0]_1 [22]),
        .Q(m0_ex_result[9]),
        .R(sync_reset));
  FDRE m0_ex_sel_res_reg
       (.C(Clk),
        .CE(\m0_Ex_Result_i_reg[31]_1 ),
        .D(m0_ex_sel_res_reg_1),
        .Q(m0_ex_sel_res_reg_0),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[0]_i_1 
       (.I0(m0_ex_result[0]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[0]),
        .I3(m0_sel_barrel_res),
        .O(\m0_Ex_Result_i_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[10]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[10]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[10]),
        .O(m0_fwd[10]));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[11]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[11]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[11]),
        .O(m0_fwd[11]));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[12]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[12]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[12]),
        .O(m0_fwd[12]));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[13]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[13]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[13]),
        .O(m0_fwd[13]));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[14]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[14]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[14]),
        .O(m0_fwd[14]));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[15]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[15]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[15]),
        .O(m0_fwd[15]));
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[16]_i_1 
       (.I0(m0_ex_result[16]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[16]),
        .I3(m0_sel_barrel_res),
        .O(\m1_M0_Result_i[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[17]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[17]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[17]),
        .O(m0_fwd[17]));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[18]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[18]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[18]),
        .O(m0_fwd[18]));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[19]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[19]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[19]),
        .O(m0_fwd[19]));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[1]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[1]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[1]),
        .O(m0_fwd[1]));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[20]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[20]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[20]),
        .O(m0_fwd[20]));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[21]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[21]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[21]),
        .O(m0_fwd[21]));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[22]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[22]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[22]),
        .O(m0_fwd[22]));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[23]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[23]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[23]),
        .O(m0_fwd[23]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[24]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[24]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[24]),
        .O(m0_fwd[24]));
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[25]_i_1 
       (.I0(m0_ex_result[25]),
        .I1(m0_ex_sel_res_reg_0),
        .I2(m0_barrel_result[25]),
        .I3(m0_sel_barrel_res),
        .O(\m1_M0_Result_i[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[26]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[26]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[26]),
        .O(m0_fwd[26]));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[27]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[27]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[27]),
        .O(m0_fwd[27]));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[28]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[28]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[28]),
        .O(m0_fwd[28]));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[29]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[29]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[29]),
        .O(m0_fwd[29]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[2]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[2]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[2]),
        .O(m0_fwd[2]));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[30]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[30]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[30]),
        .O(m0_fwd[30]));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[31]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[31]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[31]),
        .O(m0_fwd[31]));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[3]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[3]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[3]),
        .O(m0_fwd[3]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[4]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[4]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[4]),
        .O(m0_fwd[4]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[5]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[5]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[5]),
        .O(m0_fwd[5]));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[6]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[6]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[6]),
        .O(m0_fwd[6]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[7]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[7]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[7]),
        .O(m0_fwd[7]));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[8]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[8]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[8]),
        .O(m0_fwd[8]));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m1_M0_Result_i[9]_i_1 
       (.I0(m0_sel_barrel_res),
        .I1(m0_barrel_result[9]),
        .I2(m0_ex_sel_res_reg_0),
        .I3(m0_ex_result[9]),
        .O(m0_fwd[9]));
  FDRE \m1_M0_Result_i_reg[0] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(\m0_Ex_Result_i_reg[0]_0 ),
        .Q(\m1_M0_Result_i_reg_n_0_[0] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[10] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[10]),
        .Q(\m1_M0_Result_i_reg_n_0_[10] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[11] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[11]),
        .Q(\m1_M0_Result_i_reg_n_0_[11] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[12] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[12]),
        .Q(\m1_M0_Result_i_reg_n_0_[12] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[13] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[13]),
        .Q(\m1_M0_Result_i_reg_n_0_[13] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[14] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[14]),
        .Q(\m1_M0_Result_i_reg_n_0_[14] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[15] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[15]),
        .Q(\m1_M0_Result_i_reg_n_0_[15] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[16] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(\m1_M0_Result_i[16]_i_1_n_0 ),
        .Q(\m1_M0_Result_i_reg_n_0_[16] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[17] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[17]),
        .Q(\m1_M0_Result_i_reg_n_0_[17] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[18] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[18]),
        .Q(\m1_M0_Result_i_reg_n_0_[18] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[19] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[19]),
        .Q(\m1_M0_Result_i_reg_n_0_[19] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[1] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[1]),
        .Q(\m1_M0_Result_i_reg_n_0_[1] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[20] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[20]),
        .Q(\m1_M0_Result_i_reg_n_0_[20] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[21] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[21]),
        .Q(\m1_M0_Result_i_reg_n_0_[21] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[22] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[22]),
        .Q(\m1_M0_Result_i_reg_n_0_[22] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[23] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[23]),
        .Q(\m1_M0_Result_i_reg_n_0_[23] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[24] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[24]),
        .Q(\m1_M0_Result_i_reg_n_0_[24] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[25] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(\m1_M0_Result_i[25]_i_1_n_0 ),
        .Q(\m1_M0_Result_i_reg_n_0_[25] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[26] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[26]),
        .Q(\m1_M0_Result_i_reg_n_0_[26] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[27] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[27]),
        .Q(\m1_M0_Result_i_reg_n_0_[27] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[28] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[28]),
        .Q(\m1_M0_Result_i_reg_n_0_[28] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[29] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[29]),
        .Q(\m1_M0_Result_i_reg_n_0_[29] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[2] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[2]),
        .Q(\m1_M0_Result_i_reg_n_0_[2] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[30] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[30]),
        .Q(\m1_M0_Result_i_reg_n_0_[30] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[31] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[31]),
        .Q(\m1_M0_Result_i_reg_n_0_[31] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[3] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[3]),
        .Q(\m1_M0_Result_i_reg_n_0_[3] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[4] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[4]),
        .Q(\m1_M0_Result_i_reg_n_0_[4] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[5] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[5]),
        .Q(\m1_M0_Result_i_reg_n_0_[5] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[6] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[6]),
        .Q(\m1_M0_Result_i_reg_n_0_[6] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[7] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[7]),
        .Q(\m1_M0_Result_i_reg_n_0_[7] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[8] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[8]),
        .Q(\m1_M0_Result_i_reg_n_0_[8] ),
        .R(sync_reset));
  FDRE \m1_M0_Result_i_reg[9] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_fwd[9]),
        .Q(\m1_M0_Result_i_reg_n_0_[9] ),
        .R(sync_reset));
  FDRE m1_m0_sel_res_reg
       (.C(Clk),
        .CE(m0_piperun),
        .D(m1_m0_sel_res0),
        .Q(m1_m0_sel_res_reg_0),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[0]_i_1 
       (.I0(\m1_M0_Result_i_reg_n_0_[0] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[0]),
        .I3(m1_sel_mul_res),
        .O(\m1_M0_Result_i_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[10]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[10]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[10] ),
        .O(m1_fwd[10]));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[11]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[11]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[11] ),
        .O(m1_fwd[11]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[12]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[12]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[12] ),
        .O(m1_fwd[12]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[13]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[13]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[13] ),
        .O(m1_fwd[13]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[14]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[14]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[14] ),
        .O(m1_fwd[14]));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[15]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[15]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[15] ),
        .O(m1_fwd[15]));
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[16]_i_1 
       (.I0(\m1_M0_Result_i_reg_n_0_[16] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[16]),
        .I3(m1_sel_mul_res),
        .O(\m2_M1_Result_i[16]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[17]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[17]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[17] ),
        .O(m1_fwd[17]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[18]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[18]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[18] ),
        .O(m1_fwd[18]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[19]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[19]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[19] ),
        .O(m1_fwd[19]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[1]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[1]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[1] ),
        .O(m1_fwd[1]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[20]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[20]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[20] ),
        .O(m1_fwd[20]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[21]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[21]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[21] ),
        .O(m1_fwd[21]));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[22]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[22]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[22] ),
        .O(m1_fwd[22]));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[23]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[23]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[23] ),
        .O(m1_fwd[23]));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[24]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[24]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[24] ),
        .O(m1_fwd[24]));
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[25]_i_1 
       (.I0(\m1_M0_Result_i_reg_n_0_[25] ),
        .I1(m1_m0_sel_res_reg_0),
        .I2(m1_mul_result[25]),
        .I3(m1_sel_mul_res),
        .O(\m2_M1_Result_i[25]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[26]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[26]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[26] ),
        .O(m1_fwd[26]));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[27]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[27]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[27] ),
        .O(m1_fwd[27]));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[28]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[28]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[28] ),
        .O(m1_fwd[28]));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[29]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[29]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[29] ),
        .O(m1_fwd[29]));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[2]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[2]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[2] ),
        .O(m1_fwd[2]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[30]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[30]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[30] ),
        .O(m1_fwd[30]));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[31]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[31]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[31] ),
        .O(m1_fwd[31]));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[3]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[3]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[3] ),
        .O(m1_fwd[3]));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[4]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[4]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[4] ),
        .O(m1_fwd[4]));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[5]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[5]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[5] ),
        .O(m1_fwd[5]));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[6]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[6]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[6] ),
        .O(m1_fwd[6]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[7]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[7]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[7] ),
        .O(m1_fwd[7]));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[8]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[8]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[8] ),
        .O(m1_fwd[8]));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \m2_M1_Result_i[9]_i_1 
       (.I0(m1_sel_mul_res),
        .I1(m1_mul_result[9]),
        .I2(m1_m0_sel_res_reg_0),
        .I3(\m1_M0_Result_i_reg_n_0_[9] ),
        .O(m1_fwd[9]));
  FDRE \m2_M1_Result_i_reg[0] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\m1_M0_Result_i_reg[0]_0 ),
        .Q(\m2_M1_Result_i_reg_n_0_[0] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[10] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[10]),
        .Q(\m2_M1_Result_i_reg_n_0_[10] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[11] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[11]),
        .Q(\m2_M1_Result_i_reg_n_0_[11] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[12] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[12]),
        .Q(\m2_M1_Result_i_reg_n_0_[12] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[13] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[13]),
        .Q(\m2_M1_Result_i_reg_n_0_[13] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[14] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[14]),
        .Q(\m2_M1_Result_i_reg_n_0_[14] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[15] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[15]),
        .Q(\m2_M1_Result_i_reg_n_0_[15] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[16] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\m2_M1_Result_i[16]_i_1_n_0 ),
        .Q(\m2_M1_Result_i_reg_n_0_[16] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[17] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[17]),
        .Q(\m2_M1_Result_i_reg_n_0_[17] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[18] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[18]),
        .Q(\m2_M1_Result_i_reg_n_0_[18] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[19] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[19]),
        .Q(\m2_M1_Result_i_reg_n_0_[19] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[1] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[1]),
        .Q(\m2_M1_Result_i_reg_n_0_[1] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[20] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[20]),
        .Q(\m2_M1_Result_i_reg_n_0_[20] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[21] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[21]),
        .Q(\m2_M1_Result_i_reg_n_0_[21] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[22] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[22]),
        .Q(\m2_M1_Result_i_reg_n_0_[22] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[23] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[23]),
        .Q(\m2_M1_Result_i_reg_n_0_[23] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[24] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[24]),
        .Q(\m2_M1_Result_i_reg_n_0_[24] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[25] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(\m2_M1_Result_i[25]_i_1_n_0 ),
        .Q(\m2_M1_Result_i_reg_n_0_[25] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[26] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[26]),
        .Q(\m2_M1_Result_i_reg_n_0_[26] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[27] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[27]),
        .Q(\m2_M1_Result_i_reg_n_0_[27] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[28] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[28]),
        .Q(\m2_M1_Result_i_reg_n_0_[28] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[29] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[29]),
        .Q(\m2_M1_Result_i_reg_n_0_[29] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[2] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[2]),
        .Q(\m2_M1_Result_i_reg_n_0_[2] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[30] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[30]),
        .Q(\m2_M1_Result_i_reg_n_0_[30] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[31] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[31]),
        .Q(\m2_M1_Result_i_reg_n_0_[31] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[3] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[3]),
        .Q(\m2_M1_Result_i_reg_n_0_[3] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[4] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[4]),
        .Q(\m2_M1_Result_i_reg_n_0_[4] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[5] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[5]),
        .Q(\m2_M1_Result_i_reg_n_0_[5] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[6] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[6]),
        .Q(\m2_M1_Result_i_reg_n_0_[6] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[7] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[7]),
        .Q(\m2_M1_Result_i_reg_n_0_[7] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[8] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[8]),
        .Q(\m2_M1_Result_i_reg_n_0_[8] ),
        .R(sync_reset));
  FDRE \m2_M1_Result_i_reg[9] 
       (.C(Clk),
        .CE(m1_piperun),
        .D(m1_fwd[9]),
        .Q(\m2_M1_Result_i_reg_n_0_[9] ),
        .R(sync_reset));
  FDRE m2_m1_sel_res_reg
       (.C(Clk),
        .CE(m1_piperun),
        .D(m2_m1_sel_res0),
        .Q(m2_m1_sel_res),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[0]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[0] ),
        .O(m2_fwd[0]));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[10]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[10] ),
        .O(m2_fwd[10]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[11]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[11] ),
        .O(m2_fwd[11]));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[12]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[12] ),
        .O(m2_fwd[12]));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[13]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[13] ),
        .O(m2_fwd[13]));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[14]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[14] ),
        .O(m2_fwd[14]));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[15]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[15] ),
        .O(m2_fwd[15]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[16]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[16] ),
        .O(m2_fwd[16]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[17]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[17] ),
        .O(m2_fwd[17]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[18]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[18] ),
        .O(m2_fwd[18]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[19]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[19] ),
        .O(m2_fwd[19]));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[1]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[1] ),
        .O(m2_fwd[1]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[20]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[20] ),
        .O(m2_fwd[20]));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[21]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[21] ),
        .O(m2_fwd[21]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[22]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[22] ),
        .O(m2_fwd[22]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[23]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[23] ),
        .O(m2_fwd[23]));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[24]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[24] ),
        .O(m2_fwd[24]));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[25]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[25] ),
        .O(m2_fwd[25]));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[26]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[26] ),
        .O(m2_fwd[26]));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[27]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[27] ),
        .O(m2_fwd[27]));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[28]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[28] ),
        .O(m2_fwd[28]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[29]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[29] ),
        .O(m2_fwd[29]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[2]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[2] ),
        .O(m2_fwd[2]));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[30]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[30] ),
        .O(m2_fwd[30]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[31]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[31] ),
        .O(m2_fwd[31]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[3]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[3] ),
        .O(m2_fwd[3]));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[4]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[4] ),
        .O(m2_fwd[4]));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[5]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[5] ),
        .O(m2_fwd[5]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[6]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[6] ),
        .O(m2_fwd[6]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[7]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[7] ),
        .O(m2_fwd[7]));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[8]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[8] ),
        .O(m2_fwd[8]));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_M2_Result_i[9]_i_1 
       (.I0(m2_m1_sel_res),
        .I1(\m2_M1_Result_i_reg_n_0_[9] ),
        .O(m2_fwd[9]));
  FDRE \m3_M2_Result_i_reg[0] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[0]),
        .Q(m3_m2_result[0]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[10] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[10]),
        .Q(m3_m2_result[10]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[11] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[11]),
        .Q(m3_m2_result[11]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[12] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[12]),
        .Q(m3_m2_result[12]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[13] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[13]),
        .Q(m3_m2_result[13]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[14] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[14]),
        .Q(m3_m2_result[14]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[15] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[15]),
        .Q(m3_m2_result[15]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[16] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[16]),
        .Q(m3_m2_result[16]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[17] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[17]),
        .Q(m3_m2_result[17]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[18] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[18]),
        .Q(m3_m2_result[18]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[19] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[19]),
        .Q(m3_m2_result[19]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[1] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[1]),
        .Q(m3_m2_result[1]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[20] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[20]),
        .Q(m3_m2_result[20]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[21] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[21]),
        .Q(m3_m2_result[21]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[22] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[22]),
        .Q(m3_m2_result[22]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[23] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[23]),
        .Q(m3_m2_result[23]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[24] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[24]),
        .Q(m3_m2_result[24]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[25] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[25]),
        .Q(m3_m2_result[25]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[26] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[26]),
        .Q(m3_m2_result[26]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[27] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[27]),
        .Q(m3_m2_result[27]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[28] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[28]),
        .Q(m3_m2_result[28]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[29] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[29]),
        .Q(m3_m2_result[29]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[2] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[2]),
        .Q(m3_m2_result[2]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[30] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[30]),
        .Q(m3_m2_result[30]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[31] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[31]),
        .Q(m3_m2_result[31]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[3] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[3]),
        .Q(m3_m2_result[3]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[4] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[4]),
        .Q(m3_m2_result[4]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[5] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[5]),
        .Q(m3_m2_result[5]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[6] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[6]),
        .Q(m3_m2_result[6]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[7] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[7]),
        .Q(m3_m2_result[7]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[8] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[8]),
        .Q(m3_m2_result[8]),
        .R(sync_reset));
  FDRE \m3_M2_Result_i_reg[9] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(m2_fwd[9]),
        .Q(m3_m2_result[9]),
        .R(sync_reset));
  LUT2 #(
    .INIT(4'h2)) 
    m3_m2_sel_res_i_1
       (.I0(m2_m1_sel_res),
        .I1(m2_is_div_instr),
        .O(m3_m2_sel_res0));
  FDRE m3_m2_sel_res_reg
       (.C(Clk),
        .CE(m2_piperun),
        .D(m3_m2_sel_res0),
        .Q(m3_m2_sel_res_reg_0),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hBBBB8B888B888B88)) 
    \trace_new_reg_value_i[0]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [31]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[15] ),
        .I3(wb_databus_read_data[15]),
        .I4(wb_mem_result[0]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[0]));
  LUT6 #(
    .INIT(64'hBBBB8B888B888B88)) 
    \trace_new_reg_value_i[10]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [21]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[15] ),
        .I3(wb_databus_read_data[5]),
        .I4(wb_mem_result[10]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[10]));
  LUT6 #(
    .INIT(64'hFFFF000088F888F8)) 
    \trace_new_reg_value_i[11]_i_1 
       (.I0(wb_mem_result[11]),
        .I1(wb_sel_mem_res_i),
        .I2(wb_databus_read_data[4]),
        .I3(\trace_new_reg_value_i_reg[15] ),
        .I4(\trace_new_reg_value_i_reg[0] [20]),
        .I5(wb_exception_taken),
        .O(WB_Fwd[11]));
  LUT6 #(
    .INIT(64'hBBBB8B888B888B88)) 
    \trace_new_reg_value_i[12]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [19]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[15] ),
        .I3(wb_databus_read_data[3]),
        .I4(wb_mem_result[12]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[12]));
  LUT6 #(
    .INIT(64'hBBBB8B888B888B88)) 
    \trace_new_reg_value_i[13]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [18]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[15] ),
        .I3(wb_databus_read_data[2]),
        .I4(wb_mem_result[13]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[13]));
  LUT6 #(
    .INIT(64'hBBBB8B888B888B88)) 
    \trace_new_reg_value_i[14]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [17]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[15] ),
        .I3(wb_databus_read_data[1]),
        .I4(wb_mem_result[14]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[14]));
  LUT6 #(
    .INIT(64'hBBBB8B888B888B88)) 
    \trace_new_reg_value_i[15]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [16]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[15] ),
        .I3(wb_databus_read_data[0]),
        .I4(wb_mem_result[15]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[15]));
  LUT6 #(
    .INIT(64'hBBBB888B888B888B)) 
    \trace_new_reg_value_i[16]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [15]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[16] ),
        .I3(wb_byte_access),
        .I4(wb_mem_result[16]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[16]));
  LUT6 #(
    .INIT(64'hBBBB888B888B888B)) 
    \trace_new_reg_value_i[17]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [14]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[17] ),
        .I3(wb_byte_access),
        .I4(wb_mem_result[17]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[17]));
  LUT6 #(
    .INIT(64'hBBBB888B888B888B)) 
    \trace_new_reg_value_i[18]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [13]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[18] ),
        .I3(wb_byte_access),
        .I4(wb_mem_result[18]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[18]));
  LUT6 #(
    .INIT(64'hFFFF0000888F888F)) 
    \trace_new_reg_value_i[19]_i_1 
       (.I0(wb_mem_result[19]),
        .I1(wb_sel_mem_res_i),
        .I2(wb_byte_access),
        .I3(\trace_new_reg_value_i_reg[19] ),
        .I4(\trace_new_reg_value_i_reg[0] [12]),
        .I5(wb_exception_taken),
        .O(WB_Fwd[19]));
  LUT6 #(
    .INIT(64'hBBBB8B888B888B88)) 
    \trace_new_reg_value_i[1]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [30]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[15] ),
        .I3(wb_databus_read_data[14]),
        .I4(wb_mem_result[1]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[1]));
  LUT6 #(
    .INIT(64'hBBBB888B888B888B)) 
    \trace_new_reg_value_i[20]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [11]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[20] ),
        .I3(wb_byte_access),
        .I4(wb_mem_result[20]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[20]));
  LUT6 #(
    .INIT(64'hBBBB888B888B888B)) 
    \trace_new_reg_value_i[21]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [10]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[21] ),
        .I3(wb_byte_access),
        .I4(wb_mem_result[21]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[21]));
  LUT6 #(
    .INIT(64'hFFFF0000888F888F)) 
    \trace_new_reg_value_i[22]_i_1 
       (.I0(wb_mem_result[22]),
        .I1(wb_sel_mem_res_i),
        .I2(wb_byte_access),
        .I3(\trace_new_reg_value_i_reg[22] ),
        .I4(\trace_new_reg_value_i_reg[0] [9]),
        .I5(wb_exception_taken),
        .O(WB_Fwd[22]));
  LUT6 #(
    .INIT(64'hBBBB888B888B888B)) 
    \trace_new_reg_value_i[23]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [8]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[23] ),
        .I3(wb_byte_access),
        .I4(wb_mem_result[23]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[23]));
  LUT5 #(
    .INIT(32'hBBBBB888)) 
    \trace_new_reg_value_i[24]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [7]),
        .I1(wb_exception_taken),
        .I2(wb_mem_result[24]),
        .I3(wb_sel_mem_res_i),
        .I4(\trace_new_reg_value_i_reg[24] ),
        .O(WB_Fwd[24]));
  LUT5 #(
    .INIT(32'hBBBBB888)) 
    \trace_new_reg_value_i[25]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [6]),
        .I1(wb_exception_taken),
        .I2(wb_mem_result[25]),
        .I3(wb_sel_mem_res_i),
        .I4(\trace_new_reg_value_i_reg[25] ),
        .O(WB_Fwd[25]));
  LUT5 #(
    .INIT(32'hBBBBB888)) 
    \trace_new_reg_value_i[26]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [5]),
        .I1(wb_exception_taken),
        .I2(wb_mem_result[26]),
        .I3(wb_sel_mem_res_i),
        .I4(\trace_new_reg_value_i_reg[26] ),
        .O(WB_Fwd[26]));
  LUT5 #(
    .INIT(32'hBBBBB888)) 
    \trace_new_reg_value_i[27]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [4]),
        .I1(wb_exception_taken),
        .I2(wb_mem_result[27]),
        .I3(wb_sel_mem_res_i),
        .I4(\trace_new_reg_value_i_reg[27] ),
        .O(WB_Fwd[27]));
  LUT5 #(
    .INIT(32'hBBBBB888)) 
    \trace_new_reg_value_i[28]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [3]),
        .I1(wb_exception_taken),
        .I2(wb_mem_result[28]),
        .I3(wb_sel_mem_res_i),
        .I4(\trace_new_reg_value_i_reg[28] ),
        .O(WB_Fwd[28]));
  LUT5 #(
    .INIT(32'hBBBBB888)) 
    \trace_new_reg_value_i[29]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [2]),
        .I1(wb_exception_taken),
        .I2(wb_mem_result[29]),
        .I3(wb_sel_mem_res_i),
        .I4(\trace_new_reg_value_i_reg[29] ),
        .O(WB_Fwd[29]));
  LUT6 #(
    .INIT(64'hBBBB8B888B888B88)) 
    \trace_new_reg_value_i[2]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [29]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[15] ),
        .I3(wb_databus_read_data[13]),
        .I4(wb_mem_result[2]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[2]));
  LUT5 #(
    .INIT(32'hBBBBB888)) 
    \trace_new_reg_value_i[30]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [1]),
        .I1(wb_exception_taken),
        .I2(wb_mem_result[30]),
        .I3(wb_sel_mem_res_i),
        .I4(\trace_new_reg_value_i_reg[30] ),
        .O(WB_Fwd[30]));
  LUT5 #(
    .INIT(32'hBBBBB888)) 
    \trace_new_reg_value_i[31]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [0]),
        .I1(wb_exception_taken),
        .I2(wb_mem_result[31]),
        .I3(wb_sel_mem_res_i),
        .I4(\trace_new_reg_value_i_reg[31] ),
        .O(WB_Fwd[31]));
  LUT6 #(
    .INIT(64'hBBBB8B888B888B88)) 
    \trace_new_reg_value_i[3]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [28]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[15] ),
        .I3(wb_databus_read_data[12]),
        .I4(wb_mem_result[3]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[3]));
  LUT6 #(
    .INIT(64'hBBBB8B888B888B88)) 
    \trace_new_reg_value_i[4]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [27]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[15] ),
        .I3(wb_databus_read_data[11]),
        .I4(wb_mem_result[4]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[4]));
  LUT6 #(
    .INIT(64'hBBBB8B888B888B88)) 
    \trace_new_reg_value_i[5]_i_1 
       (.I0(\trace_new_reg_value_i_reg[0] [26]),
        .I1(wb_exception_taken),
        .I2(\trace_new_reg_value_i_reg[15] ),
        .I3(wb_databus_read_data[10]),
        .I4(wb_mem_result[5]),
        .I5(wb_sel_mem_res_i),
        .O(WB_Fwd[5]));
  LUT6 #(
    .INIT(64'hFFFF000088F888F8)) 
    \trace_new_reg_value_i[6]_i_1 
       (.I0(wb_mem_result[6]),
        .I1(wb_sel_mem_res_i),
        .I2(wb_databus_read_data[9]),
        .I3(\trace_new_reg_value_i_reg[15] ),
        .I4(\trace_new_reg_value_i_reg[0] [25]),
        .I5(wb_exception_taken),
        .O(WB_Fwd[6]));
  LUT6 #(
    .INIT(64'hFFFF000088F888F8)) 
    \trace_new_reg_value_i[7]_i_1 
       (.I0(wb_mem_result[7]),
        .I1(wb_sel_mem_res_i),
        .I2(wb_databus_read_data[8]),
        .I3(\trace_new_reg_value_i_reg[15] ),
        .I4(\trace_new_reg_value_i_reg[0] [24]),
        .I5(wb_exception_taken),
        .O(WB_Fwd[7]));
  LUT6 #(
    .INIT(64'hFFFF000088F888F8)) 
    \trace_new_reg_value_i[8]_i_1 
       (.I0(wb_mem_result[8]),
        .I1(wb_sel_mem_res_i),
        .I2(wb_databus_read_data[7]),
        .I3(\trace_new_reg_value_i_reg[15] ),
        .I4(\trace_new_reg_value_i_reg[0] [23]),
        .I5(wb_exception_taken),
        .O(WB_Fwd[8]));
  LUT6 #(
    .INIT(64'hFFFF000088F888F8)) 
    \trace_new_reg_value_i[9]_i_1 
       (.I0(wb_mem_result[9]),
        .I1(wb_sel_mem_res_i),
        .I2(wb_databus_read_data[6]),
        .I3(\trace_new_reg_value_i_reg[15] ),
        .I4(\trace_new_reg_value_i_reg[0] [22]),
        .I5(wb_exception_taken),
        .O(WB_Fwd[9]));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[0]_i_1 
       (.I0(Q[31]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[0]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[10]_i_1 
       (.I0(Q[21]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[10]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[10]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[11]_i_1 
       (.I0(Q[20]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[11]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[11]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[12]_i_1 
       (.I0(Q[19]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[12]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[12]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[13]_i_1 
       (.I0(Q[18]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[13]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[14]_i_1 
       (.I0(Q[17]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[14]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[15]_i_1 
       (.I0(Q[16]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[15]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[16]_i_1 
       (.I0(Q[15]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[16]),
        .I3(m3_m2_sel_res_reg_0),
        .O(m3_fwd[16]));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[17]_i_1 
       (.I0(Q[14]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[17]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[17]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[18]_i_1 
       (.I0(Q[13]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[18]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[18]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[19]_i_1 
       (.I0(Q[12]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[19]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[19]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[1]_i_1 
       (.I0(Q[30]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[1]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[20]_i_1 
       (.I0(Q[11]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[20]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[20]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[21]_i_1 
       (.I0(Q[10]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[21]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[21]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[22]_i_1 
       (.I0(Q[9]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[22]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[22]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[23]_i_1 
       (.I0(Q[8]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[23]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[23]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[24]_i_1 
       (.I0(Q[7]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[24]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[24]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[25]_i_1 
       (.I0(Q[6]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[25]),
        .I3(m3_m2_sel_res_reg_0),
        .O(m3_fwd[25]));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[26]_i_1 
       (.I0(Q[5]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[26]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[26]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[27]_i_1 
       (.I0(Q[4]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[27]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[27]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[28]_i_1 
       (.I0(Q[3]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[28]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[28]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[29]_i_1 
       (.I0(Q[2]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[29]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[29]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[2]_i_1 
       (.I0(Q[29]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[2]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[30]_i_1 
       (.I0(Q[1]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[30]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[30]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[31]_i_1 
       (.I0(Q[0]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[31]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[31]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[3]_i_1 
       (.I0(Q[28]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[3]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[4]_i_1 
       (.I0(Q[27]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[4]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[5]_i_1 
       (.I0(Q[26]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[5]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[5]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[6]_i_1 
       (.I0(Q[25]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[6]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[6]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[7]_i_1 
       (.I0(Q[24]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[7]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[8]_i_1 
       (.I0(Q[23]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[8]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[8]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF888)) 
    \wb_Mem_Result_i[9]_i_1 
       (.I0(Q[22]),
        .I1(m3_sel_div_res),
        .I2(m3_m2_result[9]),
        .I3(m3_m2_sel_res_reg_0),
        .O(\wb_Mem_Result_i[9]_i_1_n_0 ));
  FDRE \wb_Mem_Result_i_reg[0] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[0]_i_1_n_0 ),
        .Q(wb_mem_result[0]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[10] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[10]_i_1_n_0 ),
        .Q(wb_mem_result[10]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[11] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[11]_i_1_n_0 ),
        .Q(wb_mem_result[11]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[12] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[12]_i_1_n_0 ),
        .Q(wb_mem_result[12]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[13] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[13]_i_1_n_0 ),
        .Q(wb_mem_result[13]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[14] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[14]_i_1_n_0 ),
        .Q(wb_mem_result[14]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[15] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[15]_i_1_n_0 ),
        .Q(wb_mem_result[15]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[16] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_fwd[16]),
        .Q(wb_mem_result[16]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[17] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[17]_i_1_n_0 ),
        .Q(wb_mem_result[17]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[18] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[18]_i_1_n_0 ),
        .Q(wb_mem_result[18]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[19] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[19]_i_1_n_0 ),
        .Q(wb_mem_result[19]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[1] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[1]_i_1_n_0 ),
        .Q(wb_mem_result[1]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[20] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[20]_i_1_n_0 ),
        .Q(wb_mem_result[20]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[21] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[21]_i_1_n_0 ),
        .Q(wb_mem_result[21]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[22] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[22]_i_1_n_0 ),
        .Q(wb_mem_result[22]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[23] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[23]_i_1_n_0 ),
        .Q(wb_mem_result[23]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[24] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[24]_i_1_n_0 ),
        .Q(wb_mem_result[24]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[25] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_fwd[25]),
        .Q(wb_mem_result[25]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[26] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[26]_i_1_n_0 ),
        .Q(wb_mem_result[26]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[27] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[27]_i_1_n_0 ),
        .Q(wb_mem_result[27]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[28] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[28]_i_1_n_0 ),
        .Q(wb_mem_result[28]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[29] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[29]_i_1_n_0 ),
        .Q(wb_mem_result[29]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[2] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[2]_i_1_n_0 ),
        .Q(wb_mem_result[2]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[30] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[30]_i_1_n_0 ),
        .Q(wb_mem_result[30]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[31] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[31]_i_1_n_0 ),
        .Q(wb_mem_result[31]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[3] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[3]_i_1_n_0 ),
        .Q(wb_mem_result[3]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[4] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[4]_i_1_n_0 ),
        .Q(wb_mem_result[4]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[5] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[5]_i_1_n_0 ),
        .Q(wb_mem_result[5]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[6] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[6]_i_1_n_0 ),
        .Q(wb_mem_result[6]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[7] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[7]_i_1_n_0 ),
        .Q(wb_mem_result[7]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[8] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[8]_i_1_n_0 ),
        .Q(wb_mem_result[8]),
        .R(sync_reset));
  FDRE \wb_Mem_Result_i_reg[9] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_Mem_Result_i[9]_i_1_n_0 ),
        .Q(wb_mem_result[9]),
        .R(sync_reset));
  FDRE wb_m3_sel_res_reg
       (.C(Clk),
        .CE(m3_piperun),
        .D(wb_m3_sel_res0),
        .Q(wb_sel_mem_res_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "Data_Flow_ff" *) 
module microblaze_microblaze_0_0_Data_Flow_ff
   (ex_alu_result,
    m1_unaligned_addr_3lsb,
    Q,
    \EX_Op1_reg[0] ,
    out,
    ex_MSR_i,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    EX_CarryIn,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    m3_msr,
    wb_MSR_i,
    wb_msr,
    \of_MSR_i_reg[22] ,
    \of_MSR_i_reg[25] ,
    wb_exception_from_m3_reg_rep__0,
    WB_Exception_Return_Addr0,
    m0_ex_sel_res,
    m1_m0_sel_res,
    m3_m2_sel_res,
    E,
    next_sub,
    O,
    last_cycle,
    div_iterations_early_reg,
    floating_hold_div_by_zero__0,
    m3_div_by_zero,
    m3_div_stall,
    negative_operands,
    floating_hold_div_overflow_reg,
    m3_div_overflow,
    make_result_neg,
    D,
    wb_fwd,
    \wb_PC_i_reg[0] ,
    \m2_M1_Result_i_reg[29] ,
    \m2_M1_Result_i_reg[30] ,
    \m2_M1_Result_i_reg[31] ,
    wb_exception_from_m3_reg_rep__0_0,
    \EX_Op1_reg[10] ,
    \EX_Op1_reg[9] ,
    \EX_Op1_reg[1] ,
    \EX_Op1_reg[8] ,
    \m1_M0_Result_i_reg[0] ,
    \m0_Ex_Result_i_reg[0] ,
    WB_Byte_Access_reg,
    \No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0] ,
    \EX_Op2_reg[25] ,
    \EX_Op2_reg[25]_0 ,
    m3_div_stall_i_reg,
    GPR_Op3,
    EX_Enable_Sext_Shift_reg,
    EX_CLZ_Instr_reg,
    m2_m1_sel_res_reg,
    M1_Sel_Mul_Res_reg,
    \m1_M0_Result_i_reg[16] ,
    M1_Sel_Mul_Res_reg_0,
    M1_Sel_Mul_Res_reg_1,
    M1_Sel_Mul_Res_reg_2,
    m2_m1_sel_res_reg_0,
    M1_Sel_Mul_Res_reg_3,
    M1_Sel_Mul_Res_reg_4,
    \m1_M0_Result_i_reg[25] ,
    M1_Sel_Mul_Res_reg_5,
    m2_m1_sel_res_reg_1,
    GPR_Op1,
    m2_m1_sel_res_reg_2,
    m3_div_overflow_i_reg,
    \EX_Op2_reg[25]_1 ,
    EX_Op1_Zero,
    negative_operands_reg,
    \EX_Logic_Op_reg[0] ,
    ex_databus_addr,
    \EX_Op1_reg[0]_0 ,
    EX_CLZ_Instr_reg_0,
    \EX_Op1_reg[0]_1 ,
    \EX_Op1_reg[24] ,
    \EX_Op1_reg[24]_0 ,
    EX_Pattern_Cmp_Sel_reg,
    \EX_Op1_reg[0]_2 ,
    EX_Pattern_Cmp_Sel_reg_0,
    \EX_Op1_reg[16] ,
    \EX_Logic_Op_reg[1] ,
    ex_sel_alu_reg,
    \m0_Ex_Result_i_reg[1] ,
    \m1_M0_Result_i_reg[1] ,
    \m1_M0_Result_i_reg[2] ,
    \m0_Ex_Result_i_reg[2] ,
    \m0_Ex_Result_i_reg[3] ,
    \m1_M0_Result_i_reg[3] ,
    \m0_Ex_Result_i_reg[4] ,
    \m1_M0_Result_i_reg[4] ,
    \m1_M0_Result_i_reg[5] ,
    \m0_Ex_Result_i_reg[5] ,
    \m0_Ex_Result_i_reg[6] ,
    \m1_M0_Result_i_reg[6] ,
    \m0_Ex_Result_i_reg[7] ,
    \m1_M0_Result_i_reg[7] ,
    \m1_M0_Result_i_reg[8] ,
    \m0_Ex_Result_i_reg[8] ,
    \m1_M0_Result_i_reg[9] ,
    \m0_Ex_Result_i_reg[9] ,
    \m0_Ex_Result_i_reg[10] ,
    \m1_M0_Result_i_reg[10] ,
    \m0_Ex_Result_i_reg[11] ,
    \m1_M0_Result_i_reg[11] ,
    \m1_M0_Result_i_reg[12] ,
    \m0_Ex_Result_i_reg[12] ,
    \m1_M0_Result_i_reg[13] ,
    \m0_Ex_Result_i_reg[13] ,
    \m1_M0_Result_i_reg[14] ,
    \m0_Ex_Result_i_reg[14] ,
    \m0_Ex_Result_i_reg[15] ,
    \m1_M0_Result_i_reg[15] ,
    \No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 ,
    \EX_Op1_reg[24]_1 ,
    \m1_M0_Result_i_reg[29] ,
    \m0_Ex_Result_i_reg[29] ,
    \m0_Ex_Result_i_reg[30] ,
    \m1_M0_Result_i_reg[30] ,
    \m1_M0_Result_i_reg[31] ,
    \m0_Ex_Result_i_reg[31] ,
    \EX_Op2_reg[29] ,
    \EX_Op2_reg[30] ,
    M3_Div_By_Zero_reg,
    \m1_op3_reg[24] ,
    \m1_op3_reg[8] ,
    GPR_Op2,
    \imm_reg_reg[0] ,
    \EX_Branch_CMP_Op1_reg[0] ,
    LO,
    \WB_DataBus_Byte_Enable_reg[0] ,
    \WB_DataBus_Write_Data_reg[0] ,
    m3_last_cycle_reg,
    \cnt_shifts_reg[0] ,
    Clk,
    sync_reset,
    \Using_FPGA.DSP48E1_I1 ,
    m0_piperun,
    ex_use_carry,
    DI_0,
    S_1,
    ex_unsigned_op,
    \m0_databus_addr_i_reg[9] ,
    ex_alu_sel_logic,
    EX_Enable_ALU,
    in0,
    ex_void_bit,
    ex_left_shift_i,
    D_2,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \of_MSR_i_reg[22]_0 ,
    \of_MSR_i_reg[17] ,
    \wb_PC_i_reg[0]_0 ,
    DI,
    S,
    \WB_Exception_Return_Addr_reg[22] ,
    \WB_Exception_Return_Addr_reg[18] ,
    \WB_Exception_Return_Addr_reg[14] ,
    \WB_Exception_Return_Addr_reg[10] ,
    \WB_Exception_Return_Addr_reg[6] ,
    \WB_Exception_Return_Addr_reg[2] ,
    \WB_Exception_Return_Addr_reg[0] ,
    m0_ex_sel_res_reg,
    m1_m0_sel_res0,
    m1_piperun,
    m2_m1_sel_res0,
    m2_piperun,
    m3_piperun,
    wb_m3_sel_res0,
    ex_start_div,
    floating_hold_div_by_zero_reg,
    M3_Div_By_Zero_reg_0,
    m3_div_stall_i_reg_0,
    negative_operands_reg_0,
    floating_hold_div_overflow_reg_0,
    m3_div_overflow_i_reg_0,
    next_sub_reg,
    make_result_neg_reg,
    \data_rd_reg_reg[30] ,
    wb_gpr_wr_dbg,
    read_register_MSR_1,
    \EX_Branch_CMP_Op1_reg[28] ,
    \EX_Branch_CMP_Op1_reg[28]_0 ,
    WB_Div_Zero_Overflow_reg,
    ex_clz_instr,
    ex_bit_insert,
    ex_bit_extract,
    m1_sel_mul_res,
    m0_sel_barrel_res,
    m3_sel_div_res,
    wb_byte_access,
    \Use_HW_BS.Using_BitField.mem_mask0_reg[2] ,
    \EX_Op3_reg[31] ,
    \EX_Op3_reg[30] ,
    \EX_Op3_reg[30]_0 ,
    of_op3_sel,
    \m0_Ex_Result_i_reg[0]_0 ,
    \EX_Op3_reg[29] ,
    \EX_Op3[29]_i_2 ,
    \EX_Op3[29]_i_2_0 ,
    \EX_Op3_reg[30]_1 ,
    \EX_Op2_reg[31] ,
    \EX_Op2_reg[1] ,
    \EX_Op2_reg[1]_0 ,
    \EX_Op2_reg[0] ,
    \EX_Op2_reg[2] ,
    \EX_Op2_reg[5] ,
    \EX_Op2_reg[8] ,
    \EX_Op2_reg[9] ,
    \EX_Op2_reg[12] ,
    \EX_Op2_reg[13] ,
    \EX_Op2_reg[14] ,
    \EX_Op2_reg[16] ,
    of_op2_sel,
    \EX_Op2_reg[18] ,
    \EX_Op2_reg[21] ,
    \EX_Op2_reg[22] ,
    \EX_Op2_reg[25]_2 ,
    \EX_Op2_reg[28] ,
    \EX_Op2_reg[29]_0 ,
    \EX_Op2_reg[3] ,
    \EX_Op2_reg[6] ,
    \EX_Op2_reg[7] ,
    \EX_Op2_reg[10] ,
    \EX_Op2_reg[11] ,
    \EX_Op2_reg[15] ,
    \EX_Op2_reg[20] ,
    \EX_Op2_reg[30]_0 ,
    \EX_Op2_reg[17] ,
    \EX_Op2_reg[4] ,
    \EX_Op2_reg[1]_1 ,
    \EX_Op2_reg[19] ,
    \EX_Op2_reg[23] ,
    \EX_Op2_reg[24] ,
    \EX_Op2_reg[26] ,
    \EX_Op2_reg[27] ,
    of_op1_sel,
    m3_div_overflow_i_reg_1,
    ex_msrclr,
    ex_msrset,
    m3_div_zero_overflow_ex_hold,
    div_busy_reg,
    ex_div_unsigned,
    wb_exception_taken,
    \trace_new_reg_value_i_reg[15] ,
    wb_databus_read_data,
    \trace_new_reg_value_i_reg[16] ,
    \trace_new_reg_value_i_reg[17] ,
    \trace_new_reg_value_i_reg[18] ,
    \trace_new_reg_value_i_reg[19] ,
    \trace_new_reg_value_i_reg[20] ,
    \trace_new_reg_value_i_reg[21] ,
    \trace_new_reg_value_i_reg[22] ,
    \trace_new_reg_value_i_reg[23] ,
    \trace_new_reg_value_i_reg[24] ,
    \trace_new_reg_value_i_reg[25] ,
    \trace_new_reg_value_i_reg[26] ,
    \trace_new_reg_value_i_reg[27] ,
    \trace_new_reg_value_i_reg[28] ,
    \trace_new_reg_value_i_reg[29] ,
    \trace_new_reg_value_i_reg[30] ,
    \trace_new_reg_value_i_reg[31] ,
    m2_is_div_instr,
    ex_pattern_cmp_sel,
    ex_sel_alu_res,
    \m0_Ex_Result_i_reg[29]_0 ,
    \m0_Ex_Result_i_reg[30]_0 ,
    \m0_Ex_Result_i_reg[31]_0 ,
    ex_logic_op,
    \m0_Ex_Result_i_reg[26] ,
    \m0_Ex_Result_i_reg[27] ,
    \m0_Ex_Result_i_reg[28] ,
    ex_cmp_op,
    \Use_HW_BS.Using_BitField.mem_mask1_reg[5] ,
    \m0_Ex_Result_i_reg[24] ,
    ex_enable_sext_shift,
    \m0_Ex_Result_i_reg[17] ,
    \Use_HW_BS.mem_mux3_reg[0] ,
    \Use_HW_BS.mem_mux3_reg[30] ,
    \Use_HW_BS.mem_mux3_reg[27] ,
    \Use_HW_BS.mem_mux3_reg[0]_0 ,
    \Use_HW_BS.mem_mux3_reg[30]_0 ,
    \Use_HW_BS.mem_mux3_reg[0]_1 ,
    ex_arith_shift,
    \Use_HW_BS.Using_BitField.mem_mask0_reg[0] ,
    wb_div_zero_overflow,
    wb_msr_clear_bip,
    \of_MSR_i_reg[25]_0 ,
    of_piperun,
    m1_byte_access,
    m1_doublet_access,
    wb_gpr_wr,
    \EX_Op3[1]_i_2 ,
    ADDRD,
    \imm_reg_reg[15] ,
    \EX_Op1_reg[0]_3 ,
    \EX_Branch_CMP_Op1_reg[29] ,
    EX_Op1_CMP_Equal,
    ex_op1_cmp_equal_n,
    \m3_databus_write_data_i_reg[0] ,
    \Use_HW_BS.mem_mux3_reg[1] ,
    \wb_PC_i_reg[31] ,
    \WB_Exception_Return_Addr_reg[0]_0 ,
    SR,
    \R_reg[32] ,
    lopt,
    lopt_1,
    lopt_2);
  output [1:0]ex_alu_result;
  output [1:0]m1_unaligned_addr_3lsb;
  output [15:0]Q;
  output [31:0]\EX_Op1_reg[0] ;
  output out;
  output [10:0]ex_MSR_i;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output EX_CarryIn;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output [0:0]m3_msr;
  output [10:0]wb_MSR_i;
  output [3:0]wb_msr;
  output [4:0]\of_MSR_i_reg[22] ;
  output [1:0]\of_MSR_i_reg[25] ;
  output [1:0]wb_exception_from_m3_reg_rep__0;
  output [29:0]WB_Exception_Return_Addr0;
  output m0_ex_sel_res;
  output m1_m0_sel_res;
  output m3_m2_sel_res;
  output [0:0]E;
  output next_sub;
  output [0:0]O;
  output last_cycle;
  output div_iterations_early_reg;
  output floating_hold_div_by_zero__0;
  output m3_div_by_zero;
  output m3_div_stall;
  output negative_operands;
  output floating_hold_div_overflow_reg;
  output m3_div_overflow;
  output make_result_neg;
  output [31:0]D;
  output [0:31]wb_fwd;
  output [31:0]\wb_PC_i_reg[0] ;
  output \m2_M1_Result_i_reg[29] ;
  output \m2_M1_Result_i_reg[30] ;
  output \m2_M1_Result_i_reg[31] ;
  output wb_exception_from_m3_reg_rep__0_0;
  output \EX_Op1_reg[10] ;
  output \EX_Op1_reg[9] ;
  output \EX_Op1_reg[1] ;
  output \EX_Op1_reg[8] ;
  output \m1_M0_Result_i_reg[0] ;
  output \m0_Ex_Result_i_reg[0] ;
  output WB_Byte_Access_reg;
  output [1:0]\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0] ;
  output \EX_Op2_reg[25] ;
  output \EX_Op2_reg[25]_0 ;
  output m3_div_stall_i_reg;
  output [1:0]GPR_Op3;
  output [6:0]EX_Enable_Sext_Shift_reg;
  output EX_CLZ_Instr_reg;
  output m2_m1_sel_res_reg;
  output M1_Sel_Mul_Res_reg;
  output \m1_M0_Result_i_reg[16] ;
  output M1_Sel_Mul_Res_reg_0;
  output M1_Sel_Mul_Res_reg_1;
  output M1_Sel_Mul_Res_reg_2;
  output m2_m1_sel_res_reg_0;
  output M1_Sel_Mul_Res_reg_3;
  output M1_Sel_Mul_Res_reg_4;
  output \m1_M0_Result_i_reg[25] ;
  output M1_Sel_Mul_Res_reg_5;
  output [28:0]m2_m1_sel_res_reg_1;
  output [2:0]GPR_Op1;
  output m2_m1_sel_res_reg_2;
  output m3_div_overflow_i_reg;
  output \EX_Op2_reg[25]_1 ;
  output EX_Op1_Zero;
  output negative_operands_reg;
  output \EX_Logic_Op_reg[0] ;
  output [29:0]ex_databus_addr;
  output \EX_Op1_reg[0]_0 ;
  output EX_CLZ_Instr_reg_0;
  output \EX_Op1_reg[0]_1 ;
  output \EX_Op1_reg[24] ;
  output \EX_Op1_reg[24]_0 ;
  output EX_Pattern_Cmp_Sel_reg;
  output \EX_Op1_reg[0]_2 ;
  output EX_Pattern_Cmp_Sel_reg_0;
  output \EX_Op1_reg[16] ;
  output \EX_Logic_Op_reg[1] ;
  output ex_sel_alu_reg;
  output \m0_Ex_Result_i_reg[1] ;
  output \m1_M0_Result_i_reg[1] ;
  output \m1_M0_Result_i_reg[2] ;
  output \m0_Ex_Result_i_reg[2] ;
  output \m0_Ex_Result_i_reg[3] ;
  output \m1_M0_Result_i_reg[3] ;
  output \m0_Ex_Result_i_reg[4] ;
  output \m1_M0_Result_i_reg[4] ;
  output \m1_M0_Result_i_reg[5] ;
  output \m0_Ex_Result_i_reg[5] ;
  output \m0_Ex_Result_i_reg[6] ;
  output \m1_M0_Result_i_reg[6] ;
  output \m0_Ex_Result_i_reg[7] ;
  output \m1_M0_Result_i_reg[7] ;
  output \m1_M0_Result_i_reg[8] ;
  output \m0_Ex_Result_i_reg[8] ;
  output \m1_M0_Result_i_reg[9] ;
  output \m0_Ex_Result_i_reg[9] ;
  output \m0_Ex_Result_i_reg[10] ;
  output \m1_M0_Result_i_reg[10] ;
  output \m0_Ex_Result_i_reg[11] ;
  output \m1_M0_Result_i_reg[11] ;
  output \m1_M0_Result_i_reg[12] ;
  output \m0_Ex_Result_i_reg[12] ;
  output \m1_M0_Result_i_reg[13] ;
  output \m0_Ex_Result_i_reg[13] ;
  output \m1_M0_Result_i_reg[14] ;
  output \m0_Ex_Result_i_reg[14] ;
  output \m0_Ex_Result_i_reg[15] ;
  output \m1_M0_Result_i_reg[15] ;
  output \No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 ;
  output \EX_Op1_reg[24]_1 ;
  output \m1_M0_Result_i_reg[29] ;
  output \m0_Ex_Result_i_reg[29] ;
  output \m0_Ex_Result_i_reg[30] ;
  output \m1_M0_Result_i_reg[30] ;
  output \m1_M0_Result_i_reg[31] ;
  output \m0_Ex_Result_i_reg[31] ;
  output \EX_Op2_reg[29] ;
  output \EX_Op2_reg[30] ;
  output M3_Div_By_Zero_reg;
  output [27:0]\m1_op3_reg[24] ;
  output [7:0]\m1_op3_reg[8] ;
  output [0:31]GPR_Op2;
  output [15:0]\imm_reg_reg[0] ;
  output [0:0]\EX_Branch_CMP_Op1_reg[0] ;
  output LO;
  output [3:0]\WB_DataBus_Byte_Enable_reg[0] ;
  output [31:0]\WB_DataBus_Write_Data_reg[0] ;
  output m3_last_cycle_reg;
  input \cnt_shifts_reg[0] ;
  input Clk;
  input sync_reset;
  input \Using_FPGA.DSP48E1_I1 ;
  input m0_piperun;
  input ex_use_carry;
  input DI_0;
  input S_1;
  input ex_unsigned_op;
  input [1:0]\m0_databus_addr_i_reg[9] ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;
  input in0;
  input ex_void_bit;
  input ex_left_shift_i;
  input D_2;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;
  input [3:0]\of_MSR_i_reg[22]_0 ;
  input [14:0]\of_MSR_i_reg[17] ;
  input [31:0]\wb_PC_i_reg[0]_0 ;
  input [0:0]DI;
  input [3:0]S;
  input [3:0]\WB_Exception_Return_Addr_reg[22] ;
  input [3:0]\WB_Exception_Return_Addr_reg[18] ;
  input [3:0]\WB_Exception_Return_Addr_reg[14] ;
  input [3:0]\WB_Exception_Return_Addr_reg[10] ;
  input [3:0]\WB_Exception_Return_Addr_reg[6] ;
  input [3:0]\WB_Exception_Return_Addr_reg[2] ;
  input [1:0]\WB_Exception_Return_Addr_reg[0] ;
  input m0_ex_sel_res_reg;
  input m1_m0_sel_res0;
  input m1_piperun;
  input m2_m1_sel_res0;
  input m2_piperun;
  input m3_piperun;
  input wb_m3_sel_res0;
  input ex_start_div;
  input floating_hold_div_by_zero_reg;
  input M3_Div_By_Zero_reg_0;
  input m3_div_stall_i_reg_0;
  input negative_operands_reg_0;
  input floating_hold_div_overflow_reg_0;
  input m3_div_overflow_i_reg_0;
  input next_sub_reg;
  input make_result_neg_reg;
  input \data_rd_reg_reg[30] ;
  input wb_gpr_wr_dbg;
  input read_register_MSR_1;
  input \EX_Branch_CMP_Op1_reg[28] ;
  input \EX_Branch_CMP_Op1_reg[28]_0 ;
  input WB_Div_Zero_Overflow_reg;
  input ex_clz_instr;
  input ex_bit_insert;
  input ex_bit_extract;
  input m1_sel_mul_res;
  input m0_sel_barrel_res;
  input m3_sel_div_res;
  input wb_byte_access;
  input \Use_HW_BS.Using_BitField.mem_mask0_reg[2] ;
  input [0:0]\EX_Op3_reg[31] ;
  input \EX_Op3_reg[30] ;
  input \EX_Op3_reg[30]_0 ;
  input [0:2]of_op3_sel;
  input [16:0]\m0_Ex_Result_i_reg[0]_0 ;
  input \EX_Op3_reg[29] ;
  input \EX_Op3[29]_i_2 ;
  input \EX_Op3[29]_i_2_0 ;
  input \EX_Op3_reg[30]_1 ;
  input [0:0]\EX_Op2_reg[31] ;
  input \EX_Op2_reg[1] ;
  input \EX_Op2_reg[1]_0 ;
  input \EX_Op2_reg[0] ;
  input \EX_Op2_reg[2] ;
  input \EX_Op2_reg[5] ;
  input \EX_Op2_reg[8] ;
  input \EX_Op2_reg[9] ;
  input \EX_Op2_reg[12] ;
  input \EX_Op2_reg[13] ;
  input \EX_Op2_reg[14] ;
  input \EX_Op2_reg[16] ;
  input [0:2]of_op2_sel;
  input \EX_Op2_reg[18] ;
  input \EX_Op2_reg[21] ;
  input \EX_Op2_reg[22] ;
  input \EX_Op2_reg[25]_2 ;
  input \EX_Op2_reg[28] ;
  input \EX_Op2_reg[29]_0 ;
  input \EX_Op2_reg[3] ;
  input \EX_Op2_reg[6] ;
  input \EX_Op2_reg[7] ;
  input \EX_Op2_reg[10] ;
  input \EX_Op2_reg[11] ;
  input \EX_Op2_reg[15] ;
  input \EX_Op2_reg[20] ;
  input \EX_Op2_reg[30]_0 ;
  input \EX_Op2_reg[17] ;
  input \EX_Op2_reg[4] ;
  input \EX_Op2_reg[1]_1 ;
  input \EX_Op2_reg[19] ;
  input \EX_Op2_reg[23] ;
  input \EX_Op2_reg[24] ;
  input \EX_Op2_reg[26] ;
  input \EX_Op2_reg[27] ;
  input [1:0]of_op1_sel;
  input m3_div_overflow_i_reg_1;
  input ex_msrclr;
  input ex_msrset;
  input m3_div_zero_overflow_ex_hold;
  input div_busy_reg;
  input ex_div_unsigned;
  input wb_exception_taken;
  input \trace_new_reg_value_i_reg[15] ;
  input [15:0]wb_databus_read_data;
  input \trace_new_reg_value_i_reg[16] ;
  input \trace_new_reg_value_i_reg[17] ;
  input \trace_new_reg_value_i_reg[18] ;
  input \trace_new_reg_value_i_reg[19] ;
  input \trace_new_reg_value_i_reg[20] ;
  input \trace_new_reg_value_i_reg[21] ;
  input \trace_new_reg_value_i_reg[22] ;
  input \trace_new_reg_value_i_reg[23] ;
  input \trace_new_reg_value_i_reg[24] ;
  input \trace_new_reg_value_i_reg[25] ;
  input \trace_new_reg_value_i_reg[26] ;
  input \trace_new_reg_value_i_reg[27] ;
  input \trace_new_reg_value_i_reg[28] ;
  input \trace_new_reg_value_i_reg[29] ;
  input \trace_new_reg_value_i_reg[30] ;
  input \trace_new_reg_value_i_reg[31] ;
  input m2_is_div_instr;
  input ex_pattern_cmp_sel;
  input ex_sel_alu_res;
  input \m0_Ex_Result_i_reg[29]_0 ;
  input \m0_Ex_Result_i_reg[30]_0 ;
  input \m0_Ex_Result_i_reg[31]_0 ;
  input [0:1]ex_logic_op;
  input \m0_Ex_Result_i_reg[26] ;
  input \m0_Ex_Result_i_reg[27] ;
  input \m0_Ex_Result_i_reg[28] ;
  input ex_cmp_op;
  input \Use_HW_BS.Using_BitField.mem_mask1_reg[5] ;
  input \m0_Ex_Result_i_reg[24] ;
  input ex_enable_sext_shift;
  input [1:0]\m0_Ex_Result_i_reg[17] ;
  input \Use_HW_BS.mem_mux3_reg[0] ;
  input \Use_HW_BS.mem_mux3_reg[30] ;
  input \Use_HW_BS.mem_mux3_reg[27] ;
  input \Use_HW_BS.mem_mux3_reg[0]_0 ;
  input \Use_HW_BS.mem_mux3_reg[30]_0 ;
  input \Use_HW_BS.mem_mux3_reg[0]_1 ;
  input ex_arith_shift;
  input [18:0]\Use_HW_BS.Using_BitField.mem_mask0_reg[0] ;
  input wb_div_zero_overflow;
  input wb_msr_clear_bip;
  input [1:0]\of_MSR_i_reg[25]_0 ;
  input of_piperun;
  input m1_byte_access;
  input m1_doublet_access;
  input wb_gpr_wr;
  input [25:0]\EX_Op3[1]_i_2 ;
  input [4:0]ADDRD;
  input [0:0]\imm_reg_reg[15] ;
  input [31:0]\EX_Op1_reg[0]_3 ;
  input [2:0]\EX_Branch_CMP_Op1_reg[29] ;
  input EX_Op1_CMP_Equal;
  input ex_op1_cmp_equal_n;
  input [35:0]\m3_databus_write_data_i_reg[0] ;
  input [27:0]\Use_HW_BS.mem_mux3_reg[1] ;
  input [0:0]\wb_PC_i_reg[31] ;
  input [30:0]\WB_Exception_Return_Addr_reg[0]_0 ;
  input [0:0]SR;
  input [0:0]\R_reg[32] ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [4:0]ADDRD;
  wire ALU_I1_n_38;
  wire ALU_I1_n_39;
  wire Clk;
  wire [31:0]D;
  wire [0:0]DI;
  wire DI_0;
  wire D_2;
  wire [32:32]D_Carry;
  wire Data_Flow_Logic_I1_n_0;
  wire [0:0]E;
  wire [0:0]\EX_Branch_CMP_Op1_reg[0] ;
  wire \EX_Branch_CMP_Op1_reg[28] ;
  wire \EX_Branch_CMP_Op1_reg[28]_0 ;
  wire [2:0]\EX_Branch_CMP_Op1_reg[29] ;
  wire EX_CLZ_Instr_reg;
  wire EX_CLZ_Instr_reg_0;
  wire EX_CarryIn;
  wire EX_Enable_ALU;
  wire [6:0]EX_Enable_Sext_Shift_reg;
  wire \EX_Logic_Op_reg[0] ;
  wire \EX_Logic_Op_reg[1] ;
  wire EX_Op1_CMP_Equal;
  wire EX_Op1_Zero;
  wire [31:0]\EX_Op1_reg[0] ;
  wire \EX_Op1_reg[0]_0 ;
  wire \EX_Op1_reg[0]_1 ;
  wire \EX_Op1_reg[0]_2 ;
  wire [31:0]\EX_Op1_reg[0]_3 ;
  wire \EX_Op1_reg[10] ;
  wire \EX_Op1_reg[16] ;
  wire \EX_Op1_reg[1] ;
  wire \EX_Op1_reg[24] ;
  wire \EX_Op1_reg[24]_0 ;
  wire \EX_Op1_reg[24]_1 ;
  wire \EX_Op1_reg[8] ;
  wire \EX_Op1_reg[9] ;
  wire \EX_Op2_reg[0] ;
  wire \EX_Op2_reg[10] ;
  wire \EX_Op2_reg[11] ;
  wire \EX_Op2_reg[12] ;
  wire \EX_Op2_reg[13] ;
  wire \EX_Op2_reg[14] ;
  wire \EX_Op2_reg[15] ;
  wire \EX_Op2_reg[16] ;
  wire \EX_Op2_reg[17] ;
  wire \EX_Op2_reg[18] ;
  wire \EX_Op2_reg[19] ;
  wire \EX_Op2_reg[1] ;
  wire \EX_Op2_reg[1]_0 ;
  wire \EX_Op2_reg[1]_1 ;
  wire \EX_Op2_reg[20] ;
  wire \EX_Op2_reg[21] ;
  wire \EX_Op2_reg[22] ;
  wire \EX_Op2_reg[23] ;
  wire \EX_Op2_reg[24] ;
  wire \EX_Op2_reg[25] ;
  wire \EX_Op2_reg[25]_0 ;
  wire \EX_Op2_reg[25]_1 ;
  wire \EX_Op2_reg[25]_2 ;
  wire \EX_Op2_reg[26] ;
  wire \EX_Op2_reg[27] ;
  wire \EX_Op2_reg[28] ;
  wire \EX_Op2_reg[29] ;
  wire \EX_Op2_reg[29]_0 ;
  wire \EX_Op2_reg[2] ;
  wire \EX_Op2_reg[30] ;
  wire \EX_Op2_reg[30]_0 ;
  wire [0:0]\EX_Op2_reg[31] ;
  wire \EX_Op2_reg[3] ;
  wire \EX_Op2_reg[4] ;
  wire \EX_Op2_reg[5] ;
  wire \EX_Op2_reg[6] ;
  wire \EX_Op2_reg[7] ;
  wire \EX_Op2_reg[8] ;
  wire \EX_Op2_reg[9] ;
  wire [25:0]\EX_Op3[1]_i_2 ;
  wire \EX_Op3[29]_i_2 ;
  wire \EX_Op3[29]_i_2_0 ;
  wire \EX_Op3_reg[29] ;
  wire \EX_Op3_reg[30] ;
  wire \EX_Op3_reg[30]_0 ;
  wire \EX_Op3_reg[30]_1 ;
  wire [0:0]\EX_Op3_reg[31] ;
  wire EX_Pattern_Cmp_Sel_reg;
  wire EX_Pattern_Cmp_Sel_reg_0;
  wire [2:0]GPR_Op1;
  wire [0:31]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire I4;
  wire LO;
  wire M1_Sel_Mul_Res_reg;
  wire M1_Sel_Mul_Res_reg_0;
  wire M1_Sel_Mul_Res_reg_1;
  wire M1_Sel_Mul_Res_reg_2;
  wire M1_Sel_Mul_Res_reg_3;
  wire M1_Sel_Mul_Res_reg_4;
  wire M1_Sel_Mul_Res_reg_5;
  wire M3_Div_By_Zero_reg;
  wire M3_Div_By_Zero_reg_0;
  wire MSR_I1_n_21;
  wire [1:0]\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0] ;
  wire \No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 ;
  wire [0:0]O;
  wire Operand_Select_I1_n_100;
  wire Operand_Select_I1_n_101;
  wire Operand_Select_I1_n_102;
  wire Operand_Select_I1_n_103;
  wire Operand_Select_I1_n_105;
  wire Operand_Select_I1_n_170;
  wire Operand_Select_I1_n_171;
  wire Operand_Select_I1_n_172;
  wire Operand_Select_I1_n_173;
  wire Operand_Select_I1_n_174;
  wire Operand_Select_I1_n_175;
  wire Operand_Select_I1_n_176;
  wire Operand_Select_I1_n_177;
  wire Operand_Select_I1_n_178;
  wire Operand_Select_I1_n_179;
  wire Operand_Select_I1_n_180;
  wire Operand_Select_I1_n_181;
  wire Operand_Select_I1_n_182;
  wire Operand_Select_I1_n_186;
  wire Operand_Select_I1_n_68;
  wire Operand_Select_I1_n_69;
  wire Operand_Select_I1_n_70;
  wire Operand_Select_I1_n_71;
  wire Operand_Select_I1_n_72;
  wire Operand_Select_I1_n_73;
  wire Operand_Select_I1_n_74;
  wire Operand_Select_I1_n_75;
  wire Operand_Select_I1_n_76;
  wire Operand_Select_I1_n_77;
  wire Operand_Select_I1_n_78;
  wire Operand_Select_I1_n_79;
  wire Operand_Select_I1_n_80;
  wire Operand_Select_I1_n_81;
  wire Operand_Select_I1_n_82;
  wire Operand_Select_I1_n_83;
  wire Operand_Select_I1_n_84;
  wire Operand_Select_I1_n_85;
  wire Operand_Select_I1_n_86;
  wire Operand_Select_I1_n_87;
  wire Operand_Select_I1_n_88;
  wire Operand_Select_I1_n_89;
  wire Operand_Select_I1_n_90;
  wire Operand_Select_I1_n_91;
  wire Operand_Select_I1_n_92;
  wire Operand_Select_I1_n_93;
  wire Operand_Select_I1_n_94;
  wire Operand_Select_I1_n_95;
  wire Operand_Select_I1_n_96;
  wire Operand_Select_I1_n_97;
  wire Operand_Select_I1_n_98;
  wire Operand_Select_I1_n_99;
  wire [15:0]Q;
  wire [0:0]\R_reg[32] ;
  wire [3:0]S;
  wire [0:0]SR;
  wire S_0;
  wire S_1;
  wire [18:0]\Use_HW_BS.Using_BitField.mem_mask0_reg[0] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg[2] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg[5] ;
  wire \Use_HW_BS.mem_mux3_reg[0] ;
  wire \Use_HW_BS.mem_mux3_reg[0]_0 ;
  wire \Use_HW_BS.mem_mux3_reg[0]_1 ;
  wire [27:0]\Use_HW_BS.mem_mux3_reg[1] ;
  wire \Use_HW_BS.mem_mux3_reg[27] ;
  wire \Use_HW_BS.mem_mux3_reg[30] ;
  wire \Use_HW_BS.mem_mux3_reg[30]_0 ;
  wire \Using_FPGA.ALL_Bits[0].ALU_Bit_I1/I0 ;
  wire \Using_FPGA.ALL_Bits[0].ALU_Bit_I1/I2 ;
  wire \Using_FPGA.DSP48E1_I1 ;
  wire \Using_FPGA.D_Handle[0].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[10].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[11].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[12].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[13].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[14].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[15].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[16].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[17].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[18].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[19].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[1].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[20].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[21].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[22].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[23].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[24].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[25].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[26].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[27].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[28].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[29].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[2].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[31].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[3].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[4].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[5].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[6].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[7].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[8].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[9].D_Sel_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire WB_Byte_Access_reg;
  wire [3:0]\WB_DataBus_Byte_Enable_reg[0] ;
  wire [31:0]\WB_DataBus_Write_Data_reg[0] ;
  wire WB_Div_Zero_Overflow_reg;
  wire [29:0]WB_Exception_Return_Addr0;
  wire [1:0]\WB_Exception_Return_Addr_reg[0] ;
  wire [30:0]\WB_Exception_Return_Addr_reg[0]_0 ;
  wire [3:0]\WB_Exception_Return_Addr_reg[10] ;
  wire [3:0]\WB_Exception_Return_Addr_reg[14] ;
  wire [3:0]\WB_Exception_Return_Addr_reg[18] ;
  wire [3:0]\WB_Exception_Return_Addr_reg[22] ;
  wire [3:0]\WB_Exception_Return_Addr_reg[2] ;
  wire [3:0]\WB_Exception_Return_Addr_reg[6] ;
  wire \cnt_shifts_reg[0] ;
  wire \data_rd_reg_reg[30] ;
  wire div_busy_reg;
  wire div_iterations_early;
  wire div_iterations_early_reg;
  wire [10:0]ex_MSR_i;
  wire [1:0]ex_alu_result;
  wire ex_alu_sel_logic;
  wire ex_arith_shift;
  wire ex_bit_extract;
  wire ex_bit_insert;
  wire [1:29]ex_branch_cmp_op1;
  wire ex_clz_instr;
  wire ex_cmp_op;
  wire [29:0]ex_databus_addr;
  wire ex_div_unsigned;
  wire ex_enable_sext_shift;
  wire [19:28]ex_fwd;
  wire ex_left_shift_i;
  wire [0:1]ex_logic_op;
  wire ex_msrclr;
  wire ex_msrset;
  wire ex_op1_cmp_equal_n;
  wire [1:16]ex_op2;
  wire [0:31]ex_op3;
  wire ex_pattern_cmp_sel;
  wire ex_sel_alu_reg;
  wire ex_sel_alu_res;
  wire ex_start_div;
  wire ex_unsigned_op;
  wire ex_use_carry;
  wire ex_void_bit;
  wire floating_hold_div_by_zero__0;
  wire floating_hold_div_by_zero_reg;
  wire floating_hold_div_overflow_reg;
  wire floating_hold_div_overflow_reg_0;
  wire [0:28]gpr_op1;
  wire [0:29]gpr_op3;
  wire [15:0]\imm_reg_reg[0] ;
  wire [0:0]\imm_reg_reg[15] ;
  wire in0;
  wire last_cycle;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire \m0_Ex_Result_i_reg[0] ;
  wire [16:0]\m0_Ex_Result_i_reg[0]_0 ;
  wire \m0_Ex_Result_i_reg[10] ;
  wire \m0_Ex_Result_i_reg[11] ;
  wire \m0_Ex_Result_i_reg[12] ;
  wire \m0_Ex_Result_i_reg[13] ;
  wire \m0_Ex_Result_i_reg[14] ;
  wire \m0_Ex_Result_i_reg[15] ;
  wire [1:0]\m0_Ex_Result_i_reg[17] ;
  wire \m0_Ex_Result_i_reg[1] ;
  wire \m0_Ex_Result_i_reg[24] ;
  wire \m0_Ex_Result_i_reg[26] ;
  wire \m0_Ex_Result_i_reg[27] ;
  wire \m0_Ex_Result_i_reg[28] ;
  wire \m0_Ex_Result_i_reg[29] ;
  wire \m0_Ex_Result_i_reg[29]_0 ;
  wire \m0_Ex_Result_i_reg[2] ;
  wire \m0_Ex_Result_i_reg[30] ;
  wire \m0_Ex_Result_i_reg[30]_0 ;
  wire \m0_Ex_Result_i_reg[31] ;
  wire \m0_Ex_Result_i_reg[31]_0 ;
  wire \m0_Ex_Result_i_reg[3] ;
  wire \m0_Ex_Result_i_reg[4] ;
  wire \m0_Ex_Result_i_reg[5] ;
  wire \m0_Ex_Result_i_reg[6] ;
  wire \m0_Ex_Result_i_reg[7] ;
  wire \m0_Ex_Result_i_reg[8] ;
  wire \m0_Ex_Result_i_reg[9] ;
  wire [0:31]m0_barrel_result;
  wire [1:0]\m0_databus_addr_i_reg[9] ;
  wire m0_ex_sel_res;
  wire m0_ex_sel_res_reg;
  wire m0_piperun;
  wire m0_sel_barrel_res;
  wire \m1_M0_Result_i_reg[0] ;
  wire \m1_M0_Result_i_reg[10] ;
  wire \m1_M0_Result_i_reg[11] ;
  wire \m1_M0_Result_i_reg[12] ;
  wire \m1_M0_Result_i_reg[13] ;
  wire \m1_M0_Result_i_reg[14] ;
  wire \m1_M0_Result_i_reg[15] ;
  wire \m1_M0_Result_i_reg[16] ;
  wire \m1_M0_Result_i_reg[1] ;
  wire \m1_M0_Result_i_reg[25] ;
  wire \m1_M0_Result_i_reg[29] ;
  wire \m1_M0_Result_i_reg[2] ;
  wire \m1_M0_Result_i_reg[30] ;
  wire \m1_M0_Result_i_reg[31] ;
  wire \m1_M0_Result_i_reg[3] ;
  wire \m1_M0_Result_i_reg[4] ;
  wire \m1_M0_Result_i_reg[5] ;
  wire \m1_M0_Result_i_reg[6] ;
  wire \m1_M0_Result_i_reg[7] ;
  wire \m1_M0_Result_i_reg[8] ;
  wire \m1_M0_Result_i_reg[9] ;
  wire m1_byte_access;
  wire m1_doublet_access;
  wire m1_m0_sel_res;
  wire m1_m0_sel_res0;
  wire [0:31]m1_mul_result;
  wire [27:0]\m1_op3_reg[24] ;
  wire [7:0]\m1_op3_reg[8] ;
  wire m1_piperun;
  wire m1_sel_mul_res;
  wire [1:0]m1_unaligned_addr_3lsb;
  wire \m2_M1_Result_i_reg[29] ;
  wire \m2_M1_Result_i_reg[30] ;
  wire \m2_M1_Result_i_reg[31] ;
  wire m2_is_div_instr;
  wire m2_m1_sel_res0;
  wire m2_m1_sel_res_reg;
  wire m2_m1_sel_res_reg_0;
  wire [28:0]m2_m1_sel_res_reg_1;
  wire m2_m1_sel_res_reg_2;
  wire m2_piperun;
  wire [35:0]\m3_databus_write_data_i_reg[0] ;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire m3_div_overflow_i_reg;
  wire m3_div_overflow_i_reg_0;
  wire m3_div_overflow_i_reg_1;
  wire [0:31]m3_div_result;
  wire m3_div_stall;
  wire m3_div_stall_i_reg;
  wire m3_div_stall_i_reg_0;
  wire m3_div_zero_overflow_ex_hold;
  wire m3_last_cycle_reg;
  wire m3_m2_sel_res;
  wire [0:0]m3_msr;
  wire m3_piperun;
  wire m3_sel_div_res;
  wire make_result_neg;
  wire make_result_neg_reg;
  wire negative_operands;
  wire negative_operands_reg;
  wire negative_operands_reg_0;
  wire next_sub;
  wire next_sub_reg;
  wire [14:0]\of_MSR_i_reg[17] ;
  wire [4:0]\of_MSR_i_reg[22] ;
  wire [3:0]\of_MSR_i_reg[22]_0 ;
  wire [1:0]\of_MSR_i_reg[25] ;
  wire [1:0]\of_MSR_i_reg[25]_0 ;
  wire [1:0]of_op1_sel;
  wire [0:30]of_op2;
  wire [0:2]of_op2_sel;
  wire [0:30]of_op3;
  wire [0:2]of_op3_sel;
  wire of_piperun;
  wire out;
  wire [14:2]p_31_out;
  wire read_register_MSR_1;
  wire sync_reset;
  wire \trace_new_reg_value_i_reg[15] ;
  wire \trace_new_reg_value_i_reg[16] ;
  wire \trace_new_reg_value_i_reg[17] ;
  wire \trace_new_reg_value_i_reg[18] ;
  wire \trace_new_reg_value_i_reg[19] ;
  wire \trace_new_reg_value_i_reg[20] ;
  wire \trace_new_reg_value_i_reg[21] ;
  wire \trace_new_reg_value_i_reg[22] ;
  wire \trace_new_reg_value_i_reg[23] ;
  wire \trace_new_reg_value_i_reg[24] ;
  wire \trace_new_reg_value_i_reg[25] ;
  wire \trace_new_reg_value_i_reg[26] ;
  wire \trace_new_reg_value_i_reg[27] ;
  wire \trace_new_reg_value_i_reg[28] ;
  wire \trace_new_reg_value_i_reg[29] ;
  wire \trace_new_reg_value_i_reg[30] ;
  wire \trace_new_reg_value_i_reg[31] ;
  wire [10:0]wb_MSR_i;
  wire [31:0]\wb_PC_i_reg[0] ;
  wire [31:0]\wb_PC_i_reg[0]_0 ;
  wire [0:0]\wb_PC_i_reg[31] ;
  wire wb_byte_access;
  wire [15:0]wb_databus_read_data;
  wire wb_div_zero_overflow;
  wire [1:0]wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;
  wire [0:31]wb_exception_return_addr;
  wire wb_exception_taken;
  wire [0:31]wb_fwd;
  wire wb_gpr_wr;
  wire wb_gpr_wr_dbg;
  wire wb_m3_sel_res0;
  wire [3:0]wb_msr;
  wire wb_msr_clear_bip;

  assign lopt = lopt_5;
  assign lopt_6 = lopt_1;
  assign lopt_7 = lopt_2;
  microblaze_microblaze_0_0_ALU ALU_I1
       (.D(EX_Enable_Sext_Shift_reg[6:2]),
        .DI_0(DI_0),
        .EX_Enable_ALU(EX_Enable_ALU),
        .I0(\Using_FPGA.ALL_Bits[0].ALU_Bit_I1/I0 ),
        .I2(\Using_FPGA.ALL_Bits[0].ALU_Bit_I1/I2 ),
        .LO(LO),
        .Q({Q[15],ex_op2[1],ex_op2[2],ex_op2[3],ex_op2[4],ex_op2[5],ex_op2[6],ex_op2[7],ex_op2[8],ex_op2[9],ex_op2[10],ex_op2[11],ex_op2[12],ex_op2[13],ex_op2[14],ex_op2[15],ex_op2[16],Q[14:0]}),
        .S_1(S_1),
        .\Using_FPGA.Native (\EX_Op1_reg[0] ),
        .ex_alu_result(ex_alu_result),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_databus_addr(ex_databus_addr),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_fwd({ex_fwd[19],ex_fwd[22],ex_fwd[23]}),
        .ex_sel_alu_reg(ALU_I1_n_38),
        .ex_sel_alu_reg_0(ALU_I1_n_39),
        .ex_sel_alu_res(ex_sel_alu_res),
        .ex_unsigned_op(ex_unsigned_op),
        .ex_use_carry(ex_use_carry),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .\m0_Ex_Result_i_reg[16] (Operand_Select_I1_n_176),
        .\m0_Ex_Result_i_reg[17] (Operand_Select_I1_n_178),
        .\m0_Ex_Result_i_reg[18] (Operand_Select_I1_n_175),
        .\m0_Ex_Result_i_reg[19] (Operand_Select_I1_n_174),
        .\m0_Ex_Result_i_reg[20] (Operand_Select_I1_n_173),
        .\m0_Ex_Result_i_reg[21] (Operand_Select_I1_n_172),
        .\m0_Ex_Result_i_reg[22] (Operand_Select_I1_n_171),
        .\m0_Ex_Result_i_reg[23] (Operand_Select_I1_n_170),
        .\m0_addr_3lsb_reg[2] (Data_Flow_Logic_I1_n_0),
        .\m0_databus_addr_i_reg[9] (\m0_databus_addr_i_reg[9] ));
  microblaze_microblaze_0_0_Barrel_Shifter_gti Barrel_Shifter_I
       (.Clk(Clk),
        .D({Operand_Select_I1_n_179,\Use_HW_BS.mem_mux3_reg[1] [27:2],Operand_Select_I1_n_180,\Use_HW_BS.mem_mux3_reg[1] [1:0],Operand_Select_I1_n_181,Operand_Select_I1_n_182}),
        .Q(Q[4:3]),
        .\Use_HW_BS.Using_BitField.mem_Rd_reg[0]_0 ({ex_op3[0],ex_op3[1],ex_op3[2],ex_op3[3],ex_op3[4],ex_op3[5],ex_op3[6],ex_op3[7],ex_op3[8],ex_op3[9],ex_op3[10],ex_op3[11],ex_op3[12],ex_op3[13],ex_op3[14],ex_op3[15],ex_op3[16],ex_op3[17],ex_op3[18],ex_op3[19],ex_op3[20],ex_op3[21],ex_op3[22],ex_op3[23],ex_op3[24],ex_op3[25],ex_op3[26],ex_op3[27],ex_op3[28],ex_op3[29],ex_op3[30],ex_op3[31]}),
        .\Use_HW_BS.Using_BitField.mem_mask0_reg[0]_0 ({\Use_HW_BS.Using_BitField.mem_mask0_reg[0] [18],Operand_Select_I1_n_99,Operand_Select_I1_n_100,Operand_Select_I1_n_101,\Use_HW_BS.Using_BitField.mem_mask0_reg[0] [17:14],Operand_Select_I1_n_102,\Use_HW_BS.Using_BitField.mem_mask0_reg[0] [13],Operand_Select_I1_n_103,\Use_HW_BS.Using_BitField.mem_mask0_reg[0] [12:7],p_31_out[14],Operand_Select_I1_n_105,p_31_out[12],\Use_HW_BS.Using_BitField.mem_mask0_reg[0] [6:3],p_31_out[7:4],\Use_HW_BS.Using_BitField.mem_mask0_reg[0] [2],p_31_out[2],\Use_HW_BS.Using_BitField.mem_mask0_reg[0] [1:0]}),
        .\Use_HW_BS.Using_BitField.mem_mask0_reg[31]_0 (\Using_FPGA.DSP48E1_I1 ),
        .\Use_HW_BS.Using_BitField.mem_mask1_reg[0]_0 ({Operand_Select_I1_n_68,Operand_Select_I1_n_69,Operand_Select_I1_n_70,Operand_Select_I1_n_71,Operand_Select_I1_n_72,Operand_Select_I1_n_73,Operand_Select_I1_n_74,Operand_Select_I1_n_75,Operand_Select_I1_n_76,Operand_Select_I1_n_77,Operand_Select_I1_n_78,Operand_Select_I1_n_79,Operand_Select_I1_n_80,Operand_Select_I1_n_81,Operand_Select_I1_n_82,Operand_Select_I1_n_83,Operand_Select_I1_n_84,Operand_Select_I1_n_85,Operand_Select_I1_n_86,Operand_Select_I1_n_87,Operand_Select_I1_n_88,Operand_Select_I1_n_89,Operand_Select_I1_n_90,Operand_Select_I1_n_91,Operand_Select_I1_n_92,Operand_Select_I1_n_93,Operand_Select_I1_n_94,Operand_Select_I1_n_95,Operand_Select_I1_n_96,Operand_Select_I1_n_97,Operand_Select_I1_n_98}),
        .ex_left_shift_i(ex_left_shift_i),
        .ex_void_bit(ex_void_bit),
        .m0_barrel_result(m0_barrel_result),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_Byte_Doublet_Handle_ff Byte_Doublet_Handle_I1
       (.Clk(Clk),
        .\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 (\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0] ),
        .\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_1 (\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 ),
        .Q({ex_op3[0],ex_op3[1],ex_op3[2],ex_op3[3],ex_op3[4],ex_op3[5],ex_op3[6],ex_op3[7],ex_op3[8],ex_op3[9],ex_op3[10],ex_op3[11],ex_op3[12],ex_op3[13],ex_op3[14],ex_op3[15],ex_op3[16],ex_op3[17],ex_op3[18],ex_op3[19],ex_op3[20],ex_op3[21],ex_op3[22],ex_op3[23],ex_op3[24],ex_op3[25],ex_op3[26],ex_op3[27],ex_op3[28],ex_op3[29],ex_op3[30],ex_op3[31]}),
        .WB_Byte_Access_reg(WB_Byte_Access_reg),
        .\WB_DataBus_Byte_Enable_reg[0]_0 (\WB_DataBus_Byte_Enable_reg[0] ),
        .\WB_DataBus_Write_Data_reg[0]_0 (\WB_DataBus_Write_Data_reg[0] ),
        .ex_alu_result(ex_alu_result),
        .\m0_op3_reg[31]_0 (\Using_FPGA.DSP48E1_I1 ),
        .m0_piperun(m0_piperun),
        .m1_byte_access(m1_byte_access),
        .m1_doublet_access(m1_doublet_access),
        .\m1_op3_reg[24]_0 (\m1_op3_reg[24] ),
        .\m1_op3_reg[8]_0 (\m1_op3_reg[8] ),
        .m1_piperun(m1_piperun),
        .\m1_unaligned_addr_3lsb_reg[1]_0 (m1_unaligned_addr_3lsb[1]),
        .\m1_unaligned_addr_3lsb_reg[2]_0 (m1_unaligned_addr_3lsb[0]),
        .m2_piperun(m2_piperun),
        .\m3_databus_write_data_i_reg[0]_0 (\m3_databus_write_data_i_reg[0] ),
        .m3_piperun(m3_piperun),
        .sync_reset(sync_reset),
        .wb_byte_access(wb_byte_access));
  microblaze_microblaze_0_0_Data_Flow_Logic_ff Data_Flow_Logic_I1
       (.Clk(Clk),
        .D({D[31:7],D[5:4],D[0]}),
        .\EX_Branch_CMP_Op1_reg[28] (\EX_Branch_CMP_Op1_reg[28] ),
        .\EX_Branch_CMP_Op1_reg[28]_0 (\EX_Branch_CMP_Op1_reg[28]_0 ),
        .EX_CarryIn(EX_CarryIn),
        .\EX_Op2_reg[0] (\EX_Op2_reg[0] ),
        .\EX_Op2_reg[10] (\EX_Op2_reg[10] ),
        .\EX_Op2_reg[11] (\EX_Op2_reg[11] ),
        .\EX_Op2_reg[12] (\EX_Op2_reg[12] ),
        .\EX_Op2_reg[13] (\EX_Op2_reg[13] ),
        .\EX_Op2_reg[14] (\EX_Op2_reg[14] ),
        .\EX_Op2_reg[15] (\EX_Op2_reg[15] ),
        .\EX_Op2_reg[16] (\EX_Op2_reg[16] ),
        .\EX_Op2_reg[17] (\EX_Op2_reg[17] ),
        .\EX_Op2_reg[18] (\EX_Op2_reg[18] ),
        .\EX_Op2_reg[19] (\EX_Op2_reg[19] ),
        .\EX_Op2_reg[1] (\EX_Op2_reg[1] ),
        .\EX_Op2_reg[1]_0 (\EX_Op2_reg[1]_0 ),
        .\EX_Op2_reg[1]_1 (\EX_Op2_reg[1]_1 ),
        .\EX_Op2_reg[20] (\EX_Op2_reg[20] ),
        .\EX_Op2_reg[21] (\EX_Op2_reg[21] ),
        .\EX_Op2_reg[22] (\EX_Op2_reg[22] ),
        .\EX_Op2_reg[23] (\EX_Op2_reg[23] ),
        .\EX_Op2_reg[24] (\EX_Op2_reg[24] ),
        .\EX_Op2_reg[25] (\EX_Op2_reg[25]_2 ),
        .\EX_Op2_reg[26] (\EX_Op2_reg[26] ),
        .\EX_Op2_reg[27] (\EX_Op2_reg[27] ),
        .\EX_Op2_reg[28] (\EX_Op2_reg[28] ),
        .\EX_Op2_reg[29] (\EX_Op2_reg[29]_0 ),
        .\EX_Op2_reg[2] (\EX_Op2_reg[2] ),
        .\EX_Op2_reg[30] (\EX_Op2_reg[30]_0 ),
        .\EX_Op2_reg[3] (\EX_Op2_reg[3] ),
        .\EX_Op2_reg[4] (\EX_Op2_reg[4] ),
        .\EX_Op2_reg[5] (\EX_Op2_reg[5] ),
        .\EX_Op2_reg[6] (\EX_Op2_reg[6] ),
        .\EX_Op2_reg[7] (\EX_Op2_reg[7] ),
        .\EX_Op2_reg[8] (\EX_Op2_reg[8] ),
        .\EX_Op2_reg[9] (\EX_Op2_reg[9] ),
        .\EX_Op3[29]_i_2_0 (\EX_Op3[29]_i_2 ),
        .\EX_Op3[29]_i_2_1 (\EX_Op3[29]_i_2_0 ),
        .\EX_Op3_reg[29] (EX_CLZ_Instr_reg),
        .\EX_Op3_reg[29]_0 (\EX_Op3_reg[29] ),
        .\EX_Op3_reg[30] (\EX_Op3_reg[30] ),
        .\EX_Op3_reg[30]_0 (\EX_Op3_reg[30]_0 ),
        .\EX_Op3_reg[30]_1 (\EX_Op3_reg[30]_1 ),
        .GPR_Op1({gpr_op1[0],gpr_op1[1],gpr_op1[2],gpr_op1[3],gpr_op1[4],gpr_op1[5],gpr_op1[6],gpr_op1[7],gpr_op1[8],gpr_op1[9],gpr_op1[10],gpr_op1[11],gpr_op1[12],gpr_op1[13],gpr_op1[14],gpr_op1[15],gpr_op1[16],gpr_op1[17],gpr_op1[18],gpr_op1[19],gpr_op1[20],gpr_op1[21],gpr_op1[22],gpr_op1[23],gpr_op1[24],gpr_op1[25],gpr_op1[26],gpr_op1[27],gpr_op1[28]}),
        .GPR_Op3({gpr_op3[0],gpr_op3[1],gpr_op3[2],gpr_op3[3],gpr_op3[4],gpr_op3[5],gpr_op3[6],gpr_op3[7],gpr_op3[8],gpr_op3[9],gpr_op3[10],gpr_op3[11],gpr_op3[12],gpr_op3[13],gpr_op3[14],gpr_op3[15],gpr_op3[16],gpr_op3[17],gpr_op3[18],gpr_op3[19],gpr_op3[20],gpr_op3[21],gpr_op3[22],gpr_op3[23],gpr_op3[24],gpr_op3[25],gpr_op3[26],gpr_op3[27],gpr_op3[28],gpr_op3[29]}),
        .M1_Sel_Mul_Res_reg(M1_Sel_Mul_Res_reg),
        .M1_Sel_Mul_Res_reg_0(M1_Sel_Mul_Res_reg_0),
        .M1_Sel_Mul_Res_reg_1(M1_Sel_Mul_Res_reg_1),
        .M1_Sel_Mul_Res_reg_2(M1_Sel_Mul_Res_reg_2),
        .M1_Sel_Mul_Res_reg_3(M1_Sel_Mul_Res_reg_3),
        .M1_Sel_Mul_Res_reg_4(M1_Sel_Mul_Res_reg_4),
        .M1_Sel_Mul_Res_reg_5(M1_Sel_Mul_Res_reg_5),
        .Q({m3_div_result[0],m3_div_result[1],m3_div_result[2],m3_div_result[3],m3_div_result[4],m3_div_result[5],m3_div_result[6],m3_div_result[7],m3_div_result[8],m3_div_result[9],m3_div_result[10],m3_div_result[11],m3_div_result[12],m3_div_result[13],m3_div_result[14],m3_div_result[15],m3_div_result[16],m3_div_result[17],m3_div_result[18],m3_div_result[19],m3_div_result[20],m3_div_result[21],m3_div_result[22],m3_div_result[23],m3_div_result[24],m3_div_result[25],m3_div_result[26],m3_div_result[27],m3_div_result[28],m3_div_result[29],m3_div_result[30],m3_div_result[31]}),
        .\Using_FPGA.Native (Data_Flow_Logic_I1_n_0),
        .WB_Fwd(wb_fwd),
        .\data_rd_reg_reg[0] ({\wb_PC_i_reg[0] [31:7],\wb_PC_i_reg[0] [5:4],\wb_PC_i_reg[0] [0]}),
        .\data_rd_reg_reg[31] (\data_rd_reg_reg[30] ),
        .lopt(\^lopt ),
        .lopt_1(DI_0),
        .lopt_2(ex_use_carry),
        .lopt_3(\^lopt_1 ),
        .lopt_4(\^lopt_2 ),
        .lopt_5(lopt_3),
        .lopt_6(lopt_4),
        .\m0_Ex_Result_i_reg[0]_0 (\m0_Ex_Result_i_reg[0] ),
        .\m0_Ex_Result_i_reg[0]_1 ({\m0_Ex_Result_i_reg[0]_0 [16:1],EX_Enable_Sext_Shift_reg[6:4],ex_fwd[19],EX_Enable_Sext_Shift_reg[3:2],ex_fwd[22],ex_fwd[23],ex_fwd[24],ex_fwd[25],ex_fwd[26],ex_fwd[27],ex_fwd[28],EX_Enable_Sext_Shift_reg[1],\m0_Ex_Result_i_reg[0]_0 [0],EX_Enable_Sext_Shift_reg[0]}),
        .\m0_Ex_Result_i_reg[10]_0 (\m0_Ex_Result_i_reg[10] ),
        .\m0_Ex_Result_i_reg[11]_0 (\m0_Ex_Result_i_reg[11] ),
        .\m0_Ex_Result_i_reg[12]_0 (\m0_Ex_Result_i_reg[12] ),
        .\m0_Ex_Result_i_reg[13]_0 (\m0_Ex_Result_i_reg[13] ),
        .\m0_Ex_Result_i_reg[14]_0 (\m0_Ex_Result_i_reg[14] ),
        .\m0_Ex_Result_i_reg[15]_0 (\m0_Ex_Result_i_reg[15] ),
        .\m0_Ex_Result_i_reg[1]_0 (\m0_Ex_Result_i_reg[1] ),
        .\m0_Ex_Result_i_reg[29]_0 (\m0_Ex_Result_i_reg[29] ),
        .\m0_Ex_Result_i_reg[2]_0 (\m0_Ex_Result_i_reg[2] ),
        .\m0_Ex_Result_i_reg[30]_0 (\m0_Ex_Result_i_reg[30] ),
        .\m0_Ex_Result_i_reg[31]_0 (\m0_Ex_Result_i_reg[31] ),
        .\m0_Ex_Result_i_reg[31]_1 (\Using_FPGA.DSP48E1_I1 ),
        .\m0_Ex_Result_i_reg[3]_0 (\m0_Ex_Result_i_reg[3] ),
        .\m0_Ex_Result_i_reg[4]_0 (\m0_Ex_Result_i_reg[4] ),
        .\m0_Ex_Result_i_reg[5]_0 (\m0_Ex_Result_i_reg[5] ),
        .\m0_Ex_Result_i_reg[6]_0 (\m0_Ex_Result_i_reg[6] ),
        .\m0_Ex_Result_i_reg[7]_0 (\m0_Ex_Result_i_reg[7] ),
        .\m0_Ex_Result_i_reg[8]_0 (\m0_Ex_Result_i_reg[8] ),
        .\m0_Ex_Result_i_reg[9]_0 (\m0_Ex_Result_i_reg[9] ),
        .m0_barrel_result(m0_barrel_result),
        .m0_ex_sel_res_reg_0(m0_ex_sel_res),
        .m0_ex_sel_res_reg_1(m0_ex_sel_res_reg),
        .m0_piperun(m0_piperun),
        .m0_sel_barrel_res(m0_sel_barrel_res),
        .\m1_M0_Result_i_reg[0]_0 (\m1_M0_Result_i_reg[0] ),
        .\m1_M0_Result_i_reg[10]_0 (\m1_M0_Result_i_reg[10] ),
        .\m1_M0_Result_i_reg[11]_0 (\m1_M0_Result_i_reg[11] ),
        .\m1_M0_Result_i_reg[12]_0 (\m1_M0_Result_i_reg[12] ),
        .\m1_M0_Result_i_reg[13]_0 (\m1_M0_Result_i_reg[13] ),
        .\m1_M0_Result_i_reg[14]_0 (\m1_M0_Result_i_reg[14] ),
        .\m1_M0_Result_i_reg[15]_0 (\m1_M0_Result_i_reg[15] ),
        .\m1_M0_Result_i_reg[16]_0 (\m1_M0_Result_i_reg[16] ),
        .\m1_M0_Result_i_reg[1]_0 (\m1_M0_Result_i_reg[1] ),
        .\m1_M0_Result_i_reg[25]_0 (\m1_M0_Result_i_reg[25] ),
        .\m1_M0_Result_i_reg[29]_0 (\m1_M0_Result_i_reg[29] ),
        .\m1_M0_Result_i_reg[2]_0 (\m1_M0_Result_i_reg[2] ),
        .\m1_M0_Result_i_reg[30]_0 (\m1_M0_Result_i_reg[30] ),
        .\m1_M0_Result_i_reg[31]_0 (\m1_M0_Result_i_reg[31] ),
        .\m1_M0_Result_i_reg[3]_0 (\m1_M0_Result_i_reg[3] ),
        .\m1_M0_Result_i_reg[4]_0 (\m1_M0_Result_i_reg[4] ),
        .\m1_M0_Result_i_reg[5]_0 (\m1_M0_Result_i_reg[5] ),
        .\m1_M0_Result_i_reg[6]_0 (\m1_M0_Result_i_reg[6] ),
        .\m1_M0_Result_i_reg[7]_0 (\m1_M0_Result_i_reg[7] ),
        .\m1_M0_Result_i_reg[8]_0 (\m1_M0_Result_i_reg[8] ),
        .\m1_M0_Result_i_reg[9]_0 (\m1_M0_Result_i_reg[9] ),
        .m1_m0_sel_res0(m1_m0_sel_res0),
        .m1_m0_sel_res_reg_0(m1_m0_sel_res),
        .m1_mul_result(m1_mul_result),
        .m1_piperun(m1_piperun),
        .m1_sel_mul_res(m1_sel_mul_res),
        .\m2_M1_Result_i_reg[29]_0 (\m2_M1_Result_i_reg[29] ),
        .\m2_M1_Result_i_reg[30]_0 (\m2_M1_Result_i_reg[30] ),
        .\m2_M1_Result_i_reg[31]_0 (\m2_M1_Result_i_reg[31] ),
        .m2_is_div_instr(m2_is_div_instr),
        .m2_m1_sel_res0(m2_m1_sel_res0),
        .m2_m1_sel_res_reg_0({of_op3[0],of_op3[1],of_op3[2],of_op3[3],of_op3[4],of_op3[5],of_op3[6],of_op3[7],of_op3[8],of_op3[9],of_op3[10],of_op3[11],of_op3[12],of_op3[13],of_op3[14],of_op3[15],of_op3[16],of_op3[17],of_op3[18],of_op3[19],of_op3[20],of_op3[21],of_op3[22],of_op3[23],of_op3[24],of_op3[25],of_op3[26],of_op3[27],of_op3[28],of_op3[29],of_op3[30]}),
        .m2_m1_sel_res_reg_1(m2_m1_sel_res_reg),
        .m2_m1_sel_res_reg_2({of_op2[0],of_op2[1],of_op2[2],of_op2[3],of_op2[4],of_op2[5],of_op2[6],of_op2[7],of_op2[8],of_op2[9],of_op2[10],of_op2[11],of_op2[12],of_op2[13],of_op2[14],of_op2[15],of_op2[16],of_op2[17],of_op2[18],of_op2[19],of_op2[20],of_op2[21],of_op2[22],of_op2[23],of_op2[24],of_op2[25],of_op2[26],of_op2[27],of_op2[28],of_op2[29],of_op2[30]}),
        .m2_m1_sel_res_reg_3(m2_m1_sel_res_reg_0),
        .m2_m1_sel_res_reg_4(m2_m1_sel_res_reg_1),
        .m2_m1_sel_res_reg_5(m2_m1_sel_res_reg_2),
        .m2_piperun(m2_piperun),
        .m3_m2_sel_res_reg_0(m3_m2_sel_res),
        .m3_piperun(m3_piperun),
        .m3_sel_div_res(m3_sel_div_res),
        .of_op1_sel(of_op1_sel),
        .of_op2_sel(of_op2_sel),
        .of_op3_sel(of_op3_sel),
        .read_register_MSR_1(read_register_MSR_1),
        .sync_reset(sync_reset),
        .\trace_new_reg_value_i_reg[0] ({wb_exception_return_addr[0],wb_exception_return_addr[1],wb_exception_return_addr[2],wb_exception_return_addr[3],wb_exception_return_addr[4],wb_exception_return_addr[5],wb_exception_return_addr[6],wb_exception_return_addr[7],wb_exception_return_addr[8],wb_exception_return_addr[9],wb_exception_return_addr[10],wb_exception_return_addr[11],wb_exception_return_addr[12],wb_exception_return_addr[13],wb_exception_return_addr[14],wb_exception_return_addr[15],wb_exception_return_addr[16],wb_exception_return_addr[17],wb_exception_return_addr[18],wb_exception_return_addr[19],wb_exception_return_addr[20],wb_exception_return_addr[21],wb_exception_return_addr[22],wb_exception_return_addr[23],wb_exception_return_addr[24],wb_exception_return_addr[25],wb_exception_return_addr[26],wb_exception_return_addr[27],wb_exception_return_addr[28],wb_exception_return_addr[29],wb_exception_return_addr[30],wb_exception_return_addr[31]}),
        .\trace_new_reg_value_i_reg[15] (\trace_new_reg_value_i_reg[15] ),
        .\trace_new_reg_value_i_reg[16] (\trace_new_reg_value_i_reg[16] ),
        .\trace_new_reg_value_i_reg[17] (\trace_new_reg_value_i_reg[17] ),
        .\trace_new_reg_value_i_reg[18] (\trace_new_reg_value_i_reg[18] ),
        .\trace_new_reg_value_i_reg[19] (\trace_new_reg_value_i_reg[19] ),
        .\trace_new_reg_value_i_reg[20] (\trace_new_reg_value_i_reg[20] ),
        .\trace_new_reg_value_i_reg[21] (\trace_new_reg_value_i_reg[21] ),
        .\trace_new_reg_value_i_reg[22] (\trace_new_reg_value_i_reg[22] ),
        .\trace_new_reg_value_i_reg[23] (\trace_new_reg_value_i_reg[23] ),
        .\trace_new_reg_value_i_reg[24] (\trace_new_reg_value_i_reg[24] ),
        .\trace_new_reg_value_i_reg[25] (\trace_new_reg_value_i_reg[25] ),
        .\trace_new_reg_value_i_reg[26] (\trace_new_reg_value_i_reg[26] ),
        .\trace_new_reg_value_i_reg[27] (\trace_new_reg_value_i_reg[27] ),
        .\trace_new_reg_value_i_reg[28] (\trace_new_reg_value_i_reg[28] ),
        .\trace_new_reg_value_i_reg[29] (\trace_new_reg_value_i_reg[29] ),
        .\trace_new_reg_value_i_reg[30] (\trace_new_reg_value_i_reg[30] ),
        .\trace_new_reg_value_i_reg[31] (\trace_new_reg_value_i_reg[31] ),
        .wb_byte_access(wb_byte_access),
        .wb_databus_read_data(wb_databus_read_data),
        .wb_exception_taken(wb_exception_taken),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .wb_m3_sel_res0(wb_m3_sel_res0));
  microblaze_microblaze_0_0_MSR_Reg_ff MSR_I1
       (.Clk(Clk),
        .D({D[6],D[3:1]}),
        .D_2(D_2),
        .EX_CarryIn(EX_CarryIn),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_10 (wb_MSR_i[10]),
        .\Using_FPGA.Native_11 (wb_MSR_i[9]),
        .\Using_FPGA.Native_12 (wb_MSR_i[8]),
        .\Using_FPGA.Native_13 (wb_MSR_i[7]),
        .\Using_FPGA.Native_14 (wb_MSR_i[6]),
        .\Using_FPGA.Native_15 (wb_MSR_i[5]),
        .\Using_FPGA.Native_16 (wb_MSR_i[4]),
        .\Using_FPGA.Native_17 (wb_MSR_i[3]),
        .\Using_FPGA.Native_18 (wb_MSR_i[2]),
        .\Using_FPGA.Native_19 (wb_MSR_i[1]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_20 (wb_MSR_i[0]),
        .\Using_FPGA.Native_21 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_22 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_23 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_24 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_25 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_26 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_27 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_28 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_29 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_30 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_31 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_32 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_33 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_34 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_35 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_36 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_37 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_38 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_39 (\Using_FPGA.Native_27 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_40 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_41 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_42 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_43 (\Using_FPGA.Native_31 ),
        .\Using_FPGA.Native_44 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_45 (WB_Div_Zero_Overflow_reg),
        .\Using_FPGA.Native_46 (div_busy_reg),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_8 (MSR_I1_n_21),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_8 ),
        .WB_Fwd({wb_fwd[25],wb_fwd[28],wb_fwd[29],wb_fwd[30]}),
        .\data_rd_reg_reg[25] ({\wb_PC_i_reg[0] [6],\wb_PC_i_reg[0] [3:1]}),
        .\data_rd_reg_reg[30] (\data_rd_reg_reg[30] ),
        .ex_MSR_i(ex_MSR_i),
        .m0_piperun(m0_piperun),
        .m1_piperun(m1_piperun),
        .m2_piperun(m2_piperun),
        .m3_msr(m3_msr),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[17]_0 (\of_MSR_i_reg[17] ),
        .\of_MSR_i_reg[22]_0 (\of_MSR_i_reg[22] ),
        .\of_MSR_i_reg[22]_1 (\of_MSR_i_reg[22]_0 ),
        .\of_MSR_i_reg[25]_0 (\of_MSR_i_reg[25] ),
        .\of_MSR_i_reg[25]_1 (\of_MSR_i_reg[25]_0 ),
        .of_piperun(of_piperun),
        .read_register_MSR_1(read_register_MSR_1),
        .sync_reset(sync_reset),
        .wb_div_zero_overflow(wb_div_zero_overflow),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .wb_msr(wb_msr),
        .wb_msr_clear_bip(wb_msr_clear_bip));
  microblaze_microblaze_0_0_mul_unit_ff MUL_Unit_I1
       (.Clk(Clk),
        .Q({Q[15],ex_op2[1],ex_op2[2],ex_op2[3],ex_op2[4],ex_op2[5],ex_op2[6],ex_op2[7],ex_op2[8],ex_op2[9],ex_op2[10],ex_op2[11],ex_op2[12],ex_op2[13],ex_op2[14],ex_op2[15],ex_op2[16],Q[14:0]}),
        .\Using_FPGA.DSP48E1_I1 (\Using_FPGA.DSP48E1_I1 ),
        .\Using_FPGA.DSP48E1_I1_0 (\EX_Op1_reg[0] ),
        .m0_piperun(m0_piperun),
        .m1_mul_result(m1_mul_result),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_Operand_Select_ff Operand_Select_I1
       (.CI(D_Carry),
        .Clk(Clk),
        .D({Operand_Select_I1_n_179,Operand_Select_I1_n_180,Operand_Select_I1_n_181,Operand_Select_I1_n_182}),
        .EX_Bit_Extract_reg({Operand_Select_I1_n_68,Operand_Select_I1_n_69,Operand_Select_I1_n_70,Operand_Select_I1_n_71,Operand_Select_I1_n_72,Operand_Select_I1_n_73,Operand_Select_I1_n_74,Operand_Select_I1_n_75,Operand_Select_I1_n_76,Operand_Select_I1_n_77,Operand_Select_I1_n_78,Operand_Select_I1_n_79,Operand_Select_I1_n_80,Operand_Select_I1_n_81,Operand_Select_I1_n_82,Operand_Select_I1_n_83,Operand_Select_I1_n_84,Operand_Select_I1_n_85,Operand_Select_I1_n_86,Operand_Select_I1_n_87,Operand_Select_I1_n_88,Operand_Select_I1_n_89,Operand_Select_I1_n_90,Operand_Select_I1_n_91,Operand_Select_I1_n_92,Operand_Select_I1_n_93,Operand_Select_I1_n_94,Operand_Select_I1_n_95,Operand_Select_I1_n_96,Operand_Select_I1_n_97,Operand_Select_I1_n_98}),
        .EX_Bit_Extract_reg_0({Operand_Select_I1_n_99,Operand_Select_I1_n_100,Operand_Select_I1_n_101,Operand_Select_I1_n_102,Operand_Select_I1_n_103,p_31_out[14],Operand_Select_I1_n_105,p_31_out[12],p_31_out[7:4],p_31_out[2]}),
        .\EX_Branch_CMP_Op1_reg[0]_0 ({\EX_Branch_CMP_Op1_reg[0] ,ex_branch_cmp_op1[1],ex_branch_cmp_op1[2],ex_branch_cmp_op1[3],ex_branch_cmp_op1[4],ex_branch_cmp_op1[5],ex_branch_cmp_op1[6],ex_branch_cmp_op1[7],ex_branch_cmp_op1[8],ex_branch_cmp_op1[9],ex_branch_cmp_op1[10],ex_branch_cmp_op1[11],ex_branch_cmp_op1[12],ex_branch_cmp_op1[13],ex_branch_cmp_op1[14],ex_branch_cmp_op1[15],ex_branch_cmp_op1[16],ex_branch_cmp_op1[17],ex_branch_cmp_op1[18],ex_branch_cmp_op1[19],ex_branch_cmp_op1[20],ex_branch_cmp_op1[21],ex_branch_cmp_op1[22],ex_branch_cmp_op1[23],ex_branch_cmp_op1[24],ex_branch_cmp_op1[25],ex_branch_cmp_op1[26],ex_branch_cmp_op1[27],ex_branch_cmp_op1[28],ex_branch_cmp_op1[29]}),
        .\EX_Branch_CMP_Op1_reg[0]_1 ({m2_m1_sel_res_reg_1,\EX_Branch_CMP_Op1_reg[29] }),
        .\EX_Branch_CMP_Op1_reg[30]_0 (Operand_Select_I1_n_186),
        .EX_CLZ_Instr_reg(EX_CLZ_Instr_reg),
        .EX_CLZ_Instr_reg_0(EX_CLZ_Instr_reg_0),
        .EX_Div_Unsigned_reg(\Using_FPGA.D_Handle[1].D_Sel_reg ),
        .\EX_Logic_Op_reg[0] (\EX_Logic_Op_reg[0] ),
        .\EX_Logic_Op_reg[1] (\EX_Logic_Op_reg[1] ),
        .\EX_Op1_reg[0]_0 (\EX_Op1_reg[0]_0 ),
        .\EX_Op1_reg[0]_1 (\EX_Op1_reg[0]_1 ),
        .\EX_Op1_reg[0]_2 (\EX_Op1_reg[0]_2 ),
        .\EX_Op1_reg[0]_3 (\EX_Op1_reg[0]_3 ),
        .\EX_Op1_reg[10]_0 (\EX_Op1_reg[10] ),
        .\EX_Op1_reg[10]_1 (\Using_FPGA.D_Handle[10].D_Sel_reg ),
        .\EX_Op1_reg[11]_0 (\Using_FPGA.D_Handle[11].D_Sel_reg ),
        .\EX_Op1_reg[12]_0 (\Using_FPGA.D_Handle[12].D_Sel_reg ),
        .\EX_Op1_reg[13]_0 (\Using_FPGA.D_Handle[13].D_Sel_reg ),
        .\EX_Op1_reg[14]_0 (\Using_FPGA.D_Handle[14].D_Sel_reg ),
        .\EX_Op1_reg[15]_0 (\Using_FPGA.D_Handle[15].D_Sel_reg ),
        .\EX_Op1_reg[16]_0 (\EX_Op1_reg[16] ),
        .\EX_Op1_reg[16]_1 (\Using_FPGA.D_Handle[16].D_Sel_reg ),
        .\EX_Op1_reg[16]_2 (Operand_Select_I1_n_176),
        .\EX_Op1_reg[17]_0 (\Using_FPGA.D_Handle[17].D_Sel_reg ),
        .\EX_Op1_reg[17]_1 (Operand_Select_I1_n_178),
        .\EX_Op1_reg[18]_0 (\Using_FPGA.D_Handle[18].D_Sel_reg ),
        .\EX_Op1_reg[18]_1 (Operand_Select_I1_n_175),
        .\EX_Op1_reg[19]_0 (\Using_FPGA.D_Handle[19].D_Sel_reg ),
        .\EX_Op1_reg[19]_1 (Operand_Select_I1_n_174),
        .\EX_Op1_reg[1]_0 (\EX_Op1_reg[1] ),
        .\EX_Op1_reg[20]_0 (\Using_FPGA.D_Handle[20].D_Sel_reg ),
        .\EX_Op1_reg[20]_1 (Operand_Select_I1_n_173),
        .\EX_Op1_reg[21]_0 (\Using_FPGA.D_Handle[21].D_Sel_reg ),
        .\EX_Op1_reg[21]_1 (Operand_Select_I1_n_172),
        .\EX_Op1_reg[22]_0 (\Using_FPGA.D_Handle[22].D_Sel_reg ),
        .\EX_Op1_reg[22]_1 (Operand_Select_I1_n_171),
        .\EX_Op1_reg[23]_0 (\Using_FPGA.D_Handle[23].D_Sel_reg ),
        .\EX_Op1_reg[23]_1 (Operand_Select_I1_n_170),
        .\EX_Op1_reg[24]_0 (\EX_Op1_reg[24] ),
        .\EX_Op1_reg[24]_1 (\EX_Op1_reg[24]_0 ),
        .\EX_Op1_reg[24]_2 (\Using_FPGA.D_Handle[24].D_Sel_reg ),
        .\EX_Op1_reg[24]_3 (\EX_Op1_reg[24]_1 ),
        .\EX_Op1_reg[25]_0 (\Using_FPGA.D_Handle[25].D_Sel_reg ),
        .\EX_Op1_reg[26]_0 (\Using_FPGA.D_Handle[26].D_Sel_reg ),
        .\EX_Op1_reg[27]_0 (\Using_FPGA.D_Handle[27].D_Sel_reg ),
        .\EX_Op1_reg[28]_0 (\Using_FPGA.D_Handle[28].D_Sel_reg ),
        .\EX_Op1_reg[29]_0 (\Using_FPGA.D_Handle[29].D_Sel_reg ),
        .\EX_Op1_reg[2]_0 (\Using_FPGA.D_Handle[2].D_Sel_reg ),
        .\EX_Op1_reg[30]_0 (S_0),
        .\EX_Op1_reg[3]_0 (\Using_FPGA.D_Handle[3].D_Sel_reg ),
        .\EX_Op1_reg[4]_0 (\Using_FPGA.D_Handle[4].D_Sel_reg ),
        .\EX_Op1_reg[5]_0 (\Using_FPGA.D_Handle[5].D_Sel_reg ),
        .\EX_Op1_reg[6]_0 (\Using_FPGA.D_Handle[6].D_Sel_reg ),
        .\EX_Op1_reg[7]_0 (\Using_FPGA.D_Handle[7].D_Sel_reg ),
        .\EX_Op1_reg[8]_0 (\EX_Op1_reg[8] ),
        .\EX_Op1_reg[8]_1 (\Using_FPGA.D_Handle[8].D_Sel_reg ),
        .\EX_Op1_reg[9]_0 (\EX_Op1_reg[9] ),
        .\EX_Op1_reg[9]_1 (\Using_FPGA.D_Handle[9].D_Sel_reg ),
        .\EX_Op2_reg[0]_0 ({Q[15],ex_op2[1],ex_op2[2],ex_op2[3],ex_op2[4],ex_op2[5],ex_op2[6],ex_op2[7],ex_op2[8],ex_op2[9],ex_op2[10],ex_op2[11],ex_op2[12],ex_op2[13],ex_op2[14],ex_op2[15],ex_op2[16],Q[14:0]}),
        .\EX_Op2_reg[0]_1 ({of_op2[0],of_op2[1],of_op2[2],of_op2[3],of_op2[4],of_op2[5],of_op2[6],of_op2[7],of_op2[8],of_op2[9],of_op2[10],of_op2[11],of_op2[12],of_op2[13],of_op2[14],of_op2[15],of_op2[16],of_op2[17],of_op2[18],of_op2[19],of_op2[20],of_op2[21],of_op2[22],of_op2[23],of_op2[24],of_op2[25],of_op2[26],of_op2[27],of_op2[28],of_op2[29],of_op2[30],\EX_Op2_reg[31] }),
        .\EX_Op2_reg[25]_0 (\EX_Op2_reg[25] ),
        .\EX_Op2_reg[25]_1 (\EX_Op2_reg[25]_0 ),
        .\EX_Op2_reg[25]_2 (\EX_Op2_reg[25]_1 ),
        .\EX_Op2_reg[29]_0 (\EX_Op2_reg[29] ),
        .\EX_Op2_reg[30]_0 (\EX_Op2_reg[30] ),
        .\EX_Op3_reg[0]_0 ({ex_op3[0],ex_op3[1],ex_op3[2],ex_op3[3],ex_op3[4],ex_op3[5],ex_op3[6],ex_op3[7],ex_op3[8],ex_op3[9],ex_op3[10],ex_op3[11],ex_op3[12],ex_op3[13],ex_op3[14],ex_op3[15],ex_op3[16],ex_op3[17],ex_op3[18],ex_op3[19],ex_op3[20],ex_op3[21],ex_op3[22],ex_op3[23],ex_op3[24],ex_op3[25],ex_op3[26],ex_op3[27],ex_op3[28],ex_op3[29],ex_op3[30],ex_op3[31]}),
        .\EX_Op3_reg[0]_1 ({of_op3[0],of_op3[1],of_op3[2],of_op3[3],of_op3[4],of_op3[5],of_op3[6],of_op3[7],of_op3[8],of_op3[9],of_op3[10],of_op3[11],of_op3[12],of_op3[13],of_op3[14],of_op3[15],of_op3[16],of_op3[17],of_op3[18],of_op3[19],of_op3[20],of_op3[21],of_op3[22],of_op3[23],of_op3[24],of_op3[25],of_op3[26],of_op3[27],of_op3[28],of_op3[29],of_op3[30],\EX_Op3_reg[31] }),
        .EX_Pattern_Cmp_Sel_reg(EX_Pattern_Cmp_Sel_reg),
        .EX_Pattern_Cmp_Sel_reg_0(EX_Pattern_Cmp_Sel_reg_0),
        .I0(\Using_FPGA.ALL_Bits[0].ALU_Bit_I1/I0 ),
        .I2(\Using_FPGA.ALL_Bits[0].ALU_Bit_I1/I2 ),
        .Q(\EX_Op1_reg[0] ),
        .S(\Using_FPGA.D_Handle[31].D_Sel_reg ),
        .\Use_HW_BS.Using_BitField.mem_mask0_reg[2] (\Use_HW_BS.Using_BitField.mem_mask0_reg[2] ),
        .\Use_HW_BS.Using_BitField.mem_mask1_reg[5] (\Use_HW_BS.Using_BitField.mem_mask1_reg[5] ),
        .\Use_HW_BS.mem_mux3_reg[0] (\Use_HW_BS.mem_mux3_reg[0] ),
        .\Use_HW_BS.mem_mux3_reg[0]_0 (\Use_HW_BS.mem_mux3_reg[0]_0 ),
        .\Use_HW_BS.mem_mux3_reg[0]_1 (\Use_HW_BS.mem_mux3_reg[0]_1 ),
        .\Use_HW_BS.mem_mux3_reg[27] (\Use_HW_BS.mem_mux3_reg[27] ),
        .\Use_HW_BS.mem_mux3_reg[30] (\Use_HW_BS.mem_mux3_reg[30] ),
        .\Use_HW_BS.mem_mux3_reg[30]_0 (\Use_HW_BS.mem_mux3_reg[30]_0 ),
        .\Using_FPGA.D_Handle[0].D_Sel_reg (\Using_FPGA.D_Handle[0].D_Sel_reg ),
        .\Using_FPGA.Native_i_2__8 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_i_2__8_0 (wb_exception_from_m3_reg_rep__0_0),
        .ex_alu_result(ex_alu_result[0]),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_arith_shift(ex_arith_shift),
        .ex_bit_extract(ex_bit_extract),
        .ex_bit_insert(ex_bit_insert),
        .ex_clz_instr(ex_clz_instr),
        .ex_cmp_op(ex_cmp_op),
        .ex_databus_addr({ex_databus_addr[5:4],ex_databus_addr[1:0]}),
        .ex_div_unsigned(ex_div_unsigned),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_left_shift_i(ex_left_shift_i),
        .ex_logic_op(ex_logic_op),
        .ex_msrclr(ex_msrclr),
        .ex_msrset(ex_msrset),
        .ex_pattern_cmp_sel(ex_pattern_cmp_sel),
        .ex_sel_alu_reg({ex_fwd[24],ex_fwd[25],ex_fwd[26],ex_fwd[27],ex_fwd[28],EX_Enable_Sext_Shift_reg[1:0]}),
        .ex_sel_alu_reg_0(ex_sel_alu_reg),
        .ex_sel_alu_res(ex_sel_alu_res),
        .ex_void_bit(ex_void_bit),
        .\imm_reg_reg[0]_0 (\imm_reg_reg[0] ),
        .\imm_reg_reg[0]_1 (\EX_Op3[1]_i_2 [15:0]),
        .\imm_reg_reg[15]_0 (\imm_reg_reg[15] ),
        .in0(Operand_Select_I1_n_177),
        .\m0_Ex_Result_i_reg[17] (\m0_Ex_Result_i_reg[17] ),
        .\m0_Ex_Result_i_reg[24] (\m0_Ex_Result_i_reg[24] ),
        .\m0_Ex_Result_i_reg[26] (ALU_I1_n_38),
        .\m0_Ex_Result_i_reg[26]_0 (\m0_Ex_Result_i_reg[26] ),
        .\m0_Ex_Result_i_reg[27] (ALU_I1_n_39),
        .\m0_Ex_Result_i_reg[27]_0 (\m0_Ex_Result_i_reg[27] ),
        .\m0_Ex_Result_i_reg[28] (\m0_Ex_Result_i_reg[28] ),
        .\m0_Ex_Result_i_reg[29] (\m0_Ex_Result_i_reg[29]_0 ),
        .\m0_Ex_Result_i_reg[30] (\m0_Ex_Result_i_reg[30]_0 ),
        .\m0_Ex_Result_i_reg[31] (\m0_Ex_Result_i_reg[31]_0 ),
        .m3_div_zero_overflow_ex_hold(m3_div_zero_overflow_ex_hold),
        .of_piperun(of_piperun),
        .out(I4),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_Register_File_gti Register_File_I1
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[1]_i_2 (\EX_Op3[1]_i_2 [25:11]),
        .GPR_Op1({gpr_op1,GPR_Op1[2],GPR_Op1[1],GPR_Op1[0]}),
        .GPR_Op2(GPR_Op2),
        .GPR_Op3({gpr_op3,GPR_Op3[1],GPR_Op3[0]}),
        .WB_Fwd(wb_fwd),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_Shift_Logic_Module_gti Shift_Logic_Module_I1
       (.\EX_Op1_reg[16] (out),
        .in0(in0),
        .\m0_Ex_Result_i_reg[0] (Operand_Select_I1_n_177),
        .out(I4));
  microblaze_microblaze_0_0_Div_Unit_ff \Using_Div_Unit.Div_Unit_I1 
       (.CI(D_Carry),
        .Clk(Clk),
        .DI(next_sub),
        .E(E),
        .EX_Op1_Zero(EX_Op1_Zero),
        .M3_Div_By_Zero_reg_0(M3_Div_By_Zero_reg),
        .M3_Div_By_Zero_reg_1(M3_Div_By_Zero_reg_0),
        .O(O),
        .Q({m3_div_result[0],m3_div_result[1],m3_div_result[2],m3_div_result[3],m3_div_result[4],m3_div_result[5],m3_div_result[6],m3_div_result[7],m3_div_result[8],m3_div_result[9],m3_div_result[10],m3_div_result[11],m3_div_result[12],m3_div_result[13],m3_div_result[14],m3_div_result[15],m3_div_result[16],m3_div_result[17],m3_div_result[18],m3_div_result[19],m3_div_result[20],m3_div_result[21],m3_div_result[22],m3_div_result[23],m3_div_result[24],m3_div_result[25],m3_div_result[26],m3_div_result[27],m3_div_result[28],m3_div_result[29],m3_div_result[30],m3_div_result[31]}),
        .\Q_reg[31]_0 ({Q[15],ex_op2[1],ex_op2[2],ex_op2[3],ex_op2[4],ex_op2[5],ex_op2[6],ex_op2[7],ex_op2[8],ex_op2[9],ex_op2[10],ex_op2[11],ex_op2[12],ex_op2[13],ex_op2[14],ex_op2[15],ex_op2[16],Q[14:0]}),
        .\R_reg[32]_0 (\R_reg[32] ),
        .S(\Using_FPGA.D_Handle[31].D_Sel_reg ),
        .SR(SR),
        .\Using_FPGA.D_Handle[0].D_Sel_reg (\Using_FPGA.D_Handle[0].D_Sel_reg ),
        .\Using_FPGA.D_reg[10]_0 (\Using_FPGA.D_Handle[10].D_Sel_reg ),
        .\Using_FPGA.D_reg[11]_0 (\Using_FPGA.D_Handle[11].D_Sel_reg ),
        .\Using_FPGA.D_reg[12]_0 (\Using_FPGA.D_Handle[12].D_Sel_reg ),
        .\Using_FPGA.D_reg[13]_0 (\Using_FPGA.D_Handle[13].D_Sel_reg ),
        .\Using_FPGA.D_reg[14]_0 (\Using_FPGA.D_Handle[14].D_Sel_reg ),
        .\Using_FPGA.D_reg[15]_0 (\Using_FPGA.D_Handle[15].D_Sel_reg ),
        .\Using_FPGA.D_reg[16]_0 (\Using_FPGA.D_Handle[16].D_Sel_reg ),
        .\Using_FPGA.D_reg[17]_0 (\Using_FPGA.D_Handle[17].D_Sel_reg ),
        .\Using_FPGA.D_reg[18]_0 (\Using_FPGA.D_Handle[18].D_Sel_reg ),
        .\Using_FPGA.D_reg[19]_0 (\Using_FPGA.D_Handle[19].D_Sel_reg ),
        .\Using_FPGA.D_reg[1]_0 (\Using_FPGA.D_Handle[1].D_Sel_reg ),
        .\Using_FPGA.D_reg[20]_0 (\Using_FPGA.D_Handle[20].D_Sel_reg ),
        .\Using_FPGA.D_reg[21]_0 (\Using_FPGA.D_Handle[21].D_Sel_reg ),
        .\Using_FPGA.D_reg[22]_0 (\Using_FPGA.D_Handle[22].D_Sel_reg ),
        .\Using_FPGA.D_reg[23]_0 (\Using_FPGA.D_Handle[23].D_Sel_reg ),
        .\Using_FPGA.D_reg[24]_0 (\Using_FPGA.D_Handle[24].D_Sel_reg ),
        .\Using_FPGA.D_reg[25]_0 (\Using_FPGA.D_Handle[25].D_Sel_reg ),
        .\Using_FPGA.D_reg[26]_0 (\Using_FPGA.D_Handle[26].D_Sel_reg ),
        .\Using_FPGA.D_reg[27]_0 (\Using_FPGA.D_Handle[27].D_Sel_reg ),
        .\Using_FPGA.D_reg[28]_0 (\Using_FPGA.D_Handle[28].D_Sel_reg ),
        .\Using_FPGA.D_reg[29]_0 (\Using_FPGA.D_Handle[29].D_Sel_reg ),
        .\Using_FPGA.D_reg[2]_0 (\Using_FPGA.D_Handle[2].D_Sel_reg ),
        .\Using_FPGA.D_reg[30]_0 (S_0),
        .\Using_FPGA.D_reg[3]_0 (\Using_FPGA.D_Handle[3].D_Sel_reg ),
        .\Using_FPGA.D_reg[4]_0 (\Using_FPGA.D_Handle[4].D_Sel_reg ),
        .\Using_FPGA.D_reg[5]_0 (\Using_FPGA.D_Handle[5].D_Sel_reg ),
        .\Using_FPGA.D_reg[6]_0 (\Using_FPGA.D_Handle[6].D_Sel_reg ),
        .\Using_FPGA.D_reg[7]_0 (\Using_FPGA.D_Handle[7].D_Sel_reg ),
        .\Using_FPGA.D_reg[8]_0 (\Using_FPGA.D_Handle[8].D_Sel_reg ),
        .\Using_FPGA.D_reg[9]_0 (\Using_FPGA.D_Handle[9].D_Sel_reg ),
        .\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_0 (MSR_I1_n_21),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg),
        .\cnt_shifts_reg[0]_0 (\cnt_shifts_reg[0] ),
        .div_iterations_early(div_iterations_early),
        .div_iterations_early_reg_0(div_iterations_early_reg),
        .ex_div_unsigned(ex_div_unsigned),
        .ex_start_div(ex_start_div),
        .floating_hold_div_by_zero__0(floating_hold_div_by_zero__0),
        .floating_hold_div_by_zero_reg_0(floating_hold_div_by_zero_reg),
        .floating_hold_div_overflow_reg_0(floating_hold_div_overflow_reg),
        .floating_hold_div_overflow_reg_1(floating_hold_div_overflow_reg_0),
        .last_cycle_reg_0(last_cycle),
        .m2_is_div_instr(m2_is_div_instr),
        .m2_piperun(m2_piperun),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow_i_reg_0(m3_div_overflow),
        .m3_div_overflow_i_reg_1(m3_div_overflow_i_reg),
        .m3_div_overflow_i_reg_2(m3_div_overflow_i_reg_0),
        .m3_div_overflow_i_reg_3(m3_div_overflow_i_reg_1),
        .m3_div_stall_i_reg_0(m3_div_stall),
        .m3_div_stall_i_reg_1(m3_div_stall_i_reg),
        .m3_div_stall_i_reg_2(m3_div_stall_i_reg_0),
        .m3_last_cycle_reg_0(m3_last_cycle_reg),
        .m3_last_cycle_reg_1(div_busy_reg),
        .m3_piperun(m3_piperun),
        .m3_sel_div_res(m3_sel_div_res),
        .make_result_neg(make_result_neg),
        .make_result_neg_reg_0(make_result_neg_reg),
        .negative_operands(negative_operands),
        .negative_operands_reg_0(negative_operands_reg),
        .negative_operands_reg_1(negative_operands_reg_0),
        .next_sub_reg_0(next_sub_reg),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0_0));
  microblaze_microblaze_0_0_Zero_Detect_gti Zero_Detect_I
       (.EX_Op1_CMP_Equal(EX_Op1_CMP_Equal),
        .EX_Op1_Zero(EX_Op1_Zero),
        .\Using_FPGA.Native ({\EX_Branch_CMP_Op1_reg[0] ,ex_branch_cmp_op1[1],ex_branch_cmp_op1[2],ex_branch_cmp_op1[3],ex_branch_cmp_op1[4],ex_branch_cmp_op1[5],ex_branch_cmp_op1[6],ex_branch_cmp_op1[7],ex_branch_cmp_op1[8],ex_branch_cmp_op1[9],ex_branch_cmp_op1[10],ex_branch_cmp_op1[11],ex_branch_cmp_op1[12],ex_branch_cmp_op1[13],ex_branch_cmp_op1[14],ex_branch_cmp_op1[15],ex_branch_cmp_op1[16],ex_branch_cmp_op1[17],ex_branch_cmp_op1[18],ex_branch_cmp_op1[19],ex_branch_cmp_op1[20],ex_branch_cmp_op1[21],ex_branch_cmp_op1[22],ex_branch_cmp_op1[23],ex_branch_cmp_op1[24],ex_branch_cmp_op1[25],ex_branch_cmp_op1[26],ex_branch_cmp_op1[27],ex_branch_cmp_op1[28],ex_branch_cmp_op1[29]}),
        .div_busy_reg(Operand_Select_I1_n_186),
        .div_busy_reg_0(div_iterations_early_reg),
        .div_busy_reg_1(div_busy_reg),
        .div_iterations_early(div_iterations_early),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .ex_start_div(ex_start_div),
        .lopt(lopt_5),
        .lopt_1(lopt_6),
        .lopt_2(lopt_7));
  microblaze_microblaze_0_0_exception_registers_ff exception_registers_I1
       (.Clk(Clk),
        .DI(DI),
        .Q({wb_exception_return_addr[0],wb_exception_return_addr[1],wb_exception_return_addr[2],wb_exception_return_addr[3],wb_exception_return_addr[4],wb_exception_return_addr[5],wb_exception_return_addr[6],wb_exception_return_addr[7],wb_exception_return_addr[8],wb_exception_return_addr[9],wb_exception_return_addr[10],wb_exception_return_addr[11],wb_exception_return_addr[12],wb_exception_return_addr[13],wb_exception_return_addr[14],wb_exception_return_addr[15],wb_exception_return_addr[16],wb_exception_return_addr[17],wb_exception_return_addr[18],wb_exception_return_addr[19],wb_exception_return_addr[20],wb_exception_return_addr[21],wb_exception_return_addr[22],wb_exception_return_addr[23],wb_exception_return_addr[24],wb_exception_return_addr[25],wb_exception_return_addr[26],wb_exception_return_addr[27],wb_exception_return_addr[28],wb_exception_return_addr[29],wb_exception_return_addr[30],wb_exception_return_addr[31]}),
        .S(S),
        .WB_Exception_Return_Addr0(WB_Exception_Return_Addr0),
        .\WB_Exception_Return_Addr_reg[0]_0 (\WB_Exception_Return_Addr_reg[0] ),
        .\WB_Exception_Return_Addr_reg[0]_1 (\WB_Exception_Return_Addr_reg[0]_0 ),
        .\WB_Exception_Return_Addr_reg[10]_0 (\WB_Exception_Return_Addr_reg[10] ),
        .\WB_Exception_Return_Addr_reg[14]_0 (\WB_Exception_Return_Addr_reg[14] ),
        .\WB_Exception_Return_Addr_reg[18]_0 (\WB_Exception_Return_Addr_reg[18] ),
        .\WB_Exception_Return_Addr_reg[22]_0 (\WB_Exception_Return_Addr_reg[22] ),
        .\WB_Exception_Return_Addr_reg[2]_0 (\WB_Exception_Return_Addr_reg[2] ),
        .\WB_Exception_Return_Addr_reg[6]_0 (\WB_Exception_Return_Addr_reg[6] ),
        .m3_piperun(m3_piperun),
        .sync_reset(sync_reset),
        .\wb_PC_i_reg[0]_0 (\wb_PC_i_reg[0] ),
        .\wb_PC_i_reg[0]_1 (\wb_PC_i_reg[0]_0 ),
        .\wb_PC_i_reg[31]_0 (\wb_PC_i_reg[31] ));
endmodule

(* ORIG_REF_NAME = "Debug" *) 
module microblaze_microblaze_0_0_Debug
   (\Serial_Dbg_Intf.if_debug_ready_i_reg_0 ,
    LOCKSTEP_Master_Out,
    \Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg_0 ,
    read_register_MSR_1,
    single_Step_N,
    Sleep_Out,
    dbg_halt_reset_mode_reg_0,
    \Performance_Debug_Control.dbg_state_nohalt_reg_0 ,
    \Performance_Debug_Control.dbg_freeze_nohalt_reg_0 ,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    normal_stop_i,
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ,
    Dbg_TDO,
    Dbg_Reg_En_2_sp_1,
    single_Step_N_reg_0,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ,
    S,
    \Serial_Dbg_Intf.if_debug_ready_i_reg_1 ,
    Q,
    Dbg_Clk,
    sync_reset,
    m3_piperun,
    m2_piperun,
    m1_piperun,
    m0_piperun,
    \Performance_Debug_Control.m0_dbg_hit_reg[0]_0 ,
    of_piperun,
    Clk,
    Dbg_Update,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Pause,
    Sleep,
    \Performance_Debug_Control.ex_brki_hit_reg_0 ,
    wb_halted,
    wb_read_imm_reg_1,
    wb_delay_slot,
    wb_read_imm_reg,
    D,
    Dbg_Stop,
    Dbg_Capture,
    ex_dbg_pc_hit_i,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ,
    Reset_Mode,
    p_4_out__0,
    exception_reg_0,
    Scan_Reset,
    Scan_En,
    Config_Reset,
    Scan_Reset_Sel,
    Sleep_Decode,
    Dbg_Reg_En,
    Data_Read_Reg_En,
    Status_Reg_En,
    Config_Reg_En,
    Dbg_Shift,
    wb_gpr_wr_dbg,
    wb_pc_valid,
    if0_pause,
    wakeup_i,
    ex_Interrupt,
    Dbg_TDI,
    Address,
    \data_rd_reg_reg[0]_0 );
  output \Serial_Dbg_Intf.if_debug_ready_i_reg_0 ;
  output [36:0]LOCKSTEP_Master_Out;
  output \Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg_0 ;
  output read_register_MSR_1;
  output single_Step_N;
  output Sleep_Out;
  output dbg_halt_reset_mode_reg_0;
  output \Performance_Debug_Control.dbg_state_nohalt_reg_0 ;
  output \Performance_Debug_Control.dbg_freeze_nohalt_reg_0 ;
  output [1:0]Dbg_Trig_In;
  output [1:0]Dbg_Trig_Ack_Out;
  output normal_stop_i;
  output \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ;
  output Dbg_TDO;
  output Dbg_Reg_En_2_sp_1;
  output single_Step_N_reg_0;
  output \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  output S;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg_1 ;
  output [0:0]Q;
  input Dbg_Clk;
  input sync_reset;
  input m3_piperun;
  input m2_piperun;
  input m1_piperun;
  input m0_piperun;
  input \Performance_Debug_Control.m0_dbg_hit_reg[0]_0 ;
  input of_piperun;
  input Clk;
  input Dbg_Update;
  input [1:0]Dbg_Trig_Ack_In;
  input [1:0]Dbg_Trig_Out;
  input Pause;
  input Sleep;
  input \Performance_Debug_Control.ex_brki_hit_reg_0 ;
  input wb_halted;
  input wb_read_imm_reg_1;
  input wb_delay_slot;
  input wb_read_imm_reg;
  input [0:0]D;
  input Dbg_Stop;
  input Dbg_Capture;
  input ex_dbg_pc_hit_i;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ;
  input [0:1]Reset_Mode;
  input p_4_out__0;
  input [1:0]exception_reg_0;
  input Scan_Reset;
  input Scan_En;
  input Config_Reset;
  input Scan_Reset_Sel;
  input Sleep_Decode;
  input [0:7]Dbg_Reg_En;
  input Data_Read_Reg_En;
  input Status_Reg_En;
  input Config_Reg_En;
  input Dbg_Shift;
  input wb_gpr_wr_dbg;
  input wb_pc_valid;
  input if0_pause;
  input [0:1]wakeup_i;
  input ex_Interrupt;
  input Dbg_TDI;
  input [0:31]Address;
  input [31:0]\data_rd_reg_reg[0]_0 ;

  wire A1;
  wire A2;
  wire A3;
  wire [0:31]Address;
  wire Clk;
  wire Command_Reg_En;
  wire Config_Reg_En;
  wire Config_Reset;
  wire Control_Reg_En;
  wire [0:0]D;
  wire Data_Read_Reg_En;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Reg_En_2_sn_1;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire Dbg_TDO_INST_0_i_10_n_0;
  wire Dbg_TDO_INST_0_i_11_n_0;
  wire Dbg_TDO_INST_0_i_12_n_0;
  wire Dbg_TDO_INST_0_i_13_n_0;
  wire Dbg_TDO_INST_0_i_17_n_0;
  wire Dbg_TDO_INST_0_i_18_n_0;
  wire Dbg_TDO_INST_0_i_19_n_0;
  wire Dbg_TDO_INST_0_i_20_n_0;
  wire Dbg_TDO_INST_0_i_23_n_0;
  wire Dbg_TDO_INST_0_i_24_n_0;
  wire Dbg_TDO_INST_0_i_25_n_0;
  wire Dbg_TDO_INST_0_i_26_n_0;
  wire Dbg_TDO_INST_0_i_27_n_0;
  wire Dbg_TDO_INST_0_i_28_n_0;
  wire Dbg_TDO_INST_0_i_2_n_0;
  wire Dbg_TDO_INST_0_i_3_n_0;
  wire Dbg_TDO_INST_0_i_9_n_0;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Full_32_bit;
  wire Full_32_bit_1;
  wire Instr_Insert_Reg_En;
  wire Instr_Insert_Reg_En_1;
  wire [36:0]LOCKSTEP_Master_Out;
  wire New_Dbg_Instr2_TCK;
  wire New_Dbg_Instr_TCK;
  wire Pause;
  wire \Performance_Debug_Control.dbg_freeze_nohalt_i_1_n_0 ;
  wire \Performance_Debug_Control.dbg_freeze_nohalt_i_4_n_0 ;
  wire \Performance_Debug_Control.dbg_freeze_nohalt_reg_0 ;
  wire \Performance_Debug_Control.dbg_state_nohalt_i_1_n_0 ;
  wire \Performance_Debug_Control.dbg_state_nohalt_i_4_n_0 ;
  wire \Performance_Debug_Control.dbg_state_nohalt_reg_0 ;
  wire \Performance_Debug_Control.dbg_stop_i_i_1_n_0 ;
  wire \Performance_Debug_Control.dbg_stop_i_reg_n_0 ;
  wire \Performance_Debug_Control.dbg_stop_if_delay_i_i_1_n_0 ;
  wire \Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_i_1_n_0 ;
  wire \Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_i_2_n_0 ;
  wire \Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_i_3_n_0 ;
  wire \Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg_0 ;
  wire \Performance_Debug_Control.ex_brki_hit_reg_0 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ;
  wire \Performance_Debug_Control.force_stop_i_i_1_n_0 ;
  wire \Performance_Debug_Control.m0_dbg_hit[0]_i_1_n_0 ;
  wire \Performance_Debug_Control.m0_dbg_hit_reg_n_0_[0] ;
  wire \Performance_Debug_Control.normal_stop_i_i_1_n_0 ;
  wire \Performance_Debug_Control.step_continue_hold_i_1_n_0 ;
  wire [0:0]Q;
  wire Q0_out;
  wire Q1_in;
  wire Q1_out;
  wire Q2_in;
  wire Q2_out;
  wire Q4_out;
  wire Q5_out;
  wire Q6_out;
  wire Q_0;
  wire Raw;
  wire [0:1]Reset_Mode;
  wire S;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire \Serial_Dbg_Intf.New_Dbg_Instr_TCK_i_2_n_0 ;
  wire \Serial_Dbg_Intf.The_Base_Vector[1].SRL16E_Base_Vector_n_0 ;
  wire \Serial_Dbg_Intf.The_Cache_Addresses[4].SRL16E_Cache_I_n_0 ;
  wire \Serial_Dbg_Intf.The_Cache_Addresses[8].SRL16E_Cache_I_n_0 ;
  wire \Serial_Dbg_Intf.continue_from_brk_reg_n_0 ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[3] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.control_reg_reg_n_0_[5] ;
  wire \Serial_Dbg_Intf.force_stop_cmd_i_reg_n_0 ;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg_0 ;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg_1 ;
  wire \Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ;
  wire \Serial_Dbg_Intf.normal_stop_cmd_i_reg_n_0 ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[1] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[2] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[3] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[5] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ;
  wire \Serial_Dbg_Intf.sample_synced_1_reg_n_0_[8] ;
  wire \Serial_Dbg_Intf.shift_count[5]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.shift_count[7]_i_2_n_0 ;
  wire \Serial_Dbg_Intf.shift_count_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[10] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[11] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[12] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[13] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[14] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[15] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[16] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[17] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[18] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[19] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[1] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[20] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[21] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[2] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[3] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[4] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[5] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[6] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[7] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[8] ;
  wire \Serial_Dbg_Intf.shift_datain_reg_n_0_[9] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[0] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[16] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[17] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[18] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[19] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[20] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[23] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[24] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[27] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[28] ;
  wire \Serial_Dbg_Intf.status_reg_reg_n_0_[29] ;
  wire \Serial_Dbg_Intf.sync_dbg_wakeup_n_0 ;
  wire \Serial_Dbg_Intf.sync_sample_n_11 ;
  wire \Serial_Dbg_Intf.sync_sample_n_12 ;
  wire \Serial_Dbg_Intf.sync_stop_CPU_n_0 ;
  wire \Serial_Dbg_Intf.unchanged_i_1_n_0 ;
  wire Sleep;
  wire Sleep_Decode;
  wire Sleep_Out;
  wire Status_Reg_En;
  wire [3:2]TDO_Data_Reg0__9;
  wire TDO_Data_Reg__31;
  wire \Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_1 ;
  wire async_reset;
  wire capture_1;
  wire [0:1]command_reg;
  wire command_reg_clear;
  wire command_reg_clear_i_1_n_0;
  wire command_reg_rst33_out;
  wire config_with_scan_reset;
  wire continue_from_brk_TClk;
  wire continue_from_brk_rst34_out;
  wire [0:32]data_rd_reg;
  wire \data_rd_reg[0]_i_1_n_0 ;
  wire \data_rd_reg[32]_i_1_n_0 ;
  wire \data_rd_reg[32]_i_2_n_0 ;
  wire \data_rd_reg[32]_i_3_n_0 ;
  wire [31:0]\data_rd_reg_reg[0]_0 ;
  wire [0:32]data_read_reg;
  wire dbg_brki_hit;
  wire dbg_brki_hit_synced;
  wire dbg_freeze_nohalt0_in;
  wire dbg_halt_reset_mode_i_1_n_0;
  wire dbg_halt_reset_mode_reg_0;
  wire dbg_stop_1;
  wire delay_slot_instr;
  wire ex_Interrupt;
  wire ex_brki_hit;
  wire ex_dbg_pc_hit_i;
  wire ex_pc_brk;
  (* DIRECT_ENABLE *) wire ex_piperun_for_ce;
  wire ex_step_continue_hold;
  wire exception_i_1_n_0;
  wire exception_i_2_n_0;
  wire [1:0]exception_reg_0;
  wire executing_i_1_n_0;
  wire force_stop_TClk;
  wire force_stop_cmd_1;
  wire force_stop_cmd_rst30_out;
  wire force_stop_i;
  wire force_stop_overrun;
  wire if0_pause;
  wire [0:1]instr_rd_reg;
  wire [0:1]instr_read_reg;
  wire m0_brki_hit;
  (* DIRECT_ENABLE *) wire m0_piperun_for_ce;
  wire m1_brki_hit;
  wire m1_dbg_hit;
  (* DIRECT_ENABLE *) wire m1_piperun_for_ce;
  wire m2_brki_hit;
  wire m2_dbg_hit;
  (* DIRECT_ENABLE *) wire m2_piperun_for_ce;
  wire m3_brki_hit;
  wire m3_dbg_hit;
  (* DIRECT_ENABLE *) wire m3_piperun_for_ce;
  wire mb_halted_1;
  wire no_sleeping1_out;
  wire normal_stop_TClk;
  wire normal_stop_cmd_1;
  wire normal_stop_cmd_rst29_out;
  wire normal_stop_i;
  (* DIRECT_ENABLE *) wire of_piperun_for_ce;
  wire [7:0]p_0_in;
  wire p_0_in74_in;
  wire p_100_out;
  wire p_11_out;
  wire p_36_out__1;
  wire p_40_out__0;
  wire p_4_out__0;
  wire p_59_out;
  wire p_79_out;
  wire p_86_out;
  wire p_89_out;
  wire p_91_out;
  wire p_94_out;
  wire p_97_out;
  wire pause_synced;
  wire read_register_MSR;
  wire read_register_MSR_1;
  wire read_register_PC;
  wire read_register_PC_1;
  (* DIRECT_RESET *) wire reset_bool_for_rst;
  wire running_clock;
  wire running_clock_rst19_out;
  wire running_clock_synced;
  wire [0:9]sample_synced;
  wire saved_reset_mode_dbg_halt;
  wire saved_reset_mode_dbg_halt_i_1_n_0;
  wire saved_reset_mode_sleep;
  wire saved_reset_mode_sleep_i_1_n_0;
  wire [3:1]sel0;
  wire [0:0]sel0_2;
  wire single_Step_N;
  wire single_Step_N_i_1_n_0;
  wire single_Step_N_reg_0;
  wire single_Step_TClk;
  wire [0:1]single_step_count;
  wire \single_step_count[0]_i_1_n_0 ;
  wire \single_step_count[1]_i_1_n_0 ;
  wire sleep_reset_mode;
  wire sleep_reset_mode_i_1_n_0;
  wire sleep_synced;
  wire start_dbg_exec_reg_n_0;
  wire start_single_cmd;
  wire start_single_step_i_1_n_0;
  wire start_single_step_reg_n_0;
  wire start_single_step_rst31_out;
  wire step_continue__0;
  wire step_continue_hold;
  wire sync;
  wire sync_trig_ack_in_0_n_1;
  wire sync_trig_out_0_n_1;
  wire tdo_config_word1_0;
  wire trig_ack_in_0_synced;
  wire trig_ack_in_0_synced_1;
  wire trig_out_0_synced;
  wire trig_out_0_synced_1;
  wire unchanged;
  wire [0:1]wakeup_i;
  wire wb_brki_hit;
  wire wb_dbg_hit;
  wire wb_delay_slot;
  wire wb_gpr_wr_dbg;
  wire wb_halted;
  wire wb_pc_valid;
  wire wb_read_imm_reg;
  wire wb_read_imm_reg_1;

  assign Dbg_Reg_En_2_sp_1 = Dbg_Reg_En_2_sn_1;
  assign ex_piperun_for_ce = \Performance_Debug_Control.m0_dbg_hit_reg[0]_0 ;
  assign m0_piperun_for_ce = m0_piperun;
  assign m1_piperun_for_ce = m1_piperun;
  assign m2_piperun_for_ce = m2_piperun;
  assign m3_piperun_for_ce = m3_piperun;
  assign of_piperun_for_ce = of_piperun;
  assign reset_bool_for_rst = sync_reset;
  LUT6 #(
    .INIT(64'hFAAAAAAEAAAAAAAE)) 
    Dbg_TDO_INST_0_i_10
       (.I0(Dbg_TDO_INST_0_i_18_n_0),
        .I1(\Serial_Dbg_Intf.status_reg_reg_n_0_[24] ),
        .I2(A1),
        .I3(A2),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I5(\Serial_Dbg_Intf.status_reg_reg_n_0_[23] ),
        .O(Dbg_TDO_INST_0_i_10_n_0));
  LUT6 #(
    .INIT(64'hCFAFCFA0C0AFC0A0)) 
    Dbg_TDO_INST_0_i_11
       (.I0(Dbg_TDO_INST_0_i_19_n_0),
        .I1(Dbg_TDO_INST_0_i_20_n_0),
        .I2(TDO_Data_Reg0__9[2]),
        .I3(TDO_Data_Reg0__9[3]),
        .I4(Dbg_TDO_INST_0_i_23_n_0),
        .I5(Dbg_TDO_INST_0_i_24_n_0),
        .O(Dbg_TDO_INST_0_i_11_n_0));
  LUT6 #(
    .INIT(64'hCFAFCFA0C0AFC0A0)) 
    Dbg_TDO_INST_0_i_12
       (.I0(Dbg_TDO_INST_0_i_25_n_0),
        .I1(Dbg_TDO_INST_0_i_26_n_0),
        .I2(TDO_Data_Reg0__9[2]),
        .I3(TDO_Data_Reg0__9[3]),
        .I4(Dbg_TDO_INST_0_i_27_n_0),
        .I5(Dbg_TDO_INST_0_i_28_n_0),
        .O(Dbg_TDO_INST_0_i_12_n_0));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    Dbg_TDO_INST_0_i_13
       (.I0(A2),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A3),
        .O(Dbg_TDO_INST_0_i_13_n_0));
  LUT6 #(
    .INIT(64'h0000D8D855000000)) 
    Dbg_TDO_INST_0_i_17
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I1(\Serial_Dbg_Intf.status_reg_reg_n_0_[19] ),
        .I2(\Serial_Dbg_Intf.status_reg_reg_n_0_[18] ),
        .I3(\Serial_Dbg_Intf.status_reg_reg_n_0_[20] ),
        .I4(A2),
        .I5(A1),
        .O(Dbg_TDO_INST_0_i_17_n_0));
  LUT6 #(
    .INIT(64'h00008888F5A00000)) 
    Dbg_TDO_INST_0_i_18
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I1(\Serial_Dbg_Intf.status_reg_reg_n_0_[27] ),
        .I2(\Serial_Dbg_Intf.status_reg_reg_n_0_[29] ),
        .I3(\Serial_Dbg_Intf.status_reg_reg_n_0_[28] ),
        .I4(A2),
        .I5(A1),
        .O(Dbg_TDO_INST_0_i_18_n_0));
  LUT6 #(
    .INIT(64'hAFCFAFC0A0CFA0C0)) 
    Dbg_TDO_INST_0_i_19
       (.I0(data_read_reg[27]),
        .I1(data_read_reg[25]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[28]),
        .I5(data_read_reg[26]),
        .O(Dbg_TDO_INST_0_i_19_n_0));
  LUT6 #(
    .INIT(64'h4000000000000004)) 
    Dbg_TDO_INST_0_i_2
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I1(\Serial_Dbg_Intf.status_reg_reg_n_0_[0] ),
        .I2(sel0_2),
        .I3(A1),
        .I4(A2),
        .I5(A3),
        .O(Dbg_TDO_INST_0_i_2_n_0));
  LUT6 #(
    .INIT(64'hAFCFAFC0A0CFA0C0)) 
    Dbg_TDO_INST_0_i_20
       (.I0(data_read_reg[19]),
        .I1(data_read_reg[17]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[20]),
        .I5(data_read_reg[18]),
        .O(Dbg_TDO_INST_0_i_20_n_0));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT3 #(
    .INIT(8'h1E)) 
    Dbg_TDO_INST_0_i_21
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I1(A1),
        .I2(A2),
        .O(TDO_Data_Reg0__9[2]));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT4 #(
    .INIT(16'h01FE)) 
    Dbg_TDO_INST_0_i_22
       (.I0(A2),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A3),
        .O(TDO_Data_Reg0__9[3]));
  LUT6 #(
    .INIT(64'hAFCFAFC0A0CFA0C0)) 
    Dbg_TDO_INST_0_i_23
       (.I0(data_read_reg[31]),
        .I1(data_read_reg[29]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[32]),
        .I5(data_read_reg[30]),
        .O(Dbg_TDO_INST_0_i_23_n_0));
  LUT6 #(
    .INIT(64'hAFCFAFC0A0CFA0C0)) 
    Dbg_TDO_INST_0_i_24
       (.I0(data_read_reg[23]),
        .I1(data_read_reg[21]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[24]),
        .I5(data_read_reg[22]),
        .O(Dbg_TDO_INST_0_i_24_n_0));
  LUT6 #(
    .INIT(64'hAFCFAFC0A0CFA0C0)) 
    Dbg_TDO_INST_0_i_25
       (.I0(data_read_reg[11]),
        .I1(data_read_reg[9]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[12]),
        .I5(data_read_reg[10]),
        .O(Dbg_TDO_INST_0_i_25_n_0));
  LUT6 #(
    .INIT(64'hAFCFAFC0A0CFA0C0)) 
    Dbg_TDO_INST_0_i_26
       (.I0(data_read_reg[3]),
        .I1(data_read_reg[1]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[4]),
        .I5(data_read_reg[2]),
        .O(Dbg_TDO_INST_0_i_26_n_0));
  LUT6 #(
    .INIT(64'hAFCFAFC0A0CFA0C0)) 
    Dbg_TDO_INST_0_i_27
       (.I0(data_read_reg[15]),
        .I1(data_read_reg[13]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[16]),
        .I5(data_read_reg[14]),
        .O(Dbg_TDO_INST_0_i_27_n_0));
  LUT6 #(
    .INIT(64'hAFCFAFC0A0CFA0C0)) 
    Dbg_TDO_INST_0_i_28
       (.I0(data_read_reg[7]),
        .I1(data_read_reg[5]),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A1),
        .I4(data_read_reg[8]),
        .I5(data_read_reg[6]),
        .O(Dbg_TDO_INST_0_i_28_n_0));
  LUT6 #(
    .INIT(64'h0AC0C0A0C0A0C0A0)) 
    Dbg_TDO_INST_0_i_3
       (.I0(Dbg_TDO_INST_0_i_9_n_0),
        .I1(Dbg_TDO_INST_0_i_10_n_0),
        .I2(sel0_2),
        .I3(A3),
        .I4(A2),
        .I5(A1),
        .O(Dbg_TDO_INST_0_i_3_n_0));
  LUT6 #(
    .INIT(64'hFAFFCFAC0A00C0AC)) 
    Dbg_TDO_INST_0_i_4
       (.I0(Dbg_TDO_INST_0_i_11_n_0),
        .I1(Dbg_TDO_INST_0_i_12_n_0),
        .I2(sel0_2),
        .I3(Dbg_TDO_INST_0_i_13_n_0),
        .I4(sel0[1]),
        .I5(data_read_reg[0]),
        .O(TDO_Data_Reg__31));
  LUT6 #(
    .INIT(64'hAAAFAAAEAAAAAAAE)) 
    Dbg_TDO_INST_0_i_9
       (.I0(Dbg_TDO_INST_0_i_17_n_0),
        .I1(\Serial_Dbg_Intf.status_reg_reg_n_0_[16] ),
        .I2(A1),
        .I3(A2),
        .I4(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I5(\Serial_Dbg_Intf.status_reg_reg_n_0_[17] ),
        .O(Dbg_TDO_INST_0_i_9_n_0));
  FDRE Full_32_bit_1_reg
       (.C(Clk),
        .CE(wb_halted),
        .D(wb_read_imm_reg_1),
        .Q(Full_32_bit_1),
        .R(reset_bool_for_rst));
  FDRE Full_32_bit_reg
       (.C(Clk),
        .CE(wb_halted),
        .D(wb_read_imm_reg),
        .Q(Full_32_bit),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.Frequency_Pipe_Flow.m1_brki_hit_reg 
       (.C(Clk),
        .CE(m0_piperun_for_ce),
        .D(m0_brki_hit),
        .Q(m1_brki_hit),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.Frequency_Pipe_Flow.m1_dbg_hit_reg[0] 
       (.C(Clk),
        .CE(m0_piperun_for_ce),
        .D(\Performance_Debug_Control.m0_dbg_hit_reg_n_0_[0] ),
        .Q(m1_dbg_hit),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.Frequency_Pipe_Flow.m2_brki_hit_reg 
       (.C(Clk),
        .CE(m1_piperun_for_ce),
        .D(m1_brki_hit),
        .Q(m2_brki_hit),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.Frequency_Pipe_Flow.m2_dbg_hit_reg[0] 
       (.C(Clk),
        .CE(m1_piperun_for_ce),
        .D(m1_dbg_hit),
        .Q(m2_dbg_hit),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.Frequency_Pipe_Flow.m3_brki_hit_reg 
       (.C(Clk),
        .CE(m2_piperun_for_ce),
        .D(m2_brki_hit),
        .Q(m3_brki_hit),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.Frequency_Pipe_Flow.m3_dbg_hit_reg[0] 
       (.C(Clk),
        .CE(m2_piperun_for_ce),
        .D(m2_dbg_hit),
        .Q(m3_dbg_hit),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.dbg_brki_hit_reg 
       (.C(Clk),
        .CE(wb_halted),
        .D(wb_brki_hit),
        .Q(dbg_brki_hit),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'hAAAAAAABAAAAAAA8)) 
    \Performance_Debug_Control.dbg_freeze_nohalt_i_1 
       (.I0(dbg_freeze_nohalt0_in),
        .I1(p_40_out__0),
        .I2(p_4_out__0),
        .I3(\Performance_Debug_Control.dbg_freeze_nohalt_i_4_n_0 ),
        .I4(\Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ),
        .I5(\Performance_Debug_Control.dbg_freeze_nohalt_reg_0 ),
        .O(\Performance_Debug_Control.dbg_freeze_nohalt_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAAA8AAAA)) 
    \Performance_Debug_Control.dbg_freeze_nohalt_i_2 
       (.I0(\Performance_Debug_Control.dbg_state_nohalt_reg_0 ),
        .I1(start_single_step_reg_n_0),
        .I2(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .I3(reset_bool_for_rst),
        .I4(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .O(p_40_out__0));
  LUT2 #(
    .INIT(4'hE)) 
    \Performance_Debug_Control.dbg_freeze_nohalt_i_4 
       (.I0(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .I1(reset_bool_for_rst),
        .O(\Performance_Debug_Control.dbg_freeze_nohalt_i_4_n_0 ));
  FDRE \Performance_Debug_Control.dbg_freeze_nohalt_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performance_Debug_Control.dbg_freeze_nohalt_i_1_n_0 ),
        .Q(\Performance_Debug_Control.dbg_freeze_nohalt_reg_0 ),
        .R(1'b0));
  FDRE \Performance_Debug_Control.dbg_hit_reg[0] 
       (.C(Clk),
        .CE(wb_halted),
        .D(wb_dbg_hit),
        .Q(Raw),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'h2222222322222220)) 
    \Performance_Debug_Control.dbg_state_nohalt_i_1 
       (.I0(dbg_freeze_nohalt0_in),
        .I1(p_36_out__1),
        .I2(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .I3(reset_bool_for_rst),
        .I4(\Performance_Debug_Control.dbg_state_nohalt_i_4_n_0 ),
        .I5(\Performance_Debug_Control.dbg_state_nohalt_reg_0 ),
        .O(\Performance_Debug_Control.dbg_state_nohalt_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000F000E0E0E0E)) 
    \Performance_Debug_Control.dbg_state_nohalt_i_2 
       (.I0(wb_halted),
        .I1(dbg_halt_reset_mode_reg_0),
        .I2(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .I3(Reset_Mode[0]),
        .I4(Reset_Mode[1]),
        .I5(reset_bool_for_rst),
        .O(dbg_freeze_nohalt0_in));
  LUT3 #(
    .INIT(8'h07)) 
    \Performance_Debug_Control.dbg_state_nohalt_i_3 
       (.I0(saved_reset_mode_dbg_halt),
        .I1(dbg_halt_reset_mode_reg_0),
        .I2(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .O(p_36_out__1));
  LUT6 #(
    .INIT(64'hFFFFFFFF44404444)) 
    \Performance_Debug_Control.dbg_state_nohalt_i_4 
       (.I0(\Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ),
        .I1(\Performance_Debug_Control.dbg_state_nohalt_reg_0 ),
        .I2(step_continue__0),
        .I3(reset_bool_for_rst),
        .I4(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .I5(p_4_out__0),
        .O(\Performance_Debug_Control.dbg_state_nohalt_i_4_n_0 ));
  FDRE \Performance_Debug_Control.dbg_state_nohalt_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performance_Debug_Control.dbg_state_nohalt_i_1_n_0 ),
        .Q(\Performance_Debug_Control.dbg_state_nohalt_reg_0 ),
        .R(1'b0));
  FDRE \Performance_Debug_Control.dbg_stop_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Stop),
        .Q(dbg_stop_1),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'hFFFFFFFF040F0404)) 
    \Performance_Debug_Control.dbg_stop_i_i_1 
       (.I0(trig_out_0_synced_1),
        .I1(trig_out_0_synced),
        .I2(D),
        .I3(dbg_stop_1),
        .I4(Dbg_Stop),
        .I5(\Performance_Debug_Control.dbg_stop_i_reg_n_0 ),
        .O(\Performance_Debug_Control.dbg_stop_i_i_1_n_0 ));
  FDRE \Performance_Debug_Control.dbg_stop_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performance_Debug_Control.dbg_stop_i_i_1_n_0 ),
        .Q(\Performance_Debug_Control.dbg_stop_i_reg_n_0 ),
        .R(ex_dbg_pc_hit_i));
  LUT6 #(
    .INIT(64'h0101010101010100)) 
    \Performance_Debug_Control.dbg_stop_if_delay_i_i_1 
       (.I0(saved_reset_mode_sleep),
        .I1(dbg_halt_reset_mode_reg_0),
        .I2(reset_bool_for_rst),
        .I3(\Performance_Debug_Control.dbg_state_nohalt_reg_0 ),
        .I4(wb_halted),
        .I5(\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg_0 ),
        .O(\Performance_Debug_Control.dbg_stop_if_delay_i_i_1_n_0 ));
  FDRE \Performance_Debug_Control.dbg_stop_if_delay_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performance_Debug_Control.dbg_stop_if_delay_i_i_1_n_0 ),
        .Q(LOCKSTEP_Master_Out[32]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h00E2)) 
    \Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_i_1 
       (.I0(\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg_0 ),
        .I1(\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_i_2_n_0 ),
        .I2(\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_i_3_n_0 ),
        .I3(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .O(\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFCFEFCFEFCFFFCFE)) 
    \Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_i_2 
       (.I0(p_40_out__0),
        .I1(p_4_out__0),
        .I2(reset_bool_for_rst),
        .I3(\Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ),
        .I4(saved_reset_mode_sleep),
        .I5(Sleep_Out),
        .O(\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT5 #(
    .INIT(32'h0EFEFE0E)) 
    \Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_i_3 
       (.I0(dbg_halt_reset_mode_reg_0),
        .I1(wb_halted),
        .I2(reset_bool_for_rst),
        .I3(Reset_Mode[1]),
        .I4(Reset_Mode[0]),
        .O(\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_i_3_n_0 ));
  FDRE \Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_i_1_n_0 ),
        .Q(\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg_0 ),
        .R(1'b0));
  FDRE \Performance_Debug_Control.ex_brki_hit_reg 
       (.C(Clk),
        .CE(of_piperun_for_ce),
        .D(\Performance_Debug_Control.ex_brki_hit_reg_0 ),
        .Q(ex_brki_hit),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.ex_dbg_hit_reg[0] 
       (.C(Clk),
        .CE(of_piperun_for_ce),
        .D(\Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_1 ),
        .Q(ex_pc_brk),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.ex_dbg_pc_hit_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ),
        .Q(LOCKSTEP_Master_Out[35]),
        .R(ex_dbg_pc_hit_i));
  FDRE \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ),
        .Q(\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.ex_step_continue_hold_reg 
       (.C(Clk),
        .CE(of_piperun_for_ce),
        .D(step_continue_hold),
        .Q(ex_step_continue_hold),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.force_stop_cmd_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.force_stop_cmd_i_reg_n_0 ),
        .Q(force_stop_cmd_1),
        .R(reset_bool_for_rst));
  LUT5 #(
    .INIT(32'hFFFF0010)) 
    \Performance_Debug_Control.force_stop_i_i_1 
       (.I0(\Performance_Debug_Control.dbg_state_nohalt_reg_0 ),
        .I1(wb_halted),
        .I2(force_stop_cmd_1),
        .I3(\Serial_Dbg_Intf.force_stop_cmd_i_reg_n_0 ),
        .I4(force_stop_i),
        .O(\Performance_Debug_Control.force_stop_i_i_1_n_0 ));
  FDRE \Performance_Debug_Control.force_stop_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performance_Debug_Control.force_stop_i_i_1_n_0 ),
        .Q(force_stop_i),
        .R(ex_dbg_pc_hit_i));
  LUT2 #(
    .INIT(4'h2)) 
    \Performance_Debug_Control.force_stop_overrun_i_1 
       (.I0(force_stop_cmd_1),
        .I1(\Serial_Dbg_Intf.force_stop_cmd_i_reg_n_0 ),
        .O(p_59_out));
  FDRE \Performance_Debug_Control.force_stop_overrun_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_59_out),
        .Q(force_stop_overrun),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.m0_brki_hit_reg 
       (.C(Clk),
        .CE(ex_piperun_for_ce),
        .D(ex_brki_hit),
        .Q(m0_brki_hit),
        .R(reset_bool_for_rst));
  LUT3 #(
    .INIT(8'hBA)) 
    \Performance_Debug_Control.m0_dbg_hit[0]_i_1 
       (.I0(ex_pc_brk),
        .I1(ex_step_continue_hold),
        .I2(\Performance_Debug_Control.m0_dbg_hit_reg_n_0_[0] ),
        .O(\Performance_Debug_Control.m0_dbg_hit[0]_i_1_n_0 ));
  FDRE \Performance_Debug_Control.m0_dbg_hit_reg[0] 
       (.C(Clk),
        .CE(ex_piperun_for_ce),
        .D(\Performance_Debug_Control.m0_dbg_hit[0]_i_1_n_0 ),
        .Q(\Performance_Debug_Control.m0_dbg_hit_reg_n_0_[0] ),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.normal_stop_cmd_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.normal_stop_cmd_i_reg_n_0 ),
        .Q(normal_stop_cmd_1),
        .R(reset_bool_for_rst));
  LUT5 #(
    .INIT(32'hFFFF0010)) 
    \Performance_Debug_Control.normal_stop_i_i_1 
       (.I0(\Performance_Debug_Control.dbg_state_nohalt_reg_0 ),
        .I1(wb_halted),
        .I2(normal_stop_cmd_1),
        .I3(\Serial_Dbg_Intf.normal_stop_cmd_i_reg_n_0 ),
        .I4(normal_stop_i),
        .O(\Performance_Debug_Control.normal_stop_i_i_1_n_0 ));
  FDRE \Performance_Debug_Control.normal_stop_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performance_Debug_Control.normal_stop_i_i_1_n_0 ),
        .Q(normal_stop_i),
        .R(ex_dbg_pc_hit_i));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT4 #(
    .INIT(16'h0F0E)) 
    \Performance_Debug_Control.step_continue_hold_i_1 
       (.I0(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .I1(start_single_step_reg_n_0),
        .I2(of_piperun_for_ce),
        .I3(step_continue_hold),
        .O(\Performance_Debug_Control.step_continue_hold_i_1_n_0 ));
  FDRE \Performance_Debug_Control.step_continue_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Performance_Debug_Control.step_continue_hold_i_1_n_0 ),
        .Q(step_continue_hold),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.trig_ack_out_0_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(sync_trig_out_0_n_1),
        .Q(Dbg_Trig_Ack_Out[1]),
        .R(1'b0));
  FDRE \Performance_Debug_Control.trig_out_0_synced_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(trig_out_0_synced),
        .Q(trig_out_0_synced_1),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.wb_brki_hit_reg 
       (.C(Clk),
        .CE(m3_piperun_for_ce),
        .D(m3_brki_hit),
        .Q(wb_brki_hit),
        .R(reset_bool_for_rst));
  FDRE \Performance_Debug_Control.wb_dbg_hit_reg[0] 
       (.C(Clk),
        .CE(m3_piperun_for_ce),
        .D(m3_dbg_hit),
        .Q(wb_dbg_hit),
        .R(reset_bool_for_rst));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Serial_Dbg_Intf.Instr_Insert_Reg_En_1_i_1 
       (.I0(Dbg_Reg_En[5]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[6]),
        .I4(Dbg_Reg_En_2_sn_1),
        .O(Instr_Insert_Reg_En));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.Instr_Insert_Reg_En_1_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Instr_Insert_Reg_En),
        .Q(Instr_Insert_Reg_En_1));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Dbg_Instr2_TCK_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(New_Dbg_Instr_TCK),
        .Q(New_Dbg_Instr2_TCK));
  LUT5 #(
    .INIT(32'h08000000)) 
    \Serial_Dbg_Intf.New_Dbg_Instr_TCK_i_1 
       (.I0(sel0_2),
        .I1(A3),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(\Serial_Dbg_Intf.New_Dbg_Instr_TCK_i_2_n_0 ),
        .I4(Instr_Insert_Reg_En),
        .O(p_100_out));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Serial_Dbg_Intf.New_Dbg_Instr_TCK_i_2 
       (.I0(instr_read_reg[0]),
        .I1(instr_read_reg[1]),
        .I2(A1),
        .I3(A2),
        .O(\Serial_Dbg_Intf.New_Dbg_Instr_TCK_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Dbg_Instr_TCK_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_100_out),
        .Q(New_Dbg_Instr_TCK));
  LUT4 #(
    .INIT(16'h00B8)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK[0]_i_1 
       (.I0(Scan_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Config_Reset),
        .I3(Scan_En),
        .O(config_with_scan_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[0] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[1] ),
        .Q(LOCKSTEP_Master_Out[31]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[10] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[11] ),
        .Q(LOCKSTEP_Master_Out[21]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[11] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[12] ),
        .Q(LOCKSTEP_Master_Out[20]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[12] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[13] ),
        .Q(LOCKSTEP_Master_Out[19]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[13] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[14] ),
        .Q(LOCKSTEP_Master_Out[18]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[14] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[15] ),
        .Q(LOCKSTEP_Master_Out[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[15] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[16] ),
        .Q(LOCKSTEP_Master_Out[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[16] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[17] ),
        .Q(LOCKSTEP_Master_Out[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[17] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[18] ),
        .Q(LOCKSTEP_Master_Out[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[18] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[19] ),
        .Q(LOCKSTEP_Master_Out[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[19] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[20] ),
        .Q(LOCKSTEP_Master_Out[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[1] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[2] ),
        .Q(LOCKSTEP_Master_Out[30]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[20] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[21] ),
        .Q(LOCKSTEP_Master_Out[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[21] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ),
        .Q(LOCKSTEP_Master_Out[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[22] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ),
        .Q(LOCKSTEP_Master_Out[9]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[23] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ),
        .Q(LOCKSTEP_Master_Out[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[24] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ),
        .Q(LOCKSTEP_Master_Out[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[25] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ),
        .Q(LOCKSTEP_Master_Out[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[26] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ),
        .Q(LOCKSTEP_Master_Out[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[27] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ),
        .Q(LOCKSTEP_Master_Out[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[28] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ),
        .Q(LOCKSTEP_Master_Out[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[29] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ),
        .Q(LOCKSTEP_Master_Out[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[2] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[3] ),
        .Q(LOCKSTEP_Master_Out[29]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[30] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ),
        .Q(LOCKSTEP_Master_Out[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[31] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(Dbg_TDI),
        .Q(LOCKSTEP_Master_Out[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[3] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[4] ),
        .Q(LOCKSTEP_Master_Out[28]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[4] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[5] ),
        .Q(LOCKSTEP_Master_Out[27]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[5] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[6] ),
        .Q(LOCKSTEP_Master_Out[26]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[6] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[7] ),
        .Q(LOCKSTEP_Master_Out[25]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[7] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[8] ),
        .Q(LOCKSTEP_Master_Out[24]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[8] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[9] ),
        .Q(LOCKSTEP_Master_Out[23]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.New_Instr_Reg_TCK_reg[9] 
       (.C(Dbg_Clk),
        .CE(New_Dbg_Instr_TCK),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[10] ),
        .Q(LOCKSTEP_Master_Out[22]));
  microblaze_microblaze_0_0_MB_SRL16E \Serial_Dbg_Intf.SRL16E_1 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q_0(Q_0));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized1 \Serial_Dbg_Intf.SRL16E_2 
       (.Config_Reg_En(Config_Reg_En),
        .Data_Read_Reg_En(Data_Read_Reg_En),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_TDO_0(Dbg_TDO_INST_0_i_2_n_0),
        .Dbg_TDO_1(Dbg_TDO_INST_0_i_3_n_0),
        .Dbg_TDO_2({instr_read_reg[0],instr_read_reg[1]}),
        .Dbg_TDO_INST_0_i_1_0(\Serial_Dbg_Intf.The_Cache_Addresses[4].SRL16E_Cache_I_n_0 ),
        .Dbg_TDO_INST_0_i_1_1(\Serial_Dbg_Intf.The_Base_Vector[1].SRL16E_Base_Vector_n_0 ),
        .Instr_Insert_Reg_En(Instr_Insert_Reg_En),
        .Q({sel0,sel0_2,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q5_out(Q5_out),
        .Q6_out(Q6_out),
        .Q_0(Q_0),
        .Status_Reg_En(Status_Reg_En),
        .TDO_Data_Reg__31(TDO_Data_Reg__31));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized9 \Serial_Dbg_Intf.SRL16E_3 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q2_in(Q2_in));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized11 \Serial_Dbg_Intf.SRL16E_4 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q1_in(Q1_in));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized7 \Serial_Dbg_Intf.The_Base_Vector[1].SRL16E_Base_Vector 
       (.Dbg_Clk(Dbg_Clk),
        .Dbg_TDO_INST_0_i_7(\Serial_Dbg_Intf.The_Cache_Addresses[8].SRL16E_Cache_I_n_0 ),
        .Q({sel0[2:1],sel0_2,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .\Serial_Dbg_Intf.shift_count_reg[4] (\Serial_Dbg_Intf.The_Base_Vector[1].SRL16E_Base_Vector_n_0 ),
        .tdo_config_word1_0(tdo_config_word1_0));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized7_2 \Serial_Dbg_Intf.The_Base_Vector[2].SRL16E_Base_Vector 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .tdo_config_word1_0(tdo_config_word1_0));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized3 \Serial_Dbg_Intf.The_Cache_Addresses[1].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q6_out(Q6_out));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized5 \Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q5_out(Q5_out));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized7_3 \Serial_Dbg_Intf.The_Cache_Addresses[3].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q4_out(Q4_out));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized7_4 \Serial_Dbg_Intf.The_Cache_Addresses[4].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({sel0[1],sel0_2,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q1_out(Q1_out),
        .Q2_out(Q2_out),
        .Q4_out(Q4_out),
        .\Serial_Dbg_Intf.shift_count_reg[5] (\Serial_Dbg_Intf.The_Cache_Addresses[4].SRL16E_Cache_I_n_0 ));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized3_5 \Serial_Dbg_Intf.The_Cache_Addresses[5].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q2_out(Q2_out));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized5_6 \Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q1_out(Q1_out));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized7_7 \Serial_Dbg_Intf.The_Cache_Addresses[7].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q0_out(Q0_out));
  microblaze_microblaze_0_0_MB_SRL16E__parameterized7_8 \Serial_Dbg_Intf.The_Cache_Addresses[8].SRL16E_Cache_I 
       (.Dbg_Clk(Dbg_Clk),
        .Q({sel0[1],sel0_2,A3,A2,A1,\Serial_Dbg_Intf.shift_count_reg_n_0_[0] }),
        .Q0_out(Q0_out),
        .Q1_in(Q1_in),
        .Q2_in(Q2_in),
        .\Serial_Dbg_Intf.shift_count_reg[5] (\Serial_Dbg_Intf.The_Cache_Addresses[8].SRL16E_Cache_I_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.capture_1_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Dbg_Capture),
        .Q(capture_1));
  LUT5 #(
    .INIT(32'h00000010)) 
    \Serial_Dbg_Intf.command_reg[0]_i_1 
       (.I0(Dbg_Reg_En[4]),
        .I1(Dbg_Reg_En[5]),
        .I2(Dbg_Reg_En[6]),
        .I3(Dbg_Reg_En[7]),
        .I4(Dbg_Reg_En_2_sn_1),
        .O(Command_Reg_En));
  LUT5 #(
    .INIT(32'h0000F3E2)) 
    \Serial_Dbg_Intf.command_reg[0]_i_2 
       (.I0(Config_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Scan_Reset),
        .I3(command_reg_clear),
        .I4(Scan_En),
        .O(command_reg_rst33_out));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(command_reg_rst33_out),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ),
        .Q(command_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.command_reg_reg[1] 
       (.C(Dbg_Update),
        .CE(Command_Reg_En),
        .CLR(command_reg_rst33_out),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ),
        .Q(command_reg[1]));
  LUT5 #(
    .INIT(32'h0000F3E2)) 
    \Serial_Dbg_Intf.continue_from_brk_TClk_i_1 
       (.I0(Config_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Scan_Reset),
        .I3(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .I4(Scan_En),
        .O(continue_from_brk_rst34_out));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.continue_from_brk_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(continue_from_brk_rst34_out),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ),
        .Q(continue_from_brk_TClk));
  FDRE \Serial_Dbg_Intf.continue_from_brk_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_11_out),
        .Q(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .R(reset_bool_for_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[0] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[3] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[4] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[5] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.control_reg_reg[8] 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ),
        .Q(Q));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[0]),
        .Q(data_read_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[10] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[10]),
        .Q(data_read_reg[10]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[11] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[11]),
        .Q(data_read_reg[11]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[12] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[12]),
        .Q(data_read_reg[12]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[13] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[13]),
        .Q(data_read_reg[13]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[14] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[14]),
        .Q(data_read_reg[14]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[15] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[15]),
        .Q(data_read_reg[15]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[16]),
        .Q(data_read_reg[16]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[17]),
        .Q(data_read_reg[17]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[18] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[18]),
        .Q(data_read_reg[18]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[19] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[19]),
        .Q(data_read_reg[19]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[1]),
        .Q(data_read_reg[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[20] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[20]),
        .Q(data_read_reg[20]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[21] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[21]),
        .Q(data_read_reg[21]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[22] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[22]),
        .Q(data_read_reg[22]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[23] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[23]),
        .Q(data_read_reg[23]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[24] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[24]),
        .Q(data_read_reg[24]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[25] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[25]),
        .Q(data_read_reg[25]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[26] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[26]),
        .Q(data_read_reg[26]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[27] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[27]),
        .Q(data_read_reg[27]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[28] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[28]),
        .Q(data_read_reg[28]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[29] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[29]),
        .Q(data_read_reg[29]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[2] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[2]),
        .Q(data_read_reg[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[30] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[30]),
        .Q(data_read_reg[30]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[31] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[31]),
        .Q(data_read_reg[31]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[32] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[32]),
        .Q(data_read_reg[32]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[3] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[3]),
        .Q(data_read_reg[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[4] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[4]),
        .Q(data_read_reg[4]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[5] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[5]),
        .Q(data_read_reg[5]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[6] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[6]),
        .Q(data_read_reg[6]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[7] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[7]),
        .Q(data_read_reg[7]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[8] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[8]),
        .Q(data_read_reg[8]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.data_read_reg_reg[9] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(data_rd_reg[9]),
        .Q(data_read_reg[9]));
  FDRE \Serial_Dbg_Intf.dbg_disable_interrupt_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[9]),
        .Q(LOCKSTEP_Master_Out[36]),
        .R(reset_bool_for_rst));
  LUT5 #(
    .INIT(32'h00000010)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_i_1 
       (.I0(Dbg_Reg_En[4]),
        .I1(Dbg_Reg_En[5]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[6]),
        .I4(Dbg_Reg_En_2_sn_1),
        .O(Control_Reg_En));
  LUT6 #(
    .INIT(64'h00000000E2E2E2F3)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_i_2 
       (.I0(Config_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Scan_Reset),
        .I3(Sleep_Out),
        .I4(Sleep_Decode),
        .I5(Scan_En),
        .O(no_sleeping1_out));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_i_3 
       (.I0(Dbg_Reg_En[2]),
        .I1(Dbg_Reg_En[1]),
        .I2(Dbg_Reg_En[0]),
        .I3(Dbg_Reg_En[3]),
        .O(Dbg_Reg_En_2_sn_1));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.dbg_wakeup_i_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(no_sleeping1_out),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ),
        .Q(LOCKSTEP_Master_Out[34]));
  LUT5 #(
    .INIT(32'h0000F3E2)) 
    \Serial_Dbg_Intf.force_stop_TClk_i_1 
       (.I0(Config_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Scan_Reset),
        .I3(\Serial_Dbg_Intf.force_stop_cmd_i_reg_n_0 ),
        .I4(Scan_En),
        .O(force_stop_cmd_rst30_out));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.force_stop_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(force_stop_cmd_rst30_out),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ),
        .Q(force_stop_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.force_stop_cmd_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_94_out),
        .Q(\Serial_Dbg_Intf.force_stop_cmd_i_reg_n_0 ),
        .R(reset_bool_for_rst));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.if_debug_ready_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_79_out),
        .Q(\Serial_Dbg_Intf.if_debug_ready_i_reg_0 ),
        .R(reset_bool_for_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.instr_read_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(instr_rd_reg[0]),
        .Q(instr_read_reg[0]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.instr_read_reg_reg[1] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(instr_rd_reg[1]),
        .Q(instr_read_reg[1]));
  FDRE \Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Insert_Reg_En_1),
        .Q(\Serial_Dbg_Intf.new_dbg_instr_shifting_CLK_reg_n_0 ),
        .R(reset_bool_for_rst));
  LUT5 #(
    .INIT(32'h0000F3E2)) 
    \Serial_Dbg_Intf.normal_stop_TClk_i_1 
       (.I0(Config_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Scan_Reset),
        .I3(\Serial_Dbg_Intf.normal_stop_cmd_i_reg_n_0 ),
        .I4(Scan_En),
        .O(normal_stop_cmd_rst29_out));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.normal_stop_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(normal_stop_cmd_rst29_out),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ),
        .Q(normal_stop_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.normal_stop_cmd_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_97_out),
        .Q(\Serial_Dbg_Intf.normal_stop_cmd_i_reg_n_0 ),
        .R(reset_bool_for_rst));
  FDRE \Serial_Dbg_Intf.read_register_MSR_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_89_out),
        .Q(read_register_MSR),
        .R(reset_bool_for_rst));
  FDRE \Serial_Dbg_Intf.read_register_PC_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_86_out),
        .Q(read_register_PC),
        .R(reset_bool_for_rst));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[0]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[0] ),
        .R(reset_bool_for_rst));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[1]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[1] ),
        .R(reset_bool_for_rst));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[2]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[2] ),
        .R(reset_bool_for_rst));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[3]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[3] ),
        .R(reset_bool_for_rst));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[4]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[4] ),
        .R(reset_bool_for_rst));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[5]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[5] ),
        .R(reset_bool_for_rst));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[6]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ),
        .R(reset_bool_for_rst));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[7]),
        .Q(p_0_in74_in),
        .R(reset_bool_for_rst));
  FDRE \Serial_Dbg_Intf.sample_synced_1_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(sample_synced[8]),
        .Q(\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[8] ),
        .R(reset_bool_for_rst));
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.shift_count[0]_i_1 
       (.I0(Dbg_Shift),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(p_0_in[0]));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \Serial_Dbg_Intf.shift_count[1]_i_1 
       (.I0(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I1(A1),
        .I2(Dbg_Shift),
        .O(p_0_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \Serial_Dbg_Intf.shift_count[2]_i_1 
       (.I0(A1),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I2(Dbg_Shift),
        .I3(A2),
        .O(p_0_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \Serial_Dbg_Intf.shift_count[3]_i_1 
       (.I0(A2),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I2(A1),
        .I3(Dbg_Shift),
        .I4(A3),
        .O(p_0_in[3]));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \Serial_Dbg_Intf.shift_count[4]_i_1 
       (.I0(A3),
        .I1(A1),
        .I2(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I3(A2),
        .I4(Dbg_Shift),
        .I5(sel0_2),
        .O(p_0_in[4]));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \Serial_Dbg_Intf.shift_count[5]_i_1 
       (.I0(sel0_2),
        .I1(A2),
        .I2(\Serial_Dbg_Intf.shift_count[5]_i_2_n_0 ),
        .I3(A3),
        .I4(Dbg_Shift),
        .I5(sel0[1]),
        .O(p_0_in[5]));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Serial_Dbg_Intf.shift_count[5]_i_2 
       (.I0(A1),
        .I1(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .O(\Serial_Dbg_Intf.shift_count[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT3 #(
    .INIT(8'h48)) 
    \Serial_Dbg_Intf.shift_count[6]_i_1 
       (.I0(\Serial_Dbg_Intf.shift_count[7]_i_2_n_0 ),
        .I1(Dbg_Shift),
        .I2(sel0[2]),
        .O(p_0_in[6]));
  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \Serial_Dbg_Intf.shift_count[7]_i_1 
       (.I0(sel0[2]),
        .I1(\Serial_Dbg_Intf.shift_count[7]_i_2_n_0 ),
        .I2(Dbg_Shift),
        .I3(sel0[3]),
        .O(p_0_in[7]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \Serial_Dbg_Intf.shift_count[7]_i_2 
       (.I0(sel0[1]),
        .I1(A3),
        .I2(A1),
        .I3(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ),
        .I4(A2),
        .I5(sel0_2),
        .O(\Serial_Dbg_Intf.shift_count[7]_i_2_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[0] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[0]),
        .Q(\Serial_Dbg_Intf.shift_count_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[1] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[1]),
        .Q(A1));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[2] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[2]),
        .Q(A2));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[3] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[3]),
        .Q(A3));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[4] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[4]),
        .Q(sel0_2));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[5] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[5]),
        .Q(sel0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[6] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[6]),
        .Q(sel0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_count_reg[7] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(p_0_in[7]),
        .Q(sel0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[10] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[11] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[10] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[11] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[12] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[11] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[12] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[13] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[12] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[13] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[14] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[13] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[14] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[15] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[14] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[15] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[16] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[15] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[16] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[17] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[16] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[17] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[18] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[17] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[18] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[19] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[18] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[19] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[20] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[19] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[1] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[2] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[1] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[20] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[21] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[20] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[21] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[21] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[22] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[22] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[23] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[24] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[24] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[25] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[25] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[26] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[26] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[27] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[27] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[28] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[28] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[29] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[29] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[2] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[3] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[2] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[30] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[30] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[31] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(Dbg_TDI),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[31] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[3] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[4] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[3] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[4] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[5] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[4] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[5] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[6] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[5] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[6] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[7] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[6] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[7] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[8] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[7] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[8] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[9] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[8] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.shift_datain_reg[9] 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[10] ),
        .Q(\Serial_Dbg_Intf.shift_datain_reg_n_0_[9] ));
  LUT5 #(
    .INIT(32'h0000F3E2)) 
    \Serial_Dbg_Intf.single_Step_TClk_i_1 
       (.I0(Config_Reset),
        .I1(Scan_Reset_Sel),
        .I2(Scan_Reset),
        .I3(start_single_step_reg_n_0),
        .I4(Scan_En),
        .O(start_single_step_rst31_out));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.single_Step_TClk_reg 
       (.C(Dbg_Update),
        .CE(Control_Reg_En),
        .CLR(start_single_step_rst31_out),
        .D(\Serial_Dbg_Intf.shift_datain_reg_n_0_[23] ),
        .Q(single_Step_TClk));
  FDRE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.start_single_cmd_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(p_91_out),
        .Q(start_single_cmd),
        .R(reset_bool_for_rst));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[0] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(sync),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[0] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[16] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.sync_stop_CPU_n_0 ),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[16] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[17] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(reset_bool_for_rst),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[17] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[18] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(Full_32_bit),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[18] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[19] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(delay_slot_instr),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[19] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[20] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(Full_32_bit_1),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[20] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[23] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(dbg_brki_hit_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[23] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[24] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(running_clock_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[24] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[27] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(sleep_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[27] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[28] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(pause_synced),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[28] ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.status_reg_reg[29] 
       (.C(Dbg_Clk),
        .CE(Dbg_Capture),
        .CLR(config_with_scan_reset),
        .D(unchanged),
        .Q(\Serial_Dbg_Intf.status_reg_reg_n_0_[29] ));
  microblaze_microblaze_0_0_mb_sync_bit__parameterized2 \Serial_Dbg_Intf.sync_dbg_brk_hit 
       (.D(dbg_brki_hit_synced),
        .Dbg_Clk(Dbg_Clk),
        .async_reset(async_reset),
        .dbg_brki_hit(dbg_brki_hit));
  microblaze_microblaze_0_0_mb_sync_vec \Serial_Dbg_Intf.sync_dbg_hit 
       (.Config_Reset(Config_Reset),
        .D(sync),
        .Dbg_Clk(Dbg_Clk),
        .Raw(Raw),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .async_reset(async_reset));
  microblaze_microblaze_0_0_mb_sync_bit__parameterized4 \Serial_Dbg_Intf.sync_dbg_wakeup 
       (.Clk(Clk),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out[34:33]),
        .\Serial_Dbg_Intf.force_stop_cmd_i_reg (\Serial_Dbg_Intf.sync_dbg_wakeup_n_0 ),
        .dbg_continue_i_reg(\Serial_Dbg_Intf.normal_stop_cmd_i_reg_n_0 ),
        .dbg_continue_i_reg_0(\Serial_Dbg_Intf.if_debug_ready_i_reg_0 ),
        .dbg_continue_i_reg_1(\Performance_Debug_Control.dbg_stop_i_reg_n_0 ),
        .dbg_continue_i_reg_2(\Serial_Dbg_Intf.force_stop_cmd_i_reg_n_0 ),
        .dbg_continue_i_reg_3(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .if0_pause(if0_pause),
        .start_single_cmd(start_single_cmd),
        .sync_reset(reset_bool_for_rst));
  microblaze_microblaze_0_0_mb_sync_bit__parameterized2_9 \Serial_Dbg_Intf.sync_pause 
       (.D(pause_synced),
        .Dbg_Clk(Dbg_Clk),
        .Pause(Pause),
        .async_reset(async_reset));
  microblaze_microblaze_0_0_mb_sync_bit__parameterized2_10 \Serial_Dbg_Intf.sync_running_clock 
       (.D(running_clock_synced),
        .Dbg_Clk(Dbg_Clk),
        .async_reset(async_reset),
        .running_clock(running_clock));
  microblaze_microblaze_0_0_mb_sync_vec__parameterized1 \Serial_Dbg_Intf.sync_sample 
       (.Clk(Clk),
        .D(normal_stop_TClk),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[0]),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[0]),
        .Dbg_Trig_In(Dbg_Trig_In[0]),
        .Dbg_Trig_Out(Dbg_Trig_Out[0]),
        .Q({\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[0] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[1] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[2] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[3] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[4] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[5] ,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[6] ,p_0_in74_in,\Serial_Dbg_Intf.sample_synced_1_reg_n_0_[8] }),
        .\Serial_Dbg_Intf.trig_ack_out_1_reg (\Serial_Dbg_Intf.sync_sample_n_11 ),
        .\Synchronize.use_sync_reset.sync_reg[1] (force_stop_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (single_Step_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_1 ({command_reg[0],command_reg[1]}),
        .\Synchronize.use_sync_reset.sync_reg[1]_2 (continue_from_brk_TClk),
        .\Synchronize.use_sync_reset.sync_reg[1]_3 (New_Dbg_Instr2_TCK),
        .\Synchronize.use_sync_reset.sync_reg[1]_4 (\Serial_Dbg_Intf.control_reg_reg_n_0_[3] ),
        .\Use_Async_Reset.sync_reset_reg (\Serial_Dbg_Intf.sync_sample_n_12 ),
        .p_11_out(p_11_out),
        .p_79_out(p_79_out),
        .p_86_out(p_86_out),
        .p_89_out(p_89_out),
        .p_91_out(p_91_out),
        .p_94_out(p_94_out),
        .p_97_out(p_97_out),
        .sample_synced(sample_synced),
        .sync_reset(reset_bool_for_rst));
  microblaze_microblaze_0_0_mb_sync_bit__parameterized2_11 \Serial_Dbg_Intf.sync_sleep 
       (.D(sleep_synced),
        .Dbg_Clk(Dbg_Clk),
        .Sleep(Sleep),
        .async_reset(async_reset));
  microblaze_microblaze_0_0_mb_sync_bit__parameterized2_12 \Serial_Dbg_Intf.sync_stop_CPU 
       (.D(\Serial_Dbg_Intf.sync_stop_CPU_n_0 ),
        .Dbg_Clk(Dbg_Clk),
        .\Single_Synchronize.use_async_reset.sync_reg_0 (\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg_0 ),
        .async_reset(async_reset));
  FDRE \Serial_Dbg_Intf.trig_ack_out_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_11 ),
        .Q(Dbg_Trig_Ack_Out[0]),
        .R(1'b0));
  FDRE \Serial_Dbg_Intf.trig_in_1_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_sample_n_12 ),
        .Q(Dbg_Trig_In[0]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000040)) 
    \Serial_Dbg_Intf.unchanged_i_1 
       (.I0(Dbg_Reg_En_2_sn_1),
        .I1(Dbg_Reg_En[6]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[5]),
        .I4(Dbg_Reg_En[4]),
        .I5(unchanged),
        .O(\Serial_Dbg_Intf.unchanged_i_1_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \Serial_Dbg_Intf.unchanged_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(config_with_scan_reset),
        .D(\Serial_Dbg_Intf.unchanged_i_1_n_0 ),
        .Q(unchanged));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__102 
       (.I0(\Serial_Dbg_Intf.if_debug_ready_i_reg_0 ),
        .O(\Serial_Dbg_Intf.if_debug_ready_i_reg_1 ));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1__13 
       (.I0(LOCKSTEP_Master_Out[35]),
        .I1(ex_Interrupt),
        .O(\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__33 
       (.I0(\Serial_Dbg_Intf.if_debug_ready_i_reg_0 ),
        .O(S));
  microblaze_microblaze_0_0_address_hit \Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I 
       (.Address(Address),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_TDI(Dbg_TDI),
        .Hit(\Using_PC_Breakpoints.All_PC_Brks[0].Serial_Interface_1.address_hit_I_n_1 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_i_3 (\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg_0 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_i_3_0 (\Performance_Debug_Control.dbg_stop_i_reg_n_0 ),
        .Q(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .force_stop_i(force_stop_i),
        .single_Step_N(single_Step_N),
        .single_Step_N_reg(single_Step_N_reg_0));
  LUT2 #(
    .INIT(4'hE)) 
    command_reg_clear_i_1
       (.I0(read_register_PC_1),
        .I1(read_register_MSR_1),
        .O(command_reg_clear_i_1_n_0));
  FDRE command_reg_clear_reg
       (.C(Clk),
        .CE(1'b1),
        .D(command_reg_clear_i_1_n_0),
        .Q(command_reg_clear),
        .R(reset_bool_for_rst));
  LUT4 #(
    .INIT(16'hFEEE)) 
    \data_rd_reg[0]_i_1 
       (.I0(read_register_PC_1),
        .I1(read_register_MSR_1),
        .I2(\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg_0 ),
        .I3(wb_gpr_wr_dbg),
        .O(\data_rd_reg[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hF2AAF3FFF2AAF000)) 
    \data_rd_reg[32]_i_1 
       (.I0(\data_rd_reg[32]_i_2_n_0 ),
        .I1(\Serial_Dbg_Intf.if_debug_ready_i_reg_0 ),
        .I2(wb_gpr_wr_dbg),
        .I3(\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg_0 ),
        .I4(\data_rd_reg[32]_i_3_n_0 ),
        .I5(data_rd_reg[32]),
        .O(\data_rd_reg[32]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \data_rd_reg[32]_i_2 
       (.I0(\Performance_Debug_Control.dbg_freeze_nohalt_reg_0 ),
        .I1(wb_pc_valid),
        .I2(read_register_MSR_1),
        .O(\data_rd_reg[32]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \data_rd_reg[32]_i_3 
       (.I0(read_register_MSR_1),
        .I1(read_register_PC_1),
        .O(\data_rd_reg[32]_i_3_n_0 ));
  FDRE \data_rd_reg_reg[0] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [31]),
        .Q(data_rd_reg[0]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[10] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [21]),
        .Q(data_rd_reg[10]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[11] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [20]),
        .Q(data_rd_reg[11]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[12] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [19]),
        .Q(data_rd_reg[12]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[13] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [18]),
        .Q(data_rd_reg[13]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[14] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [17]),
        .Q(data_rd_reg[14]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[15] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [16]),
        .Q(data_rd_reg[15]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[16] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [15]),
        .Q(data_rd_reg[16]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[17] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [14]),
        .Q(data_rd_reg[17]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[18] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [13]),
        .Q(data_rd_reg[18]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[19] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [12]),
        .Q(data_rd_reg[19]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[1] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [30]),
        .Q(data_rd_reg[1]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[20] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [11]),
        .Q(data_rd_reg[20]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[21] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [10]),
        .Q(data_rd_reg[21]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[22] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [9]),
        .Q(data_rd_reg[22]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[23] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [8]),
        .Q(data_rd_reg[23]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[24] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [7]),
        .Q(data_rd_reg[24]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[25] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [6]),
        .Q(data_rd_reg[25]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[26] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [5]),
        .Q(data_rd_reg[26]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[27] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [4]),
        .Q(data_rd_reg[27]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[28] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [3]),
        .Q(data_rd_reg[28]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[29] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [2]),
        .Q(data_rd_reg[29]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[2] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [29]),
        .Q(data_rd_reg[2]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[30] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [1]),
        .Q(data_rd_reg[30]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[31] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [0]),
        .Q(data_rd_reg[31]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[32] 
       (.C(Clk),
        .CE(1'b1),
        .D(\data_rd_reg[32]_i_1_n_0 ),
        .Q(data_rd_reg[32]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[3] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [28]),
        .Q(data_rd_reg[3]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[4] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [27]),
        .Q(data_rd_reg[4]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[5] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [26]),
        .Q(data_rd_reg[5]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[6] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [25]),
        .Q(data_rd_reg[6]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[7] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [24]),
        .Q(data_rd_reg[7]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[8] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [23]),
        .Q(data_rd_reg[8]),
        .R(reset_bool_for_rst));
  FDRE \data_rd_reg_reg[9] 
       (.C(Clk),
        .CE(\data_rd_reg[0]_i_1_n_0 ),
        .D(\data_rd_reg_reg[0]_0 [22]),
        .Q(data_rd_reg[9]),
        .R(reset_bool_for_rst));
  FDRE dbg_continue_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.sync_dbg_wakeup_n_0 ),
        .Q(LOCKSTEP_Master_Out[33]),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'h4400440F44004400)) 
    dbg_halt_reset_mode_i_1
       (.I0(Reset_Mode[1]),
        .I1(Reset_Mode[0]),
        .I2(step_continue__0),
        .I3(reset_bool_for_rst),
        .I4(\Serial_Dbg_Intf.control_reg_reg_n_0_[0] ),
        .I5(dbg_halt_reset_mode_reg_0),
        .O(dbg_halt_reset_mode_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT2 #(
    .INIT(4'hE)) 
    dbg_halt_reset_mode_i_2
       (.I0(start_single_step_reg_n_0),
        .I1(\Serial_Dbg_Intf.continue_from_brk_reg_n_0 ),
        .O(step_continue__0));
  FDRE dbg_halt_reset_mode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(dbg_halt_reset_mode_i_1_n_0),
        .Q(dbg_halt_reset_mode_reg_0),
        .R(1'b0));
  FDRE delay_slot_instr_reg
       (.C(Clk),
        .CE(wb_halted),
        .D(wb_delay_slot),
        .Q(delay_slot_instr),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'h4055400000000000)) 
    exception_i_1
       (.I0(start_dbg_exec_reg_n_0),
        .I1(\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg_0 ),
        .I2(exception_reg_0[0]),
        .I3(exception_reg_0[1]),
        .I4(instr_rd_reg[1]),
        .I5(exception_i_2_n_0),
        .O(exception_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT2 #(
    .INIT(4'h1)) 
    exception_i_2
       (.I0(force_stop_overrun),
        .I1(reset_bool_for_rst),
        .O(exception_i_2_n_0));
  FDRE exception_reg
       (.C(Clk),
        .CE(1'b1),
        .D(exception_i_1_n_0),
        .Q(instr_rd_reg[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT5 #(
    .INIT(32'h11001110)) 
    executing_i_1
       (.I0(reset_bool_for_rst),
        .I1(force_stop_overrun),
        .I2(instr_rd_reg[0]),
        .I3(start_dbg_exec_reg_n_0),
        .I4(exception_reg_0[1]),
        .O(executing_i_1_n_0));
  FDRE executing_reg
       (.C(Clk),
        .CE(1'b1),
        .D(executing_i_1_n_0),
        .Q(instr_rd_reg[0]),
        .R(1'b0));
  FDRE mb_halted_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(mb_halted_1),
        .R(reset_bool_for_rst));
  FDRE read_register_MSR_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_MSR),
        .Q(read_register_MSR_1),
        .R(reset_bool_for_rst));
  FDRE read_register_PC_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(read_register_PC),
        .Q(read_register_PC_1),
        .R(reset_bool_for_rst));
  LUT4 #(
    .INIT(16'h00CA)) 
    running_clock_i_1
       (.I0(capture_1),
        .I1(Scan_Reset),
        .I2(Scan_Reset_Sel),
        .I3(Scan_En),
        .O(running_clock_rst19_out));
  FDCE #(
    .INIT(1'b0)) 
    running_clock_reg
       (.C(Clk),
        .CE(1'b1),
        .CLR(running_clock_rst19_out),
        .D(1'b1),
        .Q(running_clock));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT4 #(
    .INIT(16'h2F20)) 
    saved_reset_mode_dbg_halt_i_1
       (.I0(Reset_Mode[0]),
        .I1(Reset_Mode[1]),
        .I2(reset_bool_for_rst),
        .I3(saved_reset_mode_dbg_halt),
        .O(saved_reset_mode_dbg_halt_i_1_n_0));
  FDRE saved_reset_mode_dbg_halt_reg
       (.C(Clk),
        .CE(1'b1),
        .D(saved_reset_mode_dbg_halt_i_1_n_0),
        .Q(saved_reset_mode_dbg_halt),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT4 #(
    .INIT(16'h0ACA)) 
    saved_reset_mode_sleep_i_1
       (.I0(Sleep_Out),
        .I1(Reset_Mode[1]),
        .I2(reset_bool_for_rst),
        .I3(Reset_Mode[0]),
        .O(saved_reset_mode_sleep_i_1_n_0));
  FDRE saved_reset_mode_sleep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(saved_reset_mode_sleep_i_1_n_0),
        .Q(saved_reset_mode_sleep),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hFB)) 
    single_Step_N_i_1
       (.I0(single_step_count[1]),
        .I1(start_single_step_reg_n_0),
        .I2(single_step_count[0]),
        .O(single_Step_N_i_1_n_0));
  FDSE single_Step_N_reg
       (.C(Clk),
        .CE(of_piperun_for_ce),
        .D(single_Step_N_i_1_n_0),
        .Q(single_Step_N),
        .S(reset_bool_for_rst));
  LUT5 #(
    .INIT(32'hCCAF33A0)) 
    \single_step_count[0]_i_1 
       (.I0(\Serial_Dbg_Intf.control_reg_reg_n_0_[4] ),
        .I1(single_step_count[1]),
        .I2(start_single_cmd),
        .I3(of_piperun_for_ce),
        .I4(single_step_count[0]),
        .O(\single_step_count[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0BF8)) 
    \single_step_count[1]_i_1 
       (.I0(\Serial_Dbg_Intf.control_reg_reg_n_0_[5] ),
        .I1(start_single_cmd),
        .I2(of_piperun_for_ce),
        .I3(single_step_count[1]),
        .O(\single_step_count[1]_i_1_n_0 ));
  FDRE \single_step_count_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\single_step_count[0]_i_1_n_0 ),
        .Q(single_step_count[0]),
        .R(reset_bool_for_rst));
  FDRE \single_step_count_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\single_step_count[1]_i_1_n_0 ),
        .Q(single_step_count[1]),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'hAAABBBBBAAA88888)) 
    sleep_reset_mode_i_1
       (.I0(sleep_reset_mode),
        .I1(reset_bool_for_rst),
        .I2(wakeup_i[1]),
        .I3(wakeup_i[0]),
        .I4(saved_reset_mode_sleep),
        .I5(Sleep_Out),
        .O(sleep_reset_mode_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT3 #(
    .INIT(8'h40)) 
    sleep_reset_mode_i_2
       (.I0(Reset_Mode[0]),
        .I1(reset_bool_for_rst),
        .I2(Reset_Mode[1]),
        .O(sleep_reset_mode));
  FDRE sleep_reset_mode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sleep_reset_mode_i_1_n_0),
        .Q(Sleep_Out),
        .R(1'b0));
  FDRE start_dbg_exec_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Serial_Dbg_Intf.if_debug_ready_i_reg_0 ),
        .Q(start_dbg_exec_reg_n_0),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'h3322302233223322)) 
    start_single_step_i_1
       (.I0(start_single_cmd),
        .I1(reset_bool_for_rst),
        .I2(single_step_count[1]),
        .I3(start_single_step_reg_n_0),
        .I4(single_step_count[0]),
        .I5(of_piperun_for_ce),
        .O(start_single_step_i_1_n_0));
  FDRE start_single_step_reg
       (.C(Clk),
        .CE(1'b1),
        .D(start_single_step_i_1_n_0),
        .Q(start_single_step_reg_n_0),
        .R(1'b0));
  microblaze_microblaze_0_0_mb_sync_bit__parameterized4_13 sync_trig_ack_in_0
       (.Clk(Clk),
        .D(D),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In[1]),
        .Dbg_Trig_In(Dbg_Trig_In[1]),
        .mb_halted_1(mb_halted_1),
        .sync_reset(reset_bool_for_rst),
        .trig_ack_in_0_synced(trig_ack_in_0_synced),
        .trig_ack_in_0_synced_1(trig_ack_in_0_synced_1),
        .trig_in_0_reg(sync_trig_ack_in_0_n_1));
  microblaze_microblaze_0_0_mb_sync_bit__parameterized4_14 sync_trig_out_0
       (.Clk(Clk),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out[1]),
        .Dbg_Trig_Out(Dbg_Trig_Out[1]),
        .\Performance_Debug_Control.trig_ack_out_0_reg (sync_trig_out_0_n_1),
        .sync_reset(reset_bool_for_rst),
        .trig_out_0_synced(trig_out_0_synced),
        .trig_out_0_synced_1(trig_out_0_synced_1));
  FDRE trig_ack_in_0_synced_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(trig_ack_in_0_synced),
        .Q(trig_ack_in_0_synced_1),
        .R(reset_bool_for_rst));
  FDRE trig_in_0_reg
       (.C(Clk),
        .CE(1'b1),
        .D(sync_trig_ack_in_0_n_1),
        .Q(Dbg_Trig_In[1]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "Decode_ff" *) 
module microblaze_microblaze_0_0_Decode_ff
   (if0_pause,
    \Use_Async_Reset.sync_reset_reg ,
    kill_fetch_mmu,
    of_piperun,
    Q,
    ex_raw_valid_reg_0,
    EX_Op1_CMP_Equal,
    ex_op1_cmp_equal_n,
    wb_gpr_wr_dbg,
    m2_is_div_instr,
    m3_div_zero_overflow_ex_hold,
    bp1_raw_valid_reg_0,
    \Using_FPGA.Native ,
    bp1_raw_valid_reg_1,
    if2_raw_valid_reg_0,
    if1_insert_piperun_i,
    S_0,
    if2_piperun,
    if3_raw_valid_reg_0,
    if3_piperun,
    if4_raw_valid_reg_0,
    if4_piperun,
    m0_piperun,
    m1_piperun,
    m2_piperun,
    m3_piperun,
    m2_raw_valid_reg_0,
    m3_raw_valid_reg_0,
    ex_Interrupt,
    bp0_raw_valid_reg_0,
    active_wakeup,
    Pause_Ack,
    wb_read_imm_reg,
    wb_read_imm_reg_1,
    wb_pc_valid,
    D,
    EX_Enable_ALU,
    ex_alu_sel_logic,
    ex_cmp_op,
    ex_unsigned_op,
    ex_use_carry,
    ex_sel_alu_res,
    ex_pattern_cmp_sel,
    ex_clz_instr,
    ex_enable_sext_shift,
    ex_sel_barrel_res,
    ex_arith_shift,
    ex_bit_insert,
    ex_bit_extract,
    m0_sel_barrel_res,
    ex_div_unsigned,
    \Using_Mul_Instr.ex_not_mul_op_i_reg_0 ,
    m0_not_mul_op_i_reg_0,
    m1_sel_mul_res,
    m2_databus_access_i_reg_0,
    m3_sel_load_res,
    wb_databus_access,
    wb_databus_read,
    wb_databus_write,
    m1_byte_access,
    m1_doublet_access,
    wb_byte_access,
    wb_doublet_access,
    wb_msr_clear_bip,
    wb_div_zero_overflow,
    wb_delay_slot,
    trace_wb_jump_taken,
    \EX_Logic_Op_reg[0]_0 ,
    ex_mbar_decode,
    if0_raw_valid,
    Hibernate,
    Suspend,
    Sleep_Decode,
    m3_sel_div_res,
    ex_is_div_instr_i_reg_0,
    wb_exception_from_m3_reg_rep_0,
    wb_exception_from_m3_reg_rep__0_0,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    wb_exception_taken,
    LOCKSTEP_Master_Out,
    p_4_out__0,
    \wb_exception_raw_kind_reg[31]_0 ,
    ex_dbg_pc_hit_i,
    \Use_DLMB.m2_potential_bubble_reg ,
    \Use_Async_Reset.sync_reset_reg_0 ,
    \Use_Async_Reset.sync_reset_reg_1 ,
    \Use_Async_Reset.sync_reset_reg_2 ,
    m1_databus_write_from_m0_reg_0,
    m1_databus_write_from_m0_reg_1,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ,
    \Use_Async_Reset.sync_reset_reg_3 ,
    Sleep,
    \Using_FPGA.Native_0 ,
    single_Step_N_reg,
    wb_halted,
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ,
    \cur_data_i_reg[26] ,
    \m3_PC_i_reg[0] ,
    S,
    EX_Enable_Sext_Shift_reg_0,
    EX_Enable_Sext_Shift_reg_1,
    EX_Bit_Insert_reg_0,
    EX_Bit_Insert_reg_1,
    EX_Bit_Extract_reg_0,
    m1_databus_addr_from_m0_reg_0,
    m1_databus_access_from_m0_reg_0,
    if2_ibus_first_cycle_raw_reg_0,
    \Use_DAXI.M_AXI_DP_BREADY_I_reg ,
    \Use_DAXI.M_AXI_DP_RREADY_I_reg ,
    \Use_ILMB.if2_ilmb_issued_reg ,
    \Use_DLMB.m1_dlmb_issued_reg ,
    \m3_PC_i_reg[23] ,
    \m3_PC_i_reg[19] ,
    \m3_PC_i_reg[15] ,
    \m3_PC_i_reg[11] ,
    \m3_PC_i_reg[7] ,
    \m3_PC_i_reg[3] ,
    \m3_PC_i_reg[1] ,
    \cur_data_i_reg[31] ,
    of_op3_sel,
    \Using_FPGA.Native_1 ,
    \m3_gpr_write_addr_reg[3]_0 ,
    of_op2_sel,
    \cur_data_i_reg[6] ,
    of_is_div_instr,
    ex_sleep_i0,
    \of_MSR_i_reg[22] ,
    ex_msrset,
    ex_msrclr,
    bp1_dead_fetch_hold_bt,
    bp1_dead_fetch_hold_reg_0,
    if2_ibus_access_raw0,
    ex_start_div,
    trace_wb_valid_instr,
    wb_exception_from_m3_reg_0,
    wb_msr_clear_ie,
    wb_gpr_wr,
    ADDRD,
    \wb_gpr_write_addr_reg[1]_0 ,
    wb_reset_reg_0,
    DI,
    EX_CLZ_Instr_reg_0,
    m2_m1_sel_res_reg,
    \EX_Op3[0]_i_6 ,
    \EX_Op3[0]_i_7 ,
    \m1_M0_Result_i_reg[0] ,
    EX_Enable_Sext_Shift_reg_2,
    \m1_M0_Result_i_reg[2] ,
    \m1_M0_Result_i_reg[5] ,
    \m1_M0_Result_i_reg[8] ,
    \m1_M0_Result_i_reg[9] ,
    \m1_M0_Result_i_reg[12] ,
    \m1_M0_Result_i_reg[13] ,
    \m1_M0_Result_i_reg[14] ,
    \WB_Exception_Return_Addr_reg[16] ,
    \WB_Exception_Return_Addr_reg[18] ,
    \WB_Exception_Return_Addr_reg[21] ,
    \WB_Exception_Return_Addr_reg[25] ,
    M1_Sel_Mul_Res_reg_0,
    ex_sel_alu_reg_0,
    m2_m1_sel_res_reg_0,
    \EX_Op2[0]_i_6 ,
    \EX_Op2[0]_i_7 ,
    \WB_Exception_Return_Addr_reg[20] ,
    \WB_Exception_Return_Addr_reg[17] ,
    \m1_M0_Result_i_reg[1] ,
    \m1_M0_Result_i_reg[3] ,
    \m1_M0_Result_i_reg[4] ,
    \m1_M0_Result_i_reg[6] ,
    \m1_M0_Result_i_reg[7] ,
    \m1_M0_Result_i_reg[10] ,
    \m1_M0_Result_i_reg[11] ,
    \m1_M0_Result_i_reg[15] ,
    M1_Sel_Mul_Res_reg_1,
    \cur_data_i_reg[31]_0 ,
    \m2_M1_Result_i_reg[29] ,
    \EX_Branch_CMP_Op1[29]_i_3 ,
    \EX_Branch_CMP_Op1[30]_i_3 ,
    \cur_data_i_reg[3] ,
    \cur_data_i_reg[4] ,
    \cur_data_i_reg[5] ,
    \cur_data_i_reg[7] ,
    \cur_data_i_reg[8] ,
    \cur_data_i_reg[9] ,
    \cur_data_i_reg[12] ,
    floating_hold_div_by_zero_reg,
    floating_hold_div_by_zero_reg_0,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \EX_Op2_reg[17] ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    wb_exception_from_m3_reg_rep__0_1,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    D_1,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    WB_Div_Zero_Overflow_reg_0,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    SR,
    wb_exception_from_m3_reg_rep_1,
    div_busy_reg,
    WB_Div_Zero_Overflow_reg_1,
    WB_Div_Zero_Overflow_reg_2,
    WB_Div_Zero_Overflow_reg_3,
    \wb_exception_raw_kind_reg[31]_1 ,
    WB_Div_Zero_Overflow_reg_4,
    wb_exception_from_m3_reg_rep__0_2,
    wb_exception_from_m3_reg_rep__0_3,
    wb_exception_from_m3_reg_rep__0_4,
    wb_exception_from_m3_reg_rep__0_5,
    S_2,
    m2_m1_sel_res0,
    \EX_Sext_Op_reg[0]_0 ,
    WB_Doublet_Access_reg_0,
    \EX_Op2_reg[29] ,
    EX_Pattern_Cmp_Sel_reg_0,
    \EX_Sext_Op_reg[1]_0 ,
    \EX_Op1_reg[28] ,
    \EX_Op1_reg[27] ,
    ex_sel_alu_reg_1,
    in0,
    WB_Doublet_Access_reg_1,
    \EX_Op2_reg[31] ,
    \EX_Op2_reg[31]_0 ,
    \EX_Op1_reg[30] ,
    \EX_Op1_reg[3] ,
    \EX_Op1_reg[1] ,
    ex_left_shift_i,
    \EX_Op1_reg[31] ,
    ex_void_bit,
    DI_3,
    \EX_ALU_Op_reg[0]_0 ,
    WB_Div_Zero_Overflow_reg_5,
    WB_MSR_Clear_BIP_reg_0,
    m1_m0_sel_res0,
    wb_m3_sel_res0,
    Interrupt_Ack,
    bp0_dead_fetch_hold,
    \wb_instr_i_reg[0]_0 ,
    \Using_FPGA.Native_17 ,
    sync_reset,
    Pause,
    Clk,
    EX_Op1_Zero,
    \Using_FPGA.Native_18 ,
    if4_ibus_access_i_reg_0,
    if4_ready,
    \Use_ILMB.if4_ILMB_Data_Strobe_i_reg ,
    \Using_FPGA.Native_19 ,
    m3_databus_ready,
    \Using_FPGA.Native_20 ,
    WB_MSR_Set_IE_reg_0,
    \m0_exception_raw_kind_reg[31]_0 ,
    p_55_out,
    p_2_in,
    M1_Sel_Mul_Res_reg_2,
    WB_Div_Zero_Overflow_reg_6,
    if2_raw_valid_reg_1,
    if3_raw_valid_reg_1,
    if4_raw_valid_reg_1,
    ex_mbar_decode_reg_0,
    bp1_raw_valid_reg_2,
    if0_raw_valid_reg_0,
    ex_hibernate_i_reg_0,
    ex_suspend_i_reg_0,
    ex_sleep_i_reg_0,
    if2_ibus_access_raw_reg_0,
    m3_is_div_instr_i_reg_0,
    ex_is_div_instr_i_reg_1,
    \Performance_Debug_Control.ex_brki_hit_reg ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ,
    bp0_raw_valid_reg_1,
    bp0_raw_valid_reg_2,
    \Performance_Debug_Control.dbg_freeze_nohalt_reg ,
    \wb_PC_i_reg[31] ,
    m2_potential_bubble,
    m2_dlmb_dready,
    m3_active_access,
    \Use_DLMB.m2_dready_hold_reg ,
    \Use_ILMB.if3_iready_hold_reg ,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ,
    \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ,
    M_AXI_DP_AWREADY,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ,
    M_AXI_DP_WREADY,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ,
    M_AXI_DP_RVALID,
    M_AXI_DP_BVALID,
    if3_potential_bubble,
    if3_ilmb_iready,
    Sleep_Out,
    normal_stop_i,
    single_Step_N,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ,
    \Using_FPGA.Native_21 ,
    ex_MSR_i,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \EX_Op1[29]_i_5 ,
    \EX_Op1[29]_i_5_0 ,
    \EX_Op1[29]_i_5_1 ,
    \EX_Op1[30]_i_5 ,
    \EX_Op1[30]_i_5_0 ,
    \EX_Op1[30]_i_5_1 ,
    \Use_HW_BS.Using_BitField.mem_mask0_reg[15] ,
    \Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ,
    \Use_HW_BS.Using_BitField.mem_mask0_reg[9] ,
    \Use_HW_BS.Using_BitField.mem_mask0_reg[6] ,
    DWait,
    m2_allow_dready,
    m2_dlmb_drop_request,
    \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ,
    IWAIT,
    if3_allow_iready,
    \Use_DAXI.M_AXI_DP_WDATA_reg[23] ,
    if2_ilmb_issued,
    m1_dlmb_issued,
    \cur_data_i_reg[31]_1 ,
    if4_data,
    in,
    Interrupt,
    ex_Interrupt_raw_reg_0,
    m3_div_overflow,
    m3_div_by_zero,
    \bp0_branch_target_reg[0]_0 ,
    \bp0_branch_target_reg[0]_1 ,
    ex_alu_result,
    DReady,
    \Using_FPGA.Native_24 ,
    wakeup_i,
    m3_div_stall,
    \EX_Op3_reg[30] ,
    GPR_Op3,
    \EX_Op3_reg[31] ,
    wb_fwd,
    \EX_Op2_reg[31]_1 ,
    \EX_Op2_reg[31]_2 ,
    \EX_Op2_reg[31]_3 ,
    \EX_Op2_reg[0] ,
    \EX_Op2_reg[0]_0 ,
    \EX_Op2_reg[2] ,
    \EX_Op2_reg[2]_0 ,
    \EX_Op2_reg[5] ,
    \EX_Op2_reg[5]_0 ,
    \EX_Op2_reg[8] ,
    \EX_Op2_reg[8]_0 ,
    \EX_Op2_reg[9] ,
    \EX_Op2_reg[9]_0 ,
    \EX_Op2_reg[12] ,
    \EX_Op2_reg[12]_0 ,
    \EX_Op2_reg[13] ,
    \EX_Op2_reg[13]_0 ,
    \EX_Op2_reg[14] ,
    \EX_Op2_reg[14]_0 ,
    \EX_Op2_reg[16] ,
    \EX_Op2_reg[18] ,
    \EX_Op2_reg[21] ,
    \EX_Op2_reg[25] ,
    \EX_Op2[25]_i_2 ,
    GPR_Op2,
    \EX_Op2_reg[29]_0 ,
    \EX_Op2_reg[29]_1 ,
    \EX_Op2_reg[31]_4 ,
    \EX_Op2_reg[20] ,
    \EX_Op2_reg[17]_0 ,
    \EX_Op2_reg[1] ,
    \EX_Op2_reg[1]_0 ,
    \EX_Op2_reg[3] ,
    \EX_Op2_reg[3]_0 ,
    \EX_Op2_reg[4] ,
    \EX_Op2_reg[4]_0 ,
    \EX_Op2_reg[6] ,
    \EX_Op2_reg[6]_0 ,
    \EX_Op2_reg[7] ,
    \EX_Op2_reg[7]_0 ,
    \EX_Op2_reg[10] ,
    \EX_Op2_reg[10]_0 ,
    \EX_Op2_reg[11] ,
    \EX_Op2_reg[11]_0 ,
    \EX_Op2_reg[15] ,
    \EX_Op2_reg[15]_0 ,
    \EX_Op2[16]_i_2 ,
    \EX_Op2_reg[30] ,
    \EX_Op1_reg[0] ,
    \of_MSR_i_reg[22]_0 ,
    \EX_Op1_reg[29] ,
    \EX_Branch_CMP_Op1_reg[29] ,
    \EX_Branch_CMP_Op1_reg[29]_0 ,
    \EX_Op1_reg[29]_0 ,
    \EX_Op1_reg[30]_0 ,
    \EX_Branch_CMP_Op1_reg[30] ,
    GPR_Op1,
    \EX_Op1_reg[31]_0 ,
    \EX_Op1_reg[31]_1 ,
    \EX_Branch_CMP_Op1_reg[30]_0 ,
    \EX_Branch_CMP_Op1_reg[30]_1 ,
    \EX_Op2[0]_i_4 ,
    floating_hold_div_by_zero__0,
    floating_hold_div_overflow_reg,
    last_cycle,
    floating_hold_div_overflow_reg_0,
    m3_div_overflow_i_reg,
    \of_MSR_i_reg[25] ,
    \Using_FPGA.Native_25 ,
    \Use_HW_BS.mem_mux3_reg[28] ,
    wb_MSR_i,
    EX_CarryIn,
    LO,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Q_reg[32] ,
    E,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \of_MSR_i_reg[25]_0 ,
    \of_MSR_i_reg[25]_1 ,
    \Using_FPGA.Native_31 ,
    m3_msr,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \m0_Ex_Result_i_reg[30] ,
    \EX_Op3[30]_i_2 ,
    \EX_Op3[31]_i_3 ,
    \EX_Op3[31]_i_3_0 ,
    \m0_Ex_Result_i_reg[30]_0 ,
    \m0_Ex_Result_i_reg[30]_1 ,
    \m0_Ex_Result_i_reg[30]_2 ,
    m1_m0_sel_res,
    out,
    \trace_new_reg_value_i[24]_i_2 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    m0_ex_sel_res,
    m3_m2_sel_res,
    \Use_DAXI.M_AXI_DP_WDATA_reg[23]_0 ,
    m1_unaligned_addr_3lsb,
    \Using_FPGA.Native_36 ,
    WB_Exception_Return_Addr0,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output if0_pause;
  output \Use_Async_Reset.sync_reset_reg ;
  output kill_fetch_mmu;
  output of_piperun;
  output [25:0]Q;
  output ex_raw_valid_reg_0;
  output EX_Op1_CMP_Equal;
  output ex_op1_cmp_equal_n;
  output wb_gpr_wr_dbg;
  output m2_is_div_instr;
  output m3_div_zero_overflow_ex_hold;
  output bp1_raw_valid_reg_0;
  output \Using_FPGA.Native ;
  output bp1_raw_valid_reg_1;
  output if2_raw_valid_reg_0;
  output if1_insert_piperun_i;
  output S_0;
  output if2_piperun;
  output if3_raw_valid_reg_0;
  output if3_piperun;
  output if4_raw_valid_reg_0;
  output if4_piperun;
  output m0_piperun;
  output m1_piperun;
  output m2_piperun;
  output m3_piperun;
  output m2_raw_valid_reg_0;
  output m3_raw_valid_reg_0;
  output ex_Interrupt;
  output bp0_raw_valid_reg_0;
  output active_wakeup;
  output Pause_Ack;
  output wb_read_imm_reg;
  output wb_read_imm_reg_1;
  output wb_pc_valid;
  output [47:0]D;
  output EX_Enable_ALU;
  output ex_alu_sel_logic;
  output ex_cmp_op;
  output ex_unsigned_op;
  output ex_use_carry;
  output ex_sel_alu_res;
  output ex_pattern_cmp_sel;
  output ex_clz_instr;
  output ex_enable_sext_shift;
  output ex_sel_barrel_res;
  output ex_arith_shift;
  output ex_bit_insert;
  output ex_bit_extract;
  output m0_sel_barrel_res;
  output ex_div_unsigned;
  output \Using_Mul_Instr.ex_not_mul_op_i_reg_0 ;
  output m0_not_mul_op_i_reg_0;
  output m1_sel_mul_res;
  output m2_databus_access_i_reg_0;
  output m3_sel_load_res;
  output wb_databus_access;
  output wb_databus_read;
  output wb_databus_write;
  output m1_byte_access;
  output m1_doublet_access;
  output wb_byte_access;
  output wb_doublet_access;
  output wb_msr_clear_bip;
  output wb_div_zero_overflow;
  output wb_delay_slot;
  output trace_wb_jump_taken;
  output [3:0]\EX_Logic_Op_reg[0]_0 ;
  output ex_mbar_decode;
  output if0_raw_valid;
  output Hibernate;
  output Suspend;
  output Sleep_Decode;
  output m3_sel_div_res;
  output ex_is_div_instr_i_reg_0;
  output wb_exception_from_m3_reg_rep_0;
  output wb_exception_from_m3_reg_rep__0_0;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  output wb_exception_taken;
  output [1:0]LOCKSTEP_Master_Out;
  output p_4_out__0;
  output \wb_exception_raw_kind_reg[31]_0 ;
  output ex_dbg_pc_hit_i;
  output \Use_DLMB.m2_potential_bubble_reg ;
  output \Use_Async_Reset.sync_reset_reg_0 ;
  output \Use_Async_Reset.sync_reset_reg_1 ;
  output \Use_Async_Reset.sync_reset_reg_2 ;
  output m1_databus_write_from_m0_reg_0;
  output m1_databus_write_from_m0_reg_1;
  output \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ;
  output \Use_Async_Reset.sync_reset_reg_3 ;
  output Sleep;
  output [0:0]\Using_FPGA.Native_0 ;
  output single_Step_N_reg;
  output wb_halted;
  output \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  output \cur_data_i_reg[26] ;
  output [31:0]\m3_PC_i_reg[0] ;
  output [3:0]S;
  output EX_Enable_Sext_Shift_reg_0;
  output EX_Enable_Sext_Shift_reg_1;
  output EX_Bit_Insert_reg_0;
  output [18:0]EX_Bit_Insert_reg_1;
  output EX_Bit_Extract_reg_0;
  output m1_databus_addr_from_m0_reg_0;
  output m1_databus_access_from_m0_reg_0;
  output if2_ibus_first_cycle_raw_reg_0;
  output \Use_DAXI.M_AXI_DP_BREADY_I_reg ;
  output \Use_DAXI.M_AXI_DP_RREADY_I_reg ;
  output \Use_ILMB.if2_ilmb_issued_reg ;
  output \Use_DLMB.m1_dlmb_issued_reg ;
  output [3:0]\m3_PC_i_reg[23] ;
  output [3:0]\m3_PC_i_reg[19] ;
  output [3:0]\m3_PC_i_reg[15] ;
  output [3:0]\m3_PC_i_reg[11] ;
  output [3:0]\m3_PC_i_reg[7] ;
  output [3:0]\m3_PC_i_reg[3] ;
  output [1:0]\m3_PC_i_reg[1] ;
  output [31:0]\cur_data_i_reg[31] ;
  output [0:2]of_op3_sel;
  output \Using_FPGA.Native_1 ;
  output \m3_gpr_write_addr_reg[3]_0 ;
  output [0:2]of_op2_sel;
  output [1:0]\cur_data_i_reg[6] ;
  output of_is_div_instr;
  output ex_sleep_i0;
  output [3:0]\of_MSR_i_reg[22] ;
  output ex_msrset;
  output ex_msrclr;
  output bp1_dead_fetch_hold_bt;
  output bp1_dead_fetch_hold_reg_0;
  output if2_ibus_access_raw0;
  output ex_start_div;
  output trace_wb_valid_instr;
  output [2:0]wb_exception_from_m3_reg_0;
  output wb_msr_clear_ie;
  output wb_gpr_wr;
  output [4:0]ADDRD;
  output [2:0]\wb_gpr_write_addr_reg[1]_0 ;
  output wb_reset_reg_0;
  output [0:0]DI;
  output EX_CLZ_Instr_reg_0;
  output [0:0]m2_m1_sel_res_reg;
  output \EX_Op3[0]_i_6 ;
  output \EX_Op3[0]_i_7 ;
  output \m1_M0_Result_i_reg[0] ;
  output [16:0]EX_Enable_Sext_Shift_reg_2;
  output \m1_M0_Result_i_reg[2] ;
  output \m1_M0_Result_i_reg[5] ;
  output \m1_M0_Result_i_reg[8] ;
  output \m1_M0_Result_i_reg[9] ;
  output \m1_M0_Result_i_reg[12] ;
  output \m1_M0_Result_i_reg[13] ;
  output \m1_M0_Result_i_reg[14] ;
  output \WB_Exception_Return_Addr_reg[16] ;
  output \WB_Exception_Return_Addr_reg[18] ;
  output \WB_Exception_Return_Addr_reg[21] ;
  output \WB_Exception_Return_Addr_reg[25] ;
  output M1_Sel_Mul_Res_reg_0;
  output ex_sel_alu_reg_0;
  output [0:0]m2_m1_sel_res_reg_0;
  output \EX_Op2[0]_i_6 ;
  output \EX_Op2[0]_i_7 ;
  output \WB_Exception_Return_Addr_reg[20] ;
  output \WB_Exception_Return_Addr_reg[17] ;
  output \m1_M0_Result_i_reg[1] ;
  output \m1_M0_Result_i_reg[3] ;
  output \m1_M0_Result_i_reg[4] ;
  output \m1_M0_Result_i_reg[6] ;
  output \m1_M0_Result_i_reg[7] ;
  output \m1_M0_Result_i_reg[10] ;
  output \m1_M0_Result_i_reg[11] ;
  output \m1_M0_Result_i_reg[15] ;
  output M1_Sel_Mul_Res_reg_1;
  output [31:0]\cur_data_i_reg[31]_0 ;
  output [2:0]\m2_M1_Result_i_reg[29] ;
  output \EX_Branch_CMP_Op1[29]_i_3 ;
  output \EX_Branch_CMP_Op1[30]_i_3 ;
  output \cur_data_i_reg[3] ;
  output \cur_data_i_reg[4] ;
  output \cur_data_i_reg[5] ;
  output \cur_data_i_reg[7] ;
  output \cur_data_i_reg[8] ;
  output \cur_data_i_reg[9] ;
  output \cur_data_i_reg[12] ;
  output floating_hold_div_by_zero_reg;
  output floating_hold_div_by_zero_reg_0;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output [14:0]\EX_Op2_reg[17] ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output wb_exception_from_m3_reg_rep__0_1;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output D_1;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output WB_Div_Zero_Overflow_reg_0;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output [0:0]SR;
  output wb_exception_from_m3_reg_rep_1;
  output [0:0]div_busy_reg;
  output WB_Div_Zero_Overflow_reg_1;
  output WB_Div_Zero_Overflow_reg_2;
  output WB_Div_Zero_Overflow_reg_3;
  output [0:0]\wb_exception_raw_kind_reg[31]_1 ;
  output [1:0]WB_Div_Zero_Overflow_reg_4;
  output wb_exception_from_m3_reg_rep__0_2;
  output wb_exception_from_m3_reg_rep__0_3;
  output wb_exception_from_m3_reg_rep__0_4;
  output wb_exception_from_m3_reg_rep__0_5;
  output S_2;
  output m2_m1_sel_res0;
  output [1:0]\EX_Sext_Op_reg[0]_0 ;
  output WB_Doublet_Access_reg_0;
  output [27:0]\EX_Op2_reg[29] ;
  output EX_Pattern_Cmp_Sel_reg_0;
  output \EX_Sext_Op_reg[1]_0 ;
  output \EX_Op1_reg[28] ;
  output \EX_Op1_reg[27] ;
  output ex_sel_alu_reg_1;
  output in0;
  output WB_Doublet_Access_reg_1;
  output \EX_Op2_reg[31] ;
  output \EX_Op2_reg[31]_0 ;
  output \EX_Op1_reg[30] ;
  output \EX_Op1_reg[3] ;
  output \EX_Op1_reg[1] ;
  output ex_left_shift_i;
  output \EX_Op1_reg[31] ;
  output ex_void_bit;
  output DI_3;
  output [1:0]\EX_ALU_Op_reg[0]_0 ;
  output WB_Div_Zero_Overflow_reg_5;
  output WB_MSR_Clear_BIP_reg_0;
  output m1_m0_sel_res0;
  output wb_m3_sel_res0;
  output [0:1]Interrupt_Ack;
  output bp0_dead_fetch_hold;
  output [31:0]\wb_instr_i_reg[0]_0 ;
  output [30:0]\Using_FPGA.Native_17 ;
  input sync_reset;
  input Pause;
  input Clk;
  input EX_Op1_Zero;
  input \Using_FPGA.Native_18 ;
  input if4_ibus_access_i_reg_0;
  input if4_ready;
  input \Use_ILMB.if4_ILMB_Data_Strobe_i_reg ;
  input \Using_FPGA.Native_19 ;
  input m3_databus_ready;
  input \Using_FPGA.Native_20 ;
  input WB_MSR_Set_IE_reg_0;
  input \m0_exception_raw_kind_reg[31]_0 ;
  input p_55_out;
  input p_2_in;
  input M1_Sel_Mul_Res_reg_2;
  input WB_Div_Zero_Overflow_reg_6;
  input if2_raw_valid_reg_1;
  input if3_raw_valid_reg_1;
  input if4_raw_valid_reg_1;
  input ex_mbar_decode_reg_0;
  input bp1_raw_valid_reg_2;
  input if0_raw_valid_reg_0;
  input ex_hibernate_i_reg_0;
  input ex_suspend_i_reg_0;
  input ex_sleep_i_reg_0;
  input if2_ibus_access_raw_reg_0;
  input m3_is_div_instr_i_reg_0;
  input ex_is_div_instr_i_reg_1;
  input [0:0]\Performance_Debug_Control.ex_brki_hit_reg ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  input bp0_raw_valid_reg_1;
  input bp0_raw_valid_reg_2;
  input \Performance_Debug_Control.dbg_freeze_nohalt_reg ;
  input \wb_PC_i_reg[31] ;
  input m2_potential_bubble;
  input m2_dlmb_dready;
  input m3_active_access;
  input \Use_DLMB.m2_dready_hold_reg ;
  input \Use_ILMB.if3_iready_hold_reg ;
  input \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ;
  input \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ;
  input M_AXI_DP_AWREADY;
  input \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ;
  input M_AXI_DP_WREADY;
  input \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ;
  input \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ;
  input M_AXI_DP_RVALID;
  input M_AXI_DP_BVALID;
  input if3_potential_bubble;
  input if3_ilmb_iready;
  input Sleep_Out;
  input normal_stop_i;
  input single_Step_N;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  input [15:0]\Using_FPGA.Native_21 ;
  input [10:0]ex_MSR_i;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \EX_Op1[29]_i_5 ;
  input \EX_Op1[29]_i_5_0 ;
  input \EX_Op1[29]_i_5_1 ;
  input \EX_Op1[30]_i_5 ;
  input \EX_Op1[30]_i_5_0 ;
  input \EX_Op1[30]_i_5_1 ;
  input \Use_HW_BS.Using_BitField.mem_mask0_reg[15] ;
  input \Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ;
  input \Use_HW_BS.Using_BitField.mem_mask0_reg[9] ;
  input \Use_HW_BS.Using_BitField.mem_mask0_reg[6] ;
  input DWait;
  input m2_allow_dready;
  input m2_dlmb_drop_request;
  input \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ;
  input IWAIT;
  input if3_allow_iready;
  input [9:0]\Use_DAXI.M_AXI_DP_WDATA_reg[23] ;
  input if2_ilmb_issued;
  input m1_dlmb_issued;
  input [31:0]\cur_data_i_reg[31]_1 ;
  input [0:31]if4_data;
  input [0:0]in;
  input Interrupt;
  input [0:0]ex_Interrupt_raw_reg_0;
  input m3_div_overflow;
  input m3_div_by_zero;
  input [31:0]\bp0_branch_target_reg[0]_0 ;
  input [29:0]\bp0_branch_target_reg[0]_1 ;
  input [1:0]ex_alu_result;
  input DReady;
  input \Using_FPGA.Native_24 ;
  input [0:1]wakeup_i;
  input m3_div_stall;
  input \EX_Op3_reg[30] ;
  input [1:0]GPR_Op3;
  input \EX_Op3_reg[31] ;
  input [8:0]wb_fwd;
  input \EX_Op2_reg[31]_1 ;
  input \EX_Op2_reg[31]_2 ;
  input \EX_Op2_reg[31]_3 ;
  input \EX_Op2_reg[0] ;
  input \EX_Op2_reg[0]_0 ;
  input \EX_Op2_reg[2] ;
  input \EX_Op2_reg[2]_0 ;
  input \EX_Op2_reg[5] ;
  input \EX_Op2_reg[5]_0 ;
  input \EX_Op2_reg[8] ;
  input \EX_Op2_reg[8]_0 ;
  input \EX_Op2_reg[9] ;
  input \EX_Op2_reg[9]_0 ;
  input \EX_Op2_reg[12] ;
  input \EX_Op2_reg[12]_0 ;
  input \EX_Op2_reg[13] ;
  input \EX_Op2_reg[13]_0 ;
  input \EX_Op2_reg[14] ;
  input \EX_Op2_reg[14]_0 ;
  input \EX_Op2_reg[16] ;
  input \EX_Op2_reg[18] ;
  input \EX_Op2_reg[21] ;
  input \EX_Op2_reg[25] ;
  input \EX_Op2[25]_i_2 ;
  input [0:31]GPR_Op2;
  input \EX_Op2_reg[29]_0 ;
  input \EX_Op2_reg[29]_1 ;
  input \EX_Op2_reg[31]_4 ;
  input \EX_Op2_reg[20] ;
  input \EX_Op2_reg[17]_0 ;
  input \EX_Op2_reg[1] ;
  input \EX_Op2_reg[1]_0 ;
  input \EX_Op2_reg[3] ;
  input \EX_Op2_reg[3]_0 ;
  input \EX_Op2_reg[4] ;
  input \EX_Op2_reg[4]_0 ;
  input \EX_Op2_reg[6] ;
  input \EX_Op2_reg[6]_0 ;
  input \EX_Op2_reg[7] ;
  input \EX_Op2_reg[7]_0 ;
  input \EX_Op2_reg[10] ;
  input \EX_Op2_reg[10]_0 ;
  input \EX_Op2_reg[11] ;
  input \EX_Op2_reg[11]_0 ;
  input \EX_Op2_reg[15] ;
  input \EX_Op2_reg[15]_0 ;
  input [6:0]\EX_Op2[16]_i_2 ;
  input \EX_Op2_reg[30] ;
  input [28:0]\EX_Op1_reg[0] ;
  input [4:0]\of_MSR_i_reg[22]_0 ;
  input \EX_Op1_reg[29] ;
  input \EX_Branch_CMP_Op1_reg[29] ;
  input \EX_Branch_CMP_Op1_reg[29]_0 ;
  input \EX_Op1_reg[29]_0 ;
  input \EX_Op1_reg[30]_0 ;
  input \EX_Branch_CMP_Op1_reg[30] ;
  input [2:0]GPR_Op1;
  input \EX_Op1_reg[31]_0 ;
  input \EX_Op1_reg[31]_1 ;
  input \EX_Branch_CMP_Op1_reg[30]_0 ;
  input \EX_Branch_CMP_Op1_reg[30]_1 ;
  input [15:0]\EX_Op2[0]_i_4 ;
  input floating_hold_div_by_zero__0;
  input floating_hold_div_overflow_reg;
  input last_cycle;
  input floating_hold_div_overflow_reg_0;
  input m3_div_overflow_i_reg;
  input [3:0]\of_MSR_i_reg[25] ;
  input \Using_FPGA.Native_25 ;
  input [31:0]\Use_HW_BS.mem_mux3_reg[28] ;
  input [10:0]wb_MSR_i;
  input EX_CarryIn;
  input LO;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Q_reg[32] ;
  input [0:0]E;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input [1:0]\of_MSR_i_reg[25]_0 ;
  input [1:0]\of_MSR_i_reg[25]_1 ;
  input \Using_FPGA.Native_31 ;
  input [0:0]m3_msr;
  input \Using_FPGA.Native_32 ;
  input \Using_FPGA.Native_33 ;
  input \m0_Ex_Result_i_reg[30] ;
  input \EX_Op3[30]_i_2 ;
  input \EX_Op3[31]_i_3 ;
  input \EX_Op3[31]_i_3_0 ;
  input \m0_Ex_Result_i_reg[30]_0 ;
  input \m0_Ex_Result_i_reg[30]_1 ;
  input \m0_Ex_Result_i_reg[30]_2 ;
  input m1_m0_sel_res;
  input out;
  input [1:0]\trace_new_reg_value_i[24]_i_2 ;
  input \Using_FPGA.Native_34 ;
  input \Using_FPGA.Native_35 ;
  input m0_ex_sel_res;
  input m3_m2_sel_res;
  input [7:0]\Use_DAXI.M_AXI_DP_WDATA_reg[23]_0 ;
  input [1:0]m1_unaligned_addr_3lsb;
  input [0:0]\Using_FPGA.Native_36 ;
  input [29:0]WB_Exception_Return_Addr0;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  output lopt_5;
  input lopt_6;
  output lopt_7;
  output lopt_8;

  wire A0_out;
  wire A1_out;
  wire A2_out;
  wire A3_out;
  wire A4_out;
  wire [4:0]ADDRD;
  wire A_N201_out;
  wire Clear_Buffer;
  wire Clk;
  wire [47:0]D;
  wire [0:0]DI;
  wire DI_3;
  wire DReady;
  wire DWait;
  wire D_0;
  wire D_1;
  wire D_18;
  wire D_19;
  wire D_2;
  wire D_20;
  wire D_21;
  wire D_22;
  wire D_23;
  wire D_24;
  wire D_25;
  wire D_26;
  wire D_27;
  wire D_28;
  wire D_29;
  wire D_3;
  wire D_30;
  wire D_4;
  wire D_5;
  wire D_6;
  wire D_7;
  wire [0:0]E;
  wire [1:0]\EX_ALU_Op_reg[0]_0 ;
  wire EX_Bit_Extract0;
  wire EX_Bit_Extract_reg_0;
  wire EX_Bit_Insert_reg_0;
  wire [18:0]EX_Bit_Insert_reg_1;
  wire \EX_Branch_CMP_Op1[29]_i_3 ;
  wire \EX_Branch_CMP_Op1[30]_i_3 ;
  wire \EX_Branch_CMP_Op1_reg[29] ;
  wire \EX_Branch_CMP_Op1_reg[29]_0 ;
  wire \EX_Branch_CMP_Op1_reg[30] ;
  wire \EX_Branch_CMP_Op1_reg[30]_0 ;
  wire \EX_Branch_CMP_Op1_reg[30]_1 ;
  wire EX_CLZ_Instr_reg_0;
  wire EX_CMP_Op12_out;
  wire EX_CarryIn;
  wire EX_Enable_ALU;
  wire EX_Enable_Sext_Shift_reg_0;
  wire EX_Enable_Sext_Shift_reg_1;
  wire [16:0]EX_Enable_Sext_Shift_reg_2;
  wire EX_GPR_Write_DFF_n_2;
  wire EX_GPR_Write_DFF_n_3;
  wire EX_GPR_Write_DFF_n_4;
  wire EX_Jump_handling_n_3;
  wire EX_Jump_handling_n_4;
  wire [3:0]\EX_Logic_Op_reg[0]_0 ;
  wire \EX_Op1[0]_i_3_n_0 ;
  wire \EX_Op1[0]_i_5_n_0 ;
  wire \EX_Op1[29]_i_5 ;
  wire \EX_Op1[29]_i_5_0 ;
  wire \EX_Op1[29]_i_5_1 ;
  wire \EX_Op1[29]_i_7_n_0 ;
  wire \EX_Op1[30]_i_5 ;
  wire \EX_Op1[30]_i_5_0 ;
  wire \EX_Op1[30]_i_5_1 ;
  wire \EX_Op1[30]_i_7_n_0 ;
  wire \EX_Op1[30]_i_8_n_0 ;
  wire EX_Op1_CMP_Equal;
  wire EX_Op1_Zero;
  wire [28:0]\EX_Op1_reg[0] ;
  wire \EX_Op1_reg[1] ;
  wire \EX_Op1_reg[27] ;
  wire \EX_Op1_reg[28] ;
  wire \EX_Op1_reg[29] ;
  wire \EX_Op1_reg[29]_0 ;
  wire \EX_Op1_reg[30] ;
  wire \EX_Op1_reg[30]_0 ;
  wire \EX_Op1_reg[31] ;
  wire \EX_Op1_reg[31]_0 ;
  wire \EX_Op1_reg[31]_1 ;
  wire \EX_Op1_reg[3] ;
  wire [15:0]\EX_Op2[0]_i_4 ;
  wire \EX_Op2[0]_i_6 ;
  wire \EX_Op2[0]_i_7 ;
  wire \EX_Op2[10]_i_5_n_0 ;
  wire \EX_Op2[11]_i_5_n_0 ;
  wire \EX_Op2[12]_i_5_n_0 ;
  wire \EX_Op2[13]_i_5_n_0 ;
  wire \EX_Op2[14]_i_5_n_0 ;
  wire \EX_Op2[15]_i_5_n_0 ;
  wire [6:0]\EX_Op2[16]_i_2 ;
  wire \EX_Op2[1]_i_5_n_0 ;
  wire \EX_Op2[25]_i_2 ;
  wire \EX_Op2[2]_i_5_n_0 ;
  wire \EX_Op2[30]_i_4_n_0 ;
  wire \EX_Op2[31]_i_6_n_0 ;
  wire \EX_Op2[31]_i_7_n_0 ;
  wire \EX_Op2[3]_i_5_n_0 ;
  wire \EX_Op2[4]_i_5_n_0 ;
  wire \EX_Op2[5]_i_5_n_0 ;
  wire \EX_Op2[6]_i_5_n_0 ;
  wire \EX_Op2[7]_i_5_n_0 ;
  wire \EX_Op2[8]_i_5_n_0 ;
  wire \EX_Op2[9]_i_5_n_0 ;
  wire \EX_Op2_reg[0] ;
  wire \EX_Op2_reg[0]_0 ;
  wire \EX_Op2_reg[10] ;
  wire \EX_Op2_reg[10]_0 ;
  wire \EX_Op2_reg[11] ;
  wire \EX_Op2_reg[11]_0 ;
  wire \EX_Op2_reg[12] ;
  wire \EX_Op2_reg[12]_0 ;
  wire \EX_Op2_reg[13] ;
  wire \EX_Op2_reg[13]_0 ;
  wire \EX_Op2_reg[14] ;
  wire \EX_Op2_reg[14]_0 ;
  wire \EX_Op2_reg[15] ;
  wire \EX_Op2_reg[15]_0 ;
  wire \EX_Op2_reg[16] ;
  wire [14:0]\EX_Op2_reg[17] ;
  wire \EX_Op2_reg[17]_0 ;
  wire \EX_Op2_reg[18] ;
  wire \EX_Op2_reg[1] ;
  wire \EX_Op2_reg[1]_0 ;
  wire \EX_Op2_reg[20] ;
  wire \EX_Op2_reg[21] ;
  wire \EX_Op2_reg[25] ;
  wire [27:0]\EX_Op2_reg[29] ;
  wire \EX_Op2_reg[29]_0 ;
  wire \EX_Op2_reg[29]_1 ;
  wire \EX_Op2_reg[2] ;
  wire \EX_Op2_reg[2]_0 ;
  wire \EX_Op2_reg[30] ;
  wire \EX_Op2_reg[31] ;
  wire \EX_Op2_reg[31]_0 ;
  wire \EX_Op2_reg[31]_1 ;
  wire \EX_Op2_reg[31]_2 ;
  wire \EX_Op2_reg[31]_3 ;
  wire \EX_Op2_reg[31]_4 ;
  wire \EX_Op2_reg[3] ;
  wire \EX_Op2_reg[3]_0 ;
  wire \EX_Op2_reg[4] ;
  wire \EX_Op2_reg[4]_0 ;
  wire \EX_Op2_reg[5] ;
  wire \EX_Op2_reg[5]_0 ;
  wire \EX_Op2_reg[6] ;
  wire \EX_Op2_reg[6]_0 ;
  wire \EX_Op2_reg[7] ;
  wire \EX_Op2_reg[7]_0 ;
  wire \EX_Op2_reg[8] ;
  wire \EX_Op2_reg[8]_0 ;
  wire \EX_Op2_reg[9] ;
  wire \EX_Op2_reg[9]_0 ;
  wire \EX_Op3[0]_i_6 ;
  wire \EX_Op3[0]_i_7 ;
  wire \EX_Op3[30]_i_2 ;
  wire \EX_Op3[31]_i_3 ;
  wire \EX_Op3[31]_i_3_0 ;
  wire \EX_Op3_reg[30] ;
  wire \EX_Op3_reg[31] ;
  wire EX_Pattern_Cmp_Sel7_out;
  wire EX_Pattern_Cmp_Sel_reg_0;
  wire [1:0]\EX_Sext_Op_reg[0]_0 ;
  wire \EX_Sext_Op_reg[1]_0 ;
  wire EX_Unsigned_Op11_out;
  wire EX_Use_Carry10_out;
  wire [2:0]GPR_Op1;
  wire [0:31]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire Hibernate;
  wire IWAIT;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire Jump_Logic_I1_n_10;
  wire Jump_Logic_I1_n_6;
  wire Jump_Logic_I1_n_8;
  wire Jump_Logic_I1_n_9;
  wire Kill_Fetch_Carry_n_1;
  wire Kill_Fetch_Carry_n_2;
  wire Kill_Fetch_MMU_Carry_n_1;
  wire Kill_Fetch_MMU_Carry_n_3;
  wire LO;
  wire [1:0]LOCKSTEP_Master_Out;
  wire M0_Div_Exception_Hold_DFF_n_0;
  wire M0_Exception_From_DFF_n_11;
  wire M0_Exception_From_DFF_n_3;
  wire M0_Exception_From_DFF_n_4;
  wire M0_Exception_From_DFF_n_6;
  wire M0_Exception_From_DFF_n_7;
  wire M0_Exception_From_DFF_n_8;
  wire M0_Exception_From_DFF_n_9;
  wire M0_GPR_Write_DFF_n_2;
  wire M0_GPR_Write_DFF_n_3;
  wire M0_GPR_Write_DFF_n_4;
  wire M0_Load_Store_Access_DFF_n_0;
  wire M0_Load_Store_Access_DFF_n_1;
  wire M0_Load_Store_Access_DFF_n_3;
  wire M1_Div_Exception_Hold_DFF_n_0;
  wire M1_GPR_Write_DFF_n_2;
  wire M1_GPR_Write_DFF_n_3;
  wire M1_GPR_Write_DFF_n_4;
  wire M1_Sel_Mul_Res_reg_0;
  wire M1_Sel_Mul_Res_reg_1;
  wire M1_Sel_Mul_Res_reg_2;
  wire M2_Div_Exception_Hold_DFF_n_0;
  wire M2_Exception_From_DFF_n_1;
  wire M2_Exception_From_DFF_n_3;
  wire M2_GPR_Write_DFF_n_2;
  wire M2_GPR_Write_DFF_n_4;
  wire M2_GPR_Write_DFF_n_5;
  wire M3_Exception_From_DFF_n_1;
  wire M3_Exception_From_DFF_n_10;
  wire M3_Exception_From_DFF_n_2;
  wire M3_Exception_From_DFF_n_5;
  wire M3_Exception_From_DFF_n_7;
  wire M3_Exception_From_DFF_n_8;
  wire M3_Exception_From_DFF_n_9;
  wire M3_GPR_Write_DFF_n_2;
  wire M3_GPR_Write_DFF_n_4;
  wire M3_GPR_Write_DFF_n_5;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_BVALID;
  wire M_AXI_DP_RVALID;
  wire M_AXI_DP_WREADY;
  wire \OF_EX_Cmp/comparator_i1/S ;
  wire \OF_EX_Cmp/comparator_i1/S_12 ;
  wire \OF_EX_Cmp/comparator_i1/S_17 ;
  wire \OF_M0_Cmp/comparator_i1/S ;
  wire \OF_M0_Cmp/comparator_i1/S_11 ;
  wire \OF_M0_Cmp/comparator_i1/S_16 ;
  wire \OF_M1_Cmp/comparator_i1/S ;
  wire \OF_M1_Cmp/comparator_i1/S_10 ;
  wire \OF_M1_Cmp/comparator_i1/S_15 ;
  wire \OF_M2_Cmp/comparator_i1/S ;
  wire \OF_M2_Cmp/comparator_i1/S_14 ;
  wire \OF_M2_Cmp/comparator_i1/S_9 ;
  wire \OF_M3_Cmp/comparator_i1/S ;
  wire \OF_M3_Cmp/comparator_i1/S_13 ;
  wire \OF_M3_Cmp/comparator_i1/S_8 ;
  wire OF_Use_Op_B;
  wire Op1_Conflict_Stall_n_0;
  wire Op1_Conflict_Stall_n_1;
  wire Op2_Conflict_Stall_n_0;
  wire Op2_Conflict_Stall_n_1;
  wire Op3_Conflict_Stall_n_0;
  wire Op3_Conflict_Stall_n_1;
  wire PC_MODULE_I1_n_95;
  wire PC_MODULE_I1_n_96;
  wire PREFETCH_BUFFER_I1_n_101;
  wire PREFETCH_BUFFER_I1_n_103;
  wire PREFETCH_BUFFER_I1_n_112;
  wire PREFETCH_BUFFER_I1_n_128;
  wire PREFETCH_BUFFER_I1_n_129;
  wire PREFETCH_BUFFER_I1_n_130;
  wire PREFETCH_BUFFER_I1_n_131;
  wire PREFETCH_BUFFER_I1_n_132;
  wire PREFETCH_BUFFER_I1_n_133;
  wire PREFETCH_BUFFER_I1_n_134;
  wire PREFETCH_BUFFER_I1_n_135;
  wire PREFETCH_BUFFER_I1_n_136;
  wire PREFETCH_BUFFER_I1_n_137;
  wire PREFETCH_BUFFER_I1_n_138;
  wire PREFETCH_BUFFER_I1_n_139;
  wire PREFETCH_BUFFER_I1_n_140;
  wire PREFETCH_BUFFER_I1_n_141;
  wire PREFETCH_BUFFER_I1_n_142;
  wire PREFETCH_BUFFER_I1_n_143;
  wire PREFETCH_BUFFER_I1_n_144;
  wire PREFETCH_BUFFER_I1_n_145;
  wire PREFETCH_BUFFER_I1_n_146;
  wire PREFETCH_BUFFER_I1_n_147;
  wire PREFETCH_BUFFER_I1_n_148;
  wire PREFETCH_BUFFER_I1_n_149;
  wire PREFETCH_BUFFER_I1_n_150;
  wire PREFETCH_BUFFER_I1_n_151;
  wire PREFETCH_BUFFER_I1_n_152;
  wire PREFETCH_BUFFER_I1_n_153;
  wire PREFETCH_BUFFER_I1_n_154;
  wire PREFETCH_BUFFER_I1_n_155;
  wire PREFETCH_BUFFER_I1_n_37;
  wire PREFETCH_BUFFER_I1_n_38;
  wire PREFETCH_BUFFER_I1_n_40;
  wire PREFETCH_BUFFER_I1_n_42;
  wire PREFETCH_BUFFER_I1_n_43;
  wire PREFETCH_BUFFER_I1_n_44;
  wire PREFETCH_BUFFER_I1_n_45;
  wire PREFETCH_BUFFER_I1_n_46;
  wire PREFETCH_BUFFER_I1_n_47;
  wire PREFETCH_BUFFER_I1_n_48;
  wire PREFETCH_BUFFER_I1_n_49;
  wire PREFETCH_BUFFER_I1_n_50;
  wire PREFETCH_BUFFER_I1_n_70;
  wire PREFETCH_BUFFER_I1_n_76;
  wire PREFETCH_BUFFER_I1_n_79;
  wire PREFETCH_BUFFER_I1_n_80;
  wire PREFETCH_BUFFER_I1_n_82;
  wire PREFETCH_BUFFER_I1_n_83;
  wire PREFETCH_BUFFER_I1_n_91;
  wire PREFETCH_BUFFER_I1_n_92;
  wire PREFETCH_BUFFER_I1_n_94;
  wire PREFETCH_BUFFER_I1_n_99;
  wire Pause;
  wire Pause_Ack;
  wire Pause_Ack0;
  wire Pause_Ack_i_2_n_0;
  wire \Performance_Debug_Control.dbg_freeze_nohalt_reg ;
  wire [0:0]\Performance_Debug_Control.ex_brki_hit_reg ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_i_5_n_0 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  wire Prefetch_Buffer_Full;
  wire [25:0]Q;
  wire \Q_reg[32] ;
  wire [3:0]S;
  wire [0:0]SR;
  wire S_0;
  wire S_2;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire Sleep;
  wire Sleep_Decode;
  wire Sleep_Out;
  wire Suspend;
  wire \Use_Async_Reset.sync_reset_reg_0 ;
  wire \Use_Async_Reset.sync_reset_reg_1 ;
  wire \Use_Async_Reset.sync_reset_reg_2 ;
  wire \Use_Async_Reset.sync_reset_reg_3 ;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ;
  wire \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ;
  wire \Use_DAXI.M_AXI_DP_BREADY_I_reg ;
  wire \Use_DAXI.M_AXI_DP_RREADY_I_reg ;
  wire \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ;
  wire [9:0]\Use_DAXI.M_AXI_DP_WDATA_reg[23] ;
  wire [7:0]\Use_DAXI.M_AXI_DP_WDATA_reg[23]_0 ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ;
  wire \Use_DLMB.m1_dlmb_issued_reg ;
  wire \Use_DLMB.m2_dready_hold_reg ;
  wire \Use_DLMB.m2_potential_bubble_reg ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf/p_43_out__4 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf/p_48_out ;
  wire \Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg[15] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg[6] ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg[9] ;
  wire \Use_HW_BS.mem_mux3[0]_i_5_n_0 ;
  wire \Use_HW_BS.mem_mux3[0]_i_6_n_0 ;
  wire \Use_HW_BS.mem_mux3[0]_i_7_n_0 ;
  wire \Use_HW_BS.mem_mux3[0]_i_8_n_0 ;
  wire \Use_HW_BS.mem_mux3[10]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[10]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[11]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[11]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[12]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[12]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[13]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[13]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[14]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[14]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[15]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[15]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[16]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[16]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[17]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[17]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[18]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[18]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[19]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[19]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[1]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[1]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[1]_i_4_n_0 ;
  wire \Use_HW_BS.mem_mux3[1]_i_5_n_0 ;
  wire \Use_HW_BS.mem_mux3[20]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[20]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[21]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[21]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[22]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[22]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[24]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[25]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[26]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[2]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[2]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[2]_i_4_n_0 ;
  wire \Use_HW_BS.mem_mux3[3]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[3]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[3]_i_4_n_0 ;
  wire \Use_HW_BS.mem_mux3[4]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[4]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[5]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[5]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[6]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[6]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[7]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[7]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[8]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[8]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[9]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3[9]_i_3_n_0 ;
  wire [31:0]\Use_HW_BS.mem_mux3_reg[28] ;
  wire \Use_ILMB.if2_ilmb_issued_reg ;
  wire \Use_ILMB.if3_iready_hold_reg ;
  wire \Use_ILMB.if4_ILMB_Data_Strobe_i_reg ;
  wire \Using_BP0_FPGA.PR_BP0_And1_n_2 ;
  wire \Using_EX_FPGA.PR_EX_And7_n_1 ;
  wire \Using_EX_FPGA.PR_EX_And7_n_2 ;
  wire \Using_EX_FPGA.PR_EX_And7_n_4 ;
  wire \Using_EX_FPGA.PR_EX_And7_n_5 ;
  wire \Using_EX_FPGA.PR_EX_And7_n_6 ;
  wire \Using_EX_FPGA.PR_EX_And7_n_8 ;
  wire \Using_EX_FPGA.PR_EX_And7_n_9 ;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire [30:0]\Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire [15:0]\Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire [0:0]\Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_2__5_n_0 ;
  wire \Using_FPGA.Native_i_2__8_n_0 ;
  wire \Using_Fast_Interrupt.Interrupt_Ack[0]_i_1_n_0 ;
  wire \Using_Fast_Interrupt.Interrupt_Ack[1]_i_1_n_0 ;
  wire \Using_IF1_Insert_FPGA_No_MMU.PR_IF1_Ins_Or1_n_1 ;
  wire \Using_IF2_FPGA.PR_IF2_And2_n_3 ;
  wire \Using_IF3_FPGA.PR_IF3_And3_n_3 ;
  wire \Using_IF4_Push_FPGA.Push_PipeRun_n_1 ;
  wire \Using_M0_FPGA.PR_M0_And5_n_1 ;
  wire \Using_M0_FPGA.PR_M0_And5_n_2 ;
  wire \Using_M1_FPGA.PR_M1_And3_n_7 ;
  wire \Using_M1_FPGA.PR_M1_And3_n_8 ;
  wire \Using_M2_FPGA.PR_M2_And6_n_5 ;
  wire \Using_M2_FPGA.PR_M2_And6_n_6 ;
  wire \Using_M3_FPGA.PR_M3_And5_n_2 ;
  wire \Using_M3_FPGA.PR_M3_And5_n_3 ;
  wire \Using_M3_FPGA.PR_M3_And5_n_5 ;
  wire \Using_Mul_Instr.ex_not_mul_op_i_reg_0 ;
  wire \Using_OF_FPGA.PR_OF_And11_n_3 ;
  wire \Using_OF_FPGA.PR_OF_And9_n_1 ;
  wire \WB_Big_Carry.OF_WB_Use3/carry_or_i1/S ;
  wire WB_Div_Zero_Overflow_reg_0;
  wire WB_Div_Zero_Overflow_reg_1;
  wire WB_Div_Zero_Overflow_reg_2;
  wire WB_Div_Zero_Overflow_reg_3;
  wire [1:0]WB_Div_Zero_Overflow_reg_4;
  wire WB_Div_Zero_Overflow_reg_5;
  wire WB_Div_Zero_Overflow_reg_6;
  wire WB_Doublet_Access_reg_0;
  wire WB_Doublet_Access_reg_1;
  wire [29:0]WB_Exception_Return_Addr0;
  wire \WB_Exception_Return_Addr_reg[16] ;
  wire \WB_Exception_Return_Addr_reg[17] ;
  wire \WB_Exception_Return_Addr_reg[18] ;
  wire \WB_Exception_Return_Addr_reg[20] ;
  wire \WB_Exception_Return_Addr_reg[21] ;
  wire \WB_Exception_Return_Addr_reg[25] ;
  wire WB_GPR_Write_DFF_n_2;
  wire WB_GPR_Write_DFF_n_3;
  wire WB_MSR_Clear_BIP_reg_0;
  wire WB_MSR_Set_IE_reg_0;
  wire WB_PC_Valid_i_1_n_0;
  wire active_wakeup;
  wire active_wakeup0;
  wire [0:31]bp0_branch_target;
  wire \bp0_branch_target[0]_i_2_n_0 ;
  wire \bp0_branch_target[10]_i_1_n_0 ;
  wire \bp0_branch_target[11]_i_1_n_0 ;
  wire \bp0_branch_target[12]_i_1_n_0 ;
  wire \bp0_branch_target[13]_i_1_n_0 ;
  wire \bp0_branch_target[14]_i_1_n_0 ;
  wire \bp0_branch_target[15]_i_1_n_0 ;
  wire \bp0_branch_target[16]_i_1_n_0 ;
  wire \bp0_branch_target[17]_i_1_n_0 ;
  wire \bp0_branch_target[18]_i_1_n_0 ;
  wire \bp0_branch_target[19]_i_1_n_0 ;
  wire \bp0_branch_target[1]_i_1_n_0 ;
  wire \bp0_branch_target[20]_i_1_n_0 ;
  wire \bp0_branch_target[21]_i_1_n_0 ;
  wire \bp0_branch_target[22]_i_1_n_0 ;
  wire \bp0_branch_target[23]_i_1_n_0 ;
  wire \bp0_branch_target[24]_i_1_n_0 ;
  wire \bp0_branch_target[25]_i_1_n_0 ;
  wire \bp0_branch_target[26]_i_1_n_0 ;
  wire \bp0_branch_target[27]_i_1_n_0 ;
  wire \bp0_branch_target[28]_i_1_n_0 ;
  wire \bp0_branch_target[29]_i_1_n_0 ;
  wire \bp0_branch_target[2]_i_1_n_0 ;
  wire \bp0_branch_target[30]_i_1_n_0 ;
  wire \bp0_branch_target[31]_i_1_n_0 ;
  wire \bp0_branch_target[3]_i_1_n_0 ;
  wire \bp0_branch_target[4]_i_1_n_0 ;
  wire \bp0_branch_target[5]_i_1_n_0 ;
  wire \bp0_branch_target[6]_i_1_n_0 ;
  wire \bp0_branch_target[7]_i_1_n_0 ;
  wire \bp0_branch_target[8]_i_1_n_0 ;
  wire \bp0_branch_target[9]_i_1_n_0 ;
  wire [31:0]\bp0_branch_target_reg[0]_0 ;
  wire [29:0]\bp0_branch_target_reg[0]_1 ;
  wire bp0_dead_fetch_hold;
  wire bp0_jump;
  wire bp0_jump0;
  wire bp0_keep_jump;
  wire bp0_piperun_masked_no1;
  wire bp0_raw_valid0;
  wire bp0_raw_valid_reg_0;
  wire bp0_raw_valid_reg_1;
  wire bp0_raw_valid_reg_2;
  wire bp1_dead_fetch_hold_bt;
  wire bp1_dead_fetch_hold_reg_0;
  wire bp1_piperun_masked_no1;
  wire bp1_raw_valid_reg_0;
  wire bp1_raw_valid_reg_1;
  wire bp1_raw_valid_reg_2;
  wire \cur_data_i_reg[12] ;
  wire \cur_data_i_reg[26] ;
  wire [31:0]\cur_data_i_reg[31] ;
  wire [31:0]\cur_data_i_reg[31]_0 ;
  wire [31:0]\cur_data_i_reg[31]_1 ;
  wire \cur_data_i_reg[3] ;
  wire \cur_data_i_reg[4] ;
  wire \cur_data_i_reg[5] ;
  wire [1:0]\cur_data_i_reg[6] ;
  wire \cur_data_i_reg[7] ;
  wire \cur_data_i_reg[8] ;
  wire \cur_data_i_reg[9] ;
  wire dbg_clean_stop;
  wire [0:0]div_busy_reg;
  wire ex_Interrupt;
  wire ex_Interrupt_raw_i_2_n_0;
  wire [0:0]ex_Interrupt_raw_reg_0;
  wire ex_MSR_clear_decode;
  wire ex_MSR_clear_decode_reg_n_0;
  wire [10:0]ex_MSR_i;
  wire ex_MSR_set_decode;
  wire ex_MSR_set_decode_reg_n_0;
  (* DIRECT_ENABLE *) wire ex_PipeRun_for_ce;
  wire [1:0]ex_alu_result;
  wire ex_alu_sel_logic;
  wire ex_arith_shift;
  wire ex_atomic_instruction_pair;
  wire ex_atomic_instruction_pair0;
  wire ex_bit_extract;
  wire ex_bit_insert;
  wire ex_branch_with_delayslot;
  wire ex_branch_with_delayslot0;
  wire ex_byte_access_i;
  wire ex_clear_msr_bip_instr;
  wire ex_clz_instr;
  wire ex_cmp_op;
  wire ex_complete_in_later_stage;
  wire ex_databus_access_i_reg_n_0;
  wire ex_databus_exclusive_i0;
  wire ex_databus_exclusive_i_reg_n_0;
  wire ex_databus_read_i0;
  wire ex_databus_write_i_reg_n_0;
  wire ex_dbg_pc_hit_i;
  wire ex_dead_valid_hold;
  wire ex_delayslot_Instr;
  wire ex_delayslot_Instr0;
  wire ex_div_unsigned;
  wire ex_doublet_access_i;
  wire ex_enable_sext_shift;
  wire [3:3]ex_exception_kind;
  wire ex_first_cycle;
  wire ex_gpr_write;
  wire [2:4]ex_gpr_write_addr;
  wire ex_gpr_write_dbg;
  wire ex_hibernate_i_reg_0;
  wire \ex_instr_reg_n_0_[11] ;
  wire \ex_instr_reg_n_0_[12] ;
  wire \ex_instr_reg_n_0_[13] ;
  wire \ex_instr_reg_n_0_[14] ;
  wire \ex_instr_reg_n_0_[15] ;
  wire \ex_instr_reg_n_0_[16] ;
  wire \ex_instr_reg_n_0_[17] ;
  wire \ex_instr_reg_n_0_[18] ;
  wire \ex_instr_reg_n_0_[19] ;
  wire \ex_instr_reg_n_0_[20] ;
  wire \ex_instr_reg_n_0_[23] ;
  wire \ex_instr_reg_n_0_[24] ;
  wire \ex_instr_reg_n_0_[27] ;
  wire \ex_instr_reg_n_0_[28] ;
  wire \ex_instr_reg_n_0_[29] ;
  wire \ex_instr_reg_n_0_[30] ;
  wire \ex_instr_reg_n_0_[31] ;
  wire ex_is_div_instr_i_reg_0;
  wire ex_is_div_instr_i_reg_1;
  wire ex_jump;
  wire ex_jump_hold;
  wire ex_jump_nodelay;
  wire ex_jump_nodelay0;
  wire ex_left_shift;
  wire ex_left_shift_i;
  wire ex_load_alu_carry2_out;
  wire ex_load_alu_carry_reg_n_0;
  wire ex_load_shift_carry;
  wire ex_load_shift_carry0;
  wire ex_m0_complete_in_later_stage;
  wire ex_m2_complete_in_later_stage;
  wire ex_m3_complete_in_later_stage;
  wire ex_mbar_decode;
  wire ex_mbar_decode_reg_0;
  wire ex_mbar_is_sleep;
  wire ex_mbar_is_sleep0;
  wire ex_mbar_sleep;
  wire ex_mbar_sleep_i_1_n_0;
  wire ex_mbar_sleep_i_2_n_0;
  wire ex_mbar_wait_1;
  wire ex_mbar_wait_10;
  wire ex_mbar_wait_1_i_2_n_0;
  wire ex_move_to_MSR_instr;
  wire ex_move_to_MSR_instr35_out;
  wire ex_msr_clear_bip;
  wire ex_msr_set_ie;
  wire ex_msrclr;
  wire ex_msrset;
  wire ex_mts_msr;
  wire ex_op1_cmp_eq;
  wire ex_op1_cmp_eq1;
  wire ex_op1_cmp_eq_n7_out;
  wire ex_op1_cmp_equal_n;
  wire [0:3]ex_opcode;
  wire ex_pattern_cmp_sel;
  wire ex_piperun_masked_no1;
  wire ex_piperun_masked_no2;
  wire ex_piperun_masked_no3;
  wire ex_piperun_masked_no4;
  wire ex_piperun_masked_no5;
  wire ex_piperun_masked_no6;
  wire ex_piperun_raw;
  wire ex_raw_valid_reg_n_0;
  wire ex_read_imm_reg;
  wire ex_reservation;
  wire ex_sel_alu_reg_0;
  wire ex_sel_alu_reg_1;
  wire ex_sel_alu_res;
  wire ex_sel_barrel_res;
  wire ex_set_bip;
  wire ex_set_bip_reg_n_0;
  wire ex_set_msr_ee_instr;
  wire ex_set_msr_ie_instr;
  wire [0:1]ex_shift_op;
  wire ex_sleep_i0;
  wire ex_sleep_i_reg_0;
  wire ex_start_div;
  wire ex_start_div_raw;
  wire ex_suspend_i_reg_0;
  wire ex_unsigned_op;
  wire ex_use_carry;
  wire ex_valid_keep;
  wire ex_void_bit;
  wire floating_hold_div_by_zero__0;
  wire floating_hold_div_by_zero_reg;
  wire floating_hold_div_by_zero_reg_0;
  wire floating_hold_div_overflow_reg;
  wire floating_hold_div_overflow_reg_0;
  (* DIRECT_RESET *) wire flush_pipe_for_rst;
  wire force12_out;
  wire force_Val10_out;
  wire if0_pause;
  wire if0_raw_valid;
  wire if0_raw_valid_reg_0;
  wire if1_insert_piperun_i;
  wire if2_dead_fetch_hold_reg_n_0;
  wire if2_ibus_access_raw0;
  wire if2_ibus_access_raw_reg_0;
  wire if2_ibus_first_cycle_raw_reg_0;
  wire if2_ilmb_issued;
  wire if2_piperun;
  wire if2_piperun_masked_no1;
  wire if2_piperun_masked_no2;
  wire if2_raw_valid_reg_0;
  wire if2_raw_valid_reg_1;
  wire if3_allow_iready;
  wire if3_dead_fetch_hold_reg_n_0;
  wire if3_ibus_access_i_reg_n_0;
  wire if3_ilmb_iready;
  wire if3_piperun;
  wire if3_piperun_masked_no1;
  wire if3_piperun_masked_no2;
  wire if3_piperun_masked_no3;
  wire if3_potential_bubble;
  wire if3_raw_valid_reg_0;
  wire if3_raw_valid_reg_1;
  wire [0:31]if4_data;
  wire if4_dead_fetch_hold_reg_n_0;
  wire if4_ibus_access_i_reg_0;
  wire if4_ibus_access_i_reg_n_0;
  wire if4_piperun;
  wire if4_piperun_masked_no1;
  wire if4_piperun_masked_no2;
  wire if4_piperun_masked_no3;
  wire if4_piperun_masked_no4;
  wire [1:1]if4_pre_buffer_addr;
  wire if4_push_instr_fetch;
  wire if4_raw_valid_reg_0;
  wire if4_raw_valid_reg_1;
  wire if4_ready;
  wire [3:4]if4_sel_input;
  wire [0:0]in;
  wire in0;
  wire keep_jump_taken_with_ds;
  wire kill_fetch;
  wire kill_fetch_mmu;
  wire last_cycle;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_100;
  wire lopt_101;
  wire lopt_102;
  wire lopt_103;
  wire lopt_104;
  wire lopt_105;
  wire lopt_106;
  wire lopt_107;
  wire lopt_108;
  wire lopt_109;
  wire lopt_11;
  wire lopt_110;
  wire lopt_111;
  wire lopt_112;
  wire lopt_113;
  wire lopt_114;
  wire lopt_115;
  wire lopt_116;
  wire lopt_117;
  wire lopt_118;
  wire lopt_119;
  wire lopt_12;
  wire lopt_120;
  wire lopt_121;
  wire lopt_122;
  wire lopt_123;
  wire lopt_124;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire \^lopt_3 ;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire \^lopt_4 ;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire \^lopt_5 ;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire \^lopt_6 ;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire \^lopt_7 ;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire \^lopt_8 ;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire lopt_98;
  wire lopt_99;
  wire \m0_Ex_Result_i[0]_i_2_n_0 ;
  wire \m0_Ex_Result_i[10]_i_2_n_0 ;
  wire \m0_Ex_Result_i[11]_i_2_n_0 ;
  wire \m0_Ex_Result_i[12]_i_2_n_0 ;
  wire \m0_Ex_Result_i[13]_i_2_n_0 ;
  wire \m0_Ex_Result_i[14]_i_2_n_0 ;
  wire \m0_Ex_Result_i[15]_i_2_n_0 ;
  wire \m0_Ex_Result_i[1]_i_2_n_0 ;
  wire \m0_Ex_Result_i[2]_i_2_n_0 ;
  wire \m0_Ex_Result_i[30]_i_2_n_0 ;
  wire \m0_Ex_Result_i[3]_i_2_n_0 ;
  wire \m0_Ex_Result_i[4]_i_2_n_0 ;
  wire \m0_Ex_Result_i[5]_i_2_n_0 ;
  wire \m0_Ex_Result_i[6]_i_2_n_0 ;
  wire \m0_Ex_Result_i[7]_i_2_n_0 ;
  wire \m0_Ex_Result_i[8]_i_2_n_0 ;
  wire \m0_Ex_Result_i[9]_i_2_n_0 ;
  wire \m0_Ex_Result_i_reg[30] ;
  wire \m0_Ex_Result_i_reg[30]_0 ;
  wire \m0_Ex_Result_i_reg[30]_1 ;
  wire \m0_Ex_Result_i_reg[30]_2 ;
  (* DIRECT_ENABLE *) wire m0_PipeRun_for_ce;
  wire m0_byte_access_i;
  wire m0_complete_in_later_stage;
  wire m0_databus_read_i0;
  wire m0_databus_read_i_reg_n_0;
  wire m0_databus_write_i0;
  wire m0_databus_write_i_reg_n_0;
  wire m0_dead_valid_hold;
  wire m0_delay_slot;
  wire m0_doublet_access_i;
  wire m0_ex_sel_res;
  wire m0_exception_from_ex;
  wire [28:31]m0_exception_kind;
  wire [28:31]m0_exception_raw_kind;
  wire \m0_exception_raw_kind_reg[31]_0 ;
  wire m0_gpr_write;
  wire [0:4]m0_gpr_write_addr;
  wire m0_gpr_write_dbg;
  wire [0:31]m0_instr;
  wire m0_is_div_instr_i;
  wire m0_jump_taken;
  wire m0_m2_complete_in_later_stage;
  wire m0_m3_complete_in_later_stage;
  wire m0_msr_clear_bip_i;
  wire m0_msr_set_ie_i;
  wire m0_not_mul_op_i_reg_0;
  wire m0_piperun_masked_no1;
  wire m0_piperun_masked_no2;
  wire m0_piperun_masked_no3;
  wire m0_piperun_masked_no4;
  wire m0_piperun_raw;
  wire m0_raw_valid_reg_n_0;
  wire m0_read_imm_reg;
  wire m0_rtid_instr;
  wire m0_rtid_instr_i_2_n_0;
  wire m0_rtid_instr_i_3_n_0;
  wire m0_sel_barrel_res;
  wire m0_sel_mul_res;
  wire \m1_M0_Result_i_reg[0] ;
  wire \m1_M0_Result_i_reg[10] ;
  wire \m1_M0_Result_i_reg[11] ;
  wire \m1_M0_Result_i_reg[12] ;
  wire \m1_M0_Result_i_reg[13] ;
  wire \m1_M0_Result_i_reg[14] ;
  wire \m1_M0_Result_i_reg[15] ;
  wire \m1_M0_Result_i_reg[1] ;
  wire \m1_M0_Result_i_reg[2] ;
  wire \m1_M0_Result_i_reg[3] ;
  wire \m1_M0_Result_i_reg[4] ;
  wire \m1_M0_Result_i_reg[5] ;
  wire \m1_M0_Result_i_reg[6] ;
  wire \m1_M0_Result_i_reg[7] ;
  wire \m1_M0_Result_i_reg[8] ;
  wire \m1_M0_Result_i_reg[9] ;
  (* DIRECT_ENABLE *) wire m1_PipeRun_for_ce;
  wire m1_byte_access;
  wire m1_databus_access;
  wire m1_databus_access_from_m00;
  wire m1_databus_access_from_m0_reg_0;
  wire m1_databus_addr_from_m0_reg_0;
  wire m1_databus_write_from_m0_reg_0;
  wire m1_databus_write_from_m0_reg_1;
  wire m1_dead_valid_hold;
  wire m1_delay_slot;
  wire m1_dlmb_issued;
  wire m1_doublet_access;
  wire m1_exception_from_m0;
  wire [28:31]m1_exception_kind;
  wire [28:31]m1_exception_raw_kind;
  wire m1_gpr_write;
  wire [0:4]m1_gpr_write_addr;
  wire m1_gpr_write_dbg;
  wire [0:31]m1_instr;
  wire m1_is_div_instr_i;
  wire m1_jump_taken;
  wire m1_m0_sel_res;
  wire m1_m0_sel_res0;
  wire m1_m2_complete_in_later_stage;
  wire m1_m3_complete_in_later_stage;
  wire m1_msr_clear_bip_i;
  wire m1_msr_set_ie_i;
  wire m1_piperun_masked_no1;
  wire m1_piperun_masked_no2;
  wire m1_piperun_raw;
  wire m1_raw_valid_reg_n_0;
  wire m1_read_imm_reg;
  wire m1_rtid_instr;
  wire m1_sel_mul_res;
  wire [1:0]m1_unaligned_addr_3lsb;
  wire [2:0]\m2_M1_Result_i_reg[29] ;
  (* DIRECT_ENABLE *) wire m2_PipeRun_for_ce;
  wire m2_allow_dready;
  wire m2_byte_access_i;
  wire m2_complete_in_later_stage;
  wire m2_databus_access_i0;
  wire m2_databus_access_i_reg_0;
  wire m2_databus_read_i_reg_n_0;
  wire m2_databus_write;
  wire m2_dead_valid_hold;
  wire m2_delay_slot;
  wire m2_dlmb_dready;
  wire m2_dlmb_drop_request;
  wire m2_doublet_access_i;
  wire m2_exception_from_m1;
  wire [28:31]m2_exception_kind;
  wire [28:31]m2_exception_raw_kind;
  wire m2_exception_taken;
  wire m2_gpr_write;
  wire [0:4]m2_gpr_write_addr;
  wire m2_gpr_write_dbg;
  wire [0:31]m2_instr;
  wire m2_is_div_instr;
  wire m2_jump_taken;
  wire m2_m1_sel_res0;
  wire [0:0]m2_m1_sel_res_reg;
  wire [0:0]m2_m1_sel_res_reg_0;
  wire m2_m3_complete_in_later_stage;
  wire m2_msr_clear_bip_i;
  wire m2_msr_set_ie_i;
  wire m2_piperun_masked_no1;
  wire m2_piperun_masked_no2;
  wire m2_piperun_masked_no3;
  wire m2_piperun_masked_no4;
  wire m2_piperun_masked_no5;
  wire m2_piperun_raw;
  wire m2_potential_bubble;
  wire m2_raw_valid_reg_0;
  wire m2_read_imm_reg;
  wire m2_rtid_instr;
  wire [31:0]\m3_PC_i_reg[0] ;
  wire [3:0]\m3_PC_i_reg[11] ;
  wire [3:0]\m3_PC_i_reg[15] ;
  wire [3:0]\m3_PC_i_reg[19] ;
  wire [1:0]\m3_PC_i_reg[1] ;
  wire [3:0]\m3_PC_i_reg[23] ;
  wire [3:0]\m3_PC_i_reg[3] ;
  wire [3:0]\m3_PC_i_reg[7] ;
  (* DIRECT_ENABLE *) wire m3_PipeRun_for_ce;
  wire m3_active_access;
  wire m3_byte_access_i_reg_n_0;
  wire m3_complete_in_later_stage;
  wire m3_databus_access_i0;
  wire m3_databus_read_i_reg_n_0;
  wire m3_databus_ready;
  wire m3_databus_write_i_reg_n_0;
  wire m3_dead_valid_hold;
  wire m3_delay_slot_i_reg_n_0;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire m3_div_overflow_i_reg;
  wire m3_div_stall;
  wire m3_div_zero_overflow_ex_hold;
  wire m3_doublet_access_i_reg_n_0;
  wire m3_exception_from_m2;
  wire [28:28]m3_exception_kind;
  wire [28:31]m3_exception_raw_kind;
  wire m3_exception_taken;
  wire m3_gpr_write;
  wire [0:4]m3_gpr_write_addr;
  wire \m3_gpr_write_addr_reg[3]_0 ;
  wire m3_gpr_write_dbg;
  wire [0:31]m3_instr;
  wire m3_is_div_instr_i_reg_0;
  wire m3_jump_taken;
  wire m3_m2_sel_res;
  wire [0:0]m3_msr;
  wire m3_msr_clear_bip_i;
  wire m3_msr_set_ie_i;
  wire m3_piperun_data_raw;
  wire m3_piperun_masked_no1;
  wire m3_piperun_masked_no2;
  wire m3_piperun_masked_no3;
  wire m3_piperun_raw;
  wire m3_raw_valid_reg_0;
  wire m3_read_imm_reg_i_reg_n_0;
  wire m3_rtid_instr;
  wire m3_sel_div_res;
  wire m3_sel_load_res;
  wire normal_stop_i;
  wire of_Interrupt;
  wire of_MSR_cmb_pipemove_inferred_i_19_n_0;
  wire of_MSR_cmb_pipemove_inferred_i_20_n_0;
  wire of_MSR_cmb_pipemove_inferred_i_21_n_0;
  wire of_MSR_cmb_pipemove_inferred_i_22_n_0;
  wire of_MSR_cmb_pipemove_inferred_i_23_n_0;
  wire of_MSR_cmb_pipemove_inferred_i_24_n_0;
  wire [3:0]\of_MSR_i_reg[22] ;
  wire [4:0]\of_MSR_i_reg[22]_0 ;
  wire [3:0]\of_MSR_i_reg[25] ;
  wire [1:0]\of_MSR_i_reg[25]_0 ;
  wire [1:0]\of_MSR_i_reg[25]_1 ;
  (* DIRECT_ENABLE *) wire of_PipeRun_for_ce;
  wire of_byte_access;
  wire of_clear_msr_bip_hold0;
  wire of_clear_msr_bip_hold_reg_n_0;
  wire of_dead_valid_hold;
  wire of_doublet_access;
  wire of_ex_complete_in_later_stage;
  (* RTL_KEEP = "true" *) wire of_gpr_write;
  (* RTL_KEEP = "true" *) wire of_gpr_write_dbg;
  wire [0:5]of_instr;
  wire of_is_bsifi;
  wire of_is_div_instr;
  wire of_m0_complete_in_later_stage;
  wire of_m1_complete_in_later_stage;
  wire [28:28]of_msr;
  wire of_next_ex_valid;
  wire of_op1_sel_spr_pc;
  wire [0:2]of_op2_sel;
  wire [0:2]of_op3_sel;
  wire of_piperun_masked_no1;
  wire of_piperun_masked_no10;
  wire of_piperun_masked_no2;
  wire of_piperun_masked_no3;
  wire of_piperun_masked_no4;
  wire of_piperun_masked_no5;
  wire of_piperun_masked_no6;
  wire of_piperun_masked_no7;
  wire of_piperun_masked_no8;
  wire of_piperun_masked_no9;
  wire of_piperun_raw;
  wire [9:9]of_predecode;
  wire of_raw_valid;
  wire of_read_imm_reg;
  wire of_read_imm_reg_raw;
  wire of_set_msr_ee_hold0;
  wire of_set_msr_ee_hold_i_2_n_0;
  wire of_set_msr_ee_hold_reg_n_0;
  wire of_set_msr_ie;
  wire of_set_msr_ie_hold0;
  wire of_set_msr_ie_hold_reg_n_0;
  wire out;
  wire p_104_in;
  wire p_2_in;
  wire p_4_out__0;
  wire p_55_out;
  (* DIRECT_RESET *) wire reset_bool_for_rst;
  wire single_Step_N;
  wire single_Step_N_reg;
  wire [1:0]\trace_new_reg_value_i[24]_i_2 ;
  wire trace_wb_jump_taken;
  wire trace_wb_valid_instr;
  wire use_Reg_Neg_DI1_out;
  wire use_Reg_Neg_S3_out;
  wire [0:1]wakeup_i;
  wire [10:0]wb_MSR_i;
  wire \wb_PC_i_reg[31] ;
  wire wb_abort_div;
  wire wb_byte_access;
  wire wb_databus_access;
  wire wb_databus_read;
  wire wb_databus_write;
  wire wb_delay_slot;
  wire wb_div_zero_overflow;
  wire wb_doublet_access;
  wire [2:0]wb_exception_from_m3_reg_0;
  wire wb_exception_from_m3_reg_rep_0;
  wire wb_exception_from_m3_reg_rep_1;
  wire wb_exception_from_m3_reg_rep__0_0;
  wire wb_exception_from_m3_reg_rep__0_1;
  wire wb_exception_from_m3_reg_rep__0_2;
  wire wb_exception_from_m3_reg_rep__0_3;
  wire wb_exception_from_m3_reg_rep__0_4;
  wire wb_exception_from_m3_reg_rep__0_5;
  wire [28:31]wb_exception_raw_kind;
  wire \wb_exception_raw_kind_reg[31]_0 ;
  wire [0:0]\wb_exception_raw_kind_reg[31]_1 ;
  wire wb_exception_taken;
  wire [8:0]wb_fwd;
  wire wb_gpr_wr;
  wire wb_gpr_wr_dbg;
  wire [2:0]\wb_gpr_write_addr_reg[1]_0 ;
  wire \wb_gpr_write_addr_reg_n_0_[0] ;
  wire \wb_gpr_write_addr_reg_n_0_[4] ;
  wire wb_halted;
  wire wb_ie_rising;
  wire [31:0]\wb_instr_i_reg[0]_0 ;
  wire wb_m3_sel_res0;
  wire wb_msr_clear_bip;
  wire wb_msr_clear_ie;
  wire wb_msr_set_ie;
  wire wb_pc_valid;
  wire wb_piperun_i_reg_n_0;
  wire wb_raw_valid_reg_n_0;
  wire wb_read_imm_reg;
  wire wb_read_imm_reg_1;
  wire wb_reset;
  wire wb_reset_reg_0;
  wire wb_rtid_instr;

  assign \Use_Async_Reset.sync_reset_reg  = flush_pipe_for_rst;
  assign ex_raw_valid_reg_0 = ex_PipeRun_for_ce;
  assign lopt_4 = lopt_42;
  assign lopt_41 = lopt_3;
  assign lopt_44 = lopt_6;
  assign lopt_5 = lopt_43;
  assign lopt_7 = lopt_45;
  assign lopt_8 = lopt_46;
  assign m0_piperun = m0_PipeRun_for_ce;
  assign m1_piperun = m1_PipeRun_for_ce;
  assign m2_piperun = m2_PipeRun_for_ce;
  assign m3_piperun = m3_PipeRun_for_ce;
  assign of_piperun = of_PipeRun_for_ce;
  assign reset_bool_for_rst = sync_reset;
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \Byte_Doublet_Handle_I1/Data_Addr[30]_INST_0 
       (.I0(m1_byte_access),
        .I1(m1_doublet_access),
        .I2(m1_unaligned_addr_3lsb[1]),
        .O(D[12]));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Byte_Doublet_Handle_I1/Data_Addr[31]_INST_0 
       (.I0(m1_byte_access),
        .I1(m1_unaligned_addr_3lsb[0]),
        .O(D[11]));
  LUT4 #(
    .INIT(16'hCDC8)) 
    \Byte_Doublet_Handle_I1/Data_Write[10]_INST_0 
       (.I0(m1_byte_access),
        .I1(\Use_DAXI.M_AXI_DP_WDATA_reg[23] [7]),
        .I2(m1_doublet_access),
        .I3(\Use_DAXI.M_AXI_DP_WDATA_reg[23]_0 [5]),
        .O(D[8]));
  LUT4 #(
    .INIT(16'hCDC8)) 
    \Byte_Doublet_Handle_I1/Data_Write[11]_INST_0 
       (.I0(m1_byte_access),
        .I1(\Use_DAXI.M_AXI_DP_WDATA_reg[23] [6]),
        .I2(m1_doublet_access),
        .I3(\Use_DAXI.M_AXI_DP_WDATA_reg[23]_0 [4]),
        .O(D[7]));
  LUT4 #(
    .INIT(16'hCDC8)) 
    \Byte_Doublet_Handle_I1/Data_Write[12]_INST_0 
       (.I0(m1_byte_access),
        .I1(\Use_DAXI.M_AXI_DP_WDATA_reg[23] [5]),
        .I2(m1_doublet_access),
        .I3(\Use_DAXI.M_AXI_DP_WDATA_reg[23]_0 [3]),
        .O(D[6]));
  LUT4 #(
    .INIT(16'hCDC8)) 
    \Byte_Doublet_Handle_I1/Data_Write[13]_INST_0 
       (.I0(m1_byte_access),
        .I1(\Use_DAXI.M_AXI_DP_WDATA_reg[23] [4]),
        .I2(m1_doublet_access),
        .I3(\Use_DAXI.M_AXI_DP_WDATA_reg[23]_0 [2]),
        .O(D[5]));
  LUT4 #(
    .INIT(16'hCDC8)) 
    \Byte_Doublet_Handle_I1/Data_Write[14]_INST_0 
       (.I0(m1_byte_access),
        .I1(\Use_DAXI.M_AXI_DP_WDATA_reg[23] [3]),
        .I2(m1_doublet_access),
        .I3(\Use_DAXI.M_AXI_DP_WDATA_reg[23]_0 [1]),
        .O(D[4]));
  LUT4 #(
    .INIT(16'hCDC8)) 
    \Byte_Doublet_Handle_I1/Data_Write[15]_INST_0 
       (.I0(m1_byte_access),
        .I1(\Use_DAXI.M_AXI_DP_WDATA_reg[23] [2]),
        .I2(m1_doublet_access),
        .I3(\Use_DAXI.M_AXI_DP_WDATA_reg[23]_0 [0]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT4 #(
    .INIT(16'hCDC8)) 
    \Byte_Doublet_Handle_I1/Data_Write[8]_INST_0 
       (.I0(m1_byte_access),
        .I1(\Use_DAXI.M_AXI_DP_WDATA_reg[23] [9]),
        .I2(m1_doublet_access),
        .I3(\Use_DAXI.M_AXI_DP_WDATA_reg[23]_0 [7]),
        .O(D[10]));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT4 #(
    .INIT(16'hCDC8)) 
    \Byte_Doublet_Handle_I1/Data_Write[9]_INST_0 
       (.I0(m1_byte_access),
        .I1(\Use_DAXI.M_AXI_DP_WDATA_reg[23] [8]),
        .I2(m1_doublet_access),
        .I3(\Use_DAXI.M_AXI_DP_WDATA_reg[23]_0 [6]),
        .O(D[9]));
  FDRE Dbg_Clean_Stop_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_38),
        .Q(dbg_clean_stop),
        .R(reset_bool_for_rst));
  FDRE \EX_ALU_Op_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_82),
        .Q(\EX_ALU_Op_reg[0]_0 [1]),
        .R(reset_bool_for_rst));
  FDRE \EX_ALU_Op_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_83),
        .Q(\EX_ALU_Op_reg[0]_0 [0]),
        .R(reset_bool_for_rst));
  FDSE EX_ALU_Sel_Logic_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_45),
        .Q(ex_alu_sel_logic),
        .S(reset_bool_for_rst));
  FDRE EX_Arith_Shift_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[9]),
        .Q(ex_arith_shift),
        .R(reset_bool_for_rst));
  FDRE EX_Bit_Extract_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(EX_Bit_Extract0),
        .Q(ex_bit_extract),
        .R(reset_bool_for_rst));
  FDRE EX_Bit_Insert_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_is_bsifi),
        .Q(ex_bit_insert),
        .R(reset_bool_for_rst));
  FDRE EX_CLZ_Instr_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_94),
        .Q(ex_clz_instr),
        .R(reset_bool_for_rst));
  FDRE EX_CMP_Op_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(EX_CMP_Op12_out),
        .Q(ex_cmp_op),
        .R(reset_bool_for_rst));
  microblaze_microblaze_0_0_two_piperun_fd EX_Div_Exception_Hold_DFF
       (.Clk(Clk),
        .E(ex_PipeRun_for_ce),
        .\Using_FPGA.Native (m3_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (wb_exception_from_m3_reg_rep_0),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow(m3_div_overflow),
        .m3_div_zero_overflow_ex_hold(m3_div_zero_overflow_ex_hold),
        .sync_reset(reset_bool_for_rst));
  FDRE EX_Div_Unsigned_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[1]),
        .Q(ex_div_unsigned),
        .R(reset_bool_for_rst));
  FDRE EX_Enable_ALU_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_128),
        .Q(EX_Enable_ALU),
        .R(reset_bool_for_rst));
  FDRE EX_Enable_Sext_Shift_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_79),
        .Q(ex_enable_sext_shift),
        .R(reset_bool_for_rst));
  microblaze_microblaze_0_0_two_piperun_fd_55 EX_GPR_Dbg_Write_DFF
       (.Clk(Clk),
        .D(D_29),
        .\Using_FPGA.Native (flush_pipe_for_rst),
        .ex_gpr_write_dbg(ex_gpr_write_dbg));
  microblaze_microblaze_0_0_two_piperun_fd_56 EX_GPR_Write_DFF
       (.A4_out(A4_out),
        .Clk(Clk),
        .D(D_30),
        .\Using_FPGA.Native (EX_GPR_Write_DFF_n_3),
        .\Using_FPGA.Native_0 (EX_GPR_Write_DFF_n_4),
        .\Using_FPGA.Native_1 (flush_pipe_for_rst),
        .\Using_FPGA.Native_2 (ex_raw_valid_reg_n_0),
        .ex_gpr_write(ex_gpr_write),
        .ex_raw_valid_reg(EX_GPR_Write_DFF_n_2));
  microblaze_microblaze_0_0_two_piperun_fd_57 EX_Jump_handling
       (.Clk(Clk),
        .\Using_FPGA.Native (\Using_EX_FPGA.PR_EX_And7_n_1 ),
        .\Using_FPGA.Native_0 (wb_exception_from_m3_reg_rep_0),
        .ex_first_cycle(ex_first_cycle),
        .ex_hibernate_i_reg(ex_mbar_decode),
        .ex_hibernate_i_reg_0(\Using_FPGA.Native_i_2__5_n_0 ),
        .ex_jump_hold(ex_jump_hold),
        .ex_mbar_decode_reg(EX_Jump_handling_n_3),
        .ex_mbar_decode_reg_0(EX_Jump_handling_n_4),
        .ex_mbar_sleep(ex_mbar_sleep),
        .ex_mbar_wait_1(ex_mbar_wait_1),
        .ex_sleep_i0(ex_sleep_i0),
        .flush_pipe_for_rst(flush_pipe_for_rst),
        .sync_reset(reset_bool_for_rst));
  FDRE EX_Left_Shift_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[10]),
        .Q(ex_left_shift),
        .R(reset_bool_for_rst));
  FDRE \EX_Logic_Op_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[4]),
        .Q(\EX_Logic_Op_reg[0]_0 [3]),
        .R(reset_bool_for_rst));
  FDRE \EX_Logic_Op_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[5]),
        .Q(\EX_Logic_Op_reg[0]_0 [2]),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'hAFAEA3A2ACAEA0A2)) 
    \EX_Op1[0]_i_3 
       (.I0(\EX_Op1[0]_i_5_n_0 ),
        .I1(ex_load_alu_carry_reg_n_0),
        .I2(\Using_FPGA.Native_i_2__5_n_0 ),
        .I3(ex_load_shift_carry),
        .I4(LO),
        .I5(\Use_HW_BS.mem_mux3_reg[28] [0]),
        .O(\EX_Op1[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFF1F0010)) 
    \EX_Op1[0]_i_5 
       (.I0(m0_databus_read_i0),
        .I1(ex_reservation),
        .I2(ex_databus_exclusive_i_reg_n_0),
        .I3(\Using_FPGA.Native_i_2__5_n_0 ),
        .I4(EX_CarryIn),
        .O(\EX_Op1[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0101510151515151)) 
    \EX_Op1[29]_i_7 
       (.I0(ex_pattern_cmp_sel),
        .I1(EX_Enable_Sext_Shift_reg_0),
        .I2(ex_clz_instr),
        .I3(\EX_Op1[29]_i_5 ),
        .I4(\EX_Op1[29]_i_5_0 ),
        .I5(\EX_Op1[29]_i_5_1 ),
        .O(\EX_Op1[29]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \EX_Op1[30]_i_7 
       (.I0(ex_sel_alu_res),
        .I1(ex_alu_result[1]),
        .O(\EX_Op1[30]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0101510151515151)) 
    \EX_Op1[30]_i_8 
       (.I0(ex_pattern_cmp_sel),
        .I1(EX_Enable_Sext_Shift_reg_1),
        .I2(ex_clz_instr),
        .I3(\EX_Op1[30]_i_5 ),
        .I4(\EX_Op1[30]_i_5_0 ),
        .I5(\EX_Op1[30]_i_5_1 ),
        .O(\EX_Op1[30]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[10]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [19]),
        .I1(\m0_Ex_Result_i[10]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[10]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[11]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [18]),
        .I1(\m0_Ex_Result_i[11]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[11]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[12]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [17]),
        .I1(\m0_Ex_Result_i[12]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[12]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[13]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [16]),
        .I1(\m0_Ex_Result_i[13]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[13]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[14]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [15]),
        .I1(\m0_Ex_Result_i[14]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[14]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[15]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [14]),
        .I1(\m0_Ex_Result_i[15]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[15]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[1]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [28]),
        .I1(\m0_Ex_Result_i[1]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[1]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \EX_Op2[29]_i_5 
       (.I0(ex_sel_alu_res),
        .I1(\bp0_branch_target_reg[0]_1 [0]),
        .O(ex_sel_alu_reg_0));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[2]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [27]),
        .I1(\m0_Ex_Result_i[2]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0000D0DF)) 
    \EX_Op2[30]_i_4 
       (.I0(\EX_Op1[30]_i_5_1 ),
        .I1(\EX_Op3[30]_i_2 ),
        .I2(ex_clz_instr),
        .I3(EX_Enable_Sext_Shift_reg_1),
        .I4(ex_pattern_cmp_sel),
        .I5(\m0_Ex_Result_i[30]_i_2_n_0 ),
        .O(\EX_Op2[30]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hBABFAAAA)) 
    \EX_Op2[31]_i_6 
       (.I0(ex_sel_alu_res),
        .I1(\EX_Op3[31]_i_3 ),
        .I2(\EX_Logic_Op_reg[0]_0 [3]),
        .I3(\EX_Op3[31]_i_3_0 ),
        .I4(ex_pattern_cmp_sel),
        .O(\EX_Op2[31]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \EX_Op2[31]_i_7 
       (.I0(ex_sel_alu_res),
        .I1(ex_alu_result[0]),
        .O(\EX_Op2[31]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[3]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [26]),
        .I1(\m0_Ex_Result_i[3]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[3]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[4]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [25]),
        .I1(\m0_Ex_Result_i[4]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[4]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[5]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [24]),
        .I1(\m0_Ex_Result_i[5]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[5]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[6]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [23]),
        .I1(\m0_Ex_Result_i[6]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[6]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[7]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [22]),
        .I1(\m0_Ex_Result_i[7]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[7]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[8]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [21]),
        .I1(\m0_Ex_Result_i[8]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[8]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h5C5F5C5F5C5F5F5F)) 
    \EX_Op2[9]_i_5 
       (.I0(\bp0_branch_target_reg[0]_1 [20]),
        .I1(\m0_Ex_Result_i[9]_i_2_n_0 ),
        .I2(ex_sel_alu_res),
        .I3(ex_enable_sext_shift),
        .I4(out),
        .I5(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Op2[9]_i_5_n_0 ));
  FDRE EX_Pattern_Cmp_Sel_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(EX_Pattern_Cmp_Sel7_out),
        .Q(ex_pattern_cmp_sel),
        .R(reset_bool_for_rst));
  FDRE \EX_Sext_Op_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_91),
        .Q(\EX_Sext_Op_reg[0]_0 [1]),
        .R(reset_bool_for_rst));
  FDRE \EX_Sext_Op_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_92),
        .Q(\EX_Sext_Op_reg[0]_0 [0]),
        .R(reset_bool_for_rst));
  FDRE \EX_Shift_Op_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[6]),
        .Q(ex_shift_op[0]),
        .R(reset_bool_for_rst));
  FDRE \EX_Shift_Op_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[5]),
        .Q(ex_shift_op[1]),
        .R(reset_bool_for_rst));
  FDRE EX_Unsigned_Op_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(EX_Unsigned_Op11_out),
        .Q(ex_unsigned_op),
        .R(reset_bool_for_rst));
  FDRE EX_Use_Carry_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(EX_Use_Carry10_out),
        .Q(ex_use_carry),
        .R(reset_bool_for_rst));
  microblaze_microblaze_0_0_Jump_Logic_ff Jump_Logic_I1
       (.Clear_Buffer(Clear_Buffer),
        .Clk(Clk),
        .E(ex_PipeRun_for_ce),
        .EX_Op1_CMP_Equal(EX_Op1_CMP_Equal),
        .EX_Op1_Zero(EX_Op1_Zero),
        .Q({wb_exception_raw_kind[28],wb_exception_raw_kind[30],wb_exception_raw_kind[31]}),
        .\Using_FPGA.Native (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_0 (wb_exception_from_m3_reg_rep_0),
        .\Using_FPGA.Native_1 (ex_raw_valid_reg_n_0),
        .\Using_FPGA.Native_2 (EX_Jump_handling_n_3),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_36 ),
        .\bp0_branch_target_reg[31] (EX_Jump_handling_n_4),
        .bp0_jump0(bp0_jump0),
        .bp0_keep_jump(bp0_keep_jump),
        .bp0_keep_jump_reg(Jump_Logic_I1_n_10),
        .bp0_keep_jump_reg_0(bp1_raw_valid_reg_1),
        .ex_branch_with_delayslot(ex_branch_with_delayslot),
        .ex_branch_with_delayslot_reg(Jump_Logic_I1_n_6),
        .ex_delayslot_Instr0(ex_delayslot_Instr0),
        .ex_jump(ex_jump),
        .ex_op1_cmp_eq(ex_op1_cmp_eq),
        .ex_op1_cmp_eq1(ex_op1_cmp_eq1),
        .ex_op1_cmp_eq_n7_out(ex_op1_cmp_eq_n7_out),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .force12_out(force12_out),
        .force_Val10_out(force_Val10_out),
        .force_Val2_N_reg_0(PREFETCH_BUFFER_I1_n_76),
        .keep_jump_taken_with_ds(keep_jump_taken_with_ds),
        .keep_jump_taken_with_ds_reg(Jump_Logic_I1_n_8),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(\^lopt_5 ),
        .lopt_6(\^lopt_6 ),
        .lopt_7(\^lopt_7 ),
        .m0_jump_taken(m0_jump_taken),
        .of_raw_valid(of_raw_valid),
        .sync_reset(reset_bool_for_rst),
        .use_Reg_Neg_DI1_out(use_Reg_Neg_DI1_out),
        .use_Reg_Neg_S3_out(use_Reg_Neg_S3_out),
        .use_Reg_Neg_S_reg_0(of_PipeRun_for_ce),
        .wb_abort_div(wb_abort_div),
        .\wb_exception_raw_kind_reg[31] (Jump_Logic_I1_n_9));
  microblaze_microblaze_0_0_carry_or_bb_58 Kill_Fetch_Carry
       (.\Serial_Dbg_Intf.if_debug_ready_i_reg (Kill_Fetch_Carry_n_1),
        .\Using_FPGA.Native (ex_mbar_decode),
        .\Using_FPGA.Native_0 (ex_raw_valid_reg_n_0),
        .\Using_FPGA.Native_1 (wb_exception_from_m3_reg_rep__0_0),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_3 (if4_dead_fetch_hold_reg_n_0),
        .\Using_FPGA.Native_4 (if4_ibus_access_i_reg_n_0),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_gpr_write_addr(ex_gpr_write_addr[4]),
        .ex_jump(ex_jump),
        .if2_dead_fetch_hold_reg(S_0),
        .if2_dead_fetch_hold_reg_0(if1_insert_piperun_i),
        .if2_raw_valid_reg(Kill_Fetch_Carry_n_2),
        .kill_fetch(kill_fetch),
        .lopt(\^lopt_3 ),
        .lopt_1(\^lopt_4 ),
        .lopt_2(\^lopt_5 ));
  microblaze_microblaze_0_0_carry_or_bb_59 Kill_Fetch_MMU_Carry
       (.DI(bp0_raw_valid_reg_0),
        .\Using_FPGA.Native (kill_fetch_mmu),
        .bp0_dead_fetch_hold(bp0_dead_fetch_hold),
        .bp0_dead_fetch_hold_reg(Kill_Fetch_MMU_Carry_n_3),
        .bp0_dead_fetch_hold_reg_0(bp1_raw_valid_reg_1),
        .bp1_dead_fetch_hold_reg(Kill_Fetch_MMU_Carry_n_1),
        .if2_ibus_access_raw0(if2_ibus_access_raw0),
        .if2_ibus_first_cycle_raw_reg(bp1_dead_fetch_hold_reg_0),
        .if2_ibus_first_cycle_raw_reg_0(bp1_raw_valid_reg_0),
        .if2_ibus_first_cycle_raw_reg_1(if1_insert_piperun_i),
        .kill_fetch(kill_fetch),
        .lopt(\^lopt_6 ),
        .lopt_1(\^lopt_7 ),
        .sync_reset(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT5 #(
    .INIT(32'hBAAAAAAA)) 
    \LOCKSTEP_Master_Out[10]_INST_0 
       (.I0(bp0_raw_valid_reg_2),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_exception_raw_kind[28]),
        .I3(wb_exception_from_m3_reg_rep__0_0),
        .I4(wb_exception_raw_kind[31]),
        .O(D[47]));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAEAAA)) 
    \LOCKSTEP_Master_Out[5]_INST_0 
       (.I0(bp0_raw_valid_reg_1),
        .I1(wb_exception_raw_kind[31]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[30]),
        .I5(bp0_raw_valid_reg_2),
        .O(LOCKSTEP_Master_Out[1]));
  LUT5 #(
    .INIT(32'hBAAAAAAA)) 
    \LOCKSTEP_Master_Out[7]_INST_0 
       (.I0(\wb_PC_i_reg[31] ),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_exception_raw_kind[28]),
        .I3(wb_exception_from_m3_reg_rep_0),
        .I4(wb_exception_raw_kind[31]),
        .O(LOCKSTEP_Master_Out[0]));
  microblaze_microblaze_0_0_two_piperun_fd_60 M0_DIV_DFF
       (.Clk(Clk),
        .D(D_18),
        .m0_is_div_instr_i(m0_is_div_instr_i),
        .sync_reset(reset_bool_for_rst));
  microblaze_microblaze_0_0_two_piperun_fd_61 M0_Div_Exception_Hold_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native (m3_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (wb_exception_from_m3_reg_rep_0),
        .\Using_FPGA.Native_1 (wb_exception_from_m3_reg_rep__0_0),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_26 ),
        .in0(m0_PipeRun_for_ce),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow(m3_div_overflow),
        .sync_reset(reset_bool_for_rst),
        .wb_exception_from_m3_reg_rep__0(M0_Div_Exception_Hold_DFF_n_0));
  microblaze_microblaze_0_0_two_piperun_fd_62 M0_Exception_From_DFF
       (.A_N201_out(A_N201_out),
        .Clk(Clk),
        .D({m0_exception_kind[28],m0_exception_kind[30],m0_exception_kind[31]}),
        .D_0(D_2),
        .D_1(D_0),
        .D_2(D_19),
        .E(ex_PipeRun_for_ce),
        .\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg (M2_Exception_From_DFF_n_1),
        .\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 (wb_halted),
        .\Use_Async_Reset.sync_reset_reg (M0_Exception_From_DFF_n_3),
        .\Using_FPGA.Native (M0_Exception_From_DFF_n_11),
        .\Using_FPGA.Native_0 (M0_Load_Store_Access_DFF_n_1),
        .\Using_FPGA.Native_1 (M0_Load_Store_Access_DFF_n_3),
        .\Using_FPGA.Native_2 (m1_PipeRun_for_ce),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_dead_valid_hold_reg(M0_Exception_From_DFF_n_8),
        .ex_first_cycle_reg(wb_exception_from_m3_reg_rep_0),
        .ex_jump(ex_jump),
        .ex_jump_nodelay(ex_jump_nodelay),
        .ex_raw_valid_reg(of_PipeRun_for_ce),
        .ex_raw_valid_reg_0(ex_raw_valid_reg_n_0),
        .in0(m0_PipeRun_for_ce),
        .m0_dead_valid_hold(m0_dead_valid_hold),
        .m0_exception_from_ex(m0_exception_from_ex),
        .m0_exception_raw_kind({m0_exception_raw_kind[28],m0_exception_raw_kind[30],m0_exception_raw_kind[31]}),
        .m0_raw_valid_reg(M0_Exception_From_DFF_n_6),
        .m1_databus_addr_from_m0_reg(M0_Load_Store_Access_DFF_n_0),
        .m1_databus_addr_from_m0_reg_0(wb_exception_from_m3_reg_rep__0_0),
        .m1_databus_addr_from_m0_reg_1(m0_raw_valid_reg_n_0),
        .m1_databus_addr_from_m0_reg_2(M3_Exception_From_DFF_n_2),
        .m1_exception_from_m0(m1_exception_from_m0),
        .m3_exception_taken(m3_exception_taken),
        .of_dead_valid_hold(of_dead_valid_hold),
        .of_next_ex_valid(of_next_ex_valid),
        .of_raw_valid(of_raw_valid),
        .of_read_imm_reg_raw_reg(\wb_PC_i_reg[31] ),
        .of_read_imm_reg_raw_reg_0(\m0_exception_raw_kind_reg[31]_0 ),
        .of_read_imm_reg_raw_reg_1(ex_Interrupt),
        .p_43_out__4(\Use_Debug_Logic.Master_Core.Debug_Perf/p_43_out__4 ),
        .p_48_out(\Use_Debug_Logic.Master_Core.Debug_Perf/p_48_out ),
        .single_Step_N(single_Step_N),
        .single_Step_N_reg(single_Step_N_reg),
        .sync_reset(reset_bool_for_rst),
        .wb_exception_from_m3_reg_rep(M0_Exception_From_DFF_n_4),
        .wb_exception_from_m3_reg_rep_0(M0_Exception_From_DFF_n_9),
        .wb_exception_from_m3_reg_rep__0(M0_Exception_From_DFF_n_7),
        .wb_exception_taken(wb_exception_taken));
  microblaze_microblaze_0_0_two_piperun_fd_63 M0_GPR_Dbg_Write_DFF
       (.Clk(Clk),
        .D(D_21),
        .\Using_FPGA.Native (flush_pipe_for_rst),
        .m0_gpr_write_dbg(m0_gpr_write_dbg));
  microblaze_microblaze_0_0_two_piperun_fd_64 M0_GPR_Write_DFF
       (.A3_out(A3_out),
        .Clk(Clk),
        .D(D_20),
        .\Using_FPGA.Native (M0_GPR_Write_DFF_n_2),
        .\Using_FPGA.Native_0 (flush_pipe_for_rst),
        .\Using_FPGA.Native_1 (m0_raw_valid_reg_n_0),
        .m0_gpr_write(m0_gpr_write),
        .m0_raw_valid_reg(M0_GPR_Write_DFF_n_3),
        .m0_raw_valid_reg_0(M0_GPR_Write_DFF_n_4));
  microblaze_microblaze_0_0_two_piperun_fd_65 M0_Load_Store_Access_DFF
       (.Clk(Clk),
        .D(D_2),
        .\Using_FPGA.Native (M0_Load_Store_Access_DFF_n_0),
        .\Using_FPGA.Native_0 (ex_Interrupt),
        .\Using_FPGA.Native_1 (\m0_exception_raw_kind_reg[31]_0 ),
        .\Using_FPGA.Native_2 (ex_raw_valid_reg_n_0),
        .\Using_FPGA.Native_3 (ex_databus_exclusive_i_reg_n_0),
        .\Using_FPGA.Native_4 (ex_databus_access_i_reg_n_0),
        .ex_Interrupt_raw_reg(M0_Load_Store_Access_DFF_n_1),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_reservation(ex_reservation),
        .ex_reservation_reg(M0_Load_Store_Access_DFF_n_3),
        .m0_databus_read_i0(m0_databus_read_i0),
        .m0_dead_valid_hold(m0_dead_valid_hold),
        .m1_databus_access_from_m00(m1_databus_access_from_m00),
        .m1_databus_access_from_m0_reg(wb_exception_from_m3_reg_rep__0_0),
        .m1_databus_access_from_m0_reg_0(M0_Exception_From_DFF_n_6),
        .sync_reset(reset_bool_for_rst));
  FDRE M0_Sel_Mul_Res_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(p_2_in),
        .Q(m0_sel_mul_res),
        .R(reset_bool_for_rst));
  microblaze_microblaze_0_0_two_piperun_fd_66 M1_DIV_DFF
       (.Clk(Clk),
        .D(D_24),
        .m1_is_div_instr_i(m1_is_div_instr_i),
        .sync_reset(reset_bool_for_rst));
  microblaze_microblaze_0_0_two_piperun_fd_67 M1_Div_Exception_Hold_DFF
       (.Clk(Clk),
        .E(m1_PipeRun_for_ce),
        .\Using_FPGA.Native (m3_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (wb_exception_from_m3_reg_rep_0),
        .\Using_FPGA.Native_1 (wb_exception_from_m3_reg_rep__0_0),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_30 ),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow(m3_div_overflow),
        .sync_reset(reset_bool_for_rst),
        .wb_exception_from_m3_reg_rep__0(M1_Div_Exception_Hold_DFF_n_0));
  microblaze_microblaze_0_0_two_piperun_fd_68 M1_Exception_From_DFF
       (.A_N201_out(A_N201_out),
        .Clk(Clk),
        .D({m1_exception_kind[28],m1_exception_kind[30],m1_exception_kind[31]}),
        .D_0(D_3),
        .D_1(D_0),
        .E(m1_PipeRun_for_ce),
        .Q({m1_exception_raw_kind[28],m1_exception_raw_kind[30],m1_exception_raw_kind[31]}),
        .\Using_FPGA.Native (M2_Exception_From_DFF_n_3),
        .\Using_FPGA.Native_0 (m2_PipeRun_for_ce),
        .m0_dead_valid_hold(m0_dead_valid_hold),
        .m1_exception_from_m0(m1_exception_from_m0),
        .m1_raw_valid_reg(m0_raw_valid_reg_n_0),
        .m1_raw_valid_reg_0(wb_exception_from_m3_reg_rep__0_0),
        .m2_exception_from_m1(m2_exception_from_m1),
        .sync_reset(reset_bool_for_rst));
  microblaze_microblaze_0_0_two_piperun_fd_69 M1_GPR_Dbg_Write_DFF
       (.Clk(Clk),
        .D(D_23),
        .\Using_FPGA.Native (flush_pipe_for_rst),
        .m1_gpr_write_dbg(m1_gpr_write_dbg));
  microblaze_microblaze_0_0_two_piperun_fd_70 M1_GPR_Write_DFF
       (.A2_out(A2_out),
        .Clk(Clk),
        .D(D_22),
        .\Using_FPGA.Native (M1_GPR_Write_DFF_n_3),
        .\Using_FPGA.Native_0 (M1_GPR_Write_DFF_n_4),
        .\Using_FPGA.Native_1 (flush_pipe_for_rst),
        .\Using_FPGA.Native_2 (m1_raw_valid_reg_n_0),
        .m1_gpr_write(m1_gpr_write),
        .m1_raw_valid_reg(M1_GPR_Write_DFF_n_2));
  FDRE M1_Sel_Mul_Res_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(M1_Sel_Mul_Res_reg_2),
        .Q(m1_sel_mul_res),
        .R(reset_bool_for_rst));
  microblaze_microblaze_0_0_two_piperun_fd_71 M2_DIV_DFF
       (.Clk(Clk),
        .D(D_25),
        .E(m2_PipeRun_for_ce),
        .EX_Op1_Zero(EX_Op1_Zero),
        .\Using_FPGA.Native (m2_is_div_instr),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_3 ),
        .floating_hold_div_by_zero__0(floating_hold_div_by_zero__0),
        .floating_hold_div_by_zero_reg(floating_hold_div_by_zero_reg),
        .floating_hold_div_by_zero_reg_0(floating_hold_div_by_zero_reg_0),
        .floating_hold_div_by_zero_reg_1(ex_start_div),
        .floating_hold_div_by_zero_reg_2(flush_pipe_for_rst),
        .floating_hold_div_overflow_reg(floating_hold_div_overflow_reg),
        .floating_hold_div_overflow_reg_0(floating_hold_div_overflow_reg_0),
        .last_cycle(last_cycle),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow_i_reg(m3_PipeRun_for_ce),
        .m3_div_overflow_i_reg_0(m3_div_overflow_i_reg),
        .sync_reset(reset_bool_for_rst));
  microblaze_microblaze_0_0_two_piperun_fd_72 M2_Div_Exception_Hold_DFF
       (.Clk(Clk),
        .E(m2_PipeRun_for_ce),
        .\Using_FPGA.Native (m3_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (wb_exception_from_m3_reg_rep_0),
        .\Using_FPGA.Native_1 (wb_exception_from_m3_reg_rep__0_0),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_29 ),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow(m3_div_overflow),
        .sync_reset(reset_bool_for_rst),
        .wb_exception_from_m3_reg_rep__0(M2_Div_Exception_Hold_DFF_n_0));
  microblaze_microblaze_0_0_two_piperun_fd_73 M2_Exception_From_DFF
       (.Clk(Clk),
        .D({m2_exception_kind[28],m2_exception_kind[30],m2_exception_kind[31]}),
        .D_0(D_4),
        .D_1(D_3),
        .E(m2_PipeRun_for_ce),
        .Q({m2_exception_raw_kind[28],m2_exception_raw_kind[30],m2_exception_raw_kind[31]}),
        .\Using_FPGA.Native (M2_Exception_From_DFF_n_1),
        .\Using_FPGA.Native_0 (M3_Exception_From_DFF_n_1),
        .\Using_FPGA.Native_1 (m3_PipeRun_for_ce),
        .m1_databus_access(m1_databus_access),
        .m1_databus_addr_from_m0_i_3(m2_raw_valid_reg_0),
        .m1_dead_valid_hold(m1_dead_valid_hold),
        .m1_exception_from_m0(m1_exception_from_m0),
        .m2_databus_access_i0(m2_databus_access_i0),
        .m2_databus_access_i_reg(wb_exception_from_m3_reg_rep__0_0),
        .m2_databus_access_i_reg_0(m3_raw_valid_reg_0),
        .m2_dead_valid_hold(m2_dead_valid_hold),
        .m2_exception_from_m1(m2_exception_from_m1),
        .m2_exception_taken(m2_exception_taken),
        .m2_raw_valid_reg(m1_raw_valid_reg_n_0),
        .m3_dead_valid_hold(m3_dead_valid_hold),
        .m3_exception_from_m2(m3_exception_from_m2),
        .sync_reset(reset_bool_for_rst),
        .wb_exception_from_m3_reg_rep__0(M2_Exception_From_DFF_n_3));
  microblaze_microblaze_0_0_two_piperun_fd_74 M2_GPR_Dbg_Write_DFF
       (.Clk(Clk),
        .D(D_5),
        .D_0(D_26),
        .E(m2_PipeRun_for_ce),
        .\Using_FPGA.Native (flush_pipe_for_rst),
        .\Using_FPGA.Native_0 (m3_PipeRun_for_ce),
        .m2_gpr_write_dbg(m2_gpr_write_dbg),
        .m3_gpr_write_dbg(m3_gpr_write_dbg));
  microblaze_microblaze_0_0_two_piperun_fd_75 M2_GPR_Write_DFF
       (.A1_out(A1_out),
        .Clk(Clk),
        .D(D_6),
        .D_0(D_27),
        .E(m2_PipeRun_for_ce),
        .\Using_FPGA.Native (M2_GPR_Write_DFF_n_4),
        .\Using_FPGA.Native_0 (M2_GPR_Write_DFF_n_5),
        .\Using_FPGA.Native_1 (flush_pipe_for_rst),
        .\Using_FPGA.Native_2 (m2_raw_valid_reg_0),
        .\Using_FPGA.Native_3 (m3_PipeRun_for_ce),
        .m2_gpr_write(m2_gpr_write),
        .m2_raw_valid_reg(M2_GPR_Write_DFF_n_2),
        .m3_gpr_write(m3_gpr_write));
  microblaze_microblaze_0_0_two_piperun_fd_76 M3_Exception_From_DFF
       (.Clk(Clk),
        .D({m3_exception_kind,M3_Exception_From_DFF_n_7,M3_Exception_From_DFF_n_8}),
        .D_0(D_4),
        .Q({m3_exception_raw_kind[28],m3_exception_raw_kind[30],m3_exception_raw_kind[31]}),
        .m1_databus_addr_from_m0_i_2(m1_raw_valid_reg_n_0),
        .m1_dead_valid_hold(m1_dead_valid_hold),
        .m1_exception_from_m0(m1_exception_from_m0),
        .m2_dead_valid_hold(m2_dead_valid_hold),
        .m2_exception_from_m1(m2_exception_from_m1),
        .m2_exception_taken(m2_exception_taken),
        .m3_databus_access_i0(m3_databus_access_i0),
        .m3_databus_access_i_reg(wb_exception_from_m3_reg_rep__0_0),
        .m3_databus_access_i_reg_0(m2_raw_valid_reg_0),
        .m3_databus_access_i_reg_1(m2_databus_access_i_reg_0),
        .m3_dead_valid_hold(m3_dead_valid_hold),
        .m3_exception_from_m2(m3_exception_from_m2),
        .m3_exception_taken(m3_exception_taken),
        .sync_reset(reset_bool_for_rst),
        .wb_abort_div(wb_abort_div),
        .wb_exception_from_m3_reg(M3_Exception_From_DFF_n_5),
        .wb_exception_from_m3_reg_0(M3_Exception_From_DFF_n_9),
        .wb_exception_from_m3_reg_1(M3_Exception_From_DFF_n_10),
        .wb_exception_from_m3_reg_2(m3_raw_valid_reg_0),
        .wb_exception_from_m3_reg_3(m3_PipeRun_for_ce),
        .wb_exception_from_m3_reg_rep__0(M3_Exception_From_DFF_n_1),
        .wb_exception_from_m3_reg_rep__0_0(M3_Exception_From_DFF_n_2));
  microblaze_microblaze_0_0_two_piperun_fd_77 M3_GPR_Dbg_Write_DFF
       (.Clk(Clk),
        .D(D_5),
        .\Using_FPGA.Native (flush_pipe_for_rst),
        .m3_gpr_write_dbg(m3_gpr_write_dbg));
  microblaze_microblaze_0_0_two_piperun_fd_78 M3_GPR_Write_DFF
       (.A0_out(A0_out),
        .Clk(Clk),
        .D(D_7),
        .D_0(D_6),
        .\Using_FPGA.Native (M3_GPR_Write_DFF_n_4),
        .\Using_FPGA.Native_0 (M3_GPR_Write_DFF_n_5),
        .\Using_FPGA.Native_1 (flush_pipe_for_rst),
        .\Using_FPGA.Native_2 (m3_raw_valid_reg_0),
        .\Using_FPGA.Native_3 (m3_PipeRun_for_ce),
        .m3_gpr_write(m3_gpr_write),
        .m3_raw_valid_reg(M3_GPR_Write_DFF_n_2));
  microblaze_microblaze_0_0_two_piperun_fd_79 OF_Div_Exception_Hold_DFF
       (.Clk(Clk),
        .\Using_FPGA.Native (m3_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (wb_exception_from_m3_reg_rep_0),
        .\Using_FPGA.Native_1 (of_PipeRun_for_ce),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow(m3_div_overflow),
        .\of_MSR_i_reg[25] (wb_exception_from_m3_reg_rep__0_0),
        .\of_MSR_i_reg[25]_0 (\Using_FPGA.Native_i_2__8_n_0 ),
        .sync_reset(reset_bool_for_rst),
        .wb_exception_from_m3_reg_rep__0(\EX_Op2_reg[17] [6]));
  microblaze_microblaze_0_0_decode_conflict_ff Op1_Conflict_Stall
       (.S(\OF_EX_Cmp/comparator_i1/S_17 ),
        .S_0(\OF_M0_Cmp/comparator_i1/S_16 ),
        .S_1(\OF_M1_Cmp/comparator_i1/S_15 ),
        .S_2(\OF_M2_Cmp/comparator_i1/S_14 ),
        .S_3(\OF_M3_Cmp/comparator_i1/S_13 ),
        .\Using_FPGA.Native (PREFETCH_BUFFER_I1_n_129),
        .\Using_FPGA.Native_0 (EX_GPR_Write_DFF_n_3),
        .\Using_FPGA.Native_1 (PREFETCH_BUFFER_I1_n_130),
        .\Using_FPGA.Native_2 (M0_GPR_Write_DFF_n_3),
        .\Using_FPGA.Native_3 (PREFETCH_BUFFER_I1_n_131),
        .\Using_FPGA.Native_4 (M1_GPR_Write_DFF_n_3),
        .\Using_FPGA.Native_5 (PREFETCH_BUFFER_I1_n_132),
        .\Using_FPGA.Native_6 (M2_GPR_Write_DFF_n_4),
        .\Using_FPGA.Native_7 (PREFETCH_BUFFER_I1_n_133),
        .\Using_FPGA.Native_8 (M3_GPR_Write_DFF_n_4),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .m0_complete_in_later_stage(m0_complete_in_later_stage),
        .m0_complete_in_later_stage_reg(Op1_Conflict_Stall_n_0),
        .m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .m2_complete_in_later_stage_reg(Op1_Conflict_Stall_n_1),
        .m3_complete_in_later_stage(m3_complete_in_later_stage),
        .m3_div_stall(m3_div_stall));
  microblaze_microblaze_0_0_decode_conflict_ff__parameterized1 Op2_Conflict_Stall
       (.S(\OF_EX_Cmp/comparator_i1/S_12 ),
        .S_0(\OF_M0_Cmp/comparator_i1/S_11 ),
        .S_1(\OF_M1_Cmp/comparator_i1/S_10 ),
        .S_2(\OF_M2_Cmp/comparator_i1/S_9 ),
        .S_3(\OF_M3_Cmp/comparator_i1/S_8 ),
        .\Using_FPGA.Native (PREFETCH_BUFFER_I1_n_134),
        .\Using_FPGA.Native_0 (EX_GPR_Write_DFF_n_4),
        .\Using_FPGA.Native_1 (PREFETCH_BUFFER_I1_n_135),
        .\Using_FPGA.Native_10 (PREFETCH_BUFFER_I1_n_139),
        .\Using_FPGA.Native_11 (PREFETCH_BUFFER_I1_n_47),
        .\Using_FPGA.Native_12 (PREFETCH_BUFFER_I1_n_140),
        .\Using_FPGA.Native_13 (PREFETCH_BUFFER_I1_n_48),
        .\Using_FPGA.Native_14 (PREFETCH_BUFFER_I1_n_141),
        .\Using_FPGA.Native_15 (PREFETCH_BUFFER_I1_n_49),
        .\Using_FPGA.Native_16 (PREFETCH_BUFFER_I1_n_142),
        .\Using_FPGA.Native_17 (PREFETCH_BUFFER_I1_n_50),
        .\Using_FPGA.Native_18 (PREFETCH_BUFFER_I1_n_70),
        .\Using_FPGA.Native_2 (M0_GPR_Write_DFF_n_4),
        .\Using_FPGA.Native_3 (PREFETCH_BUFFER_I1_n_136),
        .\Using_FPGA.Native_4 (M1_GPR_Write_DFF_n_4),
        .\Using_FPGA.Native_5 (PREFETCH_BUFFER_I1_n_137),
        .\Using_FPGA.Native_6 (M2_GPR_Write_DFF_n_5),
        .\Using_FPGA.Native_7 (PREFETCH_BUFFER_I1_n_138),
        .\Using_FPGA.Native_8 (M3_GPR_Write_DFF_n_5),
        .\Using_FPGA.Native_9 (PREFETCH_BUFFER_I1_n_46),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .m0_complete_in_later_stage(m0_complete_in_later_stage),
        .m0_complete_in_later_stage_reg(Op2_Conflict_Stall_n_0),
        .m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .m2_complete_in_later_stage_reg(Op2_Conflict_Stall_n_1),
        .m3_complete_in_later_stage(m3_complete_in_later_stage),
        .m3_div_stall(m3_div_stall));
  microblaze_microblaze_0_0_decode_conflict_ff__parameterized3 Op3_Conflict_Stall
       (.A0_out(A0_out),
        .A1_out(A1_out),
        .A2_out(A2_out),
        .A3_out(A3_out),
        .A4_out(A4_out),
        .OF_Use_Op_B(OF_Use_Op_B),
        .Q(Q[15]),
        .S(\OF_EX_Cmp/comparator_i1/S ),
        .S_0(\OF_M0_Cmp/comparator_i1/S ),
        .S_1(\OF_M1_Cmp/comparator_i1/S ),
        .S_2(\OF_M2_Cmp/comparator_i1/S ),
        .S_3(\OF_M3_Cmp/comparator_i1/S ),
        .S_4(\WB_Big_Carry.OF_WB_Use3/carry_or_i1/S ),
        .\Using_FPGA.Native (PREFETCH_BUFFER_I1_n_143),
        .\Using_FPGA.Native_0 (PREFETCH_BUFFER_I1_n_144),
        .\Using_FPGA.Native_1 (PREFETCH_BUFFER_I1_n_145),
        .\Using_FPGA.Native_10 (PREFETCH_BUFFER_I1_n_154),
        .\Using_FPGA.Native_11 (PREFETCH_BUFFER_I1_n_155),
        .\Using_FPGA.Native_2 (PREFETCH_BUFFER_I1_n_146),
        .\Using_FPGA.Native_3 (PREFETCH_BUFFER_I1_n_147),
        .\Using_FPGA.Native_4 (PREFETCH_BUFFER_I1_n_148),
        .\Using_FPGA.Native_5 (PREFETCH_BUFFER_I1_n_149),
        .\Using_FPGA.Native_6 (PREFETCH_BUFFER_I1_n_150),
        .\Using_FPGA.Native_7 (PREFETCH_BUFFER_I1_n_151),
        .\Using_FPGA.Native_8 (PREFETCH_BUFFER_I1_n_152),
        .\Using_FPGA.Native_9 (PREFETCH_BUFFER_I1_n_153),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .m0_complete_in_later_stage(m0_complete_in_later_stage),
        .m0_complete_in_later_stage_reg(Op3_Conflict_Stall_n_0),
        .m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .m2_complete_in_later_stage_reg(Op3_Conflict_Stall_n_1),
        .m3_complete_in_later_stage(m3_complete_in_later_stage),
        .m3_div_stall(m3_div_stall));
  microblaze_microblaze_0_0_PC_Module_ff PC_MODULE_I1
       (.Clk(Clk),
        .D(D[44:13]),
        .DI(bp0_raw_valid_reg_0),
        .E(\Using_FPGA.Native ),
        .\EX_Op1_reg[29] (\EX_Op1[0]_i_3_n_0 ),
        .\EX_Op1_reg[30] (\of_MSR_i_reg[22]_0 [0]),
        .\EX_Op1_reg[30]_0 (\Using_FPGA.Native_i_2__5_n_0 ),
        .Prefetch_Buffer_Full(Prefetch_Buffer_Full),
        .Q(\m3_PC_i_reg[0] ),
        .S(S),
        .\Using_FPGA.Native (\Using_FPGA.Native_17 ),
        .WB_Exception_Return_Addr0(WB_Exception_Return_Addr0),
        .\WB_Exception_Return_Addr_reg[0] (m3_exception_raw_kind[28]),
        .bp0_jump(bp0_jump),
        .\bp1_PC_i_reg[0]_0 (bp1_raw_valid_reg_1),
        .\bp1_PC_i_reg[0]_1 ({bp0_branch_target[0],bp0_branch_target[1],bp0_branch_target[2],bp0_branch_target[3],bp0_branch_target[4],bp0_branch_target[5],bp0_branch_target[6],bp0_branch_target[7],bp0_branch_target[8],bp0_branch_target[9],bp0_branch_target[10],bp0_branch_target[11],bp0_branch_target[12],bp0_branch_target[13],bp0_branch_target[14],bp0_branch_target[15],bp0_branch_target[16],bp0_branch_target[17],bp0_branch_target[18],bp0_branch_target[19],bp0_branch_target[20],bp0_branch_target[21],bp0_branch_target[22],bp0_branch_target[23],bp0_branch_target[24],bp0_branch_target[25],bp0_branch_target[26],bp0_branch_target[27],bp0_branch_target[28],bp0_branch_target[29],bp0_branch_target[30],bp0_branch_target[31]}),
        .\cur_data_i_reg[1] (PC_MODULE_I1_n_96),
        .\cur_data_i_reg[2] (PC_MODULE_I1_n_95),
        .\cur_data_i_reg[30] (\Using_IF4_Push_FPGA.Push_PipeRun_n_1 ),
        .\cur_data_i_reg[31] (\cur_data_i_reg[31] ),
        .\cur_data_i_reg[31]_0 (\cur_data_i_reg[31]_1 ),
        .\ex_PC_i_reg[0]_0 (of_PipeRun_for_ce),
        .ex_set_msr_ie_instr(ex_set_msr_ie_instr),
        .if4_pre_buffer_addr(if4_pre_buffer_addr),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .if4_sel_input(if4_sel_input[3]),
        .in0(m0_PipeRun_for_ce),
        .\m0_PC_i_reg[0]_0 (ex_PipeRun_for_ce),
        .\m2_PC_i_reg[0]_0 (m1_PipeRun_for_ce),
        .\m3_PC_i_reg[0]_0 (m2_PipeRun_for_ce),
        .\m3_PC_i_reg[11]_0 (\m3_PC_i_reg[11] ),
        .\m3_PC_i_reg[15]_0 (\m3_PC_i_reg[15] ),
        .\m3_PC_i_reg[19]_0 (\m3_PC_i_reg[19] ),
        .\m3_PC_i_reg[1]_0 (\m3_PC_i_reg[1] ),
        .\m3_PC_i_reg[23]_0 (\m3_PC_i_reg[23] ),
        .\m3_PC_i_reg[29]_0 (DI),
        .\m3_PC_i_reg[3]_0 (\m3_PC_i_reg[3] ),
        .\m3_PC_i_reg[7]_0 (\m3_PC_i_reg[7] ),
        .m3_exception_from_m2(m3_exception_from_m2),
        .of_op1_sel_spr_pc(of_op1_sel_spr_pc),
        .sync_reset(reset_bool_for_rst));
  microblaze_microblaze_0_0_PreFetch_Buffer_ff PREFETCH_BUFFER_I1
       (.Clear_Buffer(Clear_Buffer),
        .Clk(Clk),
        .D({PREFETCH_BUFFER_I1_n_82,PREFETCH_BUFFER_I1_n_83}),
        .EX_Bit_Extract0(EX_Bit_Extract0),
        .\EX_Branch_CMP_Op1[29]_i_3 (\EX_Branch_CMP_Op1[29]_i_3 ),
        .\EX_Branch_CMP_Op1[30]_i_3 (\EX_Branch_CMP_Op1[30]_i_3 ),
        .\EX_Branch_CMP_Op1[30]_i_3_0 (m3_raw_valid_reg_0),
        .\EX_Branch_CMP_Op1[30]_i_3_1 (m1_raw_valid_reg_n_0),
        .\EX_Branch_CMP_Op1[30]_i_7 (m2_raw_valid_reg_0),
        .\EX_Branch_CMP_Op1[30]_i_8 (m0_raw_valid_reg_n_0),
        .\EX_Branch_CMP_Op1_reg[29] (\EX_Branch_CMP_Op1_reg[29] ),
        .\EX_Branch_CMP_Op1_reg[29]_0 (\EX_Branch_CMP_Op1_reg[29]_0 ),
        .\EX_Branch_CMP_Op1_reg[30] (\EX_Branch_CMP_Op1_reg[30] ),
        .\EX_Branch_CMP_Op1_reg[30]_0 (\EX_Op1[30]_i_8_n_0 ),
        .\EX_Branch_CMP_Op1_reg[30]_1 (\m0_Ex_Result_i[30]_i_2_n_0 ),
        .\EX_Branch_CMP_Op1_reg[30]_2 (\EX_Branch_CMP_Op1_reg[30]_0 ),
        .\EX_Branch_CMP_Op1_reg[30]_3 (\EX_Branch_CMP_Op1_reg[30]_1 ),
        .EX_CLZ_Instr_reg(EX_CLZ_Instr_reg_0),
        .EX_CMP_Op12_out(EX_CMP_Op12_out),
        .\EX_Op1_reg[0] ({\cur_data_i_reg[31] [31:3],\cur_data_i_reg[31] [0]}),
        .\EX_Op1_reg[0]_0 (\EX_Op1[0]_i_3_n_0 ),
        .\EX_Op1_reg[0]_1 (\EX_Op1_reg[0] ),
        .\EX_Op1_reg[23] (\Using_FPGA.Native_i_2__5_n_0 ),
        .\EX_Op1_reg[25] (\of_MSR_i_reg[22]_0 [2]),
        .\EX_Op1_reg[29] (PC_MODULE_I1_n_95),
        .\EX_Op1_reg[29]_0 (\EX_Op1_reg[29] ),
        .\EX_Op1_reg[29]_1 (\EX_Op1_reg[29]_0 ),
        .\EX_Op1_reg[29]_2 (\EX_Op1[29]_i_7_n_0 ),
        .\EX_Op1_reg[29]_3 (\bp0_branch_target_reg[0]_1 [0]),
        .\EX_Op1_reg[29]_4 (ex_sel_alu_res),
        .\EX_Op1_reg[30] (\EX_Op1[30]_i_7_n_0 ),
        .\EX_Op1_reg[30]_0 (PC_MODULE_I1_n_96),
        .\EX_Op1_reg[30]_1 (\EX_Op1_reg[30]_0 ),
        .\EX_Op1_reg[31] (\EX_Op1_reg[31]_0 ),
        .\EX_Op1_reg[31]_0 (\EX_Op1_reg[31]_1 ),
        .\EX_Op2[0]_i_12 (WB_GPR_Write_DFF_n_2),
        .\EX_Op2[0]_i_4 (\EX_Op2[0]_i_4 ),
        .\EX_Op2[0]_i_6 (\EX_Op2[0]_i_6 ),
        .\EX_Op2[0]_i_7 (\EX_Op2[0]_i_7 ),
        .\EX_Op2[16]_i_2 (\EX_Op2[16]_i_2 ),
        .\EX_Op2[25]_i_2 (\EX_Op2[25]_i_2 ),
        .\EX_Op2_reg[0] (\EX_Op2_reg[0] ),
        .\EX_Op2_reg[0]_0 (\EX_Op2_reg[0]_0 ),
        .\EX_Op2_reg[0]_1 (EX_Enable_Sext_Shift_reg_2[16]),
        .\EX_Op2_reg[10] (\EX_Op2_reg[10] ),
        .\EX_Op2_reg[10]_0 (\EX_Op2_reg[10]_0 ),
        .\EX_Op2_reg[10]_1 (\EX_Op2[10]_i_5_n_0 ),
        .\EX_Op2_reg[11] (\EX_Op2_reg[11] ),
        .\EX_Op2_reg[11]_0 (\EX_Op2_reg[11]_0 ),
        .\EX_Op2_reg[11]_1 (\EX_Op2[11]_i_5_n_0 ),
        .\EX_Op2_reg[12] (\EX_Op2_reg[12] ),
        .\EX_Op2_reg[12]_0 (\EX_Op2_reg[12]_0 ),
        .\EX_Op2_reg[12]_1 (\EX_Op2[12]_i_5_n_0 ),
        .\EX_Op2_reg[13] (\EX_Op2_reg[13] ),
        .\EX_Op2_reg[13]_0 (\EX_Op2_reg[13]_0 ),
        .\EX_Op2_reg[13]_1 (\EX_Op2[13]_i_5_n_0 ),
        .\EX_Op2_reg[14] (\EX_Op2_reg[14] ),
        .\EX_Op2_reg[14]_0 (\EX_Op2_reg[14]_0 ),
        .\EX_Op2_reg[14]_1 (\EX_Op2[14]_i_5_n_0 ),
        .\EX_Op2_reg[15] (\EX_Op2_reg[15] ),
        .\EX_Op2_reg[15]_0 (\EX_Op2_reg[15]_0 ),
        .\EX_Op2_reg[15]_1 (\EX_Op2[15]_i_5_n_0 ),
        .\EX_Op2_reg[16] (\EX_Op2_reg[16] ),
        .\EX_Op2_reg[17] (\EX_Op2_reg[17]_0 ),
        .\EX_Op2_reg[18] (\EX_Op2_reg[18] ),
        .\EX_Op2_reg[1] (\EX_Op2_reg[1] ),
        .\EX_Op2_reg[1]_0 (\EX_Op2_reg[1]_0 ),
        .\EX_Op2_reg[1]_1 (\EX_Op2[1]_i_5_n_0 ),
        .\EX_Op2_reg[20] (\EX_Op2_reg[20] ),
        .\EX_Op2_reg[21] (\EX_Op2_reg[21] ),
        .\EX_Op2_reg[25] (\EX_Op2_reg[25] ),
        .\EX_Op2_reg[29] (\EX_Op2_reg[29]_0 ),
        .\EX_Op2_reg[29]_0 (\EX_Op2_reg[29]_1 ),
        .\EX_Op2_reg[29]_1 (ex_sel_alu_reg_0),
        .\EX_Op2_reg[2] (\EX_Op2_reg[2] ),
        .\EX_Op2_reg[2]_0 (\EX_Op2_reg[2]_0 ),
        .\EX_Op2_reg[2]_1 (\EX_Op2[2]_i_5_n_0 ),
        .\EX_Op2_reg[30] (\EX_Op2[30]_i_4_n_0 ),
        .\EX_Op2_reg[30]_0 (\EX_Op2_reg[30] ),
        .\EX_Op2_reg[31] (\EX_Op2_reg[31]_1 ),
        .\EX_Op2_reg[31]_0 (\EX_Op2_reg[31]_2 ),
        .\EX_Op2_reg[31]_1 (\EX_Op2_reg[31]_3 ),
        .\EX_Op2_reg[31]_2 (\EX_Op2[31]_i_6_n_0 ),
        .\EX_Op2_reg[31]_3 (\EX_Op2[31]_i_7_n_0 ),
        .\EX_Op2_reg[31]_4 (\EX_Op2_reg[31]_4 ),
        .\EX_Op2_reg[3] (\EX_Op2_reg[3] ),
        .\EX_Op2_reg[3]_0 (\EX_Op2_reg[3]_0 ),
        .\EX_Op2_reg[3]_1 (\EX_Op2[3]_i_5_n_0 ),
        .\EX_Op2_reg[4] (\EX_Op2_reg[4] ),
        .\EX_Op2_reg[4]_0 (\EX_Op2_reg[4]_0 ),
        .\EX_Op2_reg[4]_1 (\EX_Op2[4]_i_5_n_0 ),
        .\EX_Op2_reg[5] (\EX_Op2_reg[5] ),
        .\EX_Op2_reg[5]_0 (\EX_Op2_reg[5]_0 ),
        .\EX_Op2_reg[5]_1 (\EX_Op2[5]_i_5_n_0 ),
        .\EX_Op2_reg[6] (\EX_Op2_reg[6] ),
        .\EX_Op2_reg[6]_0 (\EX_Op2_reg[6]_0 ),
        .\EX_Op2_reg[6]_1 (\EX_Op2[6]_i_5_n_0 ),
        .\EX_Op2_reg[7] (\EX_Op2_reg[7] ),
        .\EX_Op2_reg[7]_0 (\EX_Op2_reg[7]_0 ),
        .\EX_Op2_reg[7]_1 (\EX_Op2[7]_i_5_n_0 ),
        .\EX_Op2_reg[8] (\EX_Op2_reg[8] ),
        .\EX_Op2_reg[8]_0 (\EX_Op2_reg[8]_0 ),
        .\EX_Op2_reg[8]_1 (\EX_Op2[8]_i_5_n_0 ),
        .\EX_Op2_reg[9] (\EX_Op2_reg[9] ),
        .\EX_Op2_reg[9]_0 (\EX_Op2_reg[9]_0 ),
        .\EX_Op2_reg[9]_1 (\EX_Op2[9]_i_5_n_0 ),
        .\EX_Op3[0]_i_12 ({\wb_gpr_write_addr_reg_n_0_[0] ,\wb_gpr_write_addr_reg[1]_0 ,\wb_gpr_write_addr_reg_n_0_[4] }),
        .\EX_Op3[0]_i_15 ({m0_gpr_write_addr[0],m0_gpr_write_addr[1],m0_gpr_write_addr[2],m0_gpr_write_addr[3],m0_gpr_write_addr[4]}),
        .\EX_Op3[0]_i_16 ({m1_gpr_write_addr[0],m1_gpr_write_addr[1],m1_gpr_write_addr[2],m1_gpr_write_addr[3],m1_gpr_write_addr[4]}),
        .\EX_Op3[0]_i_17 ({m2_gpr_write_addr[0],m2_gpr_write_addr[1],m2_gpr_write_addr[2],m2_gpr_write_addr[3],m2_gpr_write_addr[4]}),
        .\EX_Op3[0]_i_18 ({m3_gpr_write_addr[0],m3_gpr_write_addr[1],m3_gpr_write_addr[2],m3_gpr_write_addr[3],m3_gpr_write_addr[4]}),
        .\EX_Op3[0]_i_4 (EX_GPR_Write_DFF_n_2),
        .\EX_Op3[0]_i_6 (\EX_Op3[0]_i_6 ),
        .\EX_Op3[0]_i_6_0 (WB_GPR_Write_DFF_n_3),
        .\EX_Op3[0]_i_7 (\EX_Op3[0]_i_7 ),
        .\EX_Op3[0]_i_7_0 (M3_GPR_Write_DFF_n_2),
        .\EX_Op3[0]_i_7_1 (M2_GPR_Write_DFF_n_2),
        .\EX_Op3[0]_i_7_2 (M1_GPR_Write_DFF_n_2),
        .\EX_Op3[0]_i_7_3 (M0_GPR_Write_DFF_n_2),
        .\EX_Op3[29]_i_3 (ex_raw_valid_reg_n_0),
        .\EX_Op3_reg[30] (\EX_Op3_reg[30] ),
        .\EX_Op3_reg[31] (\EX_Op3_reg[31] ),
        .EX_Pattern_Cmp_Sel7_out(EX_Pattern_Cmp_Sel7_out),
        .EX_Unsigned_Op11_out(EX_Unsigned_Op11_out),
        .EX_Use_Carry10_out(EX_Use_Carry10_out),
        .GPR_Op1(GPR_Op1),
        .GPR_Op2(GPR_Op2),
        .GPR_Op3(GPR_Op3),
        .M1_Sel_Mul_Res_reg(M1_Sel_Mul_Res_reg_0),
        .M1_Sel_Mul_Res_reg_0(M1_Sel_Mul_Res_reg_1),
        .OF_Use_Op_B(OF_Use_Op_B),
        .\Performance_Debug_Control.ex_brki_hit_reg (\Performance_Debug_Control.ex_brki_hit_reg ),
        .\Performance_Debug_Control.ex_brki_hit_reg_0 (M0_Exception_From_DFF_n_8),
        .Prefetch_Buffer_Full(Prefetch_Buffer_Full),
        .Q({of_instr[0],of_instr[1],of_instr[2],of_instr[3],of_instr[4],of_instr[5],Q}),
        .S(\WB_Big_Carry.OF_WB_Use3/carry_or_i1/S ),
        .S_0(\OF_EX_Cmp/comparator_i1/S_17 ),
        .S_1(\OF_M0_Cmp/comparator_i1/S_16 ),
        .S_10(\OF_EX_Cmp/comparator_i1/S ),
        .S_11(\OF_M0_Cmp/comparator_i1/S ),
        .S_12(\OF_M1_Cmp/comparator_i1/S ),
        .S_13(\OF_M2_Cmp/comparator_i1/S ),
        .S_14(\OF_M3_Cmp/comparator_i1/S ),
        .S_2(\OF_M1_Cmp/comparator_i1/S_15 ),
        .S_3(\OF_M2_Cmp/comparator_i1/S_14 ),
        .S_4(\OF_M3_Cmp/comparator_i1/S_13 ),
        .S_5(\OF_EX_Cmp/comparator_i1/S_12 ),
        .S_6(\OF_M0_Cmp/comparator_i1/S_11 ),
        .S_7(\OF_M1_Cmp/comparator_i1/S_10 ),
        .S_8(\OF_M2_Cmp/comparator_i1/S_9 ),
        .S_9(\OF_M3_Cmp/comparator_i1/S_8 ),
        .\Serial_Dbg_Intf.control_reg_reg[8] (\Serial_Dbg_Intf.control_reg_reg[8] ),
        .\Use_Async_Reset.sync_reset_reg (PREFETCH_BUFFER_I1_n_101),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_0 (of_op3_sel[2]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (PREFETCH_BUFFER_I1_n_80),
        .\Using_FPGA.Native_3 (PREFETCH_BUFFER_I1_n_112),
        .\Using_FPGA.Native_4 (wb_exception_from_m3_reg_rep_0),
        .\Using_FPGA.Native_5 (m3_sel_div_res),
        .\Using_FPGA.Native_6 (\Using_OF_FPGA.PR_OF_And9_n_1 ),
        .\Using_FPGA.Native_7 (if3_raw_valid_reg_0),
        .\Using_FPGA.Native_8 (if4_raw_valid_reg_0),
        .\Using_FPGA.Native_9 (\EX_Logic_Op_reg[0]_0 [1:0]),
        .\WB_Exception_Return_Addr_reg[16] (\WB_Exception_Return_Addr_reg[16] ),
        .\WB_Exception_Return_Addr_reg[17] (\WB_Exception_Return_Addr_reg[17] ),
        .\WB_Exception_Return_Addr_reg[18] (\WB_Exception_Return_Addr_reg[18] ),
        .\WB_Exception_Return_Addr_reg[20] (\WB_Exception_Return_Addr_reg[20] ),
        .\WB_Exception_Return_Addr_reg[21] (\WB_Exception_Return_Addr_reg[21] ),
        .\WB_Exception_Return_Addr_reg[25] (\WB_Exception_Return_Addr_reg[25] ),
        .\cur_data_i_reg[0] (of_op2_sel[1]),
        .\cur_data_i_reg[0]_0 (of_PipeRun_for_ce),
        .\cur_data_i_reg[10] (PREFETCH_BUFFER_I1_n_44),
        .\cur_data_i_reg[10]_0 (\Using_IF4_Push_FPGA.Push_PipeRun_n_1 ),
        .\cur_data_i_reg[12] (\cur_data_i_reg[12] ),
        .\cur_data_i_reg[1] (of_predecode),
        .\cur_data_i_reg[1]_0 (of_op2_sel[2]),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .\cur_data_i_reg[26]_0 (PREFETCH_BUFFER_I1_n_46),
        .\cur_data_i_reg[26]_1 (PREFETCH_BUFFER_I1_n_47),
        .\cur_data_i_reg[26]_2 (PREFETCH_BUFFER_I1_n_48),
        .\cur_data_i_reg[26]_3 (PREFETCH_BUFFER_I1_n_49),
        .\cur_data_i_reg[26]_4 (PREFETCH_BUFFER_I1_n_50),
        .\cur_data_i_reg[26]_5 (of_op2_sel[0]),
        .\cur_data_i_reg[26]_6 (PREFETCH_BUFFER_I1_n_148),
        .\cur_data_i_reg[26]_7 (PREFETCH_BUFFER_I1_n_150),
        .\cur_data_i_reg[26]_8 (PREFETCH_BUFFER_I1_n_152),
        .\cur_data_i_reg[26]_9 (PREFETCH_BUFFER_I1_n_154),
        .\cur_data_i_reg[27] (PREFETCH_BUFFER_I1_n_37),
        .\cur_data_i_reg[28] (PREFETCH_BUFFER_I1_n_42),
        .\cur_data_i_reg[28]_0 (PREFETCH_BUFFER_I1_n_45),
        .\cur_data_i_reg[28]_1 (PREFETCH_BUFFER_I1_n_70),
        .\cur_data_i_reg[28]_2 (PREFETCH_BUFFER_I1_n_139),
        .\cur_data_i_reg[28]_3 (PREFETCH_BUFFER_I1_n_140),
        .\cur_data_i_reg[28]_4 (PREFETCH_BUFFER_I1_n_141),
        .\cur_data_i_reg[28]_5 (PREFETCH_BUFFER_I1_n_142),
        .\cur_data_i_reg[30] (PREFETCH_BUFFER_I1_n_128),
        .\cur_data_i_reg[31] (PREFETCH_BUFFER_I1_n_76),
        .\cur_data_i_reg[31]_0 (PREFETCH_BUFFER_I1_n_103),
        .\cur_data_i_reg[31]_1 (PREFETCH_BUFFER_I1_n_149),
        .\cur_data_i_reg[31]_2 (PREFETCH_BUFFER_I1_n_151),
        .\cur_data_i_reg[31]_3 (PREFETCH_BUFFER_I1_n_153),
        .\cur_data_i_reg[31]_4 (PREFETCH_BUFFER_I1_n_155),
        .\cur_data_i_reg[31]_5 (\cur_data_i_reg[31]_0 ),
        .\cur_data_i_reg[3] (PREFETCH_BUFFER_I1_n_134),
        .\cur_data_i_reg[3]_0 (\cur_data_i_reg[3] ),
        .\cur_data_i_reg[4] (\cur_data_i_reg[4] ),
        .\cur_data_i_reg[5] ({PREFETCH_BUFFER_I1_n_91,PREFETCH_BUFFER_I1_n_92}),
        .\cur_data_i_reg[5]_0 (PREFETCH_BUFFER_I1_n_94),
        .\cur_data_i_reg[5]_1 (\cur_data_i_reg[5] ),
        .\cur_data_i_reg[6] (\cur_data_i_reg[6] [0]),
        .\cur_data_i_reg[6]_0 (\cur_data_i_reg[6] [1]),
        .\cur_data_i_reg[7] (PREFETCH_BUFFER_I1_n_79),
        .\cur_data_i_reg[7]_0 (\cur_data_i_reg[7] ),
        .\cur_data_i_reg[8] (PREFETCH_BUFFER_I1_n_129),
        .\cur_data_i_reg[8]_0 (\cur_data_i_reg[8] ),
        .\cur_data_i_reg[9] (\cur_data_i_reg[9] ),
        .ex_MSR_clear_decode(ex_MSR_clear_decode),
        .ex_MSR_set_decode(ex_MSR_set_decode),
        .ex_alu_result(ex_alu_result),
        .ex_atomic_instruction_pair0(ex_atomic_instruction_pair0),
        .ex_branch_with_delayslot(ex_branch_with_delayslot),
        .ex_branch_with_delayslot0(ex_branch_with_delayslot0),
        .ex_databus_access_i_reg(M0_Exception_From_DFF_n_4),
        .ex_databus_exclusive_i0(ex_databus_exclusive_i0),
        .ex_databus_read_i0(ex_databus_read_i0),
        .ex_gpr_write(ex_gpr_write),
        .ex_gpr_write_addr({ex_gpr_write_addr[2],ex_gpr_write_addr[3],ex_gpr_write_addr[4]}),
        .\ex_gpr_write_addr_reg[2] (PREFETCH_BUFFER_I1_n_143),
        .ex_jump(ex_jump),
        .ex_jump_hold(ex_jump_hold),
        .ex_jump_nodelay(ex_jump_nodelay),
        .ex_jump_nodelay0(ex_jump_nodelay0),
        .ex_jump_nodelay_reg(PREFETCH_BUFFER_I1_n_38),
        .ex_jump_nodelay_reg_0(PREFETCH_BUFFER_I1_n_40),
        .ex_jump_nodelay_reg_1(PREFETCH_BUFFER_I1_n_43),
        .ex_load_alu_carry2_out(ex_load_alu_carry2_out),
        .ex_load_shift_carry0(ex_load_shift_carry0),
        .ex_mbar_is_sleep0(ex_mbar_is_sleep0),
        .ex_move_to_MSR_instr35_out(ex_move_to_MSR_instr35_out),
        .ex_op1_cmp_eq(ex_op1_cmp_eq),
        .ex_op1_cmp_eq1(ex_op1_cmp_eq1),
        .ex_op1_cmp_eq_n7_out(ex_op1_cmp_eq_n7_out),
        .ex_set_bip(ex_set_bip),
        .ex_set_msr_ee_instr(ex_set_msr_ee_instr),
        .force12_out(force12_out),
        .force_Val10_out(force_Val10_out),
        .if0_pause(if0_pause),
        .if4_data(if4_data),
        .if4_pre_buffer_addr(if4_pre_buffer_addr),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .if4_sel_input({if4_sel_input[3],if4_sel_input[4]}),
        .in(in),
        .in0(of_gpr_write),
        .m0_gpr_write(m0_gpr_write),
        .\m0_gpr_write_addr_reg[2] (PREFETCH_BUFFER_I1_n_130),
        .\m0_gpr_write_addr_reg[2]_0 (PREFETCH_BUFFER_I1_n_135),
        .\m0_gpr_write_addr_reg[2]_1 (PREFETCH_BUFFER_I1_n_144),
        .m0_is_div_instr_i(m0_is_div_instr_i),
        .\m1_M0_Result_i_reg[0] (\m1_M0_Result_i_reg[0] ),
        .\m1_M0_Result_i_reg[10] (\m1_M0_Result_i_reg[10] ),
        .\m1_M0_Result_i_reg[11] (\m1_M0_Result_i_reg[11] ),
        .\m1_M0_Result_i_reg[12] (\m1_M0_Result_i_reg[12] ),
        .\m1_M0_Result_i_reg[13] (\m1_M0_Result_i_reg[13] ),
        .\m1_M0_Result_i_reg[14] (\m1_M0_Result_i_reg[14] ),
        .\m1_M0_Result_i_reg[15] (\m1_M0_Result_i_reg[15] ),
        .\m1_M0_Result_i_reg[1] (\m1_M0_Result_i_reg[1] ),
        .\m1_M0_Result_i_reg[2] (\m1_M0_Result_i_reg[2] ),
        .\m1_M0_Result_i_reg[3] (\m1_M0_Result_i_reg[3] ),
        .\m1_M0_Result_i_reg[4] (\m1_M0_Result_i_reg[4] ),
        .\m1_M0_Result_i_reg[5] (\m1_M0_Result_i_reg[5] ),
        .\m1_M0_Result_i_reg[6] (\m1_M0_Result_i_reg[6] ),
        .\m1_M0_Result_i_reg[7] (\m1_M0_Result_i_reg[7] ),
        .\m1_M0_Result_i_reg[8] (\m1_M0_Result_i_reg[8] ),
        .\m1_M0_Result_i_reg[9] (\m1_M0_Result_i_reg[9] ),
        .m1_gpr_write(m1_gpr_write),
        .\m1_gpr_write_addr_reg[2] (PREFETCH_BUFFER_I1_n_131),
        .\m1_gpr_write_addr_reg[2]_0 (PREFETCH_BUFFER_I1_n_136),
        .\m1_gpr_write_addr_reg[2]_1 (PREFETCH_BUFFER_I1_n_145),
        .m1_is_div_instr_i(m1_is_div_instr_i),
        .\m2_M1_Result_i_reg[29] (\m2_M1_Result_i_reg[29] ),
        .m2_gpr_write(m2_gpr_write),
        .\m2_gpr_write_addr_reg[2] (PREFETCH_BUFFER_I1_n_132),
        .\m2_gpr_write_addr_reg[2]_0 (PREFETCH_BUFFER_I1_n_137),
        .\m2_gpr_write_addr_reg[2]_1 (PREFETCH_BUFFER_I1_n_146),
        .m2_is_div_instr(m2_is_div_instr),
        .m2_m1_sel_res_reg(m2_m1_sel_res_reg),
        .m2_m1_sel_res_reg_0(m2_m1_sel_res_reg_0),
        .m3_gpr_write(m3_gpr_write),
        .\m3_gpr_write_addr_reg[2] (PREFETCH_BUFFER_I1_n_133),
        .\m3_gpr_write_addr_reg[2]_0 (PREFETCH_BUFFER_I1_n_138),
        .\m3_gpr_write_addr_reg[2]_1 (PREFETCH_BUFFER_I1_n_147),
        .\m3_gpr_write_addr_reg[3] (\m3_gpr_write_addr_reg[3]_0 ),
        .m3_is_div_instr_i_reg(PREFETCH_BUFFER_I1_n_99),
        .of_byte_access(of_byte_access),
        .of_doublet_access(of_doublet_access),
        .of_ex_complete_in_later_stage(of_ex_complete_in_later_stage),
        .of_gpr_write_dbg(of_gpr_write_dbg),
        .of_is_bsifi(of_is_bsifi),
        .of_is_div_instr(of_is_div_instr),
        .of_m0_complete_in_later_stage(of_m0_complete_in_later_stage),
        .of_m1_complete_in_later_stage(of_m1_complete_in_later_stage),
        .of_msr(of_msr),
        .of_op1_sel_spr_pc(of_op1_sel_spr_pc),
        .of_op3_sel(of_op3_sel[0]),
        .of_raw_valid(of_raw_valid),
        .of_read_imm_reg(of_read_imm_reg),
        .p_104_in(p_104_in),
        .sync_reset(reset_bool_for_rst),
        .use_Reg_Neg_DI1_out(use_Reg_Neg_DI1_out),
        .use_Reg_Neg_S3_out(use_Reg_Neg_S3_out),
        .wb_fwd(wb_fwd),
        .\wb_gpr_write_addr_reg[3] (of_op3_sel[1]));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    Pause_Ack_i_1
       (.I0(Pause_Ack_i_2_n_0),
        .I1(if0_raw_valid),
        .I2(S_0),
        .I3(if4_raw_valid_reg_0),
        .I4(if3_raw_valid_reg_0),
        .I5(if0_pause),
        .O(Pause_Ack0));
  LUT6 #(
    .INIT(64'h0000000000005545)) 
    Pause_Ack_i_2
       (.I0(WB_PC_Valid_i_1_n_0),
        .I1(wb_exception_from_m3_reg_rep__0_0),
        .I2(m1_raw_valid_reg_n_0),
        .I3(m1_dead_valid_hold),
        .I4(A_N201_out),
        .I5(M3_Exception_From_DFF_n_1),
        .O(Pause_Ack_i_2_n_0));
  FDRE Pause_Ack_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Pause_Ack0),
        .Q(Pause_Ack),
        .R(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    \Performance_Debug_Control.dbg_brki_hit_i_1 
       (.I0(wb_exception_raw_kind[31]),
        .I1(wb_exception_from_m3_reg_rep__0_0),
        .I2(wb_exception_raw_kind[28]),
        .I3(wb_exception_raw_kind[30]),
        .O(wb_halted));
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \Performance_Debug_Control.dbg_freeze_nohalt_i_3 
       (.I0(wb_exception_raw_kind[30]),
        .I1(wb_exception_raw_kind[28]),
        .I2(wb_exception_from_m3_reg_rep_0),
        .I3(wb_exception_raw_kind[31]),
        .I4(\Performance_Debug_Control.dbg_freeze_nohalt_reg ),
        .O(p_4_out__0));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT5 #(
    .INIT(32'hFFFF4000)) 
    \Performance_Debug_Control.ex_dbg_pc_hit_i_i_1 
       (.I0(wb_exception_raw_kind[30]),
        .I1(wb_exception_raw_kind[28]),
        .I2(wb_exception_from_m3_reg_rep__0_0),
        .I3(wb_exception_raw_kind[31]),
        .I4(reset_bool_for_rst),
        .O(ex_dbg_pc_hit_i));
  LUT2 #(
    .INIT(4'h8)) 
    \Performance_Debug_Control.ex_dbg_pc_hit_i_i_5 
       (.I0(dbg_clean_stop),
        .I1(normal_stop_i),
        .O(\Performance_Debug_Control.ex_dbg_pc_hit_i_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF888)) 
    \Q[0]_i_1 
       (.I0(ex_start_div),
        .I1(EX_Op1_Zero),
        .I2(\Q_reg[32] ),
        .I3(m3_sel_div_res),
        .I4(reset_bool_for_rst),
        .O(SR));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Q[0]_i_2 
       (.I0(ex_start_div),
        .I1(E),
        .O(div_busy_reg));
  LUT2 #(
    .INIT(4'hE)) 
    Sleep_INST_0
       (.I0(Sleep_Decode),
        .I1(Sleep_Out),
        .O(Sleep));
  FDRE Trace_WB_Jump_Taken_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_jump_taken),
        .Q(trace_wb_jump_taken),
        .R(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Use_HW_BS.Using_BitField.mem_mask0[0]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .O(EX_Bit_Insert_reg_1[18]));
  LUT6 #(
    .INIT(64'hBBBBBBBB4B444B4B)) 
    \Use_HW_BS.Using_BitField.mem_mask0[11]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0_reg[15] ),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .I5(EX_Bit_Extract_reg_0),
        .O(EX_Bit_Insert_reg_1[12]));
  LUT6 #(
    .INIT(64'hFF0FFF0F00E555E5)) 
    \Use_HW_BS.Using_BitField.mem_mask0[12]_i_1 
       (.I0(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [8]),
        .I2(ex_bit_extract),
        .I3(ex_bit_insert),
        .I4(\Using_FPGA.Native_21 [2]),
        .I5(EX_Bit_Extract_reg_0),
        .O(EX_Bit_Insert_reg_1[11]));
  LUT6 #(
    .INIT(64'hBBBBBBBB4444444B)) 
    \Use_HW_BS.Using_BitField.mem_mask0[13]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0_reg[9] ),
        .I5(EX_Bit_Extract_reg_0),
        .O(EX_Bit_Insert_reg_1[10]));
  LUT6 #(
    .INIT(64'hBBBBBBBB4444444B)) 
    \Use_HW_BS.Using_BitField.mem_mask0[14]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0_reg[6] ),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I5(EX_Bit_Extract_reg_0),
        .O(EX_Bit_Insert_reg_1[9]));
  LUT6 #(
    .INIT(64'hBBBBBBBB444444B4)) 
    \Use_HW_BS.Using_BitField.mem_mask0[15]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(\Use_HW_BS.Using_BitField.mem_mask0_reg[15] ),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I5(EX_Bit_Extract_reg_0),
        .O(EX_Bit_Insert_reg_1[8]));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT4 #(
    .INIT(16'h0FDD)) 
    \Use_HW_BS.Using_BitField.mem_mask0[16]_i_1 
       (.I0(ex_bit_extract),
        .I1(\Using_FPGA.Native_21 [10]),
        .I2(\Using_FPGA.Native_21 [4]),
        .I3(ex_bit_insert),
        .O(EX_Bit_Insert_reg_1[7]));
  LUT6 #(
    .INIT(64'h558FFF8F00F000F0)) 
    \Use_HW_BS.Using_BitField.mem_mask0[20]_i_1 
       (.I0(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [8]),
        .I2(ex_bit_extract),
        .I3(ex_bit_insert),
        .I4(\Using_FPGA.Native_21 [2]),
        .I5(EX_Bit_Extract_reg_0),
        .O(EX_Bit_Insert_reg_1[6]));
  LUT6 #(
    .INIT(64'h44BB44444BBB4444)) 
    \Use_HW_BS.Using_BitField.mem_mask0[21]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(\Use_HW_BS.Using_BitField.mem_mask0_reg[9] ),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I4(EX_Bit_Extract_reg_0),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .O(EX_Bit_Insert_reg_1[5]));
  LUT6 #(
    .INIT(64'h4B4B4BBB44444444)) 
    \Use_HW_BS.Using_BitField.mem_mask0[22]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0_reg[6] ),
        .I5(EX_Bit_Extract_reg_0),
        .O(EX_Bit_Insert_reg_1[4]));
  LUT6 #(
    .INIT(64'h44B4B4B44444B4B4)) 
    \Use_HW_BS.Using_BitField.mem_mask0[23]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(EX_Bit_Extract_reg_0),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0_reg[15] ),
        .O(EX_Bit_Insert_reg_1[3]));
  LUT6 #(
    .INIT(64'h3030303077473030)) 
    \Use_HW_BS.Using_BitField.mem_mask0[28]_i_1 
       (.I0(\Using_FPGA.Native_21 [2]),
        .I1(ex_bit_insert),
        .I2(ex_bit_extract),
        .I3(\Using_FPGA.Native_21 [8]),
        .I4(EX_Bit_Extract_reg_0),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .O(EX_Bit_Insert_reg_1[2]));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT4 #(
    .INIT(16'h0F77)) 
    \Use_HW_BS.Using_BitField.mem_mask0[2]_i_3 
       (.I0(ex_bit_extract),
        .I1(\Using_FPGA.Native_21 [10]),
        .I2(\Using_FPGA.Native_21 [4]),
        .I3(ex_bit_insert),
        .O(EX_Bit_Extract_reg_0));
  LUT6 #(
    .INIT(64'h44444444444444B4)) 
    \Use_HW_BS.Using_BitField.mem_mask0[30]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(EX_Bit_Extract_reg_0),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0_reg[6] ),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .O(EX_Bit_Insert_reg_1[1]));
  LUT6 #(
    .INIT(64'h444444444444B444)) 
    \Use_HW_BS.Using_BitField.mem_mask0[31]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(EX_Bit_Extract_reg_0),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0_reg[15] ),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .O(EX_Bit_Insert_reg_1[0]));
  LUT6 #(
    .INIT(64'hBBBB40FFFFFF40FF)) 
    \Use_HW_BS.Using_BitField.mem_mask0[4]_i_1 
       (.I0(EX_Bit_Extract_reg_0),
        .I1(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I2(\Using_FPGA.Native_21 [8]),
        .I3(ex_bit_extract),
        .I4(ex_bit_insert),
        .I5(\Using_FPGA.Native_21 [2]),
        .O(EX_Bit_Insert_reg_1[17]));
  LUT4 #(
    .INIT(16'hE2C0)) 
    \Use_HW_BS.Using_BitField.mem_mask0[4]_i_2 
       (.I0(ex_bit_extract),
        .I1(ex_bit_insert),
        .I2(\Using_FPGA.Native_21 [3]),
        .I3(\Using_FPGA.Native_21 [9]),
        .O(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBB44BB4BBB)) 
    \Use_HW_BS.Using_BitField.mem_mask0[5]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0_reg[9] ),
        .I5(EX_Bit_Extract_reg_0),
        .O(EX_Bit_Insert_reg_1[16]));
  LUT6 #(
    .INIT(64'hB4BBB4BBB4BBBBBB)) 
    \Use_HW_BS.Using_BitField.mem_mask0[6]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(EX_Bit_Extract_reg_0),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0_reg[6] ),
        .O(EX_Bit_Insert_reg_1[15]));
  LUT6 #(
    .INIT(64'hBBBBBBBB44B4BBBB)) 
    \Use_HW_BS.Using_BitField.mem_mask0[7]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(\Use_HW_BS.Using_BitField.mem_mask0_reg[15] ),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I5(EX_Bit_Extract_reg_0),
        .O(EX_Bit_Insert_reg_1[14]));
  LUT6 #(
    .INIT(64'hBBBBBBBB444B4B4B)) 
    \Use_HW_BS.Using_BitField.mem_mask0[9]_i_1 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(\Use_HW_BS.Using_BitField.mem_mask0[4]_i_2_n_0 ),
        .I3(\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 ),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0_reg[9] ),
        .I5(EX_Bit_Extract_reg_0),
        .O(EX_Bit_Insert_reg_1[13]));
  LUT4 #(
    .INIT(16'h0CE2)) 
    \Use_HW_BS.Using_BitField.mem_mask1[5]_i_2 
       (.I0(ex_bit_insert),
        .I1(ex_bit_extract),
        .I2(\Using_FPGA.Native_21 [6]),
        .I3(\Using_FPGA.Native_21 [7]),
        .O(EX_Bit_Insert_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT3 #(
    .INIT(8'h54)) 
    \Use_HW_BS.mem_left_shift_i_1 
       (.I0(ex_bit_extract),
        .I1(ex_left_shift),
        .I2(ex_bit_insert),
        .O(ex_left_shift_i));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[0]_i_10 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [30]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [1]),
        .O(\EX_Op1_reg[1] ));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[0]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[0]_i_5_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[0]_i_6_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[0]_i_7_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[0]_i_8_n_0 ),
        .O(\EX_Op2_reg[31] ));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[0]_i_5 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [26]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [5]),
        .O(\Use_HW_BS.mem_mux3[0]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[0]_i_6 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [24]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [7]),
        .O(\Use_HW_BS.mem_mux3[0]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[0]_i_7 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [27]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [4]),
        .O(\Use_HW_BS.mem_mux3[0]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[0]_i_8 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [25]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [6]),
        .O(\Use_HW_BS.mem_mux3[0]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[0]_i_9 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [28]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [3]),
        .O(\EX_Op1_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[10]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[10]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[6]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [18]));
  LUT6 #(
    .INIT(64'h0350035FF350F35F)) 
    \Use_HW_BS.mem_mux3[10]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[8]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[9]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[7]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[10]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[10]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[10]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [14]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [17]),
        .O(\Use_HW_BS.mem_mux3[10]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[11]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[11]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[7]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [17]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[11]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[9]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[11]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[8]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[10]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[11]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[11]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [13]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [18]),
        .O(\Use_HW_BS.mem_mux3[11]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[12]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[12]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[8]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [16]));
  LUT6 #(
    .INIT(64'h0350035FF350F35F)) 
    \Use_HW_BS.mem_mux3[12]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[10]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[11]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[9]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[12]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[12]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[12]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [12]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [19]),
        .O(\Use_HW_BS.mem_mux3[12]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[13]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[13]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[9]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [15]));
  LUT6 #(
    .INIT(64'h0350035FF350F35F)) 
    \Use_HW_BS.mem_mux3[13]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[11]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[12]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[10]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[13]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[13]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[13]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [11]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [20]),
        .O(\Use_HW_BS.mem_mux3[13]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[14]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[14]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[10]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [14]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[14]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[12]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[14]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[11]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[13]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[14]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[14]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [10]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [21]),
        .O(\Use_HW_BS.mem_mux3[14]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[15]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[15]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[11]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [13]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[15]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[13]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[15]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[12]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[14]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[15]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [9]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [22]),
        .O(\Use_HW_BS.mem_mux3[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[16]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[16]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[12]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [12]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[16]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[14]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[16]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[13]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[15]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[16]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[16]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [8]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [23]),
        .O(\Use_HW_BS.mem_mux3[16]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[17]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[17]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[13]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [11]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[17]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[15]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[17]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[14]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[16]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[17]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[17]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [7]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [24]),
        .O(\Use_HW_BS.mem_mux3[17]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[18]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[18]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[14]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [10]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[18]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[16]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[18]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[15]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[17]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[18]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[18]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [6]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [25]),
        .O(\Use_HW_BS.mem_mux3[18]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[19]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[19]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[15]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [9]));
  LUT6 #(
    .INIT(64'h0350035FF350F35F)) 
    \Use_HW_BS.mem_mux3[19]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[17]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[18]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[16]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[19]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[19]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[19]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [5]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [26]),
        .O(\Use_HW_BS.mem_mux3[19]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[1]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[1]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[1]_i_3_n_0 ),
        .O(\EX_Op2_reg[29] [27]));
  LUT6 #(
    .INIT(64'h0035F0350F35FF35)) 
    \Use_HW_BS.mem_mux3[1]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[0]_i_5_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[0]_i_8_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[1]_i_4_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[0]_i_6_n_0 ),
        .O(\Use_HW_BS.mem_mux3[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00350F35F035FF35)) 
    \Use_HW_BS.mem_mux3[1]_i_3 
       (.I0(\EX_Op1_reg[1] ),
        .I1(\Use_HW_BS.mem_mux3[1]_i_5_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\EX_Op1_reg[3] ),
        .I5(\Use_HW_BS.mem_mux3[0]_i_7_n_0 ),
        .O(\Use_HW_BS.mem_mux3[1]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[1]_i_4 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [23]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [8]),
        .O(\Use_HW_BS.mem_mux3[1]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[1]_i_5 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [29]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [2]),
        .O(\Use_HW_BS.mem_mux3[1]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[20]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[20]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[16]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [8]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[20]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[18]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[20]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[17]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[19]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[20]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[20]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [4]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [27]),
        .O(\Use_HW_BS.mem_mux3[20]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[21]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[21]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[17]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [7]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[21]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[19]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[21]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[18]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[20]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[21]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[21]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [3]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [28]),
        .O(\Use_HW_BS.mem_mux3[21]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[22]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[22]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[18]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [6]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[22]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[20]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[22]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[19]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[21]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[22]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[22]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [2]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [29]),
        .O(\Use_HW_BS.mem_mux3[22]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[23]_i_1 
       (.I0(\EX_Op2_reg[31]_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[19]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [5]));
  LUT6 #(
    .INIT(64'h0350035FF350F35F)) 
    \Use_HW_BS.mem_mux3[23]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[21]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[22]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[20]_i_3_n_0 ),
        .I5(\EX_Op1_reg[30] ),
        .O(\EX_Op2_reg[31]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[24]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[24]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[20]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [4]));
  LUT6 #(
    .INIT(64'h0350035FF350F35F)) 
    \Use_HW_BS.mem_mux3[24]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[22]_i_3_n_0 ),
        .I1(\EX_Op1_reg[30] ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[21]_i_3_n_0 ),
        .I5(\EX_Op1_reg[31] ),
        .O(\Use_HW_BS.mem_mux3[24]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[25]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[25]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[21]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [3]));
  LUT6 #(
    .INIT(64'hC005CF05C0F5CFF5)) 
    \Use_HW_BS.mem_mux3[25]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[22]_i_3_n_0 ),
        .I1(ex_void_bit),
        .I2(\Using_FPGA.Native_21 [1]),
        .I3(\Using_FPGA.Native_21 [0]),
        .I4(\EX_Op1_reg[30] ),
        .I5(\EX_Op1_reg[31] ),
        .O(\Use_HW_BS.mem_mux3[25]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[26]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[26]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[22]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [2]));
  LUT5 #(
    .INIT(32'hA0A3ACAF)) 
    \Use_HW_BS.mem_mux3[26]_i_2 
       (.I0(ex_void_bit),
        .I1(\Using_FPGA.Native_21 [0]),
        .I2(\Using_FPGA.Native_21 [1]),
        .I3(\EX_Op1_reg[30] ),
        .I4(\EX_Op1_reg[31] ),
        .O(\Use_HW_BS.mem_mux3[26]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[27]_i_2 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [0]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [31]),
        .O(\EX_Op1_reg[31] ));
  LUT5 #(
    .INIT(32'h08FF0800)) 
    \Use_HW_BS.mem_mux3[28]_i_1 
       (.I0(ex_arith_shift),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [31]),
        .I2(ex_left_shift_i),
        .I3(\Using_FPGA.Native_21 [2]),
        .I4(\Use_HW_BS.mem_mux3[24]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [1]));
  LUT5 #(
    .INIT(32'h08FF0800)) 
    \Use_HW_BS.mem_mux3[29]_i_1 
       (.I0(ex_arith_shift),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [31]),
        .I2(ex_left_shift_i),
        .I3(\Using_FPGA.Native_21 [2]),
        .I4(\Use_HW_BS.mem_mux3[25]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [0]));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[2]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[2]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[2]_i_3_n_0 ),
        .O(\EX_Op2_reg[29] [26]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[2]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[0]_i_6_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[2]_i_4_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[0]_i_8_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[1]_i_4_n_0 ),
        .O(\Use_HW_BS.mem_mux3[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00350F35F035FF35)) 
    \Use_HW_BS.mem_mux3[2]_i_3 
       (.I0(\Use_HW_BS.mem_mux3[1]_i_5_n_0 ),
        .I1(\EX_Op1_reg[3] ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[0]_i_7_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[0]_i_5_n_0 ),
        .O(\Use_HW_BS.mem_mux3[2]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[2]_i_4 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [22]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [9]),
        .O(\Use_HW_BS.mem_mux3[2]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[30]_i_2 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [1]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [30]),
        .O(\EX_Op1_reg[30] ));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[3]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[3]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[3]_i_3_n_0 ),
        .O(\EX_Op2_reg[29] [25]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[3]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[1]_i_4_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[3]_i_4_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[0]_i_6_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[2]_i_4_n_0 ),
        .O(\Use_HW_BS.mem_mux3[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0053F0530F53FF53)) 
    \Use_HW_BS.mem_mux3[3]_i_3 
       (.I0(\Use_HW_BS.mem_mux3[0]_i_7_n_0 ),
        .I1(\EX_Op1_reg[3] ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[0]_i_8_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[0]_i_5_n_0 ),
        .O(\Use_HW_BS.mem_mux3[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[3]_i_4 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [21]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [10]),
        .O(\Use_HW_BS.mem_mux3[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[4]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[4]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\EX_Op2_reg[31] ),
        .O(\EX_Op2_reg[29] [24]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[4]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[2]_i_4_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[4]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[1]_i_4_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[3]_i_4_n_0 ),
        .O(\Use_HW_BS.mem_mux3[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[4]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [20]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [11]),
        .O(\Use_HW_BS.mem_mux3[4]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[5]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[5]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[1]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [23]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[5]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[3]_i_4_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[5]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[2]_i_4_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[4]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[5]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [19]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [12]),
        .O(\Use_HW_BS.mem_mux3[5]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[6]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[6]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[2]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [22]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[6]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[4]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[6]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[3]_i_4_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[5]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[6]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [18]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [13]),
        .O(\Use_HW_BS.mem_mux3[6]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[7]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[7]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[3]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [21]));
  LUT6 #(
    .INIT(64'h3050305F3F503F5F)) 
    \Use_HW_BS.mem_mux3[7]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[5]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[7]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[4]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[6]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[7]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [17]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [14]),
        .O(\Use_HW_BS.mem_mux3[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[8]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[8]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[4]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [20]));
  LUT6 #(
    .INIT(64'h0350035FF350F35F)) 
    \Use_HW_BS.mem_mux3[8]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[6]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[7]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[5]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[8]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[8]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[8]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [16]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [15]),
        .O(\Use_HW_BS.mem_mux3[8]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_HW_BS.mem_mux3[9]_i_1 
       (.I0(\Use_HW_BS.mem_mux3[9]_i_2_n_0 ),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(\Use_HW_BS.mem_mux3[5]_i_2_n_0 ),
        .O(\EX_Op2_reg[29] [19]));
  LUT6 #(
    .INIT(64'h0350035FF350F35F)) 
    \Use_HW_BS.mem_mux3[9]_i_2 
       (.I0(\Use_HW_BS.mem_mux3[7]_i_3_n_0 ),
        .I1(\Use_HW_BS.mem_mux3[8]_i_3_n_0 ),
        .I2(\Using_FPGA.Native_21 [0]),
        .I3(\Using_FPGA.Native_21 [1]),
        .I4(\Use_HW_BS.mem_mux3[6]_i_3_n_0 ),
        .I5(\Use_HW_BS.mem_mux3[9]_i_3_n_0 ),
        .O(\Use_HW_BS.mem_mux3[9]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT5 #(
    .INIT(32'h1110DDDF)) 
    \Use_HW_BS.mem_mux3[9]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [15]),
        .I1(ex_bit_extract),
        .I2(ex_left_shift),
        .I3(ex_bit_insert),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [16]),
        .O(\Use_HW_BS.mem_mux3[9]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT5 #(
    .INIT(32'h80808088)) 
    \Use_HW_BS.mem_void_bit_i_1 
       (.I0(ex_arith_shift),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [31]),
        .I2(ex_bit_extract),
        .I3(ex_left_shift),
        .I4(ex_bit_insert),
        .O(ex_void_bit));
  microblaze_microblaze_0_0_carry_and_n_bb_80 \Using_BP0_FPGA.PR_BP0_And1 
       (.E(\Using_FPGA.Native ),
        .bp0_dead_fetch_hold(bp0_dead_fetch_hold),
        .bp0_piperun_masked_no1(bp0_piperun_masked_no1),
        .bp1_dead_fetch_hold_bt(bp1_dead_fetch_hold_bt),
        .bp1_dead_fetch_hold_reg(\Using_BP0_FPGA.PR_BP0_And1_n_2 ),
        .bp1_dead_fetch_hold_reg_0(bp1_dead_fetch_hold_reg_0),
        .bp1_dead_fetch_hold_reg_1(bp1_raw_valid_reg_0),
        .bp1_raw_valid_reg(bp1_raw_valid_reg_1),
        .kill_fetch_mmu(kill_fetch_mmu),
        .lopt(lopt_38),
        .lopt_1(lopt_39),
        .lopt_2(lopt_40),
        .sync_reset(reset_bool_for_rst));
  microblaze_microblaze_0_0_carry_or_n_bb \Using_BP0_FPGA.PR_BP0_Or1 
       (.E(\Using_FPGA.Native ),
        .bp0_piperun_masked_no1(bp0_piperun_masked_no1),
        .\bp1_PC_i_reg[0] (bp1_raw_valid_reg_0),
        .lopt(lopt_38),
        .lopt_1(lopt_39),
        .lopt_2(lopt_40));
  microblaze_microblaze_0_0_carry_and_n_bb_81 \Using_BP1_FPGA.PR_BP1_And1 
       (.E(\Using_FPGA.Native ),
        .bp1_piperun_masked_no1(bp1_piperun_masked_no1),
        .lopt(lopt_35),
        .lopt_1(lopt_36),
        .lopt_2(lopt_37));
  microblaze_microblaze_0_0_carry_or_n_bb_82 \Using_BP1_FPGA.PR_BP1_Or1 
       (.\Using_FPGA.Native (if0_raw_valid),
        .\Using_FPGA.Native_0 (S_0),
        .bp1_piperun_masked_no1(bp1_piperun_masked_no1),
        .\if0_PC_i_reg[0] (if2_raw_valid_reg_0),
        .lopt(lopt_32),
        .lopt_1(lopt_33),
        .lopt_2(lopt_34));
  microblaze_microblaze_0_0_carry_and_n_bb_83 \Using_EX_FPGA.PR_EX_And1 
       (.\Using_FPGA.Native (Jump_Logic_I1_n_6),
        .ex_piperun_masked_no1(ex_piperun_masked_no1),
        .ex_piperun_raw(ex_piperun_raw),
        .lopt(lopt_90),
        .lopt_1(lopt_91));
  microblaze_microblaze_0_0_carry_and_n_bb_84 \Using_EX_FPGA.PR_EX_And2 
       (.ex_piperun_masked_no1(ex_piperun_masked_no1),
        .ex_piperun_masked_no2(ex_piperun_masked_no2),
        .lopt(lopt_92),
        .lopt_1(lopt_93),
        .lopt_2(lopt_94));
  microblaze_microblaze_0_0_carry_and_n_bb_85 \Using_EX_FPGA.PR_EX_And3 
       (.ex_piperun_masked_no2(ex_piperun_masked_no2),
        .ex_piperun_masked_no3(ex_piperun_masked_no3),
        .lopt(lopt_95),
        .lopt_1(lopt_96),
        .lopt_2(lopt_97),
        .lopt_3(lopt_98),
        .lopt_4(lopt_99),
        .lopt_5(lopt_100),
        .lopt_6(lopt_101),
        .lopt_7(lopt_102),
        .lopt_8(lopt_103));
  microblaze_microblaze_0_0_carry_and_n_bb_86 \Using_EX_FPGA.PR_EX_And4 
       (.ex_piperun_masked_no3(ex_piperun_masked_no3),
        .ex_piperun_masked_no4(ex_piperun_masked_no4),
        .lopt(lopt_95),
        .lopt_1(lopt_96),
        .lopt_2(lopt_97));
  microblaze_microblaze_0_0_carry_and_n_bb_87 \Using_EX_FPGA.PR_EX_And5 
       (.ex_piperun_masked_no4(ex_piperun_masked_no4),
        .ex_piperun_masked_no5(ex_piperun_masked_no5),
        .lopt(lopt_98),
        .lopt_1(lopt_99),
        .lopt_2(lopt_100));
  microblaze_microblaze_0_0_carry_and_n_bb_88 \Using_EX_FPGA.PR_EX_And6 
       (.ex_piperun_masked_no5(ex_piperun_masked_no5),
        .ex_piperun_masked_no6(ex_piperun_masked_no6),
        .lopt(lopt_101),
        .lopt_1(lopt_102),
        .lopt_2(lopt_103));
  microblaze_microblaze_0_0_carry_and_bb \Using_EX_FPGA.PR_EX_And7 
       (.D(D_19),
        .D_0(D_18),
        .D_1(D_1),
        .EX_CarryIn(EX_CarryIn),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg (\Using_EX_FPGA.PR_EX_And7_n_2 ),
        .\Use_Async_Reset.sync_reset_reg (\Using_EX_FPGA.PR_EX_And7_n_8 ),
        .\Using_FPGA.Native (\Using_EX_FPGA.PR_EX_And7_n_1 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_12 (\m0_exception_raw_kind_reg[31]_0 ),
        .\Using_FPGA.Native_13 (ex_Interrupt),
        .\Using_FPGA.Native_14 (wb_exception_from_m3_reg_rep_0),
        .\Using_FPGA.Native_15 (ex_is_div_instr_i_reg_0),
        .\Using_FPGA.Native_16 (wb_exception_from_m3_reg_rep__0_0),
        .\Using_FPGA.Native_17 (\of_MSR_i_reg[25] [3:1]),
        .\Using_FPGA.Native_18 ({\EX_Op2_reg[17] [14:7],\EX_Op2_reg[17] [5:0]}),
        .\Using_FPGA.Native_19 (\Using_FPGA.Native_25 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_20 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_21 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_22 (wb_div_zero_overflow),
        .\Using_FPGA.Native_23 (\Using_FPGA.Native_26 ),
        .\Using_FPGA.Native_24 (\Using_FPGA.Native_i_2__8_n_0 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_14 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg_0),
        .ex_MSR_i(ex_MSR_i),
        .ex_PipeRun_for_ce(ex_PipeRun_for_ce),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_gpr_write_addr({ex_gpr_write_addr[2],ex_gpr_write_addr[3]}),
        .\ex_gpr_write_addr_reg[2] (\Using_EX_FPGA.PR_EX_And7_n_5 ),
        .\ex_gpr_write_addr_reg[3] (\Using_EX_FPGA.PR_EX_And7_n_4 ),
        .ex_jump(ex_jump),
        .ex_jump_hold(ex_jump_hold),
        .ex_piperun_masked_no6(ex_piperun_masked_no6),
        .ex_raw_valid_reg(\Using_EX_FPGA.PR_EX_And7_n_9 ),
        .ex_reservation(ex_reservation),
        .ex_reservation_reg(ex_databus_write_i_reg_n_0),
        .ex_reservation_reg_0(ex_databus_exclusive_i_reg_n_0),
        .in0(m0_PipeRun_for_ce),
        .lopt(lopt_104),
        .lopt_1(lopt_105),
        .lopt_2(lopt_106),
        .lopt_3(lopt_107),
        .lopt_4(lopt_108),
        .lopt_5(Op1_Conflict_Stall_n_0),
        .lopt_6(lopt_109),
        .lopt_7(lopt_110),
        .lopt_8(Op1_Conflict_Stall_n_1),
        .\m0_PC_i_reg[0] (ex_raw_valid_reg_n_0),
        .m0_exception_from_ex(m0_exception_from_ex),
        .m0_exception_raw_kind(m0_exception_raw_kind[30]),
        .\m0_exception_raw_kind_reg[30] (\Using_FPGA.Native_i_2__5_n_0 ),
        .m0_is_div_instr_i(m0_is_div_instr_i),
        .of_clear_msr_bip_hold_reg(of_set_msr_ee_hold_i_2_n_0),
        .of_clear_msr_bip_hold_reg_0(m0_rtid_instr_i_2_n_0),
        .of_clear_msr_bip_hold_reg_1(of_clear_msr_bip_hold_reg_n_0),
        .of_set_msr_ee_hold_reg(of_set_msr_ee_hold_reg_n_0),
        .of_set_msr_ie(of_set_msr_ie),
        .of_set_msr_ie_hold_reg(of_PipeRun_for_ce),
        .of_set_msr_ie_hold_reg_0(of_set_msr_ie_hold_reg_n_0),
        .sync_reset(reset_bool_for_rst),
        .wb_MSR_i(wb_MSR_i),
        .wb_exception_from_m3_reg_rep(\Using_EX_FPGA.PR_EX_And7_n_6 ),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0_1),
        .wb_exception_taken(wb_exception_taken),
        .wb_msr_clear_bip(wb_msr_clear_bip));
  microblaze_microblaze_0_0_carry_or_n_bb_89 \Using_EX_FPGA.PR_EX_Or1 
       (.\Using_FPGA.Native (m0_raw_valid_reg_n_0),
        .\Using_FPGA.Native_0 (wb_exception_from_m3_reg_rep__0_0),
        .ex_piperun_raw(ex_piperun_raw),
        .in0(m0_PipeRun_for_ce),
        .lopt(lopt_87),
        .lopt_1(lopt_88),
        .lopt_2(lopt_89),
        .m0_dead_valid_hold(m0_dead_valid_hold));
  LUT5 #(
    .INIT(32'h0000FFB8)) 
    \Using_FPGA.Native_i_1__133 
       (.I0(\of_MSR_i_reg[25] [0]),
        .I1(wb_exception_from_m3_reg_rep__0_0),
        .I2(m3_msr),
        .I3(wb_msr_set_ie),
        .I4(wb_msr_clear_ie),
        .O(\Using_FPGA.Native_7 ));
  LUT4 #(
    .INIT(16'h4155)) 
    \Using_FPGA.Native_i_1__135 
       (.I0(ex_alu_sel_logic),
        .I1(\Using_FPGA.Native_21 [15]),
        .I2(\Use_HW_BS.mem_mux3_reg[28] [31]),
        .I3(ex_cmp_op),
        .O(S_2));
  LUT4 #(
    .INIT(16'h0008)) 
    \Using_FPGA.Native_i_1__137 
       (.I0(\EX_ALU_Op_reg[0]_0 [0]),
        .I1(\EX_ALU_Op_reg[0]_0 [1]),
        .I2(ex_use_carry),
        .I3(ex_alu_sel_logic),
        .O(DI_3));
  LUT4 #(
    .INIT(16'hFFE0)) 
    \Using_FPGA.Native_i_1__138 
       (.I0(wb_div_zero_overflow),
        .I1(\of_MSR_i_reg[25] [3]),
        .I2(wb_exception_from_m3_reg_rep__0_0),
        .I3(\Using_FPGA.Native_34 ),
        .O(WB_Div_Zero_Overflow_reg_5));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT4 #(
    .INIT(16'h4450)) 
    \Using_FPGA.Native_i_1__140 
       (.I0(wb_msr_clear_bip),
        .I1(\of_MSR_i_reg[25] [2]),
        .I2(\Using_FPGA.Native_35 ),
        .I3(wb_exception_from_m3_reg_rep_0),
        .O(WB_MSR_Clear_BIP_reg_0));
  LUT5 #(
    .INIT(32'h0000FF7F)) 
    \Using_FPGA.Native_i_1__205 
       (.I0(wb_exception_raw_kind[31]),
        .I1(wb_exception_from_m3_reg_rep_0),
        .I2(wb_exception_raw_kind[28]),
        .I3(wb_exception_raw_kind[30]),
        .I4(\wb_PC_i_reg[31] ),
        .O(\wb_exception_raw_kind_reg[31]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \Using_FPGA.Native_i_2__5 
       (.I0(ex_dead_valid_hold),
        .I1(wb_exception_from_m3_reg_rep__0_0),
        .I2(ex_raw_valid_reg_n_0),
        .O(\Using_FPGA.Native_i_2__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_2__6 
       (.I0(ex_raw_valid_reg_n_0),
        .I1(ex_start_div_raw),
        .O(ex_start_div));
  LUT5 #(
    .INIT(32'hBAAAAAAA)) 
    \Using_FPGA.Native_i_2__7 
       (.I0(\wb_gpr_write_addr_reg[1]_0 [2]),
        .I1(wb_exception_raw_kind[31]),
        .I2(wb_exception_raw_kind[28]),
        .I3(wb_exception_from_m3_reg_rep__0_0),
        .I4(wb_exception_raw_kind[30]),
        .O(ADDRD[3]));
  LUT6 #(
    .INIT(64'hFFFFFFBF00000080)) 
    \Using_FPGA.Native_i_2__8 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [6]),
        .I1(ex_move_to_MSR_instr),
        .I2(ex_raw_valid_reg_n_0),
        .I3(wb_exception_from_m3_reg_rep__0_0),
        .I4(ex_dead_valid_hold),
        .I5(\Using_FPGA.Native_27 ),
        .O(\Using_FPGA.Native_i_2__8_n_0 ));
  LUT5 #(
    .INIT(32'hBAAAAAAA)) 
    \Using_FPGA.Native_i_3__1 
       (.I0(\wb_gpr_write_addr_reg[1]_0 [1]),
        .I1(wb_exception_raw_kind[31]),
        .I2(wb_exception_raw_kind[28]),
        .I3(wb_exception_from_m3_reg_rep__0_0),
        .I4(wb_exception_raw_kind[30]),
        .O(ADDRD[2]));
  LUT5 #(
    .INIT(32'hBAAAAAAA)) 
    \Using_FPGA.Native_i_4 
       (.I0(\wb_gpr_write_addr_reg[1]_0 [0]),
        .I1(wb_exception_raw_kind[31]),
        .I2(wb_exception_raw_kind[28]),
        .I3(wb_exception_from_m3_reg_rep__0_0),
        .I4(wb_exception_raw_kind[30]),
        .O(ADDRD[1]));
  LUT5 #(
    .INIT(32'h000000EA)) 
    \Using_Fast_Interrupt.Interrupt_Ack[0]_i_1 
       (.I0(wb_ie_rising),
        .I1(wb_rtid_instr),
        .I2(wb_raw_valid_reg_n_0),
        .I3(reset_bool_for_rst),
        .I4(wb_msr_clear_ie),
        .O(\Using_Fast_Interrupt.Interrupt_Ack[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hBFAA)) 
    \Using_Fast_Interrupt.Interrupt_Ack[1]_i_1 
       (.I0(wb_msr_clear_ie),
        .I1(wb_raw_valid_reg_n_0),
        .I2(wb_rtid_instr),
        .I3(wb_ie_rising),
        .O(\Using_Fast_Interrupt.Interrupt_Ack[1]_i_1_n_0 ));
  FDRE \Using_Fast_Interrupt.Interrupt_Ack_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_Fast_Interrupt.Interrupt_Ack[0]_i_1_n_0 ),
        .Q(Interrupt_Ack[0]),
        .R(1'b0));
  FDRE \Using_Fast_Interrupt.Interrupt_Ack_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_Fast_Interrupt.Interrupt_Ack[1]_i_1_n_0 ),
        .Q(Interrupt_Ack[1]),
        .R(reset_bool_for_rst));
  FDRE \Using_Fast_Interrupt.wb_ie_rising_reg 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(p_55_out),
        .Q(wb_ie_rising),
        .R(1'b0));
  microblaze_microblaze_0_0_carry_and_n_bb_90 \Using_IF1_FPGA_No_MMU.PR_IF1_And1 
       (.if0_raw_valid_reg(if1_insert_piperun_i),
        .if2_raw_valid_reg(if2_raw_valid_reg_0),
        .lopt(lopt_29),
        .lopt_1(lopt_30),
        .lopt_2(lopt_31));
  microblaze_microblaze_0_0_carry_or_n_bb_91 \Using_IF1_Insert_FPGA_No_MMU.PR_IF1_Ins_Or1 
       (.if2_dead_fetch_hold_reg(\Using_IF1_Insert_FPGA_No_MMU.PR_IF1_Ins_Or1_n_1 ),
        .if2_dead_fetch_hold_reg_0(S_0),
        .if2_dead_fetch_hold_reg_1(if2_piperun),
        .if2_dead_fetch_hold_reg_2(if2_dead_fetch_hold_reg_n_0),
        .if2_dead_fetch_hold_reg_3(Kill_Fetch_Carry_n_2),
        .if2_dead_fetch_hold_reg_4(bp1_dead_fetch_hold_reg_0),
        .if2_raw_valid_reg(if1_insert_piperun_i),
        .kill_fetch_mmu(kill_fetch_mmu),
        .lopt(lopt_29),
        .lopt_1(lopt_30),
        .lopt_2(lopt_31),
        .lopt_3(lopt_32),
        .lopt_4(lopt_33),
        .lopt_5(lopt_34),
        .lopt_6(lopt_35),
        .lopt_7(lopt_36),
        .lopt_8(lopt_37),
        .sync_reset(reset_bool_for_rst));
  microblaze_microblaze_0_0_carry_and_n_bb_92 \Using_IF2_FPGA.PR_IF2_And1 
       (.if2_piperun_masked_no1(if2_piperun_masked_no1),
        .if2_piperun_masked_no2(if2_piperun_masked_no2),
        .if3_ibus_access_i_reg(PREFETCH_BUFFER_I1_n_112),
        .lopt(lopt_24),
        .lopt_1(lopt_25));
  microblaze_microblaze_0_0_carry_and_n_bb_93 \Using_IF2_FPGA.PR_IF2_And2 
       (.IWAIT(IWAIT),
        .\Use_ILMB.if2_ilmb_issued_reg (\Use_ILMB.if2_ilmb_issued_reg ),
        .\Use_ILMB.if2_ilmb_issued_reg_0 (D[45]),
        .\Using_FPGA.Native (if2_piperun),
        .if2_ibus_first_cycle_raw_reg(if2_ibus_first_cycle_raw_reg_0),
        .if2_ilmb_issued(if2_ilmb_issued),
        .if2_piperun_masked_no2(if2_piperun_masked_no2),
        .if3_allow_iready(if3_allow_iready),
        .if3_dead_fetch_hold_reg(\Using_IF2_FPGA.PR_IF2_And2_n_3 ),
        .if3_dead_fetch_hold_reg_0(if3_piperun),
        .if3_dead_fetch_hold_reg_1(if3_dead_fetch_hold_reg_n_0),
        .if3_dead_fetch_hold_reg_2(if3_raw_valid_reg_0),
        .if3_dead_fetch_hold_reg_3(if2_dead_fetch_hold_reg_n_0),
        .kill_fetch(kill_fetch),
        .lopt(lopt_26),
        .lopt_1(lopt_27),
        .lopt_2(lopt_28),
        .sync_reset(reset_bool_for_rst));
  microblaze_microblaze_0_0_carry_or_n_bb_94 \Using_IF2_FPGA.PR_IF2_Or1 
       (.\Using_FPGA.Native (if3_raw_valid_reg_0),
        .\Using_FPGA.Native_0 (if3_piperun),
        .if2_piperun_masked_no1(if2_piperun_masked_no1),
        .lopt(lopt_22),
        .lopt_1(lopt_23));
  microblaze_microblaze_0_0_carry_and_n_bb_95 \Using_IF3_FPGA.PR_IF3_And1 
       (.if3_piperun_masked_no1(if3_piperun_masked_no1),
        .if3_piperun_masked_no2(if3_piperun_masked_no2),
        .lopt(lopt_17),
        .lopt_1(lopt_18),
        .lopt_2(lopt_19));
  microblaze_microblaze_0_0_carry_and_n_bb_96 \Using_IF3_FPGA.PR_IF3_And2 
       (.if3_piperun_masked_no2(if3_piperun_masked_no2),
        .if3_piperun_masked_no3(if3_piperun_masked_no3),
        .if4_ibus_access_i_reg(if4_ibus_access_i_reg_0),
        .lopt(lopt_20),
        .lopt_1(lopt_21));
  microblaze_microblaze_0_0_carry_and_n_bb_97 \Using_IF3_FPGA.PR_IF3_And3 
       (.D(D[45]),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg_2 ),
        .\Use_Async_Reset.sync_reset_reg_0 (\Use_Async_Reset.sync_reset_reg_3 ),
        .\Use_ILMB.if3_iready_hold_reg (\Use_ILMB.if3_iready_hold_reg ),
        .\Use_ILMB.if3_potential_bubble_reg (if2_piperun),
        .\Using_FPGA.Native (if3_piperun),
        .if3_ilmb_iready(if3_ilmb_iready),
        .if3_piperun_masked_no3(if3_piperun_masked_no3),
        .if3_potential_bubble(if3_potential_bubble),
        .if4_dead_fetch_hold_reg(\Using_IF3_FPGA.PR_IF3_And3_n_3 ),
        .if4_dead_fetch_hold_reg_0(if4_piperun),
        .if4_dead_fetch_hold_reg_1(if4_dead_fetch_hold_reg_n_0),
        .if4_dead_fetch_hold_reg_2(if4_raw_valid_reg_0),
        .if4_dead_fetch_hold_reg_3(if3_dead_fetch_hold_reg_n_0),
        .kill_fetch(kill_fetch),
        .lopt(lopt_22),
        .lopt_1(lopt_23),
        .lopt_2(if3_raw_valid_reg_0),
        .lopt_3(lopt_24),
        .lopt_4(lopt_25),
        .lopt_5(PREFETCH_BUFFER_I1_n_112),
        .lopt_6(lopt_26),
        .lopt_7(lopt_27),
        .lopt_8(lopt_28),
        .sync_reset(reset_bool_for_rst));
  microblaze_microblaze_0_0_carry_or_n_bb_98 \Using_IF3_FPGA.PR_IF3_Or1 
       (.\Using_FPGA.Native (if4_raw_valid_reg_0),
        .\Using_FPGA.Native_0 (if4_piperun),
        .if3_piperun_masked_no1(if3_piperun_masked_no1),
        .lopt(lopt_15),
        .lopt_1(lopt_16));
  microblaze_microblaze_0_0_carry_and_bb_99 \Using_IF4_FPGA.PR_IF4_And1 
       (.\Using_FPGA.Native (if4_raw_valid_reg_0),
        .if4_piperun_masked_no2(if4_piperun_masked_no2),
        .if4_piperun_masked_no3(if4_piperun_masked_no3),
        .lopt(lopt_10),
        .lopt_1(lopt_11));
  microblaze_microblaze_0_0_carry_and_n_bb_100 \Using_IF4_FPGA.PR_IF4_And2 
       (.if4_piperun_masked_no3(if4_piperun_masked_no3),
        .if4_piperun_masked_no4(if4_piperun_masked_no4),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14));
  microblaze_microblaze_0_0_carry_or_bb_101 \Using_IF4_FPGA.PR_IF4_Or1 
       (.if4_piperun_masked_no1(if4_piperun_masked_no1),
        .if4_ready(if4_ready),
        .lopt(\^lopt_8 ),
        .lopt_1(lopt_9),
        .lopt_2(lopt_10),
        .lopt_3(lopt_11),
        .lopt_4(if4_raw_valid_reg_0),
        .lopt_5(lopt_12),
        .lopt_6(lopt_13),
        .lopt_7(lopt_14));
  microblaze_microblaze_0_0_carry_or_bb_102 \Using_IF4_FPGA.PR_IF4_Or2 
       (.if4_piperun_masked_no1(if4_piperun_masked_no1),
        .if4_piperun_masked_no2(if4_piperun_masked_no2),
        .lopt(\^lopt_8 ),
        .lopt_1(lopt_9));
  microblaze_microblaze_0_0_carry_or_bb_103 \Using_IF4_FPGA.PR_IF4_Or3 
       (.\Serial_Dbg_Intf.if_debug_ready_i_reg (if4_piperun),
        .\Use_ILMB.if4_ILMB_Data_Strobe_i_reg (\Use_ILMB.if4_ILMB_Data_Strobe_i_reg ),
        .if4_piperun_masked_no4(if4_piperun_masked_no4),
        .lopt(lopt_15),
        .lopt_1(lopt_16),
        .lopt_2(if4_raw_valid_reg_0),
        .lopt_3(lopt_17),
        .lopt_4(lopt_18),
        .lopt_5(lopt_19),
        .lopt_6(lopt_20),
        .lopt_7(lopt_21),
        .lopt_8(if4_ibus_access_i_reg_0));
  microblaze_microblaze_0_0_carry_latch_and_bb \Using_IF4_Push_FPGA.Push_PipeRun 
       (.\Using_FPGA.Native (\Using_IF4_Push_FPGA.Push_PipeRun_n_1 ),
        .\Using_FPGA.Native_0 (if4_piperun),
        .\Using_FPGA.Native_1 (Kill_Fetch_Carry_n_1),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .if4_sel_input(if4_sel_input[4]));
  microblaze_microblaze_0_0_carry_and_bb_104 \Using_M0_FPGA.PR_M0_And1 
       (.\Using_FPGA.Native (m0_raw_valid_reg_n_0),
        .lopt(lopt_78),
        .lopt_1(lopt_79),
        .lopt_2(lopt_80),
        .lopt_3(lopt_81),
        .lopt_4(lopt_82),
        .lopt_5(lopt_83),
        .lopt_6(lopt_84),
        .lopt_7(lopt_85),
        .lopt_8(lopt_86),
        .m0_piperun_masked_no1(m0_piperun_masked_no1),
        .m0_piperun_raw(m0_piperun_raw));
  microblaze_microblaze_0_0_carry_and_n_bb_105 \Using_M0_FPGA.PR_M0_And2 
       (.lopt(lopt_78),
        .lopt_1(lopt_79),
        .lopt_2(lopt_80),
        .m0_piperun_masked_no1(m0_piperun_masked_no1),
        .m0_piperun_masked_no2(m0_piperun_masked_no2));
  microblaze_microblaze_0_0_carry_and_n_bb_106 \Using_M0_FPGA.PR_M0_And3 
       (.lopt(lopt_81),
        .lopt_1(lopt_82),
        .lopt_2(lopt_83),
        .m0_piperun_masked_no2(m0_piperun_masked_no2),
        .m0_piperun_masked_no3(m0_piperun_masked_no3));
  microblaze_microblaze_0_0_carry_and_n_bb_107 \Using_M0_FPGA.PR_M0_And4 
       (.lopt(lopt_84),
        .lopt_1(lopt_85),
        .lopt_2(lopt_86),
        .m0_piperun_masked_no3(m0_piperun_masked_no3),
        .m0_piperun_masked_no4(m0_piperun_masked_no4));
  microblaze_microblaze_0_0_carry_and_n_bb_108 \Using_M0_FPGA.PR_M0_And5 
       (.D(D_21),
        .D_0(D_20),
        .\Using_FPGA.Native (ex_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (wb_exception_from_m3_reg_rep__0_0),
        .\Using_FPGA.Native_1 (wb_div_zero_overflow),
        .\Using_FPGA.Native_2 (\of_MSR_i_reg[25] [3]),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_30 ),
        .\Using_FPGA.Native_4 (M0_Div_Exception_Hold_DFF_n_0),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_32 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg_3),
        .ex_gpr_write(ex_gpr_write),
        .ex_gpr_write_dbg(ex_gpr_write_dbg),
        .in0(m0_PipeRun_for_ce),
        .lopt(lopt_87),
        .lopt_1(lopt_88),
        .lopt_2(lopt_89),
        .lopt_3(lopt_90),
        .lopt_4(lopt_91),
        .lopt_5(Jump_Logic_I1_n_6),
        .lopt_6(lopt_92),
        .lopt_7(lopt_93),
        .lopt_8(lopt_94),
        .m0_dead_valid_hold(m0_dead_valid_hold),
        .m0_gpr_write(m0_gpr_write),
        .m0_gpr_write_dbg(m0_gpr_write_dbg),
        .m0_piperun_masked_no4(m0_piperun_masked_no4),
        .m0_raw_valid_reg(\Using_M0_FPGA.PR_M0_And5_n_1 ),
        .m0_raw_valid_reg_0(\Using_FPGA.Native_i_2__5_n_0 ),
        .m0_raw_valid_reg_1(m0_raw_valid_reg_n_0),
        .sync_reset(reset_bool_for_rst),
        .wb_exception_from_m3_reg_rep__0(\Using_M0_FPGA.PR_M0_And5_n_2 ),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_3));
  microblaze_microblaze_0_0_carry_or_n_bb_109 \Using_M0_FPGA.PR_M0_Or1 
       (.\Using_FPGA.Native (m1_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (m1_raw_valid_reg_n_0),
        .\Using_FPGA.Native_1 (wb_exception_from_m3_reg_rep__0_0),
        .lopt(lopt_75),
        .lopt_1(lopt_76),
        .lopt_2(lopt_77),
        .m0_piperun_raw(m0_piperun_raw),
        .m1_dead_valid_hold(m1_dead_valid_hold));
  microblaze_microblaze_0_0_carry_and_n_bb_110 \Using_M1_FPGA.PR_M1_And1 
       (.lopt(lopt_70),
        .lopt_1(lopt_71),
        .lopt_2(lopt_72),
        .lopt_3(lopt_73),
        .lopt_4(lopt_74),
        .lopt_5(m1_raw_valid_reg_n_0),
        .lopt_6(lopt_75),
        .lopt_7(lopt_76),
        .lopt_8(lopt_77),
        .m1_piperun_masked_no1(m1_piperun_masked_no1),
        .m1_piperun_raw(m1_piperun_raw));
  microblaze_microblaze_0_0_carry_and_n_bb_111 \Using_M1_FPGA.PR_M1_And2 
       (.lopt(lopt_70),
        .lopt_1(lopt_71),
        .lopt_2(lopt_72),
        .m1_piperun_masked_no1(m1_piperun_masked_no1),
        .m1_piperun_masked_no2(m1_piperun_masked_no2));
  microblaze_microblaze_0_0_carry_and_bb_112 \Using_M1_FPGA.PR_M1_And3 
       (.A_N201_out(A_N201_out),
        .D(D[2:1]),
        .DWait(DWait),
        .D_0(D_24),
        .D_1(D_23),
        .D_2(D_22),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg (\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 (\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 (\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ),
        .\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg (\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg (D[0]),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 (\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 (\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ),
        .\Use_DAXI.m2_active_access_unmasked_reg (\Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ),
        .\Use_DLMB.m1_dlmb_issued_reg (\Use_DLMB.m1_dlmb_issued_reg ),
        .\Using_FPGA.Native (wb_exception_from_m3_reg_rep__0_0),
        .\Using_FPGA.Native_0 (wb_div_zero_overflow),
        .\Using_FPGA.Native_1 (\of_MSR_i_reg[25] [3]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_29 ),
        .\Using_FPGA.Native_3 (M1_Div_Exception_Hold_DFF_n_0),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_32 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_33 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg_2),
        .in0(m0_PipeRun_for_ce),
        .lopt(lopt_73),
        .lopt_1(lopt_74),
        .m0_gpr_write(m0_gpr_write),
        .m0_gpr_write_dbg(m0_gpr_write_dbg),
        .m0_is_div_instr_i(m0_is_div_instr_i),
        .m1_PipeRun_for_ce(m1_PipeRun_for_ce),
        .m1_databus_access(m1_databus_access),
        .m1_databus_access_from_m0_reg(m1_databus_access_from_m0_reg_0),
        .m1_databus_addr_from_m0_reg(m1_databus_addr_from_m0_reg_0),
        .m1_databus_write_from_m0_reg(m1_databus_write_from_m0_reg_0),
        .m1_databus_write_from_m0_reg_0(m1_databus_write_from_m0_reg_1),
        .m1_dead_valid_hold(m1_dead_valid_hold),
        .m1_dlmb_issued(m1_dlmb_issued),
        .m1_gpr_write(m1_gpr_write),
        .m1_gpr_write_dbg(m1_gpr_write_dbg),
        .m1_is_div_instr_i(m1_is_div_instr_i),
        .m1_piperun_masked_no2(m1_piperun_masked_no2),
        .m1_raw_valid_reg(\Using_M1_FPGA.PR_M1_And3_n_7 ),
        .\m2_PC_i_reg[0] (m1_raw_valid_reg_n_0),
        .m2_allow_dready(m2_allow_dready),
        .m2_dlmb_drop_request(m2_dlmb_drop_request),
        .sync_reset(reset_bool_for_rst),
        .wb_exception_from_m3_reg_rep__0(\Using_M1_FPGA.PR_M1_And3_n_8 ),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_4));
  microblaze_microblaze_0_0_carry_or_n_bb_113 \Using_M1_FPGA.PR_M1_Or1 
       (.\Using_FPGA.Native (m2_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (wb_exception_from_m3_reg_rep__0_0),
        .\Using_FPGA.Native_1 (m2_raw_valid_reg_0),
        .lopt(lopt_67),
        .lopt_1(lopt_68),
        .lopt_2(lopt_69),
        .m1_piperun_raw(m1_piperun_raw),
        .m2_dead_valid_hold(m2_dead_valid_hold));
  microblaze_microblaze_0_0_carry_and_n_bb_114 \Using_M2_FPGA.PR_M2_And1 
       (.DReady(DReady),
        .DWait(DWait),
        .\Using_FPGA.Native (m2_databus_access_i_reg_0),
        .\Using_FPGA.Native_0 (m2_raw_valid_reg_0),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_24 ),
        .lopt(lopt_54),
        .lopt_1(lopt_55),
        .lopt_2(lopt_56),
        .m2_allow_dready(m2_allow_dready),
        .m2_piperun_masked_no1(m2_piperun_masked_no1),
        .m2_piperun_raw(m2_piperun_raw));
  microblaze_microblaze_0_0_carry_and_n_bb_115 \Using_M2_FPGA.PR_M2_And2 
       (.\Using_FPGA.Native (\Using_FPGA.Native_19 ),
        .lopt(lopt_57),
        .lopt_1(lopt_58),
        .m2_piperun_masked_no1(m2_piperun_masked_no1),
        .m2_piperun_masked_no2(m2_piperun_masked_no2));
  microblaze_microblaze_0_0_carry_and_n_bb_116 \Using_M2_FPGA.PR_M2_And3 
       (.lopt(lopt_59),
        .lopt_1(lopt_60),
        .lopt_2(lopt_61),
        .m2_piperun_masked_no2(m2_piperun_masked_no2),
        .m2_piperun_masked_no3(m2_piperun_masked_no3));
  microblaze_microblaze_0_0_carry_and_n_bb_117 \Using_M2_FPGA.PR_M2_And4 
       (.lopt(lopt_62),
        .lopt_1(lopt_63),
        .lopt_2(lopt_64),
        .lopt_3(lopt_65),
        .lopt_4(lopt_66),
        .lopt_5(m2_raw_valid_reg_0),
        .lopt_6(lopt_67),
        .lopt_7(lopt_68),
        .lopt_8(lopt_69),
        .m2_piperun_masked_no3(m2_piperun_masked_no3),
        .m2_piperun_masked_no4(m2_piperun_masked_no4));
  microblaze_microblaze_0_0_carry_and_n_bb_118 \Using_M2_FPGA.PR_M2_And5 
       (.lopt(lopt_62),
        .lopt_1(lopt_63),
        .lopt_2(lopt_64),
        .m2_piperun_masked_no4(m2_piperun_masked_no4),
        .m2_piperun_masked_no5(m2_piperun_masked_no5));
  microblaze_microblaze_0_0_carry_and_bb_119 \Using_M2_FPGA.PR_M2_And6 
       (.D(D[2]),
        .D_0(D_27),
        .D_1(D_26),
        .D_2(D_25),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg_1 ),
        .\Use_DAXI.M_AXI_DP_BREADY_I_reg (\Use_DAXI.M_AXI_DP_BREADY_I_reg ),
        .\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 (\Use_DAXI.M_AXI_DP_WDATA_reg[23] [1:0]),
        .\Use_DAXI.M_AXI_DP_RREADY_I_reg (\Use_DAXI.M_AXI_DP_RREADY_I_reg ),
        .\Use_DAXI.M_AXI_DP_RREADY_I_reg_0 (\Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ),
        .\Use_DLMB.m2_dready_hold_reg (m1_PipeRun_for_ce),
        .\Use_DLMB.m2_dready_hold_reg_0 (\Use_DLMB.m2_dready_hold_reg ),
        .\Use_DLMB.m2_potential_bubble_reg (\Use_DLMB.m2_potential_bubble_reg ),
        .\Use_DLMB.m2_potential_bubble_reg_0 (D[0]),
        .\Using_FPGA.Native (wb_exception_from_m3_reg_rep__0_0),
        .\Using_FPGA.Native_0 (wb_div_zero_overflow),
        .\Using_FPGA.Native_1 (\of_MSR_i_reg[25] [3]),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_28 ),
        .\Using_FPGA.Native_3 (M2_Div_Exception_Hold_DFF_n_0),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_33 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_31 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg_1),
        .lopt(lopt_65),
        .lopt_1(lopt_66),
        .m1_gpr_write(m1_gpr_write),
        .m1_gpr_write_dbg(m1_gpr_write_dbg),
        .m1_is_div_instr_i(m1_is_div_instr_i),
        .m2_PipeRun_for_ce(m2_PipeRun_for_ce),
        .m2_databus_write(m2_databus_write),
        .m2_dead_valid_hold(m2_dead_valid_hold),
        .m2_dead_valid_hold_reg(m2_raw_valid_reg_0),
        .m2_dlmb_dready(m2_dlmb_dready),
        .m2_dlmb_drop_request(m2_dlmb_drop_request),
        .m2_gpr_write(m2_gpr_write),
        .m2_gpr_write_dbg(m2_gpr_write_dbg),
        .m2_is_div_instr(m2_is_div_instr),
        .m2_piperun_masked_no5(m2_piperun_masked_no5),
        .m2_potential_bubble(m2_potential_bubble),
        .m2_raw_valid_reg(\Using_M2_FPGA.PR_M2_And6_n_5 ),
        .m2_raw_valid_reg_0(M2_Exception_From_DFF_n_3),
        .sync_reset(reset_bool_for_rst),
        .wb_exception_from_m3_reg_rep__0(\Using_M2_FPGA.PR_M2_And6_n_6 ),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_5));
  microblaze_microblaze_0_0_carry_or_n_bb_120 \Using_M2_FPGA.PR_M2_Or1 
       (.\Using_FPGA.Native (m3_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (wb_exception_from_m3_reg_rep__0_0),
        .\Using_FPGA.Native_1 (m3_raw_valid_reg_0),
        .lopt(lopt_54),
        .lopt_1(lopt_55),
        .lopt_2(lopt_56),
        .lopt_3(lopt_57),
        .lopt_4(lopt_58),
        .lopt_5(\Using_FPGA.Native_19 ),
        .lopt_6(lopt_59),
        .lopt_7(lopt_60),
        .lopt_8(lopt_61),
        .m2_piperun_raw(m2_piperun_raw),
        .m3_dead_valid_hold(m3_dead_valid_hold));
  microblaze_microblaze_0_0_carry_or_n_bb_121 \Using_M3_FPGA.PR_M3_And1 
       (.\Using_FPGA.Native (m3_raw_valid_reg_0),
        .\Using_FPGA.Native_0 (m3_sel_load_res),
        .lopt(lopt_41),
        .lopt_1(lopt_42),
        .lopt_2(lopt_43),
        .m3_databus_ready(m3_databus_ready),
        .m3_piperun_data_raw(m3_piperun_data_raw));
  microblaze_microblaze_0_0_carry_and_n_bb_122 \Using_M3_FPGA.PR_M3_And2 
       (.\Using_FPGA.Native (\Using_FPGA.Native_20 ),
        .lopt(lopt_47),
        .lopt_1(lopt_48),
        .lopt_2(lopt_49),
        .lopt_3(lopt_50),
        .lopt_4(lopt_51),
        .lopt_5(WB_MSR_Set_IE_reg_0),
        .lopt_6(lopt_52),
        .lopt_7(lopt_53),
        .lopt_8(m3_raw_valid_reg_0),
        .m3_piperun_masked_no1(m3_piperun_masked_no1),
        .m3_piperun_raw(m3_piperun_raw));
  microblaze_microblaze_0_0_carry_and_n_bb_123 \Using_M3_FPGA.PR_M3_And3 
       (.lopt(lopt_47),
        .lopt_1(lopt_48),
        .lopt_2(lopt_49),
        .m3_piperun_masked_no1(m3_piperun_masked_no1),
        .m3_piperun_masked_no2(m3_piperun_masked_no2));
  microblaze_microblaze_0_0_carry_and_n_bb_124 \Using_M3_FPGA.PR_M3_And4 
       (.WB_MSR_Set_IE_reg(WB_MSR_Set_IE_reg_0),
        .lopt(lopt_50),
        .lopt_1(lopt_51),
        .m3_piperun_masked_no2(m3_piperun_masked_no2),
        .m3_piperun_masked_no3(m3_piperun_masked_no3));
  microblaze_microblaze_0_0_carry_and_bb_125 \Using_M3_FPGA.PR_M3_And5 
       (.D(D_28),
        .Q({wb_exception_raw_kind[28],wb_exception_raw_kind[30],wb_exception_raw_kind[31]}),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_31 ),
        .lopt(lopt_52),
        .lopt_1(lopt_53),
        .m3_PipeRun_for_ce(m3_PipeRun_for_ce),
        .m3_active_access(m3_active_access),
        .m3_dead_valid_hold(m3_dead_valid_hold),
        .m3_dead_valid_hold_reg(m3_raw_valid_reg_0),
        .m3_dead_valid_hold_reg_0(wb_exception_from_m3_reg_rep__0_0),
        .m3_gpr_write_dbg(m3_gpr_write_dbg),
        .m3_msr(m3_msr),
        .m3_piperun_masked_no3(m3_piperun_masked_no3),
        .m3_raw_valid_reg(\Using_M3_FPGA.PR_M3_And5_n_2 ),
        .m3_raw_valid_reg_0(M3_Exception_From_DFF_n_1),
        .m3_raw_valid_reg_1(m2_PipeRun_for_ce),
        .sync_reset(reset_bool_for_rst),
        .\wb_PC_i_reg[31] (wb_exception_from_m3_reg_rep_0),
        .\wb_PC_i_reg[31]_0 (\wb_PC_i_reg[31] ),
        .wb_exception_from_m3_reg_rep__0(\Using_M3_FPGA.PR_M3_And5_n_5 ),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_2),
        .\wb_exception_raw_kind_reg[31] (\wb_exception_raw_kind_reg[31]_1 ),
        .wb_piperun_i_reg(\Using_M3_FPGA.PR_M3_And5_n_3 ),
        .wb_raw_valid_reg(wb_piperun_i_reg_n_0),
        .wb_raw_valid_reg_0(WB_PC_Valid_i_1_n_0),
        .wb_raw_valid_reg_1(wb_raw_valid_reg_n_0));
  microblaze_microblaze_0_0_carry_or_n_bb_126 \Using_M3_FPGA.PR_M3_Or1 
       (.\Using_FPGA.Native (m3_raw_valid_reg_0),
        .\Using_FPGA.Native_0 (m3_sel_load_res),
        .lopt(lopt_44),
        .lopt_1(lopt_45),
        .lopt_2(lopt_46),
        .m3_piperun_data_raw(m3_piperun_data_raw),
        .m3_piperun_raw(m3_piperun_raw));
  FDSE \Using_Mul_Instr.ex_not_mul_op_i_reg 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_103),
        .Q(\Using_Mul_Instr.ex_not_mul_op_i_reg_0 ),
        .S(reset_bool_for_rst));
  microblaze_microblaze_0_0_carry_and_n_bb_127 \Using_OF_FPGA.PR_OF_And1 
       (.\Using_FPGA.Native (Op1_Conflict_Stall_n_0),
        .lopt(lopt_107),
        .lopt_1(lopt_108),
        .of_piperun_masked_no1(of_piperun_masked_no1),
        .of_piperun_raw(of_piperun_raw));
  microblaze_microblaze_0_0_carry_and_n_bb_128 \Using_OF_FPGA.PR_OF_And10 
       (.lopt(lopt_122),
        .lopt_1(lopt_123),
        .lopt_2(lopt_124),
        .of_piperun_masked_no10(of_piperun_masked_no10),
        .of_piperun_masked_no9(of_piperun_masked_no9));
  microblaze_microblaze_0_0_carry_and_bb_129 \Using_OF_FPGA.PR_OF_And11 
       (.D(D_30),
        .D_0(D_29),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg (\Performance_Debug_Control.ex_dbg_pc_hit_i_i_5_n_0 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 (M0_Exception_From_DFF_n_8),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 (PREFETCH_BUFFER_I1_n_80),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 (\Performance_Debug_Control.ex_brki_hit_reg ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 (\m0_exception_raw_kind_reg[31]_0 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg (\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ),
        .\Use_Async_Reset.sync_reset_reg (\Using_OF_FPGA.PR_OF_And11_n_3 ),
        .\Using_FPGA.Native (ex_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (of_gpr_write_dbg),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg_4),
        .ex_gpr_write(ex_gpr_write),
        .ex_gpr_write_dbg(ex_gpr_write_dbg),
        .\of_MSR_i_reg[25] (\of_MSR_i_reg[25]_0 ),
        .\of_MSR_i_reg[25]_0 (\of_MSR_i_reg[25]_1 ),
        .\of_MSR_i_reg[25]_1 (wb_div_zero_overflow),
        .\of_MSR_i_reg[25]_2 (\of_MSR_i_reg[25] [3]),
        .\of_MSR_i_reg[30] (\Using_FPGA.Native_7 ),
        .\of_MSR_i_reg[30]_0 (wb_exception_from_m3_reg_rep__0_0),
        .of_PipeRun_for_ce(of_PipeRun_for_ce),
        .of_dead_valid_hold(of_dead_valid_hold),
        .of_dead_valid_hold_reg(wb_exception_from_m3_reg_rep_0),
        .of_piperun_masked_no10(of_piperun_masked_no10),
        .of_raw_valid(of_raw_valid),
        .out(of_gpr_write),
        .p_43_out__4(\Use_Debug_Logic.Master_Core.Debug_Perf/p_43_out__4 ),
        .p_48_out(\Use_Debug_Logic.Master_Core.Debug_Perf/p_48_out ),
        .sync_reset(reset_bool_for_rst));
  microblaze_microblaze_0_0_carry_and_n_bb_130 \Using_OF_FPGA.PR_OF_And2 
       (.\Using_FPGA.Native (Op1_Conflict_Stall_n_1),
        .lopt(lopt_109),
        .lopt_1(lopt_110),
        .of_piperun_masked_no1(of_piperun_masked_no1),
        .of_piperun_masked_no2(of_piperun_masked_no2));
  microblaze_microblaze_0_0_carry_and_n_bb_131 \Using_OF_FPGA.PR_OF_And3 
       (.\Using_FPGA.Native (Op2_Conflict_Stall_n_0),
        .lopt(lopt_111),
        .lopt_1(lopt_112),
        .lopt_2(Op2_Conflict_Stall_n_1),
        .lopt_3(lopt_113),
        .lopt_4(lopt_114),
        .lopt_5(Op3_Conflict_Stall_n_0),
        .lopt_6(lopt_115),
        .lopt_7(lopt_116),
        .lopt_8(Op3_Conflict_Stall_n_1),
        .of_piperun_masked_no2(of_piperun_masked_no2),
        .of_piperun_masked_no3(of_piperun_masked_no3));
  microblaze_microblaze_0_0_carry_and_n_bb_132 \Using_OF_FPGA.PR_OF_And4 
       (.\Using_FPGA.Native (Op2_Conflict_Stall_n_1),
        .lopt(lopt_111),
        .lopt_1(lopt_112),
        .of_piperun_masked_no3(of_piperun_masked_no3),
        .of_piperun_masked_no4(of_piperun_masked_no4));
  microblaze_microblaze_0_0_carry_and_n_bb_133 \Using_OF_FPGA.PR_OF_And5 
       (.\Using_FPGA.Native (Op3_Conflict_Stall_n_0),
        .lopt(lopt_113),
        .lopt_1(lopt_114),
        .of_piperun_masked_no4(of_piperun_masked_no4),
        .of_piperun_masked_no5(of_piperun_masked_no5));
  microblaze_microblaze_0_0_carry_and_n_bb_134 \Using_OF_FPGA.PR_OF_And6 
       (.\Using_FPGA.Native (Op3_Conflict_Stall_n_1),
        .lopt(lopt_115),
        .lopt_1(lopt_116),
        .of_piperun_masked_no5(of_piperun_masked_no5),
        .of_piperun_masked_no6(of_piperun_masked_no6));
  microblaze_microblaze_0_0_carry_and_n_bb_135 \Using_OF_FPGA.PR_OF_And7 
       (.lopt(lopt_117),
        .lopt_1(lopt_118),
        .lopt_2(lopt_119),
        .lopt_3(lopt_120),
        .lopt_4(lopt_121),
        .lopt_5(PREFETCH_BUFFER_I1_n_99),
        .lopt_6(lopt_122),
        .lopt_7(lopt_123),
        .lopt_8(lopt_124),
        .of_piperun_masked_no6(of_piperun_masked_no6),
        .of_piperun_masked_no7(of_piperun_masked_no7));
  microblaze_microblaze_0_0_carry_and_n_bb_136 \Using_OF_FPGA.PR_OF_And8 
       (.lopt(lopt_117),
        .lopt_1(lopt_118),
        .lopt_2(lopt_119),
        .of_piperun_masked_no7(of_piperun_masked_no7),
        .of_piperun_masked_no8(of_piperun_masked_no8));
  microblaze_microblaze_0_0_carry_and_n_bb_137 \Using_OF_FPGA.PR_OF_And9 
       (.\Using_FPGA.Native (PREFETCH_BUFFER_I1_n_99),
        .\Using_FPGA.Native_i_1__8 (ex_is_div_instr_i_reg_0),
        .\Using_FPGA.Native_i_1__8_0 (ex_raw_valid_reg_n_0),
        .\Using_FPGA.Native_i_1__8_1 (wb_exception_from_m3_reg_rep__0_0),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_is_div_instr_i_reg(\Using_OF_FPGA.PR_OF_And9_n_1 ),
        .lopt(lopt_120),
        .lopt_1(lopt_121),
        .of_piperun_masked_no8(of_piperun_masked_no8),
        .of_piperun_masked_no9(of_piperun_masked_no9));
  microblaze_microblaze_0_0_carry_or_n_bb_138 \Using_OF_FPGA.PR_OF_Or1 
       (.\Using_FPGA.Native (ex_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (ex_raw_valid_reg_n_0),
        .\Using_FPGA.Native_1 (wb_exception_from_m3_reg_rep__0_0),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .lopt(lopt_104),
        .lopt_1(lopt_105),
        .lopt_2(lopt_106),
        .of_piperun_raw(of_piperun_raw));
  FDRE WB_Byte_Access_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_byte_access_i_reg_n_0),
        .Q(wb_byte_access),
        .R(reset_bool_for_rst));
  FDRE WB_DataBus_Access_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_sel_load_res),
        .Q(wb_databus_access),
        .R(reset_bool_for_rst));
  FDRE WB_DataBus_Read_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_databus_read_i_reg_n_0),
        .Q(wb_databus_read),
        .R(reset_bool_for_rst));
  FDRE WB_DataBus_Write_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_databus_write_i_reg_n_0),
        .Q(wb_databus_write),
        .R(reset_bool_for_rst));
  FDRE WB_Delay_Slot_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_delay_slot_i_reg_n_0),
        .Q(wb_delay_slot),
        .R(reset_bool_for_rst));
  FDRE WB_Div_Zero_Overflow_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(WB_Div_Zero_Overflow_reg_6),
        .Q(wb_div_zero_overflow),
        .R(reset_bool_for_rst));
  FDRE WB_Doublet_Access_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_doublet_access_i_reg_n_0),
        .Q(wb_doublet_access),
        .R(reset_bool_for_rst));
  microblaze_microblaze_0_0_two_piperun_fd_139 WB_GPR_Dbg_Write_DFF
       (.Clk(Clk),
        .D(D_28),
        .\Using_FPGA.Native (flush_pipe_for_rst),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg));
  microblaze_microblaze_0_0_two_piperun_fd_140 WB_GPR_Write_DFF
       (.Clk(Clk),
        .D(D_7),
        .\EX_Op2[0]_i_20 (of_predecode),
        .Q(\wb_gpr_write_addr_reg[1]_0 [0]),
        .\Using_FPGA.Native (WB_GPR_Write_DFF_n_3),
        .\Using_FPGA.Native_0 (flush_pipe_for_rst),
        .\Using_FPGA.Native_1 (wb_msr_clear_ie),
        .trace_reg_write_i_reg(wb_exception_from_m3_reg_rep__0_0),
        .trace_reg_write_i_reg_0(wb_raw_valid_reg_n_0),
        .wb_gpr_wr(wb_gpr_wr),
        .wb_raw_valid_reg(WB_GPR_Write_DFF_n_2),
        .wb_reset(wb_reset),
        .wb_reset_reg(wb_reset_reg_0));
  FDRE WB_MSR_Clear_BIP_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_msr_clear_bip_i),
        .Q(wb_msr_clear_bip),
        .R(reset_bool_for_rst));
  FDRE WB_MSR_Set_IE_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_msr_set_ie_i),
        .Q(wb_msr_set_ie),
        .R(reset_bool_for_rst));
  LUT3 #(
    .INIT(8'h04)) 
    WB_PC_Valid_i_1
       (.I0(wb_exception_from_m3_reg_rep__0_0),
        .I1(m3_raw_valid_reg_0),
        .I2(m3_dead_valid_hold),
        .O(WB_PC_Valid_i_1_n_0));
  FDRE WB_PC_Valid_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(WB_PC_Valid_i_1_n_0),
        .Q(wb_pc_valid),
        .R(reset_bool_for_rst));
  FDRE WB_Read_Imm_Reg_1_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(wb_read_imm_reg),
        .Q(wb_read_imm_reg_1),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFEAAAA)) 
    active_wakeup_i_1
       (.I0(wb_exception_from_m3_reg_rep_0),
        .I1(Suspend),
        .I2(Sleep_Decode),
        .I3(Hibernate),
        .I4(wakeup_i[0]),
        .I5(wakeup_i[1]),
        .O(active_wakeup0));
  FDRE active_wakeup_reg
       (.C(Clk),
        .CE(1'b1),
        .D(active_wakeup0),
        .Q(active_wakeup),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[0]_i_2 
       (.I0(\bp0_branch_target_reg[0]_0 [31]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [29]),
        .O(\bp0_branch_target[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[10]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [21]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [19]),
        .O(\bp0_branch_target[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[11]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [20]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [18]),
        .O(\bp0_branch_target[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[12]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [19]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [17]),
        .O(\bp0_branch_target[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[13]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [18]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [16]),
        .O(\bp0_branch_target[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[14]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [17]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [15]),
        .O(\bp0_branch_target[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[15]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [16]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [14]),
        .O(\bp0_branch_target[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[16]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [15]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [13]),
        .O(\bp0_branch_target[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[17]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [14]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [12]),
        .O(\bp0_branch_target[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[18]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [13]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [11]),
        .O(\bp0_branch_target[18]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[19]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [12]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [10]),
        .O(\bp0_branch_target[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[1]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [30]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [28]),
        .O(\bp0_branch_target[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[20]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [11]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [9]),
        .O(\bp0_branch_target[20]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[21]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [10]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [8]),
        .O(\bp0_branch_target[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[22]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [9]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [7]),
        .O(\bp0_branch_target[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[23]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [8]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [6]),
        .O(\bp0_branch_target[23]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[24]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [7]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [5]),
        .O(\bp0_branch_target[24]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[25]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [6]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [4]),
        .O(\bp0_branch_target[25]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[26]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [5]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [3]),
        .O(\bp0_branch_target[26]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[27]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [4]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [2]),
        .O(\bp0_branch_target[27]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[28]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [3]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [1]),
        .O(\bp0_branch_target[28]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[29]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [2]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [0]),
        .O(\bp0_branch_target[29]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[2]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [29]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [27]),
        .O(\bp0_branch_target[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[30]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [1]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(ex_alu_result[1]),
        .O(\bp0_branch_target[30]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[31]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [0]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(ex_alu_result[0]),
        .O(\bp0_branch_target[31]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[3]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [28]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [26]),
        .O(\bp0_branch_target[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[4]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [27]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [25]),
        .O(\bp0_branch_target[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[5]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [26]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [24]),
        .O(\bp0_branch_target[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[6]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [25]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [23]),
        .O(\bp0_branch_target[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[7]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [24]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [22]),
        .O(\bp0_branch_target[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[8]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [23]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [21]),
        .O(\bp0_branch_target[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBFFF00008000)) 
    \bp0_branch_target[9]_i_1 
       (.I0(\bp0_branch_target_reg[0]_0 [22]),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[31]),
        .I5(\bp0_branch_target_reg[0]_1 [20]),
        .O(\bp0_branch_target[9]_i_1_n_0 ));
  FDRE \bp0_branch_target_reg[0] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[0]_i_2_n_0 ),
        .Q(bp0_branch_target[0]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[10] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[10]_i_1_n_0 ),
        .Q(bp0_branch_target[10]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[11] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[11]_i_1_n_0 ),
        .Q(bp0_branch_target[11]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[12] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[12]_i_1_n_0 ),
        .Q(bp0_branch_target[12]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[13] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[13]_i_1_n_0 ),
        .Q(bp0_branch_target[13]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[14] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[14]_i_1_n_0 ),
        .Q(bp0_branch_target[14]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[15] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[15]_i_1_n_0 ),
        .Q(bp0_branch_target[15]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[16] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[16]_i_1_n_0 ),
        .Q(bp0_branch_target[16]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[17] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[17]_i_1_n_0 ),
        .Q(bp0_branch_target[17]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[18] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[18]_i_1_n_0 ),
        .Q(bp0_branch_target[18]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[19] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[19]_i_1_n_0 ),
        .Q(bp0_branch_target[19]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[1] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[1]_i_1_n_0 ),
        .Q(bp0_branch_target[1]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[20] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[20]_i_1_n_0 ),
        .Q(bp0_branch_target[20]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[21] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[21]_i_1_n_0 ),
        .Q(bp0_branch_target[21]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[22] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[22]_i_1_n_0 ),
        .Q(bp0_branch_target[22]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[23] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[23]_i_1_n_0 ),
        .Q(bp0_branch_target[23]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[24] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[24]_i_1_n_0 ),
        .Q(bp0_branch_target[24]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[25] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[25]_i_1_n_0 ),
        .Q(bp0_branch_target[25]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[26] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[26]_i_1_n_0 ),
        .Q(bp0_branch_target[26]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[27] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[27]_i_1_n_0 ),
        .Q(bp0_branch_target[27]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[28] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[28]_i_1_n_0 ),
        .Q(bp0_branch_target[28]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[29] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[29]_i_1_n_0 ),
        .Q(bp0_branch_target[29]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[2] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[2]_i_1_n_0 ),
        .Q(bp0_branch_target[2]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[30] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[30]_i_1_n_0 ),
        .Q(bp0_branch_target[30]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[31] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[31]_i_1_n_0 ),
        .Q(bp0_branch_target[31]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[3] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[3]_i_1_n_0 ),
        .Q(bp0_branch_target[3]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[4] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[4]_i_1_n_0 ),
        .Q(bp0_branch_target[4]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[5] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[5]_i_1_n_0 ),
        .Q(bp0_branch_target[5]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[6] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[6]_i_1_n_0 ),
        .Q(bp0_branch_target[6]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[7] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[7]_i_1_n_0 ),
        .Q(bp0_branch_target[7]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[8] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[8]_i_1_n_0 ),
        .Q(bp0_branch_target[8]),
        .R(reset_bool_for_rst));
  FDRE \bp0_branch_target_reg[9] 
       (.C(Clk),
        .CE(Jump_Logic_I1_n_9),
        .D(\bp0_branch_target[9]_i_1_n_0 ),
        .Q(bp0_branch_target[9]),
        .R(reset_bool_for_rst));
  FDRE bp0_dead_fetch_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Kill_Fetch_MMU_Carry_n_3),
        .Q(bp0_dead_fetch_hold),
        .R(1'b0));
  FDRE bp0_jump_reg
       (.C(Clk),
        .CE(bp1_raw_valid_reg_1),
        .D(bp0_jump0),
        .Q(bp0_jump),
        .R(reset_bool_for_rst));
  FDRE bp0_keep_jump_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Jump_Logic_I1_n_10),
        .Q(bp0_keep_jump),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0101010101000101)) 
    bp0_raw_valid_i_1
       (.I0(bp0_raw_valid_reg_2),
        .I1(wb_halted),
        .I2(bp0_raw_valid_reg_1),
        .I3(ex_gpr_write_addr[4]),
        .I4(ex_mbar_decode),
        .I5(\Using_FPGA.Native_i_2__5_n_0 ),
        .O(bp0_raw_valid0));
  FDRE bp0_raw_valid_reg
       (.C(Clk),
        .CE(bp1_raw_valid_reg_1),
        .D(bp0_raw_valid0),
        .Q(bp0_raw_valid_reg_0),
        .R(reset_bool_for_rst));
  FDRE bp1_dead_fetch_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_BP0_FPGA.PR_BP0_And1_n_2 ),
        .Q(bp1_dead_fetch_hold_reg_0),
        .R(1'b0));
  FDRE bp1_raw_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(bp1_raw_valid_reg_2),
        .Q(bp1_raw_valid_reg_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \cnt_shifts_reg[1]_srl31_i_1 
       (.I0(wb_exception_from_m3_reg_rep_0),
        .I1(ex_start_div),
        .I2(EX_Op1_Zero),
        .O(wb_exception_from_m3_reg_rep_1));
  LUT5 #(
    .INIT(32'h00000080)) 
    ex_Interrupt_raw_i_1
       (.I0(ex_Interrupt_raw_i_2_n_0),
        .I1(\of_MSR_i_reg[22] [0]),
        .I2(Interrupt),
        .I3(of_msr),
        .I4(ex_Interrupt_raw_reg_0),
        .O(of_Interrupt));
  LUT6 #(
    .INIT(64'h55555555FFFF5557)) 
    ex_Interrupt_raw_i_2
       (.I0(ex_valid_keep),
        .I1(ex_MSR_clear_decode_reg_n_0),
        .I2(ex_MSR_set_decode_reg_n_0),
        .I3(ex_move_to_MSR_instr),
        .I4(M0_Load_Store_Access_DFF_n_1),
        .I5(ex_atomic_instruction_pair),
        .O(ex_Interrupt_raw_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT5 #(
    .INIT(32'hA8AAAAAA)) 
    ex_Interrupt_raw_i_3
       (.I0(\of_MSR_i_reg[22]_0 [1]),
        .I1(ex_dead_valid_hold),
        .I2(wb_exception_from_m3_reg_rep__0_0),
        .I3(ex_raw_valid_reg_n_0),
        .I4(ex_clear_msr_bip_instr),
        .O(of_msr));
  FDRE ex_Interrupt_raw_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_Interrupt),
        .Q(ex_Interrupt),
        .R(reset_bool_for_rst));
  FDRE ex_Is_BS_Instr_i_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_37),
        .Q(ex_sel_barrel_res),
        .R(reset_bool_for_rst));
  FDRE ex_MSR_clear_decode_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_MSR_clear_decode),
        .Q(ex_MSR_clear_decode_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE ex_MSR_set_decode_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_MSR_set_decode),
        .Q(ex_MSR_set_decode_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE ex_atomic_instruction_pair_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_atomic_instruction_pair0),
        .Q(ex_atomic_instruction_pair),
        .R(reset_bool_for_rst));
  FDRE ex_branch_with_delayslot_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_branch_with_delayslot0),
        .Q(ex_branch_with_delayslot),
        .R(reset_bool_for_rst));
  FDRE ex_byte_access_i_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_byte_access),
        .Q(ex_byte_access_i),
        .R(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    ex_clear_msr_bip_instr_i_1
       (.I0(of_clear_msr_bip_hold_reg_n_0),
        .I1(m0_rtid_instr_i_2_n_0),
        .I2(ex_gpr_write_addr[3]),
        .O(of_clear_msr_bip_hold0));
  FDRE ex_clear_msr_bip_instr_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_clear_msr_bip_hold0),
        .Q(ex_clear_msr_bip_instr),
        .R(flush_pipe_for_rst));
  FDRE ex_complete_in_later_stage_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_ex_complete_in_later_stage),
        .Q(ex_complete_in_later_stage),
        .R(reset_bool_for_rst));
  FDRE ex_databus_access_i_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(p_104_in),
        .Q(ex_databus_access_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE ex_databus_exclusive_i_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_databus_exclusive_i0),
        .Q(ex_databus_exclusive_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE ex_databus_read_i_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_databus_read_i0),
        .Q(m0_databus_read_i0),
        .R(reset_bool_for_rst));
  FDRE ex_databus_write_i_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_43),
        .Q(ex_databus_write_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE ex_dead_valid_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_EX_FPGA.PR_EX_And7_n_9 ),
        .Q(ex_dead_valid_hold),
        .R(1'b0));
  FDRE ex_delayslot_Instr_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_delayslot_Instr0),
        .Q(ex_delayslot_Instr),
        .R(reset_bool_for_rst));
  FDRE ex_doublet_access_i_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_doublet_access),
        .Q(ex_doublet_access_i),
        .R(reset_bool_for_rst));
  FDRE ex_first_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M0_Exception_From_DFF_n_9),
        .Q(ex_first_cycle),
        .R(1'b0));
  FDRE \ex_gpr_write_addr_reg[2] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[23]),
        .Q(ex_gpr_write_addr[2]),
        .R(reset_bool_for_rst));
  FDRE \ex_gpr_write_addr_reg[3] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[22]),
        .Q(ex_gpr_write_addr[3]),
        .R(reset_bool_for_rst));
  FDRE \ex_gpr_write_addr_reg[4] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[21]),
        .Q(ex_gpr_write_addr[4]),
        .R(reset_bool_for_rst));
  FDRE ex_hibernate_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_hibernate_i_reg_0),
        .Q(Hibernate),
        .R(1'b0));
  FDRE \ex_instr_reg[11] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[20]),
        .Q(\ex_instr_reg_n_0_[11] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[12] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[19]),
        .Q(\ex_instr_reg_n_0_[12] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[13] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[18]),
        .Q(\ex_instr_reg_n_0_[13] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[14] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[17]),
        .Q(\ex_instr_reg_n_0_[14] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[15] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[16]),
        .Q(\ex_instr_reg_n_0_[15] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[16] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[15]),
        .Q(\ex_instr_reg_n_0_[16] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[17] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[14]),
        .Q(\ex_instr_reg_n_0_[17] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[18] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[13]),
        .Q(\ex_instr_reg_n_0_[18] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[19] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[12]),
        .Q(\ex_instr_reg_n_0_[19] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[20] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[11]),
        .Q(\ex_instr_reg_n_0_[20] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[23] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[8]),
        .Q(\ex_instr_reg_n_0_[23] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[24] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[7]),
        .Q(\ex_instr_reg_n_0_[24] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[27] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[4]),
        .Q(\ex_instr_reg_n_0_[27] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[28] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[3]),
        .Q(\ex_instr_reg_n_0_[28] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[29] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[2]),
        .Q(\ex_instr_reg_n_0_[29] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[30] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[1]),
        .Q(\ex_instr_reg_n_0_[30] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[31] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[0]),
        .Q(\ex_instr_reg_n_0_[31] ),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[6] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[25]),
        .Q(\EX_Logic_Op_reg[0]_0 [1]),
        .R(reset_bool_for_rst));
  FDRE \ex_instr_reg[7] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(Q[24]),
        .Q(\EX_Logic_Op_reg[0]_0 [0]),
        .R(reset_bool_for_rst));
  FDRE ex_is_div_instr_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_is_div_instr_i_reg_1),
        .Q(ex_is_div_instr_i_reg_0),
        .R(1'b0));
  FDRE ex_jump_nodelay_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_jump_nodelay0),
        .Q(ex_jump_nodelay),
        .R(1'b0));
  FDRE ex_load_alu_carry_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_load_alu_carry2_out),
        .Q(ex_load_alu_carry_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE ex_load_shift_carry_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_load_shift_carry0),
        .Q(ex_load_shift_carry),
        .R(reset_bool_for_rst));
  FDRE ex_m0_complete_in_later_stage_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_m0_complete_in_later_stage),
        .Q(ex_m0_complete_in_later_stage),
        .R(reset_bool_for_rst));
  FDRE ex_m1_complete_in_later_stage_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_m1_complete_in_later_stage),
        .Q(ex_m2_complete_in_later_stage),
        .R(reset_bool_for_rst));
  FDRE ex_m3_complete_in_later_stage_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_42),
        .Q(ex_m3_complete_in_later_stage),
        .R(reset_bool_for_rst));
  FDRE ex_mbar_decode_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_mbar_decode_reg_0),
        .Q(ex_mbar_decode),
        .R(1'b0));
  FDRE ex_mbar_is_sleep_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_mbar_is_sleep0),
        .Q(ex_mbar_is_sleep),
        .R(reset_bool_for_rst));
  LUT6 #(
    .INIT(64'h00000000BAAAAAAA)) 
    ex_mbar_sleep_i_1
       (.I0(ex_mbar_sleep),
        .I1(\Using_FPGA.Native_i_2__5_n_0 ),
        .I2(ex_mbar_decode),
        .I3(ex_mbar_is_sleep),
        .I4(ex_first_cycle),
        .I5(ex_mbar_sleep_i_2_n_0),
        .O(ex_mbar_sleep_i_1_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    ex_mbar_sleep_i_2
       (.I0(reset_bool_for_rst),
        .I1(active_wakeup),
        .O(ex_mbar_sleep_i_2_n_0));
  FDRE ex_mbar_sleep_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_mbar_sleep_i_1_n_0),
        .Q(ex_mbar_sleep),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h1F1F1F111F1F1F1F)) 
    ex_mbar_wait_1_i_1
       (.I0(Pause_Ack_i_2_n_0),
        .I1(ex_gpr_write_addr[3]),
        .I2(ex_gpr_write_addr[4]),
        .I3(bp1_raw_valid_reg_0),
        .I4(bp0_raw_valid_reg_0),
        .I5(ex_mbar_wait_1_i_2_n_0),
        .O(ex_mbar_wait_10));
  LUT4 #(
    .INIT(16'h0001)) 
    ex_mbar_wait_1_i_2
       (.I0(if0_raw_valid),
        .I1(S_0),
        .I2(if4_raw_valid_reg_0),
        .I3(if3_raw_valid_reg_0),
        .O(ex_mbar_wait_1_i_2_n_0));
  FDRE ex_mbar_wait_1_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_mbar_wait_10),
        .Q(ex_mbar_wait_1),
        .R(reset_bool_for_rst));
  FDRE ex_move_to_MSR_instr_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_move_to_MSR_instr35_out),
        .Q(ex_move_to_MSR_instr),
        .R(reset_bool_for_rst));
  FDRE \ex_opcode_reg[0] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[0]),
        .Q(ex_opcode[0]),
        .R(reset_bool_for_rst));
  FDRE \ex_opcode_reg[1] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[1]),
        .Q(ex_opcode[1]),
        .R(reset_bool_for_rst));
  FDRE \ex_opcode_reg[2] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[2]),
        .Q(ex_opcode[2]),
        .R(reset_bool_for_rst));
  FDRE \ex_opcode_reg[3] 
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_instr[3]),
        .Q(ex_opcode[3]),
        .R(reset_bool_for_rst));
  FDRE ex_raw_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M0_Exception_From_DFF_n_3),
        .Q(ex_raw_valid_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000AAAA2AAA)) 
    ex_read_imm_reg_i_1
       (.I0(of_read_imm_reg_raw),
        .I1(wb_exception_raw_kind[31]),
        .I2(wb_abort_div),
        .I3(wb_exception_raw_kind[28]),
        .I4(wb_exception_raw_kind[30]),
        .I5(\wb_PC_i_reg[31] ),
        .O(of_read_imm_reg));
  FDRE ex_read_imm_reg_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_read_imm_reg),
        .Q(ex_read_imm_reg),
        .R(reset_bool_for_rst));
  FDRE ex_reservation_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_EX_FPGA.PR_EX_And7_n_8 ),
        .Q(ex_reservation),
        .R(1'b0));
  FDSE ex_sel_alu_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_44),
        .Q(ex_sel_alu_res),
        .S(reset_bool_for_rst));
  FDRE ex_set_bip_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_set_bip),
        .Q(ex_set_bip_reg_n_0),
        .R(reset_bool_for_rst));
  LUT3 #(
    .INIT(8'hBA)) 
    ex_set_msr_ee_instr_i_1
       (.I0(of_set_msr_ee_hold_reg_n_0),
        .I1(m0_rtid_instr_i_2_n_0),
        .I2(ex_gpr_write_addr[2]),
        .O(of_set_msr_ee_hold0));
  FDRE ex_set_msr_ee_instr_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_set_msr_ee_hold0),
        .Q(ex_set_msr_ee_instr),
        .R(flush_pipe_for_rst));
  LUT2 #(
    .INIT(4'hE)) 
    ex_set_msr_ie_instr_i_1
       (.I0(of_set_msr_ie_hold_reg_n_0),
        .I1(of_set_msr_ie),
        .O(of_set_msr_ie_hold0));
  FDRE ex_set_msr_ie_instr_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_set_msr_ie_hold0),
        .Q(ex_set_msr_ie_instr),
        .R(flush_pipe_for_rst));
  FDRE ex_sleep_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_sleep_i_reg_0),
        .Q(Sleep_Decode),
        .R(1'b0));
  FDRE ex_start_div_raw_reg
       (.C(Clk),
        .CE(1'b1),
        .D(PREFETCH_BUFFER_I1_n_101),
        .Q(ex_start_div_raw),
        .R(1'b0));
  FDRE ex_suspend_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(ex_suspend_i_reg_0),
        .Q(Suspend),
        .R(1'b0));
  FDRE ex_valid_keep_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(of_next_ex_valid),
        .Q(ex_valid_keep),
        .R(flush_pipe_for_rst));
  FDRE if0_pause_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Pause),
        .Q(if0_pause),
        .R(reset_bool_for_rst));
  FDRE if0_raw_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(if0_raw_valid_reg_0),
        .Q(if0_raw_valid),
        .R(reset_bool_for_rst));
  FDRE if2_dead_fetch_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_IF1_Insert_FPGA_No_MMU.PR_IF1_Ins_Or1_n_1 ),
        .Q(if2_dead_fetch_hold_reg_n_0),
        .R(1'b0));
  FDRE if2_ibus_access_raw_reg
       (.C(Clk),
        .CE(1'b1),
        .D(if2_ibus_access_raw_reg_0),
        .Q(D[46]),
        .R(1'b0));
  FDRE if2_ibus_first_cycle_raw_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Kill_Fetch_MMU_Carry_n_1),
        .Q(D[45]),
        .R(1'b0));
  FDRE if2_raw_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(if2_raw_valid_reg_1),
        .Q(S_0),
        .R(1'b0));
  FDRE if3_dead_fetch_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_IF2_FPGA.PR_IF2_And2_n_3 ),
        .Q(if3_dead_fetch_hold_reg_n_0),
        .R(1'b0));
  FDRE if3_ibus_access_i_reg
       (.C(Clk),
        .CE(if2_piperun),
        .D(D[46]),
        .Q(if3_ibus_access_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE if3_raw_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(if3_raw_valid_reg_1),
        .Q(if3_raw_valid_reg_0),
        .R(1'b0));
  FDRE if4_dead_fetch_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_IF3_FPGA.PR_IF3_And3_n_3 ),
        .Q(if4_dead_fetch_hold_reg_n_0),
        .R(1'b0));
  FDRE if4_ibus_access_i_reg
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_ibus_access_i_reg_n_0),
        .Q(if4_ibus_access_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE if4_raw_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(if4_raw_valid_reg_1),
        .Q(if4_raw_valid_reg_0),
        .R(1'b0));
  FDRE keep_jump_taken_with_ds_reg
       (.C(Clk),
        .CE(1'b1),
        .D(Jump_Logic_I1_n_8),
        .Q(keep_jump_taken_with_ds),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFF000044404440)) 
    \m0_Ex_Result_i[0]_i_1 
       (.I0(\m0_Ex_Result_i[0]_i_2_n_0 ),
        .I1(ex_enable_sext_shift),
        .I2(out),
        .I3(\EX_Sext_Op_reg[0]_0 [1]),
        .I4(\bp0_branch_target_reg[0]_1 [29]),
        .I5(ex_sel_alu_res),
        .O(EX_Enable_Sext_Shift_reg_2[16]));
  LUT6 #(
    .INIT(64'hA202A2A2A222A222)) 
    \m0_Ex_Result_i[0]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [31]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(ex_shift_op[0]),
        .I4(EX_CarryIn),
        .I5(ex_shift_op[1]),
        .O(\m0_Ex_Result_i[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[10]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[10]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [19]),
        .O(EX_Enable_Sext_Shift_reg_2[6]));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[10]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [21]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [22]),
        .O(\m0_Ex_Result_i[10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[11]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[11]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [18]),
        .O(EX_Enable_Sext_Shift_reg_2[5]));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[11]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [20]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [21]),
        .O(\m0_Ex_Result_i[11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[12]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[12]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [17]),
        .O(EX_Enable_Sext_Shift_reg_2[4]));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[12]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [19]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [20]),
        .O(\m0_Ex_Result_i[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[13]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[13]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [16]),
        .O(EX_Enable_Sext_Shift_reg_2[3]));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[13]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [18]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [19]),
        .O(\m0_Ex_Result_i[13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[14]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[14]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [15]),
        .O(EX_Enable_Sext_Shift_reg_2[2]));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[14]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [17]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [18]),
        .O(\m0_Ex_Result_i[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[15]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[15]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [14]),
        .O(EX_Enable_Sext_Shift_reg_2[1]));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[15]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [16]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [17]),
        .O(\m0_Ex_Result_i[15]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[1]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[1]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [28]),
        .O(EX_Enable_Sext_Shift_reg_2[15]));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[1]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [30]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [31]),
        .O(\m0_Ex_Result_i[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m0_Ex_Result_i[24]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [0]),
        .I1(\EX_Sext_Op_reg[0]_0 [1]),
        .O(\EX_Sext_Op_reg[1]_0 ));
  LUT6 #(
    .INIT(64'hAEAAAEAEAEAAAAAA)) 
    \m0_Ex_Result_i[26]_i_3 
       (.I0(ex_sel_alu_res),
        .I1(ex_enable_sext_shift),
        .I2(ex_clz_instr),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [6]),
        .I4(\EX_Sext_Op_reg[1]_0 ),
        .I5(\Use_HW_BS.mem_mux3_reg[28] [5]),
        .O(ex_sel_alu_reg_1));
  LUT6 #(
    .INIT(64'h00000000FF1FFFDF)) 
    \m0_Ex_Result_i[27]_i_3 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [4]),
        .I1(\EX_Sext_Op_reg[1]_0 ),
        .I2(ex_enable_sext_shift),
        .I3(ex_clz_instr),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [5]),
        .I5(ex_sel_alu_res),
        .O(\EX_Op1_reg[27] ));
  LUT6 #(
    .INIT(64'h0000EA2A00000000)) 
    \m0_Ex_Result_i[28]_i_2 
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [3]),
        .I1(\EX_Sext_Op_reg[0]_0 [1]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [4]),
        .I4(ex_clz_instr),
        .I5(ex_enable_sext_shift),
        .O(\EX_Op1_reg[28] ));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT5 #(
    .INIT(32'h5777F777)) 
    \m0_Ex_Result_i[29]_i_9 
       (.I0(ex_enable_sext_shift),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [2]),
        .I2(\EX_Sext_Op_reg[0]_0 [1]),
        .I3(\EX_Sext_Op_reg[0]_0 [0]),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [3]),
        .O(EX_Enable_Sext_Shift_reg_0));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[2]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[2]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [27]),
        .O(EX_Enable_Sext_Shift_reg_2[14]));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[2]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [29]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [30]),
        .O(\m0_Ex_Result_i[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT5 #(
    .INIT(32'hAB00ABAB)) 
    \m0_Ex_Result_i[30]_i_1 
       (.I0(\m0_Ex_Result_i[30]_i_2_n_0 ),
        .I1(ex_pattern_cmp_sel),
        .I2(\m0_Ex_Result_i_reg[30] ),
        .I3(ex_alu_result[1]),
        .I4(ex_sel_alu_res),
        .O(EX_Enable_Sext_Shift_reg_2[0]));
  LUT6 #(
    .INIT(64'hAAAAAABAAABAAABA)) 
    \m0_Ex_Result_i[30]_i_2 
       (.I0(ex_sel_alu_res),
        .I1(\m0_Ex_Result_i_reg[30]_0 ),
        .I2(ex_pattern_cmp_sel),
        .I3(\EX_Logic_Op_reg[0]_0 [3]),
        .I4(\m0_Ex_Result_i_reg[30]_1 ),
        .I5(\m0_Ex_Result_i_reg[30]_2 ),
        .O(\m0_Ex_Result_i[30]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h5777F777)) 
    \m0_Ex_Result_i[30]_i_7 
       (.I0(ex_enable_sext_shift),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [1]),
        .I2(\EX_Sext_Op_reg[0]_0 [1]),
        .I3(\EX_Sext_Op_reg[0]_0 [0]),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [2]),
        .O(EX_Enable_Sext_Shift_reg_1));
  LUT6 #(
    .INIT(64'hAEAAAEAEAEAAAAAA)) 
    \m0_Ex_Result_i[31]_i_4 
       (.I0(ex_pattern_cmp_sel),
        .I1(ex_enable_sext_shift),
        .I2(ex_clz_instr),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [1]),
        .I4(\EX_Sext_Op_reg[1]_0 ),
        .I5(\Use_HW_BS.mem_mux3_reg[28] [0]),
        .O(EX_Pattern_Cmp_Sel_reg_0));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[3]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[3]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [26]),
        .O(EX_Enable_Sext_Shift_reg_2[13]));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[3]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [28]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [29]),
        .O(\m0_Ex_Result_i[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[4]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[4]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [25]),
        .O(EX_Enable_Sext_Shift_reg_2[12]));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[4]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [27]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [28]),
        .O(\m0_Ex_Result_i[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[5]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[5]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [24]),
        .O(EX_Enable_Sext_Shift_reg_2[11]));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[5]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [26]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [27]),
        .O(\m0_Ex_Result_i[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[6]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[6]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [23]),
        .O(EX_Enable_Sext_Shift_reg_2[10]));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[6]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [25]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [26]),
        .O(\m0_Ex_Result_i[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[7]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[7]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [22]),
        .O(EX_Enable_Sext_Shift_reg_2[9]));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[7]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [24]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [25]),
        .O(\m0_Ex_Result_i[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[8]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[8]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [21]),
        .O(EX_Enable_Sext_Shift_reg_2[8]));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[8]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [23]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [24]),
        .O(\m0_Ex_Result_i[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFF00FFE0000000E0)) 
    \m0_Ex_Result_i[9]_i_1 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(out),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .I4(\m0_Ex_Result_i[9]_i_2_n_0 ),
        .I5(\bp0_branch_target_reg[0]_1 [20]),
        .O(EX_Enable_Sext_Shift_reg_2[7]));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \m0_Ex_Result_i[9]_i_2 
       (.I0(\EX_Sext_Op_reg[0]_0 [1]),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [22]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [23]),
        .O(\m0_Ex_Result_i[9]_i_2_n_0 ));
  FDRE m0_byte_access_i_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_byte_access_i),
        .Q(m0_byte_access_i),
        .R(reset_bool_for_rst));
  FDRE m0_complete_in_later_stage_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_m0_complete_in_later_stage),
        .Q(m0_complete_in_later_stage),
        .R(reset_bool_for_rst));
  FDRE m0_databus_read_i_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(m0_databus_read_i0),
        .Q(m0_databus_read_i_reg_n_0),
        .R(reset_bool_for_rst));
  LUT4 #(
    .INIT(16'hAA8A)) 
    m0_databus_write_i_i_1
       (.I0(ex_databus_write_i_reg_n_0),
        .I1(ex_reservation),
        .I2(ex_databus_exclusive_i_reg_n_0),
        .I3(m0_databus_read_i0),
        .O(m0_databus_write_i0));
  FDRE m0_databus_write_i_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(m0_databus_write_i0),
        .Q(m0_databus_write_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE m0_dead_valid_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_M0_FPGA.PR_M0_And5_n_2 ),
        .Q(m0_dead_valid_hold),
        .R(1'b0));
  FDRE m0_delay_slot_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_delayslot_Instr),
        .Q(m0_delay_slot),
        .R(reset_bool_for_rst));
  FDRE m0_doublet_access_i_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_doublet_access_i),
        .Q(m0_doublet_access_i),
        .R(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT5 #(
    .INIT(32'hABAAAAAA)) 
    \m0_exception_raw_kind[28]_i_1 
       (.I0(\m0_exception_raw_kind_reg[31]_0 ),
        .I1(ex_dead_valid_hold),
        .I2(wb_exception_from_m3_reg_rep__0_0),
        .I3(ex_raw_valid_reg_n_0),
        .I4(ex_Interrupt),
        .O(ex_exception_kind));
  FDRE \m0_exception_raw_kind_reg[28] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_exception_kind),
        .Q(m0_exception_raw_kind[28]),
        .R(reset_bool_for_rst));
  FDRE \m0_exception_raw_kind_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_EX_FPGA.PR_EX_And7_n_2 ),
        .Q(m0_exception_raw_kind[30]),
        .R(1'b0));
  FDRE \m0_exception_raw_kind_reg[31] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\m0_exception_raw_kind_reg[31]_0 ),
        .Q(m0_exception_raw_kind[31]),
        .R(reset_bool_for_rst));
  FDRE \m0_gpr_write_addr_reg[0] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\EX_Logic_Op_reg[0]_0 [1]),
        .Q(m0_gpr_write_addr[0]),
        .R(flush_pipe_for_rst));
  FDRE \m0_gpr_write_addr_reg[1] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\EX_Logic_Op_reg[0]_0 [0]),
        .Q(m0_gpr_write_addr[1]),
        .R(flush_pipe_for_rst));
  FDRE \m0_gpr_write_addr_reg[2] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_gpr_write_addr[2]),
        .Q(m0_gpr_write_addr[2]),
        .R(flush_pipe_for_rst));
  FDRE \m0_gpr_write_addr_reg[3] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_gpr_write_addr[3]),
        .Q(m0_gpr_write_addr[3]),
        .R(flush_pipe_for_rst));
  FDRE \m0_gpr_write_addr_reg[4] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_gpr_write_addr[4]),
        .Q(m0_gpr_write_addr[4]),
        .R(flush_pipe_for_rst));
  FDRE \m0_instr_reg[0] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_opcode[0]),
        .Q(m0_instr[0]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[10] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_gpr_write_addr[4]),
        .Q(m0_instr[10]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[11] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[11] ),
        .Q(m0_instr[11]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[12] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[12] ),
        .Q(m0_instr[12]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[13] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[13] ),
        .Q(m0_instr[13]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[14] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[14] ),
        .Q(m0_instr[14]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[15] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[15] ),
        .Q(m0_instr[15]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[16] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[16] ),
        .Q(m0_instr[16]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[17] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[17] ),
        .Q(m0_instr[17]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[18] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[18] ),
        .Q(m0_instr[18]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[19] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[19] ),
        .Q(m0_instr[19]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[1] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_opcode[1]),
        .Q(m0_instr[1]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[20] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[20] ),
        .Q(m0_instr[20]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[21] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_left_shift),
        .Q(m0_instr[21]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[22] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_arith_shift),
        .Q(m0_instr[22]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[23] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[23] ),
        .Q(m0_instr[23]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[24] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[24] ),
        .Q(m0_instr[24]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[25] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_shift_op[0]),
        .Q(m0_instr[25]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[26] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_shift_op[1]),
        .Q(m0_instr[26]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[27] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[27] ),
        .Q(m0_instr[27]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[28] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[28] ),
        .Q(m0_instr[28]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[29] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[29] ),
        .Q(m0_instr[29]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[2] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_opcode[2]),
        .Q(m0_instr[2]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[30] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[30] ),
        .Q(m0_instr[30]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[31] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\ex_instr_reg_n_0_[31] ),
        .Q(m0_instr[31]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[3] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_opcode[3]),
        .Q(m0_instr[3]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[4] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\EX_Logic_Op_reg[0]_0 [3]),
        .Q(m0_instr[4]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[5] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\EX_Logic_Op_reg[0]_0 [2]),
        .Q(m0_instr[5]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[6] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\EX_Logic_Op_reg[0]_0 [1]),
        .Q(m0_instr[6]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[7] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\EX_Logic_Op_reg[0]_0 [0]),
        .Q(m0_instr[7]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[8] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_gpr_write_addr[2]),
        .Q(m0_instr[8]),
        .R(reset_bool_for_rst));
  FDRE \m0_instr_reg[9] 
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_gpr_write_addr[3]),
        .Q(m0_instr[9]),
        .R(reset_bool_for_rst));
  FDRE m0_is_bs_instr_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_sel_barrel_res),
        .Q(m0_sel_barrel_res),
        .R(reset_bool_for_rst));
  FDRE m0_m1_complete_in_later_stage_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_m2_complete_in_later_stage),
        .Q(m0_m2_complete_in_later_stage),
        .R(reset_bool_for_rst));
  FDRE m0_m3_complete_in_later_stage_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_m3_complete_in_later_stage),
        .Q(m0_m3_complete_in_later_stage),
        .R(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    m0_msr_clear_bip_i_i_1
       (.I0(ex_clear_msr_bip_instr),
        .I1(ex_raw_valid_reg_n_0),
        .I2(wb_exception_from_m3_reg_rep__0_0),
        .I3(ex_dead_valid_hold),
        .O(ex_msr_clear_bip));
  FDRE m0_msr_clear_bip_i_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_msr_clear_bip),
        .Q(m0_msr_clear_bip_i),
        .R(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    m0_msr_set_ie_i_i_1
       (.I0(ex_set_msr_ie_instr),
        .I1(ex_raw_valid_reg_n_0),
        .I2(wb_exception_from_m3_reg_rep__0_0),
        .I3(ex_dead_valid_hold),
        .O(ex_msr_set_ie));
  FDRE m0_msr_set_ie_i_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_msr_set_ie),
        .Q(m0_msr_set_ie_i),
        .R(reset_bool_for_rst));
  FDSE m0_not_mul_op_i_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(\Using_Mul_Instr.ex_not_mul_op_i_reg_0 ),
        .Q(m0_not_mul_op_i_reg_0),
        .S(reset_bool_for_rst));
  FDRE m0_raw_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_M0_FPGA.PR_M0_And5_n_1 ),
        .Q(m0_raw_valid_reg_n_0),
        .R(1'b0));
  FDRE m0_read_imm_reg_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(ex_read_imm_reg),
        .Q(m0_read_imm_reg),
        .R(reset_bool_for_rst));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT2 #(
    .INIT(4'h2)) 
    m0_rtid_instr_i_1
       (.I0(ex_gpr_write_addr[4]),
        .I1(m0_rtid_instr_i_2_n_0),
        .O(of_set_msr_ie));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFEFFFFF)) 
    m0_rtid_instr_i_2
       (.I0(\Using_FPGA.Native_i_2__5_n_0 ),
        .I1(m0_rtid_instr_i_3_n_0),
        .I2(ex_opcode[3]),
        .I3(ex_opcode[1]),
        .I4(ex_opcode[0]),
        .I5(\EX_Logic_Op_reg[0]_0 [3]),
        .O(m0_rtid_instr_i_2_n_0));
  LUT4 #(
    .INIT(16'hEFFF)) 
    m0_rtid_instr_i_3
       (.I0(ex_Interrupt),
        .I1(\m0_exception_raw_kind_reg[31]_0 ),
        .I2(ex_opcode[2]),
        .I3(\EX_Logic_Op_reg[0]_0 [2]),
        .O(m0_rtid_instr_i_3_n_0));
  FDRE m0_rtid_instr_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(of_set_msr_ie),
        .Q(m0_rtid_instr),
        .R(1'b0));
  FDRE m1_byte_access_i_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_byte_access_i),
        .Q(m1_byte_access),
        .R(reset_bool_for_rst));
  FDRE m1_complete_in_later_stage_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_m2_complete_in_later_stage),
        .Q(m1_m2_complete_in_later_stage),
        .R(reset_bool_for_rst));
  FDRE m1_databus_access_from_m0_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m1_databus_access_from_m00),
        .Q(m1_databus_access),
        .R(reset_bool_for_rst));
  FDRE m1_databus_addr_from_m0_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M0_Exception_From_DFF_n_11),
        .Q(D[2]),
        .R(1'b0));
  FDRE m1_databus_read_from_m0_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_databus_read_i_reg_n_0),
        .Q(D[1]),
        .R(reset_bool_for_rst));
  FDRE m1_databus_write_from_m0_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_databus_write_i_reg_n_0),
        .Q(D[0]),
        .R(reset_bool_for_rst));
  FDRE m1_dead_valid_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_M1_FPGA.PR_M1_And3_n_8 ),
        .Q(m1_dead_valid_hold),
        .R(1'b0));
  FDRE m1_delay_slot_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_delay_slot),
        .Q(m1_delay_slot),
        .R(reset_bool_for_rst));
  FDRE m1_doublet_access_i_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_doublet_access_i),
        .Q(m1_doublet_access),
        .R(reset_bool_for_rst));
  FDRE \m1_exception_raw_kind_reg[28] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_exception_kind[28]),
        .Q(m1_exception_raw_kind[28]),
        .R(reset_bool_for_rst));
  FDRE \m1_exception_raw_kind_reg[30] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_exception_kind[30]),
        .Q(m1_exception_raw_kind[30]),
        .R(reset_bool_for_rst));
  FDRE \m1_exception_raw_kind_reg[31] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_exception_kind[31]),
        .Q(m1_exception_raw_kind[31]),
        .R(reset_bool_for_rst));
  FDRE \m1_gpr_write_addr_reg[0] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_gpr_write_addr[0]),
        .Q(m1_gpr_write_addr[0]),
        .R(flush_pipe_for_rst));
  FDRE \m1_gpr_write_addr_reg[1] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_gpr_write_addr[1]),
        .Q(m1_gpr_write_addr[1]),
        .R(flush_pipe_for_rst));
  FDRE \m1_gpr_write_addr_reg[2] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_gpr_write_addr[2]),
        .Q(m1_gpr_write_addr[2]),
        .R(flush_pipe_for_rst));
  FDRE \m1_gpr_write_addr_reg[3] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_gpr_write_addr[3]),
        .Q(m1_gpr_write_addr[3]),
        .R(flush_pipe_for_rst));
  FDRE \m1_gpr_write_addr_reg[4] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_gpr_write_addr[4]),
        .Q(m1_gpr_write_addr[4]),
        .R(flush_pipe_for_rst));
  FDRE \m1_instr_reg[0] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[0]),
        .Q(m1_instr[0]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[10] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[10]),
        .Q(m1_instr[10]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[11] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[11]),
        .Q(m1_instr[11]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[12] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[12]),
        .Q(m1_instr[12]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[13] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[13]),
        .Q(m1_instr[13]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[14] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[14]),
        .Q(m1_instr[14]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[15] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[15]),
        .Q(m1_instr[15]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[16] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[16]),
        .Q(m1_instr[16]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[17] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[17]),
        .Q(m1_instr[17]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[18] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[18]),
        .Q(m1_instr[18]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[19] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[19]),
        .Q(m1_instr[19]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[1] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[1]),
        .Q(m1_instr[1]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[20] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[20]),
        .Q(m1_instr[20]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[21] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[21]),
        .Q(m1_instr[21]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[22] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[22]),
        .Q(m1_instr[22]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[23] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[23]),
        .Q(m1_instr[23]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[24] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[24]),
        .Q(m1_instr[24]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[25] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[25]),
        .Q(m1_instr[25]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[26] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[26]),
        .Q(m1_instr[26]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[27] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[27]),
        .Q(m1_instr[27]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[28] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[28]),
        .Q(m1_instr[28]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[29] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[29]),
        .Q(m1_instr[29]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[2] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[2]),
        .Q(m1_instr[2]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[30] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[30]),
        .Q(m1_instr[30]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[31] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[31]),
        .Q(m1_instr[31]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[3] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[3]),
        .Q(m1_instr[3]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[4] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[4]),
        .Q(m1_instr[4]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[5] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[5]),
        .Q(m1_instr[5]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[6] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[6]),
        .Q(m1_instr[6]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[7] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[7]),
        .Q(m1_instr[7]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[8] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[8]),
        .Q(m1_instr[8]),
        .R(reset_bool_for_rst));
  FDRE \m1_instr_reg[9] 
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_instr[9]),
        .Q(m1_instr[9]),
        .R(reset_bool_for_rst));
  FDRE m1_jump_taken_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_jump_taken),
        .Q(m1_jump_taken),
        .R(reset_bool_for_rst));
  LUT3 #(
    .INIT(8'h0E)) 
    m1_m0_sel_res_i_1
       (.I0(m0_sel_barrel_res),
        .I1(m0_ex_sel_res),
        .I2(m0_sel_mul_res),
        .O(m1_m0_sel_res0));
  FDRE m1_m3_complete_in_later_stage_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_m3_complete_in_later_stage),
        .Q(m1_m3_complete_in_later_stage),
        .R(reset_bool_for_rst));
  FDRE m1_msr_clear_bip_i_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_msr_clear_bip_i),
        .Q(m1_msr_clear_bip_i),
        .R(reset_bool_for_rst));
  FDRE m1_msr_set_ie_i_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_msr_set_ie_i),
        .Q(m1_msr_set_ie_i),
        .R(reset_bool_for_rst));
  FDRE m1_raw_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_M1_FPGA.PR_M1_And3_n_7 ),
        .Q(m1_raw_valid_reg_n_0),
        .R(1'b0));
  FDRE m1_read_imm_reg_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_read_imm_reg),
        .Q(m1_read_imm_reg),
        .R(reset_bool_for_rst));
  FDRE m1_rtid_instr_reg
       (.C(Clk),
        .CE(m0_PipeRun_for_ce),
        .D(m0_rtid_instr),
        .Q(m1_rtid_instr),
        .R(1'b0));
  FDRE m2_byte_access_i_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_byte_access),
        .Q(m2_byte_access_i),
        .R(reset_bool_for_rst));
  FDRE m2_complete_in_later_stage_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_m2_complete_in_later_stage),
        .Q(m2_complete_in_later_stage),
        .R(reset_bool_for_rst));
  FDRE m2_databus_access_i_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m2_databus_access_i0),
        .Q(m2_databus_access_i_reg_0),
        .R(reset_bool_for_rst));
  FDRE m2_databus_read_i_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(D[1]),
        .Q(m2_databus_read_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE m2_databus_write_i_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(D[0]),
        .Q(m2_databus_write),
        .R(reset_bool_for_rst));
  FDRE m2_dead_valid_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_M2_FPGA.PR_M2_And6_n_6 ),
        .Q(m2_dead_valid_hold),
        .R(1'b0));
  FDRE m2_delay_slot_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_delay_slot),
        .Q(m2_delay_slot),
        .R(reset_bool_for_rst));
  FDRE m2_doublet_access_i_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_doublet_access),
        .Q(m2_doublet_access_i),
        .R(reset_bool_for_rst));
  FDRE \m2_exception_raw_kind_reg[28] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_exception_kind[28]),
        .Q(m2_exception_raw_kind[28]),
        .R(reset_bool_for_rst));
  FDRE \m2_exception_raw_kind_reg[30] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_exception_kind[30]),
        .Q(m2_exception_raw_kind[30]),
        .R(reset_bool_for_rst));
  FDRE \m2_exception_raw_kind_reg[31] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_exception_kind[31]),
        .Q(m2_exception_raw_kind[31]),
        .R(reset_bool_for_rst));
  FDRE \m2_gpr_write_addr_reg[0] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_gpr_write_addr[0]),
        .Q(m2_gpr_write_addr[0]),
        .R(flush_pipe_for_rst));
  FDRE \m2_gpr_write_addr_reg[1] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_gpr_write_addr[1]),
        .Q(m2_gpr_write_addr[1]),
        .R(flush_pipe_for_rst));
  FDRE \m2_gpr_write_addr_reg[2] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_gpr_write_addr[2]),
        .Q(m2_gpr_write_addr[2]),
        .R(flush_pipe_for_rst));
  FDRE \m2_gpr_write_addr_reg[3] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_gpr_write_addr[3]),
        .Q(m2_gpr_write_addr[3]),
        .R(flush_pipe_for_rst));
  FDRE \m2_gpr_write_addr_reg[4] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_gpr_write_addr[4]),
        .Q(m2_gpr_write_addr[4]),
        .R(flush_pipe_for_rst));
  FDRE \m2_instr_reg[0] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[0]),
        .Q(m2_instr[0]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[10] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[10]),
        .Q(m2_instr[10]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[11] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[11]),
        .Q(m2_instr[11]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[12] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[12]),
        .Q(m2_instr[12]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[13] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[13]),
        .Q(m2_instr[13]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[14] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[14]),
        .Q(m2_instr[14]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[15] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[15]),
        .Q(m2_instr[15]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[16] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[16]),
        .Q(m2_instr[16]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[17] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[17]),
        .Q(m2_instr[17]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[18] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[18]),
        .Q(m2_instr[18]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[19] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[19]),
        .Q(m2_instr[19]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[1] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[1]),
        .Q(m2_instr[1]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[20] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[20]),
        .Q(m2_instr[20]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[21] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[21]),
        .Q(m2_instr[21]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[22] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[22]),
        .Q(m2_instr[22]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[23] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[23]),
        .Q(m2_instr[23]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[24] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[24]),
        .Q(m2_instr[24]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[25] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[25]),
        .Q(m2_instr[25]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[26] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[26]),
        .Q(m2_instr[26]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[27] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[27]),
        .Q(m2_instr[27]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[28] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[28]),
        .Q(m2_instr[28]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[29] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[29]),
        .Q(m2_instr[29]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[2] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[2]),
        .Q(m2_instr[2]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[30] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[30]),
        .Q(m2_instr[30]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[31] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[31]),
        .Q(m2_instr[31]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[3] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[3]),
        .Q(m2_instr[3]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[4] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[4]),
        .Q(m2_instr[4]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[5] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[5]),
        .Q(m2_instr[5]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[6] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[6]),
        .Q(m2_instr[6]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[7] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[7]),
        .Q(m2_instr[7]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[8] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[8]),
        .Q(m2_instr[8]),
        .R(reset_bool_for_rst));
  FDRE \m2_instr_reg[9] 
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_instr[9]),
        .Q(m2_instr[9]),
        .R(reset_bool_for_rst));
  FDRE m2_jump_taken_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_jump_taken),
        .Q(m2_jump_taken),
        .R(reset_bool_for_rst));
  LUT2 #(
    .INIT(4'hE)) 
    m2_m1_sel_res_i_1
       (.I0(m1_sel_mul_res),
        .I1(m1_m0_sel_res),
        .O(m2_m1_sel_res0));
  FDRE m2_m3_complete_in_later_stage_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_m3_complete_in_later_stage),
        .Q(m2_m3_complete_in_later_stage),
        .R(reset_bool_for_rst));
  FDRE m2_msr_clear_bip_i_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_msr_clear_bip_i),
        .Q(m2_msr_clear_bip_i),
        .R(reset_bool_for_rst));
  FDRE m2_msr_set_ie_i_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_msr_set_ie_i),
        .Q(m2_msr_set_ie_i),
        .R(reset_bool_for_rst));
  FDRE m2_raw_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_M2_FPGA.PR_M2_And6_n_5 ),
        .Q(m2_raw_valid_reg_0),
        .R(1'b0));
  FDRE m2_read_imm_reg_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_read_imm_reg),
        .Q(m2_read_imm_reg),
        .R(reset_bool_for_rst));
  FDRE m2_rtid_instr_reg
       (.C(Clk),
        .CE(m1_PipeRun_for_ce),
        .D(m1_rtid_instr),
        .Q(m2_rtid_instr),
        .R(1'b0));
  FDRE m3_byte_access_i_reg
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_byte_access_i),
        .Q(m3_byte_access_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE m3_complete_in_later_stage_reg
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_m3_complete_in_later_stage),
        .Q(m3_complete_in_later_stage),
        .R(reset_bool_for_rst));
  FDRE m3_databus_access_i_reg
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m3_databus_access_i0),
        .Q(m3_sel_load_res),
        .R(reset_bool_for_rst));
  FDRE m3_databus_read_i_reg
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_databus_read_i_reg_n_0),
        .Q(m3_databus_read_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE m3_databus_write_i_reg
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_databus_write),
        .Q(m3_databus_write_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE m3_dead_valid_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_M3_FPGA.PR_M3_And5_n_5 ),
        .Q(m3_dead_valid_hold),
        .R(1'b0));
  FDRE m3_delay_slot_i_reg
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_delay_slot),
        .Q(m3_delay_slot_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE m3_doublet_access_i_reg
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_doublet_access_i),
        .Q(m3_doublet_access_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE \m3_exception_raw_kind_reg[28] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_exception_kind[28]),
        .Q(m3_exception_raw_kind[28]),
        .R(reset_bool_for_rst));
  FDRE \m3_exception_raw_kind_reg[30] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_exception_kind[30]),
        .Q(m3_exception_raw_kind[30]),
        .R(reset_bool_for_rst));
  FDRE \m3_exception_raw_kind_reg[31] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_exception_kind[31]),
        .Q(m3_exception_raw_kind[31]),
        .R(reset_bool_for_rst));
  FDRE \m3_gpr_write_addr_reg[0] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_gpr_write_addr[0]),
        .Q(m3_gpr_write_addr[0]),
        .R(flush_pipe_for_rst));
  FDRE \m3_gpr_write_addr_reg[1] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_gpr_write_addr[1]),
        .Q(m3_gpr_write_addr[1]),
        .R(flush_pipe_for_rst));
  FDRE \m3_gpr_write_addr_reg[2] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_gpr_write_addr[2]),
        .Q(m3_gpr_write_addr[2]),
        .R(flush_pipe_for_rst));
  FDRE \m3_gpr_write_addr_reg[3] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_gpr_write_addr[3]),
        .Q(m3_gpr_write_addr[3]),
        .R(flush_pipe_for_rst));
  FDRE \m3_gpr_write_addr_reg[4] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_gpr_write_addr[4]),
        .Q(m3_gpr_write_addr[4]),
        .R(flush_pipe_for_rst));
  FDRE \m3_instr_reg[0] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[0]),
        .Q(m3_instr[0]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[10] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[10]),
        .Q(m3_instr[10]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[11] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[11]),
        .Q(m3_instr[11]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[12] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[12]),
        .Q(m3_instr[12]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[13] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[13]),
        .Q(m3_instr[13]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[14] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[14]),
        .Q(m3_instr[14]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[15] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[15]),
        .Q(m3_instr[15]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[16] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[16]),
        .Q(m3_instr[16]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[17] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[17]),
        .Q(m3_instr[17]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[18] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[18]),
        .Q(m3_instr[18]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[19] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[19]),
        .Q(m3_instr[19]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[1] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[1]),
        .Q(m3_instr[1]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[20] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[20]),
        .Q(m3_instr[20]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[21] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[21]),
        .Q(m3_instr[21]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[22] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[22]),
        .Q(m3_instr[22]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[23] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[23]),
        .Q(m3_instr[23]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[24] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[24]),
        .Q(m3_instr[24]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[25] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[25]),
        .Q(m3_instr[25]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[26] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[26]),
        .Q(m3_instr[26]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[27] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[27]),
        .Q(m3_instr[27]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[28] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[28]),
        .Q(m3_instr[28]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[29] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[29]),
        .Q(m3_instr[29]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[2] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[2]),
        .Q(m3_instr[2]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[30] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[30]),
        .Q(m3_instr[30]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[31] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[31]),
        .Q(m3_instr[31]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[3] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[3]),
        .Q(m3_instr[3]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[4] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[4]),
        .Q(m3_instr[4]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[5] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[5]),
        .Q(m3_instr[5]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[6] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[6]),
        .Q(m3_instr[6]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[7] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[7]),
        .Q(m3_instr[7]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[8] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[8]),
        .Q(m3_instr[8]),
        .R(reset_bool_for_rst));
  FDRE \m3_instr_reg[9] 
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_instr[9]),
        .Q(m3_instr[9]),
        .R(reset_bool_for_rst));
  FDRE m3_is_div_instr_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(m3_is_div_instr_i_reg_0),
        .Q(m3_sel_div_res),
        .R(reset_bool_for_rst));
  FDRE m3_jump_taken_reg
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_jump_taken),
        .Q(m3_jump_taken),
        .R(reset_bool_for_rst));
  FDRE m3_msr_clear_bip_i_reg
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_msr_clear_bip_i),
        .Q(m3_msr_clear_bip_i),
        .R(reset_bool_for_rst));
  FDRE m3_msr_set_ie_i_reg
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_msr_set_ie_i),
        .Q(m3_msr_set_ie_i),
        .R(reset_bool_for_rst));
  FDRE m3_raw_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_M3_FPGA.PR_M3_And5_n_2 ),
        .Q(m3_raw_valid_reg_0),
        .R(1'b0));
  FDRE m3_read_imm_reg_i_reg
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_read_imm_reg),
        .Q(m3_read_imm_reg_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE m3_rtid_instr_reg
       (.C(Clk),
        .CE(m2_PipeRun_for_ce),
        .D(m2_rtid_instr),
        .Q(m3_rtid_instr),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFF0000B8F8B8F8)) 
    of_MSR_cmb_pipemove_inferred_i_1
       (.I0(ex_msrset),
        .I1(\Using_FPGA.Native_21 [14]),
        .I2(ex_MSR_i[10]),
        .I3(ex_msrclr),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [14]),
        .I5(ex_mts_msr),
        .O(\EX_Op2_reg[17] [14]));
  LUT6 #(
    .INIT(64'hFFFF0000B8F8B8F8)) 
    of_MSR_cmb_pipemove_inferred_i_10
       (.I0(ex_msrset),
        .I1(\Using_FPGA.Native_21 [5]),
        .I2(ex_MSR_i[2]),
        .I3(ex_msrclr),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [5]),
        .I5(ex_mts_msr),
        .O(\EX_Op2_reg[17] [5]));
  LUT6 #(
    .INIT(64'hFFFF0000B8F8B8F8)) 
    of_MSR_cmb_pipemove_inferred_i_11
       (.I0(ex_msrset),
        .I1(\Using_FPGA.Native_21 [4]),
        .I2(ex_MSR_i[1]),
        .I3(ex_msrclr),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [4]),
        .I5(ex_mts_msr),
        .O(\EX_Op2_reg[17] [4]));
  LUT6 #(
    .INIT(64'hFFFFBABB0000AAAA)) 
    of_MSR_cmb_pipemove_inferred_i_12
       (.I0(ex_set_bip_reg_n_0),
        .I1(ex_clear_msr_bip_instr),
        .I2(\Use_HW_BS.mem_mux3_reg[28] [3]),
        .I3(ex_move_to_MSR_instr),
        .I4(\Using_FPGA.Native_i_2__5_n_0 ),
        .I5(of_MSR_cmb_pipemove_inferred_i_21_n_0),
        .O(\EX_Op2_reg[17] [3]));
  LUT6 #(
    .INIT(64'hAFAEA3A2ACAEA0A2)) 
    of_MSR_cmb_pipemove_inferred_i_13
       (.I0(of_MSR_cmb_pipemove_inferred_i_22_n_0),
        .I1(ex_load_alu_carry_reg_n_0),
        .I2(\Using_FPGA.Native_i_2__5_n_0 ),
        .I3(ex_load_shift_carry),
        .I4(LO),
        .I5(\Use_HW_BS.mem_mux3_reg[28] [0]),
        .O(\EX_Op2_reg[17] [2]));
  LUT5 #(
    .INIT(32'hAFAFAEAA)) 
    of_MSR_cmb_pipemove_inferred_i_14
       (.I0(of_MSR_cmb_pipemove_inferred_i_23_n_0),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [1]),
        .I2(\Using_FPGA.Native_i_2__5_n_0 ),
        .I3(ex_move_to_MSR_instr),
        .I4(ex_set_msr_ie_instr),
        .O(\EX_Op2_reg[17] [1]));
  LUT6 #(
    .INIT(64'hFFFF0000B8F8B8F8)) 
    of_MSR_cmb_pipemove_inferred_i_15
       (.I0(ex_msrset),
        .I1(\Using_FPGA.Native_21 [0]),
        .I2(ex_MSR_i[0]),
        .I3(ex_msrclr),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [0]),
        .I5(ex_mts_msr),
        .O(\EX_Op2_reg[17] [0]));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    of_MSR_cmb_pipemove_inferred_i_16
       (.I0(ex_MSR_set_decode_reg_n_0),
        .I1(ex_raw_valid_reg_n_0),
        .I2(wb_exception_from_m3_reg_rep__0_0),
        .I3(ex_dead_valid_hold),
        .O(ex_msrset));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    of_MSR_cmb_pipemove_inferred_i_17
       (.I0(ex_MSR_clear_decode_reg_n_0),
        .I1(ex_raw_valid_reg_n_0),
        .I2(wb_exception_from_m3_reg_rep__0_0),
        .I3(ex_dead_valid_hold),
        .O(ex_msrclr));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    of_MSR_cmb_pipemove_inferred_i_18
       (.I0(ex_move_to_MSR_instr),
        .I1(ex_raw_valid_reg_n_0),
        .I2(wb_exception_from_m3_reg_rep__0_0),
        .I3(ex_dead_valid_hold),
        .O(ex_mts_msr));
  LUT6 #(
    .INIT(64'hCCFFCCFFCCFCCC4C)) 
    of_MSR_cmb_pipemove_inferred_i_19
       (.I0(ex_MSR_clear_decode_reg_n_0),
        .I1(ex_MSR_i[5]),
        .I2(\Using_FPGA.Native_21 [9]),
        .I3(\Using_FPGA.Native_i_2__5_n_0 ),
        .I4(ex_MSR_set_decode_reg_n_0),
        .I5(ex_move_to_MSR_instr),
        .O(of_MSR_cmb_pipemove_inferred_i_19_n_0));
  LUT6 #(
    .INIT(64'hFFFF0000B8F8B8F8)) 
    of_MSR_cmb_pipemove_inferred_i_2
       (.I0(ex_msrset),
        .I1(\Using_FPGA.Native_21 [13]),
        .I2(ex_MSR_i[9]),
        .I3(ex_msrclr),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [13]),
        .I5(ex_mts_msr),
        .O(\EX_Op2_reg[17] [13]));
  LUT6 #(
    .INIT(64'hF5F10400F5F50400)) 
    of_MSR_cmb_pipemove_inferred_i_20
       (.I0(ex_move_to_MSR_instr),
        .I1(\Using_FPGA.Native_21 [8]),
        .I2(\Using_FPGA.Native_i_2__5_n_0 ),
        .I3(ex_MSR_set_decode_reg_n_0),
        .I4(ex_MSR_i[4]),
        .I5(ex_MSR_clear_decode_reg_n_0),
        .O(of_MSR_cmb_pipemove_inferred_i_20_n_0));
  LUT6 #(
    .INIT(64'hCCFFCCFFCCFCCC4C)) 
    of_MSR_cmb_pipemove_inferred_i_21
       (.I0(ex_MSR_clear_decode_reg_n_0),
        .I1(\Using_FPGA.Native_25 ),
        .I2(\Using_FPGA.Native_21 [3]),
        .I3(\Using_FPGA.Native_i_2__5_n_0 ),
        .I4(ex_MSR_set_decode_reg_n_0),
        .I5(ex_move_to_MSR_instr),
        .O(of_MSR_cmb_pipemove_inferred_i_21_n_0));
  LUT5 #(
    .INIT(32'hFF1F0010)) 
    of_MSR_cmb_pipemove_inferred_i_22
       (.I0(m0_databus_read_i0),
        .I1(ex_reservation),
        .I2(ex_databus_exclusive_i_reg_n_0),
        .I3(\Using_FPGA.Native_i_2__5_n_0 ),
        .I4(of_MSR_cmb_pipemove_inferred_i_24_n_0),
        .O(of_MSR_cmb_pipemove_inferred_i_22_n_0));
  LUT6 #(
    .INIT(64'hF5F10400F5F50400)) 
    of_MSR_cmb_pipemove_inferred_i_23
       (.I0(ex_move_to_MSR_instr),
        .I1(\Using_FPGA.Native_21 [1]),
        .I2(\Using_FPGA.Native_i_2__5_n_0 ),
        .I3(ex_MSR_set_decode_reg_n_0),
        .I4(\Using_FPGA.Native_22 ),
        .I5(ex_MSR_clear_decode_reg_n_0),
        .O(of_MSR_cmb_pipemove_inferred_i_23_n_0));
  LUT6 #(
    .INIT(64'hFFFF0000B8F8B8F8)) 
    of_MSR_cmb_pipemove_inferred_i_24
       (.I0(ex_msrset),
        .I1(\Using_FPGA.Native_21 [2]),
        .I2(EX_CarryIn),
        .I3(ex_msrclr),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [2]),
        .I5(ex_mts_msr),
        .O(of_MSR_cmb_pipemove_inferred_i_24_n_0));
  LUT6 #(
    .INIT(64'hFFFF0000B8F8B8F8)) 
    of_MSR_cmb_pipemove_inferred_i_3
       (.I0(ex_msrset),
        .I1(\Using_FPGA.Native_21 [12]),
        .I2(ex_MSR_i[8]),
        .I3(ex_msrclr),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [12]),
        .I5(ex_mts_msr),
        .O(\EX_Op2_reg[17] [12]));
  LUT6 #(
    .INIT(64'hFFFF0000B8F8B8F8)) 
    of_MSR_cmb_pipemove_inferred_i_4
       (.I0(ex_msrset),
        .I1(\Using_FPGA.Native_21 [11]),
        .I2(ex_MSR_i[7]),
        .I3(ex_msrclr),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [11]),
        .I5(ex_mts_msr),
        .O(\EX_Op2_reg[17] [11]));
  LUT6 #(
    .INIT(64'hFFFF0000B8F8B8F8)) 
    of_MSR_cmb_pipemove_inferred_i_5
       (.I0(ex_msrset),
        .I1(\Using_FPGA.Native_21 [10]),
        .I2(ex_MSR_i[6]),
        .I3(ex_msrclr),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [10]),
        .I5(ex_mts_msr),
        .O(\EX_Op2_reg[17] [10]));
  LUT5 #(
    .INIT(32'h8888AA8A)) 
    of_MSR_cmb_pipemove_inferred_i_6
       (.I0(of_MSR_cmb_pipemove_inferred_i_19_n_0),
        .I1(\Using_FPGA.Native_i_2__5_n_0 ),
        .I2(ex_move_to_MSR_instr),
        .I3(\Use_HW_BS.mem_mux3_reg[28] [9]),
        .I4(ex_set_msr_ee_instr),
        .O(\EX_Op2_reg[17] [9]));
  LUT5 #(
    .INIT(32'hAFAFAEAA)) 
    of_MSR_cmb_pipemove_inferred_i_7
       (.I0(of_MSR_cmb_pipemove_inferred_i_20_n_0),
        .I1(\Use_HW_BS.mem_mux3_reg[28] [8]),
        .I2(\Using_FPGA.Native_i_2__5_n_0 ),
        .I3(ex_move_to_MSR_instr),
        .I4(ex_set_msr_ee_instr),
        .O(\EX_Op2_reg[17] [8]));
  LUT6 #(
    .INIT(64'hFFFF0000B8F8B8F8)) 
    of_MSR_cmb_pipemove_inferred_i_8
       (.I0(ex_msrset),
        .I1(\Using_FPGA.Native_21 [7]),
        .I2(ex_MSR_i[3]),
        .I3(ex_msrclr),
        .I4(\Use_HW_BS.mem_mux3_reg[28] [7]),
        .I5(ex_mts_msr),
        .O(\EX_Op2_reg[17] [7]));
  LUT5 #(
    .INIT(32'hA8AAAAAA)) 
    of_MSR_cmb_pipestall_inferred_i_1
       (.I0(\of_MSR_i_reg[22]_0 [4]),
        .I1(ex_dead_valid_hold),
        .I2(wb_exception_from_m3_reg_rep__0_0),
        .I3(ex_raw_valid_reg_n_0),
        .I4(ex_set_msr_ee_instr),
        .O(\of_MSR_i_reg[22] [3]));
  LUT5 #(
    .INIT(32'hFFFF1000)) 
    of_MSR_cmb_pipestall_inferred_i_2
       (.I0(ex_dead_valid_hold),
        .I1(wb_exception_from_m3_reg_rep__0_0),
        .I2(ex_raw_valid_reg_n_0),
        .I3(ex_set_msr_ee_instr),
        .I4(\of_MSR_i_reg[22]_0 [3]),
        .O(\of_MSR_i_reg[22] [2]));
  LUT6 #(
    .INIT(64'hFFFFFFBF000000A0)) 
    of_MSR_cmb_pipestall_inferred_i_3
       (.I0(ex_set_bip_reg_n_0),
        .I1(ex_clear_msr_bip_instr),
        .I2(ex_raw_valid_reg_n_0),
        .I3(wb_exception_from_m3_reg_rep__0_0),
        .I4(ex_dead_valid_hold),
        .I5(\of_MSR_i_reg[22]_0 [1]),
        .O(\of_MSR_i_reg[22] [1]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT5 #(
    .INIT(32'hABAAAAAA)) 
    of_MSR_cmb_pipestall_inferred_i_4
       (.I0(\of_MSR_i_reg[22]_0 [0]),
        .I1(ex_dead_valid_hold),
        .I2(wb_exception_from_m3_reg_rep__0_0),
        .I3(ex_raw_valid_reg_n_0),
        .I4(ex_set_msr_ie_instr),
        .O(\of_MSR_i_reg[22] [0]));
  FDRE of_clear_msr_bip_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_EX_FPGA.PR_EX_And7_n_4 ),
        .Q(of_clear_msr_bip_hold_reg_n_0),
        .R(1'b0));
  FDRE of_dead_valid_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_OF_FPGA.PR_OF_And11_n_3 ),
        .Q(of_dead_valid_hold),
        .R(1'b0));
  FDRE of_read_imm_reg_raw_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(PREFETCH_BUFFER_I1_n_40),
        .Q(of_read_imm_reg_raw),
        .R(M0_Exception_From_DFF_n_7));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'h1)) 
    of_set_msr_ee_hold_i_2
       (.I0(wb_exception_from_m3_reg_rep_0),
        .I1(reset_bool_for_rst),
        .O(of_set_msr_ee_hold_i_2_n_0));
  FDRE of_set_msr_ee_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_EX_FPGA.PR_EX_And7_n_5 ),
        .Q(of_set_msr_ee_hold_reg_n_0),
        .R(1'b0));
  FDRE of_set_msr_ie_hold_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_EX_FPGA.PR_EX_And7_n_6 ),
        .Q(of_set_msr_ie_hold_reg_n_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT3 #(
    .INIT(8'h02)) 
    sign_byte_inferred_i_1
       (.I0(\Use_HW_BS.mem_mux3_reg[28] [7]),
        .I1(\EX_Sext_Op_reg[0]_0 [1]),
        .I2(\EX_Sext_Op_reg[0]_0 [0]),
        .O(in0));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \trace_exception_kind_i[1]_i_1 
       (.I0(wb_abort_div),
        .I1(wb_exception_raw_kind[28]),
        .O(wb_exception_from_m3_reg_0[2]));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \trace_exception_kind_i[3]_i_1 
       (.I0(wb_abort_div),
        .I1(wb_exception_raw_kind[30]),
        .O(wb_exception_from_m3_reg_0[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \trace_exception_kind_i[4]_i_1 
       (.I0(wb_abort_div),
        .I1(wb_exception_raw_kind[31]),
        .O(wb_exception_from_m3_reg_0[0]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT4 #(
    .INIT(16'hB0F0)) 
    trace_exception_taken_i_i_1
       (.I0(wb_exception_raw_kind[30]),
        .I1(wb_exception_raw_kind[28]),
        .I2(wb_exception_from_m3_reg_rep__0_0),
        .I3(wb_exception_raw_kind[31]),
        .O(wb_exception_taken));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[0]_i_2 
       (.I0(wb_doublet_access),
        .I1(wb_byte_access),
        .O(WB_Doublet_Access_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT4 #(
    .INIT(16'h00EA)) 
    \trace_new_reg_value_i[24]_i_4 
       (.I0(wb_doublet_access),
        .I1(wb_byte_access),
        .I2(\trace_new_reg_value_i[24]_i_2 [0]),
        .I3(\trace_new_reg_value_i[24]_i_2 [1]),
        .O(WB_Doublet_Access_reg_1));
  LUT5 #(
    .INIT(32'h8AAAAAAA)) 
    \trace_reg_addr_i[0]_i_1 
       (.I0(\wb_gpr_write_addr_reg_n_0_[0] ),
        .I1(wb_exception_raw_kind[31]),
        .I2(wb_exception_raw_kind[28]),
        .I3(wb_exception_from_m3_reg_rep__0_0),
        .I4(wb_exception_raw_kind[30]),
        .O(ADDRD[4]));
  LUT5 #(
    .INIT(32'h8AAAAAAA)) 
    \trace_reg_addr_i[4]_i_1 
       (.I0(\wb_gpr_write_addr_reg_n_0_[4] ),
        .I1(wb_exception_raw_kind[31]),
        .I2(wb_exception_raw_kind[28]),
        .I3(wb_exception_from_m3_reg_rep__0_0),
        .I4(wb_exception_raw_kind[30]),
        .O(ADDRD[0]));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    trace_reg_write_i_i_1
       (.I0(wb_exception_raw_kind[30]),
        .I1(wb_exception_from_m3_reg_rep__0_0),
        .I2(wb_exception_raw_kind[28]),
        .I3(wb_exception_raw_kind[31]),
        .O(wb_msr_clear_ie));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT5 #(
    .INIT(32'h8AAAAAAA)) 
    trace_valid_instr_i_i_1
       (.I0(wb_raw_valid_reg_n_0),
        .I1(wb_exception_raw_kind[30]),
        .I2(wb_exception_raw_kind[28]),
        .I3(wb_abort_div),
        .I4(wb_exception_raw_kind[31]),
        .O(trace_wb_valid_instr));
  (* ORIG_CELL_NAME = "wb_exception_from_m3_reg" *) 
  FDRE wb_exception_from_m3_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M3_Exception_From_DFF_n_5),
        .Q(wb_abort_div),
        .R(1'b0));
  (* ORIG_CELL_NAME = "wb_exception_from_m3_reg" *) 
  FDRE wb_exception_from_m3_reg_rep
       (.C(Clk),
        .CE(1'b1),
        .D(M3_Exception_From_DFF_n_9),
        .Q(wb_exception_from_m3_reg_rep_0),
        .R(1'b0));
  (* ORIG_CELL_NAME = "wb_exception_from_m3_reg" *) 
  FDRE wb_exception_from_m3_reg_rep__0
       (.C(Clk),
        .CE(1'b1),
        .D(M3_Exception_From_DFF_n_10),
        .Q(wb_exception_from_m3_reg_rep__0_0),
        .R(1'b0));
  FDRE \wb_exception_raw_kind_reg[28] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_exception_kind),
        .Q(wb_exception_raw_kind[28]),
        .R(reset_bool_for_rst));
  FDRE \wb_exception_raw_kind_reg[30] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(M3_Exception_From_DFF_n_7),
        .Q(wb_exception_raw_kind[30]),
        .R(reset_bool_for_rst));
  FDRE \wb_exception_raw_kind_reg[31] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(M3_Exception_From_DFF_n_8),
        .Q(wb_exception_raw_kind[31]),
        .R(reset_bool_for_rst));
  FDRE \wb_gpr_write_addr_reg[0] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_gpr_write_addr[0]),
        .Q(\wb_gpr_write_addr_reg_n_0_[0] ),
        .R(flush_pipe_for_rst));
  FDRE \wb_gpr_write_addr_reg[1] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_gpr_write_addr[1]),
        .Q(\wb_gpr_write_addr_reg[1]_0 [2]),
        .R(flush_pipe_for_rst));
  FDRE \wb_gpr_write_addr_reg[2] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_gpr_write_addr[2]),
        .Q(\wb_gpr_write_addr_reg[1]_0 [1]),
        .R(flush_pipe_for_rst));
  FDRE \wb_gpr_write_addr_reg[3] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_gpr_write_addr[3]),
        .Q(\wb_gpr_write_addr_reg[1]_0 [0]),
        .R(flush_pipe_for_rst));
  FDRE \wb_gpr_write_addr_reg[4] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_gpr_write_addr[4]),
        .Q(\wb_gpr_write_addr_reg_n_0_[4] ),
        .R(flush_pipe_for_rst));
  FDRE \wb_instr_i_reg[0] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[0]),
        .Q(\wb_instr_i_reg[0]_0 [31]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[10] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[10]),
        .Q(\wb_instr_i_reg[0]_0 [21]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[11] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[11]),
        .Q(\wb_instr_i_reg[0]_0 [20]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[12] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[12]),
        .Q(\wb_instr_i_reg[0]_0 [19]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[13] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[13]),
        .Q(\wb_instr_i_reg[0]_0 [18]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[14] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[14]),
        .Q(\wb_instr_i_reg[0]_0 [17]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[15] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[15]),
        .Q(\wb_instr_i_reg[0]_0 [16]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[16] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[16]),
        .Q(\wb_instr_i_reg[0]_0 [15]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[17] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[17]),
        .Q(\wb_instr_i_reg[0]_0 [14]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[18] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[18]),
        .Q(\wb_instr_i_reg[0]_0 [13]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[19] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[19]),
        .Q(\wb_instr_i_reg[0]_0 [12]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[1] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[1]),
        .Q(\wb_instr_i_reg[0]_0 [30]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[20] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[20]),
        .Q(\wb_instr_i_reg[0]_0 [11]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[21] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[21]),
        .Q(\wb_instr_i_reg[0]_0 [10]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[22] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[22]),
        .Q(\wb_instr_i_reg[0]_0 [9]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[23] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[23]),
        .Q(\wb_instr_i_reg[0]_0 [8]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[24] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[24]),
        .Q(\wb_instr_i_reg[0]_0 [7]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[25] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[25]),
        .Q(\wb_instr_i_reg[0]_0 [6]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[26] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[26]),
        .Q(\wb_instr_i_reg[0]_0 [5]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[27] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[27]),
        .Q(\wb_instr_i_reg[0]_0 [4]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[28] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[28]),
        .Q(\wb_instr_i_reg[0]_0 [3]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[29] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[29]),
        .Q(\wb_instr_i_reg[0]_0 [2]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[2] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[2]),
        .Q(\wb_instr_i_reg[0]_0 [29]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[30] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[30]),
        .Q(\wb_instr_i_reg[0]_0 [1]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[31] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[31]),
        .Q(\wb_instr_i_reg[0]_0 [0]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[3] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[3]),
        .Q(\wb_instr_i_reg[0]_0 [28]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[4] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[4]),
        .Q(\wb_instr_i_reg[0]_0 [27]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[5] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[5]),
        .Q(\wb_instr_i_reg[0]_0 [26]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[6] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[6]),
        .Q(\wb_instr_i_reg[0]_0 [25]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[7] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[7]),
        .Q(\wb_instr_i_reg[0]_0 [24]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[8] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[8]),
        .Q(\wb_instr_i_reg[0]_0 [23]),
        .R(reset_bool_for_rst));
  FDRE \wb_instr_i_reg[9] 
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_instr[9]),
        .Q(\wb_instr_i_reg[0]_0 [22]),
        .R(reset_bool_for_rst));
  LUT3 #(
    .INIT(8'h0E)) 
    wb_m3_sel_res_i_1
       (.I0(m3_m2_sel_res),
        .I1(m3_sel_div_res),
        .I2(m3_sel_load_res),
        .O(wb_m3_sel_res0));
  FDRE wb_piperun_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(m3_PipeRun_for_ce),
        .Q(wb_piperun_i_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE wb_raw_valid_reg
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_M3_FPGA.PR_M3_And5_n_3 ),
        .Q(wb_raw_valid_reg_n_0),
        .R(1'b0));
  FDRE wb_read_imm_reg_i_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_read_imm_reg_i_reg_n_0),
        .Q(wb_read_imm_reg),
        .R(reset_bool_for_rst));
  FDRE wb_reset_reg
       (.C(Clk),
        .CE(1'b1),
        .D(reset_bool_for_rst),
        .Q(wb_reset),
        .R(1'b0));
  FDRE wb_rtid_instr_reg
       (.C(Clk),
        .CE(m3_PipeRun_for_ce),
        .D(m3_rtid_instr),
        .Q(wb_rtid_instr),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "Div_Unit_ff" *) 
module microblaze_microblaze_0_0_Div_Unit_ff
   (Q,
    E,
    DI,
    O,
    last_cycle_reg_0,
    div_iterations_early_reg_0,
    floating_hold_div_by_zero__0,
    m3_div_by_zero,
    m3_div_stall_i_reg_0,
    negative_operands,
    floating_hold_div_overflow_reg_0,
    m3_div_overflow_i_reg_0,
    make_result_neg,
    wb_exception_from_m3_reg_rep__0,
    m3_div_stall_i_reg_1,
    m3_div_overflow_i_reg_1,
    negative_operands_reg_0,
    M3_Div_By_Zero_reg_0,
    m3_last_cycle_reg_0,
    \cnt_shifts_reg[0]_0 ,
    Clk,
    \Using_FPGA.D_Handle[0].D_Sel_reg ,
    \Q_reg[31]_0 ,
    ex_start_div,
    sync_reset,
    div_iterations_early,
    floating_hold_div_by_zero_reg_0,
    M3_Div_By_Zero_reg_1,
    m3_div_stall_i_reg_2,
    negative_operands_reg_1,
    floating_hold_div_overflow_reg_1,
    m3_div_overflow_i_reg_2,
    next_sub_reg_0,
    make_result_neg_reg_0,
    WB_Div_Zero_Overflow_reg,
    m3_div_overflow_i_reg_3,
    m2_piperun,
    m3_last_cycle_reg_1,
    EX_Op1_Zero,
    ex_div_unsigned,
    m2_is_div_instr,
    m3_sel_div_res,
    \Using_FPGA.Native ,
    m3_piperun,
    \Using_FPGA.Native_0 ,
    S,
    CI,
    \Using_FPGA.D_reg[30]_0 ,
    \Using_FPGA.D_reg[29]_0 ,
    \Using_FPGA.D_reg[28]_0 ,
    \Using_FPGA.D_reg[27]_0 ,
    \Using_FPGA.D_reg[26]_0 ,
    \Using_FPGA.D_reg[25]_0 ,
    \Using_FPGA.D_reg[24]_0 ,
    \Using_FPGA.D_reg[23]_0 ,
    \Using_FPGA.D_reg[22]_0 ,
    \Using_FPGA.D_reg[21]_0 ,
    \Using_FPGA.D_reg[20]_0 ,
    \Using_FPGA.D_reg[19]_0 ,
    \Using_FPGA.D_reg[18]_0 ,
    \Using_FPGA.D_reg[17]_0 ,
    \Using_FPGA.D_reg[16]_0 ,
    \Using_FPGA.D_reg[15]_0 ,
    \Using_FPGA.D_reg[14]_0 ,
    \Using_FPGA.D_reg[13]_0 ,
    \Using_FPGA.D_reg[12]_0 ,
    \Using_FPGA.D_reg[11]_0 ,
    \Using_FPGA.D_reg[10]_0 ,
    \Using_FPGA.D_reg[9]_0 ,
    \Using_FPGA.D_reg[8]_0 ,
    \Using_FPGA.D_reg[7]_0 ,
    \Using_FPGA.D_reg[6]_0 ,
    \Using_FPGA.D_reg[5]_0 ,
    \Using_FPGA.D_reg[4]_0 ,
    \Using_FPGA.D_reg[3]_0 ,
    \Using_FPGA.D_reg[2]_0 ,
    \Using_FPGA.D_reg[1]_0 ,
    SR,
    \R_reg[32]_0 );
  output [31:0]Q;
  output [0:0]E;
  output [0:0]DI;
  output [0:0]O;
  output last_cycle_reg_0;
  output div_iterations_early_reg_0;
  output floating_hold_div_by_zero__0;
  output m3_div_by_zero;
  output m3_div_stall_i_reg_0;
  output negative_operands;
  output floating_hold_div_overflow_reg_0;
  output m3_div_overflow_i_reg_0;
  output make_result_neg;
  output wb_exception_from_m3_reg_rep__0;
  output m3_div_stall_i_reg_1;
  output m3_div_overflow_i_reg_1;
  output negative_operands_reg_0;
  output M3_Div_By_Zero_reg_0;
  output m3_last_cycle_reg_0;
  input \cnt_shifts_reg[0]_0 ;
  input Clk;
  input \Using_FPGA.D_Handle[0].D_Sel_reg ;
  input [31:0]\Q_reg[31]_0 ;
  input ex_start_div;
  input sync_reset;
  input div_iterations_early;
  input floating_hold_div_by_zero_reg_0;
  input M3_Div_By_Zero_reg_1;
  input m3_div_stall_i_reg_2;
  input negative_operands_reg_1;
  input floating_hold_div_overflow_reg_1;
  input m3_div_overflow_i_reg_2;
  input next_sub_reg_0;
  input make_result_neg_reg_0;
  input WB_Div_Zero_Overflow_reg;
  input m3_div_overflow_i_reg_3;
  input m2_piperun;
  input m3_last_cycle_reg_1;
  input EX_Op1_Zero;
  input ex_div_unsigned;
  input m2_is_div_instr;
  input m3_sel_div_res;
  input \Using_FPGA.Native ;
  input m3_piperun;
  input \Using_FPGA.Native_0 ;
  input S;
  input CI;
  input \Using_FPGA.D_reg[30]_0 ;
  input \Using_FPGA.D_reg[29]_0 ;
  input \Using_FPGA.D_reg[28]_0 ;
  input \Using_FPGA.D_reg[27]_0 ;
  input \Using_FPGA.D_reg[26]_0 ;
  input \Using_FPGA.D_reg[25]_0 ;
  input \Using_FPGA.D_reg[24]_0 ;
  input \Using_FPGA.D_reg[23]_0 ;
  input \Using_FPGA.D_reg[22]_0 ;
  input \Using_FPGA.D_reg[21]_0 ;
  input \Using_FPGA.D_reg[20]_0 ;
  input \Using_FPGA.D_reg[19]_0 ;
  input \Using_FPGA.D_reg[18]_0 ;
  input \Using_FPGA.D_reg[17]_0 ;
  input \Using_FPGA.D_reg[16]_0 ;
  input \Using_FPGA.D_reg[15]_0 ;
  input \Using_FPGA.D_reg[14]_0 ;
  input \Using_FPGA.D_reg[13]_0 ;
  input \Using_FPGA.D_reg[12]_0 ;
  input \Using_FPGA.D_reg[11]_0 ;
  input \Using_FPGA.D_reg[10]_0 ;
  input \Using_FPGA.D_reg[9]_0 ;
  input \Using_FPGA.D_reg[8]_0 ;
  input \Using_FPGA.D_reg[7]_0 ;
  input \Using_FPGA.D_reg[6]_0 ;
  input \Using_FPGA.D_reg[5]_0 ;
  input \Using_FPGA.D_reg[4]_0 ;
  input \Using_FPGA.D_reg[3]_0 ;
  input \Using_FPGA.D_reg[2]_0 ;
  input \Using_FPGA.D_reg[1]_0 ;
  input [0:0]SR;
  input [0:0]\R_reg[32]_0 ;

  wire CI;
  wire Clk;
  wire [0:31]D;
  wire [0:0]DI;
  wire [0:0]E;
  wire EX_Op1_Zero;
  wire LO;
  wire M3_Div_By_Zero_reg_0;
  wire M3_Div_By_Zero_reg_1;
  wire [32:32]New_Q_Carry;
  wire New_Q_Sel_0;
  wire New_Q_Sel_1;
  wire New_Q_Sel_10;
  wire New_Q_Sel_11;
  wire New_Q_Sel_12;
  wire New_Q_Sel_13;
  wire New_Q_Sel_14;
  wire New_Q_Sel_15;
  wire New_Q_Sel_16;
  wire New_Q_Sel_17;
  wire New_Q_Sel_18;
  wire New_Q_Sel_19;
  wire New_Q_Sel_2;
  wire New_Q_Sel_20;
  wire New_Q_Sel_21;
  wire New_Q_Sel_22;
  wire New_Q_Sel_23;
  wire New_Q_Sel_24;
  wire New_Q_Sel_25;
  wire New_Q_Sel_26;
  wire New_Q_Sel_27;
  wire New_Q_Sel_28;
  wire New_Q_Sel_29;
  wire New_Q_Sel_3;
  wire New_Q_Sel_30;
  wire New_Q_Sel_31;
  wire New_Q_Sel_4;
  wire New_Q_Sel_5;
  wire New_Q_Sel_6;
  wire New_Q_Sel_7;
  wire New_Q_Sel_8;
  wire New_Q_Sel_9;
  wire [0:0]O;
  wire O33_out;
  wire O34_out;
  wire O35_out;
  wire O36_out;
  wire O37_out;
  wire O38_out;
  wire O39_out;
  wire O40_out;
  wire O41_out;
  wire O42_out;
  wire O43_out;
  wire O44_out;
  wire O45_out;
  wire O46_out;
  wire O47_out;
  wire O48_out;
  wire O49_out;
  wire O50_out;
  wire O51_out;
  wire O52_out;
  wire O53_out;
  wire O54_out;
  wire O55_out;
  wire O56_out;
  wire O57_out;
  wire O58_out;
  wire O59_out;
  wire O60_out;
  wire O61_out;
  wire O62_out;
  wire O_0;
  wire [31:0]Q;
  wire \Q[32]_i_1_n_0 ;
  wire [32:32]Q_1;
  wire [31:0]\Q_reg[31]_0 ;
  wire [0:32]R;
  wire R1_carry__0_i_1_n_0;
  wire R1_carry__0_i_2_n_0;
  wire R1_carry__0_i_3_n_0;
  wire R1_carry__0_i_4_n_0;
  wire R1_carry__0_n_0;
  wire R1_carry__0_n_1;
  wire R1_carry__0_n_2;
  wire R1_carry__0_n_3;
  wire R1_carry__1_i_1_n_0;
  wire R1_carry__1_i_2_n_0;
  wire R1_carry__1_i_3_n_0;
  wire R1_carry__1_i_4_n_0;
  wire R1_carry__1_n_0;
  wire R1_carry__1_n_1;
  wire R1_carry__1_n_2;
  wire R1_carry__1_n_3;
  wire R1_carry__2_i_1_n_0;
  wire R1_carry__2_i_2_n_0;
  wire R1_carry__2_i_3_n_0;
  wire R1_carry__2_i_4_n_0;
  wire R1_carry__2_n_0;
  wire R1_carry__2_n_1;
  wire R1_carry__2_n_2;
  wire R1_carry__2_n_3;
  wire R1_carry__3_i_1_n_0;
  wire R1_carry__3_i_2_n_0;
  wire R1_carry__3_i_3_n_0;
  wire R1_carry__3_i_4_n_0;
  wire R1_carry__3_n_0;
  wire R1_carry__3_n_1;
  wire R1_carry__3_n_2;
  wire R1_carry__3_n_3;
  wire R1_carry__4_i_1_n_0;
  wire R1_carry__4_i_2_n_0;
  wire R1_carry__4_i_3_n_0;
  wire R1_carry__4_i_4_n_0;
  wire R1_carry__4_n_0;
  wire R1_carry__4_n_1;
  wire R1_carry__4_n_2;
  wire R1_carry__4_n_3;
  wire R1_carry__5_i_1_n_0;
  wire R1_carry__5_i_2_n_0;
  wire R1_carry__5_i_3_n_0;
  wire R1_carry__5_i_4_n_0;
  wire R1_carry__5_n_0;
  wire R1_carry__5_n_1;
  wire R1_carry__5_n_2;
  wire R1_carry__5_n_3;
  wire R1_carry__6_i_1_n_0;
  wire R1_carry__6_i_2_n_0;
  wire R1_carry__6_i_3_n_0;
  wire R1_carry__6_i_4_n_0;
  wire R1_carry__6_n_0;
  wire R1_carry__6_n_1;
  wire R1_carry__6_n_2;
  wire R1_carry__6_n_3;
  wire R1_carry__7_i_1_n_0;
  wire R1_carry_i_1_n_0;
  wire R1_carry_i_2_n_0;
  wire R1_carry_i_3_n_0;
  wire R1_carry_i_4_n_0;
  wire R1_carry_n_0;
  wire R1_carry_n_1;
  wire R1_carry_n_2;
  wire R1_carry_n_3;
  wire [0:0]\R_reg[32]_0 ;
  wire S;
  wire [0:0]SR;
  wire \Using_FPGA.D_Handle[0].D_Sel_reg ;
  wire \Using_FPGA.D_Handle[0].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[10].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[11].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[12].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[13].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[14].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[15].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[16].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[17].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[18].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[19].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[1].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[20].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[21].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[22].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[23].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[24].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[25].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[26].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[27].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[28].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[29].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[2].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[30].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[3].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[4].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[5].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[6].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[7].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[8].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_Handle[9].MUXCY_XOR_I_n_0 ;
  wire \Using_FPGA.D_reg[10]_0 ;
  wire \Using_FPGA.D_reg[11]_0 ;
  wire \Using_FPGA.D_reg[12]_0 ;
  wire \Using_FPGA.D_reg[13]_0 ;
  wire \Using_FPGA.D_reg[14]_0 ;
  wire \Using_FPGA.D_reg[15]_0 ;
  wire \Using_FPGA.D_reg[16]_0 ;
  wire \Using_FPGA.D_reg[17]_0 ;
  wire \Using_FPGA.D_reg[18]_0 ;
  wire \Using_FPGA.D_reg[19]_0 ;
  wire \Using_FPGA.D_reg[1]_0 ;
  wire \Using_FPGA.D_reg[20]_0 ;
  wire \Using_FPGA.D_reg[21]_0 ;
  wire \Using_FPGA.D_reg[22]_0 ;
  wire \Using_FPGA.D_reg[23]_0 ;
  wire \Using_FPGA.D_reg[24]_0 ;
  wire \Using_FPGA.D_reg[25]_0 ;
  wire \Using_FPGA.D_reg[26]_0 ;
  wire \Using_FPGA.D_reg[27]_0 ;
  wire \Using_FPGA.D_reg[28]_0 ;
  wire \Using_FPGA.D_reg[29]_0 ;
  wire \Using_FPGA.D_reg[2]_0 ;
  wire \Using_FPGA.D_reg[30]_0 ;
  wire \Using_FPGA.D_reg[3]_0 ;
  wire \Using_FPGA.D_reg[4]_0 ;
  wire \Using_FPGA.D_reg[5]_0 ;
  wire \Using_FPGA.D_reg[6]_0 ;
  wire \Using_FPGA.D_reg[7]_0 ;
  wire \Using_FPGA.D_reg[8]_0 ;
  wire \Using_FPGA.D_reg[9]_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.New_Q_Handle[10].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[10].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[11].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[11].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[12].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[12].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[13].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[13].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[14].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[14].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[15].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[15].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[16].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[16].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[17].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[17].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[18].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[18].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[19].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[19].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[1].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[1].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[20].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[20].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[21].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[21].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[22].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[22].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[23].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[23].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[24].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[24].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[25].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[25].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[26].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[26].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[27].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[27].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[28].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[28].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[29].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[29].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[2].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[2].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[30].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[30].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[31].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[31].New_Q_MUXCY_XORCY_n_2 ;
  wire \Using_FPGA.New_Q_Handle[3].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[3].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[4].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[4].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[5].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[5].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[6].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[6].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[7].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[7].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[8].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[8].New_Q_MUXCY_XORCY_n_1 ;
  wire \Using_FPGA.New_Q_Handle[9].New_Q_MUXCY_XORCY_n_0 ;
  wire \Using_FPGA.New_Q_Handle[9].New_Q_MUXCY_XORCY_n_1 ;
  wire WB_Div_Zero_Overflow_reg;
  wire \cnt_shifts_reg[0]_0 ;
  wire \cnt_shifts_reg[1]_srl31_n_0 ;
  wire div_iterations_early;
  wire div_iterations_early_i_1_n_0;
  wire div_iterations_early_reg_0;
  wire ex_div_unsigned;
  wire ex_start_div;
  wire floating_div_aborting;
  wire floating_div_aborting_i_1_n_0;
  wire floating_hold_div_by_zero__0;
  wire floating_hold_div_by_zero_reg_0;
  wire floating_hold_div_overflow_reg_0;
  wire floating_hold_div_overflow_reg_1;
  wire last_cycle_i_1_n_0;
  wire last_cycle_reg_0;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_100;
  wire lopt_101;
  wire lopt_102;
  wire lopt_103;
  wire lopt_104;
  wire lopt_105;
  wire lopt_106;
  wire lopt_107;
  wire lopt_108;
  wire lopt_109;
  wire lopt_11;
  wire lopt_110;
  wire lopt_111;
  wire lopt_112;
  wire lopt_113;
  wire lopt_114;
  wire lopt_115;
  wire lopt_116;
  wire lopt_117;
  wire lopt_118;
  wire lopt_119;
  wire lopt_12;
  wire lopt_120;
  wire lopt_121;
  wire lopt_122;
  wire lopt_123;
  wire lopt_124;
  wire lopt_125;
  wire lopt_126;
  wire lopt_127;
  wire lopt_128;
  wire lopt_129;
  wire lopt_13;
  wire lopt_130;
  wire lopt_131;
  wire lopt_132;
  wire lopt_133;
  wire lopt_134;
  wire lopt_135;
  wire lopt_136;
  wire lopt_137;
  wire lopt_138;
  wire lopt_139;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire lopt_98;
  wire lopt_99;
  wire m2_is_div_instr;
  wire m2_piperun;
  wire m3_div_by_zero;
  wire m3_div_overflow_i_reg_0;
  wire m3_div_overflow_i_reg_1;
  wire m3_div_overflow_i_reg_2;
  wire m3_div_overflow_i_reg_3;
  wire m3_div_stall_i_reg_0;
  wire m3_div_stall_i_reg_1;
  wire m3_div_stall_i_reg_2;
  wire m3_last_cycle_i_1_n_0;
  wire m3_last_cycle_reg_0;
  wire m3_last_cycle_reg_1;
  wire m3_piperun;
  wire m3_sel_div_res;
  wire make_result_neg;
  wire make_result_neg_reg_0;
  wire negative_operands;
  wire negative_operands_reg_0;
  wire negative_operands_reg_1;
  wire next_sub_reg_0;
  wire p_0_in12_in;
  wire p_0_in15_in;
  wire [32:1]p_2_in;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;
  wire [3:0]NLW_R1_carry__7_CO_UNCONNECTED;
  wire [3:1]NLW_R1_carry__7_O_UNCONNECTED;
  wire \NLW_cnt_shifts_reg[1]_srl31_Q31_UNCONNECTED ;

  FDRE M3_Div_By_Zero_reg
       (.C(Clk),
        .CE(1'b1),
        .D(M3_Div_By_Zero_reg_1),
        .Q(m3_div_by_zero),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h2)) 
    \Q[32]_i_1 
       (.I0(E),
        .I1(O),
        .O(\Q[32]_i_1_n_0 ));
  FDRE \Q_reg[0] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(p_0_in12_in),
        .Q(Q[31]),
        .R(SR));
  FDRE \Q_reg[10] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[10].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[21]),
        .R(SR));
  FDRE \Q_reg[11] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[11].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[20]),
        .R(SR));
  FDRE \Q_reg[12] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[12].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[19]),
        .R(SR));
  FDRE \Q_reg[13] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[13].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[18]),
        .R(SR));
  FDRE \Q_reg[14] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[14].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[17]),
        .R(SR));
  FDRE \Q_reg[15] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[15].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[16]),
        .R(SR));
  FDRE \Q_reg[16] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[16].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[15]),
        .R(SR));
  FDRE \Q_reg[17] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[17].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[14]),
        .R(SR));
  FDRE \Q_reg[18] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[18].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[13]),
        .R(SR));
  FDRE \Q_reg[19] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[19].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[12]),
        .R(SR));
  FDRE \Q_reg[1] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[1].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[30]),
        .R(SR));
  FDRE \Q_reg[20] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[20].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[11]),
        .R(SR));
  FDRE \Q_reg[21] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[21].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[10]),
        .R(SR));
  FDRE \Q_reg[22] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[22].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[9]),
        .R(SR));
  FDRE \Q_reg[23] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[23].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[8]),
        .R(SR));
  FDRE \Q_reg[24] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[24].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[7]),
        .R(SR));
  FDRE \Q_reg[25] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[25].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[6]),
        .R(SR));
  FDRE \Q_reg[26] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[26].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[5]),
        .R(SR));
  FDRE \Q_reg[27] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[27].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[4]),
        .R(SR));
  FDRE \Q_reg[28] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[28].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[3]),
        .R(SR));
  FDRE \Q_reg[29] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[29].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[2]),
        .R(SR));
  FDRE \Q_reg[2] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[2].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[29]),
        .R(SR));
  FDRE \Q_reg[30] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[30].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[1]),
        .R(SR));
  FDRE \Q_reg[31] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[31].New_Q_MUXCY_XORCY_n_2 ),
        .Q(Q[0]),
        .R(SR));
  FDRE \Q_reg[32] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Q[32]_i_1_n_0 ),
        .Q(Q_1),
        .R(SR));
  FDRE \Q_reg[3] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[3].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[28]),
        .R(SR));
  FDRE \Q_reg[4] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[4].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[27]),
        .R(SR));
  FDRE \Q_reg[5] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[5].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[26]),
        .R(SR));
  FDRE \Q_reg[6] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[6].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[25]),
        .R(SR));
  FDRE \Q_reg[7] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[7].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[24]),
        .R(SR));
  FDRE \Q_reg[8] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[8].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[23]),
        .R(SR));
  FDRE \Q_reg[9] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(\Using_FPGA.New_Q_Handle[9].New_Q_MUXCY_XORCY_n_1 ),
        .Q(Q[22]),
        .R(SR));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY4 R1_carry
       (.CI(1'b0),
        .CO({R1_carry_n_0,R1_carry_n_1,R1_carry_n_2,R1_carry_n_3}),
        .CYINIT(R[32]),
        .DI({R[29],R[30],R[31],DI}),
        .O(p_2_in[4:1]),
        .S({R1_carry_i_1_n_0,R1_carry_i_2_n_0,R1_carry_i_3_n_0,R1_carry_i_4_n_0}));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY4 R1_carry__0
       (.CI(R1_carry_n_0),
        .CO({R1_carry__0_n_0,R1_carry__0_n_1,R1_carry__0_n_2,R1_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({R[25],R[26],R[27],R[28]}),
        .O(p_2_in[8:5]),
        .S({R1_carry__0_i_1_n_0,R1_carry__0_i_2_n_0,R1_carry__0_i_3_n_0,R1_carry__0_i_4_n_0}));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__0_i_1
       (.I0(D[24]),
        .I1(DI),
        .I2(R[25]),
        .O(R1_carry__0_i_1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__0_i_2
       (.I0(D[25]),
        .I1(DI),
        .I2(R[26]),
        .O(R1_carry__0_i_2_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__0_i_3
       (.I0(D[26]),
        .I1(DI),
        .I2(R[27]),
        .O(R1_carry__0_i_3_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__0_i_4
       (.I0(D[27]),
        .I1(DI),
        .I2(R[28]),
        .O(R1_carry__0_i_4_n_0));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY4 R1_carry__1
       (.CI(R1_carry__0_n_0),
        .CO({R1_carry__1_n_0,R1_carry__1_n_1,R1_carry__1_n_2,R1_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({R[21],R[22],R[23],R[24]}),
        .O(p_2_in[12:9]),
        .S({R1_carry__1_i_1_n_0,R1_carry__1_i_2_n_0,R1_carry__1_i_3_n_0,R1_carry__1_i_4_n_0}));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__1_i_1
       (.I0(D[20]),
        .I1(DI),
        .I2(R[21]),
        .O(R1_carry__1_i_1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__1_i_2
       (.I0(D[21]),
        .I1(DI),
        .I2(R[22]),
        .O(R1_carry__1_i_2_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__1_i_3
       (.I0(D[22]),
        .I1(DI),
        .I2(R[23]),
        .O(R1_carry__1_i_3_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__1_i_4
       (.I0(D[23]),
        .I1(DI),
        .I2(R[24]),
        .O(R1_carry__1_i_4_n_0));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY4 R1_carry__2
       (.CI(R1_carry__1_n_0),
        .CO({R1_carry__2_n_0,R1_carry__2_n_1,R1_carry__2_n_2,R1_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({R[17],R[18],R[19],R[20]}),
        .O(p_2_in[16:13]),
        .S({R1_carry__2_i_1_n_0,R1_carry__2_i_2_n_0,R1_carry__2_i_3_n_0,R1_carry__2_i_4_n_0}));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__2_i_1
       (.I0(D[16]),
        .I1(DI),
        .I2(R[17]),
        .O(R1_carry__2_i_1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__2_i_2
       (.I0(D[17]),
        .I1(DI),
        .I2(R[18]),
        .O(R1_carry__2_i_2_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__2_i_3
       (.I0(D[18]),
        .I1(DI),
        .I2(R[19]),
        .O(R1_carry__2_i_3_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__2_i_4
       (.I0(D[19]),
        .I1(DI),
        .I2(R[20]),
        .O(R1_carry__2_i_4_n_0));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY4 R1_carry__3
       (.CI(R1_carry__2_n_0),
        .CO({R1_carry__3_n_0,R1_carry__3_n_1,R1_carry__3_n_2,R1_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({R[13],R[14],R[15],R[16]}),
        .O(p_2_in[20:17]),
        .S({R1_carry__3_i_1_n_0,R1_carry__3_i_2_n_0,R1_carry__3_i_3_n_0,R1_carry__3_i_4_n_0}));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__3_i_1
       (.I0(D[12]),
        .I1(DI),
        .I2(R[13]),
        .O(R1_carry__3_i_1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__3_i_2
       (.I0(D[13]),
        .I1(DI),
        .I2(R[14]),
        .O(R1_carry__3_i_2_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__3_i_3
       (.I0(D[14]),
        .I1(DI),
        .I2(R[15]),
        .O(R1_carry__3_i_3_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__3_i_4
       (.I0(D[15]),
        .I1(DI),
        .I2(R[16]),
        .O(R1_carry__3_i_4_n_0));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY4 R1_carry__4
       (.CI(R1_carry__3_n_0),
        .CO({R1_carry__4_n_0,R1_carry__4_n_1,R1_carry__4_n_2,R1_carry__4_n_3}),
        .CYINIT(1'b0),
        .DI({R[9],R[10],R[11],R[12]}),
        .O(p_2_in[24:21]),
        .S({R1_carry__4_i_1_n_0,R1_carry__4_i_2_n_0,R1_carry__4_i_3_n_0,R1_carry__4_i_4_n_0}));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__4_i_1
       (.I0(D[8]),
        .I1(DI),
        .I2(R[9]),
        .O(R1_carry__4_i_1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__4_i_2
       (.I0(D[9]),
        .I1(DI),
        .I2(R[10]),
        .O(R1_carry__4_i_2_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__4_i_3
       (.I0(D[10]),
        .I1(DI),
        .I2(R[11]),
        .O(R1_carry__4_i_3_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__4_i_4
       (.I0(D[11]),
        .I1(DI),
        .I2(R[12]),
        .O(R1_carry__4_i_4_n_0));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY4 R1_carry__5
       (.CI(R1_carry__4_n_0),
        .CO({R1_carry__5_n_0,R1_carry__5_n_1,R1_carry__5_n_2,R1_carry__5_n_3}),
        .CYINIT(1'b0),
        .DI({R[5],R[6],R[7],R[8]}),
        .O(p_2_in[28:25]),
        .S({R1_carry__5_i_1_n_0,R1_carry__5_i_2_n_0,R1_carry__5_i_3_n_0,R1_carry__5_i_4_n_0}));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__5_i_1
       (.I0(D[4]),
        .I1(DI),
        .I2(R[5]),
        .O(R1_carry__5_i_1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__5_i_2
       (.I0(D[5]),
        .I1(DI),
        .I2(R[6]),
        .O(R1_carry__5_i_2_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__5_i_3
       (.I0(D[6]),
        .I1(DI),
        .I2(R[7]),
        .O(R1_carry__5_i_3_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__5_i_4
       (.I0(D[7]),
        .I1(DI),
        .I2(R[8]),
        .O(R1_carry__5_i_4_n_0));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY4 R1_carry__6
       (.CI(R1_carry__5_n_0),
        .CO({R1_carry__6_n_0,R1_carry__6_n_1,R1_carry__6_n_2,R1_carry__6_n_3}),
        .CYINIT(1'b0),
        .DI({R[1],R[2],R[3],R[4]}),
        .O(p_2_in[32:29]),
        .S({R1_carry__6_i_1_n_0,R1_carry__6_i_2_n_0,R1_carry__6_i_3_n_0,R1_carry__6_i_4_n_0}));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__6_i_1
       (.I0(D[0]),
        .I1(DI),
        .I2(R[1]),
        .O(R1_carry__6_i_1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__6_i_2
       (.I0(D[1]),
        .I1(DI),
        .I2(R[2]),
        .O(R1_carry__6_i_2_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__6_i_3
       (.I0(D[2]),
        .I1(DI),
        .I2(R[3]),
        .O(R1_carry__6_i_3_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry__6_i_4
       (.I0(D[3]),
        .I1(DI),
        .I2(R[4]),
        .O(R1_carry__6_i_4_n_0));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-8 {cell *THIS*}}" *) 
  CARRY4 R1_carry__7
       (.CI(R1_carry__6_n_0),
        .CO(NLW_R1_carry__7_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_R1_carry__7_O_UNCONNECTED[3:1],O}),
        .S({1'b0,1'b0,1'b0,R1_carry__7_i_1_n_0}));
  LUT2 #(
    .INIT(4'h6)) 
    R1_carry__7_i_1
       (.I0(DI),
        .I1(R[0]),
        .O(R1_carry__7_i_1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry_i_1
       (.I0(D[28]),
        .I1(DI),
        .I2(R[29]),
        .O(R1_carry_i_1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry_i_2
       (.I0(D[29]),
        .I1(DI),
        .I2(R[30]),
        .O(R1_carry_i_2_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    R1_carry_i_3
       (.I0(D[30]),
        .I1(DI),
        .I2(R[31]),
        .O(R1_carry_i_3_n_0));
  LUT1 #(
    .INIT(2'h2)) 
    R1_carry_i_4
       (.I0(D[31]),
        .O(R1_carry_i_4_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[0] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[32]),
        .Q(R[0]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[10] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[22]),
        .Q(R[10]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[11] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[21]),
        .Q(R[11]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[12] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[20]),
        .Q(R[12]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[13] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[19]),
        .Q(R[13]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[14] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[18]),
        .Q(R[14]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[15] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[17]),
        .Q(R[15]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[16] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[16]),
        .Q(R[16]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[17] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[15]),
        .Q(R[17]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[18] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[14]),
        .Q(R[18]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[19] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[13]),
        .Q(R[19]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[31]),
        .Q(R[1]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[20] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[12]),
        .Q(R[20]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[21] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[11]),
        .Q(R[21]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[22] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[10]),
        .Q(R[22]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[23] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[9]),
        .Q(R[23]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[24] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[8]),
        .Q(R[24]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[25] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[7]),
        .Q(R[25]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[26] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[6]),
        .Q(R[26]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[27] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[5]),
        .Q(R[27]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[28] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[4]),
        .Q(R[28]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[29] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[3]),
        .Q(R[29]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[2] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[30]),
        .Q(R[2]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[30] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[2]),
        .Q(R[30]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[31] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[1]),
        .Q(R[31]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[32] 
       (.C(Clk),
        .CE(\R_reg[32]_0 ),
        .D(p_0_in12_in),
        .Q(R[32]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[3] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[29]),
        .Q(R[3]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[4] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[28]),
        .Q(R[4]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[5] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[27]),
        .Q(R[5]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[6] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[26]),
        .Q(R[6]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[7] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[25]),
        .Q(R[7]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[8] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[24]),
        .Q(R[8]),
        .R(ex_start_div));
  FDRE #(
    .INIT(1'b0)) 
    \R_reg[9] 
       (.C(Clk),
        .CE(E),
        .D(p_2_in[23]),
        .Q(R[9]),
        .R(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY \Using_FPGA.D_Handle[0].MUXCY_XOR_I 
       (.D(\Using_FPGA.D_Handle[0].MUXCY_XOR_I_n_0 ),
        .LO(\Using_FPGA.D_Handle[1].MUXCY_XOR_I_n_0 ),
        .\Using_FPGA.D_Handle[0].D_Sel_reg (\Using_FPGA.D_Handle[0].D_Sel_reg ),
        .lopt(lopt_69));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_591 \Using_FPGA.D_Handle[10].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[10].MUXCY_XOR_I_n_0 ),
        .O(O42_out),
        .\Using_FPGA.D_reg[10] (\Using_FPGA.D_reg[10]_0 ),
        .\Using_FPGA.D_reg[10]_0 (\Using_FPGA.D_Handle[11].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_45),
        .lopt_1(lopt_46),
        .lopt_2(lopt_51));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_592 \Using_FPGA.D_Handle[11].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[11].MUXCY_XOR_I_n_0 ),
        .O(O43_out),
        .\Using_FPGA.D_reg[11] (\Using_FPGA.D_reg[11]_0 ),
        .\Using_FPGA.D_reg[11]_0 (\Using_FPGA.D_Handle[12].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_45),
        .lopt_1(lopt_46),
        .lopt_10(lopt_52),
        .lopt_11(lopt_53),
        .lopt_2(\Using_FPGA.D_reg[10]_0 ),
        .lopt_3(lopt_47),
        .lopt_4(lopt_48),
        .lopt_5(\Using_FPGA.D_reg[9]_0 ),
        .lopt_6(lopt_49),
        .lopt_7(lopt_50),
        .lopt_8(\Using_FPGA.D_reg[8]_0 ),
        .lopt_9(lopt_51));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_593 \Using_FPGA.D_Handle[12].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[12].MUXCY_XOR_I_n_0 ),
        .O(O44_out),
        .\Using_FPGA.D_reg[12] (\Using_FPGA.D_reg[12]_0 ),
        .\Using_FPGA.D_reg[12]_0 (\Using_FPGA.D_Handle[13].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_40),
        .lopt_1(lopt_41),
        .lopt_2(lopt_44));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_594 \Using_FPGA.D_Handle[13].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[13].MUXCY_XOR_I_n_0 ),
        .O(O45_out),
        .\Using_FPGA.D_reg[13] (\Using_FPGA.D_reg[13]_0 ),
        .\Using_FPGA.D_reg[13]_0 (\Using_FPGA.D_Handle[14].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_38),
        .lopt_1(lopt_39),
        .lopt_2(lopt_43));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_595 \Using_FPGA.D_Handle[14].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[14].MUXCY_XOR_I_n_0 ),
        .O(O46_out),
        .\Using_FPGA.D_reg[14] (\Using_FPGA.D_reg[14]_0 ),
        .\Using_FPGA.D_reg[14]_0 (\Using_FPGA.D_Handle[15].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .lopt_2(lopt_42));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_596 \Using_FPGA.D_Handle[15].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[15].MUXCY_XOR_I_n_0 ),
        .O(O47_out),
        .\Using_FPGA.D_reg[15] (\Using_FPGA.D_reg[15]_0 ),
        .\Using_FPGA.D_reg[15]_0 (\Using_FPGA.D_Handle[16].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .lopt_10(lopt_43),
        .lopt_11(lopt_44),
        .lopt_2(\Using_FPGA.D_reg[14]_0 ),
        .lopt_3(lopt_38),
        .lopt_4(lopt_39),
        .lopt_5(\Using_FPGA.D_reg[13]_0 ),
        .lopt_6(lopt_40),
        .lopt_7(lopt_41),
        .lopt_8(\Using_FPGA.D_reg[12]_0 ),
        .lopt_9(lopt_42));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_597 \Using_FPGA.D_Handle[16].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[16].MUXCY_XOR_I_n_0 ),
        .O(O48_out),
        .\Using_FPGA.D_reg[16] (\Using_FPGA.D_reg[16]_0 ),
        .\Using_FPGA.D_reg[16]_0 (\Using_FPGA.D_Handle[17].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_31),
        .lopt_1(lopt_32),
        .lopt_2(lopt_35));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_598 \Using_FPGA.D_Handle[17].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[17].MUXCY_XOR_I_n_0 ),
        .O(O49_out),
        .\Using_FPGA.D_reg[17] (\Using_FPGA.D_reg[17]_0 ),
        .\Using_FPGA.D_reg[17]_0 (\Using_FPGA.D_Handle[18].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_29),
        .lopt_1(lopt_30),
        .lopt_2(lopt_34));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_599 \Using_FPGA.D_Handle[18].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[18].MUXCY_XOR_I_n_0 ),
        .O(O50_out),
        .\Using_FPGA.D_reg[18] (\Using_FPGA.D_reg[18]_0 ),
        .\Using_FPGA.D_reg[18]_0 (\Using_FPGA.D_Handle[19].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_27),
        .lopt_1(lopt_28),
        .lopt_2(lopt_33));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_600 \Using_FPGA.D_Handle[19].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[19].MUXCY_XOR_I_n_0 ),
        .O(O51_out),
        .\Using_FPGA.D_reg[19] (\Using_FPGA.D_reg[19]_0 ),
        .\Using_FPGA.D_reg[19]_0 (\Using_FPGA.D_Handle[20].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_27),
        .lopt_1(lopt_28),
        .lopt_10(lopt_34),
        .lopt_11(lopt_35),
        .lopt_2(\Using_FPGA.D_reg[18]_0 ),
        .lopt_3(lopt_29),
        .lopt_4(lopt_30),
        .lopt_5(\Using_FPGA.D_reg[17]_0 ),
        .lopt_6(lopt_31),
        .lopt_7(lopt_32),
        .lopt_8(\Using_FPGA.D_reg[16]_0 ),
        .lopt_9(lopt_33));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_601 \Using_FPGA.D_Handle[1].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[1].MUXCY_XOR_I_n_0 ),
        .O(O33_out),
        .\Using_FPGA.D_reg[1] (\Using_FPGA.D_reg[1]_0 ),
        .\Using_FPGA.D_reg[1]_0 (\Using_FPGA.D_Handle[2].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_65),
        .lopt_1(lopt_66),
        .lopt_2(lopt_68));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_602 \Using_FPGA.D_Handle[20].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[20].MUXCY_XOR_I_n_0 ),
        .O(O52_out),
        .\Using_FPGA.D_reg[20] (\Using_FPGA.D_reg[20]_0 ),
        .\Using_FPGA.D_reg[20]_0 (\Using_FPGA.D_Handle[21].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_22),
        .lopt_1(lopt_23),
        .lopt_2(lopt_26));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_603 \Using_FPGA.D_Handle[21].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[21].MUXCY_XOR_I_n_0 ),
        .O(O53_out),
        .\Using_FPGA.D_reg[21] (\Using_FPGA.D_reg[21]_0 ),
        .\Using_FPGA.D_reg[21]_0 (\Using_FPGA.D_Handle[22].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_20),
        .lopt_1(lopt_21),
        .lopt_2(lopt_25));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_604 \Using_FPGA.D_Handle[22].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[22].MUXCY_XOR_I_n_0 ),
        .O(O54_out),
        .\Using_FPGA.D_reg[22] (\Using_FPGA.D_reg[22]_0 ),
        .\Using_FPGA.D_reg[22]_0 (\Using_FPGA.D_Handle[23].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(lopt_24));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_605 \Using_FPGA.D_Handle[23].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[23].MUXCY_XOR_I_n_0 ),
        .O(O55_out),
        .\Using_FPGA.D_reg[23] (\Using_FPGA.D_reg[23]_0 ),
        .\Using_FPGA.D_reg[23]_0 (\Using_FPGA.D_Handle[24].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_10(lopt_25),
        .lopt_11(lopt_26),
        .lopt_2(\Using_FPGA.D_reg[22]_0 ),
        .lopt_3(lopt_20),
        .lopt_4(lopt_21),
        .lopt_5(\Using_FPGA.D_reg[21]_0 ),
        .lopt_6(lopt_22),
        .lopt_7(lopt_23),
        .lopt_8(\Using_FPGA.D_reg[20]_0 ),
        .lopt_9(lopt_24));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_606 \Using_FPGA.D_Handle[24].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[24].MUXCY_XOR_I_n_0 ),
        .O(O56_out),
        .\Using_FPGA.D_reg[24] (\Using_FPGA.D_reg[24]_0 ),
        .\Using_FPGA.D_reg[24]_0 (\Using_FPGA.D_Handle[25].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_13),
        .lopt_1(lopt_14),
        .lopt_2(lopt_17));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_607 \Using_FPGA.D_Handle[25].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[25].MUXCY_XOR_I_n_0 ),
        .O(O57_out),
        .\Using_FPGA.D_reg[25] (\Using_FPGA.D_reg[25]_0 ),
        .\Using_FPGA.D_reg[25]_0 (\Using_FPGA.D_Handle[26].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_11),
        .lopt_1(lopt_12),
        .lopt_2(lopt_16));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_608 \Using_FPGA.D_Handle[26].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[26].MUXCY_XOR_I_n_0 ),
        .O(O58_out),
        .\Using_FPGA.D_reg[26] (\Using_FPGA.D_reg[26]_0 ),
        .\Using_FPGA.D_reg[26]_0 (\Using_FPGA.D_Handle[27].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_9),
        .lopt_1(lopt_10),
        .lopt_2(lopt_15));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_609 \Using_FPGA.D_Handle[27].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[27].MUXCY_XOR_I_n_0 ),
        .O(O59_out),
        .\Using_FPGA.D_reg[27] (\Using_FPGA.D_reg[27]_0 ),
        .\Using_FPGA.D_reg[27]_0 (\Using_FPGA.D_Handle[28].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_9),
        .lopt_1(lopt_10),
        .lopt_10(lopt_16),
        .lopt_11(lopt_17),
        .lopt_2(\Using_FPGA.D_reg[26]_0 ),
        .lopt_3(lopt_11),
        .lopt_4(lopt_12),
        .lopt_5(\Using_FPGA.D_reg[25]_0 ),
        .lopt_6(lopt_13),
        .lopt_7(lopt_14),
        .lopt_8(\Using_FPGA.D_reg[24]_0 ),
        .lopt_9(lopt_15));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_610 \Using_FPGA.D_Handle[28].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[28].MUXCY_XOR_I_n_0 ),
        .O(O60_out),
        .\Using_FPGA.D_reg[28] (\Using_FPGA.D_reg[28]_0 ),
        .\Using_FPGA.D_reg[28]_0 (\Using_FPGA.D_Handle[29].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_4),
        .lopt_1(lopt_5),
        .lopt_2(lopt_8));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_611 \Using_FPGA.D_Handle[29].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[29].MUXCY_XOR_I_n_0 ),
        .O(O61_out),
        .\Using_FPGA.D_reg[29] (\Using_FPGA.D_reg[29]_0 ),
        .\Using_FPGA.D_reg[29]_0 (\Using_FPGA.D_Handle[30].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_7));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_612 \Using_FPGA.D_Handle[2].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[2].MUXCY_XOR_I_n_0 ),
        .O(O34_out),
        .\Using_FPGA.D_reg[2] (\Using_FPGA.D_reg[2]_0 ),
        .\Using_FPGA.D_reg[2]_0 (\Using_FPGA.D_Handle[3].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_63),
        .lopt_1(lopt_64),
        .lopt_2(lopt_67));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_613 \Using_FPGA.D_Handle[30].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[30].MUXCY_XOR_I_n_0 ),
        .O(O62_out),
        .\Using_FPGA.D_reg[30] (\Using_FPGA.D_reg[30]_0 ),
        .\Using_FPGA.D_reg[30]_0 (LO),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_6));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_614 \Using_FPGA.D_Handle[31].MUXCY_XOR_I 
       (.CI(CI),
        .LO(LO),
        .O(O_0),
        .S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_10(lopt_7),
        .lopt_11(lopt_8),
        .lopt_2(\Using_FPGA.D_reg[30]_0 ),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(\Using_FPGA.D_reg[29]_0 ),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(\Using_FPGA.D_reg[28]_0 ),
        .lopt_9(lopt_6));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_615 \Using_FPGA.D_Handle[3].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[3].MUXCY_XOR_I_n_0 ),
        .O(O35_out),
        .\Using_FPGA.D_reg[3] (\Using_FPGA.D_reg[3]_0 ),
        .\Using_FPGA.D_reg[3]_0 (\Using_FPGA.D_Handle[4].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_63),
        .lopt_1(lopt_64),
        .lopt_2(\Using_FPGA.D_reg[2]_0 ),
        .lopt_3(lopt_65),
        .lopt_4(lopt_66),
        .lopt_5(\Using_FPGA.D_reg[1]_0 ),
        .lopt_6(lopt_67),
        .lopt_7(lopt_68),
        .lopt_8(lopt_69),
        .lopt_9(\Using_FPGA.D_Handle[0].D_Sel_reg ));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_616 \Using_FPGA.D_Handle[4].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[4].MUXCY_XOR_I_n_0 ),
        .O(O36_out),
        .\Using_FPGA.D_reg[4] (\Using_FPGA.D_reg[4]_0 ),
        .\Using_FPGA.D_reg[4]_0 (\Using_FPGA.D_Handle[5].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_58),
        .lopt_1(lopt_59),
        .lopt_2(lopt_62));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_617 \Using_FPGA.D_Handle[5].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[5].MUXCY_XOR_I_n_0 ),
        .O(O37_out),
        .\Using_FPGA.D_reg[5] (\Using_FPGA.D_reg[5]_0 ),
        .\Using_FPGA.D_reg[5]_0 (\Using_FPGA.D_Handle[6].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_56),
        .lopt_1(lopt_57),
        .lopt_2(lopt_61));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_618 \Using_FPGA.D_Handle[6].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[6].MUXCY_XOR_I_n_0 ),
        .O(O38_out),
        .\Using_FPGA.D_reg[6] (\Using_FPGA.D_reg[6]_0 ),
        .\Using_FPGA.D_reg[6]_0 (\Using_FPGA.D_Handle[7].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_54),
        .lopt_1(lopt_55),
        .lopt_2(lopt_60));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_619 \Using_FPGA.D_Handle[7].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[7].MUXCY_XOR_I_n_0 ),
        .O(O39_out),
        .\Using_FPGA.D_reg[7] (\Using_FPGA.D_reg[7]_0 ),
        .\Using_FPGA.D_reg[7]_0 (\Using_FPGA.D_Handle[8].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_54),
        .lopt_1(lopt_55),
        .lopt_10(lopt_61),
        .lopt_11(lopt_62),
        .lopt_2(\Using_FPGA.D_reg[6]_0 ),
        .lopt_3(lopt_56),
        .lopt_4(lopt_57),
        .lopt_5(\Using_FPGA.D_reg[5]_0 ),
        .lopt_6(lopt_58),
        .lopt_7(lopt_59),
        .lopt_8(\Using_FPGA.D_reg[4]_0 ),
        .lopt_9(lopt_60));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_620 \Using_FPGA.D_Handle[8].MUXCY_XOR_I 
       (.LO(\Using_FPGA.D_Handle[8].MUXCY_XOR_I_n_0 ),
        .O(O40_out),
        .\Using_FPGA.D_reg[8] (\Using_FPGA.D_reg[8]_0 ),
        .\Using_FPGA.D_reg[8]_0 (\Using_FPGA.D_Handle[9].MUXCY_XOR_I_n_0 ),
        .lopt(lopt_49),
        .lopt_1(lopt_50),
        .lopt_2(lopt_53));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_621 \Using_FPGA.D_Handle[9].MUXCY_XOR_I 
       (.CI(\Using_FPGA.D_Handle[10].MUXCY_XOR_I_n_0 ),
        .LO(\Using_FPGA.D_Handle[9].MUXCY_XOR_I_n_0 ),
        .O(O41_out),
        .\Using_FPGA.D_reg[9] (\Using_FPGA.D_reg[9]_0 ),
        .lopt(lopt_47),
        .lopt_1(lopt_48),
        .lopt_2(lopt_52));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[0] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(\Using_FPGA.D_Handle[0].MUXCY_XOR_I_n_0 ),
        .Q(D[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[10] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O42_out),
        .Q(D[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[11] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O43_out),
        .Q(D[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[12] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O44_out),
        .Q(D[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[13] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O45_out),
        .Q(D[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[14] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O46_out),
        .Q(D[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[15] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O47_out),
        .Q(D[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[16] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O48_out),
        .Q(D[16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[17] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O49_out),
        .Q(D[17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[18] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O50_out),
        .Q(D[18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[19] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O51_out),
        .Q(D[19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[1] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O33_out),
        .Q(D[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[20] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O52_out),
        .Q(D[20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[21] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O53_out),
        .Q(D[21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[22] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O54_out),
        .Q(D[22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[23] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O55_out),
        .Q(D[23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[24] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O56_out),
        .Q(D[24]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[25] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O57_out),
        .Q(D[25]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[26] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O58_out),
        .Q(D[26]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[27] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O59_out),
        .Q(D[27]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[28] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O60_out),
        .Q(D[28]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[29] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O61_out),
        .Q(D[29]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[2] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O34_out),
        .Q(D[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[30] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O62_out),
        .Q(D[30]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[31] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O_0),
        .Q(D[31]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[3] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O35_out),
        .Q(D[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[4] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O36_out),
        .Q(D[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[5] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O37_out),
        .Q(D[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[6] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O38_out),
        .Q(D[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[7] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O39_out),
        .Q(D[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[8] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O40_out),
        .Q(D[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.D_reg[9] 
       (.C(Clk),
        .CE(ex_start_div),
        .D(O41_out),
        .Q(D[9]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__106 
       (.I0(m3_div_stall_i_reg_0),
        .O(m3_div_stall_i_reg_1));
  LUT6 #(
    .INIT(64'h00000000FEFFFE00)) 
    \Using_FPGA.Native_i_2__12 
       (.I0(m3_div_by_zero),
        .I1(\Using_FPGA.Native ),
        .I2(m3_div_overflow_i_reg_0),
        .I3(m3_piperun),
        .I4(\Using_FPGA.Native_0 ),
        .I5(WB_Div_Zero_Overflow_reg),
        .O(M3_Div_By_Zero_reg_0));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1 \Using_FPGA.New_Q_Handle[0].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .New_Q_Sel_31(New_Q_Sel_31),
        .Q(Q[30]),
        .\R_reg[32] (\Q_reg[31]_0 [31]),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_622 \Using_FPGA.New_Q_Handle[0].New_Q_MUXCY_XORCY 
       (.D(p_0_in12_in),
        .LO(\Using_FPGA.New_Q_Handle[1].New_Q_MUXCY_XORCY_n_0 ),
        .New_Q_Sel_31(New_Q_Sel_31),
        .lopt(lopt_139),
        .m2_is_div_instr(m2_is_div_instr),
        .m2_piperun(m2_piperun),
        .m3_div_overflow_i_i_2_0(floating_hold_div_overflow_reg_0),
        .m3_div_overflow_i_reg(m3_div_overflow_i_reg_1),
        .m3_div_overflow_i_reg_0(m3_div_overflow_i_reg_3),
        .m3_div_overflow_i_reg_1(m3_div_overflow_i_reg_0),
        .m3_div_overflow_i_reg_2(last_cycle_reg_0),
        .m3_div_overflow_i_reg_3(m3_div_stall_i_reg_0),
        .m3_sel_div_res(m3_sel_div_res),
        .negative_operands(negative_operands),
        .negative_operands_reg(negative_operands_reg_0));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_623 \Using_FPGA.New_Q_Handle[10].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[20]),
        .\Q_reg[10] (\Q_reg[31]_0 [21]),
        .S(New_Q_Sel_21),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_624 \Using_FPGA.New_Q_Handle[10].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[10].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[10].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[10] (\Using_FPGA.New_Q_Handle[11].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_21),
        .lopt(lopt_115),
        .lopt_1(lopt_116),
        .lopt_2(lopt_121));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_625 \Using_FPGA.New_Q_Handle[11].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[19]),
        .\Q_reg[11] (\Q_reg[31]_0 [20]),
        .S(New_Q_Sel_20),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_626 \Using_FPGA.New_Q_Handle[11].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[11].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[11].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[11] (\Using_FPGA.New_Q_Handle[12].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_20),
        .lopt(lopt_115),
        .lopt_1(lopt_116),
        .lopt_10(lopt_122),
        .lopt_11(lopt_123),
        .lopt_2(New_Q_Sel_21),
        .lopt_3(lopt_117),
        .lopt_4(lopt_118),
        .lopt_5(New_Q_Sel_22),
        .lopt_6(lopt_119),
        .lopt_7(lopt_120),
        .lopt_8(New_Q_Sel_23),
        .lopt_9(lopt_121));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_627 \Using_FPGA.New_Q_Handle[12].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[18]),
        .\Q_reg[12] (\Q_reg[31]_0 [19]),
        .S(New_Q_Sel_19),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_628 \Using_FPGA.New_Q_Handle[12].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[12].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[12].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[12] (\Using_FPGA.New_Q_Handle[13].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_19),
        .lopt(lopt_110),
        .lopt_1(lopt_111),
        .lopt_2(lopt_114));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_629 \Using_FPGA.New_Q_Handle[13].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[17]),
        .\Q_reg[13] (\Q_reg[31]_0 [18]),
        .S(New_Q_Sel_18),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_630 \Using_FPGA.New_Q_Handle[13].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[13].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[13].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[13] (\Using_FPGA.New_Q_Handle[14].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_18),
        .lopt(lopt_108),
        .lopt_1(lopt_109),
        .lopt_2(lopt_113));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_631 \Using_FPGA.New_Q_Handle[14].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[16]),
        .\Q_reg[14] (\Q_reg[31]_0 [17]),
        .S(New_Q_Sel_17),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_632 \Using_FPGA.New_Q_Handle[14].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[14].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[14].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[14] (\Using_FPGA.New_Q_Handle[15].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_17),
        .lopt(lopt_106),
        .lopt_1(lopt_107),
        .lopt_2(lopt_112));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_633 \Using_FPGA.New_Q_Handle[15].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[15]),
        .\Q_reg[15] (\Q_reg[31]_0 [16]),
        .S(New_Q_Sel_16),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_634 \Using_FPGA.New_Q_Handle[15].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[15].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[15].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[15] (\Using_FPGA.New_Q_Handle[16].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_16),
        .lopt(lopt_106),
        .lopt_1(lopt_107),
        .lopt_10(lopt_113),
        .lopt_11(lopt_114),
        .lopt_2(New_Q_Sel_17),
        .lopt_3(lopt_108),
        .lopt_4(lopt_109),
        .lopt_5(New_Q_Sel_18),
        .lopt_6(lopt_110),
        .lopt_7(lopt_111),
        .lopt_8(New_Q_Sel_19),
        .lopt_9(lopt_112));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_635 \Using_FPGA.New_Q_Handle[16].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[14]),
        .\Q_reg[16] (\Q_reg[31]_0 [15]),
        .S(New_Q_Sel_15),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_636 \Using_FPGA.New_Q_Handle[16].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[16].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[16].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[16] (\Using_FPGA.New_Q_Handle[17].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_15),
        .lopt(lopt_101),
        .lopt_1(lopt_102),
        .lopt_2(lopt_105));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_637 \Using_FPGA.New_Q_Handle[17].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[13]),
        .\Q_reg[17] (\Q_reg[31]_0 [14]),
        .S(New_Q_Sel_14),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_638 \Using_FPGA.New_Q_Handle[17].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[17].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[17].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[17] (\Using_FPGA.New_Q_Handle[18].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_14),
        .lopt(lopt_99),
        .lopt_1(lopt_100),
        .lopt_2(lopt_104));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_639 \Using_FPGA.New_Q_Handle[18].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[12]),
        .\Q_reg[18] (\Q_reg[31]_0 [13]),
        .S(New_Q_Sel_13),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_640 \Using_FPGA.New_Q_Handle[18].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[18].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[18].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[18] (\Using_FPGA.New_Q_Handle[19].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_13),
        .lopt(lopt_97),
        .lopt_1(lopt_98),
        .lopt_2(lopt_103));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_641 \Using_FPGA.New_Q_Handle[19].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[11]),
        .\Q_reg[19] (\Q_reg[31]_0 [12]),
        .S(New_Q_Sel_12),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_642 \Using_FPGA.New_Q_Handle[19].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[19].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[19].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[19] (\Using_FPGA.New_Q_Handle[20].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_12),
        .lopt(lopt_97),
        .lopt_1(lopt_98),
        .lopt_10(lopt_104),
        .lopt_11(lopt_105),
        .lopt_2(New_Q_Sel_13),
        .lopt_3(lopt_99),
        .lopt_4(lopt_100),
        .lopt_5(New_Q_Sel_14),
        .lopt_6(lopt_101),
        .lopt_7(lopt_102),
        .lopt_8(New_Q_Sel_15),
        .lopt_9(lopt_103));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_643 \Using_FPGA.New_Q_Handle[1].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[29]),
        .\Q_reg[1] (\Q_reg[31]_0 [30]),
        .S(New_Q_Sel_30),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_644 \Using_FPGA.New_Q_Handle[1].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[1].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[1].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[1] (\Using_FPGA.New_Q_Handle[2].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_30),
        .lopt(lopt_135),
        .lopt_1(lopt_136),
        .lopt_2(lopt_138));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_645 \Using_FPGA.New_Q_Handle[20].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[10]),
        .\Q_reg[20] (\Q_reg[31]_0 [11]),
        .S(New_Q_Sel_11),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_646 \Using_FPGA.New_Q_Handle[20].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[20].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[20].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[20] (\Using_FPGA.New_Q_Handle[21].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_11),
        .lopt(lopt_92),
        .lopt_1(lopt_93),
        .lopt_2(lopt_96));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_647 \Using_FPGA.New_Q_Handle[21].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[9]),
        .\Q_reg[21] (\Q_reg[31]_0 [10]),
        .S(New_Q_Sel_10),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_648 \Using_FPGA.New_Q_Handle[21].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[21].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[21].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[21] (\Using_FPGA.New_Q_Handle[22].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_10),
        .lopt(lopt_90),
        .lopt_1(lopt_91),
        .lopt_2(lopt_95));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_649 \Using_FPGA.New_Q_Handle[22].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[8]),
        .\Q_reg[22] (\Q_reg[31]_0 [9]),
        .S(New_Q_Sel_9),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_650 \Using_FPGA.New_Q_Handle[22].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[22].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[22].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[22] (\Using_FPGA.New_Q_Handle[23].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_9),
        .lopt(lopt_88),
        .lopt_1(lopt_89),
        .lopt_2(lopt_94));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_651 \Using_FPGA.New_Q_Handle[23].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[7]),
        .\Q_reg[23] (\Q_reg[31]_0 [8]),
        .S(New_Q_Sel_8),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_652 \Using_FPGA.New_Q_Handle[23].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[23].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[23].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[23] (\Using_FPGA.New_Q_Handle[24].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_8),
        .lopt(lopt_88),
        .lopt_1(lopt_89),
        .lopt_10(lopt_95),
        .lopt_11(lopt_96),
        .lopt_2(New_Q_Sel_9),
        .lopt_3(lopt_90),
        .lopt_4(lopt_91),
        .lopt_5(New_Q_Sel_10),
        .lopt_6(lopt_92),
        .lopt_7(lopt_93),
        .lopt_8(New_Q_Sel_11),
        .lopt_9(lopt_94));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_653 \Using_FPGA.New_Q_Handle[24].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[6]),
        .\Q_reg[24] (\Q_reg[31]_0 [7]),
        .S(New_Q_Sel_7),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_654 \Using_FPGA.New_Q_Handle[24].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[24].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[24].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[24] (\Using_FPGA.New_Q_Handle[25].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_7),
        .lopt(lopt_83),
        .lopt_1(lopt_84),
        .lopt_2(lopt_87));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_655 \Using_FPGA.New_Q_Handle[25].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[5]),
        .\Q_reg[25] (\Q_reg[31]_0 [6]),
        .S(New_Q_Sel_6),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_656 \Using_FPGA.New_Q_Handle[25].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[25].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[25].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[25] (\Using_FPGA.New_Q_Handle[26].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_6),
        .lopt(lopt_81),
        .lopt_1(lopt_82),
        .lopt_2(lopt_86));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_657 \Using_FPGA.New_Q_Handle[26].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[4]),
        .\Q_reg[26] (\Q_reg[31]_0 [5]),
        .S(New_Q_Sel_5),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_658 \Using_FPGA.New_Q_Handle[26].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[26].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[26].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[26] (\Using_FPGA.New_Q_Handle[27].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_5),
        .lopt(lopt_79),
        .lopt_1(lopt_80),
        .lopt_2(lopt_85));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_659 \Using_FPGA.New_Q_Handle[27].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[3]),
        .\Q_reg[27] (\Q_reg[31]_0 [4]),
        .S(New_Q_Sel_4),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_660 \Using_FPGA.New_Q_Handle[27].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[27].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[27].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[27] (\Using_FPGA.New_Q_Handle[28].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_4),
        .lopt(lopt_79),
        .lopt_1(lopt_80),
        .lopt_10(lopt_86),
        .lopt_11(lopt_87),
        .lopt_2(New_Q_Sel_5),
        .lopt_3(lopt_81),
        .lopt_4(lopt_82),
        .lopt_5(New_Q_Sel_6),
        .lopt_6(lopt_83),
        .lopt_7(lopt_84),
        .lopt_8(New_Q_Sel_7),
        .lopt_9(lopt_85));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_661 \Using_FPGA.New_Q_Handle[28].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[2]),
        .\Q_reg[28] (\Q_reg[31]_0 [3]),
        .S(New_Q_Sel_3),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_662 \Using_FPGA.New_Q_Handle[28].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[28].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[28].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[28] (\Using_FPGA.New_Q_Handle[29].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_3),
        .lopt(lopt_74),
        .lopt_1(lopt_75),
        .lopt_2(lopt_78));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_663 \Using_FPGA.New_Q_Handle[29].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[1]),
        .\Q_reg[29] (\Q_reg[31]_0 [2]),
        .S(New_Q_Sel_2),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_664 \Using_FPGA.New_Q_Handle[29].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[29].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[29].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[29] (\Using_FPGA.New_Q_Handle[30].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_2),
        .lopt(lopt_72),
        .lopt_1(lopt_73),
        .lopt_2(lopt_77));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_665 \Using_FPGA.New_Q_Handle[2].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[28]),
        .\Q_reg[2] (\Q_reg[31]_0 [29]),
        .S(New_Q_Sel_29),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_666 \Using_FPGA.New_Q_Handle[2].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[2].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[2].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[2] (\Using_FPGA.New_Q_Handle[3].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_29),
        .lopt(lopt_133),
        .lopt_1(lopt_134),
        .lopt_2(lopt_137));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_667 \Using_FPGA.New_Q_Handle[30].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[0]),
        .\Q_reg[30] (\Q_reg[31]_0 [1]),
        .S(New_Q_Sel_1),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_668 \Using_FPGA.New_Q_Handle[30].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[30].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[30].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[30] (\Using_FPGA.New_Q_Handle[31].New_Q_MUXCY_XORCY_n_1 ),
        .S(New_Q_Sel_1),
        .lopt(lopt_70),
        .lopt_1(lopt_71),
        .lopt_2(lopt_76));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_669 \Using_FPGA.New_Q_Handle[31].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q_1),
        .\Q_reg[31] (\Q_reg[31]_0 [0]),
        .S(New_Q_Sel_0),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_670 \Using_FPGA.New_Q_Handle[31].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[31].New_Q_MUXCY_XORCY_n_1 ),
        .New_Q_Carry(New_Q_Carry),
        .O(\Using_FPGA.New_Q_Handle[31].New_Q_MUXCY_XORCY_n_2 ),
        .\Q_reg[31] (last_cycle_reg_0),
        .\Q_reg[31]_0 (\Q_reg[31]_0 [31]),
        .S(New_Q_Sel_0),
        .ex_div_unsigned(ex_div_unsigned),
        .ex_start_div(ex_start_div),
        .lopt(lopt_70),
        .lopt_1(lopt_71),
        .lopt_10(lopt_77),
        .lopt_11(lopt_78),
        .lopt_2(New_Q_Sel_1),
        .lopt_3(lopt_72),
        .lopt_4(lopt_73),
        .lopt_5(New_Q_Sel_2),
        .lopt_6(lopt_74),
        .lopt_7(lopt_75),
        .lopt_8(New_Q_Sel_3),
        .lopt_9(lopt_76),
        .make_result_neg(make_result_neg));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_671 \Using_FPGA.New_Q_Handle[3].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[27]),
        .\Q_reg[3] (\Q_reg[31]_0 [28]),
        .S(New_Q_Sel_28),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_672 \Using_FPGA.New_Q_Handle[3].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[3].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[3].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[3] (\Using_FPGA.New_Q_Handle[4].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_28),
        .lopt(lopt_133),
        .lopt_1(lopt_134),
        .lopt_2(New_Q_Sel_29),
        .lopt_3(lopt_135),
        .lopt_4(lopt_136),
        .lopt_5(New_Q_Sel_30),
        .lopt_6(lopt_137),
        .lopt_7(lopt_138),
        .lopt_8(lopt_139),
        .lopt_9(New_Q_Sel_31));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_673 \Using_FPGA.New_Q_Handle[4].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[26]),
        .\Q_reg[4] (\Q_reg[31]_0 [27]),
        .S(New_Q_Sel_27),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_674 \Using_FPGA.New_Q_Handle[4].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[4].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[4].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[4] (\Using_FPGA.New_Q_Handle[5].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_27),
        .lopt(lopt_128),
        .lopt_1(lopt_129),
        .lopt_2(lopt_132));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_675 \Using_FPGA.New_Q_Handle[5].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[25]),
        .\Q_reg[5] (\Q_reg[31]_0 [26]),
        .S(New_Q_Sel_26),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_676 \Using_FPGA.New_Q_Handle[5].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[5].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[5].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[5] (\Using_FPGA.New_Q_Handle[6].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_26),
        .lopt(lopt_126),
        .lopt_1(lopt_127),
        .lopt_2(lopt_131));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_677 \Using_FPGA.New_Q_Handle[6].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[24]),
        .\Q_reg[6] (\Q_reg[31]_0 [25]),
        .S(New_Q_Sel_25),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_678 \Using_FPGA.New_Q_Handle[6].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[6].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[6].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[6] (\Using_FPGA.New_Q_Handle[7].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_25),
        .lopt(lopt_124),
        .lopt_1(lopt_125),
        .lopt_2(lopt_130));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_679 \Using_FPGA.New_Q_Handle[7].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[23]),
        .\Q_reg[7] (\Q_reg[31]_0 [24]),
        .S(New_Q_Sel_24),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_680 \Using_FPGA.New_Q_Handle[7].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[7].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[7].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[7] (\Using_FPGA.New_Q_Handle[8].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_24),
        .lopt(lopt_124),
        .lopt_1(lopt_125),
        .lopt_10(lopt_131),
        .lopt_11(lopt_132),
        .lopt_2(New_Q_Sel_25),
        .lopt_3(lopt_126),
        .lopt_4(lopt_127),
        .lopt_5(New_Q_Sel_26),
        .lopt_6(lopt_128),
        .lopt_7(lopt_129),
        .lopt_8(New_Q_Sel_27),
        .lopt_9(lopt_130));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_681 \Using_FPGA.New_Q_Handle[8].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[22]),
        .\Q_reg[8] (\Q_reg[31]_0 [23]),
        .S(New_Q_Sel_23),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_682 \Using_FPGA.New_Q_Handle[8].New_Q_MUXCY_XORCY 
       (.LO(\Using_FPGA.New_Q_Handle[8].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[8].New_Q_MUXCY_XORCY_n_1 ),
        .\Q_reg[8] (\Using_FPGA.New_Q_Handle[9].New_Q_MUXCY_XORCY_n_0 ),
        .S(New_Q_Sel_23),
        .lopt(lopt_119),
        .lopt_1(lopt_120),
        .lopt_2(lopt_123));
  microblaze_microblaze_0_0_MB_LUT4__parameterized1_683 \Using_FPGA.New_Q_Handle[9].New_Q_LUT4 
       (.New_Q_Carry(New_Q_Carry),
        .Q(Q[21]),
        .\Q_reg[9] (\Q_reg[31]_0 [22]),
        .S(New_Q_Sel_22),
        .ex_start_div(ex_start_div));
  microblaze_microblaze_0_0_MB_MUXCY_XORCY_684 \Using_FPGA.New_Q_Handle[9].New_Q_MUXCY_XORCY 
       (.CI(\Using_FPGA.New_Q_Handle[10].New_Q_MUXCY_XORCY_n_0 ),
        .LO(\Using_FPGA.New_Q_Handle[9].New_Q_MUXCY_XORCY_n_0 ),
        .O(\Using_FPGA.New_Q_Handle[9].New_Q_MUXCY_XORCY_n_1 ),
        .S(New_Q_Sel_22),
        .lopt(lopt_117),
        .lopt_1(lopt_118),
        .lopt_2(lopt_122));
  LUT3 #(
    .INIT(8'h54)) 
    WB_Div_Zero_Overflow_i_1
       (.I0(WB_Div_Zero_Overflow_reg),
        .I1(m3_div_overflow_i_reg_0),
        .I2(m3_div_by_zero),
        .O(wb_exception_from_m3_reg_rep__0));
  (* SHREG_EXTRACT = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cnt_shifts_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cnt_shifts_reg[1]_srl31_n_0 ),
        .Q(p_0_in15_in),
        .R(1'b0));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DATA_FLOW_I1/Using_Div_Unit.Div_Unit_I1/cnt_shifts_reg " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DATA_FLOW_I1/Using_Div_Unit.Div_Unit_I1/cnt_shifts_reg[1]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cnt_shifts_reg[1]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(Clk),
        .D(\cnt_shifts_reg[0]_0 ),
        .Q(\cnt_shifts_reg[1]_srl31_n_0 ),
        .Q31(\NLW_cnt_shifts_reg[1]_srl31_Q31_UNCONNECTED ));
  FDRE div_busy_reg
       (.C(Clk),
        .CE(1'b1),
        .D(div_iterations_early),
        .Q(E),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0000000000000454)) 
    div_iterations_early_i_1
       (.I0(m3_last_cycle_reg_1),
        .I1(div_iterations_early_reg_0),
        .I2(ex_start_div),
        .I3(EX_Op1_Zero),
        .I4(last_cycle_i_1_n_0),
        .I5(sync_reset),
        .O(div_iterations_early_i_1_n_0));
  FDRE div_iterations_early_reg
       (.C(Clk),
        .CE(1'b1),
        .D(div_iterations_early_i_1_n_0),
        .Q(div_iterations_early_reg_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT4 #(
    .INIT(16'h00EA)) 
    floating_div_aborting_i_1
       (.I0(floating_div_aborting),
        .I1(div_iterations_early_reg_0),
        .I2(m3_last_cycle_reg_1),
        .I3(p_0_in15_in),
        .O(floating_div_aborting_i_1_n_0));
  FDRE floating_div_aborting_reg
       (.C(Clk),
        .CE(1'b1),
        .D(floating_div_aborting_i_1_n_0),
        .Q(floating_div_aborting),
        .R(sync_reset));
  FDRE floating_hold_div_by_zero_reg
       (.C(Clk),
        .CE(1'b1),
        .D(floating_hold_div_by_zero_reg_0),
        .Q(floating_hold_div_by_zero__0),
        .R(1'b0));
  FDRE floating_hold_div_overflow_reg
       (.C(Clk),
        .CE(1'b1),
        .D(floating_hold_div_overflow_reg_1),
        .Q(floating_hold_div_overflow_reg_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    last_cycle_i_1
       (.I0(floating_div_aborting),
        .I1(p_0_in15_in),
        .I2(m3_last_cycle_reg_1),
        .I3(ex_start_div),
        .O(last_cycle_i_1_n_0));
  FDRE last_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(last_cycle_i_1_n_0),
        .Q(last_cycle_reg_0),
        .R(sync_reset));
  FDRE m3_div_overflow_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(m3_div_overflow_i_reg_2),
        .Q(m3_div_overflow_i_reg_0),
        .R(1'b0));
  FDRE m3_div_stall_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(m3_div_stall_i_reg_2),
        .Q(m3_div_stall_i_reg_0),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h000000FE)) 
    m3_last_cycle_i_1
       (.I0(m3_last_cycle_reg_0),
        .I1(m3_last_cycle_reg_1),
        .I2(last_cycle_reg_0),
        .I3(sync_reset),
        .I4(ex_start_div),
        .O(m3_last_cycle_i_1_n_0));
  FDRE m3_last_cycle_reg
       (.C(Clk),
        .CE(1'b1),
        .D(m3_last_cycle_i_1_n_0),
        .Q(m3_last_cycle_reg_0),
        .R(1'b0));
  FDRE make_result_neg_reg
       (.C(Clk),
        .CE(1'b1),
        .D(make_result_neg_reg_0),
        .Q(make_result_neg),
        .R(sync_reset));
  FDRE negative_operands_reg
       (.C(Clk),
        .CE(1'b1),
        .D(negative_operands_reg_1),
        .Q(negative_operands),
        .R(sync_reset));
  FDRE next_sub_reg
       (.C(Clk),
        .CE(1'b1),
        .D(next_sub_reg_0),
        .Q(DI),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "ILMB_Interface_ff" *) 
module microblaze_microblaze_0_0_ILMB_Interface_ff
   (if3_allow_iready,
    if2_ilmb_issued,
    if3_potential_bubble,
    if3_ilmb_iready,
    S,
    if4_data,
    \Use_ILMB.if2_ilmb_issued_reg_0 ,
    \Use_ILMB.if3_iready_hold_reg_0 ,
    in,
    sync_reset,
    if3_piperun,
    Clk,
    \Use_ILMB.if3_allow_iready_reg_0 ,
    \Use_ILMB.if2_ilmb_issued_reg_1 ,
    \Use_ILMB.if3_iready_hold_reg_1 ,
    \Use_ILMB.if3_potential_bubble_reg_0 ,
    if4_piperun,
    IReady,
    LOCKSTEP_Master_Out,
    \cur_data_i_reg[31] ,
    if2_piperun,
    IWAIT,
    Instr);
  output if3_allow_iready;
  output if2_ilmb_issued;
  output if3_potential_bubble;
  output if3_ilmb_iready;
  output S;
  output [0:31]if4_data;
  output \Use_ILMB.if2_ilmb_issued_reg_0 ;
  output \Use_ILMB.if3_iready_hold_reg_0 ;
  output [0:0]in;
  input sync_reset;
  input if3_piperun;
  input Clk;
  input \Use_ILMB.if3_allow_iready_reg_0 ;
  input \Use_ILMB.if2_ilmb_issued_reg_1 ;
  input \Use_ILMB.if3_iready_hold_reg_1 ;
  input \Use_ILMB.if3_potential_bubble_reg_0 ;
  input if4_piperun;
  input IReady;
  input [31:0]LOCKSTEP_Master_Out;
  input \cur_data_i_reg[31] ;
  input if2_piperun;
  input IWAIT;
  input [0:31]Instr;

  wire Clk;
  wire IReady;
  wire IWAIT;
  wire [0:31]Instr;
  wire [31:0]LOCKSTEP_Master_Out;
  wire S;
  wire \Use_ILMB.if2_ilmb_issued_reg_0 ;
  wire \Use_ILMB.if2_ilmb_issued_reg_1 ;
  wire \Use_ILMB.if2_iready_hold_i_1_n_0 ;
  wire \Use_ILMB.if3_allow_iready_reg_0 ;
  wire \Use_ILMB.if3_iready_hold_reg_0 ;
  wire \Use_ILMB.if3_iready_hold_reg_1 ;
  wire \Use_ILMB.if3_iready_hold_reg_n_0 ;
  wire \Use_ILMB.if3_potential_bubble_reg_0 ;
  wire \Use_ILMB.if4_ILMB_Data_Strobe_i_i_1_n_0 ;
  wire \cur_data_i_reg[31] ;
  wire if2_ilmb_issued;
  wire if2_iready_hold;
  wire if2_piperun;
  wire if3_allow_iready;
  wire if3_ilmb_iready;
  wire if3_piperun;
  wire if3_potential_bubble;
  wire [0:31]if4_data;
  wire if4_ilmb_data_strobe;
  wire if4_piperun;
  wire if4_use_bubble;
  wire [0:31]ilmb_data_bubble;
  wire [0:31]ilmb_data_direct;
  wire [0:0]in;
  wire p_5_out;
  wire sync_reset;

  FDRE \Use_ILMB.if2_ilmb_issued_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_ILMB.if2_ilmb_issued_reg_1 ),
        .Q(if2_ilmb_issued),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h000000EA)) 
    \Use_ILMB.if2_iready_hold_i_1 
       (.I0(if2_iready_hold),
        .I1(IReady),
        .I2(if2_ilmb_issued),
        .I3(if2_piperun),
        .I4(sync_reset),
        .O(\Use_ILMB.if2_iready_hold_i_1_n_0 ));
  FDRE \Use_ILMB.if2_iready_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_ILMB.if2_iready_hold_i_1_n_0 ),
        .Q(if2_iready_hold),
        .R(1'b0));
  FDRE \Use_ILMB.if3_allow_iready_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_ILMB.if3_allow_iready_reg_0 ),
        .Q(if3_allow_iready),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hA8A8FFFFA8A8F000)) 
    \Use_ILMB.if3_iready_hold_i_2 
       (.I0(if2_ilmb_issued),
        .I1(if2_iready_hold),
        .I2(IReady),
        .I3(if3_allow_iready),
        .I4(if2_piperun),
        .I5(\Use_ILMB.if3_iready_hold_reg_n_0 ),
        .O(\Use_ILMB.if2_ilmb_issued_reg_0 ));
  FDRE \Use_ILMB.if3_iready_hold_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_ILMB.if3_iready_hold_reg_1 ),
        .Q(\Use_ILMB.if3_iready_hold_reg_n_0 ),
        .R(1'b0));
  FDRE \Use_ILMB.if3_potential_bubble_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_ILMB.if3_potential_bubble_reg_0 ),
        .Q(if3_potential_bubble),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0C0C000A)) 
    \Use_ILMB.if4_ILMB_Data_Strobe_i_i_1 
       (.I0(if4_ilmb_data_strobe),
        .I1(if3_ilmb_iready),
        .I2(sync_reset),
        .I3(if4_piperun),
        .I4(if3_piperun),
        .O(\Use_ILMB.if4_ILMB_Data_Strobe_i_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hF8)) 
    \Use_ILMB.if4_ILMB_Data_Strobe_i_i_2 
       (.I0(if3_allow_iready),
        .I1(IReady),
        .I2(\Use_ILMB.if3_iready_hold_reg_n_0 ),
        .O(if3_ilmb_iready));
  FDRE \Use_ILMB.if4_ILMB_Data_Strobe_i_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(\Use_ILMB.if4_ILMB_Data_Strobe_i_i_1_n_0 ),
        .Q(if4_ilmb_data_strobe),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h8880)) 
    \Use_ILMB.if4_use_bubble_i_1 
       (.I0(if3_potential_bubble),
        .I1(if2_ilmb_issued),
        .I2(if2_iready_hold),
        .I3(IReady),
        .O(p_5_out));
  FDRE \Use_ILMB.if4_use_bubble_reg 
       (.C(Clk),
        .CE(if3_piperun),
        .D(p_5_out),
        .Q(if4_use_bubble),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[0] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[0]),
        .Q(ilmb_data_bubble[0]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[10] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[10]),
        .Q(ilmb_data_bubble[10]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[11] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[11]),
        .Q(ilmb_data_bubble[11]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[12] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[12]),
        .Q(ilmb_data_bubble[12]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[13] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[13]),
        .Q(ilmb_data_bubble[13]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[14] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[14]),
        .Q(ilmb_data_bubble[14]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[15] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[15]),
        .Q(ilmb_data_bubble[15]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[16] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[16]),
        .Q(ilmb_data_bubble[16]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[17] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[17]),
        .Q(ilmb_data_bubble[17]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[18] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[18]),
        .Q(ilmb_data_bubble[18]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[19] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[19]),
        .Q(ilmb_data_bubble[19]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[1] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[1]),
        .Q(ilmb_data_bubble[1]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[20] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[20]),
        .Q(ilmb_data_bubble[20]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[21] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[21]),
        .Q(ilmb_data_bubble[21]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[22] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[22]),
        .Q(ilmb_data_bubble[22]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[23] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[23]),
        .Q(ilmb_data_bubble[23]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[24] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[24]),
        .Q(ilmb_data_bubble[24]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[25] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[25]),
        .Q(ilmb_data_bubble[25]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[26] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[26]),
        .Q(ilmb_data_bubble[26]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[27] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[27]),
        .Q(ilmb_data_bubble[27]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[28] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[28]),
        .Q(ilmb_data_bubble[28]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[29] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[29]),
        .Q(ilmb_data_bubble[29]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[2] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[2]),
        .Q(ilmb_data_bubble[2]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[30] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[30]),
        .Q(ilmb_data_bubble[30]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[31] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[31]),
        .Q(ilmb_data_bubble[31]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[3] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[3]),
        .Q(ilmb_data_bubble[3]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[4] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[4]),
        .Q(ilmb_data_bubble[4]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[5] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[5]),
        .Q(ilmb_data_bubble[5]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[6] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[6]),
        .Q(ilmb_data_bubble[6]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[7] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[7]),
        .Q(ilmb_data_bubble[7]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[8] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[8]),
        .Q(ilmb_data_bubble[8]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_bubble_reg[9] 
       (.C(Clk),
        .CE(IReady),
        .D(ilmb_data_direct[9]),
        .Q(ilmb_data_bubble[9]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[0] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[0]),
        .Q(ilmb_data_direct[0]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[10] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[10]),
        .Q(ilmb_data_direct[10]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[11] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[11]),
        .Q(ilmb_data_direct[11]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[12] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[12]),
        .Q(ilmb_data_direct[12]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[13] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[13]),
        .Q(ilmb_data_direct[13]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[14] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[14]),
        .Q(ilmb_data_direct[14]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[15] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[15]),
        .Q(ilmb_data_direct[15]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[16] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[16]),
        .Q(ilmb_data_direct[16]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[17] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[17]),
        .Q(ilmb_data_direct[17]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[18] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[18]),
        .Q(ilmb_data_direct[18]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[19] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[19]),
        .Q(ilmb_data_direct[19]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[1] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[1]),
        .Q(ilmb_data_direct[1]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[20] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[20]),
        .Q(ilmb_data_direct[20]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[21] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[21]),
        .Q(ilmb_data_direct[21]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[22] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[22]),
        .Q(ilmb_data_direct[22]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[23] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[23]),
        .Q(ilmb_data_direct[23]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[24] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[24]),
        .Q(ilmb_data_direct[24]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[25] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[25]),
        .Q(ilmb_data_direct[25]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[26] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[26]),
        .Q(ilmb_data_direct[26]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[27] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[27]),
        .Q(ilmb_data_direct[27]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[28] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[28]),
        .Q(ilmb_data_direct[28]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[29] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[29]),
        .Q(ilmb_data_direct[29]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[2] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[2]),
        .Q(ilmb_data_direct[2]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[30] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[30]),
        .Q(ilmb_data_direct[30]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[31] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[31]),
        .Q(ilmb_data_direct[31]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[3] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[3]),
        .Q(ilmb_data_direct[3]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[4] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[4]),
        .Q(ilmb_data_direct[4]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[5] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[5]),
        .Q(ilmb_data_direct[5]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[6] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[6]),
        .Q(ilmb_data_direct[6]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[7] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[7]),
        .Q(ilmb_data_direct[7]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[8] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[8]),
        .Q(ilmb_data_direct[8]),
        .R(sync_reset));
  FDRE \Use_ILMB.ilmb_data_direct_reg[9] 
       (.C(Clk),
        .CE(IReady),
        .D(Instr[9]),
        .Q(ilmb_data_direct[9]),
        .R(sync_reset));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.Native_i_1__207 
       (.I0(if4_ilmb_data_strobe),
        .O(S));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \Using_FPGA.Native_i_1__218 
       (.I0(\Use_ILMB.if3_iready_hold_reg_n_0 ),
        .I1(IReady),
        .I2(IWAIT),
        .I3(if3_allow_iready),
        .O(\Use_ILMB.if3_iready_hold_reg_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][0]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[0]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[31]),
        .I3(ilmb_data_direct[31]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[31]));
  LUT3 #(
    .INIT(8'h80)) 
    \data_buffer_reg[3][10]_srl4_i_1 
       (.I0(if4_data[0]),
        .I1(if4_data[1]),
        .I2(if4_data[3]),
        .O(in));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][10]_srl4_i_1__0 
       (.I0(LOCKSTEP_Master_Out[10]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[21]),
        .I3(ilmb_data_direct[21]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[21]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][11]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[11]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[20]),
        .I3(ilmb_data_direct[20]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[20]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][12]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[12]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[19]),
        .I3(ilmb_data_direct[19]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[19]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][13]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[13]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[18]),
        .I3(ilmb_data_direct[18]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[18]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][14]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[14]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[17]),
        .I3(ilmb_data_direct[17]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[17]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][15]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[15]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[16]),
        .I3(ilmb_data_direct[16]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[16]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][16]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[16]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[15]),
        .I3(ilmb_data_direct[15]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[15]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][17]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[17]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[14]),
        .I3(ilmb_data_direct[14]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[14]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][18]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[18]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[13]),
        .I3(ilmb_data_direct[13]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[13]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][19]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[19]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[12]),
        .I3(ilmb_data_direct[12]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[12]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][1]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[1]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[30]),
        .I3(ilmb_data_direct[30]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[30]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][20]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[20]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[11]),
        .I3(ilmb_data_direct[11]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[11]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][21]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[21]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[10]),
        .I3(ilmb_data_direct[10]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[10]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][22]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[22]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[9]),
        .I3(ilmb_data_direct[9]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[9]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][23]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[23]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[8]),
        .I3(ilmb_data_direct[8]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[8]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][24]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[24]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[7]),
        .I3(ilmb_data_direct[7]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[7]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][25]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[25]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[6]),
        .I3(ilmb_data_direct[6]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[6]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][26]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[26]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[5]),
        .I3(ilmb_data_direct[5]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[5]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][27]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[27]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[4]),
        .I3(ilmb_data_direct[4]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[4]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][28]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[28]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[3]),
        .I3(ilmb_data_direct[3]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[3]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][29]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[29]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[2]),
        .I3(ilmb_data_direct[2]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[2]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][2]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[2]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[29]),
        .I3(ilmb_data_direct[29]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[29]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][30]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[30]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[1]),
        .I3(ilmb_data_direct[1]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[1]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][31]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[31]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[0]),
        .I3(ilmb_data_direct[0]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[0]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][3]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[3]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[28]),
        .I3(ilmb_data_direct[28]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[28]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][4]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[4]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[27]),
        .I3(ilmb_data_direct[27]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[27]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][5]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[5]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[26]),
        .I3(ilmb_data_direct[26]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[26]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][6]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[6]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[25]),
        .I3(ilmb_data_direct[25]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[25]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][7]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[7]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[24]),
        .I3(ilmb_data_direct[24]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[24]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][8]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[8]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[23]),
        .I3(ilmb_data_direct[23]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[23]));
  LUT6 #(
    .INIT(64'hAAAAAAAAF3C00000)) 
    \data_buffer_reg[3][9]_srl4_i_1 
       (.I0(LOCKSTEP_Master_Out[9]),
        .I1(if4_use_bubble),
        .I2(ilmb_data_bubble[22]),
        .I3(ilmb_data_direct[22]),
        .I4(if4_ilmb_data_strobe),
        .I5(\cur_data_i_reg[31] ),
        .O(if4_data[22]));
endmodule

(* ORIG_REF_NAME = "ISide_Logic_ff" *) 
module microblaze_microblaze_0_0_ISide_Logic_ff
   (if4_ready,
    S,
    \Using_FPGA.Native ,
    S_0);
  output if4_ready;
  input S;
  input \Using_FPGA.Native ;
  input S_0;

  wire S;
  wire S_0;
  wire \Using_FPGA.Native ;
  wire if4_ready;
  wire if4_ready_tmp1;
  wire if4_ready_tmp2;
  wire if4_ready_tmp3;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;

  microblaze_microblaze_0_0_carry_and_n_bb \Using_Ready_FPGA.Rdy_And1 
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .if4_ready_tmp2(if4_ready_tmp2),
        .if4_ready_tmp3(if4_ready_tmp3),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  microblaze_microblaze_0_0_carry_or_bb \Using_Ready_FPGA.Rdy_Or1 
       (.if4_ready_tmp1(if4_ready_tmp1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(S),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(\Using_FPGA.Native ),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(S_0));
  microblaze_microblaze_0_0_carry_or_bb_41 \Using_Ready_FPGA.Rdy_Or2 
       (.S(S),
        .if4_ready_tmp1(if4_ready_tmp1),
        .if4_ready_tmp2(if4_ready_tmp2),
        .lopt(lopt),
        .lopt_1(lopt_1));
  microblaze_microblaze_0_0_carry_or_bb_42 \Using_Ready_FPGA.Rdy_Or3 
       (.S_0(S_0),
        .if4_ready(if4_ready),
        .if4_ready_tmp3(if4_ready_tmp3),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
endmodule

(* ORIG_REF_NAME = "Jump_Logic_ff" *) 
module microblaze_microblaze_0_0_Jump_Logic_ff
   (ex_jump,
    EX_Op1_CMP_Equal,
    ex_op1_cmp_equal_n,
    m0_jump_taken,
    bp0_jump0,
    Clear_Buffer,
    ex_branch_with_delayslot_reg,
    ex_delayslot_Instr0,
    keep_jump_taken_with_ds_reg,
    \wb_exception_raw_kind_reg[31] ,
    bp0_keep_jump_reg,
    EX_Op1_Zero,
    \Using_FPGA.Native ,
    \bp0_branch_target_reg[31] ,
    sync_reset,
    Clk,
    use_Reg_Neg_S_reg_0,
    E,
    ex_op1_cmp_eq,
    ex_op1_cmp_eq_n7_out,
    force_Val2_N_reg_0,
    ex_op1_cmp_eq1,
    use_Reg_Neg_DI1_out,
    force_Val10_out,
    use_Reg_Neg_S3_out,
    force12_out,
    bp0_keep_jump,
    wb_abort_div,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    ex_branch_with_delayslot,
    of_raw_valid,
    keep_jump_taken_with_ds,
    Q,
    bp0_keep_jump_reg_0,
    \Using_FPGA.Native_3 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output ex_jump;
  output EX_Op1_CMP_Equal;
  output ex_op1_cmp_equal_n;
  output m0_jump_taken;
  output bp0_jump0;
  output Clear_Buffer;
  output ex_branch_with_delayslot_reg;
  output ex_delayslot_Instr0;
  output keep_jump_taken_with_ds_reg;
  output [0:0]\wb_exception_raw_kind_reg[31] ;
  output bp0_keep_jump_reg;
  input EX_Op1_Zero;
  input \Using_FPGA.Native ;
  input \bp0_branch_target_reg[31] ;
  input sync_reset;
  input Clk;
  input use_Reg_Neg_S_reg_0;
  input [0:0]E;
  input ex_op1_cmp_eq;
  input ex_op1_cmp_eq_n7_out;
  input force_Val2_N_reg_0;
  input ex_op1_cmp_eq1;
  input use_Reg_Neg_DI1_out;
  input force_Val10_out;
  input use_Reg_Neg_S3_out;
  input force12_out;
  input bp0_keep_jump;
  input wb_abort_div;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input ex_branch_with_delayslot;
  input of_raw_valid;
  input keep_jump_taken_with_ds;
  input [2:0]Q;
  input bp0_keep_jump_reg_0;
  input [0:0]\Using_FPGA.Native_3 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;

  wire Clear_Buffer;
  wire Clk;
  wire DI;
  wire EX_Jump_Delay_DFF_n_1;
  wire EX_Op1_CMP_Equal;
  wire EX_Op1_Zero;
  wire M0_Jump_Taken0;
  wire [2:0]Q;
  wire S;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]\Using_FPGA.Native_3 ;
  wire \bp0_branch_target_reg[31] ;
  wire bp0_jump0;
  wire bp0_keep_jump;
  wire bp0_keep_jump_reg;
  wire bp0_keep_jump_reg_0;
  (* DIRECT_ENABLE *) wire ex_PipeRun_for_ce;
  wire ex_branch_with_delayslot;
  wire ex_branch_with_delayslot_reg;
  wire ex_delayslot_Instr0;
  wire ex_jump;
  wire ex_jump_hold;
  wire ex_jump_wanted;
  wire ex_op1_cmp_eq;
  wire ex_op1_cmp_eq1;
  wire ex_op1_cmp_eq_n7_out;
  wire ex_op1_cmp_equal_n;
  wire force12_out;
  wire force1_reg_n_0;
  wire force2;
  wire force_Val10_out;
  wire force_Val1_reg_n_0;
  wire force_Val2_N;
  wire force_Val2_N_reg_0;
  wire jump_carry1;
  wire jump_carry2;
  wire jump_carry3;
  wire jump_carry5;
  wire jump_carry8;
  wire keep_jump_taken_with_ds;
  wire keep_jump_taken_with_ds_reg;
  wire lopt;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire lopt_9;
  wire m0_jump_taken;
  (* DIRECT_ENABLE *) wire of_PipeRun_for_ce;
  wire of_raw_valid;
  (* DIRECT_RESET *) wire reset_bool_for_rst;
  wire use_Reg_Neg_DI1_out;
  wire use_Reg_Neg_DI_reg_n_0;
  wire use_Reg_Neg_S3_out;
  wire use_Reg_Neg_S_reg_n_0;
  wire wb_abort_div;
  wire [0:0]\wb_exception_raw_kind_reg[31] ;

  assign ex_PipeRun_for_ce = E[0];
  assign lopt_1 = DI;
  assign lopt_11 = lopt_4;
  assign lopt_12 = lopt_5;
  assign lopt_14 = lopt_7;
  assign lopt_2 = S;
  assign lopt_3 = lopt_10;
  assign lopt_6 = lopt_13;
  assign of_PipeRun_for_ce = use_Reg_Neg_S_reg_0;
  assign reset_bool_for_rst = sync_reset;
  microblaze_microblaze_0_0_MB_FDR_572 EX_Jump_Delay_DFF
       (.Clk(Clk),
        .E(ex_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (EX_Jump_Delay_DFF_n_1),
        .\Using_FPGA.Native_1 (ex_jump),
        .\Using_FPGA.Native_2 (of_PipeRun_for_ce),
        .ex_branch_with_delayslot(ex_branch_with_delayslot),
        .ex_jump_hold(ex_jump_hold),
        .of_raw_valid(of_raw_valid),
        .sync_reset(reset_bool_for_rst));
  FDRE M0_Jump_Taken_reg
       (.C(Clk),
        .CE(ex_PipeRun_for_ce),
        .D(M0_Jump_Taken0),
        .Q(m0_jump_taken),
        .R(reset_bool_for_rst));
  microblaze_microblaze_0_0_MB_MUXCY_573 MUXCY_JUMP_CARRY
       (.DI(DI),
        .EX_Op1_Zero(EX_Op1_Zero),
        .S(S),
        .jump_carry1(jump_carry1),
        .lopt(lopt));
  microblaze_microblaze_0_0_MB_MUXCY_574 MUXCY_JUMP_CARRY2
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .force2(force2),
        .force_Val2_N(force_Val2_N),
        .jump_carry1(jump_carry1),
        .jump_carry2(jump_carry2),
        .lopt(\^lopt_1 ),
        .lopt_1(\^lopt_2 ),
        .lopt_2(\Using_FPGA.Native ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(\^lopt_5 ),
        .lopt_6(\^lopt_6 ),
        .lopt_7(\^lopt_7 ),
        .lopt_8(EX_Jump_Delay_DFF_n_1));
  microblaze_microblaze_0_0_MB_MUXCY_575 MUXCY_JUMP_CARRY3
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .jump_carry2(jump_carry2),
        .jump_carry3(jump_carry3),
        .lopt(\^lopt_1 ),
        .lopt_1(\^lopt_2 ));
  microblaze_microblaze_0_0_MB_MUXCY_576 MUXCY_JUMP_CARRY4
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .ex_branch_with_delayslot(ex_branch_with_delayslot),
        .ex_branch_with_delayslot_reg(ex_branch_with_delayslot_reg),
        .ex_jump_wanted(ex_jump_wanted),
        .jump_carry3(jump_carry3),
        .lopt(\^lopt_3 ),
        .lopt_1(\^lopt_4 ),
        .lopt_2(\^lopt_5 ),
        .of_raw_valid(of_raw_valid));
  microblaze_microblaze_0_0_MB_MUXCY_577 MUXCY_JUMP_CARRY5
       (.\Using_FPGA.Native_0 (EX_Jump_Delay_DFF_n_1),
        .ex_jump_wanted(ex_jump_wanted),
        .jump_carry5(jump_carry5),
        .lopt(\^lopt_6 ),
        .lopt_1(\^lopt_7 ));
  microblaze_microblaze_0_0_MB_MUXCY_578 MUXCY_JUMP_CARRY8
       (.jump_carry5(jump_carry5),
        .jump_carry8(jump_carry8),
        .lopt(lopt_8),
        .lopt_1(lopt_9),
        .lopt_2(\bp0_branch_target_reg[31] ),
        .lopt_3(lopt_10),
        .lopt_4(lopt_11),
        .lopt_5(lopt_12),
        .lopt_6(lopt_13),
        .lopt_7(lopt_14));
  microblaze_microblaze_0_0_MB_MUXCY_579 MUXCY_JUMP_CARRY9
       (.Clear_Buffer(Clear_Buffer),
        .M0_Jump_Taken0(M0_Jump_Taken0),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\bp0_branch_target_reg[31] (\bp0_branch_target_reg[31] ),
        .bp0_jump0(bp0_jump0),
        .bp0_keep_jump(bp0_keep_jump),
        .bp0_keep_jump_reg(bp0_keep_jump_reg),
        .bp0_keep_jump_reg_0(bp0_keep_jump_reg_0),
        .ex_branch_with_delayslot(ex_branch_with_delayslot),
        .ex_delayslot_Instr0(ex_delayslot_Instr0),
        .ex_jump_hold(ex_jump_hold),
        .ex_mbar_decode_reg(ex_jump),
        .jump_carry8(jump_carry8),
        .keep_jump_taken_with_ds(keep_jump_taken_with_ds),
        .keep_jump_taken_with_ds_reg(keep_jump_taken_with_ds_reg),
        .keep_jump_taken_with_ds_reg_0(of_PipeRun_for_ce),
        .lopt(lopt_8),
        .lopt_1(lopt_9),
        .sync_reset(reset_bool_for_rst),
        .wb_abort_div(wb_abort_div),
        .\wb_exception_raw_kind_reg[31] (\wb_exception_raw_kind_reg[31] ));
  FDRE ex_op1_cmp_eq_n_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_op1_cmp_eq_n7_out),
        .Q(ex_op1_cmp_equal_n),
        .R(reset_bool_for_rst));
  FDSE ex_op1_cmp_eq_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_op1_cmp_eq),
        .Q(EX_Op1_CMP_Equal),
        .S(reset_bool_for_rst));
  FDRE force1_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(force12_out),
        .Q(force1_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE force2_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(ex_op1_cmp_eq1),
        .Q(force2),
        .R(reset_bool_for_rst));
  LUT3 #(
    .INIT(8'hA6)) 
    force_DI1
       (.I0(force_Val1_reg_n_0),
        .I1(use_Reg_Neg_DI_reg_n_0),
        .I2(\Using_FPGA.Native_3 ),
        .O(DI));
  FDRE force_Val1_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(force_Val10_out),
        .Q(force_Val1_reg_n_0),
        .R(reset_bool_for_rst));
  FDSE force_Val2_N_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(force_Val2_N_reg_0),
        .Q(force_Val2_N),
        .S(reset_bool_for_rst));
  LUT3 #(
    .INIT(8'hA6)) 
    force_jump1
       (.I0(force1_reg_n_0),
        .I1(use_Reg_Neg_S_reg_n_0),
        .I2(\Using_FPGA.Native_3 ),
        .O(S));
  FDRE use_Reg_Neg_DI_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(use_Reg_Neg_DI1_out),
        .Q(use_Reg_Neg_DI_reg_n_0),
        .R(reset_bool_for_rst));
  FDRE use_Reg_Neg_S_reg
       (.C(Clk),
        .CE(of_PipeRun_for_ce),
        .D(use_Reg_Neg_S3_out),
        .Q(use_Reg_Neg_S_reg_n_0),
        .R(reset_bool_for_rst));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L
   (if4_push_instr_fetch,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    if4_sel_input);
  output if4_push_instr_fetch;
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input [0:0]if4_sel_input;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire if4_push_instr_fetch;
  wire [0:0]if4_sel_input;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(\Using_FPGA.Native_1 ),
        .O(if4_push_instr_fetch),
        .SRI(\Using_FPGA.Native_2 ));
  LUT2 #(
    .INIT(4'h8)) 
    \cur_data_i[31]_i_2 
       (.I0(if4_push_instr_fetch),
        .I1(if4_sel_input),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L_312
   (of_m2_no_stall_conflict,
    of_read_m2_write_op_conflict,
    m2_complete_in_later_stage);
  output of_m2_no_stall_conflict;
  input of_read_m2_write_op_conflict;
  input m2_complete_in_later_stage;

  wire m2_complete_in_later_stage;
  wire of_m2_no_stall_conflict;
  wire of_read_m2_write_op_conflict;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(of_read_m2_write_op_conflict),
        .O(of_m2_no_stall_conflict),
        .SRI(m2_complete_in_later_stage));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L_320
   (of_m1_no_stall_conflict,
    of_read_m1_write_op_conflict,
    m1_m2_complete_in_later_stage);
  output of_m1_no_stall_conflict;
  input of_read_m1_write_op_conflict;
  input m1_m2_complete_in_later_stage;

  wire m1_m2_complete_in_later_stage;
  wire of_m1_no_stall_conflict;
  wire of_read_m1_write_op_conflict;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(of_read_m1_write_op_conflict),
        .O(of_m1_no_stall_conflict),
        .SRI(m1_m2_complete_in_later_stage));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L_328
   (of_m0_no_stall_conflict,
    of_read_m0_write_op_conflict,
    m0_complete_in_later_stage);
  output of_m0_no_stall_conflict;
  input of_read_m0_write_op_conflict;
  input m0_complete_in_later_stage;

  wire m0_complete_in_later_stage;
  wire of_m0_no_stall_conflict;
  wire of_read_m0_write_op_conflict;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(of_read_m0_write_op_conflict),
        .O(of_m0_no_stall_conflict),
        .SRI(m0_complete_in_later_stage));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L_336
   (And_OUT,
    of_read_ex_write_op_conflict,
    ex_complete_in_later_stage);
  output And_OUT;
  input of_read_ex_write_op_conflict;
  input ex_complete_in_later_stage;

  wire And_OUT;
  wire ex_complete_in_later_stage;
  wire of_read_ex_write_op_conflict;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(of_read_ex_write_op_conflict),
        .O(And_OUT),
        .SRI(ex_complete_in_later_stage));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L_415
   (m2_complete_in_later_stage_reg,
    of_read_m2_write_op_conflict,
    m2_complete_in_later_stage,
    of_m3_stall_conflict,
    of_m1_no_stall_conflict,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m2_stall_conflict);
  output m2_complete_in_later_stage_reg;
  input of_read_m2_write_op_conflict;
  input m2_complete_in_later_stage;
  input of_m3_stall_conflict;
  input of_m1_no_stall_conflict;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m2_stall_conflict;

  wire And_OUT;
  wire m2_complete_in_later_stage;
  wire m2_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_no_stall_conflict;
  wire of_m2_no_stall_conflict;
  wire of_m2_stall_conflict;
  wire of_m3_stall_conflict;
  wire of_read_m2_write_op_conflict;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(of_read_m2_write_op_conflict),
        .O(of_m2_no_stall_conflict),
        .SRI(m2_complete_in_later_stage));
  LUT6 #(
    .INIT(64'hFFFFFFF0FFFFFFFB)) 
    \Using_FPGA.Native_i_1__214 
       (.I0(of_m2_no_stall_conflict),
        .I1(of_m3_stall_conflict),
        .I2(of_m1_no_stall_conflict),
        .I3(And_OUT),
        .I4(of_m0_no_stall_conflict),
        .I5(of_m2_stall_conflict),
        .O(m2_complete_in_later_stage_reg));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L_423
   (of_m1_no_stall_conflict,
    of_read_m1_write_op_conflict,
    m1_m2_complete_in_later_stage);
  output of_m1_no_stall_conflict;
  input of_read_m1_write_op_conflict;
  input m1_m2_complete_in_later_stage;

  wire m1_m2_complete_in_later_stage;
  wire of_m1_no_stall_conflict;
  wire of_read_m1_write_op_conflict;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(of_read_m1_write_op_conflict),
        .O(of_m1_no_stall_conflict),
        .SRI(m1_m2_complete_in_later_stage));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L_431
   (of_m0_no_stall_conflict,
    of_read_m0_write_op_conflict,
    m0_complete_in_later_stage);
  output of_m0_no_stall_conflict;
  input of_read_m0_write_op_conflict;
  input m0_complete_in_later_stage;

  wire m0_complete_in_later_stage;
  wire of_m0_no_stall_conflict;
  wire of_read_m0_write_op_conflict;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(of_read_m0_write_op_conflict),
        .O(of_m0_no_stall_conflict),
        .SRI(m0_complete_in_later_stage));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L_439
   (And_OUT,
    of_read_ex_write_op_conflict,
    ex_complete_in_later_stage);
  output And_OUT;
  input of_read_ex_write_op_conflict;
  input ex_complete_in_later_stage;

  wire And_OUT;
  wire ex_complete_in_later_stage;
  wire of_read_ex_write_op_conflict;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(of_read_ex_write_op_conflict),
        .O(And_OUT),
        .SRI(ex_complete_in_later_stage));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L_508
   (m2_complete_in_later_stage_reg,
    of_read_m2_write_op_conflict,
    m2_complete_in_later_stage,
    of_m3_stall_conflict,
    of_m1_no_stall_conflict,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m2_stall_conflict);
  output m2_complete_in_later_stage_reg;
  input of_read_m2_write_op_conflict;
  input m2_complete_in_later_stage;
  input of_m3_stall_conflict;
  input of_m1_no_stall_conflict;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m2_stall_conflict;

  wire And_OUT;
  wire m2_complete_in_later_stage;
  wire m2_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_no_stall_conflict;
  wire of_m2_no_stall_conflict;
  wire of_m2_stall_conflict;
  wire of_m3_stall_conflict;
  wire of_read_m2_write_op_conflict;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(of_read_m2_write_op_conflict),
        .O(of_m2_no_stall_conflict),
        .SRI(m2_complete_in_later_stage));
  LUT6 #(
    .INIT(64'hFFFFFFF0FFFFFFFB)) 
    \Using_FPGA.Native_i_1__212 
       (.I0(of_m2_no_stall_conflict),
        .I1(of_m3_stall_conflict),
        .I2(of_m1_no_stall_conflict),
        .I3(And_OUT),
        .I4(of_m0_no_stall_conflict),
        .I5(of_m2_stall_conflict),
        .O(m2_complete_in_later_stage_reg));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L_516
   (of_m1_no_stall_conflict,
    of_read_m1_write_op_conflict,
    m1_m2_complete_in_later_stage);
  output of_m1_no_stall_conflict;
  input of_read_m1_write_op_conflict;
  input m1_m2_complete_in_later_stage;

  wire m1_m2_complete_in_later_stage;
  wire of_m1_no_stall_conflict;
  wire of_read_m1_write_op_conflict;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(of_read_m1_write_op_conflict),
        .O(of_m1_no_stall_conflict),
        .SRI(m1_m2_complete_in_later_stage));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L_524
   (of_m0_no_stall_conflict,
    of_read_m0_write_op_conflict,
    m0_complete_in_later_stage);
  output of_m0_no_stall_conflict;
  input of_read_m0_write_op_conflict;
  input m0_complete_in_later_stage;

  wire m0_complete_in_later_stage;
  wire of_m0_no_stall_conflict;
  wire of_read_m0_write_op_conflict;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(of_read_m0_write_op_conflict),
        .O(of_m0_no_stall_conflict),
        .SRI(m0_complete_in_later_stage));
endmodule

(* ORIG_REF_NAME = "MB_AND2B1L" *) 
module microblaze_microblaze_0_0_MB_AND2B1L_532
   (And_OUT,
    of_read_ex_write_op_conflict,
    ex_complete_in_later_stage);
  output And_OUT;
  input of_read_ex_write_op_conflict;
  input ex_complete_in_later_stage;

  wire And_OUT;
  wire ex_complete_in_later_stage;
  wire of_read_ex_write_op_conflict;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.DI(of_read_ex_write_op_conflict),
        .O(And_OUT),
        .SRI(ex_complete_in_later_stage));
endmodule

(* ORIG_REF_NAME = "MB_DSP48E1" *) 
module microblaze_microblaze_0_0_MB_DSP48E1
   (D,
    \Using_FPGA.DSP48E1_I1_0 ,
    \Using_FPGA.DSP48E1_I1_1 ,
    Clk,
    Q,
    \Using_FPGA.DSP48E1_I1_2 );
  output [16:0]D;
  output [47:0]\Using_FPGA.DSP48E1_I1_0 ;
  input \Using_FPGA.DSP48E1_I1_1 ;
  input Clk;
  input [16:0]Q;
  input [16:0]\Using_FPGA.DSP48E1_I1_2 ;

  wire Clk;
  wire [16:0]D;
  wire [16:0]Q;
  wire [47:0]\Using_FPGA.DSP48E1_I1_0 ;
  wire \Using_FPGA.DSP48E1_I1_1 ;
  wire [16:0]\Using_FPGA.DSP48E1_I1_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_10 ;
  wire \Using_FPGA.DSP48E1_I1_n_11 ;
  wire \Using_FPGA.DSP48E1_I1_n_12 ;
  wire \Using_FPGA.DSP48E1_I1_n_13 ;
  wire \Using_FPGA.DSP48E1_I1_n_14 ;
  wire \Using_FPGA.DSP48E1_I1_n_15 ;
  wire \Using_FPGA.DSP48E1_I1_n_16 ;
  wire \Using_FPGA.DSP48E1_I1_n_17 ;
  wire \Using_FPGA.DSP48E1_I1_n_18 ;
  wire \Using_FPGA.DSP48E1_I1_n_19 ;
  wire \Using_FPGA.DSP48E1_I1_n_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_20 ;
  wire \Using_FPGA.DSP48E1_I1_n_21 ;
  wire \Using_FPGA.DSP48E1_I1_n_22 ;
  wire \Using_FPGA.DSP48E1_I1_n_23 ;
  wire \Using_FPGA.DSP48E1_I1_n_24 ;
  wire \Using_FPGA.DSP48E1_I1_n_25 ;
  wire \Using_FPGA.DSP48E1_I1_n_26 ;
  wire \Using_FPGA.DSP48E1_I1_n_27 ;
  wire \Using_FPGA.DSP48E1_I1_n_28 ;
  wire \Using_FPGA.DSP48E1_I1_n_29 ;
  wire \Using_FPGA.DSP48E1_I1_n_3 ;
  wire \Using_FPGA.DSP48E1_I1_n_30 ;
  wire \Using_FPGA.DSP48E1_I1_n_31 ;
  wire \Using_FPGA.DSP48E1_I1_n_32 ;
  wire \Using_FPGA.DSP48E1_I1_n_33 ;
  wire \Using_FPGA.DSP48E1_I1_n_34 ;
  wire \Using_FPGA.DSP48E1_I1_n_35 ;
  wire \Using_FPGA.DSP48E1_I1_n_36 ;
  wire \Using_FPGA.DSP48E1_I1_n_37 ;
  wire \Using_FPGA.DSP48E1_I1_n_38 ;
  wire \Using_FPGA.DSP48E1_I1_n_39 ;
  wire \Using_FPGA.DSP48E1_I1_n_4 ;
  wire \Using_FPGA.DSP48E1_I1_n_40 ;
  wire \Using_FPGA.DSP48E1_I1_n_41 ;
  wire \Using_FPGA.DSP48E1_I1_n_42 ;
  wire \Using_FPGA.DSP48E1_I1_n_43 ;
  wire \Using_FPGA.DSP48E1_I1_n_44 ;
  wire \Using_FPGA.DSP48E1_I1_n_45 ;
  wire \Using_FPGA.DSP48E1_I1_n_46 ;
  wire \Using_FPGA.DSP48E1_I1_n_47 ;
  wire \Using_FPGA.DSP48E1_I1_n_48 ;
  wire \Using_FPGA.DSP48E1_I1_n_49 ;
  wire \Using_FPGA.DSP48E1_I1_n_5 ;
  wire \Using_FPGA.DSP48E1_I1_n_50 ;
  wire \Using_FPGA.DSP48E1_I1_n_51 ;
  wire \Using_FPGA.DSP48E1_I1_n_52 ;
  wire \Using_FPGA.DSP48E1_I1_n_53 ;
  wire \Using_FPGA.DSP48E1_I1_n_54 ;
  wire \Using_FPGA.DSP48E1_I1_n_55 ;
  wire \Using_FPGA.DSP48E1_I1_n_56 ;
  wire \Using_FPGA.DSP48E1_I1_n_57 ;
  wire \Using_FPGA.DSP48E1_I1_n_6 ;
  wire \Using_FPGA.DSP48E1_I1_n_7 ;
  wire \Using_FPGA.DSP48E1_I1_n_8 ;
  wire \Using_FPGA.DSP48E1_I1_n_9 ;
  wire [0:30]m0_bd_p;

  (* METHODOLOGY_DRC_VIOS = "{SYNTH-12 {cell *THIS*}}" *) 
  (* box_type = "PRIMITIVE" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(0),
    .DREG(1),
    .INMODEREG(0),
    .IS_ALUMODE_INVERTED(4'b0000),
    .IS_CARRYIN_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_INMODE_INVERTED(5'b00000),
    .IS_OPMODE_INVERTED(7'b0000000),
    .MASK(48'hFFFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'hFFFFFFFFFFFF),
    .PREG(1),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    \Using_FPGA.DSP48E1_I1 
       (.A({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,\Using_FPGA.DSP48E1_I1_2 }),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT({\Using_FPGA.DSP48E1_I1_n_24 ,\Using_FPGA.DSP48E1_I1_n_25 ,\Using_FPGA.DSP48E1_I1_n_26 ,\Using_FPGA.DSP48E1_I1_n_27 ,\Using_FPGA.DSP48E1_I1_n_28 ,\Using_FPGA.DSP48E1_I1_n_29 ,\Using_FPGA.DSP48E1_I1_n_30 ,\Using_FPGA.DSP48E1_I1_n_31 ,\Using_FPGA.DSP48E1_I1_n_32 ,\Using_FPGA.DSP48E1_I1_n_33 ,\Using_FPGA.DSP48E1_I1_n_34 ,\Using_FPGA.DSP48E1_I1_n_35 ,\Using_FPGA.DSP48E1_I1_n_36 ,\Using_FPGA.DSP48E1_I1_n_37 ,\Using_FPGA.DSP48E1_I1_n_38 ,\Using_FPGA.DSP48E1_I1_n_39 ,\Using_FPGA.DSP48E1_I1_n_40 ,\Using_FPGA.DSP48E1_I1_n_41 ,\Using_FPGA.DSP48E1_I1_n_42 ,\Using_FPGA.DSP48E1_I1_n_43 ,\Using_FPGA.DSP48E1_I1_n_44 ,\Using_FPGA.DSP48E1_I1_n_45 ,\Using_FPGA.DSP48E1_I1_n_46 ,\Using_FPGA.DSP48E1_I1_n_47 ,\Using_FPGA.DSP48E1_I1_n_48 ,\Using_FPGA.DSP48E1_I1_n_49 ,\Using_FPGA.DSP48E1_I1_n_50 ,\Using_FPGA.DSP48E1_I1_n_51 ,\Using_FPGA.DSP48E1_I1_n_52 ,\Using_FPGA.DSP48E1_I1_n_53 }),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,Q}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT({\Using_FPGA.DSP48E1_I1_n_6 ,\Using_FPGA.DSP48E1_I1_n_7 ,\Using_FPGA.DSP48E1_I1_n_8 ,\Using_FPGA.DSP48E1_I1_n_9 ,\Using_FPGA.DSP48E1_I1_n_10 ,\Using_FPGA.DSP48E1_I1_n_11 ,\Using_FPGA.DSP48E1_I1_n_12 ,\Using_FPGA.DSP48E1_I1_n_13 ,\Using_FPGA.DSP48E1_I1_n_14 ,\Using_FPGA.DSP48E1_I1_n_15 ,\Using_FPGA.DSP48E1_I1_n_16 ,\Using_FPGA.DSP48E1_I1_n_17 ,\Using_FPGA.DSP48E1_I1_n_18 ,\Using_FPGA.DSP48E1_I1_n_19 ,\Using_FPGA.DSP48E1_I1_n_20 ,\Using_FPGA.DSP48E1_I1_n_21 ,\Using_FPGA.DSP48E1_I1_n_22 ,\Using_FPGA.DSP48E1_I1_n_23 }),
        .C({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(\Using_FPGA.DSP48E1_I1_n_0 ),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT({\Using_FPGA.DSP48E1_I1_n_54 ,\Using_FPGA.DSP48E1_I1_n_55 ,\Using_FPGA.DSP48E1_I1_n_56 ,\Using_FPGA.DSP48E1_I1_n_57 }),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(\Using_FPGA.DSP48E1_I1_1 ),
        .CLK(Clk),
        .D({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(\Using_FPGA.DSP48E1_I1_n_1 ),
        .OPMODE({1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(\Using_FPGA.DSP48E1_I1_n_2 ),
        .P({m0_bd_p[0],m0_bd_p[1],m0_bd_p[2],m0_bd_p[3],m0_bd_p[4],m0_bd_p[5],m0_bd_p[6],m0_bd_p[7],m0_bd_p[8],m0_bd_p[9],m0_bd_p[10],m0_bd_p[11],m0_bd_p[12],m0_bd_p[13],m0_bd_p[14],m0_bd_p[15],m0_bd_p[16],m0_bd_p[17],m0_bd_p[18],m0_bd_p[19],m0_bd_p[20],m0_bd_p[21],m0_bd_p[22],m0_bd_p[23],m0_bd_p[24],m0_bd_p[25],m0_bd_p[26],m0_bd_p[27],m0_bd_p[28],m0_bd_p[29],m0_bd_p[30],D}),
        .PATTERNBDETECT(\Using_FPGA.DSP48E1_I1_n_3 ),
        .PATTERNDETECT(\Using_FPGA.DSP48E1_I1_n_4 ),
        .PCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCOUT(\Using_FPGA.DSP48E1_I1_0 ),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(\Using_FPGA.DSP48E1_I1_n_5 ));
endmodule

(* ORIG_REF_NAME = "MB_DSP48E1" *) 
module microblaze_microblaze_0_0_MB_DSP48E1__parameterized1
   (PCOUT,
    \Using_FPGA.DSP48E1_I1_0 ,
    m0_piperun,
    Clk,
    Q,
    \Using_FPGA.DSP48E1_I1_1 ,
    \Using_FPGA.DSP48E1_I1_2 );
  output [47:0]PCOUT;
  input \Using_FPGA.DSP48E1_I1_0 ;
  input m0_piperun;
  input Clk;
  input [16:0]Q;
  input [14:0]\Using_FPGA.DSP48E1_I1_1 ;
  input [47:0]\Using_FPGA.DSP48E1_I1_2 ;

  wire Clk;
  wire [47:0]PCOUT;
  wire [16:0]Q;
  wire \Using_FPGA.DSP48E1_I1_0 ;
  wire [14:0]\Using_FPGA.DSP48E1_I1_1 ;
  wire [47:0]\Using_FPGA.DSP48E1_I1_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_10 ;
  wire \Using_FPGA.DSP48E1_I1_n_11 ;
  wire \Using_FPGA.DSP48E1_I1_n_12 ;
  wire \Using_FPGA.DSP48E1_I1_n_13 ;
  wire \Using_FPGA.DSP48E1_I1_n_14 ;
  wire \Using_FPGA.DSP48E1_I1_n_15 ;
  wire \Using_FPGA.DSP48E1_I1_n_16 ;
  wire \Using_FPGA.DSP48E1_I1_n_17 ;
  wire \Using_FPGA.DSP48E1_I1_n_18 ;
  wire \Using_FPGA.DSP48E1_I1_n_19 ;
  wire \Using_FPGA.DSP48E1_I1_n_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_20 ;
  wire \Using_FPGA.DSP48E1_I1_n_21 ;
  wire \Using_FPGA.DSP48E1_I1_n_22 ;
  wire \Using_FPGA.DSP48E1_I1_n_23 ;
  wire \Using_FPGA.DSP48E1_I1_n_24 ;
  wire \Using_FPGA.DSP48E1_I1_n_25 ;
  wire \Using_FPGA.DSP48E1_I1_n_26 ;
  wire \Using_FPGA.DSP48E1_I1_n_27 ;
  wire \Using_FPGA.DSP48E1_I1_n_28 ;
  wire \Using_FPGA.DSP48E1_I1_n_29 ;
  wire \Using_FPGA.DSP48E1_I1_n_3 ;
  wire \Using_FPGA.DSP48E1_I1_n_30 ;
  wire \Using_FPGA.DSP48E1_I1_n_31 ;
  wire \Using_FPGA.DSP48E1_I1_n_32 ;
  wire \Using_FPGA.DSP48E1_I1_n_33 ;
  wire \Using_FPGA.DSP48E1_I1_n_34 ;
  wire \Using_FPGA.DSP48E1_I1_n_35 ;
  wire \Using_FPGA.DSP48E1_I1_n_36 ;
  wire \Using_FPGA.DSP48E1_I1_n_37 ;
  wire \Using_FPGA.DSP48E1_I1_n_38 ;
  wire \Using_FPGA.DSP48E1_I1_n_39 ;
  wire \Using_FPGA.DSP48E1_I1_n_4 ;
  wire \Using_FPGA.DSP48E1_I1_n_40 ;
  wire \Using_FPGA.DSP48E1_I1_n_41 ;
  wire \Using_FPGA.DSP48E1_I1_n_42 ;
  wire \Using_FPGA.DSP48E1_I1_n_43 ;
  wire \Using_FPGA.DSP48E1_I1_n_44 ;
  wire \Using_FPGA.DSP48E1_I1_n_45 ;
  wire \Using_FPGA.DSP48E1_I1_n_46 ;
  wire \Using_FPGA.DSP48E1_I1_n_47 ;
  wire \Using_FPGA.DSP48E1_I1_n_48 ;
  wire \Using_FPGA.DSP48E1_I1_n_49 ;
  wire \Using_FPGA.DSP48E1_I1_n_5 ;
  wire \Using_FPGA.DSP48E1_I1_n_50 ;
  wire \Using_FPGA.DSP48E1_I1_n_51 ;
  wire \Using_FPGA.DSP48E1_I1_n_52 ;
  wire \Using_FPGA.DSP48E1_I1_n_53 ;
  wire \Using_FPGA.DSP48E1_I1_n_54 ;
  wire \Using_FPGA.DSP48E1_I1_n_55 ;
  wire \Using_FPGA.DSP48E1_I1_n_56 ;
  wire \Using_FPGA.DSP48E1_I1_n_57 ;
  wire \Using_FPGA.DSP48E1_I1_n_6 ;
  wire \Using_FPGA.DSP48E1_I1_n_7 ;
  wire \Using_FPGA.DSP48E1_I1_n_8 ;
  wire \Using_FPGA.DSP48E1_I1_n_9 ;
  wire m0_piperun;
  wire [0:47]m1_ad_p;

  (* METHODOLOGY_DRC_VIOS = "{SYNTH-12 {cell *THIS*}}" *) 
  (* box_type = "PRIMITIVE" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(0),
    .DREG(1),
    .INMODEREG(0),
    .IS_ALUMODE_INVERTED(4'b0000),
    .IS_CARRYIN_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_INMODE_INVERTED(5'b00000),
    .IS_OPMODE_INVERTED(7'b0000000),
    .MASK(48'hFFFFFFFFFFFF),
    .MREG(1),
    .OPMODEREG(0),
    .PATTERN(48'hFFFFFFFFFFFF),
    .PREG(1),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    \Using_FPGA.DSP48E1_I1 
       (.A({\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 [14],\Using_FPGA.DSP48E1_I1_1 }),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT({\Using_FPGA.DSP48E1_I1_n_24 ,\Using_FPGA.DSP48E1_I1_n_25 ,\Using_FPGA.DSP48E1_I1_n_26 ,\Using_FPGA.DSP48E1_I1_n_27 ,\Using_FPGA.DSP48E1_I1_n_28 ,\Using_FPGA.DSP48E1_I1_n_29 ,\Using_FPGA.DSP48E1_I1_n_30 ,\Using_FPGA.DSP48E1_I1_n_31 ,\Using_FPGA.DSP48E1_I1_n_32 ,\Using_FPGA.DSP48E1_I1_n_33 ,\Using_FPGA.DSP48E1_I1_n_34 ,\Using_FPGA.DSP48E1_I1_n_35 ,\Using_FPGA.DSP48E1_I1_n_36 ,\Using_FPGA.DSP48E1_I1_n_37 ,\Using_FPGA.DSP48E1_I1_n_38 ,\Using_FPGA.DSP48E1_I1_n_39 ,\Using_FPGA.DSP48E1_I1_n_40 ,\Using_FPGA.DSP48E1_I1_n_41 ,\Using_FPGA.DSP48E1_I1_n_42 ,\Using_FPGA.DSP48E1_I1_n_43 ,\Using_FPGA.DSP48E1_I1_n_44 ,\Using_FPGA.DSP48E1_I1_n_45 ,\Using_FPGA.DSP48E1_I1_n_46 ,\Using_FPGA.DSP48E1_I1_n_47 ,\Using_FPGA.DSP48E1_I1_n_48 ,\Using_FPGA.DSP48E1_I1_n_49 ,\Using_FPGA.DSP48E1_I1_n_50 ,\Using_FPGA.DSP48E1_I1_n_51 ,\Using_FPGA.DSP48E1_I1_n_52 ,\Using_FPGA.DSP48E1_I1_n_53 }),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,Q}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT({\Using_FPGA.DSP48E1_I1_n_6 ,\Using_FPGA.DSP48E1_I1_n_7 ,\Using_FPGA.DSP48E1_I1_n_8 ,\Using_FPGA.DSP48E1_I1_n_9 ,\Using_FPGA.DSP48E1_I1_n_10 ,\Using_FPGA.DSP48E1_I1_n_11 ,\Using_FPGA.DSP48E1_I1_n_12 ,\Using_FPGA.DSP48E1_I1_n_13 ,\Using_FPGA.DSP48E1_I1_n_14 ,\Using_FPGA.DSP48E1_I1_n_15 ,\Using_FPGA.DSP48E1_I1_n_16 ,\Using_FPGA.DSP48E1_I1_n_17 ,\Using_FPGA.DSP48E1_I1_n_18 ,\Using_FPGA.DSP48E1_I1_n_19 ,\Using_FPGA.DSP48E1_I1_n_20 ,\Using_FPGA.DSP48E1_I1_n_21 ,\Using_FPGA.DSP48E1_I1_n_22 ,\Using_FPGA.DSP48E1_I1_n_23 }),
        .C({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(\Using_FPGA.DSP48E1_I1_n_0 ),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT({\Using_FPGA.DSP48E1_I1_n_54 ,\Using_FPGA.DSP48E1_I1_n_55 ,\Using_FPGA.DSP48E1_I1_n_56 ,\Using_FPGA.DSP48E1_I1_n_57 }),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(\Using_FPGA.DSP48E1_I1_0 ),
        .CEP(m0_piperun),
        .CLK(Clk),
        .D({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(\Using_FPGA.DSP48E1_I1_n_1 ),
        .OPMODE({1'b1,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(\Using_FPGA.DSP48E1_I1_n_2 ),
        .P({m1_ad_p[0],m1_ad_p[1],m1_ad_p[2],m1_ad_p[3],m1_ad_p[4],m1_ad_p[5],m1_ad_p[6],m1_ad_p[7],m1_ad_p[8],m1_ad_p[9],m1_ad_p[10],m1_ad_p[11],m1_ad_p[12],m1_ad_p[13],m1_ad_p[14],m1_ad_p[15],m1_ad_p[16],m1_ad_p[17],m1_ad_p[18],m1_ad_p[19],m1_ad_p[20],m1_ad_p[21],m1_ad_p[22],m1_ad_p[23],m1_ad_p[24],m1_ad_p[25],m1_ad_p[26],m1_ad_p[27],m1_ad_p[28],m1_ad_p[29],m1_ad_p[30],m1_ad_p[31],m1_ad_p[32],m1_ad_p[33],m1_ad_p[34],m1_ad_p[35],m1_ad_p[36],m1_ad_p[37],m1_ad_p[38],m1_ad_p[39],m1_ad_p[40],m1_ad_p[41],m1_ad_p[42],m1_ad_p[43],m1_ad_p[44],m1_ad_p[45],m1_ad_p[46],m1_ad_p[47]}),
        .PATTERNBDETECT(\Using_FPGA.DSP48E1_I1_n_3 ),
        .PATTERNDETECT(\Using_FPGA.DSP48E1_I1_n_4 ),
        .PCIN(\Using_FPGA.DSP48E1_I1_2 ),
        .PCOUT(PCOUT),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(\Using_FPGA.DSP48E1_I1_n_5 ));
endmodule

(* ORIG_REF_NAME = "MB_DSP48E1" *) 
module microblaze_microblaze_0_0_MB_DSP48E1__parameterized3
   (m1_mul_result,
    \Using_FPGA.DSP48E1_I1_0 ,
    m0_piperun,
    Clk,
    Q,
    \Using_FPGA.DSP48E1_I1_1 ,
    PCOUT);
  output [14:0]m1_mul_result;
  input \Using_FPGA.DSP48E1_I1_0 ;
  input m0_piperun;
  input Clk;
  input [14:0]Q;
  input [16:0]\Using_FPGA.DSP48E1_I1_1 ;
  input [47:0]PCOUT;

  wire Clk;
  wire [47:0]PCOUT;
  wire [14:0]Q;
  wire \Using_FPGA.DSP48E1_I1_0 ;
  wire [16:0]\Using_FPGA.DSP48E1_I1_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_0 ;
  wire \Using_FPGA.DSP48E1_I1_n_1 ;
  wire \Using_FPGA.DSP48E1_I1_n_10 ;
  wire \Using_FPGA.DSP48E1_I1_n_106 ;
  wire \Using_FPGA.DSP48E1_I1_n_107 ;
  wire \Using_FPGA.DSP48E1_I1_n_108 ;
  wire \Using_FPGA.DSP48E1_I1_n_109 ;
  wire \Using_FPGA.DSP48E1_I1_n_11 ;
  wire \Using_FPGA.DSP48E1_I1_n_110 ;
  wire \Using_FPGA.DSP48E1_I1_n_111 ;
  wire \Using_FPGA.DSP48E1_I1_n_112 ;
  wire \Using_FPGA.DSP48E1_I1_n_113 ;
  wire \Using_FPGA.DSP48E1_I1_n_114 ;
  wire \Using_FPGA.DSP48E1_I1_n_115 ;
  wire \Using_FPGA.DSP48E1_I1_n_116 ;
  wire \Using_FPGA.DSP48E1_I1_n_117 ;
  wire \Using_FPGA.DSP48E1_I1_n_118 ;
  wire \Using_FPGA.DSP48E1_I1_n_119 ;
  wire \Using_FPGA.DSP48E1_I1_n_12 ;
  wire \Using_FPGA.DSP48E1_I1_n_120 ;
  wire \Using_FPGA.DSP48E1_I1_n_121 ;
  wire \Using_FPGA.DSP48E1_I1_n_122 ;
  wire \Using_FPGA.DSP48E1_I1_n_123 ;
  wire \Using_FPGA.DSP48E1_I1_n_124 ;
  wire \Using_FPGA.DSP48E1_I1_n_125 ;
  wire \Using_FPGA.DSP48E1_I1_n_126 ;
  wire \Using_FPGA.DSP48E1_I1_n_127 ;
  wire \Using_FPGA.DSP48E1_I1_n_128 ;
  wire \Using_FPGA.DSP48E1_I1_n_129 ;
  wire \Using_FPGA.DSP48E1_I1_n_13 ;
  wire \Using_FPGA.DSP48E1_I1_n_130 ;
  wire \Using_FPGA.DSP48E1_I1_n_131 ;
  wire \Using_FPGA.DSP48E1_I1_n_132 ;
  wire \Using_FPGA.DSP48E1_I1_n_133 ;
  wire \Using_FPGA.DSP48E1_I1_n_134 ;
  wire \Using_FPGA.DSP48E1_I1_n_135 ;
  wire \Using_FPGA.DSP48E1_I1_n_136 ;
  wire \Using_FPGA.DSP48E1_I1_n_137 ;
  wire \Using_FPGA.DSP48E1_I1_n_138 ;
  wire \Using_FPGA.DSP48E1_I1_n_139 ;
  wire \Using_FPGA.DSP48E1_I1_n_14 ;
  wire \Using_FPGA.DSP48E1_I1_n_140 ;
  wire \Using_FPGA.DSP48E1_I1_n_141 ;
  wire \Using_FPGA.DSP48E1_I1_n_142 ;
  wire \Using_FPGA.DSP48E1_I1_n_143 ;
  wire \Using_FPGA.DSP48E1_I1_n_144 ;
  wire \Using_FPGA.DSP48E1_I1_n_145 ;
  wire \Using_FPGA.DSP48E1_I1_n_146 ;
  wire \Using_FPGA.DSP48E1_I1_n_147 ;
  wire \Using_FPGA.DSP48E1_I1_n_148 ;
  wire \Using_FPGA.DSP48E1_I1_n_149 ;
  wire \Using_FPGA.DSP48E1_I1_n_15 ;
  wire \Using_FPGA.DSP48E1_I1_n_150 ;
  wire \Using_FPGA.DSP48E1_I1_n_151 ;
  wire \Using_FPGA.DSP48E1_I1_n_152 ;
  wire \Using_FPGA.DSP48E1_I1_n_153 ;
  wire \Using_FPGA.DSP48E1_I1_n_16 ;
  wire \Using_FPGA.DSP48E1_I1_n_17 ;
  wire \Using_FPGA.DSP48E1_I1_n_18 ;
  wire \Using_FPGA.DSP48E1_I1_n_19 ;
  wire \Using_FPGA.DSP48E1_I1_n_2 ;
  wire \Using_FPGA.DSP48E1_I1_n_20 ;
  wire \Using_FPGA.DSP48E1_I1_n_21 ;
  wire \Using_FPGA.DSP48E1_I1_n_22 ;
  wire \Using_FPGA.DSP48E1_I1_n_23 ;
  wire \Using_FPGA.DSP48E1_I1_n_24 ;
  wire \Using_FPGA.DSP48E1_I1_n_25 ;
  wire \Using_FPGA.DSP48E1_I1_n_26 ;
  wire \Using_FPGA.DSP48E1_I1_n_27 ;
  wire \Using_FPGA.DSP48E1_I1_n_28 ;
  wire \Using_FPGA.DSP48E1_I1_n_29 ;
  wire \Using_FPGA.DSP48E1_I1_n_3 ;
  wire \Using_FPGA.DSP48E1_I1_n_30 ;
  wire \Using_FPGA.DSP48E1_I1_n_31 ;
  wire \Using_FPGA.DSP48E1_I1_n_32 ;
  wire \Using_FPGA.DSP48E1_I1_n_33 ;
  wire \Using_FPGA.DSP48E1_I1_n_34 ;
  wire \Using_FPGA.DSP48E1_I1_n_35 ;
  wire \Using_FPGA.DSP48E1_I1_n_36 ;
  wire \Using_FPGA.DSP48E1_I1_n_37 ;
  wire \Using_FPGA.DSP48E1_I1_n_38 ;
  wire \Using_FPGA.DSP48E1_I1_n_39 ;
  wire \Using_FPGA.DSP48E1_I1_n_4 ;
  wire \Using_FPGA.DSP48E1_I1_n_40 ;
  wire \Using_FPGA.DSP48E1_I1_n_41 ;
  wire \Using_FPGA.DSP48E1_I1_n_42 ;
  wire \Using_FPGA.DSP48E1_I1_n_43 ;
  wire \Using_FPGA.DSP48E1_I1_n_44 ;
  wire \Using_FPGA.DSP48E1_I1_n_45 ;
  wire \Using_FPGA.DSP48E1_I1_n_46 ;
  wire \Using_FPGA.DSP48E1_I1_n_47 ;
  wire \Using_FPGA.DSP48E1_I1_n_48 ;
  wire \Using_FPGA.DSP48E1_I1_n_49 ;
  wire \Using_FPGA.DSP48E1_I1_n_5 ;
  wire \Using_FPGA.DSP48E1_I1_n_50 ;
  wire \Using_FPGA.DSP48E1_I1_n_51 ;
  wire \Using_FPGA.DSP48E1_I1_n_52 ;
  wire \Using_FPGA.DSP48E1_I1_n_53 ;
  wire \Using_FPGA.DSP48E1_I1_n_54 ;
  wire \Using_FPGA.DSP48E1_I1_n_55 ;
  wire \Using_FPGA.DSP48E1_I1_n_56 ;
  wire \Using_FPGA.DSP48E1_I1_n_57 ;
  wire \Using_FPGA.DSP48E1_I1_n_58 ;
  wire \Using_FPGA.DSP48E1_I1_n_59 ;
  wire \Using_FPGA.DSP48E1_I1_n_6 ;
  wire \Using_FPGA.DSP48E1_I1_n_60 ;
  wire \Using_FPGA.DSP48E1_I1_n_61 ;
  wire \Using_FPGA.DSP48E1_I1_n_62 ;
  wire \Using_FPGA.DSP48E1_I1_n_63 ;
  wire \Using_FPGA.DSP48E1_I1_n_64 ;
  wire \Using_FPGA.DSP48E1_I1_n_65 ;
  wire \Using_FPGA.DSP48E1_I1_n_66 ;
  wire \Using_FPGA.DSP48E1_I1_n_67 ;
  wire \Using_FPGA.DSP48E1_I1_n_68 ;
  wire \Using_FPGA.DSP48E1_I1_n_69 ;
  wire \Using_FPGA.DSP48E1_I1_n_7 ;
  wire \Using_FPGA.DSP48E1_I1_n_70 ;
  wire \Using_FPGA.DSP48E1_I1_n_71 ;
  wire \Using_FPGA.DSP48E1_I1_n_72 ;
  wire \Using_FPGA.DSP48E1_I1_n_73 ;
  wire \Using_FPGA.DSP48E1_I1_n_74 ;
  wire \Using_FPGA.DSP48E1_I1_n_75 ;
  wire \Using_FPGA.DSP48E1_I1_n_76 ;
  wire \Using_FPGA.DSP48E1_I1_n_77 ;
  wire \Using_FPGA.DSP48E1_I1_n_78 ;
  wire \Using_FPGA.DSP48E1_I1_n_79 ;
  wire \Using_FPGA.DSP48E1_I1_n_8 ;
  wire \Using_FPGA.DSP48E1_I1_n_80 ;
  wire \Using_FPGA.DSP48E1_I1_n_81 ;
  wire \Using_FPGA.DSP48E1_I1_n_82 ;
  wire \Using_FPGA.DSP48E1_I1_n_83 ;
  wire \Using_FPGA.DSP48E1_I1_n_84 ;
  wire \Using_FPGA.DSP48E1_I1_n_85 ;
  wire \Using_FPGA.DSP48E1_I1_n_86 ;
  wire \Using_FPGA.DSP48E1_I1_n_87 ;
  wire \Using_FPGA.DSP48E1_I1_n_88 ;
  wire \Using_FPGA.DSP48E1_I1_n_89 ;
  wire \Using_FPGA.DSP48E1_I1_n_9 ;
  wire \Using_FPGA.DSP48E1_I1_n_90 ;
  wire m0_piperun;
  wire [14:0]m1_mul_result;

  (* box_type = "PRIMITIVE" *) 
  DSP48E1 #(
    .ACASCREG(1),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(1),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(1),
    .BREG(1),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(0),
    .DREG(1),
    .INMODEREG(0),
    .IS_ALUMODE_INVERTED(4'b0000),
    .IS_CARRYIN_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_INMODE_INVERTED(5'b00000),
    .IS_OPMODE_INVERTED(7'b0000000),
    .MASK(48'hFFFFFFFFFFFF),
    .MREG(1),
    .OPMODEREG(0),
    .PATTERN(48'hFFFFFFFFFFFF),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    \Using_FPGA.DSP48E1_I1 
       (.A({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,\Using_FPGA.DSP48E1_I1_1 }),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT({\Using_FPGA.DSP48E1_I1_n_24 ,\Using_FPGA.DSP48E1_I1_n_25 ,\Using_FPGA.DSP48E1_I1_n_26 ,\Using_FPGA.DSP48E1_I1_n_27 ,\Using_FPGA.DSP48E1_I1_n_28 ,\Using_FPGA.DSP48E1_I1_n_29 ,\Using_FPGA.DSP48E1_I1_n_30 ,\Using_FPGA.DSP48E1_I1_n_31 ,\Using_FPGA.DSP48E1_I1_n_32 ,\Using_FPGA.DSP48E1_I1_n_33 ,\Using_FPGA.DSP48E1_I1_n_34 ,\Using_FPGA.DSP48E1_I1_n_35 ,\Using_FPGA.DSP48E1_I1_n_36 ,\Using_FPGA.DSP48E1_I1_n_37 ,\Using_FPGA.DSP48E1_I1_n_38 ,\Using_FPGA.DSP48E1_I1_n_39 ,\Using_FPGA.DSP48E1_I1_n_40 ,\Using_FPGA.DSP48E1_I1_n_41 ,\Using_FPGA.DSP48E1_I1_n_42 ,\Using_FPGA.DSP48E1_I1_n_43 ,\Using_FPGA.DSP48E1_I1_n_44 ,\Using_FPGA.DSP48E1_I1_n_45 ,\Using_FPGA.DSP48E1_I1_n_46 ,\Using_FPGA.DSP48E1_I1_n_47 ,\Using_FPGA.DSP48E1_I1_n_48 ,\Using_FPGA.DSP48E1_I1_n_49 ,\Using_FPGA.DSP48E1_I1_n_50 ,\Using_FPGA.DSP48E1_I1_n_51 ,\Using_FPGA.DSP48E1_I1_n_52 ,\Using_FPGA.DSP48E1_I1_n_53 }),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({Q[14],Q[14],Q[14],Q}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT({\Using_FPGA.DSP48E1_I1_n_6 ,\Using_FPGA.DSP48E1_I1_n_7 ,\Using_FPGA.DSP48E1_I1_n_8 ,\Using_FPGA.DSP48E1_I1_n_9 ,\Using_FPGA.DSP48E1_I1_n_10 ,\Using_FPGA.DSP48E1_I1_n_11 ,\Using_FPGA.DSP48E1_I1_n_12 ,\Using_FPGA.DSP48E1_I1_n_13 ,\Using_FPGA.DSP48E1_I1_n_14 ,\Using_FPGA.DSP48E1_I1_n_15 ,\Using_FPGA.DSP48E1_I1_n_16 ,\Using_FPGA.DSP48E1_I1_n_17 ,\Using_FPGA.DSP48E1_I1_n_18 ,\Using_FPGA.DSP48E1_I1_n_19 ,\Using_FPGA.DSP48E1_I1_n_20 ,\Using_FPGA.DSP48E1_I1_n_21 ,\Using_FPGA.DSP48E1_I1_n_22 ,\Using_FPGA.DSP48E1_I1_n_23 }),
        .C({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(\Using_FPGA.DSP48E1_I1_n_0 ),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT({\Using_FPGA.DSP48E1_I1_n_54 ,\Using_FPGA.DSP48E1_I1_n_55 ,\Using_FPGA.DSP48E1_I1_n_56 ,\Using_FPGA.DSP48E1_I1_n_57 }),
        .CEA1(1'b0),
        .CEA2(\Using_FPGA.DSP48E1_I1_0 ),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(\Using_FPGA.DSP48E1_I1_0 ),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(m0_piperun),
        .CEP(1'b0),
        .CLK(Clk),
        .D({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(\Using_FPGA.DSP48E1_I1_n_1 ),
        .OPMODE({1'b0,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(\Using_FPGA.DSP48E1_I1_n_2 ),
        .P({\Using_FPGA.DSP48E1_I1_n_58 ,\Using_FPGA.DSP48E1_I1_n_59 ,\Using_FPGA.DSP48E1_I1_n_60 ,\Using_FPGA.DSP48E1_I1_n_61 ,\Using_FPGA.DSP48E1_I1_n_62 ,\Using_FPGA.DSP48E1_I1_n_63 ,\Using_FPGA.DSP48E1_I1_n_64 ,\Using_FPGA.DSP48E1_I1_n_65 ,\Using_FPGA.DSP48E1_I1_n_66 ,\Using_FPGA.DSP48E1_I1_n_67 ,\Using_FPGA.DSP48E1_I1_n_68 ,\Using_FPGA.DSP48E1_I1_n_69 ,\Using_FPGA.DSP48E1_I1_n_70 ,\Using_FPGA.DSP48E1_I1_n_71 ,\Using_FPGA.DSP48E1_I1_n_72 ,\Using_FPGA.DSP48E1_I1_n_73 ,\Using_FPGA.DSP48E1_I1_n_74 ,\Using_FPGA.DSP48E1_I1_n_75 ,\Using_FPGA.DSP48E1_I1_n_76 ,\Using_FPGA.DSP48E1_I1_n_77 ,\Using_FPGA.DSP48E1_I1_n_78 ,\Using_FPGA.DSP48E1_I1_n_79 ,\Using_FPGA.DSP48E1_I1_n_80 ,\Using_FPGA.DSP48E1_I1_n_81 ,\Using_FPGA.DSP48E1_I1_n_82 ,\Using_FPGA.DSP48E1_I1_n_83 ,\Using_FPGA.DSP48E1_I1_n_84 ,\Using_FPGA.DSP48E1_I1_n_85 ,\Using_FPGA.DSP48E1_I1_n_86 ,\Using_FPGA.DSP48E1_I1_n_87 ,\Using_FPGA.DSP48E1_I1_n_88 ,\Using_FPGA.DSP48E1_I1_n_89 ,\Using_FPGA.DSP48E1_I1_n_90 ,m1_mul_result}),
        .PATTERNBDETECT(\Using_FPGA.DSP48E1_I1_n_3 ),
        .PATTERNDETECT(\Using_FPGA.DSP48E1_I1_n_4 ),
        .PCIN(PCOUT),
        .PCOUT({\Using_FPGA.DSP48E1_I1_n_106 ,\Using_FPGA.DSP48E1_I1_n_107 ,\Using_FPGA.DSP48E1_I1_n_108 ,\Using_FPGA.DSP48E1_I1_n_109 ,\Using_FPGA.DSP48E1_I1_n_110 ,\Using_FPGA.DSP48E1_I1_n_111 ,\Using_FPGA.DSP48E1_I1_n_112 ,\Using_FPGA.DSP48E1_I1_n_113 ,\Using_FPGA.DSP48E1_I1_n_114 ,\Using_FPGA.DSP48E1_I1_n_115 ,\Using_FPGA.DSP48E1_I1_n_116 ,\Using_FPGA.DSP48E1_I1_n_117 ,\Using_FPGA.DSP48E1_I1_n_118 ,\Using_FPGA.DSP48E1_I1_n_119 ,\Using_FPGA.DSP48E1_I1_n_120 ,\Using_FPGA.DSP48E1_I1_n_121 ,\Using_FPGA.DSP48E1_I1_n_122 ,\Using_FPGA.DSP48E1_I1_n_123 ,\Using_FPGA.DSP48E1_I1_n_124 ,\Using_FPGA.DSP48E1_I1_n_125 ,\Using_FPGA.DSP48E1_I1_n_126 ,\Using_FPGA.DSP48E1_I1_n_127 ,\Using_FPGA.DSP48E1_I1_n_128 ,\Using_FPGA.DSP48E1_I1_n_129 ,\Using_FPGA.DSP48E1_I1_n_130 ,\Using_FPGA.DSP48E1_I1_n_131 ,\Using_FPGA.DSP48E1_I1_n_132 ,\Using_FPGA.DSP48E1_I1_n_133 ,\Using_FPGA.DSP48E1_I1_n_134 ,\Using_FPGA.DSP48E1_I1_n_135 ,\Using_FPGA.DSP48E1_I1_n_136 ,\Using_FPGA.DSP48E1_I1_n_137 ,\Using_FPGA.DSP48E1_I1_n_138 ,\Using_FPGA.DSP48E1_I1_n_139 ,\Using_FPGA.DSP48E1_I1_n_140 ,\Using_FPGA.DSP48E1_I1_n_141 ,\Using_FPGA.DSP48E1_I1_n_142 ,\Using_FPGA.DSP48E1_I1_n_143 ,\Using_FPGA.DSP48E1_I1_n_144 ,\Using_FPGA.DSP48E1_I1_n_145 ,\Using_FPGA.DSP48E1_I1_n_146 ,\Using_FPGA.DSP48E1_I1_n_147 ,\Using_FPGA.DSP48E1_I1_n_148 ,\Using_FPGA.DSP48E1_I1_n_149 ,\Using_FPGA.DSP48E1_I1_n_150 ,\Using_FPGA.DSP48E1_I1_n_151 ,\Using_FPGA.DSP48E1_I1_n_152 ,\Using_FPGA.DSP48E1_I1_n_153 }),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(\Using_FPGA.DSP48E1_I1_n_5 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR
   (wb_gpr_wr,
    wb_reset_reg,
    wb_raw_valid_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    Clk,
    \Using_FPGA.Native_2 ,
    trace_reg_write_i_reg,
    trace_reg_write_i_reg_0,
    wb_reset,
    \EX_Op2[0]_i_20 ,
    Q);
  output wb_gpr_wr;
  output wb_reset_reg;
  output wb_raw_valid_reg;
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input D;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input trace_reg_write_i_reg;
  input trace_reg_write_i_reg_0;
  input wb_reset;
  input [0:0]\EX_Op2[0]_i_20 ;
  input [0:0]Q;

  wire Clk;
  wire D;
  wire [0:0]\EX_Op2[0]_i_20 ;
  wire [0:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire trace_reg_write_i_reg;
  wire trace_reg_write_i_reg_0;
  wire wb_gpr_wr;
  wire wb_gpr_write;
  wire wb_raw_valid_reg;
  wire wb_reset;
  wire wb_reset_reg;

  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Branch_CMP_Op1[30]_i_10 
       (.I0(wb_gpr_write),
        .I1(trace_reg_write_i_reg_0),
        .O(\Using_FPGA.Native_0 ));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT4 #(
    .INIT(16'h7F77)) 
    \EX_Op2[0]_i_26 
       (.I0(trace_reg_write_i_reg_0),
        .I1(wb_gpr_write),
        .I2(\EX_Op2[0]_i_20 ),
        .I3(Q),
        .O(wb_raw_valid_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(wb_gpr_write),
        .R(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hFFFFBAAA)) 
    \Using_FPGA.Native_i_1__29 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(trace_reg_write_i_reg),
        .I2(trace_reg_write_i_reg_0),
        .I3(wb_gpr_write),
        .I4(wb_reset),
        .O(wb_gpr_wr));
  LUT4 #(
    .INIT(16'hAAEA)) 
    trace_reg_write_i_i_2
       (.I0(wb_reset),
        .I1(wb_gpr_write),
        .I2(trace_reg_write_i_reg_0),
        .I3(trace_reg_write_i_reg),
        .O(wb_reset_reg));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_141
   (wb_gpr_wr_dbg,
    \Using_FPGA.Native_0 ,
    D,
    Clk);
  output wb_gpr_wr_dbg;
  input \Using_FPGA.Native_0 ;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire wb_gpr_wr_dbg;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(wb_gpr_wr_dbg),
        .R(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_264
   (\Using_FPGA.Native_0 ,
    sync_reset,
    sel_input_iii_3,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input sel_input_iii_3;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire sel_input_iii_3;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(sel_input_iii_3),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_265
   (Prefetch_Almost_Full,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    sel_input_iii_2,
    Clk,
    \Using_FPGA.Native_2 ,
    if0_pause,
    \Using_FPGA.Native_3 ,
    Prefetch_Early_Full,
    \Using_FPGA.Native_4 );
  output Prefetch_Almost_Full;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input sel_input_iii_2;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input if0_pause;
  input \Using_FPGA.Native_3 ;
  input Prefetch_Early_Full;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire Prefetch_Almost_Full;
  wire Prefetch_Early_Full;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire if0_pause;
  wire sel_input_iii_2;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(sel_input_iii_2),
        .Q(Prefetch_Almost_Full),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0001010101030103)) 
    \Using_FPGA.Native_i_1__32 
       (.I0(Prefetch_Almost_Full),
        .I1(\Using_FPGA.Native_2 ),
        .I2(if0_pause),
        .I3(\Using_FPGA.Native_3 ),
        .I4(Prefetch_Early_Full),
        .I5(\Using_FPGA.Native_4 ),
        .O(\Using_FPGA.Native_1 ));
  LUT2 #(
    .INIT(4'h2)) 
    \data_buffer_reg[3][0]_srl4_i_2 
       (.I0(Prefetch_Almost_Full),
        .I1(\Using_FPGA.Native_2 ),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_267
   (Prefetch_Early_Full,
    sync_reset,
    sel_input_iii_1,
    Clk);
  output Prefetch_Early_Full;
  input sync_reset;
  input sel_input_iii_1;
  input Clk;

  wire Clk;
  wire Prefetch_Early_Full;
  wire sel_input_iii_1;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(sel_input_iii_1),
        .Q(Prefetch_Early_Full),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_269
   (\Using_FPGA.Native_0 ,
    D,
    sync_reset,
    sel_input_i,
    Clk,
    out,
    \cur_data_i_reg[31] ,
    if4_data,
    \cur_data_i_reg[0] ,
    Q);
  output \Using_FPGA.Native_0 ;
  output [31:0]D;
  input sync_reset;
  input sel_input_i;
  input Clk;
  input [31:0]out;
  input \cur_data_i_reg[31] ;
  input [0:31]if4_data;
  input \cur_data_i_reg[0] ;
  input [31:0]Q;

  wire Clk;
  wire [31:0]D;
  wire [31:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[0] ;
  wire \cur_data_i_reg[31] ;
  wire [0:31]if4_data;
  wire [31:0]out;
  wire sel_input_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(sel_input_i),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[0]_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[0]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[31]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[0]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[10]_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[10]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[21]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[10]),
        .O(D[10]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[11]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[11]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[20]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[11]),
        .O(D[11]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[12]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[12]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[19]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[12]),
        .O(D[12]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[13]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[13]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[18]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[13]),
        .O(D[13]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[14]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[14]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[17]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[14]),
        .O(D[14]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[15]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[15]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[16]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[15]),
        .O(D[15]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[16]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[16]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[15]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[16]),
        .O(D[16]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[17]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[17]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[14]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[17]),
        .O(D[17]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[18]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[18]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[13]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[18]),
        .O(D[18]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[19]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[19]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[12]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[19]),
        .O(D[19]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[1]_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[1]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[30]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[1]),
        .O(D[1]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[20]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[20]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[11]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[20]),
        .O(D[20]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[21]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[21]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[10]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[21]),
        .O(D[21]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[22]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[22]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[9]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[22]),
        .O(D[22]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[23]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[23]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[8]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[23]),
        .O(D[23]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[24]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[24]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[7]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[24]),
        .O(D[24]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[25]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[25]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[6]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[25]),
        .O(D[25]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[26]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[26]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[5]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[26]),
        .O(D[26]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[27]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[27]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[4]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[27]),
        .O(D[27]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[28]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[28]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[3]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[28]),
        .O(D[28]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[29]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[29]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[2]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[29]),
        .O(D[29]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[2]_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[2]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[29]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[2]),
        .O(D[2]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[30]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[30]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[1]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[30]),
        .O(D[30]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[31]_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[31]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[0]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[31]),
        .O(D[31]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[3]_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[3]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[28]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[3]),
        .O(D[3]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[4]_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[4]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[27]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[4]),
        .O(D[4]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[5]_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[5]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[26]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[5]),
        .O(D[5]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[6]_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[6]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[25]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[6]),
        .O(D[6]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[7]_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[7]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[24]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[7]),
        .O(D[7]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[8]_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[8]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[23]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[8]),
        .O(D[8]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[9]_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(out[9]),
        .I2(\cur_data_i_reg[31] ),
        .I3(if4_data[22]),
        .I4(\cur_data_i_reg[0] ),
        .I5(Q[9]),
        .O(D[9]));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_271
   (of_raw_valid,
    ex_jump_nodelay_reg,
    \Using_FPGA.Native_0 ,
    ex_atomic_instruction_pair0,
    sync_reset,
    cur_valid_cmb,
    Clk,
    ex_jump_nodelay,
    ex_jump,
    Dbg_Clean_Stop_reg,
    Q,
    \imm_reg_reg[15] );
  output of_raw_valid;
  output ex_jump_nodelay_reg;
  output [0:0]\Using_FPGA.Native_0 ;
  output ex_atomic_instruction_pair0;
  input sync_reset;
  input cur_valid_cmb;
  input Clk;
  input ex_jump_nodelay;
  input ex_jump;
  input Dbg_Clean_Stop_reg;
  input [2:0]Q;
  input \imm_reg_reg[15] ;

  wire Clk;
  wire Dbg_Clean_Stop_reg;
  wire [2:0]Q;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire cur_valid_cmb;
  wire ex_atomic_instruction_pair0;
  wire ex_jump;
  wire ex_jump_nodelay;
  wire ex_jump_nodelay_reg;
  wire \imm_reg_reg[15] ;
  wire of_raw_valid;
  wire sync_reset;

  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT4 #(
    .INIT(16'h888F)) 
    Dbg_Clean_Stop_i_1
       (.I0(ex_jump_nodelay),
        .I1(ex_jump),
        .I2(Dbg_Clean_Stop_reg),
        .I3(\Using_FPGA.Native_0 ),
        .O(ex_jump_nodelay_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(cur_valid_cmb),
        .Q(of_raw_valid),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT2 #(
    .INIT(4'hE)) 
    ex_atomic_instruction_pair_i_1
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Dbg_Clean_Stop_reg),
        .O(ex_atomic_instruction_pair0));
  LUT5 #(
    .INIT(32'h00020000)) 
    \imm_reg[0]_i_1 
       (.I0(of_raw_valid),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(\imm_reg_reg[15] ),
        .I4(Q[2]),
        .O(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_548
   (wb_exception_from_m3_reg_rep__0,
    sync_reset,
    Clk,
    \Using_FPGA.Native_0 ,
    m3_div_by_zero,
    m3_div_overflow,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \of_MSR_i_reg[25] ,
    \of_MSR_i_reg[25]_0 );
  output [0:0]wb_exception_from_m3_reg_rep__0;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input m3_div_by_zero;
  input m3_div_overflow;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \of_MSR_i_reg[25] ;
  input \of_MSR_i_reg[25]_0 ;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire m3_div_zero_overflow_of_hold;
  wire \of_MSR_i_reg[25] ;
  wire \of_MSR_i_reg[25]_0 ;
  wire sync_reset;
  wire [0:0]wb_exception_from_m3_reg_rep__0;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(m3_div_zero_overflow_of_hold),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h000000002222EEE2)) 
    \Using_FPGA.Native_i_1__25 
       (.I0(m3_div_zero_overflow_of_hold),
        .I1(\Using_FPGA.Native_0 ),
        .I2(m3_div_by_zero),
        .I3(m3_div_overflow),
        .I4(\Using_FPGA.Native_1 ),
        .I5(\Using_FPGA.Native_2 ),
        .O(D));
  LUT5 #(
    .INIT(32'hFFFFFF54)) 
    of_MSR_cmb_pipemove_inferred_i_9
       (.I0(\of_MSR_i_reg[25] ),
        .I1(m3_div_overflow),
        .I2(m3_div_by_zero),
        .I3(m3_div_zero_overflow_of_hold),
        .I4(\of_MSR_i_reg[25]_0 ),
        .O(wb_exception_from_m3_reg_rep__0));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_549
   (\Using_FPGA.Native_0 ,
    A0_out,
    m3_raw_valid_reg,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    D_0,
    Clk,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 );
  output \Using_FPGA.Native_0 ;
  output A0_out;
  output m3_raw_valid_reg;
  output D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input D_0;
  input Clk;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;

  wire A0_out;
  wire Clk;
  wire D;
  wire D_0;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire m3_raw_valid_reg;

  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Branch_CMP_Op1[29]_i_15 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(\Using_FPGA.Native_0 ),
        .O(m3_raw_valid_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D_0),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_3 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__0 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .O(A0_out));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__14 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .O(D));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__73 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .O(\Using_FPGA.Native_1 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__83 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .O(\Using_FPGA.Native_2 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_550
   (m3_gpr_write_dbg,
    \Using_FPGA.Native_0 ,
    D,
    Clk);
  output m3_gpr_write_dbg;
  input \Using_FPGA.Native_0 ;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire m3_gpr_write_dbg;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(m3_gpr_write_dbg),
        .R(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_551
   (\Using_FPGA.Native_0 ,
    wb_exception_from_m3_reg_rep__0,
    wb_exception_from_m3_reg_rep__0_0,
    m3_exception_taken,
    m3_databus_access_i0,
    wb_exception_from_m3_reg,
    D,
    wb_exception_from_m3_reg_0,
    wb_exception_from_m3_reg_1,
    sync_reset,
    D_0,
    Clk,
    m3_databus_access_i_reg,
    m3_databus_access_i_reg_0,
    m2_dead_valid_hold,
    m2_exception_taken,
    m1_databus_addr_from_m0_i_2,
    m1_dead_valid_hold,
    m1_exception_from_m0,
    m3_databus_access_i_reg_1,
    m2_exception_from_m1,
    wb_abort_div,
    wb_exception_from_m3_reg_2,
    m3_dead_valid_hold,
    wb_exception_from_m3_reg_3,
    Q);
  output \Using_FPGA.Native_0 ;
  output wb_exception_from_m3_reg_rep__0;
  output wb_exception_from_m3_reg_rep__0_0;
  output m3_exception_taken;
  output m3_databus_access_i0;
  output wb_exception_from_m3_reg;
  output [2:0]D;
  output wb_exception_from_m3_reg_0;
  output wb_exception_from_m3_reg_1;
  input sync_reset;
  input D_0;
  input Clk;
  input m3_databus_access_i_reg;
  input m3_databus_access_i_reg_0;
  input m2_dead_valid_hold;
  input m2_exception_taken;
  input m1_databus_addr_from_m0_i_2;
  input m1_dead_valid_hold;
  input m1_exception_from_m0;
  input m3_databus_access_i_reg_1;
  input m2_exception_from_m1;
  input wb_abort_div;
  input wb_exception_from_m3_reg_2;
  input m3_dead_valid_hold;
  input wb_exception_from_m3_reg_3;
  input [2:0]Q;

  wire Clk;
  wire [2:0]D;
  wire D_0;
  wire [2:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire m1_databus_addr_from_m0_i_2;
  wire m1_dead_valid_hold;
  wire m1_exception_from_m0;
  wire m2_dead_valid_hold;
  wire m2_exception_from_m1;
  wire m2_exception_taken;
  wire m3_databus_access_i0;
  wire m3_databus_access_i_reg;
  wire m3_databus_access_i_reg_0;
  wire m3_databus_access_i_reg_1;
  wire m3_dead_valid_hold;
  wire m3_exception_taken;
  wire sync_reset;
  wire wb_abort_div;
  wire wb_exception_from_m3_reg;
  wire wb_exception_from_m3_reg_0;
  wire wb_exception_from_m3_reg_1;
  wire wb_exception_from_m3_reg_2;
  wire wb_exception_from_m3_reg_3;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D_0),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native_i_2__14 
       (.I0(m3_databus_access_i_reg),
        .I1(m3_databus_access_i_reg_0),
        .I2(m2_dead_valid_hold),
        .O(wb_exception_from_m3_reg_rep__0));
  LUT6 #(
    .INIT(64'hEEEEEFEEEEEEEEEE)) 
    m1_databus_addr_from_m0_i_3
       (.I0(m3_exception_taken),
        .I1(m2_exception_taken),
        .I2(m3_databus_access_i_reg),
        .I3(m1_databus_addr_from_m0_i_2),
        .I4(m1_dead_valid_hold),
        .I5(m1_exception_from_m0),
        .O(wb_exception_from_m3_reg_rep__0_0));
  LUT6 #(
    .INIT(64'h4444404444444444)) 
    m3_databus_access_i_i_1
       (.I0(m3_exception_taken),
        .I1(m3_databus_access_i_reg_1),
        .I2(m3_databus_access_i_reg),
        .I3(m3_databus_access_i_reg_0),
        .I4(m2_dead_valid_hold),
        .I5(m2_exception_from_m1),
        .O(m3_databus_access_i0));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT4 #(
    .INIT(16'h0020)) 
    m3_databus_access_i_i_2
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m3_dead_valid_hold),
        .I2(wb_exception_from_m3_reg_2),
        .I3(m3_databus_access_i_reg),
        .O(m3_exception_taken));
  LUT6 #(
    .INIT(64'h0000000004000000)) 
    wb_exception_from_m3_i_1
       (.I0(wb_abort_div),
        .I1(wb_exception_from_m3_reg_2),
        .I2(m3_dead_valid_hold),
        .I3(\Using_FPGA.Native_0 ),
        .I4(wb_exception_from_m3_reg_3),
        .I5(sync_reset),
        .O(wb_exception_from_m3_reg));
  LUT6 #(
    .INIT(64'h0000000004000000)) 
    wb_exception_from_m3_rep__0_i_1
       (.I0(wb_abort_div),
        .I1(wb_exception_from_m3_reg_2),
        .I2(m3_dead_valid_hold),
        .I3(\Using_FPGA.Native_0 ),
        .I4(wb_exception_from_m3_reg_3),
        .I5(sync_reset),
        .O(wb_exception_from_m3_reg_1));
  LUT6 #(
    .INIT(64'h0000000004000000)) 
    wb_exception_from_m3_rep_i_1
       (.I0(wb_abort_div),
        .I1(wb_exception_from_m3_reg_2),
        .I2(m3_dead_valid_hold),
        .I3(\Using_FPGA.Native_0 ),
        .I4(wb_exception_from_m3_reg_3),
        .I5(sync_reset),
        .O(wb_exception_from_m3_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \wb_exception_raw_kind[28]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Q[2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \wb_exception_raw_kind[30]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Q[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \wb_exception_raw_kind[31]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Q[0]),
        .O(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_552
   (\Using_FPGA.Native_0 ,
    A1_out,
    m2_raw_valid_reg,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    D_0,
    Clk,
    \Using_FPGA.Native_4 ,
    E,
    m3_gpr_write,
    \Using_FPGA.Native_5 );
  output \Using_FPGA.Native_0 ;
  output A1_out;
  output m2_raw_valid_reg;
  output D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input D_0;
  input Clk;
  input \Using_FPGA.Native_4 ;
  input [0:0]E;
  input m3_gpr_write;
  input \Using_FPGA.Native_5 ;

  wire A1_out;
  wire Clk;
  wire D;
  wire D_0;
  wire [0:0]E;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire m2_raw_valid_reg;
  wire m3_gpr_write;

  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \EX_Branch_CMP_Op1[29]_i_13 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(\Using_FPGA.Native_0 ),
        .O(m2_raw_valid_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D_0),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_3 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .O(A1_out));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT4 #(
    .INIT(16'h88B8)) 
    \Using_FPGA.Native_i_1__61 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(E),
        .I2(m3_gpr_write),
        .I3(\Using_FPGA.Native_5 ),
        .O(D));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__71 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .O(\Using_FPGA.Native_1 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__81 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .O(\Using_FPGA.Native_2 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_553
   (m2_gpr_write_dbg,
    D,
    \Using_FPGA.Native_0 ,
    D_0,
    Clk,
    E,
    m3_gpr_write_dbg,
    \Using_FPGA.Native_1 );
  output m2_gpr_write_dbg;
  output D;
  input \Using_FPGA.Native_0 ;
  input D_0;
  input Clk;
  input [0:0]E;
  input m3_gpr_write_dbg;
  input \Using_FPGA.Native_1 ;

  wire Clk;
  wire D;
  wire D_0;
  wire [0:0]E;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire m2_gpr_write_dbg;
  wire m3_gpr_write_dbg;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D_0),
        .Q(m2_gpr_write_dbg),
        .R(\Using_FPGA.Native_0 ));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Using_FPGA.Native_i_1__62 
       (.I0(m2_gpr_write_dbg),
        .I1(E),
        .I2(m3_gpr_write_dbg),
        .I3(\Using_FPGA.Native_1 ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_554
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    m2_databus_access_i0,
    wb_exception_from_m3_reg_rep__0,
    D_0,
    m2_exception_taken,
    D,
    sync_reset,
    D_1,
    Clk,
    \Using_FPGA.Native_2 ,
    m2_databus_access_i_reg,
    m2_raw_valid_reg,
    m1_dead_valid_hold,
    m1_exception_from_m0,
    m1_databus_access,
    m3_exception_from_m2,
    m3_dead_valid_hold,
    m2_databus_access_i_reg_0,
    E,
    \Using_FPGA.Native_3 ,
    m2_dead_valid_hold,
    m1_databus_addr_from_m0_i_3,
    Q);
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output m2_databus_access_i0;
  output wb_exception_from_m3_reg_rep__0;
  output D_0;
  output m2_exception_taken;
  output [2:0]D;
  input sync_reset;
  input D_1;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input m2_databus_access_i_reg;
  input m2_raw_valid_reg;
  input m1_dead_valid_hold;
  input m1_exception_from_m0;
  input m1_databus_access;
  input m3_exception_from_m2;
  input m3_dead_valid_hold;
  input m2_databus_access_i_reg_0;
  input [0:0]E;
  input \Using_FPGA.Native_3 ;
  input m2_dead_valid_hold;
  input m1_databus_addr_from_m0_i_3;
  input [2:0]Q;

  wire Clk;
  wire [2:0]D;
  wire D_0;
  wire D_1;
  wire [0:0]E;
  wire [2:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire m1_databus_access;
  wire m1_databus_addr_from_m0_i_3;
  wire m1_dead_valid_hold;
  wire m1_exception_from_m0;
  wire m2_databus_access_i0;
  wire m2_databus_access_i_reg;
  wire m2_databus_access_i_reg_0;
  wire m2_dead_valid_hold;
  wire m2_exception_taken;
  wire m2_raw_valid_reg;
  wire m3_dead_valid_hold;
  wire m3_exception_from_m2;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D_1),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h80808F80)) 
    \Using_FPGA.Native_i_1__18 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(E),
        .I3(m3_exception_from_m2),
        .I4(\Using_FPGA.Native_3 ),
        .O(D_0));
  LUT3 #(
    .INIT(8'hFB)) 
    \Using_FPGA.Native_i_2__3 
       (.I0(m2_databus_access_i_reg),
        .I1(m2_raw_valid_reg),
        .I2(m1_dead_valid_hold),
        .O(wb_exception_from_m3_reg_rep__0));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT4 #(
    .INIT(16'h0020)) 
    m1_databus_addr_from_m0_i_4
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m2_dead_valid_hold),
        .I2(m1_databus_addr_from_m0_i_3),
        .I3(m2_databus_access_i_reg),
        .O(m2_exception_taken));
  LUT6 #(
    .INIT(64'h8888888888088888)) 
    m2_databus_access_i_i_1
       (.I0(m1_databus_access),
        .I1(\Using_FPGA.Native_1 ),
        .I2(m3_exception_from_m2),
        .I3(m3_dead_valid_hold),
        .I4(m2_databus_access_i_reg_0),
        .I5(m2_databus_access_i_reg),
        .O(m2_databus_access_i0));
  LUT6 #(
    .INIT(64'h7777707777777777)) 
    m2_databus_access_i_i_2
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(m2_databus_access_i_reg),
        .I3(m2_raw_valid_reg),
        .I4(m1_dead_valid_hold),
        .I5(m1_exception_from_m0),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_exception_raw_kind[28]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Q[2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_exception_raw_kind[30]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Q[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m3_exception_raw_kind[31]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Q[0]),
        .O(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_555
   (wb_exception_from_m3_reg_rep__0,
    sync_reset,
    Clk,
    E,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    m3_div_overflow,
    m3_div_by_zero,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 );
  output wb_exception_from_m3_reg_rep__0;
  input sync_reset;
  input Clk;
  input [0:0]E;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input m3_div_overflow;
  input m3_div_by_zero;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;

  wire Clk;
  wire D;
  wire [0:0]E;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire m3_div_zero_overflow_m2_hold;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(m3_div_zero_overflow_m2_hold),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0232023202320202)) 
    \Using_FPGA.Native_i_1__24 
       (.I0(m3_div_zero_overflow_m2_hold),
        .I1(E),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_1 ),
        .I4(m3_div_overflow),
        .I5(m3_div_by_zero),
        .O(D));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF54FFFF)) 
    \Using_FPGA.Native_i_2__9 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(m3_div_overflow),
        .I2(m3_div_by_zero),
        .I3(m3_div_zero_overflow_m2_hold),
        .I4(E),
        .I5(\Using_FPGA.Native_3 ),
        .O(wb_exception_from_m3_reg_rep__0));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_556
   (\Using_FPGA.Native_0 ,
    floating_hold_div_by_zero_reg,
    floating_hold_div_by_zero_reg_0,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    sync_reset,
    D,
    Clk,
    floating_hold_div_by_zero__0,
    E,
    floating_hold_div_by_zero_reg_1,
    EX_Op1_Zero,
    floating_hold_div_by_zero_reg_2,
    m3_div_by_zero,
    floating_hold_div_overflow_reg,
    last_cycle,
    floating_hold_div_overflow_reg_0,
    m3_div_overflow_i_reg,
    m3_div_overflow_i_reg_0);
  output \Using_FPGA.Native_0 ;
  output floating_hold_div_by_zero_reg;
  output floating_hold_div_by_zero_reg_0;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input sync_reset;
  input D;
  input Clk;
  input floating_hold_div_by_zero__0;
  input [0:0]E;
  input floating_hold_div_by_zero_reg_1;
  input EX_Op1_Zero;
  input floating_hold_div_by_zero_reg_2;
  input m3_div_by_zero;
  input floating_hold_div_overflow_reg;
  input last_cycle;
  input floating_hold_div_overflow_reg_0;
  input m3_div_overflow_i_reg;
  input m3_div_overflow_i_reg_0;

  wire Clk;
  wire D;
  wire [0:0]E;
  wire EX_Op1_Zero;
  wire M3_Div_By_Zero_i_2_n_0;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire floating_hold_div_by_zero__0;
  wire floating_hold_div_by_zero_reg;
  wire floating_hold_div_by_zero_reg_0;
  wire floating_hold_div_by_zero_reg_1;
  wire floating_hold_div_by_zero_reg_2;
  wire floating_hold_div_overflow_reg;
  wire floating_hold_div_overflow_reg_0;
  wire last_cycle;
  wire m3_div_by_zero;
  wire m3_div_overflow_i_reg;
  wire m3_div_overflow_i_reg_0;
  wire sync_reset;

  LUT6 #(
    .INIT(64'h00000000FF8A0080)) 
    M3_Div_By_Zero_i_1
       (.I0(M3_Div_By_Zero_i_2_n_0),
        .I1(floating_hold_div_by_zero__0),
        .I2(E),
        .I3(floating_hold_div_by_zero_reg_1),
        .I4(m3_div_by_zero),
        .I5(floating_hold_div_by_zero_reg_2),
        .O(floating_hold_div_by_zero_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'hA3)) 
    M3_Div_By_Zero_i_2
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m3_div_overflow_i_reg),
        .I2(E),
        .O(M3_Div_By_Zero_i_2_n_0));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h00000000FF2A002A)) 
    floating_hold_div_by_zero_i_1
       (.I0(floating_hold_div_by_zero__0),
        .I1(\Using_FPGA.Native_0 ),
        .I2(E),
        .I3(floating_hold_div_by_zero_reg_1),
        .I4(EX_Op1_Zero),
        .I5(floating_hold_div_by_zero_reg_2),
        .O(floating_hold_div_by_zero_reg));
  LUT6 #(
    .INIT(64'h00000000F077F000)) 
    floating_hold_div_overflow_i_1
       (.I0(\Using_FPGA.Native_0 ),
        .I1(E),
        .I2(floating_hold_div_overflow_reg),
        .I3(last_cycle),
        .I4(floating_hold_div_overflow_reg_0),
        .I5(floating_hold_div_by_zero_reg_2),
        .O(\Using_FPGA.Native_1 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT5 #(
    .INIT(32'h0000FFA3)) 
    m3_div_overflow_i_i_1
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m3_div_overflow_i_reg),
        .I2(E),
        .I3(last_cycle),
        .I4(m3_div_overflow_i_reg_0),
        .O(\Using_FPGA.Native_2 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_557
   (\Using_FPGA.Native_0 ,
    A2_out,
    m1_raw_valid_reg,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    D,
    Clk,
    \Using_FPGA.Native_4 );
  output \Using_FPGA.Native_0 ;
  output A2_out;
  output m1_raw_valid_reg;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input D;
  input Clk;
  input \Using_FPGA.Native_4 ;

  wire A2_out;
  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire m1_raw_valid_reg;

  LUT2 #(
    .INIT(4'h7)) 
    \EX_Branch_CMP_Op1[29]_i_10 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(\Using_FPGA.Native_0 ),
        .O(m1_raw_valid_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_3 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .O(A2_out));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__69 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .O(\Using_FPGA.Native_1 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__79 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .O(\Using_FPGA.Native_2 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_558
   (m1_gpr_write_dbg,
    \Using_FPGA.Native_0 ,
    D,
    Clk);
  output m1_gpr_write_dbg;
  input \Using_FPGA.Native_0 ;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire m1_gpr_write_dbg;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(m1_gpr_write_dbg),
        .R(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_559
   (\Using_FPGA.Native_0 ,
    D_0,
    A_N201_out,
    D,
    sync_reset,
    D_1,
    Clk,
    \Using_FPGA.Native_1 ,
    E,
    m2_exception_from_m1,
    \Using_FPGA.Native_2 ,
    m1_raw_valid_reg,
    m0_dead_valid_hold,
    m1_raw_valid_reg_0,
    Q);
  output \Using_FPGA.Native_0 ;
  output D_0;
  output A_N201_out;
  output [2:0]D;
  input sync_reset;
  input D_1;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input [0:0]E;
  input m2_exception_from_m1;
  input [0:0]\Using_FPGA.Native_2 ;
  input m1_raw_valid_reg;
  input m0_dead_valid_hold;
  input m1_raw_valid_reg_0;
  input [2:0]Q;

  wire A_N201_out;
  wire Clk;
  wire [2:0]D;
  wire D_0;
  wire D_1;
  wire [0:0]E;
  wire [2:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire m0_dead_valid_hold;
  wire m1_raw_valid_reg;
  wire m1_raw_valid_reg_0;
  wire m2_exception_from_m1;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D_1),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h20202F20)) 
    \Using_FPGA.Native_i_1__17 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(E),
        .I3(m2_exception_from_m1),
        .I4(\Using_FPGA.Native_2 ),
        .O(D_0));
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.Native_i_2__4 
       (.I0(m1_raw_valid_reg),
        .I1(m0_dead_valid_hold),
        .I2(m1_raw_valid_reg_0),
        .O(A_N201_out));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m2_exception_raw_kind[28]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Q[2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m2_exception_raw_kind[30]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Q[1]),
        .O(D[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \m2_exception_raw_kind[31]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Q[0]),
        .O(D[0]));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_560
   (wb_exception_from_m3_reg_rep__0,
    sync_reset,
    Clk,
    \Using_FPGA.Native_0 ,
    m3_div_by_zero,
    m3_div_overflow,
    \Using_FPGA.Native_1 ,
    E,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 );
  output wb_exception_from_m3_reg_rep__0;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input m3_div_by_zero;
  input m3_div_overflow;
  input \Using_FPGA.Native_1 ;
  input [0:0]E;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;

  wire Clk;
  wire D;
  wire [0:0]E;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire m3_div_zero_overflow_m1_hold;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(m3_div_zero_overflow_m1_hold),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h000000002222EEE2)) 
    \Using_FPGA.Native_i_1__28 
       (.I0(m3_div_zero_overflow_m1_hold),
        .I1(\Using_FPGA.Native_0 ),
        .I2(m3_div_by_zero),
        .I3(m3_div_overflow),
        .I4(\Using_FPGA.Native_1 ),
        .I5(E),
        .O(D));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF54FFFF)) 
    \Using_FPGA.Native_i_2__10 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(m3_div_overflow),
        .I2(m3_div_by_zero),
        .I3(m3_div_zero_overflow_m1_hold),
        .I4(E),
        .I5(\Using_FPGA.Native_3 ),
        .O(wb_exception_from_m3_reg_rep__0));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_561
   (m1_is_div_instr_i,
    sync_reset,
    D,
    Clk);
  output m1_is_div_instr_i;
  input sync_reset;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire m1_is_div_instr_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(m1_is_div_instr_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_562
   (\Using_FPGA.Native_0 ,
    ex_Interrupt_raw_reg,
    m1_databus_access_from_m00,
    ex_reservation_reg,
    sync_reset,
    D,
    Clk,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    m1_databus_access_from_m0_reg,
    ex_dead_valid_hold,
    m0_dead_valid_hold,
    m1_databus_access_from_m0_reg_0,
    ex_reservation,
    \Using_FPGA.Native_4 ,
    m0_databus_read_i0,
    \Using_FPGA.Native_5 );
  output \Using_FPGA.Native_0 ;
  output ex_Interrupt_raw_reg;
  output m1_databus_access_from_m00;
  output ex_reservation_reg;
  input sync_reset;
  input D;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input m1_databus_access_from_m0_reg;
  input ex_dead_valid_hold;
  input m0_dead_valid_hold;
  input m1_databus_access_from_m0_reg_0;
  input ex_reservation;
  input \Using_FPGA.Native_4 ;
  input m0_databus_read_i0;
  input \Using_FPGA.Native_5 ;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire ex_Interrupt_raw_reg;
  wire ex_dead_valid_hold;
  wire ex_reservation;
  wire ex_reservation_reg;
  wire m0_databus_read_i0;
  wire m0_dead_valid_hold;
  wire m1_databus_access_from_m00;
  wire m1_databus_access_from_m0_reg;
  wire m1_databus_access_from_m0_reg_0;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h000000E0)) 
    \Using_FPGA.Native_i_2__13 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(m1_databus_access_from_m0_reg),
        .I4(ex_dead_valid_hold),
        .O(ex_Interrupt_raw_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF04FF)) 
    \Using_FPGA.Native_i_3__0 
       (.I0(ex_reservation),
        .I1(\Using_FPGA.Native_4 ),
        .I2(m0_databus_read_i0),
        .I3(\Using_FPGA.Native_5 ),
        .I4(m1_databus_access_from_m0_reg),
        .I5(ex_dead_valid_hold),
        .O(ex_reservation_reg));
  LUT4 #(
    .INIT(16'h0010)) 
    m1_databus_access_from_m0_i_1
       (.I0(m1_databus_access_from_m0_reg),
        .I1(m0_dead_valid_hold),
        .I2(\Using_FPGA.Native_0 ),
        .I3(m1_databus_access_from_m0_reg_0),
        .O(m1_databus_access_from_m00));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_563
   (\Using_FPGA.Native_0 ,
    A3_out,
    \Using_FPGA.Native_1 ,
    m0_raw_valid_reg,
    m0_raw_valid_reg_0,
    \Using_FPGA.Native_2 ,
    D,
    Clk,
    \Using_FPGA.Native_3 );
  output \Using_FPGA.Native_0 ;
  output A3_out;
  output \Using_FPGA.Native_1 ;
  output m0_raw_valid_reg;
  output m0_raw_valid_reg_0;
  input \Using_FPGA.Native_2 ;
  input D;
  input Clk;
  input \Using_FPGA.Native_3 ;

  wire A3_out;
  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire m0_raw_valid_reg;
  wire m0_raw_valid_reg_0;

  LUT2 #(
    .INIT(4'h7)) 
    \EX_Branch_CMP_Op1[29]_i_17 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_3 ),
        .O(\Using_FPGA.Native_1 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_2 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__3 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\Using_FPGA.Native_0 ),
        .O(A3_out));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__67 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\Using_FPGA.Native_0 ),
        .O(m0_raw_valid_reg));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__77 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\Using_FPGA.Native_0 ),
        .O(m0_raw_valid_reg_0));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_564
   (m0_gpr_write_dbg,
    \Using_FPGA.Native_0 ,
    D,
    Clk);
  output m0_gpr_write_dbg;
  input \Using_FPGA.Native_0 ;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire m0_gpr_write_dbg;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(m0_gpr_write_dbg),
        .R(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_565
   (\Using_FPGA.Native_0 ,
    p_43_out__4,
    single_Step_N_reg,
    \Use_Async_Reset.sync_reset_reg ,
    wb_exception_from_m3_reg_rep,
    D_0,
    m0_raw_valid_reg,
    wb_exception_from_m3_reg_rep__0,
    ex_dead_valid_hold_reg,
    wb_exception_from_m3_reg_rep_0,
    of_next_ex_valid,
    \Using_FPGA.Native_1 ,
    D_1,
    D,
    sync_reset,
    D_2,
    Clk,
    A_N201_out,
    m3_exception_taken,
    \Using_FPGA.Native_2 ,
    wb_exception_taken,
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ,
    single_Step_N,
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ,
    E,
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ,
    p_48_out,
    ex_first_cycle_reg,
    ex_raw_valid_reg,
    ex_raw_valid_reg_0,
    \Using_FPGA.Native_3 ,
    in0,
    m1_databus_addr_from_m0_reg,
    m1_databus_addr_from_m0_reg_0,
    of_read_imm_reg_raw_reg,
    of_raw_valid,
    of_dead_valid_hold,
    ex_jump,
    ex_jump_nodelay,
    ex_dead_valid_hold,
    of_read_imm_reg_raw_reg_0,
    of_read_imm_reg_raw_reg_1,
    m0_dead_valid_hold,
    m1_databus_addr_from_m0_reg_1,
    m1_databus_addr_from_m0_reg_2,
    m1_exception_from_m0,
    \Using_FPGA.Native_4 ,
    m0_exception_raw_kind);
  output \Using_FPGA.Native_0 ;
  output p_43_out__4;
  output single_Step_N_reg;
  output \Use_Async_Reset.sync_reset_reg ;
  output wb_exception_from_m3_reg_rep;
  output D_0;
  output m0_raw_valid_reg;
  output wb_exception_from_m3_reg_rep__0;
  output ex_dead_valid_hold_reg;
  output wb_exception_from_m3_reg_rep_0;
  output of_next_ex_valid;
  output \Using_FPGA.Native_1 ;
  output D_1;
  output [2:0]D;
  input sync_reset;
  input D_2;
  input Clk;
  input A_N201_out;
  input m3_exception_taken;
  input \Using_FPGA.Native_2 ;
  input wb_exception_taken;
  input \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  input single_Step_N;
  input \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ;
  input [0:0]E;
  input \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ;
  input p_48_out;
  input ex_first_cycle_reg;
  input ex_raw_valid_reg;
  input ex_raw_valid_reg_0;
  input \Using_FPGA.Native_3 ;
  input in0;
  input m1_databus_addr_from_m0_reg;
  input m1_databus_addr_from_m0_reg_0;
  input of_read_imm_reg_raw_reg;
  input of_raw_valid;
  input of_dead_valid_hold;
  input ex_jump;
  input ex_jump_nodelay;
  input ex_dead_valid_hold;
  input of_read_imm_reg_raw_reg_0;
  input of_read_imm_reg_raw_reg_1;
  input m0_dead_valid_hold;
  input m1_databus_addr_from_m0_reg_1;
  input m1_databus_addr_from_m0_reg_2;
  input m1_exception_from_m0;
  input [0:0]\Using_FPGA.Native_4 ;
  input [2:0]m0_exception_raw_kind;

  wire A_N201_out;
  wire Clk;
  wire [2:0]D;
  wire D_0;
  wire D_1;
  wire D_2;
  wire [0:0]E;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [0:0]\Using_FPGA.Native_4 ;
  wire ex_dead_valid_hold;
  wire ex_dead_valid_hold_reg;
  wire ex_first_cycle_reg;
  wire ex_jump;
  wire ex_jump_nodelay;
  wire ex_raw_valid_reg;
  wire ex_raw_valid_reg_0;
  wire in0;
  wire m0_dead_valid_hold;
  wire [2:0]m0_exception_raw_kind;
  wire m0_raw_valid_reg;
  wire m1_databus_addr_from_m0_reg;
  wire m1_databus_addr_from_m0_reg_0;
  wire m1_databus_addr_from_m0_reg_1;
  wire m1_databus_addr_from_m0_reg_2;
  wire m1_exception_from_m0;
  wire m3_exception_taken;
  wire of_dead_valid_hold;
  wire of_next_ex_valid;
  wire of_raw_valid;
  wire of_read_imm_reg_raw_reg;
  wire of_read_imm_reg_raw_reg_0;
  wire of_read_imm_reg_raw_reg_1;
  wire p_43_out__4;
  wire p_48_out;
  wire single_Step_N;
  wire single_Step_N_reg;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep;
  wire wb_exception_from_m3_reg_rep_0;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_taken;

  LUT6 #(
    .INIT(64'h0000070000000000)) 
    \Performance_Debug_Control.ex_dbg_pc_hit_i_i_4 
       (.I0(A_N201_out),
        .I1(\Using_FPGA.Native_0 ),
        .I2(m3_exception_taken),
        .I3(\Using_FPGA.Native_2 ),
        .I4(wb_exception_taken),
        .I5(\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ),
        .O(p_43_out__4));
  LUT6 #(
    .INIT(64'hF0F05555F0F030F0)) 
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_i_1 
       (.I0(single_Step_N),
        .I1(p_43_out__4),
        .I2(\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ),
        .I3(E),
        .I4(\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ),
        .I5(p_48_out),
        .O(single_Step_N_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D_2),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h0101010100FF0000)) 
    \Using_FPGA.Native_i_1__11 
       (.I0(m0_raw_valid_reg),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_3 ),
        .I3(in0),
        .I4(m1_databus_addr_from_m0_reg),
        .I5(E),
        .O(D_0));
  LUT5 #(
    .INIT(32'h80808F80)) 
    \Using_FPGA.Native_i_1__19 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(A_N201_out),
        .I2(in0),
        .I3(m1_exception_from_m0),
        .I4(\Using_FPGA.Native_4 ),
        .O(D_1));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    ex_first_cycle_i_1
       (.I0(wb_exception_from_m3_reg_rep),
        .I1(ex_first_cycle_reg),
        .I2(sync_reset),
        .I3(ex_raw_valid_reg),
        .O(wb_exception_from_m3_reg_rep_0));
  LUT6 #(
    .INIT(64'h0100010001110100)) 
    ex_raw_valid_i_1
       (.I0(sync_reset),
        .I1(ex_first_cycle_reg),
        .I2(wb_exception_from_m3_reg_rep),
        .I3(ex_raw_valid_reg),
        .I4(ex_raw_valid_reg_0),
        .I5(E),
        .O(\Use_Async_Reset.sync_reset_reg ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT1 #(
    .INIT(2'h1)) 
    ex_valid_keep_i_1
       (.I0(wb_exception_from_m3_reg_rep),
        .O(of_next_ex_valid));
  LUT6 #(
    .INIT(64'hFFFFFFEFFFEFFFEF)) 
    ex_valid_keep_i_2
       (.I0(ex_dead_valid_hold_reg),
        .I1(ex_first_cycle_reg),
        .I2(of_raw_valid),
        .I3(of_dead_valid_hold),
        .I4(ex_jump),
        .I5(ex_jump_nodelay),
        .O(wb_exception_from_m3_reg_rep));
  LUT6 #(
    .INIT(64'h0000000000040000)) 
    m1_databus_addr_from_m0_i_1
       (.I0(m0_raw_valid_reg),
        .I1(m1_databus_addr_from_m0_reg),
        .I2(m0_dead_valid_hold),
        .I3(m1_databus_addr_from_m0_reg_0),
        .I4(in0),
        .I5(sync_reset),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hFFFF0200)) 
    m1_databus_addr_from_m0_i_2
       (.I0(m1_databus_addr_from_m0_reg_1),
        .I1(m0_dead_valid_hold),
        .I2(m1_databus_addr_from_m0_reg_0),
        .I3(\Using_FPGA.Native_0 ),
        .I4(m1_databus_addr_from_m0_reg_2),
        .O(m0_raw_valid_reg));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m1_exception_raw_kind[28]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m0_exception_raw_kind[2]),
        .O(D[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \m1_exception_raw_kind[30]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m0_exception_raw_kind[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \m1_exception_raw_kind[31]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m0_exception_raw_kind[0]),
        .O(D[0]));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    of_read_imm_reg_raw_i_1
       (.I0(ex_dead_valid_hold_reg),
        .I1(m1_databus_addr_from_m0_reg_0),
        .I2(sync_reset),
        .I3(of_read_imm_reg_raw_reg),
        .I4(\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ),
        .O(wb_exception_from_m3_reg_rep__0));
  LUT6 #(
    .INIT(64'hFFFFFFFF10101000)) 
    of_read_imm_reg_raw_i_3
       (.I0(ex_dead_valid_hold),
        .I1(m1_databus_addr_from_m0_reg_0),
        .I2(ex_raw_valid_reg_0),
        .I3(of_read_imm_reg_raw_reg_0),
        .I4(of_read_imm_reg_raw_reg_1),
        .I5(m0_raw_valid_reg),
        .O(ex_dead_valid_hold_reg));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_566
   (wb_exception_from_m3_reg_rep__0,
    sync_reset,
    Clk,
    \Using_FPGA.Native_0 ,
    m3_div_by_zero,
    m3_div_overflow,
    \Using_FPGA.Native_1 ,
    in0,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 );
  output wb_exception_from_m3_reg_rep__0;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input m3_div_by_zero;
  input m3_div_overflow;
  input \Using_FPGA.Native_1 ;
  input in0;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire in0;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire m3_div_zero_overflow_m0_hold;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(m3_div_zero_overflow_m0_hold),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h000000002222EEE2)) 
    \Using_FPGA.Native_i_1__27 
       (.I0(m3_div_zero_overflow_m0_hold),
        .I1(\Using_FPGA.Native_0 ),
        .I2(m3_div_by_zero),
        .I3(m3_div_overflow),
        .I4(\Using_FPGA.Native_1 ),
        .I5(in0),
        .O(D));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF54FFFF)) 
    \Using_FPGA.Native_i_2__11 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(m3_div_overflow),
        .I2(m3_div_by_zero),
        .I3(m3_div_zero_overflow_m0_hold),
        .I4(in0),
        .I5(\Using_FPGA.Native_3 ),
        .O(wb_exception_from_m3_reg_rep__0));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_567
   (m0_is_div_instr_i,
    sync_reset,
    D,
    Clk);
  output m0_is_div_instr_i;
  input sync_reset;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire m0_is_div_instr_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(m0_is_div_instr_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_572
   (ex_jump_hold,
    \Using_FPGA.Native_0 ,
    sync_reset,
    Clk,
    \Using_FPGA.Native_1 ,
    E,
    \Using_FPGA.Native_2 ,
    of_raw_valid,
    ex_branch_with_delayslot);
  output ex_jump_hold;
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input [0:0]E;
  input \Using_FPGA.Native_2 ;
  input of_raw_valid;
  input ex_branch_with_delayslot;

  wire Clk;
  wire [0:0]E;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_branch_with_delayslot;
  wire ex_jump_hold;
  wire ex_jump_hold_next6_out;
  wire of_raw_valid;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(ex_jump_hold_next6_out),
        .Q(ex_jump_hold),
        .R(sync_reset));
  LUT3 #(
    .INIT(8'h45)) 
    \Using_FPGA.Native_i_1__34 
       (.I0(ex_jump_hold),
        .I1(of_raw_valid),
        .I2(ex_branch_with_delayslot),
        .O(\Using_FPGA.Native_0 ));
  LUT4 #(
    .INIT(16'h000E)) 
    \Using_FPGA.Native_i_1__7 
       (.I0(ex_jump_hold),
        .I1(\Using_FPGA.Native_1 ),
        .I2(E),
        .I3(\Using_FPGA.Native_2 ),
        .O(ex_jump_hold_next6_out));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_580
   (\Using_FPGA.Native_0 ,
    \Use_Async_Reset.sync_reset_reg ,
    ex_sleep_i0,
    ex_mbar_decode_reg,
    ex_mbar_decode_reg_0,
    \Using_FPGA.Native_1 ,
    Clk,
    sync_reset,
    \Using_FPGA.Native_2 ,
    ex_mbar_sleep,
    ex_mbar_wait_1,
    ex_first_cycle,
    ex_hibernate_i_reg,
    ex_hibernate_i_reg_0);
  output \Using_FPGA.Native_0 ;
  output \Use_Async_Reset.sync_reset_reg ;
  output ex_sleep_i0;
  output ex_mbar_decode_reg;
  output ex_mbar_decode_reg_0;
  input \Using_FPGA.Native_1 ;
  input Clk;
  input sync_reset;
  input \Using_FPGA.Native_2 ;
  input ex_mbar_sleep;
  input ex_mbar_wait_1;
  input ex_first_cycle;
  input ex_hibernate_i_reg;
  input ex_hibernate_i_reg_0;

  wire Clk;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_first_cycle;
  wire ex_hibernate_i_reg;
  wire ex_hibernate_i_reg_0;
  wire ex_mbar_decode_reg;
  wire ex_mbar_decode_reg_0;
  wire ex_mbar_sleep;
  wire ex_mbar_wait_1;
  wire ex_sleep_i0;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Use_Async_Reset.sync_reset_reg ));
  LUT5 #(
    .INIT(32'h0000DDDF)) 
    \Using_FPGA.Native_i_1__101 
       (.I0(ex_hibernate_i_reg),
        .I1(\Using_FPGA.Native_0 ),
        .I2(ex_mbar_wait_1),
        .I3(ex_first_cycle),
        .I4(ex_mbar_sleep),
        .O(ex_mbar_decode_reg_0));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__208 
       (.I0(sync_reset),
        .I1(\Using_FPGA.Native_2 ),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT5 #(
    .INIT(32'h0000DDDF)) 
    \Using_FPGA.Native_i_2__2 
       (.I0(ex_hibernate_i_reg),
        .I1(\Using_FPGA.Native_0 ),
        .I2(ex_mbar_wait_1),
        .I3(ex_first_cycle),
        .I4(ex_mbar_sleep),
        .O(ex_mbar_decode_reg));
  LUT6 #(
    .INIT(64'hAAAAAAAA888AAAAA)) 
    ex_hibernate_i_i_2
       (.I0(ex_mbar_sleep),
        .I1(\Using_FPGA.Native_0 ),
        .I2(ex_mbar_wait_1),
        .I3(ex_first_cycle),
        .I4(ex_hibernate_i_reg),
        .I5(ex_hibernate_i_reg_0),
        .O(ex_sleep_i0));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_581
   (\Using_FPGA.Native_0 ,
    A4_out,
    ex_raw_valid_reg,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    D,
    Clk,
    \Using_FPGA.Native_4 );
  output \Using_FPGA.Native_0 ;
  output A4_out;
  output ex_raw_valid_reg;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input D;
  input Clk;
  input \Using_FPGA.Native_4 ;

  wire A4_out;
  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire ex_raw_valid_reg;

  LUT2 #(
    .INIT(4'h7)) 
    \EX_Op3[0]_i_11 
       (.I0(\Using_FPGA.Native_4 ),
        .I1(\Using_FPGA.Native_0 ),
        .O(ex_raw_valid_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(\Using_FPGA.Native_0 ),
        .R(\Using_FPGA.Native_3 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__4 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .O(A4_out));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__65 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .O(\Using_FPGA.Native_1 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__75 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_4 ),
        .O(\Using_FPGA.Native_2 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_582
   (ex_gpr_write_dbg,
    \Using_FPGA.Native_0 ,
    D,
    Clk);
  output ex_gpr_write_dbg;
  input \Using_FPGA.Native_0 ;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native_0 ;
  wire ex_gpr_write_dbg;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(ex_gpr_write_dbg),
        .R(\Using_FPGA.Native_0 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_583
   (m3_div_zero_overflow_ex_hold,
    sync_reset,
    Clk,
    \Using_FPGA.Native_0 ,
    m3_div_by_zero,
    m3_div_overflow,
    \Using_FPGA.Native_1 ,
    E);
  output m3_div_zero_overflow_ex_hold;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input m3_div_by_zero;
  input m3_div_overflow;
  input \Using_FPGA.Native_1 ;
  input [0:0]E;

  wire Clk;
  wire D;
  wire [0:0]E;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire m3_div_zero_overflow_ex_hold;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(m3_div_zero_overflow_ex_hold),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h000000002222EEE2)) 
    \Using_FPGA.Native_i_1__26 
       (.I0(m3_div_zero_overflow_ex_hold),
        .I1(\Using_FPGA.Native_0 ),
        .I2(m3_div_by_zero),
        .I3(m3_div_overflow),
        .I4(\Using_FPGA.Native_1 ),
        .I5(E),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_700
   (ex_MSR_i,
    sync_reset,
    D_2,
    Clk);
  output [0:0]ex_MSR_i;
  input sync_reset;
  input D_2;
  input Clk;

  wire Clk;
  wire D_2;
  wire [0:0]ex_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(D_2),
        .Q(ex_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_701
   (ex_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]ex_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(ex_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_702
   (ex_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]ex_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(ex_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_703
   (ex_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]ex_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(ex_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_704
   (ex_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]ex_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(ex_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_705
   (ex_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]ex_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(ex_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_706
   (ex_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]ex_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(ex_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_707
   (ex_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]ex_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(ex_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_708
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_709
   (ex_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]ex_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(ex_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_710
   (ex_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]ex_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(ex_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_711
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_712
   (EX_CarryIn,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output EX_CarryIn;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire EX_CarryIn;
  wire \Using_FPGA.Native_0 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(EX_CarryIn),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_713
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_714
   (ex_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]ex_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]ex_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(ex_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_715
   (m0_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m0_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m0_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m0_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_716
   (m0_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m0_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m0_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m0_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_717
   (m0_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m0_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m0_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m0_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_718
   (m0_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m0_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m0_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m0_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_719
   (m0_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m0_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m0_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m0_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_720
   (m0_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m0_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m0_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m0_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_721
   (m0_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m0_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m0_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m0_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_722
   (m0_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m0_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m0_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m0_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_723
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_724
   (m0_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m0_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m0_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m0_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_725
   (m0_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m0_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m0_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m0_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_726
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_727
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_728
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_729
   (m0_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m0_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m0_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m0_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_730
   (m1_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m1_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m1_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m1_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_731
   (m1_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m1_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m1_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m1_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_732
   (m1_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m1_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m1_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m1_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_733
   (m1_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m1_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m1_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m1_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_734
   (m1_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m1_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m1_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m1_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_735
   (m1_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m1_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m1_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m1_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_736
   (m1_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m1_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m1_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m1_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_737
   (m1_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m1_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m1_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m1_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_738
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_739
   (m1_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m1_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m1_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m1_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_740
   (m1_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m1_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m1_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m1_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_741
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_742
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_743
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_744
   (m1_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m1_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m1_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m1_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_745
   (m2_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m2_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m2_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m2_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_746
   (m2_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m2_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m2_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m2_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_747
   (m2_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m2_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m2_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m2_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_748
   (m2_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m2_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m2_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m2_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_749
   (m2_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m2_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m2_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m2_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_750
   (m2_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m2_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m2_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m2_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_751
   (m2_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m2_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m2_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m2_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_752
   (m2_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m2_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m2_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m2_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_753
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_754
   (m2_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m2_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m2_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m2_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_755
   (m2_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m2_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m2_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m2_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_756
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_757
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_758
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_759
   (m2_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m2_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m2_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m2_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_760
   (m3_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m3_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m3_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m3_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_761
   (m3_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m3_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m3_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m3_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_762
   (m3_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m3_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m3_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m3_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_763
   (m3_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m3_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m3_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m3_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_764
   (m3_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m3_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m3_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m3_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_765
   (m3_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m3_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m3_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m3_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_766
   (m3_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m3_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m3_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m3_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_767
   (m3_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m3_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m3_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m3_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_768
   (\Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    \Using_FPGA.Native_2 ,
    Clk,
    \Using_FPGA.Native_3 ,
    wb_msr,
    wb_div_zero_overflow);
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input \Using_FPGA.Native_2 ;
  input Clk;
  input \Using_FPGA.Native_3 ;
  input [0:0]wb_msr;
  input wb_div_zero_overflow;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire sync_reset;
  wire wb_div_zero_overflow;
  wire [0:0]wb_msr;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_2 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hFFE2)) 
    \Using_FPGA.Native_i_1__139 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_3 ),
        .I2(wb_msr),
        .I3(wb_div_zero_overflow),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_769
   (m3_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m3_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m3_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m3_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_770
   (m3_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m3_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m3_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m3_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_771
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_772
   (\Using_FPGA.Native_0 ,
    sync_reset,
    \Using_FPGA.Native_1 ,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_1 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_773
   (m3_msr,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m3_msr;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m3_msr;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m3_msr),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_774
   (m3_MSR_i,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk);
  output [0:0]m3_MSR_i;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]m3_MSR_i;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(m3_MSR_i),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_775
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    sync_reset,
    Clk,
    \Using_FPGA.Native_5 ,
    m3_MSR_i,
    out,
    of_piperun,
    \of_MSR_i_reg[17] ,
    m2_MSR_i,
    m3_piperun,
    ex_MSR_i,
    m0_piperun,
    m0_MSR_i,
    m1_piperun,
    m1_MSR_i,
    m2_piperun);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_5 ;
  input [0:0]m3_MSR_i;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[17] ;
  input [0:0]m2_MSR_i;
  input m3_piperun;
  input [0:0]ex_MSR_i;
  input m0_piperun;
  input [0:0]m0_MSR_i;
  input m1_piperun;
  input [0:0]m1_MSR_i;
  input m2_piperun;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__156_n_0 ;
  wire [0:0]ex_MSR_i;
  wire [0:0]m0_MSR_i;
  wire m0_piperun;
  wire [0:0]m1_MSR_i;
  wire m1_piperun;
  wire [0:0]m2_MSR_i;
  wire m2_piperun;
  wire [0:0]m3_MSR_i;
  wire m3_piperun;
  wire [0:0]\of_MSR_i_reg[17] ;
  wire of_piperun;
  wire [0:0]out;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__156_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__156 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m3_MSR_i),
        .O(\Using_FPGA.Native_i_1__156_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__157 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m2_MSR_i),
        .I3(m3_piperun),
        .I4(m3_MSR_i),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__169 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(ex_MSR_i),
        .I3(m0_piperun),
        .I4(m0_MSR_i),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__181 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m0_MSR_i),
        .I3(m1_piperun),
        .I4(m1_MSR_i),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__193 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m1_MSR_i),
        .I3(m2_piperun),
        .I4(m2_MSR_i),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[17]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(out),
        .I3(of_piperun),
        .I4(\of_MSR_i_reg[17] ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_776
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    sync_reset,
    Clk,
    \Using_FPGA.Native_5 ,
    m3_MSR_i,
    out,
    of_piperun,
    \of_MSR_i_reg[18] ,
    m2_MSR_i,
    m3_piperun,
    ex_MSR_i,
    m0_piperun,
    m0_MSR_i,
    m1_piperun,
    m1_MSR_i,
    m2_piperun);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_5 ;
  input [0:0]m3_MSR_i;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[18] ;
  input [0:0]m2_MSR_i;
  input m3_piperun;
  input [0:0]ex_MSR_i;
  input m0_piperun;
  input [0:0]m0_MSR_i;
  input m1_piperun;
  input [0:0]m1_MSR_i;
  input m2_piperun;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__155_n_0 ;
  wire [0:0]ex_MSR_i;
  wire [0:0]m0_MSR_i;
  wire m0_piperun;
  wire [0:0]m1_MSR_i;
  wire m1_piperun;
  wire [0:0]m2_MSR_i;
  wire m2_piperun;
  wire [0:0]m3_MSR_i;
  wire m3_piperun;
  wire [0:0]\of_MSR_i_reg[18] ;
  wire of_piperun;
  wire [0:0]out;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__155_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__155 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m3_MSR_i),
        .O(\Using_FPGA.Native_i_1__155_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__158 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m2_MSR_i),
        .I3(m3_piperun),
        .I4(m3_MSR_i),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__170 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(ex_MSR_i),
        .I3(m0_piperun),
        .I4(m0_MSR_i),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__182 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m0_MSR_i),
        .I3(m1_piperun),
        .I4(m1_MSR_i),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__194 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m1_MSR_i),
        .I3(m2_piperun),
        .I4(m2_MSR_i),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[18]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(out),
        .I3(of_piperun),
        .I4(\of_MSR_i_reg[18] ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_777
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    sync_reset,
    Clk,
    \Using_FPGA.Native_5 ,
    m3_MSR_i,
    out,
    of_piperun,
    \of_MSR_i_reg[19] ,
    m2_MSR_i,
    m3_piperun,
    ex_MSR_i,
    m0_piperun,
    m0_MSR_i,
    m1_piperun,
    m1_MSR_i,
    m2_piperun);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_5 ;
  input [0:0]m3_MSR_i;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[19] ;
  input [0:0]m2_MSR_i;
  input m3_piperun;
  input [0:0]ex_MSR_i;
  input m0_piperun;
  input [0:0]m0_MSR_i;
  input m1_piperun;
  input [0:0]m1_MSR_i;
  input m2_piperun;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__154_n_0 ;
  wire [0:0]ex_MSR_i;
  wire [0:0]m0_MSR_i;
  wire m0_piperun;
  wire [0:0]m1_MSR_i;
  wire m1_piperun;
  wire [0:0]m2_MSR_i;
  wire m2_piperun;
  wire [0:0]m3_MSR_i;
  wire m3_piperun;
  wire [0:0]\of_MSR_i_reg[19] ;
  wire of_piperun;
  wire [0:0]out;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__154_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__154 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m3_MSR_i),
        .O(\Using_FPGA.Native_i_1__154_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__159 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m2_MSR_i),
        .I3(m3_piperun),
        .I4(m3_MSR_i),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__171 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(ex_MSR_i),
        .I3(m0_piperun),
        .I4(m0_MSR_i),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__183 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m0_MSR_i),
        .I3(m1_piperun),
        .I4(m1_MSR_i),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__195 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m1_MSR_i),
        .I3(m2_piperun),
        .I4(m2_MSR_i),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[19]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(out),
        .I3(of_piperun),
        .I4(\of_MSR_i_reg[19] ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_778
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    sync_reset,
    Clk,
    \Using_FPGA.Native_5 ,
    m3_MSR_i,
    out,
    of_piperun,
    \of_MSR_i_reg[20] ,
    m2_MSR_i,
    m3_piperun,
    ex_MSR_i,
    m0_piperun,
    m0_MSR_i,
    m1_piperun,
    m1_MSR_i,
    m2_piperun);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_5 ;
  input [0:0]m3_MSR_i;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[20] ;
  input [0:0]m2_MSR_i;
  input m3_piperun;
  input [0:0]ex_MSR_i;
  input m0_piperun;
  input [0:0]m0_MSR_i;
  input m1_piperun;
  input [0:0]m1_MSR_i;
  input m2_piperun;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__153_n_0 ;
  wire [0:0]ex_MSR_i;
  wire [0:0]m0_MSR_i;
  wire m0_piperun;
  wire [0:0]m1_MSR_i;
  wire m1_piperun;
  wire [0:0]m2_MSR_i;
  wire m2_piperun;
  wire [0:0]m3_MSR_i;
  wire m3_piperun;
  wire [0:0]\of_MSR_i_reg[20] ;
  wire of_piperun;
  wire [0:0]out;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__153_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__153 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m3_MSR_i),
        .O(\Using_FPGA.Native_i_1__153_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__160 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m2_MSR_i),
        .I3(m3_piperun),
        .I4(m3_MSR_i),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__172 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(ex_MSR_i),
        .I3(m0_piperun),
        .I4(m0_MSR_i),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__184 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m0_MSR_i),
        .I3(m1_piperun),
        .I4(m1_MSR_i),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__196 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m1_MSR_i),
        .I3(m2_piperun),
        .I4(m2_MSR_i),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[20]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(out),
        .I3(of_piperun),
        .I4(\of_MSR_i_reg[20] ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_779
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    sync_reset,
    Clk,
    \Using_FPGA.Native_5 ,
    m3_MSR_i,
    out,
    of_piperun,
    \of_MSR_i_reg[21] ,
    m2_MSR_i,
    m3_piperun,
    ex_MSR_i,
    m0_piperun,
    m0_MSR_i,
    m1_piperun,
    m1_MSR_i,
    m2_piperun);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_5 ;
  input [0:0]m3_MSR_i;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[21] ;
  input [0:0]m2_MSR_i;
  input m3_piperun;
  input [0:0]ex_MSR_i;
  input m0_piperun;
  input [0:0]m0_MSR_i;
  input m1_piperun;
  input [0:0]m1_MSR_i;
  input m2_piperun;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__152_n_0 ;
  wire [0:0]ex_MSR_i;
  wire [0:0]m0_MSR_i;
  wire m0_piperun;
  wire [0:0]m1_MSR_i;
  wire m1_piperun;
  wire [0:0]m2_MSR_i;
  wire m2_piperun;
  wire [0:0]m3_MSR_i;
  wire m3_piperun;
  wire [0:0]\of_MSR_i_reg[21] ;
  wire of_piperun;
  wire [0:0]out;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__152_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__152 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m3_MSR_i),
        .O(\Using_FPGA.Native_i_1__152_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__161 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m2_MSR_i),
        .I3(m3_piperun),
        .I4(m3_MSR_i),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__173 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(ex_MSR_i),
        .I3(m0_piperun),
        .I4(m0_MSR_i),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__185 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m0_MSR_i),
        .I3(m1_piperun),
        .I4(m1_MSR_i),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__197 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m1_MSR_i),
        .I3(m2_piperun),
        .I4(m2_MSR_i),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[21]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(out),
        .I3(of_piperun),
        .I4(\of_MSR_i_reg[21] ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_780
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    sync_reset,
    Clk,
    \Using_FPGA.Native_5 ,
    m3_MSR_i,
    out,
    of_piperun,
    \of_MSR_i_reg[22] ,
    m2_MSR_i,
    m3_piperun,
    ex_MSR_i,
    m0_piperun,
    m0_MSR_i,
    m1_piperun,
    m1_MSR_i,
    m2_piperun);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_5 ;
  input [0:0]m3_MSR_i;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[22] ;
  input [0:0]m2_MSR_i;
  input m3_piperun;
  input [0:0]ex_MSR_i;
  input m0_piperun;
  input [0:0]m0_MSR_i;
  input m1_piperun;
  input [0:0]m1_MSR_i;
  input m2_piperun;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__151_n_0 ;
  wire [0:0]ex_MSR_i;
  wire [0:0]m0_MSR_i;
  wire m0_piperun;
  wire [0:0]m1_MSR_i;
  wire m1_piperun;
  wire [0:0]m2_MSR_i;
  wire m2_piperun;
  wire [0:0]m3_MSR_i;
  wire m3_piperun;
  wire [0:0]\of_MSR_i_reg[22] ;
  wire of_piperun;
  wire [0:0]out;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__151_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__151 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m3_MSR_i),
        .O(\Using_FPGA.Native_i_1__151_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__162 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m2_MSR_i),
        .I3(m3_piperun),
        .I4(m3_MSR_i),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__174 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(ex_MSR_i),
        .I3(m0_piperun),
        .I4(m0_MSR_i),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__186 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m0_MSR_i),
        .I3(m1_piperun),
        .I4(m1_MSR_i),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__198 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m1_MSR_i),
        .I3(m2_piperun),
        .I4(m2_MSR_i),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[22]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(out),
        .I3(of_piperun),
        .I4(\of_MSR_i_reg[22] ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_781
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    sync_reset,
    Clk,
    \Using_FPGA.Native_5 ,
    m3_MSR_i,
    out,
    of_piperun,
    \of_MSR_i_reg[23] ,
    m2_MSR_i,
    m3_piperun,
    ex_MSR_i,
    m0_piperun,
    m0_MSR_i,
    m1_piperun,
    m1_MSR_i,
    m2_piperun);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_5 ;
  input [0:0]m3_MSR_i;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[23] ;
  input [0:0]m2_MSR_i;
  input m3_piperun;
  input [0:0]ex_MSR_i;
  input m0_piperun;
  input [0:0]m0_MSR_i;
  input m1_piperun;
  input [0:0]m1_MSR_i;
  input m2_piperun;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__150_n_0 ;
  wire [0:0]ex_MSR_i;
  wire [0:0]m0_MSR_i;
  wire m0_piperun;
  wire [0:0]m1_MSR_i;
  wire m1_piperun;
  wire [0:0]m2_MSR_i;
  wire m2_piperun;
  wire [0:0]m3_MSR_i;
  wire m3_piperun;
  wire [0:0]\of_MSR_i_reg[23] ;
  wire of_piperun;
  wire [0:0]out;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__150_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__150 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m3_MSR_i),
        .O(\Using_FPGA.Native_i_1__150_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__163 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m2_MSR_i),
        .I3(m3_piperun),
        .I4(m3_MSR_i),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__175 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(ex_MSR_i),
        .I3(m0_piperun),
        .I4(m0_MSR_i),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__187 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m0_MSR_i),
        .I3(m1_piperun),
        .I4(m1_MSR_i),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__199 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m1_MSR_i),
        .I3(m2_piperun),
        .I4(m2_MSR_i),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[23]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(out),
        .I3(of_piperun),
        .I4(\of_MSR_i_reg[23] ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_782
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    sync_reset,
    Clk,
    \Using_FPGA.Native_5 ,
    m3_MSR_i,
    out,
    of_piperun,
    \of_MSR_i_reg[24] ,
    m2_MSR_i,
    m3_piperun,
    ex_MSR_i,
    m0_piperun,
    m0_MSR_i,
    m1_piperun,
    m1_MSR_i,
    m2_piperun);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_5 ;
  input [0:0]m3_MSR_i;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[24] ;
  input [0:0]m2_MSR_i;
  input m3_piperun;
  input [0:0]ex_MSR_i;
  input m0_piperun;
  input [0:0]m0_MSR_i;
  input m1_piperun;
  input [0:0]m1_MSR_i;
  input m2_piperun;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__149_n_0 ;
  wire [0:0]ex_MSR_i;
  wire [0:0]m0_MSR_i;
  wire m0_piperun;
  wire [0:0]m1_MSR_i;
  wire m1_piperun;
  wire [0:0]m2_MSR_i;
  wire m2_piperun;
  wire [0:0]m3_MSR_i;
  wire m3_piperun;
  wire [0:0]\of_MSR_i_reg[24] ;
  wire of_piperun;
  wire [0:0]out;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__149_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__149 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m3_MSR_i),
        .O(\Using_FPGA.Native_i_1__149_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__164 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m2_MSR_i),
        .I3(m3_piperun),
        .I4(m3_MSR_i),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__176 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(ex_MSR_i),
        .I3(m0_piperun),
        .I4(m0_MSR_i),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__188 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m0_MSR_i),
        .I3(m1_piperun),
        .I4(m1_MSR_i),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__200 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m1_MSR_i),
        .I3(m2_piperun),
        .I4(m2_MSR_i),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[24]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(out),
        .I3(of_piperun),
        .I4(\of_MSR_i_reg[24] ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_783
   (wb_msr,
    D,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk,
    read_register_MSR_1,
    \data_rd_reg_reg[25] ,
    wb_gpr_wr_dbg,
    \data_rd_reg_reg[25]_0 ,
    WB_Fwd);
  output [0:0]wb_msr;
  output [0:0]D;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;
  input read_register_MSR_1;
  input [0:0]\data_rd_reg_reg[25] ;
  input wb_gpr_wr_dbg;
  input \data_rd_reg_reg[25]_0 ;
  input [0:0]WB_Fwd;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]WB_Fwd;
  wire [0:0]\data_rd_reg_reg[25] ;
  wire \data_rd_reg_reg[25]_0 ;
  wire read_register_MSR_1;
  wire sync_reset;
  wire wb_gpr_wr_dbg;
  wire [0:0]wb_msr;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(wb_msr),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFFB8B8B800B8B8B8)) 
    \data_rd_reg[25]_i_1 
       (.I0(wb_msr),
        .I1(read_register_MSR_1),
        .I2(\data_rd_reg_reg[25] ),
        .I3(wb_gpr_wr_dbg),
        .I4(\data_rd_reg_reg[25]_0 ),
        .I5(WB_Fwd),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_784
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    sync_reset,
    Clk,
    \Using_FPGA.Native_5 ,
    m3_MSR_i,
    out,
    of_piperun,
    \of_MSR_i_reg[26] ,
    m2_MSR_i,
    m3_piperun,
    ex_MSR_i,
    m0_piperun,
    m0_MSR_i,
    m1_piperun,
    m1_MSR_i,
    m2_piperun);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_5 ;
  input [0:0]m3_MSR_i;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[26] ;
  input [0:0]m2_MSR_i;
  input m3_piperun;
  input [0:0]ex_MSR_i;
  input m0_piperun;
  input [0:0]m0_MSR_i;
  input m1_piperun;
  input [0:0]m1_MSR_i;
  input m2_piperun;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__148_n_0 ;
  wire [0:0]ex_MSR_i;
  wire [0:0]m0_MSR_i;
  wire m0_piperun;
  wire [0:0]m1_MSR_i;
  wire m1_piperun;
  wire [0:0]m2_MSR_i;
  wire m2_piperun;
  wire [0:0]m3_MSR_i;
  wire m3_piperun;
  wire [0:0]\of_MSR_i_reg[26] ;
  wire of_piperun;
  wire [0:0]out;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__148_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__148 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m3_MSR_i),
        .O(\Using_FPGA.Native_i_1__148_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__165 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m2_MSR_i),
        .I3(m3_piperun),
        .I4(m3_MSR_i),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__177 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(ex_MSR_i),
        .I3(m0_piperun),
        .I4(m0_MSR_i),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__189 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m0_MSR_i),
        .I3(m1_piperun),
        .I4(m1_MSR_i),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__201 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m1_MSR_i),
        .I3(m2_piperun),
        .I4(m2_MSR_i),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[26]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(out),
        .I3(of_piperun),
        .I4(\of_MSR_i_reg[26] ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_785
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    sync_reset,
    Clk,
    \Using_FPGA.Native_5 ,
    m3_MSR_i,
    out,
    of_piperun,
    \of_MSR_i_reg[27] ,
    m2_MSR_i,
    m3_piperun,
    ex_MSR_i,
    m0_piperun,
    m0_MSR_i,
    m1_piperun,
    m1_MSR_i,
    m2_piperun);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_5 ;
  input [0:0]m3_MSR_i;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[27] ;
  input [0:0]m2_MSR_i;
  input m3_piperun;
  input [0:0]ex_MSR_i;
  input m0_piperun;
  input [0:0]m0_MSR_i;
  input m1_piperun;
  input [0:0]m1_MSR_i;
  input m2_piperun;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__147_n_0 ;
  wire [0:0]ex_MSR_i;
  wire [0:0]m0_MSR_i;
  wire m0_piperun;
  wire [0:0]m1_MSR_i;
  wire m1_piperun;
  wire [0:0]m2_MSR_i;
  wire m2_piperun;
  wire [0:0]m3_MSR_i;
  wire m3_piperun;
  wire [0:0]\of_MSR_i_reg[27] ;
  wire of_piperun;
  wire [0:0]out;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__147_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__147 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m3_MSR_i),
        .O(\Using_FPGA.Native_i_1__147_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__166 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m2_MSR_i),
        .I3(m3_piperun),
        .I4(m3_MSR_i),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__178 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(ex_MSR_i),
        .I3(m0_piperun),
        .I4(m0_MSR_i),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__190 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m0_MSR_i),
        .I3(m1_piperun),
        .I4(m1_MSR_i),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__202 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m1_MSR_i),
        .I3(m2_piperun),
        .I4(m2_MSR_i),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[27]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(out),
        .I3(of_piperun),
        .I4(\of_MSR_i_reg[27] ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_786
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    sync_reset,
    \Using_FPGA.Native_6 ,
    Clk,
    read_register_MSR_1,
    \data_rd_reg_reg[28] ,
    wb_gpr_wr_dbg,
    \data_rd_reg_reg[28]_0 ,
    WB_Fwd,
    wb_msr_clear_bip,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    m2_piperun,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    m1_piperun,
    \Using_FPGA.Native_11 ,
    m0_piperun,
    m3_piperun,
    \Using_FPGA.Native_12 ,
    \of_MSR_i_reg[28] ,
    out,
    of_piperun,
    \of_MSR_i_reg[28]_0 );
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output [0:0]\Using_FPGA.Native_5 ;
  input sync_reset;
  input \Using_FPGA.Native_6 ;
  input Clk;
  input read_register_MSR_1;
  input [0:0]\data_rd_reg_reg[28] ;
  input wb_gpr_wr_dbg;
  input \data_rd_reg_reg[28]_0 ;
  input [0:0]WB_Fwd;
  input wb_msr_clear_bip;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input m2_piperun;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input m1_piperun;
  input \Using_FPGA.Native_11 ;
  input m0_piperun;
  input m3_piperun;
  input \Using_FPGA.Native_12 ;
  input \of_MSR_i_reg[28] ;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[28]_0 ;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire [0:0]\Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [0:0]WB_Fwd;
  wire [0:0]\data_rd_reg_reg[28] ;
  wire \data_rd_reg_reg[28]_0 ;
  wire m0_piperun;
  wire m1_piperun;
  wire m2_piperun;
  wire m3_piperun;
  wire \of_MSR_i_reg[28] ;
  wire [0:0]\of_MSR_i_reg[28]_0 ;
  wire of_piperun;
  wire [0:0]out;
  wire read_register_MSR_1;
  wire sync_reset;
  wire wb_gpr_wr_dbg;
  wire wb_msr_clear_bip;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_6 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h2F202F2F2F202020)) 
    \Using_FPGA.Native_i_1__141 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(wb_msr_clear_bip),
        .I2(\Using_FPGA.Native_7 ),
        .I3(\Using_FPGA.Native_8 ),
        .I4(m2_piperun),
        .I5(\Using_FPGA.Native_9 ),
        .O(\Using_FPGA.Native_1 ));
  LUT6 #(
    .INIT(64'h2F202F2F2F202020)) 
    \Using_FPGA.Native_i_1__142 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(wb_msr_clear_bip),
        .I2(\Using_FPGA.Native_7 ),
        .I3(\Using_FPGA.Native_10 ),
        .I4(m1_piperun),
        .I5(\Using_FPGA.Native_8 ),
        .O(\Using_FPGA.Native_2 ));
  LUT6 #(
    .INIT(64'h2F202F2F2F202020)) 
    \Using_FPGA.Native_i_1__143 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(wb_msr_clear_bip),
        .I2(\Using_FPGA.Native_7 ),
        .I3(\Using_FPGA.Native_11 ),
        .I4(m0_piperun),
        .I5(\Using_FPGA.Native_10 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h2F202F2F2F202020)) 
    \Using_FPGA.Native_i_1__144 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(wb_msr_clear_bip),
        .I2(\Using_FPGA.Native_7 ),
        .I3(\Using_FPGA.Native_9 ),
        .I4(m3_piperun),
        .I5(\Using_FPGA.Native_12 ),
        .O(\Using_FPGA.Native_4 ));
  LUT6 #(
    .INIT(64'hFFB8B8B800B8B8B8)) 
    \data_rd_reg[28]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(read_register_MSR_1),
        .I2(\data_rd_reg_reg[28] ),
        .I3(wb_gpr_wr_dbg),
        .I4(\data_rd_reg_reg[28]_0 ),
        .I5(WB_Fwd),
        .O(D));
  LUT6 #(
    .INIT(64'h2F202F2F2F202020)) 
    \of_MSR_i[28]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(wb_msr_clear_bip),
        .I2(\of_MSR_i_reg[28] ),
        .I3(out),
        .I4(of_piperun),
        .I5(\of_MSR_i_reg[28]_0 ),
        .O(\Using_FPGA.Native_5 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_787
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    sync_reset,
    Clk,
    read_register_MSR_1,
    \data_rd_reg_reg[29] ,
    wb_gpr_wr_dbg,
    \data_rd_reg_reg[29]_0 ,
    WB_Fwd,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    out,
    of_piperun,
    \of_MSR_i_reg[29] ,
    \Using_FPGA.Native_8 ,
    m3_piperun,
    EX_CarryIn,
    m0_piperun,
    \Using_FPGA.Native_9 ,
    m1_piperun,
    \Using_FPGA.Native_10 ,
    m2_piperun);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output [0:0]\Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  input sync_reset;
  input Clk;
  input read_register_MSR_1;
  input [0:0]\data_rd_reg_reg[29] ;
  input wb_gpr_wr_dbg;
  input \data_rd_reg_reg[29]_0 ;
  input [0:0]WB_Fwd;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[29] ;
  input \Using_FPGA.Native_8 ;
  input m3_piperun;
  input EX_CarryIn;
  input m0_piperun;
  input \Using_FPGA.Native_9 ;
  input m1_piperun;
  input \Using_FPGA.Native_10 ;
  input m2_piperun;

  wire Clk;
  wire [0:0]D;
  wire EX_CarryIn;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire \Using_FPGA.Native_i_1__146_n_0 ;
  wire [0:0]WB_Fwd;
  wire [0:0]\data_rd_reg_reg[29] ;
  wire \data_rd_reg_reg[29]_0 ;
  wire m0_piperun;
  wire m1_piperun;
  wire m2_piperun;
  wire m3_piperun;
  wire [0:0]\of_MSR_i_reg[29] ;
  wire of_piperun;
  wire [0:0]out;
  wire read_register_MSR_1;
  wire sync_reset;
  wire wb_gpr_wr_dbg;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__146_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__146 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_7 ),
        .O(\Using_FPGA.Native_i_1__146_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__167 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_8 ),
        .I3(m3_piperun),
        .I4(\Using_FPGA.Native_7 ),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__179 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(EX_CarryIn),
        .I3(m0_piperun),
        .I4(\Using_FPGA.Native_9 ),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__191 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_9 ),
        .I3(m1_piperun),
        .I4(\Using_FPGA.Native_10 ),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__203 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(\Using_FPGA.Native_10 ),
        .I3(m2_piperun),
        .I4(\Using_FPGA.Native_8 ),
        .O(\Using_FPGA.Native_5 ));
  LUT6 #(
    .INIT(64'hFFB8B8B800B8B8B8)) 
    \data_rd_reg[29]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(read_register_MSR_1),
        .I2(\data_rd_reg_reg[29] ),
        .I3(wb_gpr_wr_dbg),
        .I4(\data_rd_reg_reg[29]_0 ),
        .I5(WB_Fwd),
        .O(D));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[29]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_6 ),
        .I2(out),
        .I3(of_piperun),
        .I4(\of_MSR_i_reg[29] ),
        .O(\Using_FPGA.Native_1 ));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_788
   (wb_msr,
    D,
    sync_reset,
    \Using_FPGA.Native_0 ,
    Clk,
    read_register_MSR_1,
    \data_rd_reg_reg[30] ,
    wb_gpr_wr_dbg,
    \data_rd_reg_reg[30]_0 ,
    WB_Fwd);
  output [0:0]wb_msr;
  output [0:0]D;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input Clk;
  input read_register_MSR_1;
  input [0:0]\data_rd_reg_reg[30] ;
  input wb_gpr_wr_dbg;
  input \data_rd_reg_reg[30]_0 ;
  input [0:0]WB_Fwd;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]WB_Fwd;
  wire [0:0]\data_rd_reg_reg[30] ;
  wire \data_rd_reg_reg[30]_0 ;
  wire read_register_MSR_1;
  wire sync_reset;
  wire wb_gpr_wr_dbg;
  wire [0:0]wb_msr;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_0 ),
        .Q(wb_msr),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFFB8B8B800B8B8B8)) 
    \data_rd_reg[30]_i_1 
       (.I0(wb_msr),
        .I1(read_register_MSR_1),
        .I2(\data_rd_reg_reg[30] ),
        .I3(wb_gpr_wr_dbg),
        .I4(\data_rd_reg_reg[30]_0 ),
        .I5(WB_Fwd),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDR" *) 
module microblaze_microblaze_0_0_MB_FDR_789
   (\Using_FPGA.Native_0 ,
    D,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    sync_reset,
    Clk,
    \Using_FPGA.Native_5 ,
    m3_MSR_i,
    out,
    of_piperun,
    \of_MSR_i_reg[31] ,
    m2_MSR_i,
    m3_piperun,
    ex_MSR_i,
    m0_piperun,
    m0_MSR_i,
    m1_piperun,
    m1_MSR_i,
    m2_piperun);
  output \Using_FPGA.Native_0 ;
  output [0:0]D;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native_5 ;
  input [0:0]m3_MSR_i;
  input [0:0]out;
  input of_piperun;
  input [0:0]\of_MSR_i_reg[31] ;
  input [0:0]m2_MSR_i;
  input m3_piperun;
  input [0:0]ex_MSR_i;
  input m0_piperun;
  input [0:0]m0_MSR_i;
  input m1_piperun;
  input [0:0]m1_MSR_i;
  input m2_piperun;

  wire Clk;
  wire [0:0]D;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__145_n_0 ;
  wire [0:0]ex_MSR_i;
  wire [0:0]m0_MSR_i;
  wire m0_piperun;
  wire [0:0]m1_MSR_i;
  wire m1_piperun;
  wire [0:0]m2_MSR_i;
  wire m2_piperun;
  wire [0:0]m3_MSR_i;
  wire m3_piperun;
  wire [0:0]\of_MSR_i_reg[31] ;
  wire of_piperun;
  wire [0:0]out;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(\Using_FPGA.Native_i_1__145_n_0 ),
        .Q(\Using_FPGA.Native_0 ),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.Native_i_1__145 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m3_MSR_i),
        .O(\Using_FPGA.Native_i_1__145_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__168 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m2_MSR_i),
        .I3(m3_piperun),
        .I4(m3_MSR_i),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__180 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(ex_MSR_i),
        .I3(m0_piperun),
        .I4(m0_MSR_i),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__192 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m0_MSR_i),
        .I3(m1_piperun),
        .I4(m1_MSR_i),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__204 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(m1_MSR_i),
        .I3(m2_piperun),
        .I4(m2_MSR_i),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[31]_i_1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_5 ),
        .I2(out),
        .I3(of_piperun),
        .I4(\of_MSR_i_reg[31] ),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_FDS" *) 
module microblaze_microblaze_0_0_MB_FDS
   (\Using_FPGA.Native_0 ,
    sync_reset,
    sel_input_depth,
    Clk);
  output \Using_FPGA.Native_0 ;
  input sync_reset;
  input sel_input_depth;
  input Clk;

  wire Clk;
  wire \Using_FPGA.Native_0 ;
  wire sel_input_depth;
  wire sync_reset;

  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Using_FPGA.Native 
       (.C(Clk),
        .CE(1'b1),
        .D(sel_input_depth),
        .Q(\Using_FPGA.Native_0 ),
        .S(sync_reset));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4
   (S,
    Q,
    \m0_databus_addr_i_reg[0] ,
    I2,
    alu_AddSub_1);
  output S;
  input [0:0]Q;
  input [0:0]\m0_databus_addr_i_reg[0] ;
  input I2;
  input alu_AddSub_1;

  wire I2;
  wire [0:0]Q;
  wire S;
  wire alu_AddSub_1;
  wire [0:0]\m0_databus_addr_i_reg[0] ;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'hFA0A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[0] ),
        .I2(I2),
        .I3(alu_AddSub_1),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1
   (New_Q_Sel_31,
    Q,
    \R_reg[32] ,
    New_Q_Carry,
    ex_start_div);
  output New_Q_Sel_31;
  input [0:0]Q;
  input [0:0]\R_reg[32] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire New_Q_Sel_31;
  wire [0:0]Q;
  wire [0:0]\R_reg[32] ;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\R_reg[32] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(New_Q_Sel_31));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_623
   (S,
    Q,
    \Q_reg[10] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[10] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[10] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[10] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_625
   (S,
    Q,
    \Q_reg[11] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[11] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[11] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[11] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_627
   (S,
    Q,
    \Q_reg[12] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[12] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[12] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[12] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_629
   (S,
    Q,
    \Q_reg[13] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[13] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[13] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[13] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_631
   (S,
    Q,
    \Q_reg[14] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[14] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[14] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[14] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_633
   (S,
    Q,
    \Q_reg[15] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[15] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[15] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[15] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_635
   (S,
    Q,
    \Q_reg[16] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[16] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[16] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[16] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_637
   (S,
    Q,
    \Q_reg[17] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[17] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[17] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[17] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_639
   (S,
    Q,
    \Q_reg[18] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[18] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[18] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[18] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_641
   (S,
    Q,
    \Q_reg[19] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[19] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[19] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[19] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_643
   (S,
    Q,
    \Q_reg[1] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[1] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[1] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[1] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_645
   (S,
    Q,
    \Q_reg[20] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[20] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[20] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[20] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_647
   (S,
    Q,
    \Q_reg[21] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[21] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[21] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[21] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_649
   (S,
    Q,
    \Q_reg[22] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[22] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[22] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[22] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_651
   (S,
    Q,
    \Q_reg[23] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[23] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[23] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[23] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_653
   (S,
    Q,
    \Q_reg[24] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[24] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[24] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[24] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_655
   (S,
    Q,
    \Q_reg[25] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[25] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[25] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[25] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_657
   (S,
    Q,
    \Q_reg[26] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[26] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[26] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[26] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_659
   (S,
    Q,
    \Q_reg[27] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[27] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[27] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[27] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_661
   (S,
    Q,
    \Q_reg[28] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[28] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[28] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[28] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_663
   (S,
    Q,
    \Q_reg[29] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[29] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[29] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[29] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_665
   (S,
    Q,
    \Q_reg[2] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[2] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[2] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[2] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_667
   (S,
    Q,
    \Q_reg[30] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[30] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[30] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[30] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_669
   (S,
    Q,
    \Q_reg[31] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[31] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[31] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[31] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_671
   (S,
    Q,
    \Q_reg[3] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[3] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[3] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[3] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_673
   (S,
    Q,
    \Q_reg[4] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[4] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[4] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[4] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_675
   (S,
    Q,
    \Q_reg[5] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[5] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[5] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[5] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_677
   (S,
    Q,
    \Q_reg[6] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[6] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[6] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[6] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_679
   (S,
    Q,
    \Q_reg[7] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[7] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[7] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[7] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_681
   (S,
    Q,
    \Q_reg[8] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[8] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[8] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[8] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT4" *) 
module microblaze_microblaze_0_0_MB_LUT4__parameterized1_683
   (S,
    Q,
    \Q_reg[9] ,
    New_Q_Carry,
    ex_start_div);
  output S;
  input [0:0]Q;
  input [0:0]\Q_reg[9] ;
  input [0:0]New_Q_Carry;
  input ex_start_div;

  wire [0:0]New_Q_Carry;
  wire [0:0]Q;
  wire [0:0]\Q_reg[9] ;
  wire S;
  wire ex_start_div;

  (* box_type = "PRIMITIVE" *) 
  LUT4 #(
    .INIT(16'h3C5A)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Q_reg[9] ),
        .I2(New_Q_Carry),
        .I3(ex_start_div),
        .O(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6
   (sel_input_iii_3,
    Prefetch_Almost_Full,
    \Using_FPGA.Native_0 ,
    if4_push_instr_fetch,
    \Using_FPGA.Native_1 ,
    Clear_Buffer);
  output sel_input_iii_3;
  input Prefetch_Almost_Full;
  input \Using_FPGA.Native_0 ;
  input if4_push_instr_fetch;
  input \Using_FPGA.Native_1 ;
  input Clear_Buffer;

  wire Clear_Buffer;
  wire Prefetch_Almost_Full;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire if4_push_instr_fetch;
  wire sel_input_iii_3;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00000000CCF0AACC)) 
    \Using_FPGA.Native 
       (.I0(Prefetch_Almost_Full),
        .I1(\Using_FPGA.Native_0 ),
        .I2(1'b0),
        .I3(if4_push_instr_fetch),
        .I4(\Using_FPGA.Native_1 ),
        .I5(Clear_Buffer),
        .O(sel_input_iii_3));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[9] ,
    \m0_databus_addr_i_reg[9]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[9] ;
  input [0:0]\m0_databus_addr_i_reg[9]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[9] ;
  wire [0:0]\m0_databus_addr_i_reg[9]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[9] [1]),
        .I2(\m0_databus_addr_i_reg[9]_0 ),
        .I3(\m0_databus_addr_i_reg[9] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6_266
   (sel_input_iii_2,
    Prefetch_Early_Full,
    Prefetch_Almost_Full,
    \Using_FPGA.Native_0 ,
    if4_push_instr_fetch,
    \Using_FPGA.Native_1 ,
    Clear_Buffer);
  output sel_input_iii_2;
  input Prefetch_Early_Full;
  input Prefetch_Almost_Full;
  input \Using_FPGA.Native_0 ;
  input if4_push_instr_fetch;
  input \Using_FPGA.Native_1 ;
  input Clear_Buffer;

  wire Clear_Buffer;
  wire Prefetch_Almost_Full;
  wire Prefetch_Early_Full;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire if4_push_instr_fetch;
  wire sel_input_iii_2;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00000000CCF0AACC)) 
    \Using_FPGA.Native 
       (.I0(Prefetch_Early_Full),
        .I1(Prefetch_Almost_Full),
        .I2(\Using_FPGA.Native_0 ),
        .I3(if4_push_instr_fetch),
        .I4(\Using_FPGA.Native_1 ),
        .I5(Clear_Buffer),
        .O(sel_input_iii_2));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6_268
   (sel_input_iii_1,
    \Using_FPGA.Native_0 ,
    Prefetch_Early_Full,
    Prefetch_Almost_Full,
    if4_push_instr_fetch,
    \Using_FPGA.Native_1 ,
    Clear_Buffer);
  output sel_input_iii_1;
  input \Using_FPGA.Native_0 ;
  input Prefetch_Early_Full;
  input Prefetch_Almost_Full;
  input if4_push_instr_fetch;
  input \Using_FPGA.Native_1 ;
  input Clear_Buffer;

  wire Clear_Buffer;
  wire Prefetch_Almost_Full;
  wire Prefetch_Early_Full;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire if4_push_instr_fetch;
  wire sel_input_iii_1;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00000000CCF0AACC)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(Prefetch_Early_Full),
        .I2(Prefetch_Almost_Full),
        .I3(if4_push_instr_fetch),
        .I4(\Using_FPGA.Native_1 ),
        .I5(Clear_Buffer),
        .O(sel_input_iii_1));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6_270
   (sel_input_iii_0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Prefetch_Early_Full,
    if4_push_instr_fetch,
    \Using_FPGA.Native_2 ,
    Clear_Buffer);
  output sel_input_iii_0;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Prefetch_Early_Full;
  input if4_push_instr_fetch;
  input \Using_FPGA.Native_2 ;
  input Clear_Buffer;

  wire Clear_Buffer;
  wire Prefetch_Early_Full;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire if4_push_instr_fetch;
  wire sel_input_iii_0;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00000000CCF0AACC)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Prefetch_Early_Full),
        .I3(if4_push_instr_fetch),
        .I4(\Using_FPGA.Native_2 ),
        .I5(Clear_Buffer),
        .O(sel_input_iii_0));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_855
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[8] ,
    \m0_databus_addr_i_reg[8]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[8] ;
  input [0:0]\m0_databus_addr_i_reg[8]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[8] ;
  wire [0:0]\m0_databus_addr_i_reg[8]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[8] [1]),
        .I2(\m0_databus_addr_i_reg[8]_0 ),
        .I3(\m0_databus_addr_i_reg[8] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_857
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[7] ,
    \m0_databus_addr_i_reg[7]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[7] ;
  input [0:0]\m0_databus_addr_i_reg[7]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[7] ;
  wire [0:0]\m0_databus_addr_i_reg[7]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[7] [1]),
        .I2(\m0_databus_addr_i_reg[7]_0 ),
        .I3(\m0_databus_addr_i_reg[7] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_859
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[6] ,
    \m0_databus_addr_i_reg[6]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[6] ;
  input [0:0]\m0_databus_addr_i_reg[6]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[6] ;
  wire [0:0]\m0_databus_addr_i_reg[6]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[6] [1]),
        .I2(\m0_databus_addr_i_reg[6]_0 ),
        .I3(\m0_databus_addr_i_reg[6] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_861
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[5] ,
    \m0_databus_addr_i_reg[5]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[5] ;
  input [0:0]\m0_databus_addr_i_reg[5]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[5] ;
  wire [0:0]\m0_databus_addr_i_reg[5]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[5] [1]),
        .I2(\m0_databus_addr_i_reg[5]_0 ),
        .I3(\m0_databus_addr_i_reg[5] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_863
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[4] ,
    \m0_databus_addr_i_reg[4]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[4] ;
  input [0:0]\m0_databus_addr_i_reg[4]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[4] ;
  wire [0:0]\m0_databus_addr_i_reg[4]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[4] [1]),
        .I2(\m0_databus_addr_i_reg[4]_0 ),
        .I3(\m0_databus_addr_i_reg[4] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_865
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[3] ,
    \m0_databus_addr_i_reg[3]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[3] ;
  input [0:0]\m0_databus_addr_i_reg[3]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[3] ;
  wire [0:0]\m0_databus_addr_i_reg[3]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[3] [1]),
        .I2(\m0_databus_addr_i_reg[3]_0 ),
        .I3(\m0_databus_addr_i_reg[3] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_867
   (DI,
    S,
    Q,
    \m0_addr_3lsb_reg[2] ,
    \m0_addr_3lsb_reg[2]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_addr_3lsb_reg[2] ;
  input [0:0]\m0_addr_3lsb_reg[2]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_addr_3lsb_reg[2] ;
  wire [0:0]\m0_addr_3lsb_reg[2]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_addr_3lsb_reg[2] [1]),
        .I2(\m0_addr_3lsb_reg[2]_0 ),
        .I3(\m0_addr_3lsb_reg[2] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_869
   (DI,
    S,
    Q,
    \m0_addr_3lsb_reg[1] ,
    \m0_addr_3lsb_reg[1]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_addr_3lsb_reg[1] ;
  input [0:0]\m0_addr_3lsb_reg[1]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_addr_3lsb_reg[1] ;
  wire [0:0]\m0_addr_3lsb_reg[1]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_addr_3lsb_reg[1] [1]),
        .I2(\m0_addr_3lsb_reg[1]_0 ),
        .I3(\m0_addr_3lsb_reg[1] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_871
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[2] ,
    \m0_databus_addr_i_reg[2]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[2] ;
  input [0:0]\m0_databus_addr_i_reg[2]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[2] ;
  wire [0:0]\m0_databus_addr_i_reg[2]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[2] [1]),
        .I2(\m0_databus_addr_i_reg[2]_0 ),
        .I3(\m0_databus_addr_i_reg[2] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_873
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[29] ,
    \m0_databus_addr_i_reg[29]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[29] ;
  input [0:0]\m0_databus_addr_i_reg[29]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[29] ;
  wire [0:0]\m0_databus_addr_i_reg[29]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[29] [1]),
        .I2(\m0_databus_addr_i_reg[29]_0 ),
        .I3(\m0_databus_addr_i_reg[29] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_875
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[28] ,
    \m0_databus_addr_i_reg[28]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[28] ;
  input [0:0]\m0_databus_addr_i_reg[28]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[28] ;
  wire [0:0]\m0_databus_addr_i_reg[28]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[28] [1]),
        .I2(\m0_databus_addr_i_reg[28]_0 ),
        .I3(\m0_databus_addr_i_reg[28] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_877
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[27] ,
    \m0_databus_addr_i_reg[27]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[27] ;
  input [0:0]\m0_databus_addr_i_reg[27]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[27] ;
  wire [0:0]\m0_databus_addr_i_reg[27]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[27] [1]),
        .I2(\m0_databus_addr_i_reg[27]_0 ),
        .I3(\m0_databus_addr_i_reg[27] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_879
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[26] ,
    \m0_databus_addr_i_reg[26]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[26] ;
  input [0:0]\m0_databus_addr_i_reg[26]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[26] ;
  wire [0:0]\m0_databus_addr_i_reg[26]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[26] [1]),
        .I2(\m0_databus_addr_i_reg[26]_0 ),
        .I3(\m0_databus_addr_i_reg[26] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_881
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[25] ,
    \m0_databus_addr_i_reg[25]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[25] ;
  input [0:0]\m0_databus_addr_i_reg[25]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[25] ;
  wire [0:0]\m0_databus_addr_i_reg[25]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[25] [1]),
        .I2(\m0_databus_addr_i_reg[25]_0 ),
        .I3(\m0_databus_addr_i_reg[25] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_883
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[24] ,
    \m0_databus_addr_i_reg[24]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[24] ;
  input [0:0]\m0_databus_addr_i_reg[24]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[24] ;
  wire [0:0]\m0_databus_addr_i_reg[24]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[24] [1]),
        .I2(\m0_databus_addr_i_reg[24]_0 ),
        .I3(\m0_databus_addr_i_reg[24] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_885
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[23] ,
    \m0_databus_addr_i_reg[23]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[23] ;
  input [0:0]\m0_databus_addr_i_reg[23]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[23] ;
  wire [0:0]\m0_databus_addr_i_reg[23]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[23] [1]),
        .I2(\m0_databus_addr_i_reg[23]_0 ),
        .I3(\m0_databus_addr_i_reg[23] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_887
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[22] ,
    \m0_databus_addr_i_reg[22]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[22] ;
  input [0:0]\m0_databus_addr_i_reg[22]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[22] ;
  wire [0:0]\m0_databus_addr_i_reg[22]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[22] [1]),
        .I2(\m0_databus_addr_i_reg[22]_0 ),
        .I3(\m0_databus_addr_i_reg[22] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_889
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[21] ,
    \m0_databus_addr_i_reg[21]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[21] ;
  input [0:0]\m0_databus_addr_i_reg[21]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[21] ;
  wire [0:0]\m0_databus_addr_i_reg[21]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[21] [1]),
        .I2(\m0_databus_addr_i_reg[21]_0 ),
        .I3(\m0_databus_addr_i_reg[21] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_891
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[20] ,
    \m0_databus_addr_i_reg[20]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[20] ;
  input [0:0]\m0_databus_addr_i_reg[20]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[20] ;
  wire [0:0]\m0_databus_addr_i_reg[20]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[20] [1]),
        .I2(\m0_databus_addr_i_reg[20]_0 ),
        .I3(\m0_databus_addr_i_reg[20] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_893
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[1] ,
    \m0_databus_addr_i_reg[1]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[1] ;
  input [0:0]\m0_databus_addr_i_reg[1]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[1] ;
  wire [0:0]\m0_databus_addr_i_reg[1]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[1] [1]),
        .I2(\m0_databus_addr_i_reg[1]_0 ),
        .I3(\m0_databus_addr_i_reg[1] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_895
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[19] ,
    \m0_databus_addr_i_reg[19]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[19] ;
  input [0:0]\m0_databus_addr_i_reg[19]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[19] ;
  wire [0:0]\m0_databus_addr_i_reg[19]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[19] [1]),
        .I2(\m0_databus_addr_i_reg[19]_0 ),
        .I3(\m0_databus_addr_i_reg[19] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_897
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[18] ,
    \m0_databus_addr_i_reg[18]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[18] ;
  input [0:0]\m0_databus_addr_i_reg[18]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[18] ;
  wire [0:0]\m0_databus_addr_i_reg[18]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[18] [1]),
        .I2(\m0_databus_addr_i_reg[18]_0 ),
        .I3(\m0_databus_addr_i_reg[18] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_899
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[17] ,
    \m0_databus_addr_i_reg[17]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[17] ;
  input [0:0]\m0_databus_addr_i_reg[17]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[17] ;
  wire [0:0]\m0_databus_addr_i_reg[17]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[17] [1]),
        .I2(\m0_databus_addr_i_reg[17]_0 ),
        .I3(\m0_databus_addr_i_reg[17] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_901
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[16] ,
    \m0_databus_addr_i_reg[16]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[16] ;
  input [0:0]\m0_databus_addr_i_reg[16]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[16] ;
  wire [0:0]\m0_databus_addr_i_reg[16]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[16] [1]),
        .I2(\m0_databus_addr_i_reg[16]_0 ),
        .I3(\m0_databus_addr_i_reg[16] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_903
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[15] ,
    \m0_databus_addr_i_reg[15]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[15] ;
  input [0:0]\m0_databus_addr_i_reg[15]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[15] ;
  wire [0:0]\m0_databus_addr_i_reg[15]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[15] [1]),
        .I2(\m0_databus_addr_i_reg[15]_0 ),
        .I3(\m0_databus_addr_i_reg[15] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_905
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[14] ,
    \m0_databus_addr_i_reg[14]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[14] ;
  input [0:0]\m0_databus_addr_i_reg[14]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[14] ;
  wire [0:0]\m0_databus_addr_i_reg[14]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[14] [1]),
        .I2(\m0_databus_addr_i_reg[14]_0 ),
        .I3(\m0_databus_addr_i_reg[14] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_907
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[13] ,
    \m0_databus_addr_i_reg[13]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[13] ;
  input [0:0]\m0_databus_addr_i_reg[13]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[13] ;
  wire [0:0]\m0_databus_addr_i_reg[13]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[13] [1]),
        .I2(\m0_databus_addr_i_reg[13]_0 ),
        .I3(\m0_databus_addr_i_reg[13] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_909
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[12] ,
    \m0_databus_addr_i_reg[12]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[12] ;
  input [0:0]\m0_databus_addr_i_reg[12]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[12] ;
  wire [0:0]\m0_databus_addr_i_reg[12]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[12] [1]),
        .I2(\m0_databus_addr_i_reg[12]_0 ),
        .I3(\m0_databus_addr_i_reg[12] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_911
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[11] ,
    \m0_databus_addr_i_reg[11]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[11] ;
  input [0:0]\m0_databus_addr_i_reg[11]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[11] ;
  wire [0:0]\m0_databus_addr_i_reg[11]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[11] [1]),
        .I2(\m0_databus_addr_i_reg[11]_0 ),
        .I3(\m0_databus_addr_i_reg[11] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6_2" *) 
module microblaze_microblaze_0_0_MB_LUT6_2_913
   (DI,
    S,
    Q,
    \m0_databus_addr_i_reg[10] ,
    \m0_databus_addr_i_reg[10]_0 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output DI;
  output S;
  input [0:0]Q;
  input [1:0]\m0_databus_addr_i_reg[10] ;
  input [0:0]\m0_databus_addr_i_reg[10]_0 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire DI;
  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire S;
  wire ex_alu_sel_logic;
  wire [1:0]\m0_databus_addr_i_reg[10] ;
  wire [0:0]\m0_databus_addr_i_reg[10]_0 ;

  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\m0_databus_addr_i_reg[10] [1]),
        .I2(\m0_databus_addr_i_reg[10]_0 ),
        .I3(\m0_databus_addr_i_reg[10] [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O5(DI),
        .O6(S));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized2
   (sel_input_delayslot,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    Prefetch_Early_Full,
    if4_push_instr_fetch,
    \Using_FPGA.Native_2 ,
    Clear_Buffer);
  output sel_input_delayslot;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input Prefetch_Early_Full;
  input if4_push_instr_fetch;
  input \Using_FPGA.Native_2 ;
  input Clear_Buffer;

  wire Clear_Buffer;
  wire Prefetch_Early_Full;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire if4_push_instr_fetch;
  wire sel_input_delayslot;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h0000FFFFCCF0AACC)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(Prefetch_Early_Full),
        .I3(if4_push_instr_fetch),
        .I4(\Using_FPGA.Native_2 ),
        .I5(Clear_Buffer),
        .O(sel_input_delayslot));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22
   (m0_barrel_result,
    I0,
    I1,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[0] ,
    \m1_M0_Result_i_reg[0]_0 );
  output [0:0]m0_barrel_result;
  input I0;
  input I1;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[0] ;
  input [0:0]\m1_M0_Result_i_reg[0]_0 ;

  wire I0;
  wire I1;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[0] ;
  wire [0:0]\m1_M0_Result_i_reg[0]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(I1),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[0] ),
        .I5(\m1_M0_Result_i_reg[0]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_792
   (m0_barrel_result,
    I09_out,
    I020_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[10] ,
    \m1_M0_Result_i_reg[10]_0 );
  output [0:0]m0_barrel_result;
  input I09_out;
  input I020_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[10] ;
  input [0:0]\m1_M0_Result_i_reg[10]_0 ;

  wire I020_out;
  wire I09_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[10] ;
  wire [0:0]\m1_M0_Result_i_reg[10]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I09_out),
        .I1(I020_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[10] ),
        .I5(\m1_M0_Result_i_reg[10]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_793
   (m0_barrel_result,
    I010_out,
    I019_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[11] ,
    \m1_M0_Result_i_reg[11]_0 );
  output [0:0]m0_barrel_result;
  input I010_out;
  input I019_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[11] ;
  input [0:0]\m1_M0_Result_i_reg[11]_0 ;

  wire I010_out;
  wire I019_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[11] ;
  wire [0:0]\m1_M0_Result_i_reg[11]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I010_out),
        .I1(I019_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[11] ),
        .I5(\m1_M0_Result_i_reg[11]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_794
   (m0_barrel_result,
    I011_out,
    I018_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[12] ,
    \m1_M0_Result_i_reg[12]_0 );
  output [0:0]m0_barrel_result;
  input I011_out;
  input I018_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[12] ;
  input [0:0]\m1_M0_Result_i_reg[12]_0 ;

  wire I011_out;
  wire I018_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[12] ;
  wire [0:0]\m1_M0_Result_i_reg[12]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I011_out),
        .I1(I018_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[12] ),
        .I5(\m1_M0_Result_i_reg[12]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_795
   (m0_barrel_result,
    I012_out,
    I017_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[13] ,
    \m1_M0_Result_i_reg[13]_0 );
  output [0:0]m0_barrel_result;
  input I012_out;
  input I017_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[13] ;
  input [0:0]\m1_M0_Result_i_reg[13]_0 ;

  wire I012_out;
  wire I017_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[13] ;
  wire [0:0]\m1_M0_Result_i_reg[13]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I012_out),
        .I1(I017_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[13] ),
        .I5(\m1_M0_Result_i_reg[13]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_796
   (m0_barrel_result,
    I013_out,
    I016_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[14] ,
    \m1_M0_Result_i_reg[14]_0 );
  output [0:0]m0_barrel_result;
  input I013_out;
  input I016_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[14] ;
  input [0:0]\m1_M0_Result_i_reg[14]_0 ;

  wire I013_out;
  wire I016_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[14] ;
  wire [0:0]\m1_M0_Result_i_reg[14]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I013_out),
        .I1(I016_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[14] ),
        .I5(\m1_M0_Result_i_reg[14]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_797
   (m0_barrel_result,
    I014_out,
    I015_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[15] ,
    \m1_M0_Result_i_reg[15]_0 );
  output [0:0]m0_barrel_result;
  input I014_out;
  input I015_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[15] ;
  input [0:0]\m1_M0_Result_i_reg[15]_0 ;

  wire I014_out;
  wire I015_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[15] ;
  wire [0:0]\m1_M0_Result_i_reg[15]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I014_out),
        .I1(I015_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[15] ),
        .I5(\m1_M0_Result_i_reg[15]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_798
   (m0_barrel_result,
    I015_out,
    I014_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[16] ,
    \m1_M0_Result_i_reg[16]_0 );
  output [0:0]m0_barrel_result;
  input I015_out;
  input I014_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[16] ;
  input [0:0]\m1_M0_Result_i_reg[16]_0 ;

  wire I014_out;
  wire I015_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[16] ;
  wire [0:0]\m1_M0_Result_i_reg[16]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I015_out),
        .I1(I014_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[16] ),
        .I5(\m1_M0_Result_i_reg[16]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_799
   (m0_barrel_result,
    I016_out,
    I013_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[17] ,
    \m1_M0_Result_i_reg[17]_0 );
  output [0:0]m0_barrel_result;
  input I016_out;
  input I013_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[17] ;
  input [0:0]\m1_M0_Result_i_reg[17]_0 ;

  wire I013_out;
  wire I016_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[17] ;
  wire [0:0]\m1_M0_Result_i_reg[17]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I016_out),
        .I1(I013_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[17] ),
        .I5(\m1_M0_Result_i_reg[17]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_800
   (m0_barrel_result,
    I017_out,
    I012_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[18] ,
    \m1_M0_Result_i_reg[18]_0 );
  output [0:0]m0_barrel_result;
  input I017_out;
  input I012_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[18] ;
  input [0:0]\m1_M0_Result_i_reg[18]_0 ;

  wire I012_out;
  wire I017_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[18] ;
  wire [0:0]\m1_M0_Result_i_reg[18]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I017_out),
        .I1(I012_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[18] ),
        .I5(\m1_M0_Result_i_reg[18]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_801
   (m0_barrel_result,
    I018_out,
    I011_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[19] ,
    \m1_M0_Result_i_reg[19]_0 );
  output [0:0]m0_barrel_result;
  input I018_out;
  input I011_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[19] ;
  input [0:0]\m1_M0_Result_i_reg[19]_0 ;

  wire I011_out;
  wire I018_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[19] ;
  wire [0:0]\m1_M0_Result_i_reg[19]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I018_out),
        .I1(I011_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[19] ),
        .I5(\m1_M0_Result_i_reg[19]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_802
   (m0_barrel_result,
    I00_out,
    I029_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[1] ,
    \m1_M0_Result_i_reg[1]_0 );
  output [0:0]m0_barrel_result;
  input I00_out;
  input I029_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[1] ;
  input [0:0]\m1_M0_Result_i_reg[1]_0 ;

  wire I00_out;
  wire I029_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[1] ;
  wire [0:0]\m1_M0_Result_i_reg[1]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I00_out),
        .I1(I029_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[1] ),
        .I5(\m1_M0_Result_i_reg[1]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_803
   (m0_barrel_result,
    I019_out,
    I010_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[20] ,
    \m1_M0_Result_i_reg[20]_0 );
  output [0:0]m0_barrel_result;
  input I019_out;
  input I010_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[20] ;
  input [0:0]\m1_M0_Result_i_reg[20]_0 ;

  wire I010_out;
  wire I019_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[20] ;
  wire [0:0]\m1_M0_Result_i_reg[20]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I019_out),
        .I1(I010_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[20] ),
        .I5(\m1_M0_Result_i_reg[20]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_804
   (m0_barrel_result,
    I020_out,
    I09_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[21] ,
    \m1_M0_Result_i_reg[21]_0 );
  output [0:0]m0_barrel_result;
  input I020_out;
  input I09_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[21] ;
  input [0:0]\m1_M0_Result_i_reg[21]_0 ;

  wire I020_out;
  wire I09_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[21] ;
  wire [0:0]\m1_M0_Result_i_reg[21]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I020_out),
        .I1(I09_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[21] ),
        .I5(\m1_M0_Result_i_reg[21]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_805
   (m0_barrel_result,
    I021_out,
    I08_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[22] ,
    \m1_M0_Result_i_reg[22]_0 );
  output [0:0]m0_barrel_result;
  input I021_out;
  input I08_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[22] ;
  input [0:0]\m1_M0_Result_i_reg[22]_0 ;

  wire I021_out;
  wire I08_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[22] ;
  wire [0:0]\m1_M0_Result_i_reg[22]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I021_out),
        .I1(I08_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[22] ),
        .I5(\m1_M0_Result_i_reg[22]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_806
   (m0_barrel_result,
    I022_out,
    I07_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[23] ,
    \m1_M0_Result_i_reg[23]_0 );
  output [0:0]m0_barrel_result;
  input I022_out;
  input I07_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[23] ;
  input [0:0]\m1_M0_Result_i_reg[23]_0 ;

  wire I022_out;
  wire I07_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[23] ;
  wire [0:0]\m1_M0_Result_i_reg[23]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I022_out),
        .I1(I07_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[23] ),
        .I5(\m1_M0_Result_i_reg[23]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_807
   (m0_barrel_result,
    I023_out,
    I06_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[24] ,
    \m1_M0_Result_i_reg[24]_0 );
  output [0:0]m0_barrel_result;
  input I023_out;
  input I06_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[24] ;
  input [0:0]\m1_M0_Result_i_reg[24]_0 ;

  wire I023_out;
  wire I06_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[24] ;
  wire [0:0]\m1_M0_Result_i_reg[24]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I023_out),
        .I1(I06_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[24] ),
        .I5(\m1_M0_Result_i_reg[24]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_808
   (m0_barrel_result,
    I024_out,
    I05_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[25] ,
    \m1_M0_Result_i_reg[25]_0 );
  output [0:0]m0_barrel_result;
  input I024_out;
  input I05_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[25] ;
  input [0:0]\m1_M0_Result_i_reg[25]_0 ;

  wire I024_out;
  wire I05_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[25] ;
  wire [0:0]\m1_M0_Result_i_reg[25]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I024_out),
        .I1(I05_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[25] ),
        .I5(\m1_M0_Result_i_reg[25]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_809
   (m0_barrel_result,
    I025_out,
    I04_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[26] ,
    \m1_M0_Result_i_reg[26]_0 );
  output [0:0]m0_barrel_result;
  input I025_out;
  input I04_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[26] ;
  input [0:0]\m1_M0_Result_i_reg[26]_0 ;

  wire I025_out;
  wire I04_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[26] ;
  wire [0:0]\m1_M0_Result_i_reg[26]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I025_out),
        .I1(I04_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[26] ),
        .I5(\m1_M0_Result_i_reg[26]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_810
   (m0_barrel_result,
    I026_out,
    I03_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[27] ,
    \m1_M0_Result_i_reg[27]_0 );
  output [0:0]m0_barrel_result;
  input I026_out;
  input I03_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[27] ;
  input [0:0]\m1_M0_Result_i_reg[27]_0 ;

  wire I026_out;
  wire I03_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[27] ;
  wire [0:0]\m1_M0_Result_i_reg[27]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I026_out),
        .I1(I03_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[27] ),
        .I5(\m1_M0_Result_i_reg[27]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_811
   (m0_barrel_result,
    I027_out,
    I02_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[28] ,
    \m1_M0_Result_i_reg[28]_0 );
  output [0:0]m0_barrel_result;
  input I027_out;
  input I02_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[28] ;
  input [0:0]\m1_M0_Result_i_reg[28]_0 ;

  wire I027_out;
  wire I02_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[28] ;
  wire [0:0]\m1_M0_Result_i_reg[28]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I027_out),
        .I1(I02_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[28] ),
        .I5(\m1_M0_Result_i_reg[28]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_812
   (m0_barrel_result,
    I028_out,
    I01_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[29] ,
    \m1_M0_Result_i_reg[29]_0 );
  output [0:0]m0_barrel_result;
  input I028_out;
  input I01_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[29] ;
  input [0:0]\m1_M0_Result_i_reg[29]_0 ;

  wire I01_out;
  wire I028_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[29] ;
  wire [0:0]\m1_M0_Result_i_reg[29]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I028_out),
        .I1(I01_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[29] ),
        .I5(\m1_M0_Result_i_reg[29]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_813
   (m0_barrel_result,
    I01_out,
    I028_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[2] ,
    \m1_M0_Result_i_reg[2]_0 );
  output [0:0]m0_barrel_result;
  input I01_out;
  input I028_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[2] ;
  input [0:0]\m1_M0_Result_i_reg[2]_0 ;

  wire I01_out;
  wire I028_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[2] ;
  wire [0:0]\m1_M0_Result_i_reg[2]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I01_out),
        .I1(I028_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[2] ),
        .I5(\m1_M0_Result_i_reg[2]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_814
   (m0_barrel_result,
    I029_out,
    I00_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[30] ,
    \m1_M0_Result_i_reg[30]_0 );
  output [0:0]m0_barrel_result;
  input I029_out;
  input I00_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[30] ;
  input [0:0]\m1_M0_Result_i_reg[30]_0 ;

  wire I00_out;
  wire I029_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[30] ;
  wire [0:0]\m1_M0_Result_i_reg[30]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I029_out),
        .I1(I00_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[30] ),
        .I5(\m1_M0_Result_i_reg[30]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_815
   (m0_barrel_result,
    I1,
    I0,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[31] );
  output [0:0]m0_barrel_result;
  input I1;
  input I0;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[31] ;

  wire I0;
  wire I1;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[31] ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I1),
        .I1(I0),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[31] ),
        .I5(1'b0),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_816
   (m0_barrel_result,
    I02_out,
    I027_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[3] ,
    \m1_M0_Result_i_reg[3]_0 );
  output [0:0]m0_barrel_result;
  input I02_out;
  input I027_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[3] ;
  input [0:0]\m1_M0_Result_i_reg[3]_0 ;

  wire I027_out;
  wire I02_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[3] ;
  wire [0:0]\m1_M0_Result_i_reg[3]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I02_out),
        .I1(I027_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[3] ),
        .I5(\m1_M0_Result_i_reg[3]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_817
   (m0_barrel_result,
    I03_out,
    I026_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[4] ,
    \m1_M0_Result_i_reg[4]_0 );
  output [0:0]m0_barrel_result;
  input I03_out;
  input I026_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[4] ;
  input [0:0]\m1_M0_Result_i_reg[4]_0 ;

  wire I026_out;
  wire I03_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[4] ;
  wire [0:0]\m1_M0_Result_i_reg[4]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I03_out),
        .I1(I026_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[4] ),
        .I5(\m1_M0_Result_i_reg[4]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_818
   (m0_barrel_result,
    I04_out,
    I025_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[5] ,
    \m1_M0_Result_i_reg[5]_0 );
  output [0:0]m0_barrel_result;
  input I04_out;
  input I025_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[5] ;
  input [0:0]\m1_M0_Result_i_reg[5]_0 ;

  wire I025_out;
  wire I04_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[5] ;
  wire [0:0]\m1_M0_Result_i_reg[5]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I04_out),
        .I1(I025_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[5] ),
        .I5(\m1_M0_Result_i_reg[5]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_819
   (m0_barrel_result,
    I05_out,
    I024_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[6] ,
    \m1_M0_Result_i_reg[6]_0 );
  output [0:0]m0_barrel_result;
  input I05_out;
  input I024_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[6] ;
  input [0:0]\m1_M0_Result_i_reg[6]_0 ;

  wire I024_out;
  wire I05_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[6] ;
  wire [0:0]\m1_M0_Result_i_reg[6]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I05_out),
        .I1(I024_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[6] ),
        .I5(\m1_M0_Result_i_reg[6]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_820
   (m0_barrel_result,
    I06_out,
    I023_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[7] ,
    \m1_M0_Result_i_reg[7]_0 );
  output [0:0]m0_barrel_result;
  input I06_out;
  input I023_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[7] ;
  input [0:0]\m1_M0_Result_i_reg[7]_0 ;

  wire I023_out;
  wire I06_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[7] ;
  wire [0:0]\m1_M0_Result_i_reg[7]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I06_out),
        .I1(I023_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[7] ),
        .I5(\m1_M0_Result_i_reg[7]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_821
   (m0_barrel_result,
    I07_out,
    I022_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[8] ,
    \m1_M0_Result_i_reg[8]_0 );
  output [0:0]m0_barrel_result;
  input I07_out;
  input I022_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[8] ;
  input [0:0]\m1_M0_Result_i_reg[8]_0 ;

  wire I022_out;
  wire I07_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[8] ;
  wire [0:0]\m1_M0_Result_i_reg[8]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I07_out),
        .I1(I022_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[8] ),
        .I5(\m1_M0_Result_i_reg[8]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized22_822
   (m0_barrel_result,
    I08_out,
    I021_out,
    mem_left_shift,
    Q,
    \m1_M0_Result_i_reg[9] ,
    \m1_M0_Result_i_reg[9]_0 );
  output [0:0]m0_barrel_result;
  input I08_out;
  input I021_out;
  input mem_left_shift;
  input [0:0]Q;
  input [0:0]\m1_M0_Result_i_reg[9] ;
  input [0:0]\m1_M0_Result_i_reg[9]_0 ;

  wire I021_out;
  wire I08_out;
  wire [0:0]Q;
  wire [0:0]m0_barrel_result;
  wire [0:0]\m1_M0_Result_i_reg[9] ;
  wire [0:0]\m1_M0_Result_i_reg[9]_0 ;
  wire mem_left_shift;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF000000ACACFF00)) 
    \Using_FPGA.Native 
       (.I0(I08_out),
        .I1(I021_out),
        .I2(mem_left_shift),
        .I3(Q),
        .I4(\m1_M0_Result_i_reg[9] ),
        .I5(\m1_M0_Result_i_reg[9]_0 ),
        .O(m0_barrel_result));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized4
   (sel_input_depth,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    if4_push_instr_fetch,
    \Using_FPGA.Native_2 ,
    Use_Next_Data,
    Clear_Buffer);
  output sel_input_depth;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input if4_push_instr_fetch;
  input \Using_FPGA.Native_2 ;
  input Use_Next_Data;
  input Clear_Buffer;

  wire Clear_Buffer;
  wire Use_Next_Data;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire if4_push_instr_fetch;
  wire sel_input_depth;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFF00FFFFAE0AAE0A)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(if4_push_instr_fetch),
        .I3(\Using_FPGA.Native_2 ),
        .I4(Use_Next_Data),
        .I5(Clear_Buffer),
        .O(sel_input_depth));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized6
   (cur_valid_cmb,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    if4_push_instr_fetch,
    \Using_FPGA.Native_2 ,
    Use_Next_Data,
    Clear_Buffer);
  output cur_valid_cmb;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input if4_push_instr_fetch;
  input \Using_FPGA.Native_2 ;
  input Use_Next_Data;
  input Clear_Buffer;

  wire Clear_Buffer;
  wire Use_Next_Data;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire cur_valid_cmb;
  wire if4_push_instr_fetch;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h00FF000051F551F5)) 
    \Using_FPGA.Native 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(if4_push_instr_fetch),
        .I3(\Using_FPGA.Native_2 ),
        .I4(Use_Next_Data),
        .I5(Clear_Buffer),
        .O(cur_valid_cmb));
endmodule

(* ORIG_REF_NAME = "MB_LUT6" *) 
module microblaze_microblaze_0_0_MB_LUT6__parameterized8
   (alu_AddSub_1,
    Q,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    ex_alu_sel_logic,
    EX_Enable_ALU);
  output alu_AddSub_1;
  input [0:0]Q;
  input [1:0]\Using_FPGA.Native_0 ;
  input [0:0]\Using_FPGA.Native_1 ;
  input ex_alu_sel_logic;
  input EX_Enable_ALU;

  wire EX_Enable_ALU;
  wire [0:0]Q;
  wire [1:0]\Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire alu_AddSub_1;
  wire ex_alu_sel_logic;

  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'h607AA67800008888)) 
    \Using_FPGA.Native 
       (.I0(Q),
        .I1(\Using_FPGA.Native_0 [1]),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_0 [0]),
        .I4(ex_alu_sel_logic),
        .I5(EX_Enable_ALU),
        .O(alu_AddSub_1));
endmodule

(* ORIG_REF_NAME = "MB_MULT_AND" *) 
module microblaze_microblaze_0_0_MB_MULT_AND
   (DI,
    I0,
    \Using_FPGA.Native_I1 );
  output DI;
  input I0;
  input [0:0]\Using_FPGA.Native_I1 ;

  wire DI;
  wire I0;
  wire [0:0]\Using_FPGA.Native_I1 ;

  (* XILINX_LEGACY_PRIM = "MULT_AND" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native 
       (.I0(I0),
        .I1(\Using_FPGA.Native_I1 ),
        .O(DI));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY
   (carry_7,
    SRL16_Sel_7,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_7;
  input SRL16_Sel_7;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire SRL16_Sel_7;
  wire carry_7;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_7}),
        .CYINIT(Q),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,SRL16_Sel_7}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_143
   (of_piperun_raw,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    ex_dead_valid_hold,
    lopt,
    lopt_1,
    lopt_2);
  output of_piperun_raw;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input ex_dead_valid_hold;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_dead_valid_hold;
  wire of_piperun_raw;
  wire p_197_in;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = p_197_in;
  assign of_piperun_raw = lopt;
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.Native_i_1__21 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(ex_dead_valid_hold),
        .O(p_197_in));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_145
   (of_piperun_masked_no9,
    ex_is_div_instr_i_reg,
    \Using_FPGA.Native_0 ,
    of_piperun_masked_no8,
    \Using_FPGA.Native_i_1__8 ,
    \Using_FPGA.Native_i_1__8_0 ,
    \Using_FPGA.Native_i_1__8_1 ,
    ex_dead_valid_hold,
    lopt,
    lopt_1);
  output of_piperun_masked_no9;
  output ex_is_div_instr_i_reg;
  input \Using_FPGA.Native_0 ;
  input of_piperun_masked_no8;
  input \Using_FPGA.Native_i_1__8 ;
  input \Using_FPGA.Native_i_1__8_0 ;
  input \Using_FPGA.Native_i_1__8_1 ;
  input ex_dead_valid_hold;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_i_1__8 ;
  wire \Using_FPGA.Native_i_1__8_0 ;
  wire \Using_FPGA.Native_i_1__8_1 ;
  wire ex_dead_valid_hold;
  wire ex_is_div_instr_i_reg;
  wire of_piperun_masked_no8;
  wire of_piperun_masked_no9;

  assign lopt_1 = \<const0> ;
  assign of_piperun_masked_no9 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'h0008)) 
    \Using_FPGA.Native_i_3 
       (.I0(\Using_FPGA.Native_i_1__8 ),
        .I1(\Using_FPGA.Native_i_1__8_0 ),
        .I2(\Using_FPGA.Native_i_1__8_1 ),
        .I3(ex_dead_valid_hold),
        .O(ex_is_div_instr_i_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_147
   (of_piperun_masked_no8,
    of_piperun_masked_no7,
    lopt,
    lopt_1,
    lopt_2);
  output of_piperun_masked_no8;
  input of_piperun_masked_no7;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire of_piperun_masked_no7;
  wire of_piperun_masked_no8;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign of_piperun_masked_no8 = lopt;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_149
   (of_piperun_masked_no7,
    of_piperun_masked_no6,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_piperun_masked_no7;
  input of_piperun_masked_no6;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire of_piperun_masked_no6;
  wire of_piperun_masked_no7;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(of_piperun_masked_no6),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,of_piperun_masked_no7}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_15
   (carry_6,
    SRL16_Sel_6,
    carry_7,
    lopt,
    lopt_1);
  output carry_6;
  input SRL16_Sel_6;
  input carry_7;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_6;
  wire carry_6;
  wire carry_7;

  assign carry_6 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_151
   (of_piperun_masked_no6,
    \Using_FPGA.Native_0 ,
    of_piperun_masked_no5,
    lopt,
    lopt_1);
  output of_piperun_masked_no6;
  input \Using_FPGA.Native_0 ;
  input of_piperun_masked_no5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_piperun_masked_no5;
  wire of_piperun_masked_no6;

  assign lopt_1 = \<const0> ;
  assign of_piperun_masked_no6 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_153
   (of_piperun_masked_no5,
    \Using_FPGA.Native_0 ,
    of_piperun_masked_no4,
    lopt,
    lopt_1);
  output of_piperun_masked_no5;
  input \Using_FPGA.Native_0 ;
  input of_piperun_masked_no4;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_piperun_masked_no4;
  wire of_piperun_masked_no5;

  assign lopt_1 = \<const0> ;
  assign of_piperun_masked_no5 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_155
   (of_piperun_masked_no4,
    \Using_FPGA.Native_0 ,
    of_piperun_masked_no3,
    lopt,
    lopt_1);
  output of_piperun_masked_no4;
  input \Using_FPGA.Native_0 ;
  input of_piperun_masked_no3;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_piperun_masked_no3;
  wire of_piperun_masked_no4;

  assign lopt_1 = \<const0> ;
  assign of_piperun_masked_no4 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_157
   (of_piperun_masked_no3,
    \Using_FPGA.Native_0 ,
    of_piperun_masked_no2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_piperun_masked_no3;
  input \Using_FPGA.Native_0 ;
  input of_piperun_masked_no2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire of_piperun_masked_no2;
  wire of_piperun_masked_no3;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(of_piperun_masked_no2),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,of_piperun_masked_no3}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_159
   (of_piperun_masked_no2,
    \Using_FPGA.Native_0 ,
    of_piperun_masked_no1,
    lopt,
    lopt_1);
  output of_piperun_masked_no2;
  input \Using_FPGA.Native_0 ;
  input of_piperun_masked_no1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_piperun_masked_no1;
  wire of_piperun_masked_no2;

  assign lopt_1 = \<const0> ;
  assign of_piperun_masked_no2 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_161
   (\Using_FPGA.Native_0 ,
    p_48_out,
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ,
    \Use_Async_Reset.sync_reset_reg ,
    D,
    D_0,
    WB_Div_Zero_Overflow_reg,
    of_raw_valid,
    of_piperun_masked_no10,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 ,
    p_43_out__4,
    \Using_FPGA.Native_1 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 ,
    sync_reset,
    of_dead_valid_hold_reg,
    of_dead_valid_hold,
    out,
    ex_gpr_write,
    \Using_FPGA.Native_2 ,
    ex_gpr_write_dbg,
    \of_MSR_i_reg[30] ,
    \of_MSR_i_reg[30]_0 ,
    \of_MSR_i_reg[25] ,
    \of_MSR_i_reg[25]_0 ,
    \of_MSR_i_reg[25]_1 ,
    \of_MSR_i_reg[25]_2 );
  output \Using_FPGA.Native_0 ;
  output p_48_out;
  output \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  output \Use_Async_Reset.sync_reset_reg ;
  output D;
  output D_0;
  output [1:0]WB_Div_Zero_Overflow_reg;
  input of_raw_valid;
  input of_piperun_masked_no10;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ;
  input [0:0]\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 ;
  input p_43_out__4;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 ;
  input sync_reset;
  input of_dead_valid_hold_reg;
  input of_dead_valid_hold;
  input out;
  input ex_gpr_write;
  input \Using_FPGA.Native_2 ;
  input ex_gpr_write_dbg;
  input \of_MSR_i_reg[30] ;
  input \of_MSR_i_reg[30]_0 ;
  input [1:0]\of_MSR_i_reg[25] ;
  input [1:0]\of_MSR_i_reg[25]_0 ;
  input \of_MSR_i_reg[25]_1 ;
  input [0:0]\of_MSR_i_reg[25]_2 ;

  wire D;
  wire D_0;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ;
  wire [0:0]\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [1:0]WB_Div_Zero_Overflow_reg;
  wire ex_gpr_write;
  wire ex_gpr_write_dbg;
  wire [1:0]\of_MSR_i_reg[25] ;
  wire [1:0]\of_MSR_i_reg[25]_0 ;
  wire \of_MSR_i_reg[25]_1 ;
  wire [0:0]\of_MSR_i_reg[25]_2 ;
  wire \of_MSR_i_reg[30] ;
  wire \of_MSR_i_reg[30]_0 ;
  wire of_dead_valid_hold;
  wire of_dead_valid_hold_reg;
  wire of_piperun_masked_no10;
  wire of_raw_valid;
  wire out;
  wire p_43_out__4;
  wire p_48_out;
  wire sync_reset;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  LUT5 #(
    .INIT(32'hAEFFAAAA)) 
    \Performance_Debug_Control.ex_dbg_pc_hit_i_i_2 
       (.I0(p_48_out),
        .I1(\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 ),
        .I2(p_43_out__4),
        .I3(\Using_FPGA.Native_1 ),
        .I4(\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 ),
        .O(\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ));
  LUT6 #(
    .INIT(64'hAAAAAAAA888A8888)) 
    \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Performance_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .I2(\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ),
        .I3(\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ),
        .I4(\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 ),
        .I5(\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 ),
        .O(p_48_out));
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(of_piperun_masked_no10),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],\Using_FPGA.Native_0 }),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],of_raw_valid}));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Using_FPGA.Native_i_1__57 
       (.I0(out),
        .I1(\Using_FPGA.Native_0 ),
        .I2(ex_gpr_write),
        .I3(\Using_FPGA.Native_1 ),
        .O(D));
  LUT4 #(
    .INIT(16'h88B8)) 
    \Using_FPGA.Native_i_1__58 
       (.I0(\Using_FPGA.Native_2 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(ex_gpr_write_dbg),
        .I3(\Using_FPGA.Native_1 ),
        .O(D_0));
  LUT6 #(
    .INIT(64'hEFE0EFEFEFE0E0E0)) 
    \of_MSR_i[25]_i_1 
       (.I0(\of_MSR_i_reg[25]_1 ),
        .I1(\of_MSR_i_reg[25]_2 ),
        .I2(\of_MSR_i_reg[30]_0 ),
        .I3(\of_MSR_i_reg[25] [1]),
        .I4(\Using_FPGA.Native_0 ),
        .I5(\of_MSR_i_reg[25]_0 [1]),
        .O(WB_Div_Zero_Overflow_reg[1]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \of_MSR_i[30]_i_1 
       (.I0(\of_MSR_i_reg[30] ),
        .I1(\of_MSR_i_reg[30]_0 ),
        .I2(\of_MSR_i_reg[25] [0]),
        .I3(\Using_FPGA.Native_0 ),
        .I4(\of_MSR_i_reg[25]_0 [0]),
        .O(WB_Div_Zero_Overflow_reg[0]));
  LUT5 #(
    .INIT(32'h11100000)) 
    of_dead_valid_hold_i_1
       (.I0(sync_reset),
        .I1(\Using_FPGA.Native_0 ),
        .I2(of_dead_valid_hold_reg),
        .I3(of_dead_valid_hold),
        .I4(of_raw_valid),
        .O(\Use_Async_Reset.sync_reset_reg ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_163
   (of_piperun_masked_no10,
    of_piperun_masked_no9,
    lopt,
    lopt_1,
    lopt_2);
  output of_piperun_masked_no10;
  input of_piperun_masked_no9;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire of_piperun_masked_no10;
  wire of_piperun_masked_no9;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign of_piperun_masked_no10 = lopt;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_165
   (of_piperun_masked_no1,
    \Using_FPGA.Native_0 ,
    of_piperun_raw,
    lopt,
    lopt_1);
  output of_piperun_masked_no1;
  input \Using_FPGA.Native_0 ;
  input of_piperun_raw;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_piperun_masked_no1;
  wire of_piperun_raw;

  assign lopt_1 = \<const0> ;
  assign of_piperun_masked_no1 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_167
   (m3_piperun_raw,
    m3_piperun_data_raw,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output m3_piperun_raw;
  input m3_piperun_data_raw;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire A_N59_out;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire m3_piperun_data_raw;
  wire m3_piperun_raw;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = A_N59_out;
  assign m3_piperun_raw = lopt;
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__31 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .O(A_N59_out));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_169
   (m3_raw_valid_reg,
    \Use_Async_Reset.sync_reset_reg ,
    m3_raw_valid_reg_0,
    wb_piperun_i_reg,
    D,
    wb_exception_from_m3_reg_rep__0,
    \wb_exception_raw_kind_reg[31] ,
    wb_exception_from_m3_reg_rep__0_0,
    m3_dead_valid_hold_reg,
    m3_piperun_masked_no3,
    sync_reset,
    m3_active_access,
    m3_raw_valid_reg_1,
    m3_raw_valid_reg_2,
    wb_raw_valid_reg,
    wb_raw_valid_reg_0,
    wb_raw_valid_reg_1,
    m3_gpr_write_dbg,
    m3_dead_valid_hold_reg_0,
    m3_dead_valid_hold,
    Q,
    \wb_PC_i_reg[31] ,
    \wb_PC_i_reg[31]_0 ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    m3_msr,
    lopt,
    lopt_1);
  output m3_raw_valid_reg;
  output \Use_Async_Reset.sync_reset_reg ;
  output m3_raw_valid_reg_0;
  output wb_piperun_i_reg;
  output D;
  output wb_exception_from_m3_reg_rep__0;
  output [0:0]\wb_exception_raw_kind_reg[31] ;
  output wb_exception_from_m3_reg_rep__0_0;
  input m3_dead_valid_hold_reg;
  input m3_piperun_masked_no3;
  input sync_reset;
  input m3_active_access;
  input m3_raw_valid_reg_1;
  input [0:0]m3_raw_valid_reg_2;
  input wb_raw_valid_reg;
  input wb_raw_valid_reg_0;
  input wb_raw_valid_reg_1;
  input m3_gpr_write_dbg;
  input m3_dead_valid_hold_reg_0;
  input m3_dead_valid_hold;
  input [2:0]Q;
  input \wb_PC_i_reg[31] ;
  input \wb_PC_i_reg[31]_0 ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]m3_msr;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire D;
  wire [2:0]Q;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire m3_active_access;
  wire m3_dead_valid_hold;
  wire m3_dead_valid_hold_reg;
  wire m3_dead_valid_hold_reg_0;
  wire m3_gpr_write_dbg;
  wire [0:0]m3_msr;
  wire m3_piperun_masked_no3;
  wire m3_raw_valid_reg;
  wire m3_raw_valid_reg_0;
  wire m3_raw_valid_reg_1;
  wire [0:0]m3_raw_valid_reg_2;
  wire sync_reset;
  wire \wb_PC_i_reg[31] ;
  wire \wb_PC_i_reg[31]_0 ;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;
  wire [0:0]\wb_exception_raw_kind_reg[31] ;
  wire wb_piperun_i_reg;
  wire wb_raw_valid_reg;
  wire wb_raw_valid_reg_0;
  wire wb_raw_valid_reg_1;

  assign lopt_1 = \<const0> ;
  assign m3_raw_valid_reg = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \Use_DAXI.wb_data_has_been_used_i_1 
       (.I0(sync_reset),
        .I1(m3_raw_valid_reg),
        .I2(m3_active_access),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__129 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m3_dead_valid_hold_reg_0),
        .I2(\Using_FPGA.Native_1 ),
        .I3(m3_raw_valid_reg),
        .I4(m3_msr),
        .O(wb_exception_from_m3_reg_rep__0_0));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__15 
       (.I0(m3_raw_valid_reg),
        .I1(m3_gpr_write_dbg),
        .O(D));
  LUT5 #(
    .INIT(32'h000000E0)) 
    m3_dead_valid_hold_i_1
       (.I0(m3_dead_valid_hold_reg_0),
        .I1(m3_dead_valid_hold),
        .I2(m3_dead_valid_hold_reg),
        .I3(sync_reset),
        .I4(m3_raw_valid_reg),
        .O(wb_exception_from_m3_reg_rep__0));
  LUT5 #(
    .INIT(32'h0000C5C0)) 
    m3_raw_valid_i_1
       (.I0(m3_raw_valid_reg),
        .I1(m3_raw_valid_reg_1),
        .I2(m3_raw_valid_reg_2),
        .I3(m3_dead_valid_hold_reg),
        .I4(sync_reset),
        .O(m3_raw_valid_reg_0));
  LUT6 #(
    .INIT(64'h0000FF7F00000000)) 
    \wb_PC_i[0]_i_1 
       (.I0(Q[0]),
        .I1(\wb_PC_i_reg[31] ),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(\wb_PC_i_reg[31]_0 ),
        .I5(m3_raw_valid_reg),
        .O(\wb_exception_raw_kind_reg[31] ));
  LUT5 #(
    .INIT(32'h0000C5C0)) 
    wb_raw_valid_i_1
       (.I0(wb_raw_valid_reg),
        .I1(wb_raw_valid_reg_0),
        .I2(m3_raw_valid_reg),
        .I3(wb_raw_valid_reg_1),
        .I4(sync_reset),
        .O(wb_piperun_i_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_17
   (carry_5,
    SRL16_Sel_5,
    carry_6,
    lopt,
    lopt_1);
  output carry_5;
  input SRL16_Sel_5;
  input carry_6;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_5;
  wire carry_5;
  wire carry_6;

  assign carry_5 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_171
   (m3_piperun_masked_no3,
    WB_MSR_Set_IE_reg,
    m3_piperun_masked_no2,
    lopt,
    lopt_1);
  output m3_piperun_masked_no3;
  input WB_MSR_Set_IE_reg;
  input m3_piperun_masked_no2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire WB_MSR_Set_IE_reg;
  wire m3_piperun_masked_no2;
  wire m3_piperun_masked_no3;

  assign lopt_1 = \<const0> ;
  assign m3_piperun_masked_no3 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_173
   (m3_piperun_masked_no2,
    m3_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output m3_piperun_masked_no2;
  input m3_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire m3_piperun_masked_no1;
  wire m3_piperun_masked_no2;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign m3_piperun_masked_no2 = lopt;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_175
   (m3_piperun_masked_no1,
    \Using_FPGA.Native_0 ,
    m3_piperun_raw,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m3_piperun_masked_no1;
  input \Using_FPGA.Native_0 ;
  input m3_piperun_raw;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire m3_piperun_masked_no1;
  wire m3_piperun_raw;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(m3_piperun_raw),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,m3_piperun_masked_no1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_177
   (m3_piperun_data_raw,
    m3_databus_ready,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output m3_piperun_data_raw;
  input m3_databus_ready;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__104_n_0 ;
  wire m3_databus_ready;
  wire m3_piperun_data_raw;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.Native_i_1__104_n_0 ;
  assign m3_piperun_data_raw = lopt;
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__104 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_i_1__104_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_179
   (m2_piperun_raw,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    m3_dead_valid_hold,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m2_piperun_raw;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input m3_dead_valid_hold;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_1__225_n_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire m2_piperun_raw;
  wire m3_dead_valid_hold;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(\Using_FPGA.Native_0 ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,m2_piperun_raw}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.Native_i_1__225_n_0 }));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native_i_1__225 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(m3_dead_valid_hold),
        .O(\Using_FPGA.Native_i_1__225_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_181
   (m2_raw_valid_reg,
    \Use_DLMB.m2_potential_bubble_reg ,
    \Use_Async_Reset.sync_reset_reg ,
    \Use_DAXI.M_AXI_DP_BREADY_I_reg ,
    \Use_DAXI.M_AXI_DP_RREADY_I_reg ,
    m2_raw_valid_reg_0,
    wb_exception_from_m3_reg_rep__0,
    D_0,
    D_1,
    D_2,
    WB_Div_Zero_Overflow_reg,
    wb_exception_from_m3_reg_rep__0_0,
    m2_dead_valid_hold_reg,
    m2_piperun_masked_no5,
    m2_potential_bubble,
    \Use_DLMB.m2_potential_bubble_reg_0 ,
    D,
    \Use_DLMB.m2_dready_hold_reg ,
    m2_dlmb_dready,
    \Use_DLMB.m2_dready_hold_reg_0 ,
    sync_reset,
    M_AXI_DP_RVALID,
    M_AXI_DP_BVALID,
    \Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ,
    m2_databus_write,
    \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ,
    m2_dlmb_drop_request,
    m2_raw_valid_reg_1,
    \Using_FPGA.Native_0 ,
    m2_dead_valid_hold,
    m2_gpr_write,
    m1_gpr_write,
    m2_gpr_write_dbg,
    m1_gpr_write_dbg,
    m2_is_div_instr,
    m1_is_div_instr_i,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    lopt,
    lopt_1);
  output m2_raw_valid_reg;
  output \Use_DLMB.m2_potential_bubble_reg ;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Use_DAXI.M_AXI_DP_BREADY_I_reg ;
  output \Use_DAXI.M_AXI_DP_RREADY_I_reg ;
  output m2_raw_valid_reg_0;
  output wb_exception_from_m3_reg_rep__0;
  output D_0;
  output D_1;
  output D_2;
  output WB_Div_Zero_Overflow_reg;
  output wb_exception_from_m3_reg_rep__0_0;
  input m2_dead_valid_hold_reg;
  input m2_piperun_masked_no5;
  input m2_potential_bubble;
  input \Use_DLMB.m2_potential_bubble_reg_0 ;
  input [0:0]D;
  input [0:0]\Use_DLMB.m2_dready_hold_reg ;
  input m2_dlmb_dready;
  input \Use_DLMB.m2_dready_hold_reg_0 ;
  input sync_reset;
  input M_AXI_DP_RVALID;
  input M_AXI_DP_BVALID;
  input [1:0]\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ;
  input m2_databus_write;
  input \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ;
  input m2_dlmb_drop_request;
  input m2_raw_valid_reg_1;
  input \Using_FPGA.Native_0 ;
  input m2_dead_valid_hold;
  input m2_gpr_write;
  input m1_gpr_write;
  input m2_gpr_write_dbg;
  input m1_gpr_write_dbg;
  input m2_is_div_instr;
  input m1_is_div_instr_i;
  input \Using_FPGA.Native_1 ;
  input [0:0]\Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire [0:0]D;
  wire \DAXI_interface_I1/M_AXI_DP_BREADY_I ;
  wire D_0;
  wire D_1;
  wire D_2;
  wire M_AXI_DP_BVALID;
  wire M_AXI_DP_RVALID;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_DAXI.M_AXI_DP_BREADY_I_reg ;
  wire [1:0]\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_RREADY_I_reg ;
  wire \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ;
  wire [0:0]\Use_DLMB.m2_dready_hold_reg ;
  wire \Use_DLMB.m2_dready_hold_reg_0 ;
  wire \Use_DLMB.m2_potential_bubble_i_2_n_0 ;
  wire \Use_DLMB.m2_potential_bubble_reg ;
  wire \Use_DLMB.m2_potential_bubble_reg_0 ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire WB_Div_Zero_Overflow_reg;
  wire m1_gpr_write;
  wire m1_gpr_write_dbg;
  wire m1_is_div_instr_i;
  wire m2_databus_write;
  wire m2_dead_valid_hold;
  wire m2_dead_valid_hold_reg;
  wire m2_dlmb_dready;
  wire m2_dlmb_drop_request;
  wire m2_gpr_write;
  wire m2_gpr_write_dbg;
  wire m2_is_div_instr;
  wire m2_piperun_masked_no5;
  wire m2_potential_bubble;
  wire m2_raw_valid_reg;
  wire m2_raw_valid_reg_0;
  wire m2_raw_valid_reg_1;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;

  assign lopt_1 = \<const0> ;
  assign m2_raw_valid_reg = lopt;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h000000002222E222)) 
    \Use_DAXI.M_AXI_DP_BREADY_I_i_1 
       (.I0(\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 [1]),
        .I1(m2_raw_valid_reg),
        .I2(m2_databus_write),
        .I3(\Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ),
        .I4(m2_dlmb_drop_request),
        .I5(\DAXI_interface_I1/M_AXI_DP_BREADY_I ),
        .O(\Use_DAXI.M_AXI_DP_BREADY_I_reg ));
  LUT4 #(
    .INIT(16'hFF54)) 
    \Use_DAXI.M_AXI_DP_BREADY_I_i_3 
       (.I0(m2_raw_valid_reg),
        .I1(M_AXI_DP_RVALID),
        .I2(M_AXI_DP_BVALID),
        .I3(sync_reset),
        .O(\DAXI_interface_I1/M_AXI_DP_BREADY_I ));
  LUT6 #(
    .INIT(64'h0000000022222E22)) 
    \Use_DAXI.M_AXI_DP_RREADY_I_i_1 
       (.I0(\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 [0]),
        .I1(m2_raw_valid_reg),
        .I2(m2_databus_write),
        .I3(\Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ),
        .I4(m2_dlmb_drop_request),
        .I5(\DAXI_interface_I1/M_AXI_DP_BREADY_I ),
        .O(\Use_DAXI.M_AXI_DP_RREADY_I_reg ));
  LUT4 #(
    .INIT(16'h2202)) 
    \Use_DLMB.m2_dready_hold_i_1 
       (.I0(\Use_DLMB.m2_dready_hold_reg_0 ),
        .I1(sync_reset),
        .I2(m2_raw_valid_reg),
        .I3(\Use_DLMB.m2_dready_hold_reg ),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT6 #(
    .INIT(64'h4444454444444444)) 
    \Use_DLMB.m2_potential_bubble_i_1 
       (.I0(\Use_DLMB.m2_potential_bubble_i_2_n_0 ),
        .I1(m2_potential_bubble),
        .I2(\Use_DLMB.m2_potential_bubble_reg_0 ),
        .I3(D),
        .I4(\Use_DLMB.m2_dready_hold_reg ),
        .I5(m2_dlmb_dready),
        .O(\Use_DLMB.m2_potential_bubble_reg ));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Use_DLMB.m2_potential_bubble_i_2 
       (.I0(sync_reset),
        .I1(m2_raw_valid_reg),
        .O(\Use_DLMB.m2_potential_bubble_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEFEFEFE0E0E0E0E0)) 
    \Using_FPGA.Native_i_1__126 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(m2_raw_valid_reg),
        .I5(\Using_FPGA.Native_4 ),
        .O(WB_Div_Zero_Overflow_reg));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__132 
       (.I0(\Using_FPGA.Native_5 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_6 ),
        .I3(m2_raw_valid_reg),
        .I4(\Using_FPGA.Native_7 ),
        .O(wb_exception_from_m3_reg_rep__0_0));
  LUT4 #(
    .INIT(16'hF404)) 
    \Using_FPGA.Native_i_1__59 
       (.I0(m2_raw_valid_reg),
        .I1(m2_gpr_write),
        .I2(\Use_DLMB.m2_dready_hold_reg ),
        .I3(m1_gpr_write),
        .O(D_0));
  LUT4 #(
    .INIT(16'hF404)) 
    \Using_FPGA.Native_i_1__60 
       (.I0(m2_raw_valid_reg),
        .I1(m2_gpr_write_dbg),
        .I2(\Use_DLMB.m2_dready_hold_reg ),
        .I3(m1_gpr_write_dbg),
        .O(D_1));
  LUT4 #(
    .INIT(16'hF404)) 
    \Using_FPGA.Native_i_1__63 
       (.I0(m2_raw_valid_reg),
        .I1(m2_is_div_instr),
        .I2(\Use_DLMB.m2_dready_hold_reg ),
        .I3(m1_is_div_instr_i),
        .O(D_2));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT5 #(
    .INIT(32'h000000E0)) 
    m2_dead_valid_hold_i_1
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m2_dead_valid_hold),
        .I2(m2_dead_valid_hold_reg),
        .I3(m2_raw_valid_reg),
        .I4(sync_reset),
        .O(wb_exception_from_m3_reg_rep__0));
  LUT5 #(
    .INIT(32'h00003530)) 
    m2_raw_valid_i_1
       (.I0(m2_raw_valid_reg),
        .I1(m2_raw_valid_reg_1),
        .I2(\Use_DLMB.m2_dready_hold_reg ),
        .I3(m2_dead_valid_hold_reg),
        .I4(sync_reset),
        .O(m2_raw_valid_reg_0));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_183
   (m2_piperun_masked_no5,
    m2_piperun_masked_no4,
    lopt,
    lopt_1,
    lopt_2);
  output m2_piperun_masked_no5;
  input m2_piperun_masked_no4;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire m2_piperun_masked_no4;
  wire m2_piperun_masked_no5;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign m2_piperun_masked_no5 = lopt;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_185
   (m2_piperun_masked_no4,
    m2_piperun_masked_no3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m2_piperun_masked_no4;
  input m2_piperun_masked_no3;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire m2_piperun_masked_no3;
  wire m2_piperun_masked_no4;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(m2_piperun_masked_no3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,m2_piperun_masked_no4}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_187
   (m2_piperun_masked_no3,
    m2_piperun_masked_no2,
    lopt,
    lopt_1,
    lopt_2);
  output m2_piperun_masked_no3;
  input m2_piperun_masked_no2;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire m2_piperun_masked_no2;
  wire m2_piperun_masked_no3;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign m2_piperun_masked_no3 = lopt;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_189
   (m2_piperun_masked_no2,
    \Using_FPGA.Native_0 ,
    m2_piperun_masked_no1,
    lopt,
    lopt_1);
  output m2_piperun_masked_no2;
  input \Using_FPGA.Native_0 ;
  input m2_piperun_masked_no1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire m2_piperun_masked_no1;
  wire m2_piperun_masked_no2;

  assign lopt_1 = \<const0> ;
  assign m2_piperun_masked_no2 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_19
   (carry_4,
    SRL16_Sel_4,
    carry_5,
    lopt,
    lopt_1);
  output carry_4;
  input SRL16_Sel_4;
  input carry_5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_4;
  wire carry_4;
  wire carry_5;

  assign carry_4 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_191
   (m2_piperun_masked_no1,
    m2_piperun_raw,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    m2_allow_dready,
    DReady,
    \Using_FPGA.Native_2 ,
    DWait,
    lopt,
    lopt_1,
    lopt_2);
  output m2_piperun_masked_no1;
  input m2_piperun_raw;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input m2_allow_dready;
  input DReady;
  input \Using_FPGA.Native_2 ;
  input DWait;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire DReady;
  wire DWait;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_1__36_n_0 ;
  wire m2_allow_dready;
  wire m2_piperun_masked_no1;
  wire m2_piperun_raw;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.Native_i_1__36_n_0 ;
  assign m2_piperun_masked_no1 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hFFFFFF7FFFFFFFFF)) 
    \Using_FPGA.Native_i_1__36 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .I2(m2_allow_dready),
        .I3(DReady),
        .I4(\Using_FPGA.Native_2 ),
        .I5(DWait),
        .O(\Using_FPGA.Native_i_1__36_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_193
   (m1_piperun_raw,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    m2_dead_valid_hold,
    lopt,
    lopt_1,
    lopt_2);
  output m1_piperun_raw;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input m2_dead_valid_hold;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_i_1__224_n_0 ;
  wire m1_piperun_raw;
  wire m2_dead_valid_hold;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.Native_i_1__224_n_0 ;
  assign m1_piperun_raw = lopt;
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native_i_1__224 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(m2_dead_valid_hold),
        .O(\Using_FPGA.Native_i_1__224_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_195
   (m1_raw_valid_reg,
    m1_databus_write_from_m0_reg,
    m1_databus_write_from_m0_reg_0,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ,
    m1_databus_addr_from_m0_reg,
    m1_databus_access_from_m0_reg,
    \Use_DLMB.m1_dlmb_issued_reg ,
    m1_raw_valid_reg_0,
    wb_exception_from_m3_reg_rep__0,
    D_0,
    D_1,
    D_2,
    WB_Div_Zero_Overflow_reg,
    wb_exception_from_m3_reg_rep__0_0,
    \m2_PC_i_reg[0] ,
    m1_piperun_masked_no2,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ,
    m1_databus_access,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ,
    \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ,
    M_AXI_DP_AWREADY,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ,
    M_AXI_DP_WREADY,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ,
    D,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ,
    DWait,
    m2_allow_dready,
    m2_dlmb_drop_request,
    \Use_DAXI.m2_active_access_unmasked_reg ,
    m1_dlmb_issued,
    sync_reset,
    A_N201_out,
    in0,
    \Using_FPGA.Native_0 ,
    m1_dead_valid_hold,
    m1_is_div_instr_i,
    m0_is_div_instr_i,
    m1_gpr_write_dbg,
    m0_gpr_write_dbg,
    m1_gpr_write,
    m0_gpr_write,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    lopt,
    lopt_1);
  output m1_raw_valid_reg;
  output m1_databus_write_from_m0_reg;
  output m1_databus_write_from_m0_reg_0;
  output \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ;
  output m1_databus_addr_from_m0_reg;
  output m1_databus_access_from_m0_reg;
  output \Use_DLMB.m1_dlmb_issued_reg ;
  output m1_raw_valid_reg_0;
  output wb_exception_from_m3_reg_rep__0;
  output D_0;
  output D_1;
  output D_2;
  output WB_Div_Zero_Overflow_reg;
  output wb_exception_from_m3_reg_rep__0_0;
  input \m2_PC_i_reg[0] ;
  input m1_piperun_masked_no2;
  input \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ;
  input m1_databus_access;
  input \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ;
  input \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ;
  input M_AXI_DP_AWREADY;
  input \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ;
  input M_AXI_DP_WREADY;
  input \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ;
  input [1:0]D;
  input \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ;
  input DWait;
  input m2_allow_dready;
  input m2_dlmb_drop_request;
  input \Use_DAXI.m2_active_access_unmasked_reg ;
  input m1_dlmb_issued;
  input sync_reset;
  input A_N201_out;
  input in0;
  input \Using_FPGA.Native_0 ;
  input m1_dead_valid_hold;
  input m1_is_div_instr_i;
  input m0_is_div_instr_i;
  input m1_gpr_write_dbg;
  input m0_gpr_write_dbg;
  input m1_gpr_write;
  input m0_gpr_write;
  input \Using_FPGA.Native_1 ;
  input [0:0]\Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_N201_out;
  wire [1:0]D;
  wire DWait;
  wire D_0;
  wire D_1;
  wire D_2;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_WREADY;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ;
  wire \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ;
  wire \Use_DAXI.m2_active_access_unmasked_reg ;
  wire \Use_DLMB.m1_dlmb_issued_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire WB_Div_Zero_Overflow_reg;
  wire in0;
  wire m0_gpr_write;
  wire m0_gpr_write_dbg;
  wire m0_is_div_instr_i;
  wire m1_databus_access;
  wire m1_databus_access_from_m0_reg;
  wire m1_databus_addr_from_m0_reg;
  wire m1_databus_write_from_m0_reg;
  wire m1_databus_write_from_m0_reg_0;
  wire m1_dead_valid_hold;
  wire m1_dlmb_issued;
  wire m1_gpr_write;
  wire m1_gpr_write_dbg;
  wire m1_is_div_instr_i;
  wire m1_piperun_masked_no2;
  wire m1_raw_valid_reg;
  wire m1_raw_valid_reg_0;
  wire \m2_PC_i_reg[0] ;
  wire m2_allow_dready;
  wire m2_dlmb_drop_request;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;

  assign lopt_1 = \<const0> ;
  assign m1_raw_valid_reg = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'h0000E222)) 
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_i_1 
       (.I0(\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ),
        .I1(m1_raw_valid_reg),
        .I2(D[0]),
        .I3(m1_databus_access),
        .I4(\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ),
        .O(\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ));
  LUT6 #(
    .INIT(64'h08000800080F0800)) 
    \Use_DAXI.M_AXI_DP_AWVALID_unmasked_i_1 
       (.I0(\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ),
        .I1(m1_databus_access),
        .I2(\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ),
        .I3(m1_raw_valid_reg),
        .I4(\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ),
        .I5(M_AXI_DP_AWREADY),
        .O(m1_databus_write_from_m0_reg));
  LUT6 #(
    .INIT(64'h08000800080F0800)) 
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_i_1 
       (.I0(\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ),
        .I1(m1_databus_access),
        .I2(\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ),
        .I3(m1_raw_valid_reg),
        .I4(\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ),
        .I5(M_AXI_DP_WREADY),
        .O(m1_databus_write_from_m0_reg_0));
  LUT4 #(
    .INIT(16'h8B88)) 
    \Use_DAXI.m2_active_access_unmasked_i_1 
       (.I0(m1_databus_access),
        .I1(m1_raw_valid_reg),
        .I2(m2_dlmb_drop_request),
        .I3(\Use_DAXI.m2_active_access_unmasked_reg ),
        .O(m1_databus_access_from_m0_reg));
  LUT4 #(
    .INIT(16'h000E)) 
    \Use_DLMB.m1_dlmb_issued_i_1 
       (.I0(m1_dlmb_issued),
        .I1(D[1]),
        .I2(m1_raw_valid_reg),
        .I3(sync_reset),
        .O(\Use_DLMB.m1_dlmb_issued_reg ));
  LUT4 #(
    .INIT(16'hB888)) 
    \Use_DLMB.m2_allow_dready_i_1 
       (.I0(D[1]),
        .I1(m1_raw_valid_reg),
        .I2(DWait),
        .I3(m2_allow_dready),
        .O(m1_databus_addr_from_m0_reg));
  LUT6 #(
    .INIT(64'hEFEFEFE0E0E0E0E0)) 
    \Using_FPGA.Native_i_1__127 
       (.I0(\Using_FPGA.Native_1 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Using_FPGA.Native_3 ),
        .I4(m1_raw_valid_reg),
        .I5(\Using_FPGA.Native_4 ),
        .O(WB_Div_Zero_Overflow_reg));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__131 
       (.I0(\Using_FPGA.Native_5 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_6 ),
        .I3(m1_raw_valid_reg),
        .I4(\Using_FPGA.Native_7 ),
        .O(wb_exception_from_m3_reg_rep__0_0));
  LUT4 #(
    .INIT(16'hF404)) 
    \Using_FPGA.Native_i_1__39 
       (.I0(m1_raw_valid_reg),
        .I1(m1_is_div_instr_i),
        .I2(in0),
        .I3(m0_is_div_instr_i),
        .O(D_0));
  LUT4 #(
    .INIT(16'hF404)) 
    \Using_FPGA.Native_i_1__40 
       (.I0(m1_raw_valid_reg),
        .I1(m1_gpr_write_dbg),
        .I2(in0),
        .I3(m0_gpr_write_dbg),
        .O(D_1));
  LUT4 #(
    .INIT(16'hF404)) 
    \Using_FPGA.Native_i_1__41 
       (.I0(m1_raw_valid_reg),
        .I1(m1_gpr_write),
        .I2(in0),
        .I3(m0_gpr_write),
        .O(D_2));
  LUT5 #(
    .INIT(32'h000000E0)) 
    m1_dead_valid_hold_i_1
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m1_dead_valid_hold),
        .I2(\m2_PC_i_reg[0] ),
        .I3(m1_raw_valid_reg),
        .I4(sync_reset),
        .O(wb_exception_from_m3_reg_rep__0));
  LUT5 #(
    .INIT(32'h0000C5C0)) 
    m1_raw_valid_i_1
       (.I0(m1_raw_valid_reg),
        .I1(A_N201_out),
        .I2(in0),
        .I3(\m2_PC_i_reg[0] ),
        .I4(sync_reset),
        .O(m1_raw_valid_reg_0));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_197
   (m1_piperun_masked_no2,
    m1_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output m1_piperun_masked_no2;
  input m1_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire m1_piperun_masked_no1;
  wire m1_piperun_masked_no2;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign m1_piperun_masked_no2 = lopt;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_199
   (m1_piperun_masked_no1,
    m1_piperun_raw,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m1_piperun_masked_no1;
  input m1_piperun_raw;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire m1_piperun_masked_no1;
  wire m1_piperun_raw;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(m1_piperun_raw),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,m1_piperun_masked_no1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_201
   (m0_piperun_raw,
    \Using_FPGA.Native_0 ,
    m1_dead_valid_hold,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    lopt,
    lopt_1,
    lopt_2);
  output m0_piperun_raw;
  input [0:0]\Using_FPGA.Native_0 ;
  input m1_dead_valid_hold;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire A_N207_out;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire m0_piperun_raw;
  wire m1_dead_valid_hold;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = A_N207_out;
  assign m0_piperun_raw = lopt;
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.Native_i_1__16 
       (.I0(m1_dead_valid_hold),
        .I1(\Using_FPGA.Native_1 ),
        .I2(\Using_FPGA.Native_2 ),
        .O(A_N207_out));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_203
   (\Using_FPGA.Native_0 ,
    m0_raw_valid_reg,
    wb_exception_from_m3_reg_rep__0,
    D,
    D_0,
    WB_Div_Zero_Overflow_reg,
    wb_exception_from_m3_reg_rep__0_0,
    m0_piperun_masked_no4,
    m0_raw_valid_reg_0,
    \Using_FPGA.Native_1 ,
    m0_raw_valid_reg_1,
    sync_reset,
    \Using_FPGA.Native_2 ,
    m0_dead_valid_hold,
    m0_gpr_write_dbg,
    ex_gpr_write_dbg,
    m0_gpr_write,
    ex_gpr_write,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native_0 ;
  output m0_raw_valid_reg;
  output wb_exception_from_m3_reg_rep__0;
  output D;
  output D_0;
  output WB_Div_Zero_Overflow_reg;
  output wb_exception_from_m3_reg_rep__0_0;
  input m0_piperun_masked_no4;
  input m0_raw_valid_reg_0;
  input [0:0]\Using_FPGA.Native_1 ;
  input m0_raw_valid_reg_1;
  input sync_reset;
  input \Using_FPGA.Native_2 ;
  input m0_dead_valid_hold;
  input m0_gpr_write_dbg;
  input ex_gpr_write_dbg;
  input m0_gpr_write;
  input ex_gpr_write;
  input \Using_FPGA.Native_3 ;
  input [0:0]\Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire D;
  wire D_0;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire [0:0]\Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire WB_Div_Zero_Overflow_reg;
  wire ex_gpr_write;
  wire ex_gpr_write_dbg;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire m0_dead_valid_hold;
  wire m0_gpr_write;
  wire m0_gpr_write_dbg;
  wire m0_piperun_masked_no4;
  wire m0_raw_valid_reg;
  wire m0_raw_valid_reg_0;
  wire m0_raw_valid_reg_1;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(m0_piperun_masked_no4),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,\Using_FPGA.Native_0 }),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
  LUT6 #(
    .INIT(64'hEFEFEFE0E0E0E0E0)) 
    \Using_FPGA.Native_i_1__128 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\Using_FPGA.Native_5 ),
        .I4(\Using_FPGA.Native_0 ),
        .I5(\Using_FPGA.Native_6 ),
        .O(WB_Div_Zero_Overflow_reg));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__130 
       (.I0(\Using_FPGA.Native_7 ),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\Using_FPGA.Native_8 ),
        .I3(\Using_FPGA.Native_0 ),
        .I4(\Using_FPGA.Native_9 ),
        .O(wb_exception_from_m3_reg_rep__0_0));
  LUT4 #(
    .INIT(16'hF404)) 
    \Using_FPGA.Native_i_1__37 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m0_gpr_write_dbg),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ex_gpr_write_dbg),
        .O(D));
  LUT4 #(
    .INIT(16'hF404)) 
    \Using_FPGA.Native_i_1__38 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m0_gpr_write),
        .I2(\Using_FPGA.Native_1 ),
        .I3(ex_gpr_write),
        .O(D_0));
  LUT5 #(
    .INIT(32'h000000E0)) 
    m0_dead_valid_hold_i_1
       (.I0(\Using_FPGA.Native_2 ),
        .I1(m0_dead_valid_hold),
        .I2(m0_raw_valid_reg_1),
        .I3(\Using_FPGA.Native_0 ),
        .I4(sync_reset),
        .O(wb_exception_from_m3_reg_rep__0));
  LUT5 #(
    .INIT(32'h00003530)) 
    m0_raw_valid_i_1
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m0_raw_valid_reg_0),
        .I2(\Using_FPGA.Native_1 ),
        .I3(m0_raw_valid_reg_1),
        .I4(sync_reset),
        .O(m0_raw_valid_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_205
   (m0_piperun_masked_no4,
    m0_piperun_masked_no3,
    lopt,
    lopt_1,
    lopt_2);
  output m0_piperun_masked_no4;
  input m0_piperun_masked_no3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire m0_piperun_masked_no3;
  wire m0_piperun_masked_no4;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign m0_piperun_masked_no4 = lopt;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_207
   (m0_piperun_masked_no3,
    m0_piperun_masked_no2,
    lopt,
    lopt_1,
    lopt_2);
  output m0_piperun_masked_no3;
  input m0_piperun_masked_no2;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire m0_piperun_masked_no2;
  wire m0_piperun_masked_no3;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign m0_piperun_masked_no3 = lopt;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_209
   (m0_piperun_masked_no2,
    m0_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output m0_piperun_masked_no2;
  input m0_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire m0_piperun_masked_no1;
  wire m0_piperun_masked_no2;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign m0_piperun_masked_no2 = lopt;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_21
   (carry_3,
    SRL16_Sel_3,
    carry_4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_3;
  input SRL16_Sel_3;
  input carry_4;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire SRL16_Sel_3;
  wire carry_3;
  wire carry_4;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_4),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_3}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,SRL16_Sel_3}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_211
   (m0_piperun_masked_no1,
    \Using_FPGA.Native_0 ,
    m0_piperun_raw,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m0_piperun_masked_no1;
  input \Using_FPGA.Native_0 ;
  input m0_piperun_raw;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire m0_piperun_masked_no1;
  wire m0_piperun_raw;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(m0_piperun_raw),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,m0_piperun_masked_no1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_213
   (\Serial_Dbg_Intf.if_debug_ready_i_reg ,
    \Use_ILMB.if4_ILMB_Data_Strobe_i_reg ,
    if4_piperun_masked_no4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input \Use_ILMB.if4_ILMB_Data_Strobe_i_reg ;
  input if4_piperun_masked_no4;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire \Use_ILMB.if4_ILMB_Data_Strobe_i_reg ;
  wire if4_piperun_masked_no4;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(if4_piperun_masked_no4),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,\Serial_Dbg_Intf.if_debug_ready_i_reg }),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Use_ILMB.if4_ILMB_Data_Strobe_i_reg }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_215
   (if4_piperun_masked_no2,
    if4_piperun_masked_no1,
    lopt,
    lopt_1);
  output if4_piperun_masked_no2;
  input if4_piperun_masked_no1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire if4_piperun_masked_no1;
  wire if4_piperun_masked_no2;

  assign if4_piperun_masked_no2 = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_217
   (if4_piperun_masked_no1,
    if4_ready,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output if4_piperun_masked_no1;
  input if4_ready;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire if4_piperun_masked_no1;
  wire if4_ready;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_7  = lopt_6;
  assign lopt = \^lopt_1 ;
  assign lopt_2 = \^lopt_3 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_8 = lopt_7;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(if4_ready),
        .CO({\^lopt_6 ,\^lopt_3 ,\^lopt_1 ,if4_piperun_masked_no1}),
        .CYINIT(1'b0),
        .DI({\^lopt_7 ,\^lopt_4 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_5 ,\^lopt_2 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_219
   (if4_piperun_masked_no4,
    if4_piperun_masked_no3,
    lopt,
    lopt_1,
    lopt_2);
  output if4_piperun_masked_no4;
  input if4_piperun_masked_no3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire if4_piperun_masked_no3;
  wire if4_piperun_masked_no4;

  assign if4_piperun_masked_no4 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_221
   (if4_piperun_masked_no3,
    \Using_FPGA.Native_0 ,
    if4_piperun_masked_no2,
    lopt,
    lopt_1);
  output if4_piperun_masked_no3;
  input \Using_FPGA.Native_0 ;
  input if4_piperun_masked_no2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire if4_piperun_masked_no2;
  wire if4_piperun_masked_no3;

  assign if4_piperun_masked_no3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_223
   (if3_piperun_masked_no1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output if3_piperun_masked_no1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire if3_piperun_masked_no1;

  assign if3_piperun_masked_no1 = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_225
   (\Using_FPGA.Native_0 ,
    \Use_Async_Reset.sync_reset_reg ,
    \Use_Async_Reset.sync_reset_reg_0 ,
    if4_dead_fetch_hold_reg,
    if3_piperun_masked_no3,
    \Use_ILMB.if3_iready_hold_reg ,
    sync_reset,
    \Use_ILMB.if3_potential_bubble_reg ,
    if3_potential_bubble,
    D,
    if3_ilmb_iready,
    if4_dead_fetch_hold_reg_0,
    if4_dead_fetch_hold_reg_1,
    kill_fetch,
    if4_dead_fetch_hold_reg_2,
    if4_dead_fetch_hold_reg_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native_0 ;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Use_Async_Reset.sync_reset_reg_0 ;
  output if4_dead_fetch_hold_reg;
  input if3_piperun_masked_no3;
  input \Use_ILMB.if3_iready_hold_reg ;
  input sync_reset;
  input \Use_ILMB.if3_potential_bubble_reg ;
  input if3_potential_bubble;
  input [0:0]D;
  input if3_ilmb_iready;
  input if4_dead_fetch_hold_reg_0;
  input if4_dead_fetch_hold_reg_1;
  input kill_fetch;
  input if4_dead_fetch_hold_reg_2;
  input if4_dead_fetch_hold_reg_3;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_Async_Reset.sync_reset_reg_0 ;
  wire \Use_ILMB.if3_iready_hold_reg ;
  wire \Use_ILMB.if3_potential_bubble_reg ;
  wire \Using_FPGA.Native_0 ;
  wire if3_ilmb_iready;
  wire if3_piperun_masked_no3;
  wire if3_potential_bubble;
  wire if4_dead_fetch_hold;
  wire if4_dead_fetch_hold_reg;
  wire if4_dead_fetch_hold_reg_0;
  wire if4_dead_fetch_hold_reg_1;
  wire if4_dead_fetch_hold_reg_2;
  wire if4_dead_fetch_hold_reg_3;
  wire kill_fetch;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire sync_reset;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT4 #(
    .INIT(16'h2202)) 
    \Use_ILMB.if3_iready_hold_i_1 
       (.I0(\Use_ILMB.if3_iready_hold_reg ),
        .I1(sync_reset),
        .I2(\Using_FPGA.Native_0 ),
        .I3(\Use_ILMB.if3_potential_bubble_reg ),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT6 #(
    .INIT(64'h1011101010101010)) 
    \Use_ILMB.if3_potential_bubble_i_1 
       (.I0(sync_reset),
        .I1(\Using_FPGA.Native_0 ),
        .I2(if3_potential_bubble),
        .I3(\Use_ILMB.if3_potential_bubble_reg ),
        .I4(D),
        .I5(if3_ilmb_iready),
        .O(\Use_Async_Reset.sync_reset_reg_0 ));
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(if3_piperun_masked_no3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,\Using_FPGA.Native_0 }),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
  LUT6 #(
    .INIT(64'h00000000FFEACCEA)) 
    if4_dead_fetch_hold_i_1
       (.I0(if4_dead_fetch_hold_reg_1),
        .I1(kill_fetch),
        .I2(if4_dead_fetch_hold_reg_2),
        .I3(\Using_FPGA.Native_0 ),
        .I4(if4_dead_fetch_hold_reg_3),
        .I5(if4_dead_fetch_hold),
        .O(if4_dead_fetch_hold_reg));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    if4_dead_fetch_hold_i_2
       (.I0(sync_reset),
        .I1(\Using_FPGA.Native_0 ),
        .I2(if4_dead_fetch_hold_reg_0),
        .O(if4_dead_fetch_hold));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_227
   (if3_piperun_masked_no3,
    if4_ibus_access_i_reg,
    if3_piperun_masked_no2,
    lopt,
    lopt_1);
  output if3_piperun_masked_no3;
  input if4_ibus_access_i_reg;
  input if3_piperun_masked_no2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire if3_piperun_masked_no2;
  wire if3_piperun_masked_no3;
  wire if4_ibus_access_i_reg;

  assign if3_piperun_masked_no3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_229
   (if3_piperun_masked_no2,
    if3_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output if3_piperun_masked_no2;
  input if3_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire if3_piperun_masked_no1;
  wire if3_piperun_masked_no2;

  assign if3_piperun_masked_no2 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_23
   (carry_2,
    SRL16_Sel_2,
    carry_3,
    lopt,
    lopt_1);
  output carry_2;
  input SRL16_Sel_2;
  input carry_3;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_2;
  wire carry_2;
  wire carry_3;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_231
   (if2_piperun_masked_no1,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output if2_piperun_masked_no1;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire if2_piperun_masked_no1;

  assign if2_piperun_masked_no1 = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_233
   (\Using_FPGA.Native_0 ,
    if2_ibus_first_cycle_raw_reg,
    \Use_ILMB.if2_ilmb_issued_reg ,
    if3_dead_fetch_hold_reg,
    if2_piperun_masked_no2,
    \Use_ILMB.if2_ilmb_issued_reg_0 ,
    IWAIT,
    if3_allow_iready,
    if2_ilmb_issued,
    sync_reset,
    if3_dead_fetch_hold_reg_0,
    if3_dead_fetch_hold_reg_1,
    kill_fetch,
    if3_dead_fetch_hold_reg_2,
    if3_dead_fetch_hold_reg_3,
    lopt,
    lopt_1,
    lopt_2);
  output \Using_FPGA.Native_0 ;
  output if2_ibus_first_cycle_raw_reg;
  output \Use_ILMB.if2_ilmb_issued_reg ;
  output if3_dead_fetch_hold_reg;
  input if2_piperun_masked_no2;
  input \Use_ILMB.if2_ilmb_issued_reg_0 ;
  input IWAIT;
  input if3_allow_iready;
  input if2_ilmb_issued;
  input sync_reset;
  input if3_dead_fetch_hold_reg_0;
  input if3_dead_fetch_hold_reg_1;
  input kill_fetch;
  input if3_dead_fetch_hold_reg_2;
  input if3_dead_fetch_hold_reg_3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire IWAIT;
  wire \Use_ILMB.if2_ilmb_issued_reg ;
  wire \Use_ILMB.if2_ilmb_issued_reg_0 ;
  wire \Using_FPGA.Native_0 ;
  wire if2_ibus_first_cycle_raw_reg;
  wire if2_ilmb_issued;
  wire if2_piperun_masked_no2;
  wire if3_allow_iready;
  wire if3_dead_fetch_hold;
  wire if3_dead_fetch_hold_reg;
  wire if3_dead_fetch_hold_reg_0;
  wire if3_dead_fetch_hold_reg_1;
  wire if3_dead_fetch_hold_reg_2;
  wire if3_dead_fetch_hold_reg_3;
  wire kill_fetch;
  wire sync_reset;

  assign \Using_FPGA.Native_0  = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT4 #(
    .INIT(16'h000E)) 
    \Use_ILMB.if2_ilmb_issued_i_1 
       (.I0(if2_ilmb_issued),
        .I1(\Use_ILMB.if2_ilmb_issued_reg_0 ),
        .I2(\Using_FPGA.Native_0 ),
        .I3(sync_reset),
        .O(\Use_ILMB.if2_ilmb_issued_reg ));
  LUT4 #(
    .INIT(16'hB888)) 
    \Use_ILMB.if3_allow_iready_i_1 
       (.I0(\Use_ILMB.if2_ilmb_issued_reg_0 ),
        .I1(\Using_FPGA.Native_0 ),
        .I2(IWAIT),
        .I3(if3_allow_iready),
        .O(if2_ibus_first_cycle_raw_reg));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h00000000FFEACCEA)) 
    if3_dead_fetch_hold_i_1
       (.I0(if3_dead_fetch_hold_reg_1),
        .I1(kill_fetch),
        .I2(if3_dead_fetch_hold_reg_2),
        .I3(\Using_FPGA.Native_0 ),
        .I4(if3_dead_fetch_hold_reg_3),
        .I5(if3_dead_fetch_hold),
        .O(if3_dead_fetch_hold_reg));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    if3_dead_fetch_hold_i_2
       (.I0(sync_reset),
        .I1(\Using_FPGA.Native_0 ),
        .I2(if3_dead_fetch_hold_reg_0),
        .O(if3_dead_fetch_hold));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_235
   (if2_piperun_masked_no2,
    if3_ibus_access_i_reg,
    if2_piperun_masked_no1,
    lopt,
    lopt_1);
  output if2_piperun_masked_no2;
  input if3_ibus_access_i_reg;
  input if2_piperun_masked_no1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire if2_piperun_masked_no1;
  wire if2_piperun_masked_no2;
  wire if3_ibus_access_i_reg;

  assign if2_piperun_masked_no2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_237
   (if2_raw_valid_reg,
    if2_dead_fetch_hold_reg,
    if2_dead_fetch_hold_reg_0,
    if2_dead_fetch_hold_reg_1,
    sync_reset,
    if2_dead_fetch_hold_reg_2,
    if2_dead_fetch_hold_reg_3,
    kill_fetch_mmu,
    if2_dead_fetch_hold_reg_4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output if2_raw_valid_reg;
  output if2_dead_fetch_hold_reg;
  input if2_dead_fetch_hold_reg_0;
  input if2_dead_fetch_hold_reg_1;
  input sync_reset;
  input if2_dead_fetch_hold_reg_2;
  input if2_dead_fetch_hold_reg_3;
  input kill_fetch_mmu;
  input if2_dead_fetch_hold_reg_4;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire if2_dead_fetch_hold;
  wire if2_dead_fetch_hold_reg;
  wire if2_dead_fetch_hold_reg_0;
  wire if2_dead_fetch_hold_reg_1;
  wire if2_dead_fetch_hold_reg_2;
  wire if2_dead_fetch_hold_reg_3;
  wire if2_dead_fetch_hold_reg_4;
  wire if2_raw_valid_reg;
  wire kill_fetch_mmu;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire sync_reset;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(if2_dead_fetch_hold_reg_1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,if2_raw_valid_reg}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,if2_dead_fetch_hold_reg_0}));
  LUT6 #(
    .INIT(64'h00000000FEFEFECE)) 
    if2_dead_fetch_hold_i_1
       (.I0(if2_dead_fetch_hold_reg_2),
        .I1(if2_dead_fetch_hold_reg_3),
        .I2(if2_raw_valid_reg),
        .I3(kill_fetch_mmu),
        .I4(if2_dead_fetch_hold_reg_4),
        .I5(if2_dead_fetch_hold),
        .O(if2_dead_fetch_hold_reg));
  LUT3 #(
    .INIT(8'hBA)) 
    if2_dead_fetch_hold_i_3
       (.I0(sync_reset),
        .I1(if2_raw_valid_reg),
        .I2(if2_dead_fetch_hold_reg_1),
        .O(if2_dead_fetch_hold));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_239
   (if2_raw_valid_reg,
    if0_raw_valid_reg,
    lopt,
    lopt_1,
    lopt_2);
  output if2_raw_valid_reg;
  input if0_raw_valid_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire if0_raw_valid_reg;
  wire if2_raw_valid_reg;

  assign if2_raw_valid_reg = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_241
   (ex_piperun_raw,
    in0,
    \Using_FPGA.Native_0 ,
    m0_dead_valid_hold,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_raw;
  input in0;
  input \Using_FPGA.Native_0 ;
  input m0_dead_valid_hold;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__103_n_0 ;
  wire ex_piperun_raw;
  wire in0;
  wire m0_dead_valid_hold;

  assign ex_piperun_raw = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.Native_i_1__103_n_0 ;
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.Native_i_1__103 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(m0_dead_valid_hold),
        .I2(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_i_1__103_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_243
   (ex_raw_valid_reg,
    \Using_FPGA.Native_0 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ,
    D,
    \ex_gpr_write_addr_reg[3] ,
    \ex_gpr_write_addr_reg[2] ,
    wb_exception_from_m3_reg_rep,
    D_0,
    \Use_Async_Reset.sync_reset_reg ,
    ex_raw_valid_reg_0,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    wb_exception_from_m3_reg_rep__0,
    \Using_FPGA.Native_4 ,
    D_1,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    WB_Div_Zero_Overflow_reg,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \m0_PC_i_reg[0] ,
    ex_piperun_masked_no6,
    ex_jump_hold,
    ex_jump,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \m0_exception_raw_kind_reg[30] ,
    m0_exception_raw_kind,
    sync_reset,
    m0_exception_from_ex,
    in0,
    of_clear_msr_bip_hold_reg,
    ex_gpr_write_addr,
    of_clear_msr_bip_hold_reg_0,
    of_set_msr_ie_hold_reg,
    of_clear_msr_bip_hold_reg_1,
    of_set_msr_ee_hold_reg,
    \Using_FPGA.Native_15 ,
    of_set_msr_ie,
    of_set_msr_ie_hold_reg_0,
    \Using_FPGA.Native_16 ,
    m0_is_div_instr_i,
    ex_reservation,
    ex_reservation_reg,
    ex_reservation_reg_0,
    wb_exception_taken,
    \Using_FPGA.Native_17 ,
    ex_dead_valid_hold,
    \Using_FPGA.Native_18 ,
    wb_msr_clear_bip,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    wb_MSR_i,
    ex_MSR_i,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    EX_CarryIn,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output ex_raw_valid_reg;
  output \Using_FPGA.Native_0 ;
  output \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  output D;
  output \ex_gpr_write_addr_reg[3] ;
  output \ex_gpr_write_addr_reg[2] ;
  output wb_exception_from_m3_reg_rep;
  output D_0;
  output \Use_Async_Reset.sync_reset_reg ;
  output ex_raw_valid_reg_0;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output wb_exception_from_m3_reg_rep__0;
  output \Using_FPGA.Native_4 ;
  output D_1;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output WB_Div_Zero_Overflow_reg;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  input \m0_PC_i_reg[0] ;
  input ex_piperun_masked_no6;
  input ex_jump_hold;
  input ex_jump;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \m0_exception_raw_kind_reg[30] ;
  input [0:0]m0_exception_raw_kind;
  input sync_reset;
  input m0_exception_from_ex;
  input in0;
  input of_clear_msr_bip_hold_reg;
  input [1:0]ex_gpr_write_addr;
  input of_clear_msr_bip_hold_reg_0;
  input of_set_msr_ie_hold_reg;
  input of_clear_msr_bip_hold_reg_1;
  input of_set_msr_ee_hold_reg;
  input \Using_FPGA.Native_15 ;
  input of_set_msr_ie;
  input of_set_msr_ie_hold_reg_0;
  input \Using_FPGA.Native_16 ;
  input m0_is_div_instr_i;
  input ex_reservation;
  input ex_reservation_reg;
  input ex_reservation_reg_0;
  input wb_exception_taken;
  input \Using_FPGA.Native_17 ;
  input ex_dead_valid_hold;
  input [2:0]\Using_FPGA.Native_18 ;
  input wb_msr_clear_bip;
  input [13:0]\Using_FPGA.Native_19 ;
  input \Using_FPGA.Native_20 ;
  input [10:0]wb_MSR_i;
  input [10:0]ex_MSR_i;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input EX_CarryIn;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire D;
  wire D_0;
  wire D_1;
  wire EX_CarryIn;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire [2:0]\Using_FPGA.Native_18 ;
  wire [13:0]\Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire WB_Div_Zero_Overflow_reg;
  wire [10:0]ex_MSR_i;
  wire ex_dead_valid_hold;
  wire [1:0]ex_gpr_write_addr;
  wire \ex_gpr_write_addr_reg[2] ;
  wire \ex_gpr_write_addr_reg[3] ;
  wire ex_jump;
  wire ex_jump_hold;
  wire ex_piperun_masked_no6;
  wire ex_raw_valid_reg;
  wire ex_raw_valid_reg_0;
  wire ex_reservation;
  wire ex_reservation_reg;
  wire ex_reservation_reg_0;
  wire in0;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \m0_PC_i_reg[0] ;
  wire m0_exception_from_ex;
  wire [0:0]m0_exception_raw_kind;
  wire \m0_exception_raw_kind_reg[30] ;
  wire m0_is_div_instr_i;
  wire of_clear_msr_bip_hold_reg;
  wire of_clear_msr_bip_hold_reg_0;
  wire of_clear_msr_bip_hold_reg_1;
  wire of_set_msr_ee_hold_reg;
  wire of_set_msr_ie;
  wire of_set_msr_ie_hold_reg;
  wire of_set_msr_ie_hold_reg_0;
  wire sync_reset;
  wire [10:0]wb_MSR_i;
  wire wb_exception_from_m3_reg_rep;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_taken;
  wire wb_msr_clear_bip;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(ex_piperun_masked_no6),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,ex_raw_valid_reg}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\m0_PC_i_reg[0] }));
  LUT6 #(
    .INIT(64'h2F202F2F2F202020)) 
    \Using_FPGA.Native_i_1__110 
       (.I0(\Using_FPGA.Native_18 [1]),
        .I1(wb_msr_clear_bip),
        .I2(\Using_FPGA.Native_15 ),
        .I3(\Using_FPGA.Native_19 [3]),
        .I4(ex_raw_valid_reg),
        .I5(\Using_FPGA.Native_20 ),
        .O(\Using_FPGA.Native_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__111 
       (.I0(wb_MSR_i[5]),
        .I1(\Using_FPGA.Native_17 ),
        .I2(\Using_FPGA.Native_19 [8]),
        .I3(ex_raw_valid_reg),
        .I4(ex_MSR_i[5]),
        .O(\Using_FPGA.Native_2 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__112 
       (.I0(wb_MSR_i[4]),
        .I1(\Using_FPGA.Native_17 ),
        .I2(\Using_FPGA.Native_19 [7]),
        .I3(ex_raw_valid_reg),
        .I4(ex_MSR_i[4]),
        .O(\Using_FPGA.Native_3 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__113 
       (.I0(\Using_FPGA.Native_21 ),
        .I1(\Using_FPGA.Native_17 ),
        .I2(\Using_FPGA.Native_19 [1]),
        .I3(ex_raw_valid_reg),
        .I4(\Using_FPGA.Native_22 ),
        .O(wb_exception_from_m3_reg_rep__0));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__114 
       (.I0(\Using_FPGA.Native_18 [0]),
        .I1(\Using_FPGA.Native_17 ),
        .I2(\Using_FPGA.Native_19 [2]),
        .I3(ex_raw_valid_reg),
        .I4(EX_CarryIn),
        .O(\Using_FPGA.Native_4 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__115 
       (.I0(wb_MSR_i[10]),
        .I1(\Using_FPGA.Native_15 ),
        .I2(\Using_FPGA.Native_19 [13]),
        .I3(ex_raw_valid_reg),
        .I4(ex_MSR_i[10]),
        .O(D_1));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__116 
       (.I0(wb_MSR_i[9]),
        .I1(\Using_FPGA.Native_15 ),
        .I2(\Using_FPGA.Native_19 [12]),
        .I3(ex_raw_valid_reg),
        .I4(ex_MSR_i[9]),
        .O(\Using_FPGA.Native_5 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__117 
       (.I0(wb_MSR_i[8]),
        .I1(\Using_FPGA.Native_15 ),
        .I2(\Using_FPGA.Native_19 [11]),
        .I3(ex_raw_valid_reg),
        .I4(ex_MSR_i[8]),
        .O(\Using_FPGA.Native_6 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__118 
       (.I0(wb_MSR_i[7]),
        .I1(\Using_FPGA.Native_15 ),
        .I2(\Using_FPGA.Native_19 [10]),
        .I3(ex_raw_valid_reg),
        .I4(ex_MSR_i[7]),
        .O(\Using_FPGA.Native_7 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__119 
       (.I0(wb_MSR_i[6]),
        .I1(\Using_FPGA.Native_15 ),
        .I2(\Using_FPGA.Native_19 [9]),
        .I3(ex_raw_valid_reg),
        .I4(ex_MSR_i[6]),
        .O(\Using_FPGA.Native_8 ));
  LUT6 #(
    .INIT(64'h0E000E000EFF0E00)) 
    \Using_FPGA.Native_i_1__12 
       (.I0(\Using_FPGA.Native_14 ),
        .I1(\Using_FPGA.Native_13 ),
        .I2(\m0_exception_raw_kind_reg[30] ),
        .I3(ex_raw_valid_reg),
        .I4(m0_exception_from_ex),
        .I5(in0),
        .O(D));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__120 
       (.I0(wb_MSR_i[3]),
        .I1(\Using_FPGA.Native_15 ),
        .I2(\Using_FPGA.Native_19 [6]),
        .I3(ex_raw_valid_reg),
        .I4(ex_MSR_i[3]),
        .O(\Using_FPGA.Native_9 ));
  LUT6 #(
    .INIT(64'hEFEFEFE0E0EFE0E0)) 
    \Using_FPGA.Native_i_1__121 
       (.I0(\Using_FPGA.Native_23 ),
        .I1(\Using_FPGA.Native_18 [2]),
        .I2(\Using_FPGA.Native_17 ),
        .I3(ex_raw_valid_reg),
        .I4(\Using_FPGA.Native_24 ),
        .I5(\Using_FPGA.Native_25 ),
        .O(WB_Div_Zero_Overflow_reg));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__122 
       (.I0(wb_MSR_i[2]),
        .I1(\Using_FPGA.Native_15 ),
        .I2(\Using_FPGA.Native_19 [5]),
        .I3(ex_raw_valid_reg),
        .I4(ex_MSR_i[2]),
        .O(\Using_FPGA.Native_10 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__123 
       (.I0(wb_MSR_i[1]),
        .I1(\Using_FPGA.Native_15 ),
        .I2(\Using_FPGA.Native_19 [4]),
        .I3(ex_raw_valid_reg),
        .I4(ex_MSR_i[1]),
        .O(\Using_FPGA.Native_11 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Using_FPGA.Native_i_1__124 
       (.I0(wb_MSR_i[0]),
        .I1(\Using_FPGA.Native_15 ),
        .I2(\Using_FPGA.Native_19 [0]),
        .I3(ex_raw_valid_reg),
        .I4(ex_MSR_i[0]),
        .O(\Using_FPGA.Native_12 ));
  LUT5 #(
    .INIT(32'h20202F20)) 
    \Using_FPGA.Native_i_1__20 
       (.I0(\Using_FPGA.Native_16 ),
        .I1(\m0_exception_raw_kind_reg[30] ),
        .I2(ex_raw_valid_reg),
        .I3(m0_is_div_instr_i),
        .I4(in0),
        .O(D_0));
  LUT3 #(
    .INIT(8'h54)) 
    \Using_FPGA.Native_i_2__15 
       (.I0(ex_raw_valid_reg),
        .I1(ex_jump_hold),
        .I2(ex_jump),
        .O(\Using_FPGA.Native_0 ));
  LUT5 #(
    .INIT(32'h00004440)) 
    ex_dead_valid_hold_i_1
       (.I0(ex_raw_valid_reg),
        .I1(\m0_PC_i_reg[0] ),
        .I2(\Using_FPGA.Native_17 ),
        .I3(ex_dead_valid_hold),
        .I4(sync_reset),
        .O(ex_raw_valid_reg_0));
  LUT6 #(
    .INIT(64'h0000000005444444)) 
    ex_reservation_i_1
       (.I0(sync_reset),
        .I1(ex_reservation),
        .I2(ex_reservation_reg),
        .I3(ex_reservation_reg_0),
        .I4(ex_raw_valid_reg),
        .I5(wb_exception_taken),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT6 #(
    .INIT(64'h0000000004FF0400)) 
    \m0_exception_raw_kind[30]_i_1 
       (.I0(\Using_FPGA.Native_13 ),
        .I1(\Using_FPGA.Native_14 ),
        .I2(\m0_exception_raw_kind_reg[30] ),
        .I3(ex_raw_valid_reg),
        .I4(m0_exception_raw_kind),
        .I5(sync_reset),
        .O(\Performance_Debug_Control.ex_dbg_pc_hit_i_reg ));
  LUT6 #(
    .INIT(64'h0000AAAA00000800)) 
    of_clear_msr_bip_hold_i_1
       (.I0(of_clear_msr_bip_hold_reg),
        .I1(ex_gpr_write_addr[0]),
        .I2(of_clear_msr_bip_hold_reg_0),
        .I3(ex_raw_valid_reg),
        .I4(of_set_msr_ie_hold_reg),
        .I5(of_clear_msr_bip_hold_reg_1),
        .O(\ex_gpr_write_addr_reg[3] ));
  LUT6 #(
    .INIT(64'h0000AAAA00000800)) 
    of_set_msr_ee_hold_i_1
       (.I0(of_clear_msr_bip_hold_reg),
        .I1(ex_gpr_write_addr[1]),
        .I2(of_clear_msr_bip_hold_reg_0),
        .I3(ex_raw_valid_reg),
        .I4(of_set_msr_ie_hold_reg),
        .I5(of_set_msr_ee_hold_reg),
        .O(\ex_gpr_write_addr_reg[2] ));
  LUT6 #(
    .INIT(64'h0011001100100000)) 
    of_set_msr_ie_hold_i_1
       (.I0(\Using_FPGA.Native_15 ),
        .I1(sync_reset),
        .I2(ex_raw_valid_reg),
        .I3(of_set_msr_ie_hold_reg),
        .I4(of_set_msr_ie),
        .I5(of_set_msr_ie_hold_reg_0),
        .O(wb_exception_from_m3_reg_rep));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_245
   (ex_piperun_masked_no6,
    ex_piperun_masked_no5,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_masked_no6;
  input ex_piperun_masked_no5;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire ex_piperun_masked_no5;
  wire ex_piperun_masked_no6;

  assign ex_piperun_masked_no6 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_247
   (ex_piperun_masked_no5,
    ex_piperun_masked_no4,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_masked_no5;
  input ex_piperun_masked_no4;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire ex_piperun_masked_no4;
  wire ex_piperun_masked_no5;

  assign ex_piperun_masked_no5 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_249
   (ex_piperun_masked_no4,
    ex_piperun_masked_no3,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_masked_no4;
  input ex_piperun_masked_no3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire ex_piperun_masked_no3;
  wire ex_piperun_masked_no4;

  assign ex_piperun_masked_no4 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_25
   (carry_1,
    SRL16_Sel_1,
    carry_2,
    lopt,
    lopt_1);
  output carry_1;
  input SRL16_Sel_1;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_1;
  wire carry_1;
  wire carry_2;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_251
   (ex_piperun_masked_no3,
    ex_piperun_masked_no2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output ex_piperun_masked_no3;
  input ex_piperun_masked_no2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire ex_piperun_masked_no2;
  wire ex_piperun_masked_no3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(ex_piperun_masked_no2),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,ex_piperun_masked_no3}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_253
   (ex_piperun_masked_no2,
    ex_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_masked_no2;
  input ex_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire ex_piperun_masked_no1;
  wire ex_piperun_masked_no2;

  assign ex_piperun_masked_no2 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_255
   (ex_piperun_masked_no1,
    \Using_FPGA.Native_0 ,
    ex_piperun_raw,
    lopt,
    lopt_1);
  output ex_piperun_masked_no1;
  input \Using_FPGA.Native_0 ;
  input ex_piperun_raw;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire ex_piperun_masked_no1;
  wire ex_piperun_raw;

  assign ex_piperun_masked_no1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_257
   (bp1_piperun_masked_no1,
    \if0_PC_i_reg[0] ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output bp1_piperun_masked_no1;
  input \if0_PC_i_reg[0] ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_i_1__22_n_0 ;
  wire bp1_piperun_masked_no1;
  wire \if0_PC_i_reg[0] ;

  assign bp1_piperun_masked_no1 = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.Native_i_1__22_n_0 ;
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__22 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(\Using_FPGA.Native_1 ),
        .O(\Using_FPGA.Native_i_1__22_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_259
   (E,
    bp1_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]E;
  input bp1_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]E;
  wire bp1_piperun_masked_no1;

  assign E = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_261
   (bp0_piperun_masked_no1,
    \bp1_PC_i_reg[0] ,
    E,
    lopt,
    lopt_1,
    lopt_2);
  output bp0_piperun_masked_no1;
  input \bp1_PC_i_reg[0] ;
  input [0:0]E;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [0:0]E;
  wire bp0_piperun_masked_no1;
  wire \bp1_PC_i_reg[0] ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(E),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,bp0_piperun_masked_no1}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:2],lopt_3,\bp1_PC_i_reg[0] }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_263
   (bp1_raw_valid_reg,
    bp1_dead_fetch_hold_bt,
    bp1_dead_fetch_hold_reg,
    bp0_piperun_masked_no1,
    sync_reset,
    E,
    bp1_dead_fetch_hold_reg_0,
    bp1_dead_fetch_hold_reg_1,
    kill_fetch_mmu,
    bp0_dead_fetch_hold,
    lopt,
    lopt_1,
    lopt_2);
  output bp1_raw_valid_reg;
  output bp1_dead_fetch_hold_bt;
  output bp1_dead_fetch_hold_reg;
  input bp0_piperun_masked_no1;
  input sync_reset;
  input [0:0]E;
  input bp1_dead_fetch_hold_reg_0;
  input bp1_dead_fetch_hold_reg_1;
  input kill_fetch_mmu;
  input bp0_dead_fetch_hold;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]E;
  wire bp0_dead_fetch_hold;
  wire bp0_piperun_masked_no1;
  wire bp1_dead_fetch_hold_bt;
  wire bp1_dead_fetch_hold_reg;
  wire bp1_dead_fetch_hold_reg_0;
  wire bp1_dead_fetch_hold_reg_1;
  wire bp1_raw_valid_reg;
  wire kill_fetch_mmu;
  wire sync_reset;

  assign bp1_raw_valid_reg = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h00000000FFEAF0EA)) 
    bp1_dead_fetch_hold_i_1
       (.I0(bp1_dead_fetch_hold_reg_0),
        .I1(bp1_dead_fetch_hold_reg_1),
        .I2(kill_fetch_mmu),
        .I3(bp1_raw_valid_reg),
        .I4(bp0_dead_fetch_hold),
        .I5(bp1_dead_fetch_hold_bt),
        .O(bp1_dead_fetch_hold_reg));
  LUT3 #(
    .INIT(8'hBA)) 
    bp1_dead_fetch_hold_i_2
       (.I0(sync_reset),
        .I1(bp1_raw_valid_reg),
        .I2(E),
        .O(bp1_dead_fetch_hold_bt));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_27
   (carry_0,
    SRL16_Sel_0,
    carry_1,
    lopt,
    lopt_1);
  output carry_0;
  input SRL16_Sel_0;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire SRL16_Sel_0;
  wire carry_0;
  wire carry_1;

  assign carry_0 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_29
   (Hit,
    single_Step_N_reg,
    carry_0,
    single_Step_N,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3 ,
    force_stop_i,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3_0 );
  output Hit;
  output single_Step_N_reg;
  input carry_0;
  input single_Step_N;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3 ;
  input force_stop_i;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3_0 ;

  wire Hit;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3_0 ;
  wire carry_0;
  wire force_stop_i;
  wire single_Step_N;
  wire single_Step_N_reg;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  LUT5 #(
    .INIT(32'hFFFFFF5D)) 
    \Performance_Debug_Control.ex_dbg_pc_hit_i_i_7 
       (.I0(single_Step_N),
        .I1(Hit),
        .I2(\Performance_Debug_Control.ex_dbg_pc_hit_i_i_3 ),
        .I3(force_stop_i),
        .I4(\Performance_Debug_Control.ex_dbg_pc_hit_i_i_3_0 ),
        .O(single_Step_N_reg));
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_0),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],Hit}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_305
   (of_m3_stall_conflict,
    of_read_m3_write_op_conflict,
    m3_complete_in_later_stage,
    m3_div_stall,
    lopt,
    lopt_1,
    lopt_2);
  output of_m3_stall_conflict;
  input of_read_m3_write_op_conflict;
  input m3_complete_in_later_stage;
  input m3_div_stall;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.Native_i_1__105_n_0 ;
  wire m3_complete_in_later_stage;
  wire m3_div_stall;
  wire of_m3_stall_conflict;
  wire of_read_m3_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.Native_i_1__105_n_0 ;
  assign of_m3_stall_conflict = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__105 
       (.I0(m3_complete_in_later_stage),
        .I1(m3_div_stall),
        .O(\Using_FPGA.Native_i_1__105_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_307
   (of_read_m3_write_op_conflict,
    A0_out,
    of_m3_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m3_write_op_conflict;
  input A0_out;
  input of_m3_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A0_out;
  wire of_m3_addr_conflict;
  wire of_read_m3_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_m3_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_308
   (carry_chain_1,
    S_3,
    of_m3_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S_3;
  input of_m3_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_3;
  wire carry_chain_1;
  wire of_m3_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_309
   (of_m3_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output of_m3_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire of_m3_addr_conflict;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_chain_1),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,of_m3_addr_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_311
   (m2_complete_in_later_stage_reg,
    m2_complete_in_later_stage,
    of_read_m2_write_op_conflict,
    of_m2_no_stall_conflict,
    of_m3_stall_conflict,
    of_m1_no_stall_conflict,
    And_OUT,
    of_m0_no_stall_conflict,
    lopt,
    lopt_1);
  output m2_complete_in_later_stage_reg;
  input m2_complete_in_later_stage;
  input of_read_m2_write_op_conflict;
  input of_m2_no_stall_conflict;
  input of_m3_stall_conflict;
  input of_m1_no_stall_conflict;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire And_OUT;
  wire m2_complete_in_later_stage;
  wire m2_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_no_stall_conflict;
  wire of_m2_no_stall_conflict;
  wire of_m2_stall_conflict;
  wire of_m3_stall_conflict;
  wire of_read_m2_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m2_stall_conflict = lopt;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFF45)) 
    \Using_FPGA.Native_i_1__216 
       (.I0(of_m2_stall_conflict),
        .I1(of_m2_no_stall_conflict),
        .I2(of_m3_stall_conflict),
        .I3(of_m1_no_stall_conflict),
        .I4(And_OUT),
        .I5(of_m0_no_stall_conflict),
        .O(m2_complete_in_later_stage_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_314
   (of_read_m2_write_op_conflict,
    A1_out,
    of_m2_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m2_write_op_conflict;
  input A1_out;
  input of_m2_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A1_out;
  wire of_m2_addr_conflict;
  wire of_read_m2_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_m2_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_316
   (carry_chain_1,
    S_2,
    of_m2_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S_2;
  input of_m2_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_2;
  wire carry_chain_1;
  wire of_m2_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_317
   (of_m2_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output of_m2_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire of_m2_addr_conflict;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_chain_1),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,of_m2_addr_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_319
   (of_m1_stall_conflict,
    m1_m2_complete_in_later_stage,
    of_read_m1_write_op_conflict,
    lopt,
    lopt_1);
  output of_m1_stall_conflict;
  input m1_m2_complete_in_later_stage;
  input of_read_m1_write_op_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire m1_m2_complete_in_later_stage;
  wire of_m1_stall_conflict;
  wire of_read_m1_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m1_stall_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_322
   (of_read_m1_write_op_conflict,
    A2_out,
    of_m1_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m1_write_op_conflict;
  input A2_out;
  input of_m1_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A2_out;
  wire of_m1_addr_conflict;
  wire of_read_m1_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_m1_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_324
   (carry_chain_1,
    S_1,
    of_m1_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S_1;
  input of_m1_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_1;
  wire carry_chain_1;
  wire of_m1_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_325
   (of_m1_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output of_m1_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire of_m1_addr_conflict;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_chain_1),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,of_m1_addr_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_327
   (m0_complete_in_later_stage_reg,
    m0_complete_in_later_stage,
    of_read_m0_write_op_conflict,
    of_op3_ex_stall,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m1_stall_conflict,
    lopt,
    lopt_1);
  output m0_complete_in_later_stage_reg;
  input m0_complete_in_later_stage;
  input of_read_m0_write_op_conflict;
  input of_op3_ex_stall;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m1_stall_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire And_OUT;
  wire m0_complete_in_later_stage;
  wire m0_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m0_stall_conflict;
  wire of_m1_stall_conflict;
  wire of_op3_ex_stall;
  wire of_read_m0_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m0_stall_conflict = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'h31303131)) 
    \Using_FPGA.Native_i_1__215 
       (.I0(of_m0_stall_conflict),
        .I1(of_op3_ex_stall),
        .I2(And_OUT),
        .I3(of_m0_no_stall_conflict),
        .I4(of_m1_stall_conflict),
        .O(m0_complete_in_later_stage_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_330
   (of_read_m0_write_op_conflict,
    A3_out,
    of_m0_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m0_write_op_conflict;
  input A3_out;
  input of_m0_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A3_out;
  wire of_m0_addr_conflict;
  wire of_read_m0_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_m0_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_332
   (carry_chain_1,
    S_0,
    of_m0_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S_0;
  input of_m0_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_0;
  wire carry_chain_1;
  wire of_m0_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_333
   (of_m0_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output of_m0_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire of_m0_addr_conflict;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_chain_1),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,of_m0_addr_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_335
   (of_op3_ex_stall,
    ex_complete_in_later_stage,
    of_read_ex_write_op_conflict,
    lopt,
    lopt_1);
  output of_op3_ex_stall;
  input ex_complete_in_later_stage;
  input of_read_ex_write_op_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire ex_complete_in_later_stage;
  wire of_op3_ex_stall;
  wire of_read_ex_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_op3_ex_stall = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_338
   (of_read_ex_write_op_conflict,
    A4_out,
    of_ex_addr_conflict,
    lopt,
    lopt_1);
  output of_read_ex_write_op_conflict;
  input A4_out;
  input of_ex_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A4_out;
  wire of_ex_addr_conflict;
  wire of_read_ex_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_ex_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_340
   (carry_chain_1,
    S,
    of_ex_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S;
  input of_ex_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S;
  wire carry_chain_1;
  wire of_ex_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_341
   (of_ex_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output of_ex_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire of_ex_addr_conflict;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_chain_1),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,of_ex_addr_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_343
   (of_m3_use_conflict,
    S_4,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m3_use_conflict;
  input S_4;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_4;
  wire \Using_FPGA.Native_0 ;
  wire of_m3_use_conflict;

  assign lopt_1 = \<const1> ;
  assign of_m3_use_conflict = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_345
   (\cur_data_i_reg[26] ,
    OF_Use_Op_B,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input OF_Use_Op_B;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire OF_Use_Op_B;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;

  assign \cur_data_i_reg[26]  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_347
   (\cur_data_i_reg[15] ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \cur_data_i_reg[15] ;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \cur_data_i_reg[15] ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,\cur_data_i_reg[15] }),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,Q}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_349
   (of_m2_use_conflict,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output of_m2_use_conflict;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_m2_use_conflict;

  assign lopt_1 = \<const1> ;
  assign of_m2_use_conflict = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_351
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \cur_data_i_reg[26] ;

  assign \cur_data_i_reg[26]  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_353
   (\cur_data_i_reg[15] ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \cur_data_i_reg[15] ;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \cur_data_i_reg[15] ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,\cur_data_i_reg[15] }),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,Q}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_355
   (of_m1_use_conflict,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output of_m1_use_conflict;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_m1_use_conflict;

  assign lopt_1 = \<const1> ;
  assign of_m1_use_conflict = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_357
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \cur_data_i_reg[26] ;

  assign \cur_data_i_reg[26]  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_359
   (\cur_data_i_reg[15] ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \cur_data_i_reg[15] ;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \cur_data_i_reg[15] ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,\cur_data_i_reg[15] }),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,Q}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_361
   (of_m0_use_conflict,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output of_m0_use_conflict;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_m0_use_conflict;

  assign lopt_1 = \<const1> ;
  assign of_m0_use_conflict = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_363
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \cur_data_i_reg[26] ;

  assign \cur_data_i_reg[26]  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_365
   (\cur_data_i_reg[15] ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \cur_data_i_reg[15] ;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \cur_data_i_reg[15] ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,\cur_data_i_reg[15] }),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,Q}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_367
   (of_ex_use_conflict,
    \Using_FPGA.Native_0 ,
    part_c_and_b,
    lopt,
    lopt_1);
  output of_ex_use_conflict;
  input \Using_FPGA.Native_0 ;
  input part_c_and_b;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire of_ex_use_conflict;
  wire part_c_and_b;

  assign lopt_1 = \<const1> ;
  assign of_ex_use_conflict = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_369
   (part_c_and_b,
    \Using_FPGA.Native_0 ,
    part_c,
    lopt,
    lopt_1);
  output part_c_and_b;
  input \Using_FPGA.Native_0 ;
  input part_c;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire part_c;
  wire part_c_and_b;

  assign lopt_1 = \<const0> ;
  assign part_c_and_b = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_371
   (part_c,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output part_c;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire part_c;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,part_c}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,Q}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_407
   (of_m3_stall_conflict,
    of_read_m3_write_op_conflict,
    m3_complete_in_later_stage,
    m3_div_stall,
    lopt,
    lopt_1,
    lopt_2);
  output of_m3_stall_conflict;
  input of_read_m3_write_op_conflict;
  input m3_complete_in_later_stage;
  input m3_div_stall;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.Native_i_1__108_n_0 ;
  wire m3_complete_in_later_stage;
  wire m3_div_stall;
  wire of_m3_stall_conflict;
  wire of_read_m3_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.Native_i_1__108_n_0 ;
  assign of_m3_stall_conflict = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__108 
       (.I0(m3_complete_in_later_stage),
        .I1(m3_div_stall),
        .O(\Using_FPGA.Native_i_1__108_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_409
   (of_read_m3_write_op_conflict,
    \Using_FPGA.Native_0 ,
    of_m3_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m3_write_op_conflict;
  input \Using_FPGA.Native_0 ;
  input of_m3_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_m3_addr_conflict;
  wire of_read_m3_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_m3_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_411
   (carry_chain_1,
    S_3,
    of_m3_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S_3;
  input of_m3_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_3;
  wire carry_chain_1;
  wire of_m3_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_412
   (of_m3_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output of_m3_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire of_m3_addr_conflict;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_chain_1),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,of_m3_addr_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_414
   (of_m2_stall_conflict,
    m2_complete_in_later_stage,
    of_read_m2_write_op_conflict,
    lopt,
    lopt_1);
  output of_m2_stall_conflict;
  input m2_complete_in_later_stage;
  input of_read_m2_write_op_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire m2_complete_in_later_stage;
  wire of_m2_stall_conflict;
  wire of_read_m2_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m2_stall_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_417
   (of_read_m2_write_op_conflict,
    \Using_FPGA.Native_0 ,
    of_m2_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m2_write_op_conflict;
  input \Using_FPGA.Native_0 ;
  input of_m2_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_m2_addr_conflict;
  wire of_read_m2_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_m2_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_419
   (carry_chain_1,
    S_2,
    of_m2_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S_2;
  input of_m2_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_2;
  wire carry_chain_1;
  wire of_m2_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_420
   (of_m2_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output of_m2_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire of_m2_addr_conflict;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_chain_1),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,of_m2_addr_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_422
   (of_m1_stall_conflict,
    m1_m2_complete_in_later_stage,
    of_read_m1_write_op_conflict,
    lopt,
    lopt_1);
  output of_m1_stall_conflict;
  input m1_m2_complete_in_later_stage;
  input of_read_m1_write_op_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire m1_m2_complete_in_later_stage;
  wire of_m1_stall_conflict;
  wire of_read_m1_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m1_stall_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_425
   (of_read_m1_write_op_conflict,
    \Using_FPGA.Native_0 ,
    of_m1_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m1_write_op_conflict;
  input \Using_FPGA.Native_0 ;
  input of_m1_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_m1_addr_conflict;
  wire of_read_m1_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_m1_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_427
   (carry_chain_1,
    S_1,
    of_m1_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S_1;
  input of_m1_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_1;
  wire carry_chain_1;
  wire of_m1_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_428
   (of_m1_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output of_m1_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire of_m1_addr_conflict;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_chain_1),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,of_m1_addr_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_43
   (if4_ready,
    S_0,
    if4_ready_tmp3,
    lopt,
    lopt_1);
  output if4_ready;
  input S_0;
  input if4_ready_tmp3;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_0;
  wire if4_ready;
  wire if4_ready_tmp3;

  assign if4_ready = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_430
   (m0_complete_in_later_stage_reg,
    m0_complete_in_later_stage,
    of_read_m0_write_op_conflict,
    OF_Op_EX_Stall4_in,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m1_stall_conflict,
    lopt,
    lopt_1);
  output m0_complete_in_later_stage_reg;
  input m0_complete_in_later_stage;
  input of_read_m0_write_op_conflict;
  input OF_Op_EX_Stall4_in;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m1_stall_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire And_OUT;
  wire OF_Op_EX_Stall4_in;
  wire m0_complete_in_later_stage;
  wire m0_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m0_stall_conflict;
  wire of_m1_stall_conflict;
  wire of_read_m0_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m0_stall_conflict = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'h31303131)) 
    \Using_FPGA.Native_i_1__213 
       (.I0(of_m0_stall_conflict),
        .I1(OF_Op_EX_Stall4_in),
        .I2(And_OUT),
        .I3(of_m0_no_stall_conflict),
        .I4(of_m1_stall_conflict),
        .O(m0_complete_in_later_stage_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_433
   (of_read_m0_write_op_conflict,
    \Using_FPGA.Native_0 ,
    of_m0_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m0_write_op_conflict;
  input \Using_FPGA.Native_0 ;
  input of_m0_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_m0_addr_conflict;
  wire of_read_m0_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_m0_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_435
   (carry_chain_1,
    S_0,
    of_m0_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S_0;
  input of_m0_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_0;
  wire carry_chain_1;
  wire of_m0_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_436
   (of_m0_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output of_m0_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire of_m0_addr_conflict;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_chain_1),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,of_m0_addr_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_438
   (OF_Op_EX_Stall4_in,
    ex_complete_in_later_stage,
    of_read_ex_write_op_conflict,
    lopt,
    lopt_1);
  output OF_Op_EX_Stall4_in;
  input ex_complete_in_later_stage;
  input of_read_ex_write_op_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire OF_Op_EX_Stall4_in;
  wire ex_complete_in_later_stage;
  wire of_read_ex_write_op_conflict;

  assign OF_Op_EX_Stall4_in = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_441
   (of_read_ex_write_op_conflict,
    \Using_FPGA.Native_0 ,
    of_ex_addr_conflict,
    lopt,
    lopt_1);
  output of_read_ex_write_op_conflict;
  input \Using_FPGA.Native_0 ;
  input of_ex_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_ex_addr_conflict;
  wire of_read_ex_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_ex_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_443
   (carry_chain_1,
    S,
    of_ex_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S;
  input of_ex_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S;
  wire carry_chain_1;
  wire of_ex_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_444
   (of_ex_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output of_ex_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire of_ex_addr_conflict;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(carry_chain_1),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,of_ex_addr_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_446
   (of_m3_use_conflict,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output of_m3_use_conflict;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_m3_use_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m3_use_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_448
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \cur_data_i_reg[26] ;

  assign \cur_data_i_reg[26]  = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_45
   (if4_ready_tmp2,
    S,
    if4_ready_tmp1,
    lopt,
    lopt_1);
  output if4_ready_tmp2;
  input S;
  input if4_ready_tmp1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire if4_ready_tmp1;
  wire if4_ready_tmp2;

  assign if4_ready_tmp2 = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_450
   (\Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,\Using_FPGA.Native_0 }),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b0}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_452
   (of_m2_use_conflict,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output of_m2_use_conflict;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_m2_use_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m2_use_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_454
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \cur_data_i_reg[26] ;

  assign \cur_data_i_reg[26]  = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_456
   (\Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,\Using_FPGA.Native_0 }),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b0}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_458
   (of_m1_use_conflict,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output of_m1_use_conflict;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_m1_use_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m1_use_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_460
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \cur_data_i_reg[26] ;

  assign \cur_data_i_reg[26]  = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_462
   (\Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,\Using_FPGA.Native_0 }),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b0}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_464
   (of_m0_use_conflict,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output of_m0_use_conflict;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire of_m0_use_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m0_use_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_466
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \cur_data_i_reg[26] ;

  assign \cur_data_i_reg[26]  = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_468
   (\Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,\Using_FPGA.Native_0 }),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b0}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_47
   (if4_ready_tmp1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output if4_ready_tmp1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire if4_ready_tmp1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,if4_ready_tmp1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_470
   (of_ex_use_conflict,
    \Using_FPGA.Native_0 ,
    part_c_or_not_b,
    lopt,
    lopt_1);
  output of_ex_use_conflict;
  input \Using_FPGA.Native_0 ;
  input part_c_or_not_b;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_ex_use_conflict;
  wire part_c_or_not_b;

  assign lopt_1 = \<const0> ;
  assign of_ex_use_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_472
   (part_c_or_not_b,
    \Using_FPGA.Native_0 ,
    part_c,
    lopt,
    lopt_1);
  output part_c_or_not_b;
  input \Using_FPGA.Native_0 ;
  input part_c;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire part_c;
  wire part_c_or_not_b;

  assign lopt_1 = \<const1> ;
  assign part_c_or_not_b = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_474
   (part_c,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output part_c;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire part_c;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,part_c}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b0}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_48
   (if4_ready_tmp3,
    \Using_FPGA.Native_0 ,
    if4_ready_tmp2,
    lopt,
    lopt_1);
  output if4_ready_tmp3;
  input \Using_FPGA.Native_0 ;
  input if4_ready_tmp2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire if4_ready_tmp2;
  wire if4_ready_tmp3;

  assign if4_ready_tmp3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_500
   (of_m3_stall_conflict,
    of_read_m3_write_op_conflict,
    m3_complete_in_later_stage,
    m3_div_stall);
  output of_m3_stall_conflict;
  input of_read_m3_write_op_conflict;
  input m3_complete_in_later_stage;
  input m3_div_stall;

  wire \Using_FPGA.Native_i_1__107_n_0 ;
  wire m3_complete_in_later_stage;
  wire m3_div_stall;
  wire of_m3_stall_conflict;
  wire of_read_m3_write_op_conflict;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(of_read_m3_write_op_conflict),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],of_m3_stall_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],\Using_FPGA.Native_i_1__107_n_0 }));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_1__107 
       (.I0(m3_complete_in_later_stage),
        .I1(m3_div_stall),
        .O(\Using_FPGA.Native_i_1__107_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_502
   (of_read_m3_write_op_conflict,
    \Using_FPGA.Native_0 ,
    of_m3_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m3_write_op_conflict;
  input \Using_FPGA.Native_0 ;
  input of_m3_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_m3_addr_conflict;
  wire of_read_m3_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_m3_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_504
   (carry_chain_1,
    S_3,
    of_m3_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S_3;
  input of_m3_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_3;
  wire carry_chain_1;
  wire of_m3_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_505
   (of_m3_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1);
  output of_m3_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire of_m3_addr_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m3_addr_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_507
   (of_m2_stall_conflict,
    m2_complete_in_later_stage,
    of_read_m2_write_op_conflict);
  output of_m2_stall_conflict;
  input m2_complete_in_later_stage;
  input of_read_m2_write_op_conflict;

  wire m2_complete_in_later_stage;
  wire of_m2_stall_conflict;
  wire of_read_m2_write_op_conflict;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(of_read_m2_write_op_conflict),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],of_m2_stall_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],m2_complete_in_later_stage}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_510
   (of_read_m2_write_op_conflict,
    \Using_FPGA.Native_0 ,
    of_m2_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m2_write_op_conflict;
  input \Using_FPGA.Native_0 ;
  input of_m2_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_m2_addr_conflict;
  wire of_read_m2_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_m2_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_512
   (carry_chain_1,
    S_2,
    of_m2_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S_2;
  input of_m2_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_2;
  wire carry_chain_1;
  wire of_m2_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_513
   (of_m2_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1);
  output of_m2_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire of_m2_addr_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m2_addr_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_515
   (of_m1_stall_conflict,
    m1_m2_complete_in_later_stage,
    of_read_m1_write_op_conflict);
  output of_m1_stall_conflict;
  input m1_m2_complete_in_later_stage;
  input of_read_m1_write_op_conflict;

  wire m1_m2_complete_in_later_stage;
  wire of_m1_stall_conflict;
  wire of_read_m1_write_op_conflict;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(of_read_m1_write_op_conflict),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],of_m1_stall_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],m1_m2_complete_in_later_stage}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_518
   (of_read_m1_write_op_conflict,
    \Using_FPGA.Native_0 ,
    of_m1_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m1_write_op_conflict;
  input \Using_FPGA.Native_0 ;
  input of_m1_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_m1_addr_conflict;
  wire of_read_m1_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_m1_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_52
   (m3_databus_ready,
    S_0,
    m3_ready_tmp,
    lopt,
    lopt_1);
  output m3_databus_ready;
  input S_0;
  input m3_ready_tmp;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_0;
  wire m3_databus_ready;
  wire m3_ready_tmp;

  assign lopt_1 = \<const1> ;
  assign m3_databus_ready = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_520
   (carry_chain_1,
    S_1,
    of_m1_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S_1;
  input of_m1_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_1;
  wire carry_chain_1;
  wire of_m1_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_521
   (of_m1_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1);
  output of_m1_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire of_m1_addr_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m1_addr_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_523
   (m0_complete_in_later_stage_reg,
    m0_complete_in_later_stage,
    of_read_m0_write_op_conflict,
    OF_Op_EX_Stall,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m1_stall_conflict);
  output m0_complete_in_later_stage_reg;
  input m0_complete_in_later_stage;
  input of_read_m0_write_op_conflict;
  input OF_Op_EX_Stall;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m1_stall_conflict;

  wire And_OUT;
  wire OF_Op_EX_Stall;
  wire m0_complete_in_later_stage;
  wire m0_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m0_stall_conflict;
  wire of_m1_stall_conflict;
  wire of_read_m0_write_op_conflict;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(of_read_m0_write_op_conflict),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],of_m0_stall_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],m0_complete_in_later_stage}));
  LUT5 #(
    .INIT(32'h31303131)) 
    \Using_FPGA.Native_i_1__211 
       (.I0(of_m0_stall_conflict),
        .I1(OF_Op_EX_Stall),
        .I2(And_OUT),
        .I3(of_m0_no_stall_conflict),
        .I4(of_m1_stall_conflict),
        .O(m0_complete_in_later_stage_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_526
   (of_read_m0_write_op_conflict,
    \Using_FPGA.Native_0 ,
    of_m0_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m0_write_op_conflict;
  input \Using_FPGA.Native_0 ;
  input of_m0_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_m0_addr_conflict;
  wire of_read_m0_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_m0_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_528
   (carry_chain_1,
    S_0,
    of_m0_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S_0;
  input of_m0_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_0;
  wire carry_chain_1;
  wire of_m0_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_529
   (of_m0_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1);
  output of_m0_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire of_m0_addr_conflict;

  assign lopt_1 = \<const0> ;
  assign of_m0_addr_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_531
   (OF_Op_EX_Stall,
    ex_complete_in_later_stage,
    of_read_ex_write_op_conflict);
  output OF_Op_EX_Stall;
  input ex_complete_in_later_stage;
  input of_read_ex_write_op_conflict;

  wire OF_Op_EX_Stall;
  wire ex_complete_in_later_stage;
  wire of_read_ex_write_op_conflict;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED ;

  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(of_read_ex_write_op_conflict),
        .CO({\NLW_Using_FPGA.Native_CARRY4_CO_UNCONNECTED [3:1],OF_Op_EX_Stall}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.Native_CARRY4_S_UNCONNECTED [3:1],ex_complete_in_later_stage}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_534
   (of_read_ex_write_op_conflict,
    \Using_FPGA.Native_0 ,
    of_ex_addr_conflict,
    lopt,
    lopt_1);
  output of_read_ex_write_op_conflict;
  input \Using_FPGA.Native_0 ;
  input of_ex_addr_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire of_ex_addr_conflict;
  wire of_read_ex_write_op_conflict;

  assign lopt_1 = \<const0> ;
  assign of_read_ex_write_op_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_536
   (carry_chain_1,
    S,
    of_ex_use_conflict,
    lopt,
    lopt_1);
  output carry_chain_1;
  input S;
  input of_ex_use_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S;
  wire carry_chain_1;
  wire of_ex_use_conflict;

  assign carry_chain_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_537
   (of_ex_addr_conflict,
    \Using_FPGA.Native_0 ,
    carry_chain_1,
    lopt,
    lopt_1);
  output of_ex_addr_conflict;
  input \Using_FPGA.Native_0 ;
  input carry_chain_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire carry_chain_1;
  wire of_ex_addr_conflict;

  assign lopt_1 = \<const0> ;
  assign of_ex_addr_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_539
   (of_m3_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_m3_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire of_m3_use_conflict;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,of_m3_use_conflict}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_54
   (m3_ready_tmp,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m3_ready_tmp;
  input S;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire m3_ready_tmp;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,m3_ready_tmp}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_541
   (of_m2_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_m2_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire of_m2_use_conflict;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,of_m2_use_conflict}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_543
   (of_m1_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_m1_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire of_m1_use_conflict;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,of_m1_use_conflict}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_545
   (of_m0_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_m0_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire of_m0_use_conflict;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,of_m0_use_conflict}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_547
   (of_ex_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_ex_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire of_ex_use_conflict;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,of_ex_use_conflict}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_569
   (\Using_FPGA.Native_0 ,
    bp1_dead_fetch_hold_reg,
    if2_ibus_access_raw0,
    bp0_dead_fetch_hold_reg,
    kill_fetch,
    if2_ibus_first_cycle_raw_reg,
    if2_ibus_first_cycle_raw_reg_0,
    if2_ibus_first_cycle_raw_reg_1,
    sync_reset,
    bp0_dead_fetch_hold,
    DI,
    bp0_dead_fetch_hold_reg_0,
    lopt,
    lopt_1);
  output \Using_FPGA.Native_0 ;
  output bp1_dead_fetch_hold_reg;
  output if2_ibus_access_raw0;
  output bp0_dead_fetch_hold_reg;
  input kill_fetch;
  input if2_ibus_first_cycle_raw_reg;
  input if2_ibus_first_cycle_raw_reg_0;
  input if2_ibus_first_cycle_raw_reg_1;
  input sync_reset;
  input bp0_dead_fetch_hold;
  input [0:0]DI;
  input bp0_dead_fetch_hold_reg_0;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire [0:0]DI;
  wire \Using_FPGA.Native_0 ;
  wire bp0_dead_fetch_hold;
  wire bp0_dead_fetch_hold_reg;
  wire bp0_dead_fetch_hold_reg_0;
  wire bp1_dead_fetch_hold_reg;
  wire if2_ibus_access_raw0;
  wire if2_ibus_first_cycle_raw_reg;
  wire if2_ibus_first_cycle_raw_reg_0;
  wire if2_ibus_first_cycle_raw_reg_1;
  wire kill_fetch;
  wire sync_reset;

  assign \Using_FPGA.Native_0  = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
  LUT5 #(
    .INIT(32'h000000EA)) 
    bp0_dead_fetch_hold_i_1
       (.I0(bp0_dead_fetch_hold),
        .I1(\Using_FPGA.Native_0 ),
        .I2(DI),
        .I3(bp0_dead_fetch_hold_reg_0),
        .I4(sync_reset),
        .O(bp0_dead_fetch_hold_reg));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'h02)) 
    if2_ibus_access_raw_i_2
       (.I0(if2_ibus_first_cycle_raw_reg_0),
        .I1(if2_ibus_first_cycle_raw_reg),
        .I2(\Using_FPGA.Native_0 ),
        .O(if2_ibus_access_raw0));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT5 #(
    .INIT(32'h00001000)) 
    if2_ibus_first_cycle_raw_i_1
       (.I0(\Using_FPGA.Native_0 ),
        .I1(if2_ibus_first_cycle_raw_reg),
        .I2(if2_ibus_first_cycle_raw_reg_0),
        .I3(if2_ibus_first_cycle_raw_reg_1),
        .I4(sync_reset),
        .O(bp1_dead_fetch_hold_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_571
   (kill_fetch,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    if2_raw_valid_reg,
    ex_jump,
    ex_gpr_write_addr,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    ex_dead_valid_hold,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    if2_dead_fetch_hold_reg,
    if2_dead_fetch_hold_reg_0,
    lopt,
    lopt_1,
    lopt_2);
  output kill_fetch;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  output if2_raw_valid_reg;
  input ex_jump;
  input [0:0]ex_gpr_write_addr;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input ex_dead_valid_hold;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input if2_dead_fetch_hold_reg;
  input if2_dead_fetch_hold_reg_0;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_i_1__209_n_0 ;
  wire ex_dead_valid_hold;
  wire [0:0]ex_gpr_write_addr;
  wire ex_jump;
  wire if2_dead_fetch_hold_reg;
  wire if2_dead_fetch_hold_reg_0;
  wire if2_raw_valid_reg;
  wire kill_fetch;

  assign kill_fetch = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.Native_i_1__209_n_0 ;
  LUT5 #(
    .INIT(32'h00FF00BF)) 
    \Using_FPGA.Native_i_1__209 
       (.I0(ex_gpr_write_addr),
        .I1(\Using_FPGA.Native_0 ),
        .I2(\Using_FPGA.Native_1 ),
        .I3(\Using_FPGA.Native_2 ),
        .I4(ex_dead_valid_hold),
        .O(\Using_FPGA.Native_i_1__209_n_0 ));
  LUT4 #(
    .INIT(16'h5545)) 
    \Using_FPGA.Native_i_1__210 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\Using_FPGA.Native_4 ),
        .I2(\Using_FPGA.Native_5 ),
        .I3(kill_fetch),
        .O(\Serial_Dbg_Intf.if_debug_ready_i_reg ));
  VCC VCC
       (.P(\<const1> ));
  LUT3 #(
    .INIT(8'h08)) 
    if2_dead_fetch_hold_i_2
       (.I0(kill_fetch),
        .I1(if2_dead_fetch_hold_reg),
        .I2(if2_dead_fetch_hold_reg_0),
        .O(if2_raw_valid_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_573
   (jump_carry1,
    S,
    DI,
    EX_Op1_Zero,
    lopt);
  output jump_carry1;
  input S;
  input DI;
  input EX_Op1_Zero;
  input lopt;

  wire DI;
  wire EX_Op1_Zero;
  wire S;
  wire jump_carry1;

  assign jump_carry1 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_574
   (jump_carry2,
    jump_carry1,
    \Using_FPGA.Native_0 ,
    force_Val2_N,
    force2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output jump_carry2;
  input jump_carry1;
  input \Using_FPGA.Native_0 ;
  input force_Val2_N;
  input force2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native_0 ;
  wire force2;
  wire force_DI2;
  wire force_Val2_N;
  wire force_jump2;
  wire jump_carry1;
  wire jump_carry2;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(jump_carry1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,jump_carry2}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,force_DI2}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,force_jump2}));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_i_1__9 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(force2),
        .O(force_jump2));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_2__1 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(force_Val2_N),
        .O(force_DI2));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_575
   (jump_carry3,
    \Using_FPGA.Native_0 ,
    jump_carry2,
    lopt,
    lopt_1);
  output jump_carry3;
  input \Using_FPGA.Native_0 ;
  input jump_carry2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire jump_carry2;
  wire jump_carry3;

  assign jump_carry3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_576
   (ex_jump_wanted,
    ex_branch_with_delayslot_reg,
    jump_carry3,
    \Using_FPGA.Native_0 ,
    ex_branch_with_delayslot,
    of_raw_valid,
    lopt,
    lopt_1,
    lopt_2);
  output ex_jump_wanted;
  output ex_branch_with_delayslot_reg;
  input jump_carry3;
  input \Using_FPGA.Native_0 ;
  input ex_branch_with_delayslot;
  input of_raw_valid;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire ex_branch_with_delayslot;
  wire ex_branch_with_delayslot_reg;
  wire ex_jump_wanted;
  wire jump_carry3;
  wire of_raw_valid;

  assign ex_jump_wanted = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hDD5D)) 
    \Using_FPGA.Native_i_1__10 
       (.I0(ex_jump_wanted),
        .I1(\Using_FPGA.Native_0 ),
        .I2(ex_branch_with_delayslot),
        .I3(of_raw_valid),
        .O(ex_branch_with_delayslot_reg));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_577
   (jump_carry5,
    \Using_FPGA.Native_0 ,
    ex_jump_wanted,
    lopt,
    lopt_1);
  output jump_carry5;
  input \Using_FPGA.Native_0 ;
  input ex_jump_wanted;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.Native_0 ;
  wire ex_jump_wanted;
  wire jump_carry5;

  assign jump_carry5 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_578
   (jump_carry8,
    jump_carry5,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output jump_carry8;
  input jump_carry5;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;

  wire jump_carry5;
  wire jump_carry8;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_8 = lopt_7;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(jump_carry5),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,jump_carry8}),
        .CYINIT(1'b0),
        .DI({lopt_8,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_579
   (ex_mbar_decode_reg,
    bp0_jump0,
    Clear_Buffer,
    M0_Jump_Taken0,
    ex_delayslot_Instr0,
    keep_jump_taken_with_ds_reg,
    \wb_exception_raw_kind_reg[31] ,
    bp0_keep_jump_reg,
    \bp0_branch_target_reg[31] ,
    jump_carry8,
    bp0_keep_jump,
    wb_abort_div,
    \Using_FPGA.Native_0 ,
    ex_jump_hold,
    keep_jump_taken_with_ds,
    ex_branch_with_delayslot,
    sync_reset,
    keep_jump_taken_with_ds_reg_0,
    Q,
    bp0_keep_jump_reg_0,
    lopt,
    lopt_1);
  output ex_mbar_decode_reg;
  output bp0_jump0;
  output Clear_Buffer;
  output M0_Jump_Taken0;
  output ex_delayslot_Instr0;
  output keep_jump_taken_with_ds_reg;
  output [0:0]\wb_exception_raw_kind_reg[31] ;
  output bp0_keep_jump_reg;
  input \bp0_branch_target_reg[31] ;
  input jump_carry8;
  input bp0_keep_jump;
  input wb_abort_div;
  input \Using_FPGA.Native_0 ;
  input ex_jump_hold;
  input keep_jump_taken_with_ds;
  input ex_branch_with_delayslot;
  input sync_reset;
  input keep_jump_taken_with_ds_reg_0;
  input [2:0]Q;
  input bp0_keep_jump_reg_0;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Clear_Buffer;
  wire M0_Jump_Taken0;
  wire [2:0]Q;
  wire \Using_FPGA.Native_0 ;
  wire \bp0_branch_target_reg[31] ;
  wire bp0_jump0;
  wire bp0_keep_jump;
  wire bp0_keep_jump_reg;
  wire bp0_keep_jump_reg_0;
  wire ex_branch_with_delayslot;
  wire ex_delayslot_Instr0;
  wire ex_jump_hold;
  wire ex_mbar_decode_reg;
  wire jump_carry8;
  wire keep_jump_taken_with_ds;
  wire keep_jump_taken_with_ds_reg;
  wire keep_jump_taken_with_ds_reg_0;
  wire sync_reset;
  wire wb_abort_div;
  wire [0:0]\wb_exception_raw_kind_reg[31] ;

  assign ex_mbar_decode_reg = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT2 #(
    .INIT(4'hE)) 
    M0_Jump_Taken_i_1
       (.I0(ex_mbar_decode_reg),
        .I1(ex_jump_hold),
        .O(M0_Jump_Taken0));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.Native_i_2 
       (.I0(\Using_FPGA.Native_0 ),
        .I1(ex_mbar_decode_reg),
        .O(Clear_Buffer));
  LUT5 #(
    .INIT(32'hBAAAAAAA)) 
    \bp0_branch_target[0]_i_1 
       (.I0(ex_mbar_decode_reg),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(wb_abort_div),
        .I4(Q[1]),
        .O(\wb_exception_raw_kind_reg[31] ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    bp0_jump_i_1
       (.I0(bp0_keep_jump),
        .I1(ex_mbar_decode_reg),
        .I2(wb_abort_div),
        .O(bp0_jump0));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT5 #(
    .INIT(32'h000000FE)) 
    bp0_keep_jump_i_1
       (.I0(bp0_keep_jump),
        .I1(wb_abort_div),
        .I2(ex_mbar_decode_reg),
        .I3(bp0_keep_jump_reg_0),
        .I4(sync_reset),
        .O(bp0_keep_jump_reg));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    ex_delayslot_Instr_i_1
       (.I0(keep_jump_taken_with_ds),
        .I1(ex_branch_with_delayslot),
        .I2(ex_mbar_decode_reg),
        .O(ex_delayslot_Instr0));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT5 #(
    .INIT(32'h000000EA)) 
    keep_jump_taken_with_ds_i_1
       (.I0(keep_jump_taken_with_ds),
        .I1(ex_mbar_decode_reg),
        .I2(ex_branch_with_delayslot),
        .I3(sync_reset),
        .I4(keep_jump_taken_with_ds_reg_0),
        .O(keep_jump_taken_with_ds_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_584
   (zero_CI_6,
    EX_Op1_CMP_Equal,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output zero_CI_6;
  input EX_Op1_CMP_Equal;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;

  wire EX_Op1_CMP_Equal;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire zero_CI_6;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_7 = lopt_6;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_6 ,\^lopt_4 ,\^lopt_1 ,zero_CI_6}),
        .CYINIT(1'b1),
        .DI({\^lopt_2 ,\^lopt_2 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_5 ,\^lopt_3 ,EX_Op1_CMP_Equal}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_585
   (EX_Op1_Zero,
    div_iterations_early,
    div_busy_reg,
    ex_op1_cmp_equal_n,
    zero_CI_1,
    ex_start_div,
    div_busy_reg_0,
    div_busy_reg_1,
    lopt);
  output EX_Op1_Zero;
  output div_iterations_early;
  input div_busy_reg;
  input ex_op1_cmp_equal_n;
  input zero_CI_1;
  input ex_start_div;
  input div_busy_reg_0;
  input div_busy_reg_1;
  input lopt;

  wire EX_Op1_Zero;
  wire div_busy_reg;
  wire div_busy_reg_0;
  wire div_busy_reg_1;
  wire div_iterations_early;
  wire ex_op1_cmp_equal_n;
  wire ex_start_div;
  wire zero_CI_1;

  assign EX_Op1_Zero = lopt;
  LUT4 #(
    .INIT(16'h0074)) 
    div_busy_i_1
       (.I0(EX_Op1_Zero),
        .I1(ex_start_div),
        .I2(div_busy_reg_0),
        .I3(div_busy_reg_1),
        .O(div_iterations_early));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_586
   (zero_CI_1,
    \Using_FPGA.Native_0 ,
    ex_op1_cmp_equal_n,
    zero_CI_2,
    lopt);
  output zero_CI_1;
  input \Using_FPGA.Native_0 ;
  input ex_op1_cmp_equal_n;
  input zero_CI_2;
  input lopt;

  wire \Using_FPGA.Native_0 ;
  wire ex_op1_cmp_equal_n;
  wire zero_CI_1;
  wire zero_CI_2;

  assign zero_CI_1 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_587
   (zero_CI_2,
    \Using_FPGA.Native_0 ,
    ex_op1_cmp_equal_n,
    zero_CI_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output zero_CI_2;
  input \Using_FPGA.Native_0 ;
  input ex_op1_cmp_equal_n;
  input zero_CI_3;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;

  wire \Using_FPGA.Native_0 ;
  wire ex_op1_cmp_equal_n;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire zero_CI_2;
  wire zero_CI_3;
  wire [3:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_2 = \^lopt_3 ;
  assign lopt_4 = \^lopt_5 ;
  assign lopt_7 = lopt_6;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(zero_CI_3),
        .CO({\^lopt_5 ,\^lopt_3 ,\^lopt_1 ,zero_CI_2}),
        .CYINIT(1'b0),
        .DI({\^lopt_6 ,ex_op1_cmp_equal_n,ex_op1_cmp_equal_n,ex_op1_cmp_equal_n}),
        .O(\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_4 ,\^lopt_2 ,\Using_FPGA.Native_0 }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_588
   (zero_CI_3,
    \Using_FPGA.Native_0 ,
    ex_op1_cmp_equal_n,
    zero_CI_4,
    lopt);
  output zero_CI_3;
  input \Using_FPGA.Native_0 ;
  input ex_op1_cmp_equal_n;
  input zero_CI_4;
  input lopt;

  wire \Using_FPGA.Native_0 ;
  wire ex_op1_cmp_equal_n;
  wire zero_CI_3;
  wire zero_CI_4;

  assign zero_CI_3 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_589
   (zero_CI_4,
    \Using_FPGA.Native_0 ,
    ex_op1_cmp_equal_n,
    zero_CI_5,
    lopt);
  output zero_CI_4;
  input \Using_FPGA.Native_0 ;
  input ex_op1_cmp_equal_n;
  input zero_CI_5;
  input lopt;

  wire \Using_FPGA.Native_0 ;
  wire ex_op1_cmp_equal_n;
  wire zero_CI_4;
  wire zero_CI_5;

  assign zero_CI_4 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_590
   (zero_CI_5,
    S,
    ex_op1_cmp_equal_n,
    zero_CI_6,
    lopt);
  output zero_CI_5;
  input S;
  input ex_op1_cmp_equal_n;
  input zero_CI_6;
  input lopt;

  wire S;
  wire ex_op1_cmp_equal_n;
  wire zero_CI_5;
  wire zero_CI_6;

  assign zero_CI_5 = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_790
   (ex_pre_alu_carry,
    EX_CarryIn,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output ex_pre_alu_carry;
  input EX_CarryIn;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;

  wire EX_CarryIn;
  wire ex_pre_alu_carry;
  wire \^lopt_1 ;
  wire lopt_10;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:0]\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_10;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,ex_pre_alu_carry}),
        .CYINIT(EX_CarryIn),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_10,\NLW_Using_FPGA.Native_CARRY4_O_UNCONNECTED [2:0]}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_791
   (\Using_FPGA.Native_0 ,
    ex_pre_alu_carry,
    lopt,
    lopt_1,
    lopt_2);
  output \Using_FPGA.Native_0 ;
  input ex_pre_alu_carry;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire \Using_FPGA.Native_0 ;
  wire ex_pre_alu_carry;

  assign \Using_FPGA.Native_0  = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_823
   (CI,
    ex_use_carry,
    DI_0,
    \m0_addr_3lsb_reg[2] ,
    lopt);
  output CI;
  input ex_use_carry;
  input DI_0;
  input \m0_addr_3lsb_reg[2] ;
  input lopt;

  wire CI;
  wire DI_0;
  wire ex_use_carry;
  wire \m0_addr_3lsb_reg[2] ;

  assign CI = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_916
   (CI,
    S_1,
    ex_unsigned_op,
    LO,
    lopt);
  output CI;
  input S_1;
  input ex_unsigned_op;
  input LO;
  input lopt;

  wire CI;
  wire LO;
  wire S_1;
  wire ex_unsigned_op;

  assign CI = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY
   (D,
    \Using_FPGA.D_Handle[0].D_Sel_reg ,
    LO,
    lopt);
  output [0:0]D;
  input \Using_FPGA.D_Handle[0].D_Sel_reg ;
  input LO;
  input lopt;

  wire [0:0]D;
  wire LO;
  wire \Using_FPGA.D_Handle[0].D_Sel_reg ;

  assign D = lopt;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_591
   (LO,
    O,
    \Using_FPGA.D_reg[10] ,
    \Using_FPGA.D_reg[10]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[10] ;
  input \Using_FPGA.D_reg[10]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[10] ;
  wire \Using_FPGA.D_reg[10]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_592
   (LO,
    O,
    \Using_FPGA.D_reg[11] ,
    \Using_FPGA.D_reg[11]_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input \Using_FPGA.D_reg[11] ;
  input \Using_FPGA.D_reg[11]_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[11] ;
  wire \Using_FPGA.D_reg[11]_0 ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Using_FPGA.D_reg[11]_0 ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.D_reg[11] }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_593
   (LO,
    O,
    \Using_FPGA.D_reg[12] ,
    \Using_FPGA.D_reg[12]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[12] ;
  input \Using_FPGA.D_reg[12]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[12] ;
  wire \Using_FPGA.D_reg[12]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_594
   (LO,
    O,
    \Using_FPGA.D_reg[13] ,
    \Using_FPGA.D_reg[13]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[13] ;
  input \Using_FPGA.D_reg[13]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[13] ;
  wire \Using_FPGA.D_reg[13]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_595
   (LO,
    O,
    \Using_FPGA.D_reg[14] ,
    \Using_FPGA.D_reg[14]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[14] ;
  input \Using_FPGA.D_reg[14]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[14] ;
  wire \Using_FPGA.D_reg[14]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_596
   (LO,
    O,
    \Using_FPGA.D_reg[15] ,
    \Using_FPGA.D_reg[15]_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input \Using_FPGA.D_reg[15] ;
  input \Using_FPGA.D_reg[15]_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[15] ;
  wire \Using_FPGA.D_reg[15]_0 ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Using_FPGA.D_reg[15]_0 ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.D_reg[15] }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_597
   (LO,
    O,
    \Using_FPGA.D_reg[16] ,
    \Using_FPGA.D_reg[16]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[16] ;
  input \Using_FPGA.D_reg[16]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[16] ;
  wire \Using_FPGA.D_reg[16]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_598
   (LO,
    O,
    \Using_FPGA.D_reg[17] ,
    \Using_FPGA.D_reg[17]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[17] ;
  input \Using_FPGA.D_reg[17]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[17] ;
  wire \Using_FPGA.D_reg[17]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_599
   (LO,
    O,
    \Using_FPGA.D_reg[18] ,
    \Using_FPGA.D_reg[18]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[18] ;
  input \Using_FPGA.D_reg[18]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[18] ;
  wire \Using_FPGA.D_reg[18]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_600
   (LO,
    O,
    \Using_FPGA.D_reg[19] ,
    \Using_FPGA.D_reg[19]_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input \Using_FPGA.D_reg[19] ;
  input \Using_FPGA.D_reg[19]_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[19] ;
  wire \Using_FPGA.D_reg[19]_0 ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Using_FPGA.D_reg[19]_0 ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.D_reg[19] }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_601
   (LO,
    O,
    \Using_FPGA.D_reg[1] ,
    \Using_FPGA.D_reg[1]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[1] ;
  input \Using_FPGA.D_reg[1]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[1] ;
  wire \Using_FPGA.D_reg[1]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_602
   (LO,
    O,
    \Using_FPGA.D_reg[20] ,
    \Using_FPGA.D_reg[20]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[20] ;
  input \Using_FPGA.D_reg[20]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[20] ;
  wire \Using_FPGA.D_reg[20]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_603
   (LO,
    O,
    \Using_FPGA.D_reg[21] ,
    \Using_FPGA.D_reg[21]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[21] ;
  input \Using_FPGA.D_reg[21]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[21] ;
  wire \Using_FPGA.D_reg[21]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_604
   (LO,
    O,
    \Using_FPGA.D_reg[22] ,
    \Using_FPGA.D_reg[22]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[22] ;
  input \Using_FPGA.D_reg[22]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[22] ;
  wire \Using_FPGA.D_reg[22]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_605
   (LO,
    O,
    \Using_FPGA.D_reg[23] ,
    \Using_FPGA.D_reg[23]_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input \Using_FPGA.D_reg[23] ;
  input \Using_FPGA.D_reg[23]_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[23] ;
  wire \Using_FPGA.D_reg[23]_0 ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Using_FPGA.D_reg[23]_0 ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.D_reg[23] }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_606
   (LO,
    O,
    \Using_FPGA.D_reg[24] ,
    \Using_FPGA.D_reg[24]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[24] ;
  input \Using_FPGA.D_reg[24]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[24] ;
  wire \Using_FPGA.D_reg[24]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_607
   (LO,
    O,
    \Using_FPGA.D_reg[25] ,
    \Using_FPGA.D_reg[25]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[25] ;
  input \Using_FPGA.D_reg[25]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[25] ;
  wire \Using_FPGA.D_reg[25]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_608
   (LO,
    O,
    \Using_FPGA.D_reg[26] ,
    \Using_FPGA.D_reg[26]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[26] ;
  input \Using_FPGA.D_reg[26]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[26] ;
  wire \Using_FPGA.D_reg[26]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_609
   (LO,
    O,
    \Using_FPGA.D_reg[27] ,
    \Using_FPGA.D_reg[27]_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input \Using_FPGA.D_reg[27] ;
  input \Using_FPGA.D_reg[27]_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[27] ;
  wire \Using_FPGA.D_reg[27]_0 ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Using_FPGA.D_reg[27]_0 ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.D_reg[27] }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_610
   (LO,
    O,
    \Using_FPGA.D_reg[28] ,
    \Using_FPGA.D_reg[28]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[28] ;
  input \Using_FPGA.D_reg[28]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[28] ;
  wire \Using_FPGA.D_reg[28]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_611
   (LO,
    O,
    \Using_FPGA.D_reg[29] ,
    \Using_FPGA.D_reg[29]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[29] ;
  input \Using_FPGA.D_reg[29]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[29] ;
  wire \Using_FPGA.D_reg[29]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_612
   (LO,
    O,
    \Using_FPGA.D_reg[2] ,
    \Using_FPGA.D_reg[2]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[2] ;
  input \Using_FPGA.D_reg[2]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[2] ;
  wire \Using_FPGA.D_reg[2]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_613
   (LO,
    O,
    \Using_FPGA.D_reg[30] ,
    \Using_FPGA.D_reg[30]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[30] ;
  input \Using_FPGA.D_reg[30]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[30] ;
  wire \Using_FPGA.D_reg[30]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_614
   (LO,
    O,
    S,
    CI,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input S;
  input CI;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire CI;
  wire LO;
  wire O;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(CI),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_615
   (LO,
    O,
    \Using_FPGA.D_reg[3] ,
    \Using_FPGA.D_reg[3]_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output LO;
  output O;
  input \Using_FPGA.D_reg[3] ;
  input \Using_FPGA.D_reg[3]_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;
  output lopt_8;
  input lopt_9;

  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[3] ;
  wire \Using_FPGA.D_reg[3]_0 ;
  wire \^lopt_1 ;
  wire lopt_10;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = lopt_9;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_8 = \^lopt_9 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Using_FPGA.D_reg[3]_0 ),
        .CO({\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({\^lopt_9 ,\^lopt_8 ,\^lopt_7 ,O}),
        .S({lopt_10,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.D_reg[3] }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_616
   (LO,
    O,
    \Using_FPGA.D_reg[4] ,
    \Using_FPGA.D_reg[4]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[4] ;
  input \Using_FPGA.D_reg[4]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[4] ;
  wire \Using_FPGA.D_reg[4]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_617
   (LO,
    O,
    \Using_FPGA.D_reg[5] ,
    \Using_FPGA.D_reg[5]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[5] ;
  input \Using_FPGA.D_reg[5]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[5] ;
  wire \Using_FPGA.D_reg[5]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_618
   (LO,
    O,
    \Using_FPGA.D_reg[6] ,
    \Using_FPGA.D_reg[6]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[6] ;
  input \Using_FPGA.D_reg[6]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[6] ;
  wire \Using_FPGA.D_reg[6]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_619
   (LO,
    O,
    \Using_FPGA.D_reg[7] ,
    \Using_FPGA.D_reg[7]_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input \Using_FPGA.D_reg[7] ;
  input \Using_FPGA.D_reg[7]_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[7] ;
  wire \Using_FPGA.D_reg[7]_0 ;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Using_FPGA.D_reg[7]_0 ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.D_reg[7] }));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_620
   (LO,
    O,
    \Using_FPGA.D_reg[8] ,
    \Using_FPGA.D_reg[8]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[8] ;
  input \Using_FPGA.D_reg[8]_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[8] ;
  wire \Using_FPGA.D_reg[8]_0 ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_621
   (LO,
    O,
    \Using_FPGA.D_reg[9] ,
    CI,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input \Using_FPGA.D_reg[9] ;
  input CI;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire CI;
  wire LO;
  wire O;
  wire \Using_FPGA.D_reg[9] ;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_622
   (D,
    m3_div_overflow_i_reg,
    negative_operands_reg,
    New_Q_Sel_31,
    LO,
    m3_div_overflow_i_reg_0,
    m3_div_overflow_i_reg_1,
    m3_div_overflow_i_reg_2,
    m2_piperun,
    m3_div_overflow_i_reg_3,
    negative_operands,
    m2_is_div_instr,
    m3_sel_div_res,
    m3_div_overflow_i_i_2_0,
    lopt);
  output [0:0]D;
  output m3_div_overflow_i_reg;
  output negative_operands_reg;
  input New_Q_Sel_31;
  input LO;
  input m3_div_overflow_i_reg_0;
  input m3_div_overflow_i_reg_1;
  input m3_div_overflow_i_reg_2;
  input m2_piperun;
  input m3_div_overflow_i_reg_3;
  input negative_operands;
  input m2_is_div_instr;
  input m3_sel_div_res;
  input m3_div_overflow_i_i_2_0;
  input lopt;

  wire [0:0]D;
  wire LO;
  wire New_Q_Sel_31;
  wire m2_is_div_instr;
  wire m2_piperun;
  wire m3_div_overflow_i_i_2_0;
  wire m3_div_overflow_i_i_3_n_0;
  wire m3_div_overflow_i_reg;
  wire m3_div_overflow_i_reg_0;
  wire m3_div_overflow_i_reg_1;
  wire m3_div_overflow_i_reg_2;
  wire m3_div_overflow_i_reg_3;
  wire m3_sel_div_res;
  wire negative_operands;
  wire negative_operands_reg;

  assign D = lopt;
  LUT6 #(
    .INIT(64'h0008000800088888)) 
    floating_hold_div_overflow_i_2
       (.I0(D),
        .I1(negative_operands),
        .I2(m3_sel_div_res),
        .I3(m2_is_div_instr),
        .I4(m2_piperun),
        .I5(m3_div_overflow_i_reg_3),
        .O(negative_operands_reg));
  LUT6 #(
    .INIT(64'hAAABAABBFFFBFFBB)) 
    m3_div_overflow_i_i_2
       (.I0(m3_div_overflow_i_reg_0),
        .I1(m3_div_overflow_i_reg_1),
        .I2(m3_div_overflow_i_reg_2),
        .I3(m2_piperun),
        .I4(m3_div_overflow_i_reg_3),
        .I5(m3_div_overflow_i_i_3_n_0),
        .O(m3_div_overflow_i_reg));
  LUT6 #(
    .INIT(64'h8880FFFF88800000)) 
    m3_div_overflow_i_i_3
       (.I0(D),
        .I1(negative_operands),
        .I2(m2_is_div_instr),
        .I3(m3_sel_div_res),
        .I4(m3_div_overflow_i_reg_2),
        .I5(m3_div_overflow_i_i_2_0),
        .O(m3_div_overflow_i_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_624
   (LO,
    O,
    S,
    \Q_reg[10] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[10] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[10] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_626
   (LO,
    O,
    S,
    \Q_reg[11] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input S;
  input \Q_reg[11] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire \Q_reg[11] ;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Q_reg[11] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_628
   (LO,
    O,
    S,
    \Q_reg[12] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[12] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[12] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_630
   (LO,
    O,
    S,
    \Q_reg[13] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[13] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[13] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_632
   (LO,
    O,
    S,
    \Q_reg[14] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[14] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[14] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_634
   (LO,
    O,
    S,
    \Q_reg[15] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input S;
  input \Q_reg[15] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire \Q_reg[15] ;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Q_reg[15] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_636
   (LO,
    O,
    S,
    \Q_reg[16] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[16] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[16] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_638
   (LO,
    O,
    S,
    \Q_reg[17] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[17] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[17] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_640
   (LO,
    O,
    S,
    \Q_reg[18] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[18] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[18] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_642
   (LO,
    O,
    S,
    \Q_reg[19] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input S;
  input \Q_reg[19] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire \Q_reg[19] ;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Q_reg[19] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_644
   (LO,
    O,
    S,
    \Q_reg[1] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[1] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[1] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_646
   (LO,
    O,
    S,
    \Q_reg[20] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[20] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[20] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_648
   (LO,
    O,
    S,
    \Q_reg[21] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[21] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[21] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_650
   (LO,
    O,
    S,
    \Q_reg[22] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[22] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[22] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_652
   (LO,
    O,
    S,
    \Q_reg[23] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input S;
  input \Q_reg[23] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire \Q_reg[23] ;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Q_reg[23] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_654
   (LO,
    O,
    S,
    \Q_reg[24] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[24] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[24] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_656
   (LO,
    O,
    S,
    \Q_reg[25] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[25] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[25] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_658
   (LO,
    O,
    S,
    \Q_reg[26] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[26] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[26] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_660
   (LO,
    O,
    S,
    \Q_reg[27] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input S;
  input \Q_reg[27] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire \Q_reg[27] ;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Q_reg[27] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_662
   (LO,
    O,
    S,
    \Q_reg[28] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[28] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[28] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_664
   (LO,
    O,
    S,
    \Q_reg[29] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[29] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[29] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_666
   (LO,
    O,
    S,
    \Q_reg[2] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[2] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[2] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_668
   (LO,
    O,
    S,
    \Q_reg[30] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[30] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[30] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_670
   (New_Q_Carry,
    LO,
    O,
    make_result_neg,
    \Q_reg[31] ,
    ex_div_unsigned,
    \Q_reg[31]_0 ,
    ex_start_div,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output [0:0]New_Q_Carry;
  output LO;
  output O;
  input make_result_neg;
  input \Q_reg[31] ;
  input ex_div_unsigned;
  input [0:0]\Q_reg[31]_0 ;
  input ex_start_div;
  input S;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire [0:0]New_Q_Carry;
  wire O;
  wire \Q_reg[31] ;
  wire [0:0]\Q_reg[31]_0 ;
  wire S;
  wire ex_div_unsigned;
  wire ex_start_div;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire make_result_neg;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(New_Q_Carry),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \Using_FPGA.Native_i_1__125 
       (.I0(make_result_neg),
        .I1(\Q_reg[31] ),
        .I2(ex_div_unsigned),
        .I3(\Q_reg[31]_0 ),
        .I4(ex_start_div),
        .O(New_Q_Carry));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_672
   (LO,
    O,
    S,
    \Q_reg[3] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output LO;
  output O;
  input S;
  input \Q_reg[3] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  output lopt_7;
  output lopt_8;
  input lopt_9;

  wire LO;
  wire O;
  wire \Q_reg[3] ;
  wire S;
  wire \^lopt_1 ;
  wire lopt_10;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = lopt_9;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_7 = \^lopt_8 ;
  assign lopt_8 = \^lopt_9 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Q_reg[3] ),
        .CO({\NLW_Using_FPGA.Native_I1_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.Native_I1_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({\^lopt_9 ,\^lopt_8 ,\^lopt_7 ,O}),
        .S({lopt_10,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_674
   (LO,
    O,
    S,
    \Q_reg[4] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[4] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[4] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_676
   (LO,
    O,
    S,
    \Q_reg[5] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[5] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[5] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_678
   (LO,
    O,
    S,
    \Q_reg[6] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[6] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[6] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_680
   (LO,
    O,
    S,
    \Q_reg[7] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output LO;
  output O;
  input S;
  input \Q_reg[7] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire LO;
  wire O;
  wire \Q_reg[7] ;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(\Q_reg[7] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,LO}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,O}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_682
   (LO,
    O,
    S,
    \Q_reg[8] ,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input \Q_reg[8] ;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire LO;
  wire O;
  wire \Q_reg[8] ;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_684
   (LO,
    O,
    S,
    CI,
    lopt,
    lopt_1,
    lopt_2);
  output LO;
  output O;
  input S;
  input CI;
  input lopt;
  output lopt_1;
  input lopt_2;

  wire \<const0> ;
  wire CI;
  wire LO;
  wire O;
  wire S;

  assign LO = lopt;
  assign O = lopt_2;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_854
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    EX_CarryIn,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input EX_CarryIn;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_856
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_858
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_860
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ex_databus_addr}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_862
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_864
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_866
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_868
   (EX_CarryOut,
    ex_alu_result,
    S,
    DI,
    EX_CarryIn,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_alu_result;
  input S;
  input DI;
  input EX_CarryIn;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryIn;
  wire EX_CarryOut;
  wire S;
  wire [0:0]ex_alu_result;

  assign EX_CarryOut = lopt;
  assign ex_alu_result = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_870
   (EX_CarryOut,
    ex_alu_result,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ex_alu_result;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_alu_result;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ex_alu_result}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_872
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire lopt_11;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [2:2]\NLW_Using_FPGA.Native_I1_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = lopt_11;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_11,\NLW_Using_FPGA.Native_I1_CARRY4_O_UNCONNECTED [2],\^lopt_10 ,ex_databus_addr}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_874
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_876
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_878
   (ex_sel_alu_reg,
    ex_databus_addr,
    EX_CarryOut,
    ex_sel_alu_res,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output ex_sel_alu_reg;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input ex_sel_alu_res;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire ex_sel_alu_reg;
  wire ex_sel_alu_res;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
  LUT2 #(
    .INIT(4'hB)) 
    \m0_Ex_Result_i[27]_i_2 
       (.I0(ex_databus_addr),
        .I1(ex_sel_alu_res),
        .O(ex_sel_alu_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_880
   (ex_sel_alu_reg,
    ex_databus_addr,
    EX_CarryOut,
    ex_sel_alu_res,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output ex_sel_alu_reg;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input ex_sel_alu_res;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire ex_sel_alu_reg;
  wire ex_sel_alu_res;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ex_databus_addr}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
  LUT2 #(
    .INIT(4'hB)) 
    \m0_Ex_Result_i[26]_i_2 
       (.I0(ex_databus_addr),
        .I1(ex_sel_alu_res),
        .O(ex_sel_alu_reg));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_882
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_884
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_886
   (ex_fwd,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[23] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output [0:0]ex_fwd;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[23] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire [0:0]ex_fwd;
  wire ex_sel_alu_res;
  wire \m0_Ex_Result_i_reg[23] ;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
  LUT4 #(
    .INIT(16'hAA30)) 
    \m0_Ex_Result_i[23]_i_1 
       (.I0(ex_databus_addr),
        .I1(\m0_Ex_Result_i_reg[23] ),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .O(ex_fwd));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_888
   (ex_fwd,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[22] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output [0:0]ex_fwd;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[22] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire [0:0]ex_fwd;
  wire ex_sel_alu_res;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire \m0_Ex_Result_i_reg[22] ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ex_databus_addr}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
  LUT4 #(
    .INIT(16'hAA30)) 
    \m0_Ex_Result_i[22]_i_1 
       (.I0(ex_databus_addr),
        .I1(\m0_Ex_Result_i_reg[22] ),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .O(ex_fwd));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_890
   (D,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[21] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output [0:0]D;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[21] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]D;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire ex_sel_alu_res;
  wire \m0_Ex_Result_i_reg[21] ;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
  LUT4 #(
    .INIT(16'hAA30)) 
    \m0_Ex_Result_i[21]_i_1 
       (.I0(ex_databus_addr),
        .I1(\m0_Ex_Result_i_reg[21] ),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_892
   (D,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[20] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output [0:0]D;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[20] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]D;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire ex_sel_alu_res;
  wire \m0_Ex_Result_i_reg[20] ;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
  LUT4 #(
    .INIT(16'hAA30)) 
    \m0_Ex_Result_i[20]_i_1 
       (.I0(ex_databus_addr),
        .I1(\m0_Ex_Result_i_reg[20] ),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_894
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_896
   (ex_fwd,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[19] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output [0:0]ex_fwd;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[19] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire [0:0]ex_fwd;
  wire ex_sel_alu_res;
  wire \m0_Ex_Result_i_reg[19] ;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
  LUT4 #(
    .INIT(16'hAA30)) 
    \m0_Ex_Result_i[19]_i_1 
       (.I0(ex_databus_addr),
        .I1(\m0_Ex_Result_i_reg[19] ),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .O(ex_fwd));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_898
   (D,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[18] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output [0:0]D;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[18] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire [0:0]D;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire ex_sel_alu_res;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire \m0_Ex_Result_i_reg[18] ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ex_databus_addr}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
  LUT4 #(
    .INIT(16'hAA30)) 
    \m0_Ex_Result_i[18]_i_1 
       (.I0(ex_databus_addr),
        .I1(\m0_Ex_Result_i_reg[18] ),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_900
   (D,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[17] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output [0:0]D;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[17] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]D;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire ex_sel_alu_res;
  wire \m0_Ex_Result_i_reg[17] ;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
  LUT4 #(
    .INIT(16'hAA30)) 
    \m0_Ex_Result_i[17]_i_1 
       (.I0(ex_databus_addr),
        .I1(\m0_Ex_Result_i_reg[17] ),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_902
   (D,
    ex_databus_addr,
    EX_CarryOut,
    \m0_Ex_Result_i_reg[16] ,
    ex_enable_sext_shift,
    ex_sel_alu_res,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output [0:0]D;
  output [0:0]ex_databus_addr;
  output EX_CarryOut;
  input \m0_Ex_Result_i_reg[16] ;
  input ex_enable_sext_shift;
  input ex_sel_alu_res;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire [0:0]D;
  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire ex_enable_sext_shift;
  wire ex_sel_alu_res;
  wire \m0_Ex_Result_i_reg[16] ;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
  LUT4 #(
    .INIT(16'hAA30)) 
    \m0_Ex_Result_i[16]_i_1 
       (.I0(ex_databus_addr),
        .I1(\m0_Ex_Result_i_reg[16] ),
        .I2(ex_enable_sext_shift),
        .I3(ex_sel_alu_res),
        .O(D));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_904
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_906
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ex_databus_addr}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_908
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_910
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_912
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  input lopt;
  input lopt_1;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;

  assign EX_CarryOut = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_914
   (EX_CarryOut,
    ex_databus_addr,
    S,
    DI,
    LO,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output EX_CarryOut;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input LO;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  output lopt_10;
  output lopt_11;

  wire DI;
  wire EX_CarryOut;
  wire LO;
  wire S;
  wire [0:0]ex_databus_addr;
  wire \^lopt_1 ;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign \^lopt_9  = lopt_8;
  assign lopt = \^lopt_1 ;
  assign lopt_10 = \^lopt_11 ;
  assign lopt_11 = lopt_12;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = \^lopt_10 ;
  (* OPT_MODIFIED = "MLO " *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.Native_I1_CARRY4 
       (.CI(LO),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,EX_CarryOut}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,DI}),
        .O({lopt_12,\^lopt_11 ,\^lopt_10 ,ex_databus_addr}),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "MB_MUXCY_XORCY" *) 
module microblaze_microblaze_0_0_MB_MUXCY_XORCY_915
   (\EX_Op2_reg[0] ,
    ex_databus_addr,
    S,
    DI,
    CI,
    lopt,
    lopt_1);
  output \EX_Op2_reg[0] ;
  output [0:0]ex_databus_addr;
  input S;
  input DI;
  input CI;
  input lopt;
  input lopt_1;

  wire CI;
  wire DI;
  wire \EX_Op2_reg[0] ;
  wire S;
  wire [0:0]ex_databus_addr;

  assign \EX_Op2_reg[0]  = lopt;
  assign ex_databus_addr = lopt_1;
endmodule

(* ORIG_REF_NAME = "MB_MUXF7" *) 
module microblaze_microblaze_0_0_MB_MUXF7
   (sel_input_i,
    Use_Next_Data,
    sel_input_iii_0,
    sel_input_delayslot,
    ex_branch_with_delayslot,
    \Using_FPGA.Native_0 );
  output sel_input_i;
  output Use_Next_Data;
  input sel_input_iii_0;
  input sel_input_delayslot;
  input ex_branch_with_delayslot;
  input \Using_FPGA.Native_0 ;

  wire Use_Next_Data;
  wire \Using_FPGA.Native_0 ;
  wire ex_branch_with_delayslot;
  wire sel_input_delayslot;
  wire sel_input_i;
  wire sel_input_iii_0;

  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Using_FPGA.Native 
       (.I0(sel_input_iii_0),
        .I1(sel_input_delayslot),
        .O(sel_input_i),
        .S(Use_Next_Data));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1 
       (.I0(ex_branch_with_delayslot),
        .I1(\Using_FPGA.Native_0 ),
        .O(Use_Next_Data));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[1]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[1]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[1]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[1]_i_2 [9:5]),
        .ADDRB(\EX_Op3[1]_i_2 [4:0]),
        .ADDRC(\EX_Op3[1]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_685
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[21]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[21]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[21]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[21]_i_2 [9:5]),
        .ADDRB(\EX_Op3[21]_i_2 [4:0]),
        .ADDRC(\EX_Op3[21]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_686
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[23]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[23]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[23]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[23]_i_2 [9:5]),
        .ADDRB(\EX_Op3[23]_i_2 [4:0]),
        .ADDRC(\EX_Op3[23]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_687
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[25]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[25]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[25]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[25]_i_2 [9:5]),
        .ADDRB(\EX_Op3[25]_i_2 [4:0]),
        .ADDRC(\EX_Op3[25]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_688
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[27]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[27]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[27]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[27]_i_2 [9:5]),
        .ADDRB(\EX_Op3[27]_i_2 [4:0]),
        .ADDRC(\EX_Op3[27]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_689
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[29]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[29]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[29]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[29]_i_2 [9:5]),
        .ADDRB(\EX_Op3[29]_i_2 [4:0]),
        .ADDRC(\EX_Op3[29]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_690
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[31]_i_3 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[31]_i_3 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[31]_i_3 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[31]_i_3 [9:5]),
        .ADDRB(\EX_Op3[31]_i_3 [4:0]),
        .ADDRC(\EX_Op3[31]_i_3 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_691
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[3]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[3]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[3]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[3]_i_2 [9:5]),
        .ADDRB(\EX_Op3[3]_i_2 [4:0]),
        .ADDRC(\EX_Op3[3]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_692
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[5]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[5]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[5]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[5]_i_2 [9:5]),
        .ADDRB(\EX_Op3[5]_i_2 [4:0]),
        .ADDRC(\EX_Op3[5]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_693
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[7]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[7]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[7]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[7]_i_2 [9:5]),
        .ADDRB(\EX_Op3[7]_i_2 [4:0]),
        .ADDRC(\EX_Op3[7]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_694
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[9]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[9]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[9]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[9]_i_2 [9:5]),
        .ADDRB(\EX_Op3[9]_i_2 [4:0]),
        .ADDRC(\EX_Op3[9]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_695
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[11]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[11]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[11]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[11]_i_2 [9:5]),
        .ADDRB(\EX_Op3[11]_i_2 [4:0]),
        .ADDRC(\EX_Op3[11]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_696
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[13]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[13]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[13]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[13]_i_2 [9:5]),
        .ADDRB(\EX_Op3[13]_i_2 [4:0]),
        .ADDRC(\EX_Op3[13]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_697
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[15]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[15]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[15]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[15]_i_2 [9:5]),
        .ADDRB(\EX_Op3[15]_i_2 [4:0]),
        .ADDRC(\EX_Op3[15]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_698
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[17]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[17]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[17]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[17]_i_2 [9:5]),
        .ADDRB(\EX_Op3[17]_i_2 [4:0]),
        .ADDRC(\EX_Op3[17]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_RAM32M" *) 
module microblaze_microblaze_0_0_MB_RAM32M_699
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[19]_i_2 ,
    ADDRD);
  output [1:0]GPR_Op1;
  output [1:0]GPR_Op2;
  output [1:0]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [1:0]WB_Fwd;
  input [14:0]\EX_Op3[19]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[19]_i_2 ;
  wire [1:0]GPR_Op1;
  wire [1:0]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire \Using_FPGA.Native_n_6 ;
  wire \Using_FPGA.Native_n_7 ;
  wire [1:0]WB_Fwd;
  wire wb_gpr_wr;

  (* box_type = "PRIMITIVE" *) 
  RAM32M #(
    .INIT_A(64'h0000000000000000),
    .INIT_B(64'h0000000000000000),
    .INIT_C(64'h0000000000000000),
    .INIT_D(64'h0000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \Using_FPGA.Native 
       (.ADDRA(\EX_Op3[19]_i_2 [9:5]),
        .ADDRB(\EX_Op3[19]_i_2 [4:0]),
        .ADDRC(\EX_Op3[19]_i_2 [14:10]),
        .ADDRD(ADDRD),
        .DIA(WB_Fwd),
        .DIB(WB_Fwd),
        .DIC(WB_Fwd),
        .DID(WB_Fwd),
        .DOA(GPR_Op1),
        .DOB(GPR_Op2),
        .DOC(GPR_Op3),
        .DOD({\Using_FPGA.Native_n_6 ,\Using_FPGA.Native_n_7 }),
        .WCLK(Clk),
        .WE(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E
   (Q_0,
    Q,
    Dbg_Clk);
  output Q_0;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q_0;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.SRL16E_1/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h001B),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q_0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized1
   (Dbg_TDO,
    Q,
    Dbg_Clk,
    Dbg_TDO_0,
    Dbg_TDO_1,
    TDO_Data_Reg__31,
    Data_Read_Reg_En,
    Status_Reg_En,
    Instr_Insert_Reg_En,
    Dbg_TDO_2,
    Config_Reg_En,
    Dbg_TDO_INST_0_i_1_0,
    Dbg_TDO_INST_0_i_1_1,
    Q5_out,
    Q_0,
    Q6_out);
  output Dbg_TDO;
  input [7:0]Q;
  input Dbg_Clk;
  input Dbg_TDO_0;
  input Dbg_TDO_1;
  input TDO_Data_Reg__31;
  input Data_Read_Reg_En;
  input Status_Reg_En;
  input Instr_Insert_Reg_En;
  input [1:0]Dbg_TDO_2;
  input Config_Reg_En;
  input Dbg_TDO_INST_0_i_1_0;
  input Dbg_TDO_INST_0_i_1_1;
  input Q5_out;
  input Q_0;
  input Q6_out;

  wire Config_Reg_En;
  wire Data_Read_Reg_En;
  wire Dbg_Clk;
  wire Dbg_TDO;
  wire Dbg_TDO_0;
  wire Dbg_TDO_1;
  wire [1:0]Dbg_TDO_2;
  wire Dbg_TDO_INST_0_i_14_n_0;
  wire Dbg_TDO_INST_0_i_1_0;
  wire Dbg_TDO_INST_0_i_1_1;
  wire Dbg_TDO_INST_0_i_1_n_0;
  wire Instr_Insert_Reg_En;
  wire [7:0]Q;
  wire Q11_in;
  wire Q5_out;
  wire Q6_out;
  wire Q_0;
  wire Status_Reg_En;
  wire TDO_Config_Word__16;
  wire TDO_Data_Reg__31;

  LUT6 #(
    .INIT(64'hFCFCFCFCFF00AAAA)) 
    Dbg_TDO_INST_0
       (.I0(Dbg_TDO_INST_0_i_1_n_0),
        .I1(Dbg_TDO_0),
        .I2(Dbg_TDO_1),
        .I3(TDO_Data_Reg__31),
        .I4(Data_Read_Reg_En),
        .I5(Status_Reg_En),
        .O(Dbg_TDO));
  LUT6 #(
    .INIT(64'hAAAAAAAACCC000C0)) 
    Dbg_TDO_INST_0_i_1
       (.I0(TDO_Config_Word__16),
        .I1(Instr_Insert_Reg_En),
        .I2(Dbg_TDO_2[1]),
        .I3(Q[0]),
        .I4(Dbg_TDO_2[0]),
        .I5(Config_Reg_En),
        .O(Dbg_TDO_INST_0_i_1_n_0));
  LUT6 #(
    .INIT(64'hCACAFFF0CACA0F00)) 
    Dbg_TDO_INST_0_i_14
       (.I0(Q11_in),
        .I1(Q5_out),
        .I2(Q[5]),
        .I3(Q_0),
        .I4(Q[4]),
        .I5(Q6_out),
        .O(Dbg_TDO_INST_0_i_14_n_0));
  LUT5 #(
    .INIT(32'hFFE400E4)) 
    Dbg_TDO_INST_0_i_7
       (.I0(Q[6]),
        .I1(Dbg_TDO_INST_0_i_14_n_0),
        .I2(Dbg_TDO_INST_0_i_1_0),
        .I3(Q[7]),
        .I4(Dbg_TDO_INST_0_i_1_1),
        .O(TDO_Config_Word__16));
  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.SRL16E_2/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0278),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q11_in));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized11
   (Q1_in,
    Q,
    Dbg_Clk);
  output Q1_in;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q1_in;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.SRL16E_4/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h2500),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q1_in));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized3
   (Q6_out,
    Q,
    Dbg_Clk);
  output Q6_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q6_out;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses[1].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'hFFFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q6_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized3_5
   (Q2_out,
    Q,
    Dbg_Clk);
  output Q2_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q2_out;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses[5].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'hFFFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q2_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized5
   (Q5_out,
    Q,
    Dbg_Clk);
  output Q5_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q5_out;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses[2].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h3FFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q5_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized5_6
   (Q1_out,
    Q,
    Dbg_Clk);
  output Q1_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q1_out;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses[6].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h3FFF),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q1_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized7
   (\Serial_Dbg_Intf.shift_count_reg[4] ,
    Q,
    Dbg_Clk,
    tdo_config_word1_0,
    Dbg_TDO_INST_0_i_7);
  output \Serial_Dbg_Intf.shift_count_reg[4] ;
  input [6:0]Q;
  input Dbg_Clk;
  input tdo_config_word1_0;
  input Dbg_TDO_INST_0_i_7;

  wire Dbg_Clk;
  wire Dbg_TDO_INST_0_i_7;
  wire [6:0]Q;
  wire \Serial_Dbg_Intf.shift_count_reg[4] ;
  wire \Use_unisim.MB_SRL16E_I1_n_0 ;
  wire tdo_config_word1_0;

  LUT6 #(
    .INIT(64'hCCAAF0F00000F0F0)) 
    Dbg_TDO_INST_0_i_16
       (.I0(\Use_unisim.MB_SRL16E_I1_n_0 ),
        .I1(tdo_config_word1_0),
        .I2(Dbg_TDO_INST_0_i_7),
        .I3(Q[4]),
        .I4(Q[6]),
        .I5(Q[5]),
        .O(\Serial_Dbg_Intf.shift_count_reg[4] ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Base_Vector " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Base_Vector[1].SRL16E_Base_Vector/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(\Use_unisim.MB_SRL16E_I1_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized7_2
   (tdo_config_word1_0,
    Q,
    Dbg_Clk);
  output tdo_config_word1_0;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire tdo_config_word1_0;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Base_Vector " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Base_Vector[2].SRL16E_Base_Vector/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(tdo_config_word1_0));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized7_3
   (Q4_out,
    Q,
    Dbg_Clk);
  output Q4_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q4_out;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses[3].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q4_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized7_4
   (\Serial_Dbg_Intf.shift_count_reg[5] ,
    Q,
    Dbg_Clk,
    Q1_out,
    Q4_out,
    Q2_out);
  output \Serial_Dbg_Intf.shift_count_reg[5] ;
  input [5:0]Q;
  input Dbg_Clk;
  input Q1_out;
  input Q4_out;
  input Q2_out;

  wire Dbg_Clk;
  wire [5:0]Q;
  wire Q1_out;
  wire Q2_out;
  wire Q3_out;
  wire Q4_out;
  wire \Serial_Dbg_Intf.shift_count_reg[5] ;

  LUT6 #(
    .INIT(64'hCACAFFF0CACA0F00)) 
    Dbg_TDO_INST_0_i_15
       (.I0(Q3_out),
        .I1(Q1_out),
        .I2(Q[5]),
        .I3(Q4_out),
        .I4(Q[4]),
        .I5(Q2_out),
        .O(\Serial_Dbg_Intf.shift_count_reg[5] ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses[4].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q3_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized7_7
   (Q0_out,
    Q,
    Dbg_Clk);
  output Q0_out;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q0_out;

  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses[7].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q0_out));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized7_8
   (\Serial_Dbg_Intf.shift_count_reg[5] ,
    Q,
    Dbg_Clk,
    Q1_in,
    Q0_out,
    Q2_in);
  output \Serial_Dbg_Intf.shift_count_reg[5] ;
  input [5:0]Q;
  input Dbg_Clk;
  input Q1_in;
  input Q0_out;
  input Q2_in;

  wire Dbg_Clk;
  wire [5:0]Q;
  wire Q0_out;
  wire Q1_in;
  wire Q2_in;
  wire Q3_in;
  wire \Serial_Dbg_Intf.shift_count_reg[5] ;

  LUT6 #(
    .INIT(64'hCACAFFF0CACA0F00)) 
    Dbg_TDO_INST_0_i_29
       (.I0(Q3_in),
        .I1(Q1_in),
        .I2(Q[5]),
        .I3(Q0_out),
        .I4(Q[4]),
        .I5(Q2_in),
        .O(\Serial_Dbg_Intf.shift_count_reg[5] ));
  (* box_type = "PRIMITIVE" *) 
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.The_Cache_Addresses[8].SRL16E_Cache_I/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q3_in));
endmodule

(* ORIG_REF_NAME = "MB_SRL16E" *) 
module microblaze_microblaze_0_0_MB_SRL16E__parameterized9
   (Q2_in,
    Q,
    Dbg_Clk);
  output Q2_in;
  input [3:0]Q;
  input Dbg_Clk;

  wire Dbg_Clk;
  wire [3:0]Q;
  wire Q2_in;

  (* box_type = "PRIMITIVE" *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Serial_Dbg_Intf.SRL16E_3/Use_unisim.MB_SRL16E_I1 " *) 
  SRL16E #(
    .INIT(16'h0020),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16E_I1 
       (.A0(Q[0]),
        .A1(Q[1]),
        .A2(Q[2]),
        .A3(Q[3]),
        .CE(1'b0),
        .CLK(Dbg_Clk),
        .D(1'b0),
        .Q(Q2_in));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module microblaze_microblaze_0_0_MB_SRLC16E
   (SRL16_Sel_7,
    which_pc__0,
    SRL16_MC15_7,
    Address,
    Dbg_Clk,
    Dbg_Reg_En);
  output SRL16_Sel_7;
  output which_pc__0;
  input SRL16_MC15_7;
  input [3:0]Address;
  input Dbg_Clk;
  input [0:7]Dbg_Reg_En;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire SRL16_MC15_7;
  wire SRL16_Sel_7;
  wire \Use_unisim.MB_SRL16CE_I1_i_2_n_0 ;
  wire \Use_unisim.MB_SRL16CE_I1_n_1 ;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_7),
        .Q(SRL16_Sel_7),
        .Q15(\Use_unisim.MB_SRL16CE_I1_n_1 ));
  LUT6 #(
    .INIT(64'h0000000000000100)) 
    \Use_unisim.MB_SRL16CE_I1_i_1 
       (.I0(Dbg_Reg_En[4]),
        .I1(Dbg_Reg_En[5]),
        .I2(Dbg_Reg_En[6]),
        .I3(Dbg_Reg_En[3]),
        .I4(Dbg_Reg_En[7]),
        .I5(\Use_unisim.MB_SRL16CE_I1_i_2_n_0 ),
        .O(which_pc__0));
  LUT3 #(
    .INIT(8'hFE)) 
    \Use_unisim.MB_SRL16CE_I1_i_2 
       (.I0(Dbg_Reg_En[0]),
        .I1(Dbg_Reg_En[1]),
        .I2(Dbg_Reg_En[2]),
        .O(\Use_unisim.MB_SRL16CE_I1_i_2_n_0 ));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module microblaze_microblaze_0_0_MB_SRLC16E_16
   (SRL16_Sel_6,
    SRL16_MC15_7,
    which_pc__0,
    SRL16_MC15_6,
    Address,
    Dbg_Clk);
  output SRL16_Sel_6;
  output SRL16_MC15_7;
  input which_pc__0;
  input SRL16_MC15_6;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_6;
  wire SRL16_MC15_7;
  wire SRL16_Sel_6;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_6),
        .Q(SRL16_Sel_6),
        .Q15(SRL16_MC15_7));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module microblaze_microblaze_0_0_MB_SRLC16E_18
   (SRL16_Sel_5,
    SRL16_MC15_6,
    which_pc__0,
    SRL16_MC15_5,
    Address,
    Dbg_Clk);
  output SRL16_Sel_5;
  output SRL16_MC15_6;
  input which_pc__0;
  input SRL16_MC15_5;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_5;
  wire SRL16_MC15_6;
  wire SRL16_Sel_5;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_5),
        .Q(SRL16_Sel_5),
        .Q15(SRL16_MC15_6));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module microblaze_microblaze_0_0_MB_SRLC16E_20
   (SRL16_Sel_4,
    SRL16_MC15_5,
    which_pc__0,
    SRL16_MC15_4,
    Address,
    Dbg_Clk);
  output SRL16_Sel_4;
  output SRL16_MC15_5;
  input which_pc__0;
  input SRL16_MC15_4;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_4;
  wire SRL16_MC15_5;
  wire SRL16_Sel_4;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_4),
        .Q(SRL16_Sel_4),
        .Q15(SRL16_MC15_5));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module microblaze_microblaze_0_0_MB_SRLC16E_22
   (SRL16_Sel_3,
    SRL16_MC15_4,
    which_pc__0,
    SRL16_MC15_3,
    Address,
    Dbg_Clk);
  output SRL16_Sel_3;
  output SRL16_MC15_4;
  input which_pc__0;
  input SRL16_MC15_3;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_3;
  wire SRL16_MC15_4;
  wire SRL16_Sel_3;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_3),
        .Q(SRL16_Sel_3),
        .Q15(SRL16_MC15_4));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module microblaze_microblaze_0_0_MB_SRLC16E_24
   (SRL16_Sel_2,
    SRL16_MC15_3,
    which_pc__0,
    SRL16_MC15_2,
    Address,
    Dbg_Clk);
  output SRL16_Sel_2;
  output SRL16_MC15_3;
  input which_pc__0;
  input SRL16_MC15_2;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_2;
  wire SRL16_MC15_3;
  wire SRL16_Sel_2;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_2),
        .Q(SRL16_Sel_2),
        .Q15(SRL16_MC15_3));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module microblaze_microblaze_0_0_MB_SRLC16E_26
   (SRL16_Sel_1,
    SRL16_MC15_2,
    which_pc__0,
    SRL16_MC15_1,
    Address,
    Dbg_Clk);
  output SRL16_Sel_1;
  output SRL16_MC15_2;
  input which_pc__0;
  input SRL16_MC15_1;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire SRL16_MC15_1;
  wire SRL16_MC15_2;
  wire SRL16_Sel_1;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(SRL16_MC15_1),
        .Q(SRL16_Sel_1),
        .Q15(SRL16_MC15_2));
endmodule

(* ORIG_REF_NAME = "MB_SRLC16E" *) 
module microblaze_microblaze_0_0_MB_SRLC16E_28
   (SRL16_Sel_0,
    SRL16_MC15_1,
    which_pc__0,
    Dbg_TDI,
    Address,
    Dbg_Clk);
  output SRL16_Sel_0;
  output SRL16_MC15_1;
  input which_pc__0;
  input Dbg_TDI;
  input [3:0]Address;
  input Dbg_Clk;

  wire [3:0]Address;
  wire Dbg_Clk;
  wire Dbg_TDI;
  wire SRL16_MC15_1;
  wire SRL16_Sel_0;
  wire which_pc__0;

  (* box_type = "PRIMITIVE" *) 
  SRLC16E #(
    .INIT(16'h0000),
    .IS_CLK_INVERTED(1'b0)) 
    \Use_unisim.MB_SRL16CE_I1 
       (.A0(Address[0]),
        .A1(Address[1]),
        .A2(Address[2]),
        .A3(Address[3]),
        .CE(which_pc__0),
        .CLK(Dbg_Clk),
        .D(Dbg_TDI),
        .Q(SRL16_Sel_0),
        .Q15(SRL16_MC15_1));
endmodule

(* ORIG_REF_NAME = "MMU_ff" *) 
module microblaze_microblaze_0_0_MMU_ff
   (\m1_databus_addr_i_reg[0]_0 ,
    Q,
    \if4_addr_i_reg[0]_0 ,
    sync_reset,
    \m0_databus_addr_i_reg[0]_0 ,
    D,
    Clk,
    E,
    m2_piperun,
    \if3_addr_i_reg[0]_0 ,
    m3_piperun,
    if2_piperun,
    if3_piperun);
  output [29:0]\m1_databus_addr_i_reg[0]_0 ;
  output [31:0]Q;
  output [31:0]\if4_addr_i_reg[0]_0 ;
  input sync_reset;
  input \m0_databus_addr_i_reg[0]_0 ;
  input [29:0]D;
  input Clk;
  input [0:0]E;
  input m2_piperun;
  input [63:0]\if3_addr_i_reg[0]_0 ;
  input m3_piperun;
  input if2_piperun;
  input if3_piperun;

  wire Clk;
  wire [29:0]D;
  wire [0:0]E;
  wire [31:0]Q;
  wire if2_piperun;
  wire [0:31]if3_addr_i;
  wire [63:0]\if3_addr_i_reg[0]_0 ;
  wire if3_piperun;
  wire [31:0]\if4_addr_i_reg[0]_0 ;
  wire [0:29]m0_databus_addr;
  wire \m0_databus_addr_i_reg[0]_0 ;
  wire [29:0]\m1_databus_addr_i_reg[0]_0 ;
  wire m2_piperun;
  wire [0:31]m3_databus_addr_i;
  wire m3_piperun;
  wire sync_reset;

  FDRE \WB_DataBus_Addr_reg[0] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[0]),
        .Q(Q[31]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[10] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[10]),
        .Q(Q[21]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[11] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[11]),
        .Q(Q[20]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[12] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[12]),
        .Q(Q[19]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[13] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[13]),
        .Q(Q[18]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[14] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[14]),
        .Q(Q[17]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[15] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[15]),
        .Q(Q[16]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[16] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[16]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[17] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[17]),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[18] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[18]),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[19] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[19]),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[1] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[1]),
        .Q(Q[30]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[20] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[20]),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[21] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[21]),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[22] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[22]),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[23] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[23]),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[24] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[24]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[25] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[25]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[26] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[26]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[27] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[27]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[28] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[28]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[29] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[29]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[2] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[2]),
        .Q(Q[29]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[30] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[30]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[31] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[31]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[3] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[3]),
        .Q(Q[28]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[4] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[4]),
        .Q(Q[27]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[5] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[5]),
        .Q(Q[26]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[6] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[6]),
        .Q(Q[25]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[7] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[7]),
        .Q(Q[24]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[8] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[8]),
        .Q(Q[23]),
        .R(sync_reset));
  FDRE \WB_DataBus_Addr_reg[9] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(m3_databus_addr_i[9]),
        .Q(Q[22]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[0] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [63]),
        .Q(if3_addr_i[0]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[10] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [53]),
        .Q(if3_addr_i[10]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[11] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [52]),
        .Q(if3_addr_i[11]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[12] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [51]),
        .Q(if3_addr_i[12]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[13] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [50]),
        .Q(if3_addr_i[13]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[14] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [49]),
        .Q(if3_addr_i[14]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[15] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [48]),
        .Q(if3_addr_i[15]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[16] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [47]),
        .Q(if3_addr_i[16]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[17] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [46]),
        .Q(if3_addr_i[17]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[18] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [45]),
        .Q(if3_addr_i[18]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[19] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [44]),
        .Q(if3_addr_i[19]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[1] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [62]),
        .Q(if3_addr_i[1]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[20] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [43]),
        .Q(if3_addr_i[20]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[21] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [42]),
        .Q(if3_addr_i[21]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[22] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [41]),
        .Q(if3_addr_i[22]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[23] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [40]),
        .Q(if3_addr_i[23]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[24] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [39]),
        .Q(if3_addr_i[24]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[25] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [38]),
        .Q(if3_addr_i[25]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[26] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [37]),
        .Q(if3_addr_i[26]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[27] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [36]),
        .Q(if3_addr_i[27]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[28] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [35]),
        .Q(if3_addr_i[28]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[29] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [34]),
        .Q(if3_addr_i[29]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[2] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [61]),
        .Q(if3_addr_i[2]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[30] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [33]),
        .Q(if3_addr_i[30]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[31] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [32]),
        .Q(if3_addr_i[31]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[3] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [60]),
        .Q(if3_addr_i[3]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[4] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [59]),
        .Q(if3_addr_i[4]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[5] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [58]),
        .Q(if3_addr_i[5]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[6] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [57]),
        .Q(if3_addr_i[6]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[7] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [56]),
        .Q(if3_addr_i[7]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[8] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [55]),
        .Q(if3_addr_i[8]),
        .R(sync_reset));
  FDRE \if3_addr_i_reg[9] 
       (.C(Clk),
        .CE(if2_piperun),
        .D(\if3_addr_i_reg[0]_0 [54]),
        .Q(if3_addr_i[9]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[0] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[0]),
        .Q(\if4_addr_i_reg[0]_0 [31]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[10] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[10]),
        .Q(\if4_addr_i_reg[0]_0 [21]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[11] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[11]),
        .Q(\if4_addr_i_reg[0]_0 [20]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[12] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[12]),
        .Q(\if4_addr_i_reg[0]_0 [19]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[13] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[13]),
        .Q(\if4_addr_i_reg[0]_0 [18]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[14] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[14]),
        .Q(\if4_addr_i_reg[0]_0 [17]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[15] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[15]),
        .Q(\if4_addr_i_reg[0]_0 [16]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[16] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[16]),
        .Q(\if4_addr_i_reg[0]_0 [15]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[17] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[17]),
        .Q(\if4_addr_i_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[18] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[18]),
        .Q(\if4_addr_i_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[19] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[19]),
        .Q(\if4_addr_i_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[1] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[1]),
        .Q(\if4_addr_i_reg[0]_0 [30]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[20] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[20]),
        .Q(\if4_addr_i_reg[0]_0 [11]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[21] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[21]),
        .Q(\if4_addr_i_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[22] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[22]),
        .Q(\if4_addr_i_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[23] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[23]),
        .Q(\if4_addr_i_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[24] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[24]),
        .Q(\if4_addr_i_reg[0]_0 [7]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[25] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[25]),
        .Q(\if4_addr_i_reg[0]_0 [6]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[26] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[26]),
        .Q(\if4_addr_i_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[27] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[27]),
        .Q(\if4_addr_i_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[28] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[28]),
        .Q(\if4_addr_i_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[29] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[29]),
        .Q(\if4_addr_i_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[2] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[2]),
        .Q(\if4_addr_i_reg[0]_0 [29]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[30] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[30]),
        .Q(\if4_addr_i_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[31] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[31]),
        .Q(\if4_addr_i_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[3] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[3]),
        .Q(\if4_addr_i_reg[0]_0 [28]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[4] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[4]),
        .Q(\if4_addr_i_reg[0]_0 [27]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[5] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[5]),
        .Q(\if4_addr_i_reg[0]_0 [26]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[6] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[6]),
        .Q(\if4_addr_i_reg[0]_0 [25]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[7] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[7]),
        .Q(\if4_addr_i_reg[0]_0 [24]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[8] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[8]),
        .Q(\if4_addr_i_reg[0]_0 [23]),
        .R(sync_reset));
  FDRE \if4_addr_i_reg[9] 
       (.C(Clk),
        .CE(if3_piperun),
        .D(if3_addr_i[9]),
        .Q(\if4_addr_i_reg[0]_0 [22]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[0] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[29]),
        .Q(m0_databus_addr[0]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[10] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[19]),
        .Q(m0_databus_addr[10]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[11] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[18]),
        .Q(m0_databus_addr[11]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[12] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[17]),
        .Q(m0_databus_addr[12]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[13] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[16]),
        .Q(m0_databus_addr[13]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[14] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[15]),
        .Q(m0_databus_addr[14]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[15] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[14]),
        .Q(m0_databus_addr[15]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[16] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[13]),
        .Q(m0_databus_addr[16]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[17] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[12]),
        .Q(m0_databus_addr[17]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[18] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[11]),
        .Q(m0_databus_addr[18]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[19] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[10]),
        .Q(m0_databus_addr[19]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[1] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[28]),
        .Q(m0_databus_addr[1]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[20] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[9]),
        .Q(m0_databus_addr[20]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[21] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[8]),
        .Q(m0_databus_addr[21]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[22] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[7]),
        .Q(m0_databus_addr[22]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[23] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[6]),
        .Q(m0_databus_addr[23]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[24] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[5]),
        .Q(m0_databus_addr[24]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[25] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[4]),
        .Q(m0_databus_addr[25]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[26] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[3]),
        .Q(m0_databus_addr[26]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[27] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[2]),
        .Q(m0_databus_addr[27]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[28] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[1]),
        .Q(m0_databus_addr[28]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[29] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[0]),
        .Q(m0_databus_addr[29]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[2] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[27]),
        .Q(m0_databus_addr[2]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[3] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[26]),
        .Q(m0_databus_addr[3]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[4] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[25]),
        .Q(m0_databus_addr[4]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[5] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[24]),
        .Q(m0_databus_addr[5]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[6] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[23]),
        .Q(m0_databus_addr[6]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[7] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[22]),
        .Q(m0_databus_addr[7]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[8] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[21]),
        .Q(m0_databus_addr[8]),
        .R(sync_reset));
  FDRE \m0_databus_addr_i_reg[9] 
       (.C(Clk),
        .CE(\m0_databus_addr_i_reg[0]_0 ),
        .D(D[20]),
        .Q(m0_databus_addr[9]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[0] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[0]),
        .Q(\m1_databus_addr_i_reg[0]_0 [29]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[10] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[10]),
        .Q(\m1_databus_addr_i_reg[0]_0 [19]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[11] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[11]),
        .Q(\m1_databus_addr_i_reg[0]_0 [18]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[12] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[12]),
        .Q(\m1_databus_addr_i_reg[0]_0 [17]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[13] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[13]),
        .Q(\m1_databus_addr_i_reg[0]_0 [16]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[14] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[14]),
        .Q(\m1_databus_addr_i_reg[0]_0 [15]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[15] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[15]),
        .Q(\m1_databus_addr_i_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[16] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[16]),
        .Q(\m1_databus_addr_i_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[17] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[17]),
        .Q(\m1_databus_addr_i_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[18] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[18]),
        .Q(\m1_databus_addr_i_reg[0]_0 [11]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[19] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[19]),
        .Q(\m1_databus_addr_i_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[1]),
        .Q(\m1_databus_addr_i_reg[0]_0 [28]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[20] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[20]),
        .Q(\m1_databus_addr_i_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[21] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[21]),
        .Q(\m1_databus_addr_i_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[22] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[22]),
        .Q(\m1_databus_addr_i_reg[0]_0 [7]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[23] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[23]),
        .Q(\m1_databus_addr_i_reg[0]_0 [6]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[24] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[24]),
        .Q(\m1_databus_addr_i_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[25] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[25]),
        .Q(\m1_databus_addr_i_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[26] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[26]),
        .Q(\m1_databus_addr_i_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[27] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[27]),
        .Q(\m1_databus_addr_i_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[28] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[28]),
        .Q(\m1_databus_addr_i_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[29] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[29]),
        .Q(\m1_databus_addr_i_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[2] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[2]),
        .Q(\m1_databus_addr_i_reg[0]_0 [27]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[3] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[3]),
        .Q(\m1_databus_addr_i_reg[0]_0 [26]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[4] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[4]),
        .Q(\m1_databus_addr_i_reg[0]_0 [25]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[5] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[5]),
        .Q(\m1_databus_addr_i_reg[0]_0 [24]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[6] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[6]),
        .Q(\m1_databus_addr_i_reg[0]_0 [23]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[7] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[7]),
        .Q(\m1_databus_addr_i_reg[0]_0 [22]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[8] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[8]),
        .Q(\m1_databus_addr_i_reg[0]_0 [21]),
        .R(sync_reset));
  FDRE \m1_databus_addr_i_reg[9] 
       (.C(Clk),
        .CE(E),
        .D(m0_databus_addr[9]),
        .Q(\m1_databus_addr_i_reg[0]_0 [20]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[0] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [31]),
        .Q(m3_databus_addr_i[0]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[10] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [21]),
        .Q(m3_databus_addr_i[10]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[11] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [20]),
        .Q(m3_databus_addr_i[11]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[12] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [19]),
        .Q(m3_databus_addr_i[12]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[13] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [18]),
        .Q(m3_databus_addr_i[13]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[14] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [17]),
        .Q(m3_databus_addr_i[14]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[15] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [16]),
        .Q(m3_databus_addr_i[15]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[16] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [15]),
        .Q(m3_databus_addr_i[16]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[17] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [14]),
        .Q(m3_databus_addr_i[17]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[18] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [13]),
        .Q(m3_databus_addr_i[18]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[19] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [12]),
        .Q(m3_databus_addr_i[19]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[1] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [30]),
        .Q(m3_databus_addr_i[1]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[20] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [11]),
        .Q(m3_databus_addr_i[20]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[21] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [10]),
        .Q(m3_databus_addr_i[21]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[22] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [9]),
        .Q(m3_databus_addr_i[22]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[23] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [8]),
        .Q(m3_databus_addr_i[23]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[24] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [7]),
        .Q(m3_databus_addr_i[24]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[25] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [6]),
        .Q(m3_databus_addr_i[25]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[26] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [5]),
        .Q(m3_databus_addr_i[26]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[27] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [4]),
        .Q(m3_databus_addr_i[27]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[28] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [3]),
        .Q(m3_databus_addr_i[28]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[29] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [2]),
        .Q(m3_databus_addr_i[29]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[2] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [29]),
        .Q(m3_databus_addr_i[2]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[30] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [1]),
        .Q(m3_databus_addr_i[30]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[31] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [0]),
        .Q(m3_databus_addr_i[31]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[3] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [28]),
        .Q(m3_databus_addr_i[3]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[4] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [27]),
        .Q(m3_databus_addr_i[4]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[5] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [26]),
        .Q(m3_databus_addr_i[5]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[6] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [25]),
        .Q(m3_databus_addr_i[6]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[7] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [24]),
        .Q(m3_databus_addr_i[7]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[8] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [23]),
        .Q(m3_databus_addr_i[8]),
        .R(sync_reset));
  FDRE \m3_databus_addr_i_reg[9] 
       (.C(Clk),
        .CE(m2_piperun),
        .D(\if3_addr_i_reg[0]_0 [22]),
        .Q(m3_databus_addr_i[9]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "MSR_Reg_ff" *) 
module microblaze_microblaze_0_0_MSR_Reg_ff
   (ex_MSR_i,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    EX_CarryIn,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    m3_msr,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    wb_msr,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    \Using_FPGA.Native_20 ,
    \of_MSR_i_reg[22]_0 ,
    \of_MSR_i_reg[25]_0 ,
    wb_exception_from_m3_reg_rep__0,
    D,
    sync_reset,
    D_2,
    Clk,
    \Using_FPGA.Native_21 ,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    \Using_FPGA.Native_25 ,
    \Using_FPGA.Native_26 ,
    \Using_FPGA.Native_27 ,
    \Using_FPGA.Native_28 ,
    \Using_FPGA.Native_29 ,
    \Using_FPGA.Native_30 ,
    \Using_FPGA.Native_31 ,
    \Using_FPGA.Native_32 ,
    \Using_FPGA.Native_33 ,
    \Using_FPGA.Native_34 ,
    \Using_FPGA.Native_35 ,
    \Using_FPGA.Native_36 ,
    \Using_FPGA.Native_37 ,
    \Using_FPGA.Native_38 ,
    \Using_FPGA.Native_39 ,
    \Using_FPGA.Native_40 ,
    \Using_FPGA.Native_41 ,
    \Using_FPGA.Native_42 ,
    \Using_FPGA.Native_43 ,
    \Using_FPGA.Native_44 ,
    \of_MSR_i_reg[22]_1 ,
    \of_MSR_i_reg[17]_0 ,
    read_register_MSR_1,
    \data_rd_reg_reg[25] ,
    wb_gpr_wr_dbg,
    \data_rd_reg_reg[30] ,
    WB_Fwd,
    \Using_FPGA.Native_45 ,
    wb_div_zero_overflow,
    wb_msr_clear_bip,
    \Using_FPGA.Native_46 ,
    m2_piperun,
    m1_piperun,
    m0_piperun,
    m3_piperun,
    of_piperun,
    \of_MSR_i_reg[25]_1 );
  output [10:0]ex_MSR_i;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output EX_CarryIn;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output \Using_FPGA.Native_9 ;
  output [0:0]m3_msr;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  output \Using_FPGA.Native_12 ;
  output \Using_FPGA.Native_13 ;
  output \Using_FPGA.Native_14 ;
  output \Using_FPGA.Native_15 ;
  output \Using_FPGA.Native_16 ;
  output \Using_FPGA.Native_17 ;
  output [3:0]wb_msr;
  output \Using_FPGA.Native_18 ;
  output \Using_FPGA.Native_19 ;
  output \Using_FPGA.Native_20 ;
  output [4:0]\of_MSR_i_reg[22]_0 ;
  output [1:0]\of_MSR_i_reg[25]_0 ;
  output [1:0]wb_exception_from_m3_reg_rep__0;
  output [3:0]D;
  input sync_reset;
  input D_2;
  input Clk;
  input \Using_FPGA.Native_21 ;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  input \Using_FPGA.Native_25 ;
  input \Using_FPGA.Native_26 ;
  input \Using_FPGA.Native_27 ;
  input \Using_FPGA.Native_28 ;
  input \Using_FPGA.Native_29 ;
  input \Using_FPGA.Native_30 ;
  input \Using_FPGA.Native_31 ;
  input \Using_FPGA.Native_32 ;
  input \Using_FPGA.Native_33 ;
  input \Using_FPGA.Native_34 ;
  input \Using_FPGA.Native_35 ;
  input \Using_FPGA.Native_36 ;
  input \Using_FPGA.Native_37 ;
  input \Using_FPGA.Native_38 ;
  input \Using_FPGA.Native_39 ;
  input \Using_FPGA.Native_40 ;
  input \Using_FPGA.Native_41 ;
  input \Using_FPGA.Native_42 ;
  input \Using_FPGA.Native_43 ;
  input \Using_FPGA.Native_44 ;
  input [3:0]\of_MSR_i_reg[22]_1 ;
  input [14:0]\of_MSR_i_reg[17]_0 ;
  input read_register_MSR_1;
  input [3:0]\data_rd_reg_reg[25] ;
  input wb_gpr_wr_dbg;
  input \data_rd_reg_reg[30] ;
  input [3:0]WB_Fwd;
  input \Using_FPGA.Native_45 ;
  input wb_div_zero_overflow;
  input wb_msr_clear_bip;
  input \Using_FPGA.Native_46 ;
  input m2_piperun;
  input m1_piperun;
  input m0_piperun;
  input m3_piperun;
  input of_piperun;
  input [1:0]\of_MSR_i_reg[25]_1 ;

  wire Clk;
  wire [3:0]D;
  wire D_2;
  wire EX_CarryIn;
  wire \Gen_M0_Bit_DFF[28].Using_Low.m0_msr_FF_n_0 ;
  wire \Gen_M0_Bit_DFF[29].Using_Low.m0_msr_FF_n_0 ;
  wire \Gen_M1_Bit_DFF[28].Using_Low.m1_msr_FF_n_0 ;
  wire \Gen_M1_Bit_DFF[29].Using_Low.m1_msr_FF_n_0 ;
  wire \Gen_M2_Bit_DFF[28].Using_Low.m2_msr_FF_n_0 ;
  wire \Gen_M2_Bit_DFF[29].Using_Low.m2_msr_FF_n_0 ;
  wire \Gen_M3_Bit_DFF[25].Using_Low.m3_msr_FF_n_1 ;
  wire \Gen_M3_Bit_DFF[29].Using_Low.m3_msr_FF_n_0 ;
  wire \Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF_n_2 ;
  wire \Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF_n_5 ;
  wire \Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF_n_2 ;
  wire \Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF_n_5 ;
  wire \Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF_n_2 ;
  wire \Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF_n_5 ;
  wire \Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF_n_2 ;
  wire \Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF_n_5 ;
  wire \Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF_n_2 ;
  wire \Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF_n_5 ;
  wire \Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF_n_2 ;
  wire \Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF_n_5 ;
  wire \Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF_n_2 ;
  wire \Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF_n_5 ;
  wire \Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF_n_2 ;
  wire \Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF_n_5 ;
  wire \Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF_n_2 ;
  wire \Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF_n_5 ;
  wire \Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF_n_2 ;
  wire \Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF_n_5 ;
  wire \Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF_n_2 ;
  wire \Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF_n_5 ;
  wire \Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF_n_5 ;
  wire \Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF_n_6 ;
  wire \Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF_n_2 ;
  wire \Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF_n_3 ;
  wire \Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF_n_4 ;
  wire \Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF_n_5 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_25 ;
  wire \Using_FPGA.Native_26 ;
  wire \Using_FPGA.Native_27 ;
  wire \Using_FPGA.Native_28 ;
  wire \Using_FPGA.Native_29 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_30 ;
  wire \Using_FPGA.Native_31 ;
  wire \Using_FPGA.Native_32 ;
  wire \Using_FPGA.Native_33 ;
  wire \Using_FPGA.Native_34 ;
  wire \Using_FPGA.Native_35 ;
  wire \Using_FPGA.Native_36 ;
  wire \Using_FPGA.Native_37 ;
  wire \Using_FPGA.Native_38 ;
  wire \Using_FPGA.Native_39 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_40 ;
  wire \Using_FPGA.Native_41 ;
  wire \Using_FPGA.Native_42 ;
  wire \Using_FPGA.Native_43 ;
  wire \Using_FPGA.Native_44 ;
  wire \Using_FPGA.Native_45 ;
  wire \Using_FPGA.Native_46 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [3:0]WB_Fwd;
  wire [3:0]\data_rd_reg_reg[25] ;
  wire \data_rd_reg_reg[30] ;
  wire [10:0]ex_MSR_i;
  wire [17:31]m0_MSR_i;
  wire m0_piperun;
  wire [17:31]m1_MSR_i;
  wire m1_piperun;
  wire [17:31]m2_MSR_i;
  wire m2_piperun;
  wire [17:31]m3_MSR_i;
  wire [0:0]m3_msr;
  wire m3_piperun;
  wire [17:31]of_MSR_cmb;
  (* RTL_KEEP = "true" *) wire [31:17]of_MSR_cmb_pipemove;
  (* RTL_KEEP = "true" *) wire [31:17]of_MSR_cmb_pipestall;
  wire [4:0]\^of_MSR_i_reg[22]_0 ;
  wire [1:0]\of_MSR_i_reg[25]_1 ;
  wire of_piperun;
  wire read_register_MSR_1;
  wire sync_reset;
  wire wb_div_zero_overflow;
  wire wb_gpr_wr_dbg;
  wire [3:0]wb_msr;
  wire wb_msr_clear_bip;

  assign of_MSR_cmb_pipemove[31] = \of_MSR_i_reg[17]_0 [0];
  assign of_MSR_cmb_pipemove[30] = \of_MSR_i_reg[17]_0 [1];
  assign of_MSR_cmb_pipemove[29] = \of_MSR_i_reg[17]_0 [2];
  assign of_MSR_cmb_pipemove[28] = \of_MSR_i_reg[17]_0 [3];
  assign of_MSR_cmb_pipemove[27] = \of_MSR_i_reg[17]_0 [4];
  assign of_MSR_cmb_pipemove[26] = \of_MSR_i_reg[17]_0 [5];
  assign of_MSR_cmb_pipemove[25] = \of_MSR_i_reg[17]_0 [6];
  assign of_MSR_cmb_pipemove[24] = \of_MSR_i_reg[17]_0 [7];
  assign of_MSR_cmb_pipemove[23] = \of_MSR_i_reg[17]_0 [8];
  assign of_MSR_cmb_pipemove[22] = \of_MSR_i_reg[17]_0 [9];
  assign of_MSR_cmb_pipemove[21] = \of_MSR_i_reg[17]_0 [10];
  assign of_MSR_cmb_pipemove[20] = \of_MSR_i_reg[17]_0 [11];
  assign of_MSR_cmb_pipemove[19] = \of_MSR_i_reg[17]_0 [12];
  assign of_MSR_cmb_pipemove[18] = \of_MSR_i_reg[17]_0 [13];
  assign of_MSR_cmb_pipemove[17] = \of_MSR_i_reg[17]_0 [14];
  assign of_MSR_cmb_pipestall[30] = \of_MSR_i_reg[22]_1 [0];
  assign of_MSR_cmb_pipestall[28] = \of_MSR_i_reg[22]_1 [1];
  assign of_MSR_cmb_pipestall[23] = \of_MSR_i_reg[22]_1 [2];
  assign of_MSR_cmb_pipestall[22] = \of_MSR_i_reg[22]_1 [3];
  assign \of_MSR_i_reg[22]_0 [4:3] = \^of_MSR_i_reg[22]_0 [4:3];
  assign \of_MSR_i_reg[22]_0 [2] = of_MSR_cmb_pipestall[25];
  assign \of_MSR_i_reg[22]_0 [1:0] = \^of_MSR_i_reg[22]_0 [1:0];
  assign \of_MSR_i_reg[25]_0 [1] = of_MSR_cmb_pipestall[25];
  assign \of_MSR_i_reg[25]_0 [0] = of_MSR_cmb_pipestall[30];
  assign wb_exception_from_m3_reg_rep__0[1] = of_MSR_cmb_pipemove[25];
  assign wb_exception_from_m3_reg_rep__0[0] = of_MSR_cmb_pipemove[30];
  microblaze_microblaze_0_0_MB_FDR_700 \Gen_Ex_Bit_DFF[17].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .D_2(D_2),
        .ex_MSR_i(ex_MSR_i[10]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_701 \Gen_Ex_Bit_DFF[18].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_21 ),
        .ex_MSR_i(ex_MSR_i[9]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_702 \Gen_Ex_Bit_DFF[19].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_22 ),
        .ex_MSR_i(ex_MSR_i[8]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_703 \Gen_Ex_Bit_DFF[20].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_23 ),
        .ex_MSR_i(ex_MSR_i[7]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_704 \Gen_Ex_Bit_DFF[21].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_24 ),
        .ex_MSR_i(ex_MSR_i[6]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_705 \Gen_Ex_Bit_DFF[22].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_25 ),
        .ex_MSR_i(ex_MSR_i[5]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_706 \Gen_Ex_Bit_DFF[23].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_26 ),
        .ex_MSR_i(ex_MSR_i[4]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_707 \Gen_Ex_Bit_DFF[24].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_27 ),
        .ex_MSR_i(ex_MSR_i[3]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_708 \Gen_Ex_Bit_DFF[25].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_28 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_709 \Gen_Ex_Bit_DFF[26].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_29 ),
        .ex_MSR_i(ex_MSR_i[2]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_710 \Gen_Ex_Bit_DFF[27].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_30 ),
        .ex_MSR_i(ex_MSR_i[1]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_711 \Gen_Ex_Bit_DFF[28].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_31 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_712 \Gen_Ex_Bit_DFF[29].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .EX_CarryIn(EX_CarryIn),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_32 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_713 \Gen_Ex_Bit_DFF[30].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_33 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_714 \Gen_Ex_Bit_DFF[31].Using_Low.ex_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_34 ),
        .ex_MSR_i(ex_MSR_i[0]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_715 \Gen_M0_Bit_DFF[17].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF_n_3 ),
        .m0_MSR_i(m0_MSR_i[17]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_716 \Gen_M0_Bit_DFF[18].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF_n_3 ),
        .m0_MSR_i(m0_MSR_i[18]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_717 \Gen_M0_Bit_DFF[19].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF_n_3 ),
        .m0_MSR_i(m0_MSR_i[19]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_718 \Gen_M0_Bit_DFF[20].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF_n_3 ),
        .m0_MSR_i(m0_MSR_i[20]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_719 \Gen_M0_Bit_DFF[21].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF_n_3 ),
        .m0_MSR_i(m0_MSR_i[21]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_720 \Gen_M0_Bit_DFF[22].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF_n_3 ),
        .m0_MSR_i(m0_MSR_i[22]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_721 \Gen_M0_Bit_DFF[23].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF_n_3 ),
        .m0_MSR_i(m0_MSR_i[23]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_722 \Gen_M0_Bit_DFF[24].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF_n_3 ),
        .m0_MSR_i(m0_MSR_i[24]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_723 \Gen_M0_Bit_DFF[25].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_35 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_724 \Gen_M0_Bit_DFF[26].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF_n_3 ),
        .m0_MSR_i(m0_MSR_i[26]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_725 \Gen_M0_Bit_DFF[27].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF_n_3 ),
        .m0_MSR_i(m0_MSR_i[27]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_726 \Gen_M0_Bit_DFF[28].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_M0_Bit_DFF[28].Using_Low.m0_msr_FF_n_0 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF_n_4 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_727 \Gen_M0_Bit_DFF[29].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_M0_Bit_DFF[29].Using_Low.m0_msr_FF_n_0 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF_n_4 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_728 \Gen_M0_Bit_DFF[30].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_36 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_729 \Gen_M0_Bit_DFF[31].Using_Low.m0_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF_n_3 ),
        .m0_MSR_i(m0_MSR_i[31]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_730 \Gen_M1_Bit_DFF[17].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF_n_4 ),
        .m1_MSR_i(m1_MSR_i[17]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_731 \Gen_M1_Bit_DFF[18].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF_n_4 ),
        .m1_MSR_i(m1_MSR_i[18]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_732 \Gen_M1_Bit_DFF[19].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF_n_4 ),
        .m1_MSR_i(m1_MSR_i[19]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_733 \Gen_M1_Bit_DFF[20].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF_n_4 ),
        .m1_MSR_i(m1_MSR_i[20]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_734 \Gen_M1_Bit_DFF[21].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF_n_4 ),
        .m1_MSR_i(m1_MSR_i[21]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_735 \Gen_M1_Bit_DFF[22].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF_n_4 ),
        .m1_MSR_i(m1_MSR_i[22]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_736 \Gen_M1_Bit_DFF[23].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF_n_4 ),
        .m1_MSR_i(m1_MSR_i[23]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_737 \Gen_M1_Bit_DFF[24].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF_n_4 ),
        .m1_MSR_i(m1_MSR_i[24]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_738 \Gen_M1_Bit_DFF[25].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_37 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_739 \Gen_M1_Bit_DFF[26].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF_n_4 ),
        .m1_MSR_i(m1_MSR_i[26]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_740 \Gen_M1_Bit_DFF[27].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF_n_4 ),
        .m1_MSR_i(m1_MSR_i[27]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_741 \Gen_M1_Bit_DFF[28].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_M1_Bit_DFF[28].Using_Low.m1_msr_FF_n_0 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF_n_3 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_742 \Gen_M1_Bit_DFF[29].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_M1_Bit_DFF[29].Using_Low.m1_msr_FF_n_0 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF_n_5 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_743 \Gen_M1_Bit_DFF[30].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_38 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_744 \Gen_M1_Bit_DFF[31].Using_Low.m1_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF_n_4 ),
        .m1_MSR_i(m1_MSR_i[31]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_745 \Gen_M2_Bit_DFF[17].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF_n_5 ),
        .m2_MSR_i(m2_MSR_i[17]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_746 \Gen_M2_Bit_DFF[18].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF_n_5 ),
        .m2_MSR_i(m2_MSR_i[18]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_747 \Gen_M2_Bit_DFF[19].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF_n_5 ),
        .m2_MSR_i(m2_MSR_i[19]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_748 \Gen_M2_Bit_DFF[20].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF_n_5 ),
        .m2_MSR_i(m2_MSR_i[20]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_749 \Gen_M2_Bit_DFF[21].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF_n_5 ),
        .m2_MSR_i(m2_MSR_i[21]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_750 \Gen_M2_Bit_DFF[22].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF_n_5 ),
        .m2_MSR_i(m2_MSR_i[22]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_751 \Gen_M2_Bit_DFF[23].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF_n_5 ),
        .m2_MSR_i(m2_MSR_i[23]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_752 \Gen_M2_Bit_DFF[24].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF_n_5 ),
        .m2_MSR_i(m2_MSR_i[24]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_753 \Gen_M2_Bit_DFF[25].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_39 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_754 \Gen_M2_Bit_DFF[26].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF_n_5 ),
        .m2_MSR_i(m2_MSR_i[26]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_755 \Gen_M2_Bit_DFF[27].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF_n_5 ),
        .m2_MSR_i(m2_MSR_i[27]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_756 \Gen_M2_Bit_DFF[28].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_M2_Bit_DFF[28].Using_Low.m2_msr_FF_n_0 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF_n_2 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_757 \Gen_M2_Bit_DFF[29].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_M2_Bit_DFF[29].Using_Low.m2_msr_FF_n_0 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF_n_6 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_758 \Gen_M2_Bit_DFF[30].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_40 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_759 \Gen_M2_Bit_DFF[31].Using_Low.m2_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF_n_5 ),
        .m2_MSR_i(m2_MSR_i[31]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_760 \Gen_M3_Bit_DFF[17].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF_n_2 ),
        .m3_MSR_i(m3_MSR_i[17]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_761 \Gen_M3_Bit_DFF[18].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF_n_2 ),
        .m3_MSR_i(m3_MSR_i[18]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_762 \Gen_M3_Bit_DFF[19].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF_n_2 ),
        .m3_MSR_i(m3_MSR_i[19]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_763 \Gen_M3_Bit_DFF[20].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF_n_2 ),
        .m3_MSR_i(m3_MSR_i[20]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_764 \Gen_M3_Bit_DFF[21].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF_n_2 ),
        .m3_MSR_i(m3_MSR_i[21]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_765 \Gen_M3_Bit_DFF[22].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF_n_2 ),
        .m3_MSR_i(m3_MSR_i[22]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_766 \Gen_M3_Bit_DFF[23].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF_n_2 ),
        .m3_MSR_i(m3_MSR_i[23]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_767 \Gen_M3_Bit_DFF[24].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF_n_2 ),
        .m3_MSR_i(m3_MSR_i[24]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_768 \Gen_M3_Bit_DFF[25].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_1 (\Gen_M3_Bit_DFF[25].Using_Low.m3_msr_FF_n_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_41 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_45 ),
        .sync_reset(sync_reset),
        .wb_div_zero_overflow(wb_div_zero_overflow),
        .wb_msr(wb_msr[3]));
  microblaze_microblaze_0_0_MB_FDR_769 \Gen_M3_Bit_DFF[26].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF_n_2 ),
        .m3_MSR_i(m3_MSR_i[26]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_770 \Gen_M3_Bit_DFF[27].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF_n_2 ),
        .m3_MSR_i(m3_MSR_i[27]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_771 \Gen_M3_Bit_DFF[28].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF_n_5 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_772 \Gen_M3_Bit_DFF[29].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_M3_Bit_DFF[29].Using_Low.m3_msr_FF_n_0 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF_n_3 ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_773 \Gen_M3_Bit_DFF[30].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_42 ),
        .m3_msr(m3_msr),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_774 \Gen_M3_Bit_DFF[31].Using_Low.m3_msr_FF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF_n_2 ),
        .m3_MSR_i(m3_MSR_i[31]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_775 \Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(of_MSR_cmb[17]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF_n_2 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[17].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_46 ),
        .ex_MSR_i(ex_MSR_i[10]),
        .m0_MSR_i(m0_MSR_i[17]),
        .m0_piperun(m0_piperun),
        .m1_MSR_i(m1_MSR_i[17]),
        .m1_piperun(m1_piperun),
        .m2_MSR_i(m2_MSR_i[17]),
        .m2_piperun(m2_piperun),
        .m3_MSR_i(m3_MSR_i[17]),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[17] (of_MSR_cmb_pipestall[17]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[17]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_776 \Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(of_MSR_cmb[18]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF_n_2 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[18].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_46 ),
        .ex_MSR_i(ex_MSR_i[9]),
        .m0_MSR_i(m0_MSR_i[18]),
        .m0_piperun(m0_piperun),
        .m1_MSR_i(m1_MSR_i[18]),
        .m1_piperun(m1_piperun),
        .m2_MSR_i(m2_MSR_i[18]),
        .m2_piperun(m2_piperun),
        .m3_MSR_i(m3_MSR_i[18]),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[18] (of_MSR_cmb_pipestall[18]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[18]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_777 \Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(of_MSR_cmb[19]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF_n_2 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[19].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_46 ),
        .ex_MSR_i(ex_MSR_i[8]),
        .m0_MSR_i(m0_MSR_i[19]),
        .m0_piperun(m0_piperun),
        .m1_MSR_i(m1_MSR_i[19]),
        .m1_piperun(m1_piperun),
        .m2_MSR_i(m2_MSR_i[19]),
        .m2_piperun(m2_piperun),
        .m3_MSR_i(m3_MSR_i[19]),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[19] (of_MSR_cmb_pipestall[19]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[19]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_778 \Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(of_MSR_cmb[20]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF_n_2 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[20].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_46 ),
        .ex_MSR_i(ex_MSR_i[7]),
        .m0_MSR_i(m0_MSR_i[20]),
        .m0_piperun(m0_piperun),
        .m1_MSR_i(m1_MSR_i[20]),
        .m1_piperun(m1_piperun),
        .m2_MSR_i(m2_MSR_i[20]),
        .m2_piperun(m2_piperun),
        .m3_MSR_i(m3_MSR_i[20]),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[20] (of_MSR_cmb_pipestall[20]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[20]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_779 \Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(of_MSR_cmb[21]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF_n_2 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[21].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_46 ),
        .ex_MSR_i(ex_MSR_i[6]),
        .m0_MSR_i(m0_MSR_i[21]),
        .m0_piperun(m0_piperun),
        .m1_MSR_i(m1_MSR_i[21]),
        .m1_piperun(m1_piperun),
        .m2_MSR_i(m2_MSR_i[21]),
        .m2_piperun(m2_piperun),
        .m3_MSR_i(m3_MSR_i[21]),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[21] (of_MSR_cmb_pipestall[21]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[21]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_780 \Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(of_MSR_cmb[22]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF_n_2 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[22].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_45 ),
        .ex_MSR_i(ex_MSR_i[5]),
        .m0_MSR_i(m0_MSR_i[22]),
        .m0_piperun(m0_piperun),
        .m1_MSR_i(m1_MSR_i[22]),
        .m1_piperun(m1_piperun),
        .m2_MSR_i(m2_MSR_i[22]),
        .m2_piperun(m2_piperun),
        .m3_MSR_i(m3_MSR_i[22]),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[22] (of_MSR_cmb_pipestall[22]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[22]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_781 \Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(of_MSR_cmb[23]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF_n_2 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[23].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_45 ),
        .ex_MSR_i(ex_MSR_i[4]),
        .m0_MSR_i(m0_MSR_i[23]),
        .m0_piperun(m0_piperun),
        .m1_MSR_i(m1_MSR_i[23]),
        .m1_piperun(m1_piperun),
        .m2_MSR_i(m2_MSR_i[23]),
        .m2_piperun(m2_piperun),
        .m3_MSR_i(m3_MSR_i[23]),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[23] (of_MSR_cmb_pipestall[23]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[23]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_782 \Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(of_MSR_cmb[24]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF_n_2 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[24].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_46 ),
        .ex_MSR_i(ex_MSR_i[3]),
        .m0_MSR_i(m0_MSR_i[24]),
        .m0_piperun(m0_piperun),
        .m1_MSR_i(m1_MSR_i[24]),
        .m1_piperun(m1_piperun),
        .m2_MSR_i(m2_MSR_i[24]),
        .m2_piperun(m2_piperun),
        .m3_MSR_i(m3_MSR_i[24]),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[24] (of_MSR_cmb_pipestall[24]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[24]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_783 \Gen_WB_Bit_DFF[25].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(D[3]),
        .\Using_FPGA.Native_0 (\Gen_M3_Bit_DFF[25].Using_Low.m3_msr_FF_n_1 ),
        .WB_Fwd(WB_Fwd[3]),
        .\data_rd_reg_reg[25] (\data_rd_reg_reg[25] [3]),
        .\data_rd_reg_reg[25]_0 (\data_rd_reg_reg[30] ),
        .read_register_MSR_1(read_register_MSR_1),
        .sync_reset(sync_reset),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .wb_msr(wb_msr[3]));
  microblaze_microblaze_0_0_MB_FDR_784 \Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(of_MSR_cmb[26]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF_n_2 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[26].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_46 ),
        .ex_MSR_i(ex_MSR_i[2]),
        .m0_MSR_i(m0_MSR_i[26]),
        .m0_piperun(m0_piperun),
        .m1_MSR_i(m1_MSR_i[26]),
        .m1_piperun(m1_piperun),
        .m2_MSR_i(m2_MSR_i[26]),
        .m2_piperun(m2_piperun),
        .m3_MSR_i(m3_MSR_i[26]),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[26] (of_MSR_cmb_pipestall[26]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[26]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_785 \Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(of_MSR_cmb[27]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF_n_2 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[27].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_46 ),
        .ex_MSR_i(ex_MSR_i[1]),
        .m0_MSR_i(m0_MSR_i[27]),
        .m0_piperun(m0_piperun),
        .m1_MSR_i(m1_MSR_i[27]),
        .m1_piperun(m1_piperun),
        .m2_MSR_i(m2_MSR_i[27]),
        .m2_piperun(m2_piperun),
        .m3_MSR_i(m3_MSR_i[27]),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[27] (of_MSR_cmb_pipestall[27]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[27]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_FDR_786 \Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(D[2]),
        .\Using_FPGA.Native_0 (wb_msr[2]),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF_n_2 ),
        .\Using_FPGA.Native_10 (\Gen_M0_Bit_DFF[28].Using_Low.m0_msr_FF_n_0 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[28].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (of_MSR_cmb[28]),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_43 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_46 ),
        .\Using_FPGA.Native_8 (\Gen_M1_Bit_DFF[28].Using_Low.m1_msr_FF_n_0 ),
        .\Using_FPGA.Native_9 (\Gen_M2_Bit_DFF[28].Using_Low.m2_msr_FF_n_0 ),
        .WB_Fwd(WB_Fwd[2]),
        .\data_rd_reg_reg[28] (\data_rd_reg_reg[25] [2]),
        .\data_rd_reg_reg[28]_0 (\data_rd_reg_reg[30] ),
        .m0_piperun(m0_piperun),
        .m1_piperun(m1_piperun),
        .m2_piperun(m2_piperun),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[28] (\Using_FPGA.Native_45 ),
        .\of_MSR_i_reg[28]_0 (of_MSR_cmb_pipestall[28]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[28]),
        .read_register_MSR_1(read_register_MSR_1),
        .sync_reset(sync_reset),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .wb_msr_clear_bip(wb_msr_clear_bip));
  microblaze_microblaze_0_0_MB_FDR_787 \Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(D[1]),
        .EX_CarryIn(EX_CarryIn),
        .\Using_FPGA.Native_0 (wb_msr[1]),
        .\Using_FPGA.Native_1 (of_MSR_cmb[29]),
        .\Using_FPGA.Native_10 (\Gen_M1_Bit_DFF[29].Using_Low.m1_msr_FF_n_0 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (\Gen_WB_Bit_DFF[29].Using_Low.wb_msr_FF_n_6 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_45 ),
        .\Using_FPGA.Native_7 (\Gen_M3_Bit_DFF[29].Using_Low.m3_msr_FF_n_0 ),
        .\Using_FPGA.Native_8 (\Gen_M2_Bit_DFF[29].Using_Low.m2_msr_FF_n_0 ),
        .\Using_FPGA.Native_9 (\Gen_M0_Bit_DFF[29].Using_Low.m0_msr_FF_n_0 ),
        .WB_Fwd(WB_Fwd[1]),
        .\data_rd_reg_reg[29] (\data_rd_reg_reg[25] [1]),
        .\data_rd_reg_reg[29]_0 (\data_rd_reg_reg[30] ),
        .m0_piperun(m0_piperun),
        .m1_piperun(m1_piperun),
        .m2_piperun(m2_piperun),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[29] (of_MSR_cmb_pipestall[29]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[29]),
        .read_register_MSR_1(read_register_MSR_1),
        .sync_reset(sync_reset),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg));
  microblaze_microblaze_0_0_MB_FDR_788 \Gen_WB_Bit_DFF[30].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(D[0]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_44 ),
        .WB_Fwd(WB_Fwd[0]),
        .\data_rd_reg_reg[30] (\data_rd_reg_reg[25] [0]),
        .\data_rd_reg_reg[30]_0 (\data_rd_reg_reg[30] ),
        .read_register_MSR_1(read_register_MSR_1),
        .sync_reset(sync_reset),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .wb_msr(wb_msr[0]));
  microblaze_microblaze_0_0_MB_FDR_789 \Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF 
       (.Clk(Clk),
        .D(of_MSR_cmb[31]),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_1 (\Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF_n_2 ),
        .\Using_FPGA.Native_2 (\Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF_n_3 ),
        .\Using_FPGA.Native_3 (\Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF_n_4 ),
        .\Using_FPGA.Native_4 (\Gen_WB_Bit_DFF[31].Using_Low.wb_msr_FF_n_5 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_46 ),
        .ex_MSR_i(ex_MSR_i[0]),
        .m0_MSR_i(m0_MSR_i[31]),
        .m0_piperun(m0_piperun),
        .m1_MSR_i(m1_MSR_i[31]),
        .m1_piperun(m1_piperun),
        .m2_MSR_i(m2_MSR_i[31]),
        .m2_piperun(m2_piperun),
        .m3_MSR_i(m3_MSR_i[31]),
        .m3_piperun(m3_piperun),
        .\of_MSR_i_reg[31] (of_MSR_cmb_pipestall[31]),
        .of_piperun(of_piperun),
        .out(of_MSR_cmb_pipemove[31]),
        .sync_reset(sync_reset));
  FDRE \of_MSR_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[17]),
        .Q(of_MSR_cmb_pipestall[17]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[18]),
        .Q(of_MSR_cmb_pipestall[18]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[19]),
        .Q(of_MSR_cmb_pipestall[19]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[20]),
        .Q(of_MSR_cmb_pipestall[20]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[21]),
        .Q(of_MSR_cmb_pipestall[21]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[22]),
        .Q(\^of_MSR_i_reg[22]_0 [4]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[23]),
        .Q(\^of_MSR_i_reg[22]_0 [3]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[24]),
        .Q(of_MSR_cmb_pipestall[24]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(\of_MSR_i_reg[25]_1 [1]),
        .Q(of_MSR_cmb_pipestall[25]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[26]),
        .Q(of_MSR_cmb_pipestall[26]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[27]),
        .Q(of_MSR_cmb_pipestall[27]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[28]),
        .Q(\^of_MSR_i_reg[22]_0 [1]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[29]),
        .Q(of_MSR_cmb_pipestall[29]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(\of_MSR_i_reg[25]_1 [0]),
        .Q(\^of_MSR_i_reg[22]_0 [0]),
        .R(sync_reset));
  FDRE \of_MSR_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(of_MSR_cmb[31]),
        .Q(of_MSR_cmb_pipestall[31]),
        .R(sync_reset));
endmodule

(* C_ADDR_TAG_BITS = "0" *) (* C_ALLOW_DCACHE_WR = "1" *) (* C_ALLOW_ICACHE_WR = "1" *) 
(* C_AREA_OPTIMIZED = "2" *) (* C_ASYNC_INTERRUPT = "1" *) (* C_ASYNC_WAKEUP = "3" *) 
(* C_AVOID_PRIMITIVES = "0" *) (* C_BASE_VECTORS = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) (* C_BRANCH_TARGET_CACHE_SIZE = "0" *) 
(* C_CACHE_BYTE_SIZE = "4096" *) (* C_DADDR_SIZE = "32" *) (* C_DATA_SIZE = "32" *) 
(* C_DCACHE_ADDR_TAG = "0" *) (* C_DCACHE_ALWAYS_USED = "0" *) (* C_DCACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
(* C_DCACHE_BYTE_SIZE = "4096" *) (* C_DCACHE_DATA_WIDTH = "0" *) (* C_DCACHE_FORCE_TAG_LUTRAM = "0" *) 
(* C_DCACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) (* C_DCACHE_LINE_LEN = "4" *) (* C_DCACHE_USE_WRITEBACK = "0" *) 
(* C_DCACHE_VICTIMS = "0" *) (* C_DEBUG_COUNTER_WIDTH = "32" *) (* C_DEBUG_ENABLED = "1" *) 
(* C_DEBUG_EVENT_COUNTERS = "5" *) (* C_DEBUG_EXTERNAL_TRACE = "0" *) (* C_DEBUG_INTERFACE = "0" *) 
(* C_DEBUG_LATENCY_COUNTERS = "1" *) (* C_DEBUG_PROFILE_SIZE = "0" *) (* C_DEBUG_TRACE_ASYNC_RESET = "0" *) 
(* C_DEBUG_TRACE_SIZE = "8192" *) (* C_DIV_ZERO_EXCEPTION = "0" *) (* C_DYNAMIC_BUS_SIZING = "0" *) 
(* C_D_AXI = "1" *) (* C_D_LMB = "1" *) (* C_ECC_USE_CE_EXCEPTION = "0" *) 
(* C_EDGE_IS_POSITIVE = "1" *) (* C_ENDIANNESS = "1" *) (* C_FAMILY = "artix7" *) 
(* C_FAULT_TOLERANT = "0" *) (* C_FPU_EXCEPTION = "0" *) (* C_FREQ = "100000000" *) 
(* C_FSL_EXCEPTION = "0" *) (* C_FSL_LINKS = "0" *) (* C_IADDR_SIZE = "32" *) 
(* C_ICACHE_ALWAYS_USED = "0" *) (* C_ICACHE_BASEADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) (* C_ICACHE_DATA_WIDTH = "0" *) 
(* C_ICACHE_FORCE_TAG_LUTRAM = "0" *) (* C_ICACHE_HIGHADDR = "64'b0000000000000000000000000000000000111111111111111111111111111111" *) (* C_ICACHE_LINE_LEN = "4" *) 
(* C_ICACHE_STREAMS = "0" *) (* C_ICACHE_VICTIMS = "0" *) (* C_ILL_OPCODE_EXCEPTION = "0" *) 
(* C_IMPRECISE_EXCEPTIONS = "0" *) (* C_INSTANCE = "microblaze_microblaze_0_0" *) (* C_INSTR_SIZE = "32" *) 
(* C_INTERCONNECT = "2" *) (* C_INTERRUPT_IS_EDGE = "0" *) (* C_I_AXI = "0" *) 
(* C_I_LMB = "1" *) (* C_LMB_DATA_SIZE = "32" *) (* C_LOCKSTEP_MASTER = "0" *) 
(* C_LOCKSTEP_SLAVE = "0" *) (* C_M0_AXIS_DATA_WIDTH = "32" *) (* C_M10_AXIS_DATA_WIDTH = "32" *) 
(* C_M11_AXIS_DATA_WIDTH = "32" *) (* C_M12_AXIS_DATA_WIDTH = "32" *) (* C_M13_AXIS_DATA_WIDTH = "32" *) 
(* C_M14_AXIS_DATA_WIDTH = "32" *) (* C_M15_AXIS_DATA_WIDTH = "32" *) (* C_M1_AXIS_DATA_WIDTH = "32" *) 
(* C_M2_AXIS_DATA_WIDTH = "32" *) (* C_M3_AXIS_DATA_WIDTH = "32" *) (* C_M4_AXIS_DATA_WIDTH = "32" *) 
(* C_M5_AXIS_DATA_WIDTH = "32" *) (* C_M6_AXIS_DATA_WIDTH = "32" *) (* C_M7_AXIS_DATA_WIDTH = "32" *) 
(* C_M8_AXIS_DATA_WIDTH = "32" *) (* C_M9_AXIS_DATA_WIDTH = "32" *) (* C_MMU_DTLB_SIZE = "2" *) 
(* C_MMU_ITLB_SIZE = "1" *) (* C_MMU_PRIVILEGED_INSTR = "0" *) (* C_MMU_TLB_ACCESS = "3" *) 
(* C_MMU_ZONES = "2" *) (* C_M_AXI_DC_ADDR_WIDTH = "32" *) (* C_M_AXI_DC_ARUSER_WIDTH = "5" *) 
(* C_M_AXI_DC_AWUSER_WIDTH = "5" *) (* C_M_AXI_DC_BUSER_WIDTH = "1" *) (* C_M_AXI_DC_DATA_WIDTH = "32" *) 
(* C_M_AXI_DC_EXCLUSIVE_ACCESS = "0" *) (* C_M_AXI_DC_RUSER_WIDTH = "1" *) (* C_M_AXI_DC_THREAD_ID_WIDTH = "1" *) 
(* C_M_AXI_DC_USER_VALUE = "31" *) (* C_M_AXI_DC_WUSER_WIDTH = "1" *) (* C_M_AXI_DP_ADDR_WIDTH = "32" *) 
(* C_M_AXI_DP_DATA_WIDTH = "32" *) (* C_M_AXI_DP_EXCLUSIVE_ACCESS = "0" *) (* C_M_AXI_DP_THREAD_ID_WIDTH = "1" *) 
(* C_M_AXI_D_BUS_EXCEPTION = "0" *) (* C_M_AXI_IC_ADDR_WIDTH = "32" *) (* C_M_AXI_IC_ARUSER_WIDTH = "5" *) 
(* C_M_AXI_IC_AWUSER_WIDTH = "5" *) (* C_M_AXI_IC_BUSER_WIDTH = "1" *) (* C_M_AXI_IC_DATA_WIDTH = "32" *) 
(* C_M_AXI_IC_RUSER_WIDTH = "1" *) (* C_M_AXI_IC_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_IC_USER_VALUE = "31" *) 
(* C_M_AXI_IC_WUSER_WIDTH = "1" *) (* C_M_AXI_IP_ADDR_WIDTH = "32" *) (* C_M_AXI_IP_DATA_WIDTH = "32" *) 
(* C_M_AXI_IP_THREAD_ID_WIDTH = "1" *) (* C_M_AXI_I_BUS_EXCEPTION = "0" *) (* C_NUMBER_OF_PC_BRK = "1" *) 
(* C_NUMBER_OF_RD_ADDR_BRK = "0" *) (* C_NUMBER_OF_WR_ADDR_BRK = "0" *) (* C_NUM_SYNC_FF_CLK = "2" *) 
(* C_NUM_SYNC_FF_CLK_DEBUG = "2" *) (* C_NUM_SYNC_FF_CLK_IRQ = "1" *) (* C_NUM_SYNC_FF_DBG_CLK = "1" *) 
(* C_NUM_SYNC_FF_DBG_TRACE_CLK = "2" *) (* C_OPCODE_0x0_ILLEGAL = "0" *) (* C_OPTIMIZATION = "0" *) 
(* C_PC_WIDTH = "32" *) (* C_PIADDR_SIZE = "32" *) (* C_PVR = "0" *) 
(* C_PVR_USER1 = "8'b00000000" *) (* C_PVR_USER2 = "0" *) (* C_RESET_MSR = "0" *) 
(* C_S0_AXIS_DATA_WIDTH = "32" *) (* C_S10_AXIS_DATA_WIDTH = "32" *) (* C_S11_AXIS_DATA_WIDTH = "32" *) 
(* C_S12_AXIS_DATA_WIDTH = "32" *) (* C_S13_AXIS_DATA_WIDTH = "32" *) (* C_S14_AXIS_DATA_WIDTH = "32" *) 
(* C_S15_AXIS_DATA_WIDTH = "32" *) (* C_S1_AXIS_DATA_WIDTH = "32" *) (* C_S2_AXIS_DATA_WIDTH = "32" *) 
(* C_S3_AXIS_DATA_WIDTH = "32" *) (* C_S4_AXIS_DATA_WIDTH = "32" *) (* C_S5_AXIS_DATA_WIDTH = "32" *) 
(* C_S6_AXIS_DATA_WIDTH = "32" *) (* C_S7_AXIS_DATA_WIDTH = "32" *) (* C_S8_AXIS_DATA_WIDTH = "32" *) 
(* C_S9_AXIS_DATA_WIDTH = "32" *) (* C_SCO = "0" *) (* C_UNALIGNED_EXCEPTIONS = "0" *) 
(* C_USE_BARREL = "1" *) (* C_USE_BRANCH_TARGET_CACHE = "0" *) (* C_USE_CONFIG_RESET = "0" *) 
(* C_USE_DCACHE = "0" *) (* C_USE_DIV = "1" *) (* C_USE_EXTENDED_FSL_INSTR = "0" *) 
(* C_USE_EXT_BRK = "0" *) (* C_USE_EXT_NM_BRK = "0" *) (* C_USE_FPU = "0" *) 
(* C_USE_HW_MUL = "1" *) (* C_USE_ICACHE = "0" *) (* C_USE_INTERRUPT = "2" *) 
(* C_USE_MMU = "0" *) (* C_USE_MSR_INSTR = "1" *) (* C_USE_NON_SECURE = "0" *) 
(* C_USE_PCMP_INSTR = "1" *) (* C_USE_REORDER_INSTR = "0" *) (* C_USE_STACK_PROTECTION = "0" *) 
(* ORIG_REF_NAME = "MicroBlaze" *) (* downgradeipidentifiedwarnings = "yes" *) 
module microblaze_microblaze_0_0_MicroBlaze
   (RAM_To,
    RAM_From,
    Clk,
    Reset,
    Mb_Reset,
    Config_Reset,
    Scan_Reset_Sel,
    Scan_Reset,
    Scan_En,
    Reset_Mode,
    Non_Secure,
    Interrupt,
    Interrupt_Address,
    Interrupt_Ack,
    Ext_BRK,
    Ext_NM_BRK,
    Pause,
    Pause_Ack,
    Dbg_Continue,
    Dbg_Stop,
    Dbg_Intr,
    MB_Halted,
    MB_Error,
    Wakeup,
    Sleep,
    Hibernate,
    Suspend,
    Dbg_Wakeup,
    LOCKSTEP_Slave_In,
    LOCKSTEP_Master_Out,
    LOCKSTEP_Out,
    Instr_Addr,
    Instr,
    IFetch,
    I_AS,
    IReady,
    IWAIT,
    ICE,
    IUE,
    M_AXI_IP_AWID,
    M_AXI_IP_AWADDR,
    M_AXI_IP_AWLEN,
    M_AXI_IP_AWSIZE,
    M_AXI_IP_AWBURST,
    M_AXI_IP_AWLOCK,
    M_AXI_IP_AWCACHE,
    M_AXI_IP_AWPROT,
    M_AXI_IP_AWQOS,
    M_AXI_IP_AWVALID,
    M_AXI_IP_AWREADY,
    M_AXI_IP_WDATA,
    M_AXI_IP_WSTRB,
    M_AXI_IP_WLAST,
    M_AXI_IP_WVALID,
    M_AXI_IP_WREADY,
    M_AXI_IP_BID,
    M_AXI_IP_BRESP,
    M_AXI_IP_BVALID,
    M_AXI_IP_BREADY,
    M_AXI_IP_ARID,
    M_AXI_IP_ARADDR,
    M_AXI_IP_ARLEN,
    M_AXI_IP_ARSIZE,
    M_AXI_IP_ARBURST,
    M_AXI_IP_ARLOCK,
    M_AXI_IP_ARCACHE,
    M_AXI_IP_ARPROT,
    M_AXI_IP_ARQOS,
    M_AXI_IP_ARVALID,
    M_AXI_IP_ARREADY,
    M_AXI_IP_RID,
    M_AXI_IP_RDATA,
    M_AXI_IP_RRESP,
    M_AXI_IP_RLAST,
    M_AXI_IP_RVALID,
    M_AXI_IP_RREADY,
    Data_Addr,
    Data_Read,
    Data_Write,
    D_AS,
    Read_Strobe,
    Write_Strobe,
    DReady,
    DWait,
    DCE,
    DUE,
    Byte_Enable,
    M_AXI_DP_AWID,
    M_AXI_DP_AWADDR,
    M_AXI_DP_AWLEN,
    M_AXI_DP_AWSIZE,
    M_AXI_DP_AWBURST,
    M_AXI_DP_AWLOCK,
    M_AXI_DP_AWCACHE,
    M_AXI_DP_AWPROT,
    M_AXI_DP_AWQOS,
    M_AXI_DP_AWVALID,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WDATA,
    M_AXI_DP_WSTRB,
    M_AXI_DP_WLAST,
    M_AXI_DP_WVALID,
    M_AXI_DP_WREADY,
    M_AXI_DP_BID,
    M_AXI_DP_BRESP,
    M_AXI_DP_BVALID,
    M_AXI_DP_BREADY,
    M_AXI_DP_ARID,
    M_AXI_DP_ARADDR,
    M_AXI_DP_ARLEN,
    M_AXI_DP_ARSIZE,
    M_AXI_DP_ARBURST,
    M_AXI_DP_ARLOCK,
    M_AXI_DP_ARCACHE,
    M_AXI_DP_ARPROT,
    M_AXI_DP_ARQOS,
    M_AXI_DP_ARVALID,
    M_AXI_DP_ARREADY,
    M_AXI_DP_RID,
    M_AXI_DP_RDATA,
    M_AXI_DP_RRESP,
    M_AXI_DP_RLAST,
    M_AXI_DP_RVALID,
    M_AXI_DP_RREADY,
    Dbg_Disable,
    Dbg_Clk,
    Dbg_TDI,
    Dbg_TDO,
    Dbg_Reg_En,
    Dbg_Shift,
    Dbg_Capture,
    Dbg_Update,
    Debug_Rst,
    Dbg_Trig_In,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_Out,
    Dbg_Trace_Clk,
    Dbg_Trace_Data,
    Dbg_Trace_Ready,
    Dbg_Trace_Valid,
    Dbg_AWADDR,
    Dbg_AWVALID,
    Dbg_AWREADY,
    Dbg_WDATA,
    Dbg_WVALID,
    Dbg_WREADY,
    Dbg_BRESP,
    Dbg_BVALID,
    Dbg_BREADY,
    Dbg_ARADDR,
    Dbg_ARVALID,
    Dbg_ARREADY,
    Dbg_RDATA,
    Dbg_RRESP,
    Dbg_RVALID,
    Dbg_RREADY,
    DEBUG_ACLK,
    DEBUG_ARESETN,
    Trace_Instruction,
    Trace_Valid_Instr,
    Trace_PC,
    Trace_Reg_Write,
    Trace_Reg_Addr,
    Trace_MSR_Reg,
    Trace_PID_Reg,
    Trace_New_Reg_Value,
    Trace_Exception_Taken,
    Trace_Exception_Kind,
    Trace_Jump_Taken,
    Trace_Delay_Slot,
    Trace_Data_Address,
    Trace_Data_Write_Value,
    Trace_Data_Byte_Enable,
    Trace_Data_Access,
    Trace_Data_Read,
    Trace_Data_Write,
    Trace_DCache_Req,
    Trace_DCache_Hit,
    Trace_DCache_Rdy,
    Trace_DCache_Read,
    Trace_ICache_Req,
    Trace_ICache_Hit,
    Trace_ICache_Rdy,
    Trace_OF_PipeRun,
    Trace_EX_PipeRun,
    Trace_MEM_PipeRun,
    Trace_MB_Halted,
    Trace_Jump_Hit,
    M0_AXIS_TLAST,
    M0_AXIS_TDATA,
    M0_AXIS_TVALID,
    M0_AXIS_TREADY,
    M1_AXIS_TLAST,
    M1_AXIS_TDATA,
    M1_AXIS_TVALID,
    M1_AXIS_TREADY,
    M2_AXIS_TLAST,
    M2_AXIS_TDATA,
    M2_AXIS_TVALID,
    M2_AXIS_TREADY,
    M3_AXIS_TLAST,
    M3_AXIS_TDATA,
    M3_AXIS_TVALID,
    M3_AXIS_TREADY,
    M4_AXIS_TLAST,
    M4_AXIS_TDATA,
    M4_AXIS_TVALID,
    M4_AXIS_TREADY,
    M5_AXIS_TLAST,
    M5_AXIS_TDATA,
    M5_AXIS_TVALID,
    M5_AXIS_TREADY,
    M6_AXIS_TLAST,
    M6_AXIS_TDATA,
    M6_AXIS_TVALID,
    M6_AXIS_TREADY,
    M7_AXIS_TLAST,
    M7_AXIS_TDATA,
    M7_AXIS_TVALID,
    M7_AXIS_TREADY,
    M8_AXIS_TLAST,
    M8_AXIS_TDATA,
    M8_AXIS_TVALID,
    M8_AXIS_TREADY,
    M9_AXIS_TLAST,
    M9_AXIS_TDATA,
    M9_AXIS_TVALID,
    M9_AXIS_TREADY,
    M10_AXIS_TLAST,
    M10_AXIS_TDATA,
    M10_AXIS_TVALID,
    M10_AXIS_TREADY,
    M11_AXIS_TLAST,
    M11_AXIS_TDATA,
    M11_AXIS_TVALID,
    M11_AXIS_TREADY,
    M12_AXIS_TLAST,
    M12_AXIS_TDATA,
    M12_AXIS_TVALID,
    M12_AXIS_TREADY,
    M13_AXIS_TLAST,
    M13_AXIS_TDATA,
    M13_AXIS_TVALID,
    M13_AXIS_TREADY,
    M14_AXIS_TLAST,
    M14_AXIS_TDATA,
    M14_AXIS_TVALID,
    M14_AXIS_TREADY,
    M15_AXIS_TLAST,
    M15_AXIS_TDATA,
    M15_AXIS_TVALID,
    M15_AXIS_TREADY,
    S0_AXIS_TLAST,
    S0_AXIS_TDATA,
    S0_AXIS_TVALID,
    S0_AXIS_TREADY,
    S1_AXIS_TLAST,
    S1_AXIS_TDATA,
    S1_AXIS_TVALID,
    S1_AXIS_TREADY,
    S2_AXIS_TLAST,
    S2_AXIS_TDATA,
    S2_AXIS_TVALID,
    S2_AXIS_TREADY,
    S3_AXIS_TLAST,
    S3_AXIS_TDATA,
    S3_AXIS_TVALID,
    S3_AXIS_TREADY,
    S4_AXIS_TLAST,
    S4_AXIS_TDATA,
    S4_AXIS_TVALID,
    S4_AXIS_TREADY,
    S5_AXIS_TLAST,
    S5_AXIS_TDATA,
    S5_AXIS_TVALID,
    S5_AXIS_TREADY,
    S6_AXIS_TLAST,
    S6_AXIS_TDATA,
    S6_AXIS_TVALID,
    S6_AXIS_TREADY,
    S7_AXIS_TLAST,
    S7_AXIS_TDATA,
    S7_AXIS_TVALID,
    S7_AXIS_TREADY,
    S8_AXIS_TLAST,
    S8_AXIS_TDATA,
    S8_AXIS_TVALID,
    S8_AXIS_TREADY,
    S9_AXIS_TLAST,
    S9_AXIS_TDATA,
    S9_AXIS_TVALID,
    S9_AXIS_TREADY,
    S10_AXIS_TLAST,
    S10_AXIS_TDATA,
    S10_AXIS_TVALID,
    S10_AXIS_TREADY,
    S11_AXIS_TLAST,
    S11_AXIS_TDATA,
    S11_AXIS_TVALID,
    S11_AXIS_TREADY,
    S12_AXIS_TLAST,
    S12_AXIS_TDATA,
    S12_AXIS_TVALID,
    S12_AXIS_TREADY,
    S13_AXIS_TLAST,
    S13_AXIS_TDATA,
    S13_AXIS_TVALID,
    S13_AXIS_TREADY,
    S14_AXIS_TLAST,
    S14_AXIS_TDATA,
    S14_AXIS_TVALID,
    S14_AXIS_TREADY,
    S15_AXIS_TLAST,
    S15_AXIS_TDATA,
    S15_AXIS_TVALID,
    S15_AXIS_TREADY,
    M_AXI_IC_AWID,
    M_AXI_IC_AWADDR,
    M_AXI_IC_AWLEN,
    M_AXI_IC_AWSIZE,
    M_AXI_IC_AWBURST,
    M_AXI_IC_AWLOCK,
    M_AXI_IC_AWCACHE,
    M_AXI_IC_AWPROT,
    M_AXI_IC_AWQOS,
    M_AXI_IC_AWVALID,
    M_AXI_IC_AWREADY,
    M_AXI_IC_AWUSER,
    M_AXI_IC_AWDOMAIN,
    M_AXI_IC_AWSNOOP,
    M_AXI_IC_AWBAR,
    M_AXI_IC_WDATA,
    M_AXI_IC_WSTRB,
    M_AXI_IC_WLAST,
    M_AXI_IC_WVALID,
    M_AXI_IC_WREADY,
    M_AXI_IC_WUSER,
    M_AXI_IC_BID,
    M_AXI_IC_BRESP,
    M_AXI_IC_BVALID,
    M_AXI_IC_BREADY,
    M_AXI_IC_BUSER,
    M_AXI_IC_WACK,
    M_AXI_IC_ARID,
    M_AXI_IC_ARADDR,
    M_AXI_IC_ARLEN,
    M_AXI_IC_ARSIZE,
    M_AXI_IC_ARBURST,
    M_AXI_IC_ARLOCK,
    M_AXI_IC_ARCACHE,
    M_AXI_IC_ARPROT,
    M_AXI_IC_ARQOS,
    M_AXI_IC_ARVALID,
    M_AXI_IC_ARREADY,
    M_AXI_IC_ARUSER,
    M_AXI_IC_ARDOMAIN,
    M_AXI_IC_ARSNOOP,
    M_AXI_IC_ARBAR,
    M_AXI_IC_RID,
    M_AXI_IC_RDATA,
    M_AXI_IC_RRESP,
    M_AXI_IC_RLAST,
    M_AXI_IC_RVALID,
    M_AXI_IC_RREADY,
    M_AXI_IC_RUSER,
    M_AXI_IC_RACK,
    M_AXI_IC_ACVALID,
    M_AXI_IC_ACADDR,
    M_AXI_IC_ACSNOOP,
    M_AXI_IC_ACPROT,
    M_AXI_IC_ACREADY,
    M_AXI_IC_CRVALID,
    M_AXI_IC_CRRESP,
    M_AXI_IC_CRREADY,
    M_AXI_IC_CDVALID,
    M_AXI_IC_CDDATA,
    M_AXI_IC_CDLAST,
    M_AXI_IC_CDREADY,
    M_AXI_DC_AWID,
    M_AXI_DC_AWADDR,
    M_AXI_DC_AWLEN,
    M_AXI_DC_AWSIZE,
    M_AXI_DC_AWBURST,
    M_AXI_DC_AWLOCK,
    M_AXI_DC_AWCACHE,
    M_AXI_DC_AWPROT,
    M_AXI_DC_AWQOS,
    M_AXI_DC_AWVALID,
    M_AXI_DC_AWREADY,
    M_AXI_DC_AWUSER,
    M_AXI_DC_AWDOMAIN,
    M_AXI_DC_AWSNOOP,
    M_AXI_DC_AWBAR,
    M_AXI_DC_WDATA,
    M_AXI_DC_WSTRB,
    M_AXI_DC_WLAST,
    M_AXI_DC_WVALID,
    M_AXI_DC_WREADY,
    M_AXI_DC_WUSER,
    M_AXI_DC_BRESP,
    M_AXI_DC_BID,
    M_AXI_DC_BVALID,
    M_AXI_DC_BREADY,
    M_AXI_DC_BUSER,
    M_AXI_DC_WACK,
    M_AXI_DC_ARID,
    M_AXI_DC_ARADDR,
    M_AXI_DC_ARLEN,
    M_AXI_DC_ARSIZE,
    M_AXI_DC_ARBURST,
    M_AXI_DC_ARLOCK,
    M_AXI_DC_ARCACHE,
    M_AXI_DC_ARPROT,
    M_AXI_DC_ARQOS,
    M_AXI_DC_ARVALID,
    M_AXI_DC_ARREADY,
    M_AXI_DC_ARUSER,
    M_AXI_DC_ARDOMAIN,
    M_AXI_DC_ARSNOOP,
    M_AXI_DC_ARBAR,
    M_AXI_DC_RID,
    M_AXI_DC_RDATA,
    M_AXI_DC_RRESP,
    M_AXI_DC_RLAST,
    M_AXI_DC_RVALID,
    M_AXI_DC_RREADY,
    M_AXI_DC_RUSER,
    M_AXI_DC_RACK,
    M_AXI_DC_ACVALID,
    M_AXI_DC_ACADDR,
    M_AXI_DC_ACSNOOP,
    M_AXI_DC_ACPROT,
    M_AXI_DC_ACREADY,
    M_AXI_DC_CRVALID,
    M_AXI_DC_CRRESP,
    M_AXI_DC_CRREADY,
    M_AXI_DC_CDVALID,
    M_AXI_DC_CDDATA,
    M_AXI_DC_CDLAST,
    M_AXI_DC_CDREADY);
  input [255:0]RAM_To;
  output [255:0]RAM_From;
  input Clk;
  input Reset;
  input Mb_Reset;
  input Config_Reset;
  input Scan_Reset_Sel;
  input Scan_Reset;
  input Scan_En;
  input [0:1]Reset_Mode;
  input [0:3]Non_Secure;
  input Interrupt;
  input [0:31]Interrupt_Address;
  output [0:1]Interrupt_Ack;
  input Ext_BRK;
  input Ext_NM_BRK;
  input Pause;
  output Pause_Ack;
  output Dbg_Continue;
  input Dbg_Stop;
  output Dbg_Intr;
  output MB_Halted;
  output MB_Error;
  input [0:1]Wakeup;
  output Sleep;
  output Hibernate;
  output Suspend;
  output Dbg_Wakeup;
  input [0:4095]LOCKSTEP_Slave_In;
  output [0:4095]LOCKSTEP_Master_Out;
  output [0:4095]LOCKSTEP_Out;
  output [0:31]Instr_Addr;
  input [0:31]Instr;
  output IFetch;
  output I_AS;
  input IReady;
  input IWAIT;
  input ICE;
  input IUE;
  output [0:0]M_AXI_IP_AWID;
  output [31:0]M_AXI_IP_AWADDR;
  output [7:0]M_AXI_IP_AWLEN;
  output [2:0]M_AXI_IP_AWSIZE;
  output [1:0]M_AXI_IP_AWBURST;
  output M_AXI_IP_AWLOCK;
  output [3:0]M_AXI_IP_AWCACHE;
  output [2:0]M_AXI_IP_AWPROT;
  output [3:0]M_AXI_IP_AWQOS;
  output M_AXI_IP_AWVALID;
  input M_AXI_IP_AWREADY;
  output [31:0]M_AXI_IP_WDATA;
  output [3:0]M_AXI_IP_WSTRB;
  output M_AXI_IP_WLAST;
  output M_AXI_IP_WVALID;
  input M_AXI_IP_WREADY;
  input [0:0]M_AXI_IP_BID;
  input [1:0]M_AXI_IP_BRESP;
  input M_AXI_IP_BVALID;
  output M_AXI_IP_BREADY;
  output [0:0]M_AXI_IP_ARID;
  output [31:0]M_AXI_IP_ARADDR;
  output [7:0]M_AXI_IP_ARLEN;
  output [2:0]M_AXI_IP_ARSIZE;
  output [1:0]M_AXI_IP_ARBURST;
  output M_AXI_IP_ARLOCK;
  output [3:0]M_AXI_IP_ARCACHE;
  output [2:0]M_AXI_IP_ARPROT;
  output [3:0]M_AXI_IP_ARQOS;
  output M_AXI_IP_ARVALID;
  input M_AXI_IP_ARREADY;
  input [0:0]M_AXI_IP_RID;
  input [31:0]M_AXI_IP_RDATA;
  input [1:0]M_AXI_IP_RRESP;
  input M_AXI_IP_RLAST;
  input M_AXI_IP_RVALID;
  output M_AXI_IP_RREADY;
  output [0:31]Data_Addr;
  input [0:31]Data_Read;
  output [0:31]Data_Write;
  output D_AS;
  output Read_Strobe;
  output Write_Strobe;
  input DReady;
  input DWait;
  input DCE;
  input DUE;
  output [0:3]Byte_Enable;
  output [0:0]M_AXI_DP_AWID;
  output [31:0]M_AXI_DP_AWADDR;
  output [7:0]M_AXI_DP_AWLEN;
  output [2:0]M_AXI_DP_AWSIZE;
  output [1:0]M_AXI_DP_AWBURST;
  output M_AXI_DP_AWLOCK;
  output [3:0]M_AXI_DP_AWCACHE;
  output [2:0]M_AXI_DP_AWPROT;
  output [3:0]M_AXI_DP_AWQOS;
  output M_AXI_DP_AWVALID;
  input M_AXI_DP_AWREADY;
  output [31:0]M_AXI_DP_WDATA;
  output [3:0]M_AXI_DP_WSTRB;
  output M_AXI_DP_WLAST;
  output M_AXI_DP_WVALID;
  input M_AXI_DP_WREADY;
  input [0:0]M_AXI_DP_BID;
  input [1:0]M_AXI_DP_BRESP;
  input M_AXI_DP_BVALID;
  output M_AXI_DP_BREADY;
  output [0:0]M_AXI_DP_ARID;
  output [31:0]M_AXI_DP_ARADDR;
  output [7:0]M_AXI_DP_ARLEN;
  output [2:0]M_AXI_DP_ARSIZE;
  output [1:0]M_AXI_DP_ARBURST;
  output M_AXI_DP_ARLOCK;
  output [3:0]M_AXI_DP_ARCACHE;
  output [2:0]M_AXI_DP_ARPROT;
  output [3:0]M_AXI_DP_ARQOS;
  output M_AXI_DP_ARVALID;
  input M_AXI_DP_ARREADY;
  input [0:0]M_AXI_DP_RID;
  input [31:0]M_AXI_DP_RDATA;
  input [1:0]M_AXI_DP_RRESP;
  input M_AXI_DP_RLAST;
  input M_AXI_DP_RVALID;
  output M_AXI_DP_RREADY;
  input Dbg_Disable;
  input Dbg_Clk;
  input Dbg_TDI;
  output Dbg_TDO;
  input [0:7]Dbg_Reg_En;
  input Dbg_Shift;
  input Dbg_Capture;
  input Dbg_Update;
  input Debug_Rst;
  output [0:7]Dbg_Trig_In;
  input [0:7]Dbg_Trig_Ack_In;
  input [0:7]Dbg_Trig_Out;
  output [0:7]Dbg_Trig_Ack_Out;
  input Dbg_Trace_Clk;
  output [0:35]Dbg_Trace_Data;
  input Dbg_Trace_Ready;
  output Dbg_Trace_Valid;
  input [14:2]Dbg_AWADDR;
  input Dbg_AWVALID;
  output Dbg_AWREADY;
  input [31:0]Dbg_WDATA;
  input Dbg_WVALID;
  output Dbg_WREADY;
  output [1:0]Dbg_BRESP;
  output Dbg_BVALID;
  input Dbg_BREADY;
  input [14:2]Dbg_ARADDR;
  input Dbg_ARVALID;
  output Dbg_ARREADY;
  output [31:0]Dbg_RDATA;
  output [1:0]Dbg_RRESP;
  output Dbg_RVALID;
  input Dbg_RREADY;
  input DEBUG_ACLK;
  input DEBUG_ARESETN;
  (* mark_debug = "false" *) output [0:31]Trace_Instruction;
  (* mark_debug = "false" *) output Trace_Valid_Instr;
  (* mark_debug = "false" *) output [0:31]Trace_PC;
  (* mark_debug = "false" *) output Trace_Reg_Write;
  (* mark_debug = "false" *) output [0:4]Trace_Reg_Addr;
  (* mark_debug = "false" *) output [0:14]Trace_MSR_Reg;
  (* mark_debug = "false" *) output [0:7]Trace_PID_Reg;
  (* mark_debug = "false" *) output [0:31]Trace_New_Reg_Value;
  (* mark_debug = "false" *) output Trace_Exception_Taken;
  (* mark_debug = "false" *) output [0:4]Trace_Exception_Kind;
  (* mark_debug = "false" *) output Trace_Jump_Taken;
  (* mark_debug = "false" *) output Trace_Delay_Slot;
  (* mark_debug = "false" *) output [0:31]Trace_Data_Address;
  (* mark_debug = "false" *) output [0:31]Trace_Data_Write_Value;
  (* mark_debug = "false" *) output [0:3]Trace_Data_Byte_Enable;
  (* mark_debug = "false" *) output Trace_Data_Access;
  (* mark_debug = "false" *) output Trace_Data_Read;
  (* mark_debug = "false" *) output Trace_Data_Write;
  (* mark_debug = "false" *) output Trace_DCache_Req;
  (* mark_debug = "false" *) output Trace_DCache_Hit;
  (* mark_debug = "false" *) output Trace_DCache_Rdy;
  (* mark_debug = "false" *) output Trace_DCache_Read;
  (* mark_debug = "false" *) output Trace_ICache_Req;
  (* mark_debug = "false" *) output Trace_ICache_Hit;
  (* mark_debug = "false" *) output Trace_ICache_Rdy;
  (* mark_debug = "false" *) output Trace_OF_PipeRun;
  (* mark_debug = "false" *) output Trace_EX_PipeRun;
  (* mark_debug = "false" *) output Trace_MEM_PipeRun;
  (* mark_debug = "false" *) output Trace_MB_Halted;
  (* mark_debug = "false" *) output Trace_Jump_Hit;
  output M0_AXIS_TLAST;
  output [31:0]M0_AXIS_TDATA;
  output M0_AXIS_TVALID;
  input M0_AXIS_TREADY;
  output M1_AXIS_TLAST;
  output [31:0]M1_AXIS_TDATA;
  output M1_AXIS_TVALID;
  input M1_AXIS_TREADY;
  output M2_AXIS_TLAST;
  output [31:0]M2_AXIS_TDATA;
  output M2_AXIS_TVALID;
  input M2_AXIS_TREADY;
  output M3_AXIS_TLAST;
  output [31:0]M3_AXIS_TDATA;
  output M3_AXIS_TVALID;
  input M3_AXIS_TREADY;
  output M4_AXIS_TLAST;
  output [31:0]M4_AXIS_TDATA;
  output M4_AXIS_TVALID;
  input M4_AXIS_TREADY;
  output M5_AXIS_TLAST;
  output [31:0]M5_AXIS_TDATA;
  output M5_AXIS_TVALID;
  input M5_AXIS_TREADY;
  output M6_AXIS_TLAST;
  output [31:0]M6_AXIS_TDATA;
  output M6_AXIS_TVALID;
  input M6_AXIS_TREADY;
  output M7_AXIS_TLAST;
  output [31:0]M7_AXIS_TDATA;
  output M7_AXIS_TVALID;
  input M7_AXIS_TREADY;
  output M8_AXIS_TLAST;
  output [31:0]M8_AXIS_TDATA;
  output M8_AXIS_TVALID;
  input M8_AXIS_TREADY;
  output M9_AXIS_TLAST;
  output [31:0]M9_AXIS_TDATA;
  output M9_AXIS_TVALID;
  input M9_AXIS_TREADY;
  output M10_AXIS_TLAST;
  output [31:0]M10_AXIS_TDATA;
  output M10_AXIS_TVALID;
  input M10_AXIS_TREADY;
  output M11_AXIS_TLAST;
  output [31:0]M11_AXIS_TDATA;
  output M11_AXIS_TVALID;
  input M11_AXIS_TREADY;
  output M12_AXIS_TLAST;
  output [31:0]M12_AXIS_TDATA;
  output M12_AXIS_TVALID;
  input M12_AXIS_TREADY;
  output M13_AXIS_TLAST;
  output [31:0]M13_AXIS_TDATA;
  output M13_AXIS_TVALID;
  input M13_AXIS_TREADY;
  output M14_AXIS_TLAST;
  output [31:0]M14_AXIS_TDATA;
  output M14_AXIS_TVALID;
  input M14_AXIS_TREADY;
  output M15_AXIS_TLAST;
  output [31:0]M15_AXIS_TDATA;
  output M15_AXIS_TVALID;
  input M15_AXIS_TREADY;
  input S0_AXIS_TLAST;
  input [31:0]S0_AXIS_TDATA;
  input S0_AXIS_TVALID;
  output S0_AXIS_TREADY;
  input S1_AXIS_TLAST;
  input [31:0]S1_AXIS_TDATA;
  input S1_AXIS_TVALID;
  output S1_AXIS_TREADY;
  input S2_AXIS_TLAST;
  input [31:0]S2_AXIS_TDATA;
  input S2_AXIS_TVALID;
  output S2_AXIS_TREADY;
  input S3_AXIS_TLAST;
  input [31:0]S3_AXIS_TDATA;
  input S3_AXIS_TVALID;
  output S3_AXIS_TREADY;
  input S4_AXIS_TLAST;
  input [31:0]S4_AXIS_TDATA;
  input S4_AXIS_TVALID;
  output S4_AXIS_TREADY;
  input S5_AXIS_TLAST;
  input [31:0]S5_AXIS_TDATA;
  input S5_AXIS_TVALID;
  output S5_AXIS_TREADY;
  input S6_AXIS_TLAST;
  input [31:0]S6_AXIS_TDATA;
  input S6_AXIS_TVALID;
  output S6_AXIS_TREADY;
  input S7_AXIS_TLAST;
  input [31:0]S7_AXIS_TDATA;
  input S7_AXIS_TVALID;
  output S7_AXIS_TREADY;
  input S8_AXIS_TLAST;
  input [31:0]S8_AXIS_TDATA;
  input S8_AXIS_TVALID;
  output S8_AXIS_TREADY;
  input S9_AXIS_TLAST;
  input [31:0]S9_AXIS_TDATA;
  input S9_AXIS_TVALID;
  output S9_AXIS_TREADY;
  input S10_AXIS_TLAST;
  input [31:0]S10_AXIS_TDATA;
  input S10_AXIS_TVALID;
  output S10_AXIS_TREADY;
  input S11_AXIS_TLAST;
  input [31:0]S11_AXIS_TDATA;
  input S11_AXIS_TVALID;
  output S11_AXIS_TREADY;
  input S12_AXIS_TLAST;
  input [31:0]S12_AXIS_TDATA;
  input S12_AXIS_TVALID;
  output S12_AXIS_TREADY;
  input S13_AXIS_TLAST;
  input [31:0]S13_AXIS_TDATA;
  input S13_AXIS_TVALID;
  output S13_AXIS_TREADY;
  input S14_AXIS_TLAST;
  input [31:0]S14_AXIS_TDATA;
  input S14_AXIS_TVALID;
  output S14_AXIS_TREADY;
  input S15_AXIS_TLAST;
  input [31:0]S15_AXIS_TDATA;
  input S15_AXIS_TVALID;
  output S15_AXIS_TREADY;
  output [0:0]M_AXI_IC_AWID;
  output [31:0]M_AXI_IC_AWADDR;
  output [7:0]M_AXI_IC_AWLEN;
  output [2:0]M_AXI_IC_AWSIZE;
  output [1:0]M_AXI_IC_AWBURST;
  output M_AXI_IC_AWLOCK;
  output [3:0]M_AXI_IC_AWCACHE;
  output [2:0]M_AXI_IC_AWPROT;
  output [3:0]M_AXI_IC_AWQOS;
  output M_AXI_IC_AWVALID;
  input M_AXI_IC_AWREADY;
  output [4:0]M_AXI_IC_AWUSER;
  output [1:0]M_AXI_IC_AWDOMAIN;
  output [2:0]M_AXI_IC_AWSNOOP;
  output [1:0]M_AXI_IC_AWBAR;
  output [31:0]M_AXI_IC_WDATA;
  output [3:0]M_AXI_IC_WSTRB;
  output M_AXI_IC_WLAST;
  output M_AXI_IC_WVALID;
  input M_AXI_IC_WREADY;
  output [0:0]M_AXI_IC_WUSER;
  input [0:0]M_AXI_IC_BID;
  input [1:0]M_AXI_IC_BRESP;
  input M_AXI_IC_BVALID;
  output M_AXI_IC_BREADY;
  input [0:0]M_AXI_IC_BUSER;
  output M_AXI_IC_WACK;
  output [0:0]M_AXI_IC_ARID;
  output [31:0]M_AXI_IC_ARADDR;
  output [7:0]M_AXI_IC_ARLEN;
  output [2:0]M_AXI_IC_ARSIZE;
  output [1:0]M_AXI_IC_ARBURST;
  output M_AXI_IC_ARLOCK;
  output [3:0]M_AXI_IC_ARCACHE;
  output [2:0]M_AXI_IC_ARPROT;
  output [3:0]M_AXI_IC_ARQOS;
  output M_AXI_IC_ARVALID;
  input M_AXI_IC_ARREADY;
  output [4:0]M_AXI_IC_ARUSER;
  output [1:0]M_AXI_IC_ARDOMAIN;
  output [3:0]M_AXI_IC_ARSNOOP;
  output [1:0]M_AXI_IC_ARBAR;
  input [0:0]M_AXI_IC_RID;
  input [31:0]M_AXI_IC_RDATA;
  input [1:0]M_AXI_IC_RRESP;
  input M_AXI_IC_RLAST;
  input M_AXI_IC_RVALID;
  output M_AXI_IC_RREADY;
  input [0:0]M_AXI_IC_RUSER;
  output M_AXI_IC_RACK;
  input M_AXI_IC_ACVALID;
  input [31:0]M_AXI_IC_ACADDR;
  input [3:0]M_AXI_IC_ACSNOOP;
  input [2:0]M_AXI_IC_ACPROT;
  output M_AXI_IC_ACREADY;
  output M_AXI_IC_CRVALID;
  output [4:0]M_AXI_IC_CRRESP;
  input M_AXI_IC_CRREADY;
  output M_AXI_IC_CDVALID;
  output [31:0]M_AXI_IC_CDDATA;
  output M_AXI_IC_CDLAST;
  input M_AXI_IC_CDREADY;
  output [0:0]M_AXI_DC_AWID;
  output [31:0]M_AXI_DC_AWADDR;
  output [7:0]M_AXI_DC_AWLEN;
  output [2:0]M_AXI_DC_AWSIZE;
  output [1:0]M_AXI_DC_AWBURST;
  output M_AXI_DC_AWLOCK;
  output [3:0]M_AXI_DC_AWCACHE;
  output [2:0]M_AXI_DC_AWPROT;
  output [3:0]M_AXI_DC_AWQOS;
  output M_AXI_DC_AWVALID;
  input M_AXI_DC_AWREADY;
  output [4:0]M_AXI_DC_AWUSER;
  output [1:0]M_AXI_DC_AWDOMAIN;
  output [2:0]M_AXI_DC_AWSNOOP;
  output [1:0]M_AXI_DC_AWBAR;
  output [31:0]M_AXI_DC_WDATA;
  output [3:0]M_AXI_DC_WSTRB;
  output M_AXI_DC_WLAST;
  output M_AXI_DC_WVALID;
  input M_AXI_DC_WREADY;
  output [0:0]M_AXI_DC_WUSER;
  input [1:0]M_AXI_DC_BRESP;
  input [0:0]M_AXI_DC_BID;
  input M_AXI_DC_BVALID;
  output M_AXI_DC_BREADY;
  input [0:0]M_AXI_DC_BUSER;
  output M_AXI_DC_WACK;
  output [0:0]M_AXI_DC_ARID;
  output [31:0]M_AXI_DC_ARADDR;
  output [7:0]M_AXI_DC_ARLEN;
  output [2:0]M_AXI_DC_ARSIZE;
  output [1:0]M_AXI_DC_ARBURST;
  output M_AXI_DC_ARLOCK;
  output [3:0]M_AXI_DC_ARCACHE;
  output [2:0]M_AXI_DC_ARPROT;
  output [3:0]M_AXI_DC_ARQOS;
  output M_AXI_DC_ARVALID;
  input M_AXI_DC_ARREADY;
  output [4:0]M_AXI_DC_ARUSER;
  output [1:0]M_AXI_DC_ARDOMAIN;
  output [3:0]M_AXI_DC_ARSNOOP;
  output [1:0]M_AXI_DC_ARBAR;
  input [0:0]M_AXI_DC_RID;
  input [31:0]M_AXI_DC_RDATA;
  input [1:0]M_AXI_DC_RRESP;
  input M_AXI_DC_RLAST;
  input M_AXI_DC_RVALID;
  output M_AXI_DC_RREADY;
  input [0:0]M_AXI_DC_RUSER;
  output M_AXI_DC_RACK;
  input M_AXI_DC_ACVALID;
  input [31:0]M_AXI_DC_ACADDR;
  input [3:0]M_AXI_DC_ACSNOOP;
  input [2:0]M_AXI_DC_ACPROT;
  output M_AXI_DC_ACREADY;
  output M_AXI_DC_CRVALID;
  output [4:0]M_AXI_DC_CRRESP;
  input M_AXI_DC_CRREADY;
  output M_AXI_DC_CDVALID;
  output [31:0]M_AXI_DC_CDDATA;
  output M_AXI_DC_CDLAST;
  input M_AXI_DC_CDREADY;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:3]Byte_Enable;
  wire Clk;
  wire Config_Reg_En;
  wire Config_Reset;
  wire DReady;
  wire DWait;
  wire D_AS;
  wire [0:31]Data_Addr;
  wire [0:31]Data_Read;
  wire Data_Read_Reg_En;
  wire [0:31]Data_Write;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire [0:7]Dbg_Trig_Ack_In;
  wire [0:1]\^Dbg_Trig_Ack_Out ;
  wire [0:1]\^Dbg_Trig_In ;
  wire [0:7]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Debug_Rst;
  wire \Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Status_Reg_En ;
  wire Hibernate;
  wire IFetch;
  wire IReady;
  wire IWAIT;
  wire I_AS;
  wire [0:31]Instr;
  wire [0:31]Instr_Addr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [3:46]\^LOCKSTEP_Master_Out ;
  wire [0:3228]\^LOCKSTEP_Out ;
  wire MB_Halted;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_ARVALID;
  wire [31:0]M_AXI_DP_AWADDR;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_AWVALID;
  wire M_AXI_DP_BREADY;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RREADY;
  wire M_AXI_DP_RVALID;
  wire [31:0]M_AXI_DP_WDATA;
  wire M_AXI_DP_WREADY;
  wire [3:0]M_AXI_DP_WSTRB;
  wire M_AXI_DP_WVALID;
  wire Mb_Reset;
  wire MicroBlaze_Core_I_n_413;
  wire Pause;
  wire Pause_Ack;
  wire Read_Strobe;
  wire Reset;
  wire [0:1]Reset_Mode;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire Sleep;
  wire Suspend;
  wire Trace_Data_Access;
  wire [0:31]Trace_Data_Address;
  wire [0:3]Trace_Data_Byte_Enable;
  wire Trace_Data_Read;
  wire Trace_Data_Write;
  wire [0:31]Trace_Data_Write_Value;
  wire Trace_Delay_Slot;
  wire Trace_EX_PipeRun;
  wire [1:4]\^Trace_Exception_Kind ;
  wire Trace_Exception_Taken;
  wire [0:31]Trace_Instruction;
  wire Trace_Jump_Taken;
  wire Trace_MB_Halted;
  wire Trace_MEM_PipeRun;
  wire [8:13]\^Trace_MSR_Reg ;
  wire [0:31]Trace_New_Reg_Value;
  wire Trace_OF_PipeRun;
  wire [0:31]Trace_PC;
  wire [0:4]Trace_Reg_Addr;
  wire Trace_Reg_Write;
  wire Trace_Valid_Instr;
  wire [0:1]Wakeup;
  wire Write_Strobe;

  assign Dbg_ARREADY = \<const0> ;
  assign Dbg_AWREADY = \<const0> ;
  assign Dbg_BRESP[1] = \<const0> ;
  assign Dbg_BRESP[0] = \<const0> ;
  assign Dbg_BVALID = \<const0> ;
  assign Dbg_Continue = \^LOCKSTEP_Master_Out [12];
  assign Dbg_Intr = \<const0> ;
  assign Dbg_RDATA[31] = \<const0> ;
  assign Dbg_RDATA[30] = \<const0> ;
  assign Dbg_RDATA[29] = \<const0> ;
  assign Dbg_RDATA[28] = \<const0> ;
  assign Dbg_RDATA[27] = \<const0> ;
  assign Dbg_RDATA[26] = \<const0> ;
  assign Dbg_RDATA[25] = \<const0> ;
  assign Dbg_RDATA[24] = \<const0> ;
  assign Dbg_RDATA[23] = \<const0> ;
  assign Dbg_RDATA[22] = \<const0> ;
  assign Dbg_RDATA[21] = \<const0> ;
  assign Dbg_RDATA[20] = \<const0> ;
  assign Dbg_RDATA[19] = \<const0> ;
  assign Dbg_RDATA[18] = \<const0> ;
  assign Dbg_RDATA[17] = \<const0> ;
  assign Dbg_RDATA[16] = \<const0> ;
  assign Dbg_RDATA[15] = \<const0> ;
  assign Dbg_RDATA[14] = \<const0> ;
  assign Dbg_RDATA[13] = \<const0> ;
  assign Dbg_RDATA[12] = \<const0> ;
  assign Dbg_RDATA[11] = \<const0> ;
  assign Dbg_RDATA[10] = \<const0> ;
  assign Dbg_RDATA[9] = \<const0> ;
  assign Dbg_RDATA[8] = \<const0> ;
  assign Dbg_RDATA[7] = \<const0> ;
  assign Dbg_RDATA[6] = \<const0> ;
  assign Dbg_RDATA[5] = \<const0> ;
  assign Dbg_RDATA[4] = \<const0> ;
  assign Dbg_RDATA[3] = \<const0> ;
  assign Dbg_RDATA[2] = \<const0> ;
  assign Dbg_RDATA[1] = \<const0> ;
  assign Dbg_RDATA[0] = \<const0> ;
  assign Dbg_RRESP[1] = \<const0> ;
  assign Dbg_RRESP[0] = \<const0> ;
  assign Dbg_RVALID = \<const0> ;
  assign Dbg_Trace_Data[0] = \<const0> ;
  assign Dbg_Trace_Data[1] = \<const0> ;
  assign Dbg_Trace_Data[2] = \<const0> ;
  assign Dbg_Trace_Data[3] = \<const0> ;
  assign Dbg_Trace_Data[4] = \<const0> ;
  assign Dbg_Trace_Data[5] = \<const0> ;
  assign Dbg_Trace_Data[6] = \<const0> ;
  assign Dbg_Trace_Data[7] = \<const0> ;
  assign Dbg_Trace_Data[8] = \<const0> ;
  assign Dbg_Trace_Data[9] = \<const0> ;
  assign Dbg_Trace_Data[10] = \<const0> ;
  assign Dbg_Trace_Data[11] = \<const0> ;
  assign Dbg_Trace_Data[12] = \<const0> ;
  assign Dbg_Trace_Data[13] = \<const0> ;
  assign Dbg_Trace_Data[14] = \<const0> ;
  assign Dbg_Trace_Data[15] = \<const0> ;
  assign Dbg_Trace_Data[16] = \<const0> ;
  assign Dbg_Trace_Data[17] = \<const0> ;
  assign Dbg_Trace_Data[18] = \<const0> ;
  assign Dbg_Trace_Data[19] = \<const0> ;
  assign Dbg_Trace_Data[20] = \<const0> ;
  assign Dbg_Trace_Data[21] = \<const0> ;
  assign Dbg_Trace_Data[22] = \<const0> ;
  assign Dbg_Trace_Data[23] = \<const0> ;
  assign Dbg_Trace_Data[24] = \<const0> ;
  assign Dbg_Trace_Data[25] = \<const0> ;
  assign Dbg_Trace_Data[26] = \<const0> ;
  assign Dbg_Trace_Data[27] = \<const0> ;
  assign Dbg_Trace_Data[28] = \<const0> ;
  assign Dbg_Trace_Data[29] = \<const0> ;
  assign Dbg_Trace_Data[30] = \<const0> ;
  assign Dbg_Trace_Data[31] = \<const0> ;
  assign Dbg_Trace_Data[32] = \<const0> ;
  assign Dbg_Trace_Data[33] = \<const0> ;
  assign Dbg_Trace_Data[34] = \<const0> ;
  assign Dbg_Trace_Data[35] = \<const0> ;
  assign Dbg_Trace_Valid = \<const0> ;
  assign Dbg_Trig_Ack_Out[0:1] = \^Dbg_Trig_Ack_Out [0:1];
  assign Dbg_Trig_Ack_Out[2] = \<const0> ;
  assign Dbg_Trig_Ack_Out[3] = \<const0> ;
  assign Dbg_Trig_Ack_Out[4] = \<const0> ;
  assign Dbg_Trig_Ack_Out[5] = \<const0> ;
  assign Dbg_Trig_Ack_Out[6] = \<const0> ;
  assign Dbg_Trig_Ack_Out[7] = \<const0> ;
  assign Dbg_Trig_In[0:1] = \^Dbg_Trig_In [0:1];
  assign Dbg_Trig_In[2] = \<const0> ;
  assign Dbg_Trig_In[3] = \<const0> ;
  assign Dbg_Trig_In[4] = \<const0> ;
  assign Dbg_Trig_In[5] = \<const0> ;
  assign Dbg_Trig_In[6] = \<const0> ;
  assign Dbg_Trig_In[7] = \<const0> ;
  assign Dbg_WREADY = \<const0> ;
  assign Dbg_Wakeup = \^LOCKSTEP_Master_Out [11];
  assign LOCKSTEP_Master_Out[0] = \<const0> ;
  assign LOCKSTEP_Master_Out[1] = \<const0> ;
  assign LOCKSTEP_Master_Out[2] = \<const0> ;
  assign LOCKSTEP_Master_Out[3:7] = \^LOCKSTEP_Master_Out [3:7];
  assign LOCKSTEP_Master_Out[8] = MB_Halted;
  assign LOCKSTEP_Master_Out[9] = \<const0> ;
  assign LOCKSTEP_Master_Out[10] = MB_Halted;
  assign LOCKSTEP_Master_Out[11:13] = \^LOCKSTEP_Master_Out [11:13];
  assign LOCKSTEP_Master_Out[14] = Debug_Rst;
  assign LOCKSTEP_Master_Out[15:46] = \^LOCKSTEP_Master_Out [15:46];
  assign LOCKSTEP_Master_Out[47] = \<const0> ;
  assign LOCKSTEP_Master_Out[48] = \<const0> ;
  assign LOCKSTEP_Master_Out[49] = \<const0> ;
  assign LOCKSTEP_Master_Out[50] = \<const0> ;
  assign LOCKSTEP_Master_Out[51] = \<const0> ;
  assign LOCKSTEP_Master_Out[52] = \<const0> ;
  assign LOCKSTEP_Master_Out[53] = \<const0> ;
  assign LOCKSTEP_Master_Out[54] = \<const0> ;
  assign LOCKSTEP_Master_Out[55] = \<const0> ;
  assign LOCKSTEP_Master_Out[56] = \<const0> ;
  assign LOCKSTEP_Master_Out[57] = \<const0> ;
  assign LOCKSTEP_Master_Out[58] = \<const0> ;
  assign LOCKSTEP_Master_Out[59] = \<const0> ;
  assign LOCKSTEP_Master_Out[60] = \<const0> ;
  assign LOCKSTEP_Master_Out[61] = \<const0> ;
  assign LOCKSTEP_Master_Out[62] = \<const0> ;
  assign LOCKSTEP_Master_Out[63] = \<const0> ;
  assign LOCKSTEP_Master_Out[64] = \<const0> ;
  assign LOCKSTEP_Master_Out[65] = \<const0> ;
  assign LOCKSTEP_Master_Out[66] = \<const0> ;
  assign LOCKSTEP_Master_Out[67] = \<const0> ;
  assign LOCKSTEP_Master_Out[68] = \<const0> ;
  assign LOCKSTEP_Master_Out[69] = \<const0> ;
  assign LOCKSTEP_Master_Out[70] = \<const0> ;
  assign LOCKSTEP_Master_Out[71] = \<const0> ;
  assign LOCKSTEP_Master_Out[72] = \<const0> ;
  assign LOCKSTEP_Master_Out[73] = \<const0> ;
  assign LOCKSTEP_Master_Out[74] = \<const0> ;
  assign LOCKSTEP_Master_Out[75] = \<const0> ;
  assign LOCKSTEP_Master_Out[76] = \<const0> ;
  assign LOCKSTEP_Master_Out[77] = \<const0> ;
  assign LOCKSTEP_Master_Out[78] = \<const0> ;
  assign LOCKSTEP_Master_Out[79] = \<const0> ;
  assign LOCKSTEP_Master_Out[80] = \<const0> ;
  assign LOCKSTEP_Master_Out[81] = \<const0> ;
  assign LOCKSTEP_Master_Out[82] = \<const0> ;
  assign LOCKSTEP_Master_Out[83] = \<const0> ;
  assign LOCKSTEP_Master_Out[84] = \<const0> ;
  assign LOCKSTEP_Master_Out[85] = \<const0> ;
  assign LOCKSTEP_Master_Out[86] = \<const0> ;
  assign LOCKSTEP_Master_Out[87] = \<const0> ;
  assign LOCKSTEP_Master_Out[88] = \<const0> ;
  assign LOCKSTEP_Master_Out[89] = \<const0> ;
  assign LOCKSTEP_Master_Out[90] = \<const0> ;
  assign LOCKSTEP_Master_Out[91] = \<const0> ;
  assign LOCKSTEP_Master_Out[92] = \<const0> ;
  assign LOCKSTEP_Master_Out[93] = \<const0> ;
  assign LOCKSTEP_Master_Out[94] = \<const0> ;
  assign LOCKSTEP_Master_Out[95] = \<const0> ;
  assign LOCKSTEP_Master_Out[96] = \<const0> ;
  assign LOCKSTEP_Master_Out[97] = \<const0> ;
  assign LOCKSTEP_Master_Out[98] = \<const0> ;
  assign LOCKSTEP_Master_Out[99] = \<const0> ;
  assign LOCKSTEP_Master_Out[100] = \<const0> ;
  assign LOCKSTEP_Master_Out[101] = \<const0> ;
  assign LOCKSTEP_Master_Out[102] = \<const0> ;
  assign LOCKSTEP_Master_Out[103] = \<const0> ;
  assign LOCKSTEP_Master_Out[104] = \<const0> ;
  assign LOCKSTEP_Master_Out[105] = \<const0> ;
  assign LOCKSTEP_Master_Out[106] = \<const0> ;
  assign LOCKSTEP_Master_Out[107] = \<const0> ;
  assign LOCKSTEP_Master_Out[108] = \<const0> ;
  assign LOCKSTEP_Master_Out[109] = \<const0> ;
  assign LOCKSTEP_Master_Out[110] = \<const0> ;
  assign LOCKSTEP_Master_Out[111] = \<const0> ;
  assign LOCKSTEP_Master_Out[112] = \<const0> ;
  assign LOCKSTEP_Master_Out[113] = \<const0> ;
  assign LOCKSTEP_Master_Out[114] = \<const0> ;
  assign LOCKSTEP_Master_Out[115] = \<const0> ;
  assign LOCKSTEP_Master_Out[116] = \<const0> ;
  assign LOCKSTEP_Master_Out[117] = \<const0> ;
  assign LOCKSTEP_Master_Out[118] = \<const0> ;
  assign LOCKSTEP_Master_Out[119] = \<const0> ;
  assign LOCKSTEP_Master_Out[120] = \<const0> ;
  assign LOCKSTEP_Master_Out[121] = \<const0> ;
  assign LOCKSTEP_Master_Out[122] = \<const0> ;
  assign LOCKSTEP_Master_Out[123] = \<const0> ;
  assign LOCKSTEP_Master_Out[124] = \<const0> ;
  assign LOCKSTEP_Master_Out[125] = \<const0> ;
  assign LOCKSTEP_Master_Out[126] = \<const0> ;
  assign LOCKSTEP_Master_Out[127] = \<const0> ;
  assign LOCKSTEP_Master_Out[128] = \<const0> ;
  assign LOCKSTEP_Master_Out[129] = \<const0> ;
  assign LOCKSTEP_Master_Out[130] = \<const0> ;
  assign LOCKSTEP_Master_Out[131] = \<const0> ;
  assign LOCKSTEP_Master_Out[132] = \<const0> ;
  assign LOCKSTEP_Master_Out[133] = \<const0> ;
  assign LOCKSTEP_Master_Out[134] = \<const0> ;
  assign LOCKSTEP_Master_Out[135] = \<const0> ;
  assign LOCKSTEP_Master_Out[136] = \<const0> ;
  assign LOCKSTEP_Master_Out[137] = \<const0> ;
  assign LOCKSTEP_Master_Out[138] = \<const0> ;
  assign LOCKSTEP_Master_Out[139] = \<const0> ;
  assign LOCKSTEP_Master_Out[140] = \<const0> ;
  assign LOCKSTEP_Master_Out[141] = \<const0> ;
  assign LOCKSTEP_Master_Out[142] = \<const0> ;
  assign LOCKSTEP_Master_Out[143] = \<const0> ;
  assign LOCKSTEP_Master_Out[144] = \<const0> ;
  assign LOCKSTEP_Master_Out[145] = \<const0> ;
  assign LOCKSTEP_Master_Out[146] = \<const0> ;
  assign LOCKSTEP_Master_Out[147] = \<const0> ;
  assign LOCKSTEP_Master_Out[148] = \<const0> ;
  assign LOCKSTEP_Master_Out[149] = \<const0> ;
  assign LOCKSTEP_Master_Out[150] = \<const0> ;
  assign LOCKSTEP_Master_Out[151] = \<const0> ;
  assign LOCKSTEP_Master_Out[152] = \<const0> ;
  assign LOCKSTEP_Master_Out[153] = \<const0> ;
  assign LOCKSTEP_Master_Out[154] = \<const0> ;
  assign LOCKSTEP_Master_Out[155] = \<const0> ;
  assign LOCKSTEP_Master_Out[156] = \<const0> ;
  assign LOCKSTEP_Master_Out[157] = \<const0> ;
  assign LOCKSTEP_Master_Out[158] = \<const0> ;
  assign LOCKSTEP_Master_Out[159] = \<const0> ;
  assign LOCKSTEP_Master_Out[160] = \<const0> ;
  assign LOCKSTEP_Master_Out[161] = \<const0> ;
  assign LOCKSTEP_Master_Out[162] = \<const0> ;
  assign LOCKSTEP_Master_Out[163] = \<const0> ;
  assign LOCKSTEP_Master_Out[164] = \<const0> ;
  assign LOCKSTEP_Master_Out[165] = \<const0> ;
  assign LOCKSTEP_Master_Out[166] = \<const0> ;
  assign LOCKSTEP_Master_Out[167] = \<const0> ;
  assign LOCKSTEP_Master_Out[168] = \<const0> ;
  assign LOCKSTEP_Master_Out[169] = \<const0> ;
  assign LOCKSTEP_Master_Out[170] = \<const0> ;
  assign LOCKSTEP_Master_Out[171] = \<const0> ;
  assign LOCKSTEP_Master_Out[172] = \<const0> ;
  assign LOCKSTEP_Master_Out[173] = \<const0> ;
  assign LOCKSTEP_Master_Out[174] = \<const0> ;
  assign LOCKSTEP_Master_Out[175] = \<const0> ;
  assign LOCKSTEP_Master_Out[176] = \<const0> ;
  assign LOCKSTEP_Master_Out[177] = \<const0> ;
  assign LOCKSTEP_Master_Out[178] = \<const0> ;
  assign LOCKSTEP_Master_Out[179] = \<const0> ;
  assign LOCKSTEP_Master_Out[180] = \<const0> ;
  assign LOCKSTEP_Master_Out[181] = \<const0> ;
  assign LOCKSTEP_Master_Out[182] = \<const0> ;
  assign LOCKSTEP_Master_Out[183] = \<const0> ;
  assign LOCKSTEP_Master_Out[184] = \<const0> ;
  assign LOCKSTEP_Master_Out[185] = \<const0> ;
  assign LOCKSTEP_Master_Out[186] = \<const0> ;
  assign LOCKSTEP_Master_Out[187] = \<const0> ;
  assign LOCKSTEP_Master_Out[188] = \<const0> ;
  assign LOCKSTEP_Master_Out[189] = \<const0> ;
  assign LOCKSTEP_Master_Out[190] = \<const0> ;
  assign LOCKSTEP_Master_Out[191] = \<const0> ;
  assign LOCKSTEP_Master_Out[192] = \<const0> ;
  assign LOCKSTEP_Master_Out[193] = \<const0> ;
  assign LOCKSTEP_Master_Out[194] = \<const0> ;
  assign LOCKSTEP_Master_Out[195] = \<const0> ;
  assign LOCKSTEP_Master_Out[196] = \<const0> ;
  assign LOCKSTEP_Master_Out[197] = \<const0> ;
  assign LOCKSTEP_Master_Out[198] = \<const0> ;
  assign LOCKSTEP_Master_Out[199] = \<const0> ;
  assign LOCKSTEP_Master_Out[200] = \<const0> ;
  assign LOCKSTEP_Master_Out[201] = \<const0> ;
  assign LOCKSTEP_Master_Out[202] = \<const0> ;
  assign LOCKSTEP_Master_Out[203] = \<const0> ;
  assign LOCKSTEP_Master_Out[204] = \<const0> ;
  assign LOCKSTEP_Master_Out[205] = \<const0> ;
  assign LOCKSTEP_Master_Out[206] = \<const0> ;
  assign LOCKSTEP_Master_Out[207] = \<const0> ;
  assign LOCKSTEP_Master_Out[208] = \<const0> ;
  assign LOCKSTEP_Master_Out[209] = \<const0> ;
  assign LOCKSTEP_Master_Out[210] = \<const0> ;
  assign LOCKSTEP_Master_Out[211] = \<const0> ;
  assign LOCKSTEP_Master_Out[212] = \<const0> ;
  assign LOCKSTEP_Master_Out[213] = \<const0> ;
  assign LOCKSTEP_Master_Out[214] = \<const0> ;
  assign LOCKSTEP_Master_Out[215] = \<const0> ;
  assign LOCKSTEP_Master_Out[216] = \<const0> ;
  assign LOCKSTEP_Master_Out[217] = \<const0> ;
  assign LOCKSTEP_Master_Out[218] = \<const0> ;
  assign LOCKSTEP_Master_Out[219] = \<const0> ;
  assign LOCKSTEP_Master_Out[220] = \<const0> ;
  assign LOCKSTEP_Master_Out[221] = \<const0> ;
  assign LOCKSTEP_Master_Out[222] = \<const0> ;
  assign LOCKSTEP_Master_Out[223] = \<const0> ;
  assign LOCKSTEP_Master_Out[224] = \<const0> ;
  assign LOCKSTEP_Master_Out[225] = \<const0> ;
  assign LOCKSTEP_Master_Out[226] = \<const0> ;
  assign LOCKSTEP_Master_Out[227] = \<const0> ;
  assign LOCKSTEP_Master_Out[228] = \<const0> ;
  assign LOCKSTEP_Master_Out[229] = \<const0> ;
  assign LOCKSTEP_Master_Out[230] = \<const0> ;
  assign LOCKSTEP_Master_Out[231] = \<const0> ;
  assign LOCKSTEP_Master_Out[232] = \<const0> ;
  assign LOCKSTEP_Master_Out[233] = \<const0> ;
  assign LOCKSTEP_Master_Out[234] = \<const0> ;
  assign LOCKSTEP_Master_Out[235] = \<const0> ;
  assign LOCKSTEP_Master_Out[236] = \<const0> ;
  assign LOCKSTEP_Master_Out[237] = \<const0> ;
  assign LOCKSTEP_Master_Out[238] = \<const0> ;
  assign LOCKSTEP_Master_Out[239] = \<const0> ;
  assign LOCKSTEP_Master_Out[240] = \<const0> ;
  assign LOCKSTEP_Master_Out[241] = \<const0> ;
  assign LOCKSTEP_Master_Out[242] = \<const0> ;
  assign LOCKSTEP_Master_Out[243] = \<const0> ;
  assign LOCKSTEP_Master_Out[244] = \<const0> ;
  assign LOCKSTEP_Master_Out[245] = \<const0> ;
  assign LOCKSTEP_Master_Out[246] = \<const0> ;
  assign LOCKSTEP_Master_Out[247] = \<const0> ;
  assign LOCKSTEP_Master_Out[248] = \<const0> ;
  assign LOCKSTEP_Master_Out[249] = \<const0> ;
  assign LOCKSTEP_Master_Out[250] = \<const0> ;
  assign LOCKSTEP_Master_Out[251] = \<const0> ;
  assign LOCKSTEP_Master_Out[252] = \<const0> ;
  assign LOCKSTEP_Master_Out[253] = \<const0> ;
  assign LOCKSTEP_Master_Out[254] = \<const0> ;
  assign LOCKSTEP_Master_Out[255] = \<const0> ;
  assign LOCKSTEP_Master_Out[256] = \<const0> ;
  assign LOCKSTEP_Master_Out[257] = \<const0> ;
  assign LOCKSTEP_Master_Out[258] = \<const0> ;
  assign LOCKSTEP_Master_Out[259] = \<const0> ;
  assign LOCKSTEP_Master_Out[260] = \<const0> ;
  assign LOCKSTEP_Master_Out[261] = \<const0> ;
  assign LOCKSTEP_Master_Out[262] = \<const0> ;
  assign LOCKSTEP_Master_Out[263] = \<const0> ;
  assign LOCKSTEP_Master_Out[264] = \<const0> ;
  assign LOCKSTEP_Master_Out[265] = \<const0> ;
  assign LOCKSTEP_Master_Out[266] = \<const0> ;
  assign LOCKSTEP_Master_Out[267] = \<const0> ;
  assign LOCKSTEP_Master_Out[268] = \<const0> ;
  assign LOCKSTEP_Master_Out[269] = \<const0> ;
  assign LOCKSTEP_Master_Out[270] = \<const0> ;
  assign LOCKSTEP_Master_Out[271] = \<const0> ;
  assign LOCKSTEP_Master_Out[272] = \<const0> ;
  assign LOCKSTEP_Master_Out[273] = \<const0> ;
  assign LOCKSTEP_Master_Out[274] = \<const0> ;
  assign LOCKSTEP_Master_Out[275] = \<const0> ;
  assign LOCKSTEP_Master_Out[276] = \<const0> ;
  assign LOCKSTEP_Master_Out[277] = \<const0> ;
  assign LOCKSTEP_Master_Out[278] = \<const0> ;
  assign LOCKSTEP_Master_Out[279] = \<const0> ;
  assign LOCKSTEP_Master_Out[280] = \<const0> ;
  assign LOCKSTEP_Master_Out[281] = \<const0> ;
  assign LOCKSTEP_Master_Out[282] = \<const0> ;
  assign LOCKSTEP_Master_Out[283] = \<const0> ;
  assign LOCKSTEP_Master_Out[284] = \<const0> ;
  assign LOCKSTEP_Master_Out[285] = \<const0> ;
  assign LOCKSTEP_Master_Out[286] = \<const0> ;
  assign LOCKSTEP_Master_Out[287] = \<const0> ;
  assign LOCKSTEP_Master_Out[288] = \<const0> ;
  assign LOCKSTEP_Master_Out[289] = \<const0> ;
  assign LOCKSTEP_Master_Out[290] = \<const0> ;
  assign LOCKSTEP_Master_Out[291] = \<const0> ;
  assign LOCKSTEP_Master_Out[292] = \<const0> ;
  assign LOCKSTEP_Master_Out[293] = \<const0> ;
  assign LOCKSTEP_Master_Out[294] = \<const0> ;
  assign LOCKSTEP_Master_Out[295] = \<const0> ;
  assign LOCKSTEP_Master_Out[296] = \<const0> ;
  assign LOCKSTEP_Master_Out[297] = \<const0> ;
  assign LOCKSTEP_Master_Out[298] = \<const0> ;
  assign LOCKSTEP_Master_Out[299] = \<const0> ;
  assign LOCKSTEP_Master_Out[300] = \<const0> ;
  assign LOCKSTEP_Master_Out[301] = \<const0> ;
  assign LOCKSTEP_Master_Out[302] = \<const0> ;
  assign LOCKSTEP_Master_Out[303] = \<const0> ;
  assign LOCKSTEP_Master_Out[304] = \<const0> ;
  assign LOCKSTEP_Master_Out[305] = \<const0> ;
  assign LOCKSTEP_Master_Out[306] = \<const0> ;
  assign LOCKSTEP_Master_Out[307] = \<const0> ;
  assign LOCKSTEP_Master_Out[308] = \<const0> ;
  assign LOCKSTEP_Master_Out[309] = \<const0> ;
  assign LOCKSTEP_Master_Out[310] = \<const0> ;
  assign LOCKSTEP_Master_Out[311] = \<const0> ;
  assign LOCKSTEP_Master_Out[312] = \<const0> ;
  assign LOCKSTEP_Master_Out[313] = \<const0> ;
  assign LOCKSTEP_Master_Out[314] = \<const0> ;
  assign LOCKSTEP_Master_Out[315] = \<const0> ;
  assign LOCKSTEP_Master_Out[316] = \<const0> ;
  assign LOCKSTEP_Master_Out[317] = \<const0> ;
  assign LOCKSTEP_Master_Out[318] = \<const0> ;
  assign LOCKSTEP_Master_Out[319] = \<const0> ;
  assign LOCKSTEP_Master_Out[320] = \<const0> ;
  assign LOCKSTEP_Master_Out[321] = \<const0> ;
  assign LOCKSTEP_Master_Out[322] = \<const0> ;
  assign LOCKSTEP_Master_Out[323] = \<const0> ;
  assign LOCKSTEP_Master_Out[324] = \<const0> ;
  assign LOCKSTEP_Master_Out[325] = \<const0> ;
  assign LOCKSTEP_Master_Out[326] = \<const0> ;
  assign LOCKSTEP_Master_Out[327] = \<const0> ;
  assign LOCKSTEP_Master_Out[328] = \<const0> ;
  assign LOCKSTEP_Master_Out[329] = \<const0> ;
  assign LOCKSTEP_Master_Out[330] = \<const0> ;
  assign LOCKSTEP_Master_Out[331] = \<const0> ;
  assign LOCKSTEP_Master_Out[332] = \<const0> ;
  assign LOCKSTEP_Master_Out[333] = \<const0> ;
  assign LOCKSTEP_Master_Out[334] = \<const0> ;
  assign LOCKSTEP_Master_Out[335] = \<const0> ;
  assign LOCKSTEP_Master_Out[336] = \<const0> ;
  assign LOCKSTEP_Master_Out[337] = \<const0> ;
  assign LOCKSTEP_Master_Out[338] = \<const0> ;
  assign LOCKSTEP_Master_Out[339] = \<const0> ;
  assign LOCKSTEP_Master_Out[340] = \<const0> ;
  assign LOCKSTEP_Master_Out[341] = \<const0> ;
  assign LOCKSTEP_Master_Out[342] = \<const0> ;
  assign LOCKSTEP_Master_Out[343] = \<const0> ;
  assign LOCKSTEP_Master_Out[344] = \<const0> ;
  assign LOCKSTEP_Master_Out[345] = \<const0> ;
  assign LOCKSTEP_Master_Out[346] = \<const0> ;
  assign LOCKSTEP_Master_Out[347] = \<const0> ;
  assign LOCKSTEP_Master_Out[348] = \<const0> ;
  assign LOCKSTEP_Master_Out[349] = \<const0> ;
  assign LOCKSTEP_Master_Out[350] = \<const0> ;
  assign LOCKSTEP_Master_Out[351] = \<const0> ;
  assign LOCKSTEP_Master_Out[352] = \<const0> ;
  assign LOCKSTEP_Master_Out[353] = \<const0> ;
  assign LOCKSTEP_Master_Out[354] = \<const0> ;
  assign LOCKSTEP_Master_Out[355] = \<const0> ;
  assign LOCKSTEP_Master_Out[356] = \<const0> ;
  assign LOCKSTEP_Master_Out[357] = \<const0> ;
  assign LOCKSTEP_Master_Out[358] = \<const0> ;
  assign LOCKSTEP_Master_Out[359] = \<const0> ;
  assign LOCKSTEP_Master_Out[360] = \<const0> ;
  assign LOCKSTEP_Master_Out[361] = \<const0> ;
  assign LOCKSTEP_Master_Out[362] = \<const0> ;
  assign LOCKSTEP_Master_Out[363] = \<const0> ;
  assign LOCKSTEP_Master_Out[364] = \<const0> ;
  assign LOCKSTEP_Master_Out[365] = \<const0> ;
  assign LOCKSTEP_Master_Out[366] = \<const0> ;
  assign LOCKSTEP_Master_Out[367] = \<const0> ;
  assign LOCKSTEP_Master_Out[368] = \<const0> ;
  assign LOCKSTEP_Master_Out[369] = \<const0> ;
  assign LOCKSTEP_Master_Out[370] = \<const0> ;
  assign LOCKSTEP_Master_Out[371] = \<const0> ;
  assign LOCKSTEP_Master_Out[372] = \<const0> ;
  assign LOCKSTEP_Master_Out[373] = \<const0> ;
  assign LOCKSTEP_Master_Out[374] = \<const0> ;
  assign LOCKSTEP_Master_Out[375] = \<const0> ;
  assign LOCKSTEP_Master_Out[376] = \<const0> ;
  assign LOCKSTEP_Master_Out[377] = \<const0> ;
  assign LOCKSTEP_Master_Out[378] = \<const0> ;
  assign LOCKSTEP_Master_Out[379] = \<const0> ;
  assign LOCKSTEP_Master_Out[380] = \<const0> ;
  assign LOCKSTEP_Master_Out[381] = \<const0> ;
  assign LOCKSTEP_Master_Out[382] = \<const0> ;
  assign LOCKSTEP_Master_Out[383] = \<const0> ;
  assign LOCKSTEP_Master_Out[384] = \<const0> ;
  assign LOCKSTEP_Master_Out[385] = \<const0> ;
  assign LOCKSTEP_Master_Out[386] = \<const0> ;
  assign LOCKSTEP_Master_Out[387] = \<const0> ;
  assign LOCKSTEP_Master_Out[388] = \<const0> ;
  assign LOCKSTEP_Master_Out[389] = \<const0> ;
  assign LOCKSTEP_Master_Out[390] = \<const0> ;
  assign LOCKSTEP_Master_Out[391] = \<const0> ;
  assign LOCKSTEP_Master_Out[392] = \<const0> ;
  assign LOCKSTEP_Master_Out[393] = \<const0> ;
  assign LOCKSTEP_Master_Out[394] = \<const0> ;
  assign LOCKSTEP_Master_Out[395] = \<const0> ;
  assign LOCKSTEP_Master_Out[396] = \<const0> ;
  assign LOCKSTEP_Master_Out[397] = \<const0> ;
  assign LOCKSTEP_Master_Out[398] = \<const0> ;
  assign LOCKSTEP_Master_Out[399] = \<const0> ;
  assign LOCKSTEP_Master_Out[400] = \<const0> ;
  assign LOCKSTEP_Master_Out[401] = \<const0> ;
  assign LOCKSTEP_Master_Out[402] = \<const0> ;
  assign LOCKSTEP_Master_Out[403] = \<const0> ;
  assign LOCKSTEP_Master_Out[404] = \<const0> ;
  assign LOCKSTEP_Master_Out[405] = \<const0> ;
  assign LOCKSTEP_Master_Out[406] = \<const0> ;
  assign LOCKSTEP_Master_Out[407] = \<const0> ;
  assign LOCKSTEP_Master_Out[408] = \<const0> ;
  assign LOCKSTEP_Master_Out[409] = \<const0> ;
  assign LOCKSTEP_Master_Out[410] = \<const0> ;
  assign LOCKSTEP_Master_Out[411] = \<const0> ;
  assign LOCKSTEP_Master_Out[412] = \<const0> ;
  assign LOCKSTEP_Master_Out[413] = \<const0> ;
  assign LOCKSTEP_Master_Out[414] = \<const0> ;
  assign LOCKSTEP_Master_Out[415] = \<const0> ;
  assign LOCKSTEP_Master_Out[416] = \<const0> ;
  assign LOCKSTEP_Master_Out[417] = \<const0> ;
  assign LOCKSTEP_Master_Out[418] = \<const0> ;
  assign LOCKSTEP_Master_Out[419] = \<const0> ;
  assign LOCKSTEP_Master_Out[420] = \<const0> ;
  assign LOCKSTEP_Master_Out[421] = \<const0> ;
  assign LOCKSTEP_Master_Out[422] = \<const0> ;
  assign LOCKSTEP_Master_Out[423] = \<const0> ;
  assign LOCKSTEP_Master_Out[424] = \<const0> ;
  assign LOCKSTEP_Master_Out[425] = \<const0> ;
  assign LOCKSTEP_Master_Out[426] = \<const0> ;
  assign LOCKSTEP_Master_Out[427] = \<const0> ;
  assign LOCKSTEP_Master_Out[428] = \<const0> ;
  assign LOCKSTEP_Master_Out[429] = \<const0> ;
  assign LOCKSTEP_Master_Out[430] = \<const0> ;
  assign LOCKSTEP_Master_Out[431] = \<const0> ;
  assign LOCKSTEP_Master_Out[432] = \<const0> ;
  assign LOCKSTEP_Master_Out[433] = \<const0> ;
  assign LOCKSTEP_Master_Out[434] = \<const0> ;
  assign LOCKSTEP_Master_Out[435] = \<const0> ;
  assign LOCKSTEP_Master_Out[436] = \<const0> ;
  assign LOCKSTEP_Master_Out[437] = \<const0> ;
  assign LOCKSTEP_Master_Out[438] = \<const0> ;
  assign LOCKSTEP_Master_Out[439] = \<const0> ;
  assign LOCKSTEP_Master_Out[440] = \<const0> ;
  assign LOCKSTEP_Master_Out[441] = \<const0> ;
  assign LOCKSTEP_Master_Out[442] = \<const0> ;
  assign LOCKSTEP_Master_Out[443] = \<const0> ;
  assign LOCKSTEP_Master_Out[444] = \<const0> ;
  assign LOCKSTEP_Master_Out[445] = \<const0> ;
  assign LOCKSTEP_Master_Out[446] = \<const0> ;
  assign LOCKSTEP_Master_Out[447] = \<const0> ;
  assign LOCKSTEP_Master_Out[448] = \<const0> ;
  assign LOCKSTEP_Master_Out[449] = \<const0> ;
  assign LOCKSTEP_Master_Out[450] = \<const0> ;
  assign LOCKSTEP_Master_Out[451] = \<const0> ;
  assign LOCKSTEP_Master_Out[452] = \<const0> ;
  assign LOCKSTEP_Master_Out[453] = \<const0> ;
  assign LOCKSTEP_Master_Out[454] = \<const0> ;
  assign LOCKSTEP_Master_Out[455] = \<const0> ;
  assign LOCKSTEP_Master_Out[456] = \<const0> ;
  assign LOCKSTEP_Master_Out[457] = \<const0> ;
  assign LOCKSTEP_Master_Out[458] = \<const0> ;
  assign LOCKSTEP_Master_Out[459] = \<const0> ;
  assign LOCKSTEP_Master_Out[460] = \<const0> ;
  assign LOCKSTEP_Master_Out[461] = \<const0> ;
  assign LOCKSTEP_Master_Out[462] = \<const0> ;
  assign LOCKSTEP_Master_Out[463] = \<const0> ;
  assign LOCKSTEP_Master_Out[464] = \<const0> ;
  assign LOCKSTEP_Master_Out[465] = \<const0> ;
  assign LOCKSTEP_Master_Out[466] = \<const0> ;
  assign LOCKSTEP_Master_Out[467] = \<const0> ;
  assign LOCKSTEP_Master_Out[468] = \<const0> ;
  assign LOCKSTEP_Master_Out[469] = \<const0> ;
  assign LOCKSTEP_Master_Out[470] = \<const0> ;
  assign LOCKSTEP_Master_Out[471] = \<const0> ;
  assign LOCKSTEP_Master_Out[472] = \<const0> ;
  assign LOCKSTEP_Master_Out[473] = \<const0> ;
  assign LOCKSTEP_Master_Out[474] = \<const0> ;
  assign LOCKSTEP_Master_Out[475] = \<const0> ;
  assign LOCKSTEP_Master_Out[476] = \<const0> ;
  assign LOCKSTEP_Master_Out[477] = \<const0> ;
  assign LOCKSTEP_Master_Out[478] = \<const0> ;
  assign LOCKSTEP_Master_Out[479] = \<const0> ;
  assign LOCKSTEP_Master_Out[480] = \<const0> ;
  assign LOCKSTEP_Master_Out[481] = \<const0> ;
  assign LOCKSTEP_Master_Out[482] = \<const0> ;
  assign LOCKSTEP_Master_Out[483] = \<const0> ;
  assign LOCKSTEP_Master_Out[484] = \<const0> ;
  assign LOCKSTEP_Master_Out[485] = \<const0> ;
  assign LOCKSTEP_Master_Out[486] = \<const0> ;
  assign LOCKSTEP_Master_Out[487] = \<const0> ;
  assign LOCKSTEP_Master_Out[488] = \<const0> ;
  assign LOCKSTEP_Master_Out[489] = \<const0> ;
  assign LOCKSTEP_Master_Out[490] = \<const0> ;
  assign LOCKSTEP_Master_Out[491] = \<const0> ;
  assign LOCKSTEP_Master_Out[492] = \<const0> ;
  assign LOCKSTEP_Master_Out[493] = \<const0> ;
  assign LOCKSTEP_Master_Out[494] = \<const0> ;
  assign LOCKSTEP_Master_Out[495] = \<const0> ;
  assign LOCKSTEP_Master_Out[496] = \<const0> ;
  assign LOCKSTEP_Master_Out[497] = \<const0> ;
  assign LOCKSTEP_Master_Out[498] = \<const0> ;
  assign LOCKSTEP_Master_Out[499] = \<const0> ;
  assign LOCKSTEP_Master_Out[500] = \<const0> ;
  assign LOCKSTEP_Master_Out[501] = \<const0> ;
  assign LOCKSTEP_Master_Out[502] = \<const0> ;
  assign LOCKSTEP_Master_Out[503] = \<const0> ;
  assign LOCKSTEP_Master_Out[504] = \<const0> ;
  assign LOCKSTEP_Master_Out[505] = \<const0> ;
  assign LOCKSTEP_Master_Out[506] = \<const0> ;
  assign LOCKSTEP_Master_Out[507] = \<const0> ;
  assign LOCKSTEP_Master_Out[508] = \<const0> ;
  assign LOCKSTEP_Master_Out[509] = \<const0> ;
  assign LOCKSTEP_Master_Out[510] = \<const0> ;
  assign LOCKSTEP_Master_Out[511] = \<const0> ;
  assign LOCKSTEP_Master_Out[512] = \<const0> ;
  assign LOCKSTEP_Master_Out[513] = \<const0> ;
  assign LOCKSTEP_Master_Out[514] = \<const0> ;
  assign LOCKSTEP_Master_Out[515] = \<const0> ;
  assign LOCKSTEP_Master_Out[516] = \<const0> ;
  assign LOCKSTEP_Master_Out[517] = \<const0> ;
  assign LOCKSTEP_Master_Out[518] = \<const0> ;
  assign LOCKSTEP_Master_Out[519] = \<const0> ;
  assign LOCKSTEP_Master_Out[520] = \<const0> ;
  assign LOCKSTEP_Master_Out[521] = \<const0> ;
  assign LOCKSTEP_Master_Out[522] = \<const0> ;
  assign LOCKSTEP_Master_Out[523] = \<const0> ;
  assign LOCKSTEP_Master_Out[524] = \<const0> ;
  assign LOCKSTEP_Master_Out[525] = \<const0> ;
  assign LOCKSTEP_Master_Out[526] = \<const0> ;
  assign LOCKSTEP_Master_Out[527] = \<const0> ;
  assign LOCKSTEP_Master_Out[528] = \<const0> ;
  assign LOCKSTEP_Master_Out[529] = \<const0> ;
  assign LOCKSTEP_Master_Out[530] = \<const0> ;
  assign LOCKSTEP_Master_Out[531] = \<const0> ;
  assign LOCKSTEP_Master_Out[532] = \<const0> ;
  assign LOCKSTEP_Master_Out[533] = \<const0> ;
  assign LOCKSTEP_Master_Out[534] = \<const0> ;
  assign LOCKSTEP_Master_Out[535] = \<const0> ;
  assign LOCKSTEP_Master_Out[536] = \<const0> ;
  assign LOCKSTEP_Master_Out[537] = \<const0> ;
  assign LOCKSTEP_Master_Out[538] = \<const0> ;
  assign LOCKSTEP_Master_Out[539] = \<const0> ;
  assign LOCKSTEP_Master_Out[540] = \<const0> ;
  assign LOCKSTEP_Master_Out[541] = \<const0> ;
  assign LOCKSTEP_Master_Out[542] = \<const0> ;
  assign LOCKSTEP_Master_Out[543] = \<const0> ;
  assign LOCKSTEP_Master_Out[544] = \<const0> ;
  assign LOCKSTEP_Master_Out[545] = \<const0> ;
  assign LOCKSTEP_Master_Out[546] = \<const0> ;
  assign LOCKSTEP_Master_Out[547] = \<const0> ;
  assign LOCKSTEP_Master_Out[548] = \<const0> ;
  assign LOCKSTEP_Master_Out[549] = \<const0> ;
  assign LOCKSTEP_Master_Out[550] = \<const0> ;
  assign LOCKSTEP_Master_Out[551] = \<const0> ;
  assign LOCKSTEP_Master_Out[552] = \<const0> ;
  assign LOCKSTEP_Master_Out[553] = \<const0> ;
  assign LOCKSTEP_Master_Out[554] = \<const0> ;
  assign LOCKSTEP_Master_Out[555] = \<const0> ;
  assign LOCKSTEP_Master_Out[556] = \<const0> ;
  assign LOCKSTEP_Master_Out[557] = \<const0> ;
  assign LOCKSTEP_Master_Out[558] = \<const0> ;
  assign LOCKSTEP_Master_Out[559] = \<const0> ;
  assign LOCKSTEP_Master_Out[560] = \<const0> ;
  assign LOCKSTEP_Master_Out[561] = \<const0> ;
  assign LOCKSTEP_Master_Out[562] = \<const0> ;
  assign LOCKSTEP_Master_Out[563] = \<const0> ;
  assign LOCKSTEP_Master_Out[564] = \<const0> ;
  assign LOCKSTEP_Master_Out[565] = \<const0> ;
  assign LOCKSTEP_Master_Out[566] = \<const0> ;
  assign LOCKSTEP_Master_Out[567] = \<const0> ;
  assign LOCKSTEP_Master_Out[568] = \<const0> ;
  assign LOCKSTEP_Master_Out[569] = \<const0> ;
  assign LOCKSTEP_Master_Out[570] = \<const0> ;
  assign LOCKSTEP_Master_Out[571] = \<const0> ;
  assign LOCKSTEP_Master_Out[572] = \<const0> ;
  assign LOCKSTEP_Master_Out[573] = \<const0> ;
  assign LOCKSTEP_Master_Out[574] = \<const0> ;
  assign LOCKSTEP_Master_Out[575] = \<const0> ;
  assign LOCKSTEP_Master_Out[576] = \<const0> ;
  assign LOCKSTEP_Master_Out[577] = \<const0> ;
  assign LOCKSTEP_Master_Out[578] = \<const0> ;
  assign LOCKSTEP_Master_Out[579] = \<const0> ;
  assign LOCKSTEP_Master_Out[580] = \<const0> ;
  assign LOCKSTEP_Master_Out[581] = \<const0> ;
  assign LOCKSTEP_Master_Out[582] = \<const0> ;
  assign LOCKSTEP_Master_Out[583] = \<const0> ;
  assign LOCKSTEP_Master_Out[584] = \<const0> ;
  assign LOCKSTEP_Master_Out[585] = \<const0> ;
  assign LOCKSTEP_Master_Out[586] = \<const0> ;
  assign LOCKSTEP_Master_Out[587] = \<const0> ;
  assign LOCKSTEP_Master_Out[588] = \<const0> ;
  assign LOCKSTEP_Master_Out[589] = \<const0> ;
  assign LOCKSTEP_Master_Out[590] = \<const0> ;
  assign LOCKSTEP_Master_Out[591] = \<const0> ;
  assign LOCKSTEP_Master_Out[592] = \<const0> ;
  assign LOCKSTEP_Master_Out[593] = \<const0> ;
  assign LOCKSTEP_Master_Out[594] = \<const0> ;
  assign LOCKSTEP_Master_Out[595] = \<const0> ;
  assign LOCKSTEP_Master_Out[596] = \<const0> ;
  assign LOCKSTEP_Master_Out[597] = \<const0> ;
  assign LOCKSTEP_Master_Out[598] = \<const0> ;
  assign LOCKSTEP_Master_Out[599] = \<const0> ;
  assign LOCKSTEP_Master_Out[600] = \<const0> ;
  assign LOCKSTEP_Master_Out[601] = \<const0> ;
  assign LOCKSTEP_Master_Out[602] = \<const0> ;
  assign LOCKSTEP_Master_Out[603] = \<const0> ;
  assign LOCKSTEP_Master_Out[604] = \<const0> ;
  assign LOCKSTEP_Master_Out[605] = \<const0> ;
  assign LOCKSTEP_Master_Out[606] = \<const0> ;
  assign LOCKSTEP_Master_Out[607] = \<const0> ;
  assign LOCKSTEP_Master_Out[608] = \<const0> ;
  assign LOCKSTEP_Master_Out[609] = \<const0> ;
  assign LOCKSTEP_Master_Out[610] = \<const0> ;
  assign LOCKSTEP_Master_Out[611] = \<const0> ;
  assign LOCKSTEP_Master_Out[612] = \<const0> ;
  assign LOCKSTEP_Master_Out[613] = \<const0> ;
  assign LOCKSTEP_Master_Out[614] = \<const0> ;
  assign LOCKSTEP_Master_Out[615] = \<const0> ;
  assign LOCKSTEP_Master_Out[616] = \<const0> ;
  assign LOCKSTEP_Master_Out[617] = \<const0> ;
  assign LOCKSTEP_Master_Out[618] = \<const0> ;
  assign LOCKSTEP_Master_Out[619] = \<const0> ;
  assign LOCKSTEP_Master_Out[620] = \<const0> ;
  assign LOCKSTEP_Master_Out[621] = \<const0> ;
  assign LOCKSTEP_Master_Out[622] = \<const0> ;
  assign LOCKSTEP_Master_Out[623] = \<const0> ;
  assign LOCKSTEP_Master_Out[624] = \<const0> ;
  assign LOCKSTEP_Master_Out[625] = \<const0> ;
  assign LOCKSTEP_Master_Out[626] = \<const0> ;
  assign LOCKSTEP_Master_Out[627] = \<const0> ;
  assign LOCKSTEP_Master_Out[628] = \<const0> ;
  assign LOCKSTEP_Master_Out[629] = \<const0> ;
  assign LOCKSTEP_Master_Out[630] = \<const0> ;
  assign LOCKSTEP_Master_Out[631] = \<const0> ;
  assign LOCKSTEP_Master_Out[632] = \<const0> ;
  assign LOCKSTEP_Master_Out[633] = \<const0> ;
  assign LOCKSTEP_Master_Out[634] = \<const0> ;
  assign LOCKSTEP_Master_Out[635] = \<const0> ;
  assign LOCKSTEP_Master_Out[636] = \<const0> ;
  assign LOCKSTEP_Master_Out[637] = \<const0> ;
  assign LOCKSTEP_Master_Out[638] = \<const0> ;
  assign LOCKSTEP_Master_Out[639] = \<const0> ;
  assign LOCKSTEP_Master_Out[640] = \<const0> ;
  assign LOCKSTEP_Master_Out[641] = \<const0> ;
  assign LOCKSTEP_Master_Out[642] = \<const0> ;
  assign LOCKSTEP_Master_Out[643] = \<const0> ;
  assign LOCKSTEP_Master_Out[644] = \<const0> ;
  assign LOCKSTEP_Master_Out[645] = \<const0> ;
  assign LOCKSTEP_Master_Out[646] = \<const0> ;
  assign LOCKSTEP_Master_Out[647] = \<const0> ;
  assign LOCKSTEP_Master_Out[648] = \<const0> ;
  assign LOCKSTEP_Master_Out[649] = \<const0> ;
  assign LOCKSTEP_Master_Out[650] = \<const0> ;
  assign LOCKSTEP_Master_Out[651] = \<const0> ;
  assign LOCKSTEP_Master_Out[652] = \<const0> ;
  assign LOCKSTEP_Master_Out[653] = \<const0> ;
  assign LOCKSTEP_Master_Out[654] = \<const0> ;
  assign LOCKSTEP_Master_Out[655] = \<const0> ;
  assign LOCKSTEP_Master_Out[656] = \<const0> ;
  assign LOCKSTEP_Master_Out[657] = \<const0> ;
  assign LOCKSTEP_Master_Out[658] = \<const0> ;
  assign LOCKSTEP_Master_Out[659] = \<const0> ;
  assign LOCKSTEP_Master_Out[660] = \<const0> ;
  assign LOCKSTEP_Master_Out[661] = \<const0> ;
  assign LOCKSTEP_Master_Out[662] = \<const0> ;
  assign LOCKSTEP_Master_Out[663] = \<const0> ;
  assign LOCKSTEP_Master_Out[664] = \<const0> ;
  assign LOCKSTEP_Master_Out[665] = \<const0> ;
  assign LOCKSTEP_Master_Out[666] = \<const0> ;
  assign LOCKSTEP_Master_Out[667] = \<const0> ;
  assign LOCKSTEP_Master_Out[668] = \<const0> ;
  assign LOCKSTEP_Master_Out[669] = \<const0> ;
  assign LOCKSTEP_Master_Out[670] = \<const0> ;
  assign LOCKSTEP_Master_Out[671] = \<const0> ;
  assign LOCKSTEP_Master_Out[672] = \<const0> ;
  assign LOCKSTEP_Master_Out[673] = \<const0> ;
  assign LOCKSTEP_Master_Out[674] = \<const0> ;
  assign LOCKSTEP_Master_Out[675] = \<const0> ;
  assign LOCKSTEP_Master_Out[676] = \<const0> ;
  assign LOCKSTEP_Master_Out[677] = \<const0> ;
  assign LOCKSTEP_Master_Out[678] = \<const0> ;
  assign LOCKSTEP_Master_Out[679] = \<const0> ;
  assign LOCKSTEP_Master_Out[680] = \<const0> ;
  assign LOCKSTEP_Master_Out[681] = \<const0> ;
  assign LOCKSTEP_Master_Out[682] = \<const0> ;
  assign LOCKSTEP_Master_Out[683] = \<const0> ;
  assign LOCKSTEP_Master_Out[684] = \<const0> ;
  assign LOCKSTEP_Master_Out[685] = \<const0> ;
  assign LOCKSTEP_Master_Out[686] = \<const0> ;
  assign LOCKSTEP_Master_Out[687] = \<const0> ;
  assign LOCKSTEP_Master_Out[688] = \<const0> ;
  assign LOCKSTEP_Master_Out[689] = \<const0> ;
  assign LOCKSTEP_Master_Out[690] = \<const0> ;
  assign LOCKSTEP_Master_Out[691] = \<const0> ;
  assign LOCKSTEP_Master_Out[692] = \<const0> ;
  assign LOCKSTEP_Master_Out[693] = \<const0> ;
  assign LOCKSTEP_Master_Out[694] = \<const0> ;
  assign LOCKSTEP_Master_Out[695] = \<const0> ;
  assign LOCKSTEP_Master_Out[696] = \<const0> ;
  assign LOCKSTEP_Master_Out[697] = \<const0> ;
  assign LOCKSTEP_Master_Out[698] = \<const0> ;
  assign LOCKSTEP_Master_Out[699] = \<const0> ;
  assign LOCKSTEP_Master_Out[700] = \<const0> ;
  assign LOCKSTEP_Master_Out[701] = \<const0> ;
  assign LOCKSTEP_Master_Out[702] = \<const0> ;
  assign LOCKSTEP_Master_Out[703] = \<const0> ;
  assign LOCKSTEP_Master_Out[704] = \<const0> ;
  assign LOCKSTEP_Master_Out[705] = \<const0> ;
  assign LOCKSTEP_Master_Out[706] = \<const0> ;
  assign LOCKSTEP_Master_Out[707] = \<const0> ;
  assign LOCKSTEP_Master_Out[708] = \<const0> ;
  assign LOCKSTEP_Master_Out[709] = \<const0> ;
  assign LOCKSTEP_Master_Out[710] = \<const0> ;
  assign LOCKSTEP_Master_Out[711] = \<const0> ;
  assign LOCKSTEP_Master_Out[712] = \<const0> ;
  assign LOCKSTEP_Master_Out[713] = \<const0> ;
  assign LOCKSTEP_Master_Out[714] = \<const0> ;
  assign LOCKSTEP_Master_Out[715] = \<const0> ;
  assign LOCKSTEP_Master_Out[716] = \<const0> ;
  assign LOCKSTEP_Master_Out[717] = \<const0> ;
  assign LOCKSTEP_Master_Out[718] = \<const0> ;
  assign LOCKSTEP_Master_Out[719] = \<const0> ;
  assign LOCKSTEP_Master_Out[720] = \<const0> ;
  assign LOCKSTEP_Master_Out[721] = \<const0> ;
  assign LOCKSTEP_Master_Out[722] = \<const0> ;
  assign LOCKSTEP_Master_Out[723] = \<const0> ;
  assign LOCKSTEP_Master_Out[724] = \<const0> ;
  assign LOCKSTEP_Master_Out[725] = \<const0> ;
  assign LOCKSTEP_Master_Out[726] = \<const0> ;
  assign LOCKSTEP_Master_Out[727] = \<const0> ;
  assign LOCKSTEP_Master_Out[728] = \<const0> ;
  assign LOCKSTEP_Master_Out[729] = \<const0> ;
  assign LOCKSTEP_Master_Out[730] = \<const0> ;
  assign LOCKSTEP_Master_Out[731] = \<const0> ;
  assign LOCKSTEP_Master_Out[732] = \<const0> ;
  assign LOCKSTEP_Master_Out[733] = \<const0> ;
  assign LOCKSTEP_Master_Out[734] = \<const0> ;
  assign LOCKSTEP_Master_Out[735] = \<const0> ;
  assign LOCKSTEP_Master_Out[736] = \<const0> ;
  assign LOCKSTEP_Master_Out[737] = \<const0> ;
  assign LOCKSTEP_Master_Out[738] = \<const0> ;
  assign LOCKSTEP_Master_Out[739] = \<const0> ;
  assign LOCKSTEP_Master_Out[740] = \<const0> ;
  assign LOCKSTEP_Master_Out[741] = \<const0> ;
  assign LOCKSTEP_Master_Out[742] = \<const0> ;
  assign LOCKSTEP_Master_Out[743] = \<const0> ;
  assign LOCKSTEP_Master_Out[744] = \<const0> ;
  assign LOCKSTEP_Master_Out[745] = \<const0> ;
  assign LOCKSTEP_Master_Out[746] = \<const0> ;
  assign LOCKSTEP_Master_Out[747] = \<const0> ;
  assign LOCKSTEP_Master_Out[748] = \<const0> ;
  assign LOCKSTEP_Master_Out[749] = \<const0> ;
  assign LOCKSTEP_Master_Out[750] = \<const0> ;
  assign LOCKSTEP_Master_Out[751] = \<const0> ;
  assign LOCKSTEP_Master_Out[752] = \<const0> ;
  assign LOCKSTEP_Master_Out[753] = \<const0> ;
  assign LOCKSTEP_Master_Out[754] = \<const0> ;
  assign LOCKSTEP_Master_Out[755] = \<const0> ;
  assign LOCKSTEP_Master_Out[756] = \<const0> ;
  assign LOCKSTEP_Master_Out[757] = \<const0> ;
  assign LOCKSTEP_Master_Out[758] = \<const0> ;
  assign LOCKSTEP_Master_Out[759] = \<const0> ;
  assign LOCKSTEP_Master_Out[760] = \<const0> ;
  assign LOCKSTEP_Master_Out[761] = \<const0> ;
  assign LOCKSTEP_Master_Out[762] = \<const0> ;
  assign LOCKSTEP_Master_Out[763] = \<const0> ;
  assign LOCKSTEP_Master_Out[764] = \<const0> ;
  assign LOCKSTEP_Master_Out[765] = \<const0> ;
  assign LOCKSTEP_Master_Out[766] = \<const0> ;
  assign LOCKSTEP_Master_Out[767] = \<const0> ;
  assign LOCKSTEP_Master_Out[768] = \<const0> ;
  assign LOCKSTEP_Master_Out[769] = \<const0> ;
  assign LOCKSTEP_Master_Out[770] = \<const0> ;
  assign LOCKSTEP_Master_Out[771] = \<const0> ;
  assign LOCKSTEP_Master_Out[772] = \<const0> ;
  assign LOCKSTEP_Master_Out[773] = \<const0> ;
  assign LOCKSTEP_Master_Out[774] = \<const0> ;
  assign LOCKSTEP_Master_Out[775] = \<const0> ;
  assign LOCKSTEP_Master_Out[776] = \<const0> ;
  assign LOCKSTEP_Master_Out[777] = \<const0> ;
  assign LOCKSTEP_Master_Out[778] = \<const0> ;
  assign LOCKSTEP_Master_Out[779] = \<const0> ;
  assign LOCKSTEP_Master_Out[780] = \<const0> ;
  assign LOCKSTEP_Master_Out[781] = \<const0> ;
  assign LOCKSTEP_Master_Out[782] = \<const0> ;
  assign LOCKSTEP_Master_Out[783] = \<const0> ;
  assign LOCKSTEP_Master_Out[784] = \<const0> ;
  assign LOCKSTEP_Master_Out[785] = \<const0> ;
  assign LOCKSTEP_Master_Out[786] = \<const0> ;
  assign LOCKSTEP_Master_Out[787] = \<const0> ;
  assign LOCKSTEP_Master_Out[788] = \<const0> ;
  assign LOCKSTEP_Master_Out[789] = \<const0> ;
  assign LOCKSTEP_Master_Out[790] = \<const0> ;
  assign LOCKSTEP_Master_Out[791] = \<const0> ;
  assign LOCKSTEP_Master_Out[792] = \<const0> ;
  assign LOCKSTEP_Master_Out[793] = \<const0> ;
  assign LOCKSTEP_Master_Out[794] = \<const0> ;
  assign LOCKSTEP_Master_Out[795] = \<const0> ;
  assign LOCKSTEP_Master_Out[796] = \<const0> ;
  assign LOCKSTEP_Master_Out[797] = \<const0> ;
  assign LOCKSTEP_Master_Out[798] = \<const0> ;
  assign LOCKSTEP_Master_Out[799] = \<const0> ;
  assign LOCKSTEP_Master_Out[800] = \<const0> ;
  assign LOCKSTEP_Master_Out[801] = \<const0> ;
  assign LOCKSTEP_Master_Out[802] = \<const0> ;
  assign LOCKSTEP_Master_Out[803] = \<const0> ;
  assign LOCKSTEP_Master_Out[804] = \<const0> ;
  assign LOCKSTEP_Master_Out[805] = \<const0> ;
  assign LOCKSTEP_Master_Out[806] = \<const0> ;
  assign LOCKSTEP_Master_Out[807] = \<const0> ;
  assign LOCKSTEP_Master_Out[808] = \<const0> ;
  assign LOCKSTEP_Master_Out[809] = \<const0> ;
  assign LOCKSTEP_Master_Out[810] = \<const0> ;
  assign LOCKSTEP_Master_Out[811] = \<const0> ;
  assign LOCKSTEP_Master_Out[812] = \<const0> ;
  assign LOCKSTEP_Master_Out[813] = \<const0> ;
  assign LOCKSTEP_Master_Out[814] = \<const0> ;
  assign LOCKSTEP_Master_Out[815] = \<const0> ;
  assign LOCKSTEP_Master_Out[816] = \<const0> ;
  assign LOCKSTEP_Master_Out[817] = \<const0> ;
  assign LOCKSTEP_Master_Out[818] = \<const0> ;
  assign LOCKSTEP_Master_Out[819] = \<const0> ;
  assign LOCKSTEP_Master_Out[820] = \<const0> ;
  assign LOCKSTEP_Master_Out[821] = \<const0> ;
  assign LOCKSTEP_Master_Out[822] = \<const0> ;
  assign LOCKSTEP_Master_Out[823] = \<const0> ;
  assign LOCKSTEP_Master_Out[824] = \<const0> ;
  assign LOCKSTEP_Master_Out[825] = \<const0> ;
  assign LOCKSTEP_Master_Out[826] = \<const0> ;
  assign LOCKSTEP_Master_Out[827] = \<const0> ;
  assign LOCKSTEP_Master_Out[828] = \<const0> ;
  assign LOCKSTEP_Master_Out[829] = \<const0> ;
  assign LOCKSTEP_Master_Out[830] = \<const0> ;
  assign LOCKSTEP_Master_Out[831] = \<const0> ;
  assign LOCKSTEP_Master_Out[832] = \<const0> ;
  assign LOCKSTEP_Master_Out[833] = \<const0> ;
  assign LOCKSTEP_Master_Out[834] = \<const0> ;
  assign LOCKSTEP_Master_Out[835] = \<const0> ;
  assign LOCKSTEP_Master_Out[836] = \<const0> ;
  assign LOCKSTEP_Master_Out[837] = \<const0> ;
  assign LOCKSTEP_Master_Out[838] = \<const0> ;
  assign LOCKSTEP_Master_Out[839] = \<const0> ;
  assign LOCKSTEP_Master_Out[840] = \<const0> ;
  assign LOCKSTEP_Master_Out[841] = \<const0> ;
  assign LOCKSTEP_Master_Out[842] = \<const0> ;
  assign LOCKSTEP_Master_Out[843] = \<const0> ;
  assign LOCKSTEP_Master_Out[844] = \<const0> ;
  assign LOCKSTEP_Master_Out[845] = \<const0> ;
  assign LOCKSTEP_Master_Out[846] = \<const0> ;
  assign LOCKSTEP_Master_Out[847] = \<const0> ;
  assign LOCKSTEP_Master_Out[848] = \<const0> ;
  assign LOCKSTEP_Master_Out[849] = \<const0> ;
  assign LOCKSTEP_Master_Out[850] = \<const0> ;
  assign LOCKSTEP_Master_Out[851] = \<const0> ;
  assign LOCKSTEP_Master_Out[852] = \<const0> ;
  assign LOCKSTEP_Master_Out[853] = \<const0> ;
  assign LOCKSTEP_Master_Out[854] = \<const0> ;
  assign LOCKSTEP_Master_Out[855] = \<const0> ;
  assign LOCKSTEP_Master_Out[856] = \<const0> ;
  assign LOCKSTEP_Master_Out[857] = \<const0> ;
  assign LOCKSTEP_Master_Out[858] = \<const0> ;
  assign LOCKSTEP_Master_Out[859] = \<const0> ;
  assign LOCKSTEP_Master_Out[860] = \<const0> ;
  assign LOCKSTEP_Master_Out[861] = \<const0> ;
  assign LOCKSTEP_Master_Out[862] = \<const0> ;
  assign LOCKSTEP_Master_Out[863] = \<const0> ;
  assign LOCKSTEP_Master_Out[864] = \<const0> ;
  assign LOCKSTEP_Master_Out[865] = \<const0> ;
  assign LOCKSTEP_Master_Out[866] = \<const0> ;
  assign LOCKSTEP_Master_Out[867] = \<const0> ;
  assign LOCKSTEP_Master_Out[868] = \<const0> ;
  assign LOCKSTEP_Master_Out[869] = \<const0> ;
  assign LOCKSTEP_Master_Out[870] = \<const0> ;
  assign LOCKSTEP_Master_Out[871] = \<const0> ;
  assign LOCKSTEP_Master_Out[872] = \<const0> ;
  assign LOCKSTEP_Master_Out[873] = \<const0> ;
  assign LOCKSTEP_Master_Out[874] = \<const0> ;
  assign LOCKSTEP_Master_Out[875] = \<const0> ;
  assign LOCKSTEP_Master_Out[876] = \<const0> ;
  assign LOCKSTEP_Master_Out[877] = \<const0> ;
  assign LOCKSTEP_Master_Out[878] = \<const0> ;
  assign LOCKSTEP_Master_Out[879] = \<const0> ;
  assign LOCKSTEP_Master_Out[880] = \<const0> ;
  assign LOCKSTEP_Master_Out[881] = \<const0> ;
  assign LOCKSTEP_Master_Out[882] = \<const0> ;
  assign LOCKSTEP_Master_Out[883] = \<const0> ;
  assign LOCKSTEP_Master_Out[884] = \<const0> ;
  assign LOCKSTEP_Master_Out[885] = \<const0> ;
  assign LOCKSTEP_Master_Out[886] = \<const0> ;
  assign LOCKSTEP_Master_Out[887] = \<const0> ;
  assign LOCKSTEP_Master_Out[888] = \<const0> ;
  assign LOCKSTEP_Master_Out[889] = \<const0> ;
  assign LOCKSTEP_Master_Out[890] = \<const0> ;
  assign LOCKSTEP_Master_Out[891] = \<const0> ;
  assign LOCKSTEP_Master_Out[892] = \<const0> ;
  assign LOCKSTEP_Master_Out[893] = \<const0> ;
  assign LOCKSTEP_Master_Out[894] = \<const0> ;
  assign LOCKSTEP_Master_Out[895] = \<const0> ;
  assign LOCKSTEP_Master_Out[896] = \<const0> ;
  assign LOCKSTEP_Master_Out[897] = \<const0> ;
  assign LOCKSTEP_Master_Out[898] = \<const0> ;
  assign LOCKSTEP_Master_Out[899] = \<const0> ;
  assign LOCKSTEP_Master_Out[900] = \<const0> ;
  assign LOCKSTEP_Master_Out[901] = \<const0> ;
  assign LOCKSTEP_Master_Out[902] = \<const0> ;
  assign LOCKSTEP_Master_Out[903] = \<const0> ;
  assign LOCKSTEP_Master_Out[904] = \<const0> ;
  assign LOCKSTEP_Master_Out[905] = \<const0> ;
  assign LOCKSTEP_Master_Out[906] = \<const0> ;
  assign LOCKSTEP_Master_Out[907] = \<const0> ;
  assign LOCKSTEP_Master_Out[908] = \<const0> ;
  assign LOCKSTEP_Master_Out[909] = \<const0> ;
  assign LOCKSTEP_Master_Out[910] = \<const0> ;
  assign LOCKSTEP_Master_Out[911] = \<const0> ;
  assign LOCKSTEP_Master_Out[912] = \<const0> ;
  assign LOCKSTEP_Master_Out[913] = \<const0> ;
  assign LOCKSTEP_Master_Out[914] = \<const0> ;
  assign LOCKSTEP_Master_Out[915] = \<const0> ;
  assign LOCKSTEP_Master_Out[916] = \<const0> ;
  assign LOCKSTEP_Master_Out[917] = \<const0> ;
  assign LOCKSTEP_Master_Out[918] = \<const0> ;
  assign LOCKSTEP_Master_Out[919] = \<const0> ;
  assign LOCKSTEP_Master_Out[920] = \<const0> ;
  assign LOCKSTEP_Master_Out[921] = \<const0> ;
  assign LOCKSTEP_Master_Out[922] = \<const0> ;
  assign LOCKSTEP_Master_Out[923] = \<const0> ;
  assign LOCKSTEP_Master_Out[924] = \<const0> ;
  assign LOCKSTEP_Master_Out[925] = \<const0> ;
  assign LOCKSTEP_Master_Out[926] = \<const0> ;
  assign LOCKSTEP_Master_Out[927] = \<const0> ;
  assign LOCKSTEP_Master_Out[928] = \<const0> ;
  assign LOCKSTEP_Master_Out[929] = \<const0> ;
  assign LOCKSTEP_Master_Out[930] = \<const0> ;
  assign LOCKSTEP_Master_Out[931] = \<const0> ;
  assign LOCKSTEP_Master_Out[932] = \<const0> ;
  assign LOCKSTEP_Master_Out[933] = \<const0> ;
  assign LOCKSTEP_Master_Out[934] = \<const0> ;
  assign LOCKSTEP_Master_Out[935] = \<const0> ;
  assign LOCKSTEP_Master_Out[936] = \<const0> ;
  assign LOCKSTEP_Master_Out[937] = \<const0> ;
  assign LOCKSTEP_Master_Out[938] = \<const0> ;
  assign LOCKSTEP_Master_Out[939] = \<const0> ;
  assign LOCKSTEP_Master_Out[940] = \<const0> ;
  assign LOCKSTEP_Master_Out[941] = \<const0> ;
  assign LOCKSTEP_Master_Out[942] = \<const0> ;
  assign LOCKSTEP_Master_Out[943] = \<const0> ;
  assign LOCKSTEP_Master_Out[944] = \<const0> ;
  assign LOCKSTEP_Master_Out[945] = \<const0> ;
  assign LOCKSTEP_Master_Out[946] = \<const0> ;
  assign LOCKSTEP_Master_Out[947] = \<const0> ;
  assign LOCKSTEP_Master_Out[948] = \<const0> ;
  assign LOCKSTEP_Master_Out[949] = \<const0> ;
  assign LOCKSTEP_Master_Out[950] = \<const0> ;
  assign LOCKSTEP_Master_Out[951] = \<const0> ;
  assign LOCKSTEP_Master_Out[952] = \<const0> ;
  assign LOCKSTEP_Master_Out[953] = \<const0> ;
  assign LOCKSTEP_Master_Out[954] = \<const0> ;
  assign LOCKSTEP_Master_Out[955] = \<const0> ;
  assign LOCKSTEP_Master_Out[956] = \<const0> ;
  assign LOCKSTEP_Master_Out[957] = \<const0> ;
  assign LOCKSTEP_Master_Out[958] = \<const0> ;
  assign LOCKSTEP_Master_Out[959] = \<const0> ;
  assign LOCKSTEP_Master_Out[960] = \<const0> ;
  assign LOCKSTEP_Master_Out[961] = \<const0> ;
  assign LOCKSTEP_Master_Out[962] = \<const0> ;
  assign LOCKSTEP_Master_Out[963] = \<const0> ;
  assign LOCKSTEP_Master_Out[964] = \<const0> ;
  assign LOCKSTEP_Master_Out[965] = \<const0> ;
  assign LOCKSTEP_Master_Out[966] = \<const0> ;
  assign LOCKSTEP_Master_Out[967] = \<const0> ;
  assign LOCKSTEP_Master_Out[968] = \<const0> ;
  assign LOCKSTEP_Master_Out[969] = \<const0> ;
  assign LOCKSTEP_Master_Out[970] = \<const0> ;
  assign LOCKSTEP_Master_Out[971] = \<const0> ;
  assign LOCKSTEP_Master_Out[972] = \<const0> ;
  assign LOCKSTEP_Master_Out[973] = \<const0> ;
  assign LOCKSTEP_Master_Out[974] = \<const0> ;
  assign LOCKSTEP_Master_Out[975] = \<const0> ;
  assign LOCKSTEP_Master_Out[976] = \<const0> ;
  assign LOCKSTEP_Master_Out[977] = \<const0> ;
  assign LOCKSTEP_Master_Out[978] = \<const0> ;
  assign LOCKSTEP_Master_Out[979] = \<const0> ;
  assign LOCKSTEP_Master_Out[980] = \<const0> ;
  assign LOCKSTEP_Master_Out[981] = \<const0> ;
  assign LOCKSTEP_Master_Out[982] = \<const0> ;
  assign LOCKSTEP_Master_Out[983] = \<const0> ;
  assign LOCKSTEP_Master_Out[984] = \<const0> ;
  assign LOCKSTEP_Master_Out[985] = \<const0> ;
  assign LOCKSTEP_Master_Out[986] = \<const0> ;
  assign LOCKSTEP_Master_Out[987] = \<const0> ;
  assign LOCKSTEP_Master_Out[988] = \<const0> ;
  assign LOCKSTEP_Master_Out[989] = \<const0> ;
  assign LOCKSTEP_Master_Out[990] = \<const0> ;
  assign LOCKSTEP_Master_Out[991] = \<const0> ;
  assign LOCKSTEP_Master_Out[992] = \<const0> ;
  assign LOCKSTEP_Master_Out[993] = \<const0> ;
  assign LOCKSTEP_Master_Out[994] = \<const0> ;
  assign LOCKSTEP_Master_Out[995] = \<const0> ;
  assign LOCKSTEP_Master_Out[996] = \<const0> ;
  assign LOCKSTEP_Master_Out[997] = \<const0> ;
  assign LOCKSTEP_Master_Out[998] = \<const0> ;
  assign LOCKSTEP_Master_Out[999] = \<const0> ;
  assign LOCKSTEP_Master_Out[1000] = \<const0> ;
  assign LOCKSTEP_Master_Out[1001] = \<const0> ;
  assign LOCKSTEP_Master_Out[1002] = \<const0> ;
  assign LOCKSTEP_Master_Out[1003] = \<const0> ;
  assign LOCKSTEP_Master_Out[1004] = \<const0> ;
  assign LOCKSTEP_Master_Out[1005] = \<const0> ;
  assign LOCKSTEP_Master_Out[1006] = \<const0> ;
  assign LOCKSTEP_Master_Out[1007] = \<const0> ;
  assign LOCKSTEP_Master_Out[1008] = \<const0> ;
  assign LOCKSTEP_Master_Out[1009] = \<const0> ;
  assign LOCKSTEP_Master_Out[1010] = \<const0> ;
  assign LOCKSTEP_Master_Out[1011] = \<const0> ;
  assign LOCKSTEP_Master_Out[1012] = \<const0> ;
  assign LOCKSTEP_Master_Out[1013] = \<const0> ;
  assign LOCKSTEP_Master_Out[1014] = \<const0> ;
  assign LOCKSTEP_Master_Out[1015] = \<const0> ;
  assign LOCKSTEP_Master_Out[1016] = \<const0> ;
  assign LOCKSTEP_Master_Out[1017] = \<const0> ;
  assign LOCKSTEP_Master_Out[1018] = \<const0> ;
  assign LOCKSTEP_Master_Out[1019] = \<const0> ;
  assign LOCKSTEP_Master_Out[1020] = \<const0> ;
  assign LOCKSTEP_Master_Out[1021] = \<const0> ;
  assign LOCKSTEP_Master_Out[1022] = \<const0> ;
  assign LOCKSTEP_Master_Out[1023] = \<const0> ;
  assign LOCKSTEP_Master_Out[1024] = \<const0> ;
  assign LOCKSTEP_Master_Out[1025] = \<const0> ;
  assign LOCKSTEP_Master_Out[1026] = \<const0> ;
  assign LOCKSTEP_Master_Out[1027] = \<const0> ;
  assign LOCKSTEP_Master_Out[1028] = \<const0> ;
  assign LOCKSTEP_Master_Out[1029] = \<const0> ;
  assign LOCKSTEP_Master_Out[1030] = \<const0> ;
  assign LOCKSTEP_Master_Out[1031] = \<const0> ;
  assign LOCKSTEP_Master_Out[1032] = \<const0> ;
  assign LOCKSTEP_Master_Out[1033] = \<const0> ;
  assign LOCKSTEP_Master_Out[1034] = \<const0> ;
  assign LOCKSTEP_Master_Out[1035] = \<const0> ;
  assign LOCKSTEP_Master_Out[1036] = \<const0> ;
  assign LOCKSTEP_Master_Out[1037] = \<const0> ;
  assign LOCKSTEP_Master_Out[1038] = \<const0> ;
  assign LOCKSTEP_Master_Out[1039] = \<const0> ;
  assign LOCKSTEP_Master_Out[1040] = \<const0> ;
  assign LOCKSTEP_Master_Out[1041] = \<const0> ;
  assign LOCKSTEP_Master_Out[1042] = \<const0> ;
  assign LOCKSTEP_Master_Out[1043] = \<const0> ;
  assign LOCKSTEP_Master_Out[1044] = \<const0> ;
  assign LOCKSTEP_Master_Out[1045] = \<const0> ;
  assign LOCKSTEP_Master_Out[1046] = \<const0> ;
  assign LOCKSTEP_Master_Out[1047] = \<const0> ;
  assign LOCKSTEP_Master_Out[1048] = \<const0> ;
  assign LOCKSTEP_Master_Out[1049] = \<const0> ;
  assign LOCKSTEP_Master_Out[1050] = \<const0> ;
  assign LOCKSTEP_Master_Out[1051] = \<const0> ;
  assign LOCKSTEP_Master_Out[1052] = \<const0> ;
  assign LOCKSTEP_Master_Out[1053] = \<const0> ;
  assign LOCKSTEP_Master_Out[1054] = \<const0> ;
  assign LOCKSTEP_Master_Out[1055] = \<const0> ;
  assign LOCKSTEP_Master_Out[1056] = \<const0> ;
  assign LOCKSTEP_Master_Out[1057] = \<const0> ;
  assign LOCKSTEP_Master_Out[1058] = \<const0> ;
  assign LOCKSTEP_Master_Out[1059] = \<const0> ;
  assign LOCKSTEP_Master_Out[1060] = \<const0> ;
  assign LOCKSTEP_Master_Out[1061] = \<const0> ;
  assign LOCKSTEP_Master_Out[1062] = \<const0> ;
  assign LOCKSTEP_Master_Out[1063] = \<const0> ;
  assign LOCKSTEP_Master_Out[1064] = \<const0> ;
  assign LOCKSTEP_Master_Out[1065] = \<const0> ;
  assign LOCKSTEP_Master_Out[1066] = \<const0> ;
  assign LOCKSTEP_Master_Out[1067] = \<const0> ;
  assign LOCKSTEP_Master_Out[1068] = \<const0> ;
  assign LOCKSTEP_Master_Out[1069] = \<const0> ;
  assign LOCKSTEP_Master_Out[1070] = \<const0> ;
  assign LOCKSTEP_Master_Out[1071] = \<const0> ;
  assign LOCKSTEP_Master_Out[1072] = \<const0> ;
  assign LOCKSTEP_Master_Out[1073] = \<const0> ;
  assign LOCKSTEP_Master_Out[1074] = \<const0> ;
  assign LOCKSTEP_Master_Out[1075] = \<const0> ;
  assign LOCKSTEP_Master_Out[1076] = \<const0> ;
  assign LOCKSTEP_Master_Out[1077] = \<const0> ;
  assign LOCKSTEP_Master_Out[1078] = \<const0> ;
  assign LOCKSTEP_Master_Out[1079] = \<const0> ;
  assign LOCKSTEP_Master_Out[1080] = \<const0> ;
  assign LOCKSTEP_Master_Out[1081] = \<const0> ;
  assign LOCKSTEP_Master_Out[1082] = \<const0> ;
  assign LOCKSTEP_Master_Out[1083] = \<const0> ;
  assign LOCKSTEP_Master_Out[1084] = \<const0> ;
  assign LOCKSTEP_Master_Out[1085] = \<const0> ;
  assign LOCKSTEP_Master_Out[1086] = \<const0> ;
  assign LOCKSTEP_Master_Out[1087] = \<const0> ;
  assign LOCKSTEP_Master_Out[1088] = \<const0> ;
  assign LOCKSTEP_Master_Out[1089] = \<const0> ;
  assign LOCKSTEP_Master_Out[1090] = \<const0> ;
  assign LOCKSTEP_Master_Out[1091] = \<const0> ;
  assign LOCKSTEP_Master_Out[1092] = \<const0> ;
  assign LOCKSTEP_Master_Out[1093] = \<const0> ;
  assign LOCKSTEP_Master_Out[1094] = \<const0> ;
  assign LOCKSTEP_Master_Out[1095] = \<const0> ;
  assign LOCKSTEP_Master_Out[1096] = \<const0> ;
  assign LOCKSTEP_Master_Out[1097] = \<const0> ;
  assign LOCKSTEP_Master_Out[1098] = \<const0> ;
  assign LOCKSTEP_Master_Out[1099] = \<const0> ;
  assign LOCKSTEP_Master_Out[1100] = \<const0> ;
  assign LOCKSTEP_Master_Out[1101] = \<const0> ;
  assign LOCKSTEP_Master_Out[1102] = \<const0> ;
  assign LOCKSTEP_Master_Out[1103] = \<const0> ;
  assign LOCKSTEP_Master_Out[1104] = \<const0> ;
  assign LOCKSTEP_Master_Out[1105] = \<const0> ;
  assign LOCKSTEP_Master_Out[1106] = \<const0> ;
  assign LOCKSTEP_Master_Out[1107] = \<const0> ;
  assign LOCKSTEP_Master_Out[1108] = \<const0> ;
  assign LOCKSTEP_Master_Out[1109] = \<const0> ;
  assign LOCKSTEP_Master_Out[1110] = \<const0> ;
  assign LOCKSTEP_Master_Out[1111] = \<const0> ;
  assign LOCKSTEP_Master_Out[1112] = \<const0> ;
  assign LOCKSTEP_Master_Out[1113] = \<const0> ;
  assign LOCKSTEP_Master_Out[1114] = \<const0> ;
  assign LOCKSTEP_Master_Out[1115] = \<const0> ;
  assign LOCKSTEP_Master_Out[1116] = \<const0> ;
  assign LOCKSTEP_Master_Out[1117] = \<const0> ;
  assign LOCKSTEP_Master_Out[1118] = \<const0> ;
  assign LOCKSTEP_Master_Out[1119] = \<const0> ;
  assign LOCKSTEP_Master_Out[1120] = \<const0> ;
  assign LOCKSTEP_Master_Out[1121] = \<const0> ;
  assign LOCKSTEP_Master_Out[1122] = \<const0> ;
  assign LOCKSTEP_Master_Out[1123] = \<const0> ;
  assign LOCKSTEP_Master_Out[1124] = \<const0> ;
  assign LOCKSTEP_Master_Out[1125] = \<const0> ;
  assign LOCKSTEP_Master_Out[1126] = \<const0> ;
  assign LOCKSTEP_Master_Out[1127] = \<const0> ;
  assign LOCKSTEP_Master_Out[1128] = \<const0> ;
  assign LOCKSTEP_Master_Out[1129] = \<const0> ;
  assign LOCKSTEP_Master_Out[1130] = \<const0> ;
  assign LOCKSTEP_Master_Out[1131] = \<const0> ;
  assign LOCKSTEP_Master_Out[1132] = \<const0> ;
  assign LOCKSTEP_Master_Out[1133] = \<const0> ;
  assign LOCKSTEP_Master_Out[1134] = \<const0> ;
  assign LOCKSTEP_Master_Out[1135] = \<const0> ;
  assign LOCKSTEP_Master_Out[1136] = \<const0> ;
  assign LOCKSTEP_Master_Out[1137] = \<const0> ;
  assign LOCKSTEP_Master_Out[1138] = \<const0> ;
  assign LOCKSTEP_Master_Out[1139] = \<const0> ;
  assign LOCKSTEP_Master_Out[1140] = \<const0> ;
  assign LOCKSTEP_Master_Out[1141] = \<const0> ;
  assign LOCKSTEP_Master_Out[1142] = \<const0> ;
  assign LOCKSTEP_Master_Out[1143] = \<const0> ;
  assign LOCKSTEP_Master_Out[1144] = \<const0> ;
  assign LOCKSTEP_Master_Out[1145] = \<const0> ;
  assign LOCKSTEP_Master_Out[1146] = \<const0> ;
  assign LOCKSTEP_Master_Out[1147] = \<const0> ;
  assign LOCKSTEP_Master_Out[1148] = \<const0> ;
  assign LOCKSTEP_Master_Out[1149] = \<const0> ;
  assign LOCKSTEP_Master_Out[1150] = \<const0> ;
  assign LOCKSTEP_Master_Out[1151] = \<const0> ;
  assign LOCKSTEP_Master_Out[1152] = \<const0> ;
  assign LOCKSTEP_Master_Out[1153] = \<const0> ;
  assign LOCKSTEP_Master_Out[1154] = \<const0> ;
  assign LOCKSTEP_Master_Out[1155] = \<const0> ;
  assign LOCKSTEP_Master_Out[1156] = \<const0> ;
  assign LOCKSTEP_Master_Out[1157] = \<const0> ;
  assign LOCKSTEP_Master_Out[1158] = \<const0> ;
  assign LOCKSTEP_Master_Out[1159] = \<const0> ;
  assign LOCKSTEP_Master_Out[1160] = \<const0> ;
  assign LOCKSTEP_Master_Out[1161] = \<const0> ;
  assign LOCKSTEP_Master_Out[1162] = \<const0> ;
  assign LOCKSTEP_Master_Out[1163] = \<const0> ;
  assign LOCKSTEP_Master_Out[1164] = \<const0> ;
  assign LOCKSTEP_Master_Out[1165] = \<const0> ;
  assign LOCKSTEP_Master_Out[1166] = \<const0> ;
  assign LOCKSTEP_Master_Out[1167] = \<const0> ;
  assign LOCKSTEP_Master_Out[1168] = \<const0> ;
  assign LOCKSTEP_Master_Out[1169] = \<const0> ;
  assign LOCKSTEP_Master_Out[1170] = \<const0> ;
  assign LOCKSTEP_Master_Out[1171] = \<const0> ;
  assign LOCKSTEP_Master_Out[1172] = \<const0> ;
  assign LOCKSTEP_Master_Out[1173] = \<const0> ;
  assign LOCKSTEP_Master_Out[1174] = \<const0> ;
  assign LOCKSTEP_Master_Out[1175] = \<const0> ;
  assign LOCKSTEP_Master_Out[1176] = \<const0> ;
  assign LOCKSTEP_Master_Out[1177] = \<const0> ;
  assign LOCKSTEP_Master_Out[1178] = \<const0> ;
  assign LOCKSTEP_Master_Out[1179] = \<const0> ;
  assign LOCKSTEP_Master_Out[1180] = \<const0> ;
  assign LOCKSTEP_Master_Out[1181] = \<const0> ;
  assign LOCKSTEP_Master_Out[1182] = \<const0> ;
  assign LOCKSTEP_Master_Out[1183] = \<const0> ;
  assign LOCKSTEP_Master_Out[1184] = \<const0> ;
  assign LOCKSTEP_Master_Out[1185] = \<const0> ;
  assign LOCKSTEP_Master_Out[1186] = \<const0> ;
  assign LOCKSTEP_Master_Out[1187] = \<const0> ;
  assign LOCKSTEP_Master_Out[1188] = \<const0> ;
  assign LOCKSTEP_Master_Out[1189] = \<const0> ;
  assign LOCKSTEP_Master_Out[1190] = \<const0> ;
  assign LOCKSTEP_Master_Out[1191] = \<const0> ;
  assign LOCKSTEP_Master_Out[1192] = \<const0> ;
  assign LOCKSTEP_Master_Out[1193] = \<const0> ;
  assign LOCKSTEP_Master_Out[1194] = \<const0> ;
  assign LOCKSTEP_Master_Out[1195] = \<const0> ;
  assign LOCKSTEP_Master_Out[1196] = \<const0> ;
  assign LOCKSTEP_Master_Out[1197] = \<const0> ;
  assign LOCKSTEP_Master_Out[1198] = \<const0> ;
  assign LOCKSTEP_Master_Out[1199] = \<const0> ;
  assign LOCKSTEP_Master_Out[1200] = \<const0> ;
  assign LOCKSTEP_Master_Out[1201] = \<const0> ;
  assign LOCKSTEP_Master_Out[1202] = \<const0> ;
  assign LOCKSTEP_Master_Out[1203] = \<const0> ;
  assign LOCKSTEP_Master_Out[1204] = \<const0> ;
  assign LOCKSTEP_Master_Out[1205] = \<const0> ;
  assign LOCKSTEP_Master_Out[1206] = \<const0> ;
  assign LOCKSTEP_Master_Out[1207] = \<const0> ;
  assign LOCKSTEP_Master_Out[1208] = \<const0> ;
  assign LOCKSTEP_Master_Out[1209] = \<const0> ;
  assign LOCKSTEP_Master_Out[1210] = \<const0> ;
  assign LOCKSTEP_Master_Out[1211] = \<const0> ;
  assign LOCKSTEP_Master_Out[1212] = \<const0> ;
  assign LOCKSTEP_Master_Out[1213] = \<const0> ;
  assign LOCKSTEP_Master_Out[1214] = \<const0> ;
  assign LOCKSTEP_Master_Out[1215] = \<const0> ;
  assign LOCKSTEP_Master_Out[1216] = \<const0> ;
  assign LOCKSTEP_Master_Out[1217] = \<const0> ;
  assign LOCKSTEP_Master_Out[1218] = \<const0> ;
  assign LOCKSTEP_Master_Out[1219] = \<const0> ;
  assign LOCKSTEP_Master_Out[1220] = \<const0> ;
  assign LOCKSTEP_Master_Out[1221] = \<const0> ;
  assign LOCKSTEP_Master_Out[1222] = \<const0> ;
  assign LOCKSTEP_Master_Out[1223] = \<const0> ;
  assign LOCKSTEP_Master_Out[1224] = \<const0> ;
  assign LOCKSTEP_Master_Out[1225] = \<const0> ;
  assign LOCKSTEP_Master_Out[1226] = \<const0> ;
  assign LOCKSTEP_Master_Out[1227] = \<const0> ;
  assign LOCKSTEP_Master_Out[1228] = \<const0> ;
  assign LOCKSTEP_Master_Out[1229] = \<const0> ;
  assign LOCKSTEP_Master_Out[1230] = \<const0> ;
  assign LOCKSTEP_Master_Out[1231] = \<const0> ;
  assign LOCKSTEP_Master_Out[1232] = \<const0> ;
  assign LOCKSTEP_Master_Out[1233] = \<const0> ;
  assign LOCKSTEP_Master_Out[1234] = \<const0> ;
  assign LOCKSTEP_Master_Out[1235] = \<const0> ;
  assign LOCKSTEP_Master_Out[1236] = \<const0> ;
  assign LOCKSTEP_Master_Out[1237] = \<const0> ;
  assign LOCKSTEP_Master_Out[1238] = \<const0> ;
  assign LOCKSTEP_Master_Out[1239] = \<const0> ;
  assign LOCKSTEP_Master_Out[1240] = \<const0> ;
  assign LOCKSTEP_Master_Out[1241] = \<const0> ;
  assign LOCKSTEP_Master_Out[1242] = \<const0> ;
  assign LOCKSTEP_Master_Out[1243] = \<const0> ;
  assign LOCKSTEP_Master_Out[1244] = \<const0> ;
  assign LOCKSTEP_Master_Out[1245] = \<const0> ;
  assign LOCKSTEP_Master_Out[1246] = \<const0> ;
  assign LOCKSTEP_Master_Out[1247] = \<const0> ;
  assign LOCKSTEP_Master_Out[1248] = \<const0> ;
  assign LOCKSTEP_Master_Out[1249] = \<const0> ;
  assign LOCKSTEP_Master_Out[1250] = \<const0> ;
  assign LOCKSTEP_Master_Out[1251] = \<const0> ;
  assign LOCKSTEP_Master_Out[1252] = \<const0> ;
  assign LOCKSTEP_Master_Out[1253] = \<const0> ;
  assign LOCKSTEP_Master_Out[1254] = \<const0> ;
  assign LOCKSTEP_Master_Out[1255] = \<const0> ;
  assign LOCKSTEP_Master_Out[1256] = \<const0> ;
  assign LOCKSTEP_Master_Out[1257] = \<const0> ;
  assign LOCKSTEP_Master_Out[1258] = \<const0> ;
  assign LOCKSTEP_Master_Out[1259] = \<const0> ;
  assign LOCKSTEP_Master_Out[1260] = \<const0> ;
  assign LOCKSTEP_Master_Out[1261] = \<const0> ;
  assign LOCKSTEP_Master_Out[1262] = \<const0> ;
  assign LOCKSTEP_Master_Out[1263] = \<const0> ;
  assign LOCKSTEP_Master_Out[1264] = \<const0> ;
  assign LOCKSTEP_Master_Out[1265] = \<const0> ;
  assign LOCKSTEP_Master_Out[1266] = \<const0> ;
  assign LOCKSTEP_Master_Out[1267] = \<const0> ;
  assign LOCKSTEP_Master_Out[1268] = \<const0> ;
  assign LOCKSTEP_Master_Out[1269] = \<const0> ;
  assign LOCKSTEP_Master_Out[1270] = \<const0> ;
  assign LOCKSTEP_Master_Out[1271] = \<const0> ;
  assign LOCKSTEP_Master_Out[1272] = \<const0> ;
  assign LOCKSTEP_Master_Out[1273] = \<const0> ;
  assign LOCKSTEP_Master_Out[1274] = \<const0> ;
  assign LOCKSTEP_Master_Out[1275] = \<const0> ;
  assign LOCKSTEP_Master_Out[1276] = \<const0> ;
  assign LOCKSTEP_Master_Out[1277] = \<const0> ;
  assign LOCKSTEP_Master_Out[1278] = \<const0> ;
  assign LOCKSTEP_Master_Out[1279] = \<const0> ;
  assign LOCKSTEP_Master_Out[1280] = \<const0> ;
  assign LOCKSTEP_Master_Out[1281] = \<const0> ;
  assign LOCKSTEP_Master_Out[1282] = \<const0> ;
  assign LOCKSTEP_Master_Out[1283] = \<const0> ;
  assign LOCKSTEP_Master_Out[1284] = \<const0> ;
  assign LOCKSTEP_Master_Out[1285] = \<const0> ;
  assign LOCKSTEP_Master_Out[1286] = \<const0> ;
  assign LOCKSTEP_Master_Out[1287] = \<const0> ;
  assign LOCKSTEP_Master_Out[1288] = \<const0> ;
  assign LOCKSTEP_Master_Out[1289] = \<const0> ;
  assign LOCKSTEP_Master_Out[1290] = \<const0> ;
  assign LOCKSTEP_Master_Out[1291] = \<const0> ;
  assign LOCKSTEP_Master_Out[1292] = \<const0> ;
  assign LOCKSTEP_Master_Out[1293] = \<const0> ;
  assign LOCKSTEP_Master_Out[1294] = \<const0> ;
  assign LOCKSTEP_Master_Out[1295] = \<const0> ;
  assign LOCKSTEP_Master_Out[1296] = \<const0> ;
  assign LOCKSTEP_Master_Out[1297] = \<const0> ;
  assign LOCKSTEP_Master_Out[1298] = \<const0> ;
  assign LOCKSTEP_Master_Out[1299] = \<const0> ;
  assign LOCKSTEP_Master_Out[1300] = \<const0> ;
  assign LOCKSTEP_Master_Out[1301] = \<const0> ;
  assign LOCKSTEP_Master_Out[1302] = \<const0> ;
  assign LOCKSTEP_Master_Out[1303] = \<const0> ;
  assign LOCKSTEP_Master_Out[1304] = \<const0> ;
  assign LOCKSTEP_Master_Out[1305] = \<const0> ;
  assign LOCKSTEP_Master_Out[1306] = \<const0> ;
  assign LOCKSTEP_Master_Out[1307] = \<const0> ;
  assign LOCKSTEP_Master_Out[1308] = \<const0> ;
  assign LOCKSTEP_Master_Out[1309] = \<const0> ;
  assign LOCKSTEP_Master_Out[1310] = \<const0> ;
  assign LOCKSTEP_Master_Out[1311] = \<const0> ;
  assign LOCKSTEP_Master_Out[1312] = \<const0> ;
  assign LOCKSTEP_Master_Out[1313] = \<const0> ;
  assign LOCKSTEP_Master_Out[1314] = \<const0> ;
  assign LOCKSTEP_Master_Out[1315] = \<const0> ;
  assign LOCKSTEP_Master_Out[1316] = \<const0> ;
  assign LOCKSTEP_Master_Out[1317] = \<const0> ;
  assign LOCKSTEP_Master_Out[1318] = \<const0> ;
  assign LOCKSTEP_Master_Out[1319] = \<const0> ;
  assign LOCKSTEP_Master_Out[1320] = \<const0> ;
  assign LOCKSTEP_Master_Out[1321] = \<const0> ;
  assign LOCKSTEP_Master_Out[1322] = \<const0> ;
  assign LOCKSTEP_Master_Out[1323] = \<const0> ;
  assign LOCKSTEP_Master_Out[1324] = \<const0> ;
  assign LOCKSTEP_Master_Out[1325] = \<const0> ;
  assign LOCKSTEP_Master_Out[1326] = \<const0> ;
  assign LOCKSTEP_Master_Out[1327] = \<const0> ;
  assign LOCKSTEP_Master_Out[1328] = \<const0> ;
  assign LOCKSTEP_Master_Out[1329] = \<const0> ;
  assign LOCKSTEP_Master_Out[1330] = \<const0> ;
  assign LOCKSTEP_Master_Out[1331] = \<const0> ;
  assign LOCKSTEP_Master_Out[1332] = \<const0> ;
  assign LOCKSTEP_Master_Out[1333] = \<const0> ;
  assign LOCKSTEP_Master_Out[1334] = \<const0> ;
  assign LOCKSTEP_Master_Out[1335] = \<const0> ;
  assign LOCKSTEP_Master_Out[1336] = \<const0> ;
  assign LOCKSTEP_Master_Out[1337] = \<const0> ;
  assign LOCKSTEP_Master_Out[1338] = \<const0> ;
  assign LOCKSTEP_Master_Out[1339] = \<const0> ;
  assign LOCKSTEP_Master_Out[1340] = \<const0> ;
  assign LOCKSTEP_Master_Out[1341] = \<const0> ;
  assign LOCKSTEP_Master_Out[1342] = \<const0> ;
  assign LOCKSTEP_Master_Out[1343] = \<const0> ;
  assign LOCKSTEP_Master_Out[1344] = \<const0> ;
  assign LOCKSTEP_Master_Out[1345] = \<const0> ;
  assign LOCKSTEP_Master_Out[1346] = \<const0> ;
  assign LOCKSTEP_Master_Out[1347] = \<const0> ;
  assign LOCKSTEP_Master_Out[1348] = \<const0> ;
  assign LOCKSTEP_Master_Out[1349] = \<const0> ;
  assign LOCKSTEP_Master_Out[1350] = \<const0> ;
  assign LOCKSTEP_Master_Out[1351] = \<const0> ;
  assign LOCKSTEP_Master_Out[1352] = \<const0> ;
  assign LOCKSTEP_Master_Out[1353] = \<const0> ;
  assign LOCKSTEP_Master_Out[1354] = \<const0> ;
  assign LOCKSTEP_Master_Out[1355] = \<const0> ;
  assign LOCKSTEP_Master_Out[1356] = \<const0> ;
  assign LOCKSTEP_Master_Out[1357] = \<const0> ;
  assign LOCKSTEP_Master_Out[1358] = \<const0> ;
  assign LOCKSTEP_Master_Out[1359] = \<const0> ;
  assign LOCKSTEP_Master_Out[1360] = \<const0> ;
  assign LOCKSTEP_Master_Out[1361] = \<const0> ;
  assign LOCKSTEP_Master_Out[1362] = \<const0> ;
  assign LOCKSTEP_Master_Out[1363] = \<const0> ;
  assign LOCKSTEP_Master_Out[1364] = \<const0> ;
  assign LOCKSTEP_Master_Out[1365] = \<const0> ;
  assign LOCKSTEP_Master_Out[1366] = \<const0> ;
  assign LOCKSTEP_Master_Out[1367] = \<const0> ;
  assign LOCKSTEP_Master_Out[1368] = \<const0> ;
  assign LOCKSTEP_Master_Out[1369] = \<const0> ;
  assign LOCKSTEP_Master_Out[1370] = \<const0> ;
  assign LOCKSTEP_Master_Out[1371] = \<const0> ;
  assign LOCKSTEP_Master_Out[1372] = \<const0> ;
  assign LOCKSTEP_Master_Out[1373] = \<const0> ;
  assign LOCKSTEP_Master_Out[1374] = \<const0> ;
  assign LOCKSTEP_Master_Out[1375] = \<const0> ;
  assign LOCKSTEP_Master_Out[1376] = \<const0> ;
  assign LOCKSTEP_Master_Out[1377] = \<const0> ;
  assign LOCKSTEP_Master_Out[1378] = \<const0> ;
  assign LOCKSTEP_Master_Out[1379] = \<const0> ;
  assign LOCKSTEP_Master_Out[1380] = \<const0> ;
  assign LOCKSTEP_Master_Out[1381] = \<const0> ;
  assign LOCKSTEP_Master_Out[1382] = \<const0> ;
  assign LOCKSTEP_Master_Out[1383] = \<const0> ;
  assign LOCKSTEP_Master_Out[1384] = \<const0> ;
  assign LOCKSTEP_Master_Out[1385] = \<const0> ;
  assign LOCKSTEP_Master_Out[1386] = \<const0> ;
  assign LOCKSTEP_Master_Out[1387] = \<const0> ;
  assign LOCKSTEP_Master_Out[1388] = \<const0> ;
  assign LOCKSTEP_Master_Out[1389] = \<const0> ;
  assign LOCKSTEP_Master_Out[1390] = \<const0> ;
  assign LOCKSTEP_Master_Out[1391] = \<const0> ;
  assign LOCKSTEP_Master_Out[1392] = \<const0> ;
  assign LOCKSTEP_Master_Out[1393] = \<const0> ;
  assign LOCKSTEP_Master_Out[1394] = \<const0> ;
  assign LOCKSTEP_Master_Out[1395] = \<const0> ;
  assign LOCKSTEP_Master_Out[1396] = \<const0> ;
  assign LOCKSTEP_Master_Out[1397] = \<const0> ;
  assign LOCKSTEP_Master_Out[1398] = \<const0> ;
  assign LOCKSTEP_Master_Out[1399] = \<const0> ;
  assign LOCKSTEP_Master_Out[1400] = \<const0> ;
  assign LOCKSTEP_Master_Out[1401] = \<const0> ;
  assign LOCKSTEP_Master_Out[1402] = \<const0> ;
  assign LOCKSTEP_Master_Out[1403] = \<const0> ;
  assign LOCKSTEP_Master_Out[1404] = \<const0> ;
  assign LOCKSTEP_Master_Out[1405] = \<const0> ;
  assign LOCKSTEP_Master_Out[1406] = \<const0> ;
  assign LOCKSTEP_Master_Out[1407] = \<const0> ;
  assign LOCKSTEP_Master_Out[1408] = \<const0> ;
  assign LOCKSTEP_Master_Out[1409] = \<const0> ;
  assign LOCKSTEP_Master_Out[1410] = \<const0> ;
  assign LOCKSTEP_Master_Out[1411] = \<const0> ;
  assign LOCKSTEP_Master_Out[1412] = \<const0> ;
  assign LOCKSTEP_Master_Out[1413] = \<const0> ;
  assign LOCKSTEP_Master_Out[1414] = \<const0> ;
  assign LOCKSTEP_Master_Out[1415] = \<const0> ;
  assign LOCKSTEP_Master_Out[1416] = \<const0> ;
  assign LOCKSTEP_Master_Out[1417] = \<const0> ;
  assign LOCKSTEP_Master_Out[1418] = \<const0> ;
  assign LOCKSTEP_Master_Out[1419] = \<const0> ;
  assign LOCKSTEP_Master_Out[1420] = \<const0> ;
  assign LOCKSTEP_Master_Out[1421] = \<const0> ;
  assign LOCKSTEP_Master_Out[1422] = \<const0> ;
  assign LOCKSTEP_Master_Out[1423] = \<const0> ;
  assign LOCKSTEP_Master_Out[1424] = \<const0> ;
  assign LOCKSTEP_Master_Out[1425] = \<const0> ;
  assign LOCKSTEP_Master_Out[1426] = \<const0> ;
  assign LOCKSTEP_Master_Out[1427] = \<const0> ;
  assign LOCKSTEP_Master_Out[1428] = \<const0> ;
  assign LOCKSTEP_Master_Out[1429] = \<const0> ;
  assign LOCKSTEP_Master_Out[1430] = \<const0> ;
  assign LOCKSTEP_Master_Out[1431] = \<const0> ;
  assign LOCKSTEP_Master_Out[1432] = \<const0> ;
  assign LOCKSTEP_Master_Out[1433] = \<const0> ;
  assign LOCKSTEP_Master_Out[1434] = \<const0> ;
  assign LOCKSTEP_Master_Out[1435] = \<const0> ;
  assign LOCKSTEP_Master_Out[1436] = \<const0> ;
  assign LOCKSTEP_Master_Out[1437] = \<const0> ;
  assign LOCKSTEP_Master_Out[1438] = \<const0> ;
  assign LOCKSTEP_Master_Out[1439] = \<const0> ;
  assign LOCKSTEP_Master_Out[1440] = \<const0> ;
  assign LOCKSTEP_Master_Out[1441] = \<const0> ;
  assign LOCKSTEP_Master_Out[1442] = \<const0> ;
  assign LOCKSTEP_Master_Out[1443] = \<const0> ;
  assign LOCKSTEP_Master_Out[1444] = \<const0> ;
  assign LOCKSTEP_Master_Out[1445] = \<const0> ;
  assign LOCKSTEP_Master_Out[1446] = \<const0> ;
  assign LOCKSTEP_Master_Out[1447] = \<const0> ;
  assign LOCKSTEP_Master_Out[1448] = \<const0> ;
  assign LOCKSTEP_Master_Out[1449] = \<const0> ;
  assign LOCKSTEP_Master_Out[1450] = \<const0> ;
  assign LOCKSTEP_Master_Out[1451] = \<const0> ;
  assign LOCKSTEP_Master_Out[1452] = \<const0> ;
  assign LOCKSTEP_Master_Out[1453] = \<const0> ;
  assign LOCKSTEP_Master_Out[1454] = \<const0> ;
  assign LOCKSTEP_Master_Out[1455] = \<const0> ;
  assign LOCKSTEP_Master_Out[1456] = \<const0> ;
  assign LOCKSTEP_Master_Out[1457] = \<const0> ;
  assign LOCKSTEP_Master_Out[1458] = \<const0> ;
  assign LOCKSTEP_Master_Out[1459] = \<const0> ;
  assign LOCKSTEP_Master_Out[1460] = \<const0> ;
  assign LOCKSTEP_Master_Out[1461] = \<const0> ;
  assign LOCKSTEP_Master_Out[1462] = \<const0> ;
  assign LOCKSTEP_Master_Out[1463] = \<const0> ;
  assign LOCKSTEP_Master_Out[1464] = \<const0> ;
  assign LOCKSTEP_Master_Out[1465] = \<const0> ;
  assign LOCKSTEP_Master_Out[1466] = \<const0> ;
  assign LOCKSTEP_Master_Out[1467] = \<const0> ;
  assign LOCKSTEP_Master_Out[1468] = \<const0> ;
  assign LOCKSTEP_Master_Out[1469] = \<const0> ;
  assign LOCKSTEP_Master_Out[1470] = \<const0> ;
  assign LOCKSTEP_Master_Out[1471] = \<const0> ;
  assign LOCKSTEP_Master_Out[1472] = \<const0> ;
  assign LOCKSTEP_Master_Out[1473] = \<const0> ;
  assign LOCKSTEP_Master_Out[1474] = \<const0> ;
  assign LOCKSTEP_Master_Out[1475] = \<const0> ;
  assign LOCKSTEP_Master_Out[1476] = \<const0> ;
  assign LOCKSTEP_Master_Out[1477] = \<const0> ;
  assign LOCKSTEP_Master_Out[1478] = \<const0> ;
  assign LOCKSTEP_Master_Out[1479] = \<const0> ;
  assign LOCKSTEP_Master_Out[1480] = \<const0> ;
  assign LOCKSTEP_Master_Out[1481] = \<const0> ;
  assign LOCKSTEP_Master_Out[1482] = \<const0> ;
  assign LOCKSTEP_Master_Out[1483] = \<const0> ;
  assign LOCKSTEP_Master_Out[1484] = \<const0> ;
  assign LOCKSTEP_Master_Out[1485] = \<const0> ;
  assign LOCKSTEP_Master_Out[1486] = \<const0> ;
  assign LOCKSTEP_Master_Out[1487] = \<const0> ;
  assign LOCKSTEP_Master_Out[1488] = \<const0> ;
  assign LOCKSTEP_Master_Out[1489] = \<const0> ;
  assign LOCKSTEP_Master_Out[1490] = \<const0> ;
  assign LOCKSTEP_Master_Out[1491] = \<const0> ;
  assign LOCKSTEP_Master_Out[1492] = \<const0> ;
  assign LOCKSTEP_Master_Out[1493] = \<const0> ;
  assign LOCKSTEP_Master_Out[1494] = \<const0> ;
  assign LOCKSTEP_Master_Out[1495] = \<const0> ;
  assign LOCKSTEP_Master_Out[1496] = \<const0> ;
  assign LOCKSTEP_Master_Out[1497] = \<const0> ;
  assign LOCKSTEP_Master_Out[1498] = \<const0> ;
  assign LOCKSTEP_Master_Out[1499] = \<const0> ;
  assign LOCKSTEP_Master_Out[1500] = \<const0> ;
  assign LOCKSTEP_Master_Out[1501] = \<const0> ;
  assign LOCKSTEP_Master_Out[1502] = \<const0> ;
  assign LOCKSTEP_Master_Out[1503] = \<const0> ;
  assign LOCKSTEP_Master_Out[1504] = \<const0> ;
  assign LOCKSTEP_Master_Out[1505] = \<const0> ;
  assign LOCKSTEP_Master_Out[1506] = \<const0> ;
  assign LOCKSTEP_Master_Out[1507] = \<const0> ;
  assign LOCKSTEP_Master_Out[1508] = \<const0> ;
  assign LOCKSTEP_Master_Out[1509] = \<const0> ;
  assign LOCKSTEP_Master_Out[1510] = \<const0> ;
  assign LOCKSTEP_Master_Out[1511] = \<const0> ;
  assign LOCKSTEP_Master_Out[1512] = \<const0> ;
  assign LOCKSTEP_Master_Out[1513] = \<const0> ;
  assign LOCKSTEP_Master_Out[1514] = \<const0> ;
  assign LOCKSTEP_Master_Out[1515] = \<const0> ;
  assign LOCKSTEP_Master_Out[1516] = \<const0> ;
  assign LOCKSTEP_Master_Out[1517] = \<const0> ;
  assign LOCKSTEP_Master_Out[1518] = \<const0> ;
  assign LOCKSTEP_Master_Out[1519] = \<const0> ;
  assign LOCKSTEP_Master_Out[1520] = \<const0> ;
  assign LOCKSTEP_Master_Out[1521] = \<const0> ;
  assign LOCKSTEP_Master_Out[1522] = \<const0> ;
  assign LOCKSTEP_Master_Out[1523] = \<const0> ;
  assign LOCKSTEP_Master_Out[1524] = \<const0> ;
  assign LOCKSTEP_Master_Out[1525] = \<const0> ;
  assign LOCKSTEP_Master_Out[1526] = \<const0> ;
  assign LOCKSTEP_Master_Out[1527] = \<const0> ;
  assign LOCKSTEP_Master_Out[1528] = \<const0> ;
  assign LOCKSTEP_Master_Out[1529] = \<const0> ;
  assign LOCKSTEP_Master_Out[1530] = \<const0> ;
  assign LOCKSTEP_Master_Out[1531] = \<const0> ;
  assign LOCKSTEP_Master_Out[1532] = \<const0> ;
  assign LOCKSTEP_Master_Out[1533] = \<const0> ;
  assign LOCKSTEP_Master_Out[1534] = \<const0> ;
  assign LOCKSTEP_Master_Out[1535] = \<const0> ;
  assign LOCKSTEP_Master_Out[1536] = \<const0> ;
  assign LOCKSTEP_Master_Out[1537] = \<const0> ;
  assign LOCKSTEP_Master_Out[1538] = \<const0> ;
  assign LOCKSTEP_Master_Out[1539] = \<const0> ;
  assign LOCKSTEP_Master_Out[1540] = \<const0> ;
  assign LOCKSTEP_Master_Out[1541] = \<const0> ;
  assign LOCKSTEP_Master_Out[1542] = \<const0> ;
  assign LOCKSTEP_Master_Out[1543] = \<const0> ;
  assign LOCKSTEP_Master_Out[1544] = \<const0> ;
  assign LOCKSTEP_Master_Out[1545] = \<const0> ;
  assign LOCKSTEP_Master_Out[1546] = \<const0> ;
  assign LOCKSTEP_Master_Out[1547] = \<const0> ;
  assign LOCKSTEP_Master_Out[1548] = \<const0> ;
  assign LOCKSTEP_Master_Out[1549] = \<const0> ;
  assign LOCKSTEP_Master_Out[1550] = \<const0> ;
  assign LOCKSTEP_Master_Out[1551] = \<const0> ;
  assign LOCKSTEP_Master_Out[1552] = \<const0> ;
  assign LOCKSTEP_Master_Out[1553] = \<const0> ;
  assign LOCKSTEP_Master_Out[1554] = \<const0> ;
  assign LOCKSTEP_Master_Out[1555] = \<const0> ;
  assign LOCKSTEP_Master_Out[1556] = \<const0> ;
  assign LOCKSTEP_Master_Out[1557] = \<const0> ;
  assign LOCKSTEP_Master_Out[1558] = \<const0> ;
  assign LOCKSTEP_Master_Out[1559] = \<const0> ;
  assign LOCKSTEP_Master_Out[1560] = \<const0> ;
  assign LOCKSTEP_Master_Out[1561] = \<const0> ;
  assign LOCKSTEP_Master_Out[1562] = \<const0> ;
  assign LOCKSTEP_Master_Out[1563] = \<const0> ;
  assign LOCKSTEP_Master_Out[1564] = \<const0> ;
  assign LOCKSTEP_Master_Out[1565] = \<const0> ;
  assign LOCKSTEP_Master_Out[1566] = \<const0> ;
  assign LOCKSTEP_Master_Out[1567] = \<const0> ;
  assign LOCKSTEP_Master_Out[1568] = \<const0> ;
  assign LOCKSTEP_Master_Out[1569] = \<const0> ;
  assign LOCKSTEP_Master_Out[1570] = \<const0> ;
  assign LOCKSTEP_Master_Out[1571] = \<const0> ;
  assign LOCKSTEP_Master_Out[1572] = \<const0> ;
  assign LOCKSTEP_Master_Out[1573] = \<const0> ;
  assign LOCKSTEP_Master_Out[1574] = \<const0> ;
  assign LOCKSTEP_Master_Out[1575] = \<const0> ;
  assign LOCKSTEP_Master_Out[1576] = \<const0> ;
  assign LOCKSTEP_Master_Out[1577] = \<const0> ;
  assign LOCKSTEP_Master_Out[1578] = \<const0> ;
  assign LOCKSTEP_Master_Out[1579] = \<const0> ;
  assign LOCKSTEP_Master_Out[1580] = \<const0> ;
  assign LOCKSTEP_Master_Out[1581] = \<const0> ;
  assign LOCKSTEP_Master_Out[1582] = \<const0> ;
  assign LOCKSTEP_Master_Out[1583] = \<const0> ;
  assign LOCKSTEP_Master_Out[1584] = \<const0> ;
  assign LOCKSTEP_Master_Out[1585] = \<const0> ;
  assign LOCKSTEP_Master_Out[1586] = \<const0> ;
  assign LOCKSTEP_Master_Out[1587] = \<const0> ;
  assign LOCKSTEP_Master_Out[1588] = \<const0> ;
  assign LOCKSTEP_Master_Out[1589] = \<const0> ;
  assign LOCKSTEP_Master_Out[1590] = \<const0> ;
  assign LOCKSTEP_Master_Out[1591] = \<const0> ;
  assign LOCKSTEP_Master_Out[1592] = \<const0> ;
  assign LOCKSTEP_Master_Out[1593] = \<const0> ;
  assign LOCKSTEP_Master_Out[1594] = \<const0> ;
  assign LOCKSTEP_Master_Out[1595] = \<const0> ;
  assign LOCKSTEP_Master_Out[1596] = \<const0> ;
  assign LOCKSTEP_Master_Out[1597] = \<const0> ;
  assign LOCKSTEP_Master_Out[1598] = \<const0> ;
  assign LOCKSTEP_Master_Out[1599] = \<const0> ;
  assign LOCKSTEP_Master_Out[1600] = \<const0> ;
  assign LOCKSTEP_Master_Out[1601] = \<const0> ;
  assign LOCKSTEP_Master_Out[1602] = \<const0> ;
  assign LOCKSTEP_Master_Out[1603] = \<const0> ;
  assign LOCKSTEP_Master_Out[1604] = \<const0> ;
  assign LOCKSTEP_Master_Out[1605] = \<const0> ;
  assign LOCKSTEP_Master_Out[1606] = \<const0> ;
  assign LOCKSTEP_Master_Out[1607] = \<const0> ;
  assign LOCKSTEP_Master_Out[1608] = \<const0> ;
  assign LOCKSTEP_Master_Out[1609] = \<const0> ;
  assign LOCKSTEP_Master_Out[1610] = \<const0> ;
  assign LOCKSTEP_Master_Out[1611] = \<const0> ;
  assign LOCKSTEP_Master_Out[1612] = \<const0> ;
  assign LOCKSTEP_Master_Out[1613] = \<const0> ;
  assign LOCKSTEP_Master_Out[1614] = \<const0> ;
  assign LOCKSTEP_Master_Out[1615] = \<const0> ;
  assign LOCKSTEP_Master_Out[1616] = \<const0> ;
  assign LOCKSTEP_Master_Out[1617] = \<const0> ;
  assign LOCKSTEP_Master_Out[1618] = \<const0> ;
  assign LOCKSTEP_Master_Out[1619] = \<const0> ;
  assign LOCKSTEP_Master_Out[1620] = \<const0> ;
  assign LOCKSTEP_Master_Out[1621] = \<const0> ;
  assign LOCKSTEP_Master_Out[1622] = \<const0> ;
  assign LOCKSTEP_Master_Out[1623] = \<const0> ;
  assign LOCKSTEP_Master_Out[1624] = \<const0> ;
  assign LOCKSTEP_Master_Out[1625] = \<const0> ;
  assign LOCKSTEP_Master_Out[1626] = \<const0> ;
  assign LOCKSTEP_Master_Out[1627] = \<const0> ;
  assign LOCKSTEP_Master_Out[1628] = \<const0> ;
  assign LOCKSTEP_Master_Out[1629] = \<const0> ;
  assign LOCKSTEP_Master_Out[1630] = \<const0> ;
  assign LOCKSTEP_Master_Out[1631] = \<const0> ;
  assign LOCKSTEP_Master_Out[1632] = \<const0> ;
  assign LOCKSTEP_Master_Out[1633] = \<const0> ;
  assign LOCKSTEP_Master_Out[1634] = \<const0> ;
  assign LOCKSTEP_Master_Out[1635] = \<const0> ;
  assign LOCKSTEP_Master_Out[1636] = \<const0> ;
  assign LOCKSTEP_Master_Out[1637] = \<const0> ;
  assign LOCKSTEP_Master_Out[1638] = \<const0> ;
  assign LOCKSTEP_Master_Out[1639] = \<const0> ;
  assign LOCKSTEP_Master_Out[1640] = \<const0> ;
  assign LOCKSTEP_Master_Out[1641] = \<const0> ;
  assign LOCKSTEP_Master_Out[1642] = \<const0> ;
  assign LOCKSTEP_Master_Out[1643] = \<const0> ;
  assign LOCKSTEP_Master_Out[1644] = \<const0> ;
  assign LOCKSTEP_Master_Out[1645] = \<const0> ;
  assign LOCKSTEP_Master_Out[1646] = \<const0> ;
  assign LOCKSTEP_Master_Out[1647] = \<const0> ;
  assign LOCKSTEP_Master_Out[1648] = \<const0> ;
  assign LOCKSTEP_Master_Out[1649] = \<const0> ;
  assign LOCKSTEP_Master_Out[1650] = \<const0> ;
  assign LOCKSTEP_Master_Out[1651] = \<const0> ;
  assign LOCKSTEP_Master_Out[1652] = \<const0> ;
  assign LOCKSTEP_Master_Out[1653] = \<const0> ;
  assign LOCKSTEP_Master_Out[1654] = \<const0> ;
  assign LOCKSTEP_Master_Out[1655] = \<const0> ;
  assign LOCKSTEP_Master_Out[1656] = \<const0> ;
  assign LOCKSTEP_Master_Out[1657] = \<const0> ;
  assign LOCKSTEP_Master_Out[1658] = \<const0> ;
  assign LOCKSTEP_Master_Out[1659] = \<const0> ;
  assign LOCKSTEP_Master_Out[1660] = \<const0> ;
  assign LOCKSTEP_Master_Out[1661] = \<const0> ;
  assign LOCKSTEP_Master_Out[1662] = \<const0> ;
  assign LOCKSTEP_Master_Out[1663] = \<const0> ;
  assign LOCKSTEP_Master_Out[1664] = \<const0> ;
  assign LOCKSTEP_Master_Out[1665] = \<const0> ;
  assign LOCKSTEP_Master_Out[1666] = \<const0> ;
  assign LOCKSTEP_Master_Out[1667] = \<const0> ;
  assign LOCKSTEP_Master_Out[1668] = \<const0> ;
  assign LOCKSTEP_Master_Out[1669] = \<const0> ;
  assign LOCKSTEP_Master_Out[1670] = \<const0> ;
  assign LOCKSTEP_Master_Out[1671] = \<const0> ;
  assign LOCKSTEP_Master_Out[1672] = \<const0> ;
  assign LOCKSTEP_Master_Out[1673] = \<const0> ;
  assign LOCKSTEP_Master_Out[1674] = \<const0> ;
  assign LOCKSTEP_Master_Out[1675] = \<const0> ;
  assign LOCKSTEP_Master_Out[1676] = \<const0> ;
  assign LOCKSTEP_Master_Out[1677] = \<const0> ;
  assign LOCKSTEP_Master_Out[1678] = \<const0> ;
  assign LOCKSTEP_Master_Out[1679] = \<const0> ;
  assign LOCKSTEP_Master_Out[1680] = \<const0> ;
  assign LOCKSTEP_Master_Out[1681] = \<const0> ;
  assign LOCKSTEP_Master_Out[1682] = \<const0> ;
  assign LOCKSTEP_Master_Out[1683] = \<const0> ;
  assign LOCKSTEP_Master_Out[1684] = \<const0> ;
  assign LOCKSTEP_Master_Out[1685] = \<const0> ;
  assign LOCKSTEP_Master_Out[1686] = \<const0> ;
  assign LOCKSTEP_Master_Out[1687] = \<const0> ;
  assign LOCKSTEP_Master_Out[1688] = \<const0> ;
  assign LOCKSTEP_Master_Out[1689] = \<const0> ;
  assign LOCKSTEP_Master_Out[1690] = \<const0> ;
  assign LOCKSTEP_Master_Out[1691] = \<const0> ;
  assign LOCKSTEP_Master_Out[1692] = \<const0> ;
  assign LOCKSTEP_Master_Out[1693] = \<const0> ;
  assign LOCKSTEP_Master_Out[1694] = \<const0> ;
  assign LOCKSTEP_Master_Out[1695] = \<const0> ;
  assign LOCKSTEP_Master_Out[1696] = \<const0> ;
  assign LOCKSTEP_Master_Out[1697] = \<const0> ;
  assign LOCKSTEP_Master_Out[1698] = \<const0> ;
  assign LOCKSTEP_Master_Out[1699] = \<const0> ;
  assign LOCKSTEP_Master_Out[1700] = \<const0> ;
  assign LOCKSTEP_Master_Out[1701] = \<const0> ;
  assign LOCKSTEP_Master_Out[1702] = \<const0> ;
  assign LOCKSTEP_Master_Out[1703] = \<const0> ;
  assign LOCKSTEP_Master_Out[1704] = \<const0> ;
  assign LOCKSTEP_Master_Out[1705] = \<const0> ;
  assign LOCKSTEP_Master_Out[1706] = \<const0> ;
  assign LOCKSTEP_Master_Out[1707] = \<const0> ;
  assign LOCKSTEP_Master_Out[1708] = \<const0> ;
  assign LOCKSTEP_Master_Out[1709] = \<const0> ;
  assign LOCKSTEP_Master_Out[1710] = \<const0> ;
  assign LOCKSTEP_Master_Out[1711] = \<const0> ;
  assign LOCKSTEP_Master_Out[1712] = \<const0> ;
  assign LOCKSTEP_Master_Out[1713] = \<const0> ;
  assign LOCKSTEP_Master_Out[1714] = \<const0> ;
  assign LOCKSTEP_Master_Out[1715] = \<const0> ;
  assign LOCKSTEP_Master_Out[1716] = \<const0> ;
  assign LOCKSTEP_Master_Out[1717] = \<const0> ;
  assign LOCKSTEP_Master_Out[1718] = \<const0> ;
  assign LOCKSTEP_Master_Out[1719] = \<const0> ;
  assign LOCKSTEP_Master_Out[1720] = \<const0> ;
  assign LOCKSTEP_Master_Out[1721] = \<const0> ;
  assign LOCKSTEP_Master_Out[1722] = \<const0> ;
  assign LOCKSTEP_Master_Out[1723] = \<const0> ;
  assign LOCKSTEP_Master_Out[1724] = \<const0> ;
  assign LOCKSTEP_Master_Out[1725] = \<const0> ;
  assign LOCKSTEP_Master_Out[1726] = \<const0> ;
  assign LOCKSTEP_Master_Out[1727] = \<const0> ;
  assign LOCKSTEP_Master_Out[1728] = \<const0> ;
  assign LOCKSTEP_Master_Out[1729] = \<const0> ;
  assign LOCKSTEP_Master_Out[1730] = \<const0> ;
  assign LOCKSTEP_Master_Out[1731] = \<const0> ;
  assign LOCKSTEP_Master_Out[1732] = \<const0> ;
  assign LOCKSTEP_Master_Out[1733] = \<const0> ;
  assign LOCKSTEP_Master_Out[1734] = \<const0> ;
  assign LOCKSTEP_Master_Out[1735] = \<const0> ;
  assign LOCKSTEP_Master_Out[1736] = \<const0> ;
  assign LOCKSTEP_Master_Out[1737] = \<const0> ;
  assign LOCKSTEP_Master_Out[1738] = \<const0> ;
  assign LOCKSTEP_Master_Out[1739] = \<const0> ;
  assign LOCKSTEP_Master_Out[1740] = \<const0> ;
  assign LOCKSTEP_Master_Out[1741] = \<const0> ;
  assign LOCKSTEP_Master_Out[1742] = \<const0> ;
  assign LOCKSTEP_Master_Out[1743] = \<const0> ;
  assign LOCKSTEP_Master_Out[1744] = \<const0> ;
  assign LOCKSTEP_Master_Out[1745] = \<const0> ;
  assign LOCKSTEP_Master_Out[1746] = \<const0> ;
  assign LOCKSTEP_Master_Out[1747] = \<const0> ;
  assign LOCKSTEP_Master_Out[1748] = \<const0> ;
  assign LOCKSTEP_Master_Out[1749] = \<const0> ;
  assign LOCKSTEP_Master_Out[1750] = \<const0> ;
  assign LOCKSTEP_Master_Out[1751] = \<const0> ;
  assign LOCKSTEP_Master_Out[1752] = \<const0> ;
  assign LOCKSTEP_Master_Out[1753] = \<const0> ;
  assign LOCKSTEP_Master_Out[1754] = \<const0> ;
  assign LOCKSTEP_Master_Out[1755] = \<const0> ;
  assign LOCKSTEP_Master_Out[1756] = \<const0> ;
  assign LOCKSTEP_Master_Out[1757] = \<const0> ;
  assign LOCKSTEP_Master_Out[1758] = \<const0> ;
  assign LOCKSTEP_Master_Out[1759] = \<const0> ;
  assign LOCKSTEP_Master_Out[1760] = \<const0> ;
  assign LOCKSTEP_Master_Out[1761] = \<const0> ;
  assign LOCKSTEP_Master_Out[1762] = \<const0> ;
  assign LOCKSTEP_Master_Out[1763] = \<const0> ;
  assign LOCKSTEP_Master_Out[1764] = \<const0> ;
  assign LOCKSTEP_Master_Out[1765] = \<const0> ;
  assign LOCKSTEP_Master_Out[1766] = \<const0> ;
  assign LOCKSTEP_Master_Out[1767] = \<const0> ;
  assign LOCKSTEP_Master_Out[1768] = \<const0> ;
  assign LOCKSTEP_Master_Out[1769] = \<const0> ;
  assign LOCKSTEP_Master_Out[1770] = \<const0> ;
  assign LOCKSTEP_Master_Out[1771] = \<const0> ;
  assign LOCKSTEP_Master_Out[1772] = \<const0> ;
  assign LOCKSTEP_Master_Out[1773] = \<const0> ;
  assign LOCKSTEP_Master_Out[1774] = \<const0> ;
  assign LOCKSTEP_Master_Out[1775] = \<const0> ;
  assign LOCKSTEP_Master_Out[1776] = \<const0> ;
  assign LOCKSTEP_Master_Out[1777] = \<const0> ;
  assign LOCKSTEP_Master_Out[1778] = \<const0> ;
  assign LOCKSTEP_Master_Out[1779] = \<const0> ;
  assign LOCKSTEP_Master_Out[1780] = \<const0> ;
  assign LOCKSTEP_Master_Out[1781] = \<const0> ;
  assign LOCKSTEP_Master_Out[1782] = \<const0> ;
  assign LOCKSTEP_Master_Out[1783] = \<const0> ;
  assign LOCKSTEP_Master_Out[1784] = \<const0> ;
  assign LOCKSTEP_Master_Out[1785] = \<const0> ;
  assign LOCKSTEP_Master_Out[1786] = \<const0> ;
  assign LOCKSTEP_Master_Out[1787] = \<const0> ;
  assign LOCKSTEP_Master_Out[1788] = \<const0> ;
  assign LOCKSTEP_Master_Out[1789] = \<const0> ;
  assign LOCKSTEP_Master_Out[1790] = \<const0> ;
  assign LOCKSTEP_Master_Out[1791] = \<const0> ;
  assign LOCKSTEP_Master_Out[1792] = \<const0> ;
  assign LOCKSTEP_Master_Out[1793] = \<const0> ;
  assign LOCKSTEP_Master_Out[1794] = \<const0> ;
  assign LOCKSTEP_Master_Out[1795] = \<const0> ;
  assign LOCKSTEP_Master_Out[1796] = \<const0> ;
  assign LOCKSTEP_Master_Out[1797] = \<const0> ;
  assign LOCKSTEP_Master_Out[1798] = \<const0> ;
  assign LOCKSTEP_Master_Out[1799] = \<const0> ;
  assign LOCKSTEP_Master_Out[1800] = \<const0> ;
  assign LOCKSTEP_Master_Out[1801] = \<const0> ;
  assign LOCKSTEP_Master_Out[1802] = \<const0> ;
  assign LOCKSTEP_Master_Out[1803] = \<const0> ;
  assign LOCKSTEP_Master_Out[1804] = \<const0> ;
  assign LOCKSTEP_Master_Out[1805] = \<const0> ;
  assign LOCKSTEP_Master_Out[1806] = \<const0> ;
  assign LOCKSTEP_Master_Out[1807] = \<const0> ;
  assign LOCKSTEP_Master_Out[1808] = \<const0> ;
  assign LOCKSTEP_Master_Out[1809] = \<const0> ;
  assign LOCKSTEP_Master_Out[1810] = \<const0> ;
  assign LOCKSTEP_Master_Out[1811] = \<const0> ;
  assign LOCKSTEP_Master_Out[1812] = \<const0> ;
  assign LOCKSTEP_Master_Out[1813] = \<const0> ;
  assign LOCKSTEP_Master_Out[1814] = \<const0> ;
  assign LOCKSTEP_Master_Out[1815] = \<const0> ;
  assign LOCKSTEP_Master_Out[1816] = \<const0> ;
  assign LOCKSTEP_Master_Out[1817] = \<const0> ;
  assign LOCKSTEP_Master_Out[1818] = \<const0> ;
  assign LOCKSTEP_Master_Out[1819] = \<const0> ;
  assign LOCKSTEP_Master_Out[1820] = \<const0> ;
  assign LOCKSTEP_Master_Out[1821] = \<const0> ;
  assign LOCKSTEP_Master_Out[1822] = \<const0> ;
  assign LOCKSTEP_Master_Out[1823] = \<const0> ;
  assign LOCKSTEP_Master_Out[1824] = \<const0> ;
  assign LOCKSTEP_Master_Out[1825] = \<const0> ;
  assign LOCKSTEP_Master_Out[1826] = \<const0> ;
  assign LOCKSTEP_Master_Out[1827] = \<const0> ;
  assign LOCKSTEP_Master_Out[1828] = \<const0> ;
  assign LOCKSTEP_Master_Out[1829] = \<const0> ;
  assign LOCKSTEP_Master_Out[1830] = \<const0> ;
  assign LOCKSTEP_Master_Out[1831] = \<const0> ;
  assign LOCKSTEP_Master_Out[1832] = \<const0> ;
  assign LOCKSTEP_Master_Out[1833] = \<const0> ;
  assign LOCKSTEP_Master_Out[1834] = \<const0> ;
  assign LOCKSTEP_Master_Out[1835] = \<const0> ;
  assign LOCKSTEP_Master_Out[1836] = \<const0> ;
  assign LOCKSTEP_Master_Out[1837] = \<const0> ;
  assign LOCKSTEP_Master_Out[1838] = \<const0> ;
  assign LOCKSTEP_Master_Out[1839] = \<const0> ;
  assign LOCKSTEP_Master_Out[1840] = \<const0> ;
  assign LOCKSTEP_Master_Out[1841] = \<const0> ;
  assign LOCKSTEP_Master_Out[1842] = \<const0> ;
  assign LOCKSTEP_Master_Out[1843] = \<const0> ;
  assign LOCKSTEP_Master_Out[1844] = \<const0> ;
  assign LOCKSTEP_Master_Out[1845] = \<const0> ;
  assign LOCKSTEP_Master_Out[1846] = \<const0> ;
  assign LOCKSTEP_Master_Out[1847] = \<const0> ;
  assign LOCKSTEP_Master_Out[1848] = \<const0> ;
  assign LOCKSTEP_Master_Out[1849] = \<const0> ;
  assign LOCKSTEP_Master_Out[1850] = \<const0> ;
  assign LOCKSTEP_Master_Out[1851] = \<const0> ;
  assign LOCKSTEP_Master_Out[1852] = \<const0> ;
  assign LOCKSTEP_Master_Out[1853] = \<const0> ;
  assign LOCKSTEP_Master_Out[1854] = \<const0> ;
  assign LOCKSTEP_Master_Out[1855] = \<const0> ;
  assign LOCKSTEP_Master_Out[1856] = \<const0> ;
  assign LOCKSTEP_Master_Out[1857] = \<const0> ;
  assign LOCKSTEP_Master_Out[1858] = \<const0> ;
  assign LOCKSTEP_Master_Out[1859] = \<const0> ;
  assign LOCKSTEP_Master_Out[1860] = \<const0> ;
  assign LOCKSTEP_Master_Out[1861] = \<const0> ;
  assign LOCKSTEP_Master_Out[1862] = \<const0> ;
  assign LOCKSTEP_Master_Out[1863] = \<const0> ;
  assign LOCKSTEP_Master_Out[1864] = \<const0> ;
  assign LOCKSTEP_Master_Out[1865] = \<const0> ;
  assign LOCKSTEP_Master_Out[1866] = \<const0> ;
  assign LOCKSTEP_Master_Out[1867] = \<const0> ;
  assign LOCKSTEP_Master_Out[1868] = \<const0> ;
  assign LOCKSTEP_Master_Out[1869] = \<const0> ;
  assign LOCKSTEP_Master_Out[1870] = \<const0> ;
  assign LOCKSTEP_Master_Out[1871] = \<const0> ;
  assign LOCKSTEP_Master_Out[1872] = \<const0> ;
  assign LOCKSTEP_Master_Out[1873] = \<const0> ;
  assign LOCKSTEP_Master_Out[1874] = \<const0> ;
  assign LOCKSTEP_Master_Out[1875] = \<const0> ;
  assign LOCKSTEP_Master_Out[1876] = \<const0> ;
  assign LOCKSTEP_Master_Out[1877] = \<const0> ;
  assign LOCKSTEP_Master_Out[1878] = \<const0> ;
  assign LOCKSTEP_Master_Out[1879] = \<const0> ;
  assign LOCKSTEP_Master_Out[1880] = \<const0> ;
  assign LOCKSTEP_Master_Out[1881] = \<const0> ;
  assign LOCKSTEP_Master_Out[1882] = \<const0> ;
  assign LOCKSTEP_Master_Out[1883] = \<const0> ;
  assign LOCKSTEP_Master_Out[1884] = \<const0> ;
  assign LOCKSTEP_Master_Out[1885] = \<const0> ;
  assign LOCKSTEP_Master_Out[1886] = \<const0> ;
  assign LOCKSTEP_Master_Out[1887] = \<const0> ;
  assign LOCKSTEP_Master_Out[1888] = \<const0> ;
  assign LOCKSTEP_Master_Out[1889] = \<const0> ;
  assign LOCKSTEP_Master_Out[1890] = \<const0> ;
  assign LOCKSTEP_Master_Out[1891] = \<const0> ;
  assign LOCKSTEP_Master_Out[1892] = \<const0> ;
  assign LOCKSTEP_Master_Out[1893] = \<const0> ;
  assign LOCKSTEP_Master_Out[1894] = \<const0> ;
  assign LOCKSTEP_Master_Out[1895] = \<const0> ;
  assign LOCKSTEP_Master_Out[1896] = \<const0> ;
  assign LOCKSTEP_Master_Out[1897] = \<const0> ;
  assign LOCKSTEP_Master_Out[1898] = \<const0> ;
  assign LOCKSTEP_Master_Out[1899] = \<const0> ;
  assign LOCKSTEP_Master_Out[1900] = \<const0> ;
  assign LOCKSTEP_Master_Out[1901] = \<const0> ;
  assign LOCKSTEP_Master_Out[1902] = \<const0> ;
  assign LOCKSTEP_Master_Out[1903] = \<const0> ;
  assign LOCKSTEP_Master_Out[1904] = \<const0> ;
  assign LOCKSTEP_Master_Out[1905] = \<const0> ;
  assign LOCKSTEP_Master_Out[1906] = \<const0> ;
  assign LOCKSTEP_Master_Out[1907] = \<const0> ;
  assign LOCKSTEP_Master_Out[1908] = \<const0> ;
  assign LOCKSTEP_Master_Out[1909] = \<const0> ;
  assign LOCKSTEP_Master_Out[1910] = \<const0> ;
  assign LOCKSTEP_Master_Out[1911] = \<const0> ;
  assign LOCKSTEP_Master_Out[1912] = \<const0> ;
  assign LOCKSTEP_Master_Out[1913] = \<const0> ;
  assign LOCKSTEP_Master_Out[1914] = \<const0> ;
  assign LOCKSTEP_Master_Out[1915] = \<const0> ;
  assign LOCKSTEP_Master_Out[1916] = \<const0> ;
  assign LOCKSTEP_Master_Out[1917] = \<const0> ;
  assign LOCKSTEP_Master_Out[1918] = \<const0> ;
  assign LOCKSTEP_Master_Out[1919] = \<const0> ;
  assign LOCKSTEP_Master_Out[1920] = \<const0> ;
  assign LOCKSTEP_Master_Out[1921] = \<const0> ;
  assign LOCKSTEP_Master_Out[1922] = \<const0> ;
  assign LOCKSTEP_Master_Out[1923] = \<const0> ;
  assign LOCKSTEP_Master_Out[1924] = \<const0> ;
  assign LOCKSTEP_Master_Out[1925] = \<const0> ;
  assign LOCKSTEP_Master_Out[1926] = \<const0> ;
  assign LOCKSTEP_Master_Out[1927] = \<const0> ;
  assign LOCKSTEP_Master_Out[1928] = \<const0> ;
  assign LOCKSTEP_Master_Out[1929] = \<const0> ;
  assign LOCKSTEP_Master_Out[1930] = \<const0> ;
  assign LOCKSTEP_Master_Out[1931] = \<const0> ;
  assign LOCKSTEP_Master_Out[1932] = \<const0> ;
  assign LOCKSTEP_Master_Out[1933] = \<const0> ;
  assign LOCKSTEP_Master_Out[1934] = \<const0> ;
  assign LOCKSTEP_Master_Out[1935] = \<const0> ;
  assign LOCKSTEP_Master_Out[1936] = \<const0> ;
  assign LOCKSTEP_Master_Out[1937] = \<const0> ;
  assign LOCKSTEP_Master_Out[1938] = \<const0> ;
  assign LOCKSTEP_Master_Out[1939] = \<const0> ;
  assign LOCKSTEP_Master_Out[1940] = \<const0> ;
  assign LOCKSTEP_Master_Out[1941] = \<const0> ;
  assign LOCKSTEP_Master_Out[1942] = \<const0> ;
  assign LOCKSTEP_Master_Out[1943] = \<const0> ;
  assign LOCKSTEP_Master_Out[1944] = \<const0> ;
  assign LOCKSTEP_Master_Out[1945] = \<const0> ;
  assign LOCKSTEP_Master_Out[1946] = \<const0> ;
  assign LOCKSTEP_Master_Out[1947] = \<const0> ;
  assign LOCKSTEP_Master_Out[1948] = \<const0> ;
  assign LOCKSTEP_Master_Out[1949] = \<const0> ;
  assign LOCKSTEP_Master_Out[1950] = \<const0> ;
  assign LOCKSTEP_Master_Out[1951] = \<const0> ;
  assign LOCKSTEP_Master_Out[1952] = \<const0> ;
  assign LOCKSTEP_Master_Out[1953] = \<const0> ;
  assign LOCKSTEP_Master_Out[1954] = \<const0> ;
  assign LOCKSTEP_Master_Out[1955] = \<const0> ;
  assign LOCKSTEP_Master_Out[1956] = \<const0> ;
  assign LOCKSTEP_Master_Out[1957] = \<const0> ;
  assign LOCKSTEP_Master_Out[1958] = \<const0> ;
  assign LOCKSTEP_Master_Out[1959] = \<const0> ;
  assign LOCKSTEP_Master_Out[1960] = \<const0> ;
  assign LOCKSTEP_Master_Out[1961] = \<const0> ;
  assign LOCKSTEP_Master_Out[1962] = \<const0> ;
  assign LOCKSTEP_Master_Out[1963] = \<const0> ;
  assign LOCKSTEP_Master_Out[1964] = \<const0> ;
  assign LOCKSTEP_Master_Out[1965] = \<const0> ;
  assign LOCKSTEP_Master_Out[1966] = \<const0> ;
  assign LOCKSTEP_Master_Out[1967] = \<const0> ;
  assign LOCKSTEP_Master_Out[1968] = \<const0> ;
  assign LOCKSTEP_Master_Out[1969] = \<const0> ;
  assign LOCKSTEP_Master_Out[1970] = \<const0> ;
  assign LOCKSTEP_Master_Out[1971] = \<const0> ;
  assign LOCKSTEP_Master_Out[1972] = \<const0> ;
  assign LOCKSTEP_Master_Out[1973] = \<const0> ;
  assign LOCKSTEP_Master_Out[1974] = \<const0> ;
  assign LOCKSTEP_Master_Out[1975] = \<const0> ;
  assign LOCKSTEP_Master_Out[1976] = \<const0> ;
  assign LOCKSTEP_Master_Out[1977] = \<const0> ;
  assign LOCKSTEP_Master_Out[1978] = \<const0> ;
  assign LOCKSTEP_Master_Out[1979] = \<const0> ;
  assign LOCKSTEP_Master_Out[1980] = \<const0> ;
  assign LOCKSTEP_Master_Out[1981] = \<const0> ;
  assign LOCKSTEP_Master_Out[1982] = \<const0> ;
  assign LOCKSTEP_Master_Out[1983] = \<const0> ;
  assign LOCKSTEP_Master_Out[1984] = \<const0> ;
  assign LOCKSTEP_Master_Out[1985] = \<const0> ;
  assign LOCKSTEP_Master_Out[1986] = \<const0> ;
  assign LOCKSTEP_Master_Out[1987] = \<const0> ;
  assign LOCKSTEP_Master_Out[1988] = \<const0> ;
  assign LOCKSTEP_Master_Out[1989] = \<const0> ;
  assign LOCKSTEP_Master_Out[1990] = \<const0> ;
  assign LOCKSTEP_Master_Out[1991] = \<const0> ;
  assign LOCKSTEP_Master_Out[1992] = \<const0> ;
  assign LOCKSTEP_Master_Out[1993] = \<const0> ;
  assign LOCKSTEP_Master_Out[1994] = \<const0> ;
  assign LOCKSTEP_Master_Out[1995] = \<const0> ;
  assign LOCKSTEP_Master_Out[1996] = \<const0> ;
  assign LOCKSTEP_Master_Out[1997] = \<const0> ;
  assign LOCKSTEP_Master_Out[1998] = \<const0> ;
  assign LOCKSTEP_Master_Out[1999] = \<const0> ;
  assign LOCKSTEP_Master_Out[2000] = \<const0> ;
  assign LOCKSTEP_Master_Out[2001] = \<const0> ;
  assign LOCKSTEP_Master_Out[2002] = \<const0> ;
  assign LOCKSTEP_Master_Out[2003] = \<const0> ;
  assign LOCKSTEP_Master_Out[2004] = \<const0> ;
  assign LOCKSTEP_Master_Out[2005] = \<const0> ;
  assign LOCKSTEP_Master_Out[2006] = \<const0> ;
  assign LOCKSTEP_Master_Out[2007] = \<const0> ;
  assign LOCKSTEP_Master_Out[2008] = \<const0> ;
  assign LOCKSTEP_Master_Out[2009] = \<const0> ;
  assign LOCKSTEP_Master_Out[2010] = \<const0> ;
  assign LOCKSTEP_Master_Out[2011] = \<const0> ;
  assign LOCKSTEP_Master_Out[2012] = \<const0> ;
  assign LOCKSTEP_Master_Out[2013] = \<const0> ;
  assign LOCKSTEP_Master_Out[2014] = \<const0> ;
  assign LOCKSTEP_Master_Out[2015] = \<const0> ;
  assign LOCKSTEP_Master_Out[2016] = \<const0> ;
  assign LOCKSTEP_Master_Out[2017] = \<const0> ;
  assign LOCKSTEP_Master_Out[2018] = \<const0> ;
  assign LOCKSTEP_Master_Out[2019] = \<const0> ;
  assign LOCKSTEP_Master_Out[2020] = \<const0> ;
  assign LOCKSTEP_Master_Out[2021] = \<const0> ;
  assign LOCKSTEP_Master_Out[2022] = \<const0> ;
  assign LOCKSTEP_Master_Out[2023] = \<const0> ;
  assign LOCKSTEP_Master_Out[2024] = \<const0> ;
  assign LOCKSTEP_Master_Out[2025] = \<const0> ;
  assign LOCKSTEP_Master_Out[2026] = \<const0> ;
  assign LOCKSTEP_Master_Out[2027] = \<const0> ;
  assign LOCKSTEP_Master_Out[2028] = \<const0> ;
  assign LOCKSTEP_Master_Out[2029] = \<const0> ;
  assign LOCKSTEP_Master_Out[2030] = \<const0> ;
  assign LOCKSTEP_Master_Out[2031] = \<const0> ;
  assign LOCKSTEP_Master_Out[2032] = \<const0> ;
  assign LOCKSTEP_Master_Out[2033] = \<const0> ;
  assign LOCKSTEP_Master_Out[2034] = \<const0> ;
  assign LOCKSTEP_Master_Out[2035] = \<const0> ;
  assign LOCKSTEP_Master_Out[2036] = \<const0> ;
  assign LOCKSTEP_Master_Out[2037] = \<const0> ;
  assign LOCKSTEP_Master_Out[2038] = \<const0> ;
  assign LOCKSTEP_Master_Out[2039] = \<const0> ;
  assign LOCKSTEP_Master_Out[2040] = \<const0> ;
  assign LOCKSTEP_Master_Out[2041] = \<const0> ;
  assign LOCKSTEP_Master_Out[2042] = \<const0> ;
  assign LOCKSTEP_Master_Out[2043] = \<const0> ;
  assign LOCKSTEP_Master_Out[2044] = \<const0> ;
  assign LOCKSTEP_Master_Out[2045] = \<const0> ;
  assign LOCKSTEP_Master_Out[2046] = \<const0> ;
  assign LOCKSTEP_Master_Out[2047] = \<const0> ;
  assign LOCKSTEP_Master_Out[2048] = \<const0> ;
  assign LOCKSTEP_Master_Out[2049] = \<const0> ;
  assign LOCKSTEP_Master_Out[2050] = \<const0> ;
  assign LOCKSTEP_Master_Out[2051] = \<const0> ;
  assign LOCKSTEP_Master_Out[2052] = \<const0> ;
  assign LOCKSTEP_Master_Out[2053] = \<const0> ;
  assign LOCKSTEP_Master_Out[2054] = \<const0> ;
  assign LOCKSTEP_Master_Out[2055] = \<const0> ;
  assign LOCKSTEP_Master_Out[2056] = \<const0> ;
  assign LOCKSTEP_Master_Out[2057] = \<const0> ;
  assign LOCKSTEP_Master_Out[2058] = \<const0> ;
  assign LOCKSTEP_Master_Out[2059] = \<const0> ;
  assign LOCKSTEP_Master_Out[2060] = \<const0> ;
  assign LOCKSTEP_Master_Out[2061] = \<const0> ;
  assign LOCKSTEP_Master_Out[2062] = \<const0> ;
  assign LOCKSTEP_Master_Out[2063] = \<const0> ;
  assign LOCKSTEP_Master_Out[2064] = \<const0> ;
  assign LOCKSTEP_Master_Out[2065] = \<const0> ;
  assign LOCKSTEP_Master_Out[2066] = \<const0> ;
  assign LOCKSTEP_Master_Out[2067] = \<const0> ;
  assign LOCKSTEP_Master_Out[2068] = \<const0> ;
  assign LOCKSTEP_Master_Out[2069] = \<const0> ;
  assign LOCKSTEP_Master_Out[2070] = \<const0> ;
  assign LOCKSTEP_Master_Out[2071] = \<const0> ;
  assign LOCKSTEP_Master_Out[2072] = \<const0> ;
  assign LOCKSTEP_Master_Out[2073] = \<const0> ;
  assign LOCKSTEP_Master_Out[2074] = \<const0> ;
  assign LOCKSTEP_Master_Out[2075] = \<const0> ;
  assign LOCKSTEP_Master_Out[2076] = \<const0> ;
  assign LOCKSTEP_Master_Out[2077] = \<const0> ;
  assign LOCKSTEP_Master_Out[2078] = \<const0> ;
  assign LOCKSTEP_Master_Out[2079] = \<const0> ;
  assign LOCKSTEP_Master_Out[2080] = \<const0> ;
  assign LOCKSTEP_Master_Out[2081] = \<const0> ;
  assign LOCKSTEP_Master_Out[2082] = \<const0> ;
  assign LOCKSTEP_Master_Out[2083] = \<const0> ;
  assign LOCKSTEP_Master_Out[2084] = \<const0> ;
  assign LOCKSTEP_Master_Out[2085] = \<const0> ;
  assign LOCKSTEP_Master_Out[2086] = \<const0> ;
  assign LOCKSTEP_Master_Out[2087] = \<const0> ;
  assign LOCKSTEP_Master_Out[2088] = \<const0> ;
  assign LOCKSTEP_Master_Out[2089] = \<const0> ;
  assign LOCKSTEP_Master_Out[2090] = \<const0> ;
  assign LOCKSTEP_Master_Out[2091] = \<const0> ;
  assign LOCKSTEP_Master_Out[2092] = \<const0> ;
  assign LOCKSTEP_Master_Out[2093] = \<const0> ;
  assign LOCKSTEP_Master_Out[2094] = \<const0> ;
  assign LOCKSTEP_Master_Out[2095] = \<const0> ;
  assign LOCKSTEP_Master_Out[2096] = \<const0> ;
  assign LOCKSTEP_Master_Out[2097] = \<const0> ;
  assign LOCKSTEP_Master_Out[2098] = \<const0> ;
  assign LOCKSTEP_Master_Out[2099] = \<const0> ;
  assign LOCKSTEP_Master_Out[2100] = \<const0> ;
  assign LOCKSTEP_Master_Out[2101] = \<const0> ;
  assign LOCKSTEP_Master_Out[2102] = \<const0> ;
  assign LOCKSTEP_Master_Out[2103] = \<const0> ;
  assign LOCKSTEP_Master_Out[2104] = \<const0> ;
  assign LOCKSTEP_Master_Out[2105] = \<const0> ;
  assign LOCKSTEP_Master_Out[2106] = \<const0> ;
  assign LOCKSTEP_Master_Out[2107] = \<const0> ;
  assign LOCKSTEP_Master_Out[2108] = \<const0> ;
  assign LOCKSTEP_Master_Out[2109] = \<const0> ;
  assign LOCKSTEP_Master_Out[2110] = \<const0> ;
  assign LOCKSTEP_Master_Out[2111] = \<const0> ;
  assign LOCKSTEP_Master_Out[2112] = \<const0> ;
  assign LOCKSTEP_Master_Out[2113] = \<const0> ;
  assign LOCKSTEP_Master_Out[2114] = \<const0> ;
  assign LOCKSTEP_Master_Out[2115] = \<const0> ;
  assign LOCKSTEP_Master_Out[2116] = \<const0> ;
  assign LOCKSTEP_Master_Out[2117] = \<const0> ;
  assign LOCKSTEP_Master_Out[2118] = \<const0> ;
  assign LOCKSTEP_Master_Out[2119] = \<const0> ;
  assign LOCKSTEP_Master_Out[2120] = \<const0> ;
  assign LOCKSTEP_Master_Out[2121] = \<const0> ;
  assign LOCKSTEP_Master_Out[2122] = \<const0> ;
  assign LOCKSTEP_Master_Out[2123] = \<const0> ;
  assign LOCKSTEP_Master_Out[2124] = \<const0> ;
  assign LOCKSTEP_Master_Out[2125] = \<const0> ;
  assign LOCKSTEP_Master_Out[2126] = \<const0> ;
  assign LOCKSTEP_Master_Out[2127] = \<const0> ;
  assign LOCKSTEP_Master_Out[2128] = \<const0> ;
  assign LOCKSTEP_Master_Out[2129] = \<const0> ;
  assign LOCKSTEP_Master_Out[2130] = \<const0> ;
  assign LOCKSTEP_Master_Out[2131] = \<const0> ;
  assign LOCKSTEP_Master_Out[2132] = \<const0> ;
  assign LOCKSTEP_Master_Out[2133] = \<const0> ;
  assign LOCKSTEP_Master_Out[2134] = \<const0> ;
  assign LOCKSTEP_Master_Out[2135] = \<const0> ;
  assign LOCKSTEP_Master_Out[2136] = \<const0> ;
  assign LOCKSTEP_Master_Out[2137] = \<const0> ;
  assign LOCKSTEP_Master_Out[2138] = \<const0> ;
  assign LOCKSTEP_Master_Out[2139] = \<const0> ;
  assign LOCKSTEP_Master_Out[2140] = \<const0> ;
  assign LOCKSTEP_Master_Out[2141] = \<const0> ;
  assign LOCKSTEP_Master_Out[2142] = \<const0> ;
  assign LOCKSTEP_Master_Out[2143] = \<const0> ;
  assign LOCKSTEP_Master_Out[2144] = \<const0> ;
  assign LOCKSTEP_Master_Out[2145] = \<const0> ;
  assign LOCKSTEP_Master_Out[2146] = \<const0> ;
  assign LOCKSTEP_Master_Out[2147] = \<const0> ;
  assign LOCKSTEP_Master_Out[2148] = \<const0> ;
  assign LOCKSTEP_Master_Out[2149] = \<const0> ;
  assign LOCKSTEP_Master_Out[2150] = \<const0> ;
  assign LOCKSTEP_Master_Out[2151] = \<const0> ;
  assign LOCKSTEP_Master_Out[2152] = \<const0> ;
  assign LOCKSTEP_Master_Out[2153] = \<const0> ;
  assign LOCKSTEP_Master_Out[2154] = \<const0> ;
  assign LOCKSTEP_Master_Out[2155] = \<const0> ;
  assign LOCKSTEP_Master_Out[2156] = \<const0> ;
  assign LOCKSTEP_Master_Out[2157] = \<const0> ;
  assign LOCKSTEP_Master_Out[2158] = \<const0> ;
  assign LOCKSTEP_Master_Out[2159] = \<const0> ;
  assign LOCKSTEP_Master_Out[2160] = \<const0> ;
  assign LOCKSTEP_Master_Out[2161] = \<const0> ;
  assign LOCKSTEP_Master_Out[2162] = \<const0> ;
  assign LOCKSTEP_Master_Out[2163] = \<const0> ;
  assign LOCKSTEP_Master_Out[2164] = \<const0> ;
  assign LOCKSTEP_Master_Out[2165] = \<const0> ;
  assign LOCKSTEP_Master_Out[2166] = \<const0> ;
  assign LOCKSTEP_Master_Out[2167] = \<const0> ;
  assign LOCKSTEP_Master_Out[2168] = \<const0> ;
  assign LOCKSTEP_Master_Out[2169] = \<const0> ;
  assign LOCKSTEP_Master_Out[2170] = \<const0> ;
  assign LOCKSTEP_Master_Out[2171] = \<const0> ;
  assign LOCKSTEP_Master_Out[2172] = \<const0> ;
  assign LOCKSTEP_Master_Out[2173] = \<const0> ;
  assign LOCKSTEP_Master_Out[2174] = \<const0> ;
  assign LOCKSTEP_Master_Out[2175] = \<const0> ;
  assign LOCKSTEP_Master_Out[2176] = \<const0> ;
  assign LOCKSTEP_Master_Out[2177] = \<const0> ;
  assign LOCKSTEP_Master_Out[2178] = \<const0> ;
  assign LOCKSTEP_Master_Out[2179] = \<const0> ;
  assign LOCKSTEP_Master_Out[2180] = \<const0> ;
  assign LOCKSTEP_Master_Out[2181] = \<const0> ;
  assign LOCKSTEP_Master_Out[2182] = \<const0> ;
  assign LOCKSTEP_Master_Out[2183] = \<const0> ;
  assign LOCKSTEP_Master_Out[2184] = \<const0> ;
  assign LOCKSTEP_Master_Out[2185] = \<const0> ;
  assign LOCKSTEP_Master_Out[2186] = \<const0> ;
  assign LOCKSTEP_Master_Out[2187] = \<const0> ;
  assign LOCKSTEP_Master_Out[2188] = \<const0> ;
  assign LOCKSTEP_Master_Out[2189] = \<const0> ;
  assign LOCKSTEP_Master_Out[2190] = \<const0> ;
  assign LOCKSTEP_Master_Out[2191] = \<const0> ;
  assign LOCKSTEP_Master_Out[2192] = \<const0> ;
  assign LOCKSTEP_Master_Out[2193] = \<const0> ;
  assign LOCKSTEP_Master_Out[2194] = \<const0> ;
  assign LOCKSTEP_Master_Out[2195] = \<const0> ;
  assign LOCKSTEP_Master_Out[2196] = \<const0> ;
  assign LOCKSTEP_Master_Out[2197] = \<const0> ;
  assign LOCKSTEP_Master_Out[2198] = \<const0> ;
  assign LOCKSTEP_Master_Out[2199] = \<const0> ;
  assign LOCKSTEP_Master_Out[2200] = \<const0> ;
  assign LOCKSTEP_Master_Out[2201] = \<const0> ;
  assign LOCKSTEP_Master_Out[2202] = \<const0> ;
  assign LOCKSTEP_Master_Out[2203] = \<const0> ;
  assign LOCKSTEP_Master_Out[2204] = \<const0> ;
  assign LOCKSTEP_Master_Out[2205] = \<const0> ;
  assign LOCKSTEP_Master_Out[2206] = \<const0> ;
  assign LOCKSTEP_Master_Out[2207] = \<const0> ;
  assign LOCKSTEP_Master_Out[2208] = \<const0> ;
  assign LOCKSTEP_Master_Out[2209] = \<const0> ;
  assign LOCKSTEP_Master_Out[2210] = \<const0> ;
  assign LOCKSTEP_Master_Out[2211] = \<const0> ;
  assign LOCKSTEP_Master_Out[2212] = \<const0> ;
  assign LOCKSTEP_Master_Out[2213] = \<const0> ;
  assign LOCKSTEP_Master_Out[2214] = \<const0> ;
  assign LOCKSTEP_Master_Out[2215] = \<const0> ;
  assign LOCKSTEP_Master_Out[2216] = \<const0> ;
  assign LOCKSTEP_Master_Out[2217] = \<const0> ;
  assign LOCKSTEP_Master_Out[2218] = \<const0> ;
  assign LOCKSTEP_Master_Out[2219] = \<const0> ;
  assign LOCKSTEP_Master_Out[2220] = \<const0> ;
  assign LOCKSTEP_Master_Out[2221] = \<const0> ;
  assign LOCKSTEP_Master_Out[2222] = \<const0> ;
  assign LOCKSTEP_Master_Out[2223] = \<const0> ;
  assign LOCKSTEP_Master_Out[2224] = \<const0> ;
  assign LOCKSTEP_Master_Out[2225] = \<const0> ;
  assign LOCKSTEP_Master_Out[2226] = \<const0> ;
  assign LOCKSTEP_Master_Out[2227] = \<const0> ;
  assign LOCKSTEP_Master_Out[2228] = \<const0> ;
  assign LOCKSTEP_Master_Out[2229] = \<const0> ;
  assign LOCKSTEP_Master_Out[2230] = \<const0> ;
  assign LOCKSTEP_Master_Out[2231] = \<const0> ;
  assign LOCKSTEP_Master_Out[2232] = \<const0> ;
  assign LOCKSTEP_Master_Out[2233] = \<const0> ;
  assign LOCKSTEP_Master_Out[2234] = \<const0> ;
  assign LOCKSTEP_Master_Out[2235] = \<const0> ;
  assign LOCKSTEP_Master_Out[2236] = \<const0> ;
  assign LOCKSTEP_Master_Out[2237] = \<const0> ;
  assign LOCKSTEP_Master_Out[2238] = \<const0> ;
  assign LOCKSTEP_Master_Out[2239] = \<const0> ;
  assign LOCKSTEP_Master_Out[2240] = \<const0> ;
  assign LOCKSTEP_Master_Out[2241] = \<const0> ;
  assign LOCKSTEP_Master_Out[2242] = \<const0> ;
  assign LOCKSTEP_Master_Out[2243] = \<const0> ;
  assign LOCKSTEP_Master_Out[2244] = \<const0> ;
  assign LOCKSTEP_Master_Out[2245] = \<const0> ;
  assign LOCKSTEP_Master_Out[2246] = \<const0> ;
  assign LOCKSTEP_Master_Out[2247] = \<const0> ;
  assign LOCKSTEP_Master_Out[2248] = \<const0> ;
  assign LOCKSTEP_Master_Out[2249] = \<const0> ;
  assign LOCKSTEP_Master_Out[2250] = \<const0> ;
  assign LOCKSTEP_Master_Out[2251] = \<const0> ;
  assign LOCKSTEP_Master_Out[2252] = \<const0> ;
  assign LOCKSTEP_Master_Out[2253] = \<const0> ;
  assign LOCKSTEP_Master_Out[2254] = \<const0> ;
  assign LOCKSTEP_Master_Out[2255] = \<const0> ;
  assign LOCKSTEP_Master_Out[2256] = \<const0> ;
  assign LOCKSTEP_Master_Out[2257] = \<const0> ;
  assign LOCKSTEP_Master_Out[2258] = \<const0> ;
  assign LOCKSTEP_Master_Out[2259] = \<const0> ;
  assign LOCKSTEP_Master_Out[2260] = \<const0> ;
  assign LOCKSTEP_Master_Out[2261] = \<const0> ;
  assign LOCKSTEP_Master_Out[2262] = \<const0> ;
  assign LOCKSTEP_Master_Out[2263] = \<const0> ;
  assign LOCKSTEP_Master_Out[2264] = \<const0> ;
  assign LOCKSTEP_Master_Out[2265] = \<const0> ;
  assign LOCKSTEP_Master_Out[2266] = \<const0> ;
  assign LOCKSTEP_Master_Out[2267] = \<const0> ;
  assign LOCKSTEP_Master_Out[2268] = \<const0> ;
  assign LOCKSTEP_Master_Out[2269] = \<const0> ;
  assign LOCKSTEP_Master_Out[2270] = \<const0> ;
  assign LOCKSTEP_Master_Out[2271] = \<const0> ;
  assign LOCKSTEP_Master_Out[2272] = \<const0> ;
  assign LOCKSTEP_Master_Out[2273] = \<const0> ;
  assign LOCKSTEP_Master_Out[2274] = \<const0> ;
  assign LOCKSTEP_Master_Out[2275] = \<const0> ;
  assign LOCKSTEP_Master_Out[2276] = \<const0> ;
  assign LOCKSTEP_Master_Out[2277] = \<const0> ;
  assign LOCKSTEP_Master_Out[2278] = \<const0> ;
  assign LOCKSTEP_Master_Out[2279] = \<const0> ;
  assign LOCKSTEP_Master_Out[2280] = \<const0> ;
  assign LOCKSTEP_Master_Out[2281] = \<const0> ;
  assign LOCKSTEP_Master_Out[2282] = \<const0> ;
  assign LOCKSTEP_Master_Out[2283] = \<const0> ;
  assign LOCKSTEP_Master_Out[2284] = \<const0> ;
  assign LOCKSTEP_Master_Out[2285] = \<const0> ;
  assign LOCKSTEP_Master_Out[2286] = \<const0> ;
  assign LOCKSTEP_Master_Out[2287] = \<const0> ;
  assign LOCKSTEP_Master_Out[2288] = \<const0> ;
  assign LOCKSTEP_Master_Out[2289] = \<const0> ;
  assign LOCKSTEP_Master_Out[2290] = \<const0> ;
  assign LOCKSTEP_Master_Out[2291] = \<const0> ;
  assign LOCKSTEP_Master_Out[2292] = \<const0> ;
  assign LOCKSTEP_Master_Out[2293] = \<const0> ;
  assign LOCKSTEP_Master_Out[2294] = \<const0> ;
  assign LOCKSTEP_Master_Out[2295] = \<const0> ;
  assign LOCKSTEP_Master_Out[2296] = \<const0> ;
  assign LOCKSTEP_Master_Out[2297] = \<const0> ;
  assign LOCKSTEP_Master_Out[2298] = \<const0> ;
  assign LOCKSTEP_Master_Out[2299] = \<const0> ;
  assign LOCKSTEP_Master_Out[2300] = \<const0> ;
  assign LOCKSTEP_Master_Out[2301] = \<const0> ;
  assign LOCKSTEP_Master_Out[2302] = \<const0> ;
  assign LOCKSTEP_Master_Out[2303] = \<const0> ;
  assign LOCKSTEP_Master_Out[2304] = \<const0> ;
  assign LOCKSTEP_Master_Out[2305] = \<const0> ;
  assign LOCKSTEP_Master_Out[2306] = \<const0> ;
  assign LOCKSTEP_Master_Out[2307] = \<const0> ;
  assign LOCKSTEP_Master_Out[2308] = \<const0> ;
  assign LOCKSTEP_Master_Out[2309] = \<const0> ;
  assign LOCKSTEP_Master_Out[2310] = \<const0> ;
  assign LOCKSTEP_Master_Out[2311] = \<const0> ;
  assign LOCKSTEP_Master_Out[2312] = \<const0> ;
  assign LOCKSTEP_Master_Out[2313] = \<const0> ;
  assign LOCKSTEP_Master_Out[2314] = \<const0> ;
  assign LOCKSTEP_Master_Out[2315] = \<const0> ;
  assign LOCKSTEP_Master_Out[2316] = \<const0> ;
  assign LOCKSTEP_Master_Out[2317] = \<const0> ;
  assign LOCKSTEP_Master_Out[2318] = \<const0> ;
  assign LOCKSTEP_Master_Out[2319] = \<const0> ;
  assign LOCKSTEP_Master_Out[2320] = \<const0> ;
  assign LOCKSTEP_Master_Out[2321] = \<const0> ;
  assign LOCKSTEP_Master_Out[2322] = \<const0> ;
  assign LOCKSTEP_Master_Out[2323] = \<const0> ;
  assign LOCKSTEP_Master_Out[2324] = \<const0> ;
  assign LOCKSTEP_Master_Out[2325] = \<const0> ;
  assign LOCKSTEP_Master_Out[2326] = \<const0> ;
  assign LOCKSTEP_Master_Out[2327] = \<const0> ;
  assign LOCKSTEP_Master_Out[2328] = \<const0> ;
  assign LOCKSTEP_Master_Out[2329] = \<const0> ;
  assign LOCKSTEP_Master_Out[2330] = \<const0> ;
  assign LOCKSTEP_Master_Out[2331] = \<const0> ;
  assign LOCKSTEP_Master_Out[2332] = \<const0> ;
  assign LOCKSTEP_Master_Out[2333] = \<const0> ;
  assign LOCKSTEP_Master_Out[2334] = \<const0> ;
  assign LOCKSTEP_Master_Out[2335] = \<const0> ;
  assign LOCKSTEP_Master_Out[2336] = \<const0> ;
  assign LOCKSTEP_Master_Out[2337] = \<const0> ;
  assign LOCKSTEP_Master_Out[2338] = \<const0> ;
  assign LOCKSTEP_Master_Out[2339] = \<const0> ;
  assign LOCKSTEP_Master_Out[2340] = \<const0> ;
  assign LOCKSTEP_Master_Out[2341] = \<const0> ;
  assign LOCKSTEP_Master_Out[2342] = \<const0> ;
  assign LOCKSTEP_Master_Out[2343] = \<const0> ;
  assign LOCKSTEP_Master_Out[2344] = \<const0> ;
  assign LOCKSTEP_Master_Out[2345] = \<const0> ;
  assign LOCKSTEP_Master_Out[2346] = \<const0> ;
  assign LOCKSTEP_Master_Out[2347] = \<const0> ;
  assign LOCKSTEP_Master_Out[2348] = \<const0> ;
  assign LOCKSTEP_Master_Out[2349] = \<const0> ;
  assign LOCKSTEP_Master_Out[2350] = \<const0> ;
  assign LOCKSTEP_Master_Out[2351] = \<const0> ;
  assign LOCKSTEP_Master_Out[2352] = \<const0> ;
  assign LOCKSTEP_Master_Out[2353] = \<const0> ;
  assign LOCKSTEP_Master_Out[2354] = \<const0> ;
  assign LOCKSTEP_Master_Out[2355] = \<const0> ;
  assign LOCKSTEP_Master_Out[2356] = \<const0> ;
  assign LOCKSTEP_Master_Out[2357] = \<const0> ;
  assign LOCKSTEP_Master_Out[2358] = \<const0> ;
  assign LOCKSTEP_Master_Out[2359] = \<const0> ;
  assign LOCKSTEP_Master_Out[2360] = \<const0> ;
  assign LOCKSTEP_Master_Out[2361] = \<const0> ;
  assign LOCKSTEP_Master_Out[2362] = \<const0> ;
  assign LOCKSTEP_Master_Out[2363] = \<const0> ;
  assign LOCKSTEP_Master_Out[2364] = \<const0> ;
  assign LOCKSTEP_Master_Out[2365] = \<const0> ;
  assign LOCKSTEP_Master_Out[2366] = \<const0> ;
  assign LOCKSTEP_Master_Out[2367] = \<const0> ;
  assign LOCKSTEP_Master_Out[2368] = \<const0> ;
  assign LOCKSTEP_Master_Out[2369] = \<const0> ;
  assign LOCKSTEP_Master_Out[2370] = \<const0> ;
  assign LOCKSTEP_Master_Out[2371] = \<const0> ;
  assign LOCKSTEP_Master_Out[2372] = \<const0> ;
  assign LOCKSTEP_Master_Out[2373] = \<const0> ;
  assign LOCKSTEP_Master_Out[2374] = \<const0> ;
  assign LOCKSTEP_Master_Out[2375] = \<const0> ;
  assign LOCKSTEP_Master_Out[2376] = \<const0> ;
  assign LOCKSTEP_Master_Out[2377] = \<const0> ;
  assign LOCKSTEP_Master_Out[2378] = \<const0> ;
  assign LOCKSTEP_Master_Out[2379] = \<const0> ;
  assign LOCKSTEP_Master_Out[2380] = \<const0> ;
  assign LOCKSTEP_Master_Out[2381] = \<const0> ;
  assign LOCKSTEP_Master_Out[2382] = \<const0> ;
  assign LOCKSTEP_Master_Out[2383] = \<const0> ;
  assign LOCKSTEP_Master_Out[2384] = \<const0> ;
  assign LOCKSTEP_Master_Out[2385] = \<const0> ;
  assign LOCKSTEP_Master_Out[2386] = \<const0> ;
  assign LOCKSTEP_Master_Out[2387] = \<const0> ;
  assign LOCKSTEP_Master_Out[2388] = \<const0> ;
  assign LOCKSTEP_Master_Out[2389] = \<const0> ;
  assign LOCKSTEP_Master_Out[2390] = \<const0> ;
  assign LOCKSTEP_Master_Out[2391] = \<const0> ;
  assign LOCKSTEP_Master_Out[2392] = \<const0> ;
  assign LOCKSTEP_Master_Out[2393] = \<const0> ;
  assign LOCKSTEP_Master_Out[2394] = \<const0> ;
  assign LOCKSTEP_Master_Out[2395] = \<const0> ;
  assign LOCKSTEP_Master_Out[2396] = \<const0> ;
  assign LOCKSTEP_Master_Out[2397] = \<const0> ;
  assign LOCKSTEP_Master_Out[2398] = \<const0> ;
  assign LOCKSTEP_Master_Out[2399] = \<const0> ;
  assign LOCKSTEP_Master_Out[2400] = \<const0> ;
  assign LOCKSTEP_Master_Out[2401] = \<const0> ;
  assign LOCKSTEP_Master_Out[2402] = \<const0> ;
  assign LOCKSTEP_Master_Out[2403] = \<const0> ;
  assign LOCKSTEP_Master_Out[2404] = \<const0> ;
  assign LOCKSTEP_Master_Out[2405] = \<const0> ;
  assign LOCKSTEP_Master_Out[2406] = \<const0> ;
  assign LOCKSTEP_Master_Out[2407] = \<const0> ;
  assign LOCKSTEP_Master_Out[2408] = \<const0> ;
  assign LOCKSTEP_Master_Out[2409] = \<const0> ;
  assign LOCKSTEP_Master_Out[2410] = \<const0> ;
  assign LOCKSTEP_Master_Out[2411] = \<const0> ;
  assign LOCKSTEP_Master_Out[2412] = \<const0> ;
  assign LOCKSTEP_Master_Out[2413] = \<const0> ;
  assign LOCKSTEP_Master_Out[2414] = \<const0> ;
  assign LOCKSTEP_Master_Out[2415] = \<const0> ;
  assign LOCKSTEP_Master_Out[2416] = \<const0> ;
  assign LOCKSTEP_Master_Out[2417] = \<const0> ;
  assign LOCKSTEP_Master_Out[2418] = \<const0> ;
  assign LOCKSTEP_Master_Out[2419] = \<const0> ;
  assign LOCKSTEP_Master_Out[2420] = \<const0> ;
  assign LOCKSTEP_Master_Out[2421] = \<const0> ;
  assign LOCKSTEP_Master_Out[2422] = \<const0> ;
  assign LOCKSTEP_Master_Out[2423] = \<const0> ;
  assign LOCKSTEP_Master_Out[2424] = \<const0> ;
  assign LOCKSTEP_Master_Out[2425] = \<const0> ;
  assign LOCKSTEP_Master_Out[2426] = \<const0> ;
  assign LOCKSTEP_Master_Out[2427] = \<const0> ;
  assign LOCKSTEP_Master_Out[2428] = \<const0> ;
  assign LOCKSTEP_Master_Out[2429] = \<const0> ;
  assign LOCKSTEP_Master_Out[2430] = \<const0> ;
  assign LOCKSTEP_Master_Out[2431] = \<const0> ;
  assign LOCKSTEP_Master_Out[2432] = \<const0> ;
  assign LOCKSTEP_Master_Out[2433] = \<const0> ;
  assign LOCKSTEP_Master_Out[2434] = \<const0> ;
  assign LOCKSTEP_Master_Out[2435] = \<const0> ;
  assign LOCKSTEP_Master_Out[2436] = \<const0> ;
  assign LOCKSTEP_Master_Out[2437] = \<const0> ;
  assign LOCKSTEP_Master_Out[2438] = \<const0> ;
  assign LOCKSTEP_Master_Out[2439] = \<const0> ;
  assign LOCKSTEP_Master_Out[2440] = \<const0> ;
  assign LOCKSTEP_Master_Out[2441] = \<const0> ;
  assign LOCKSTEP_Master_Out[2442] = \<const0> ;
  assign LOCKSTEP_Master_Out[2443] = \<const0> ;
  assign LOCKSTEP_Master_Out[2444] = \<const0> ;
  assign LOCKSTEP_Master_Out[2445] = \<const0> ;
  assign LOCKSTEP_Master_Out[2446] = \<const0> ;
  assign LOCKSTEP_Master_Out[2447] = \<const0> ;
  assign LOCKSTEP_Master_Out[2448] = \<const0> ;
  assign LOCKSTEP_Master_Out[2449] = \<const0> ;
  assign LOCKSTEP_Master_Out[2450] = \<const0> ;
  assign LOCKSTEP_Master_Out[2451] = \<const0> ;
  assign LOCKSTEP_Master_Out[2452] = \<const0> ;
  assign LOCKSTEP_Master_Out[2453] = \<const0> ;
  assign LOCKSTEP_Master_Out[2454] = \<const0> ;
  assign LOCKSTEP_Master_Out[2455] = \<const0> ;
  assign LOCKSTEP_Master_Out[2456] = \<const0> ;
  assign LOCKSTEP_Master_Out[2457] = \<const0> ;
  assign LOCKSTEP_Master_Out[2458] = \<const0> ;
  assign LOCKSTEP_Master_Out[2459] = \<const0> ;
  assign LOCKSTEP_Master_Out[2460] = \<const0> ;
  assign LOCKSTEP_Master_Out[2461] = \<const0> ;
  assign LOCKSTEP_Master_Out[2462] = \<const0> ;
  assign LOCKSTEP_Master_Out[2463] = \<const0> ;
  assign LOCKSTEP_Master_Out[2464] = \<const0> ;
  assign LOCKSTEP_Master_Out[2465] = \<const0> ;
  assign LOCKSTEP_Master_Out[2466] = \<const0> ;
  assign LOCKSTEP_Master_Out[2467] = \<const0> ;
  assign LOCKSTEP_Master_Out[2468] = \<const0> ;
  assign LOCKSTEP_Master_Out[2469] = \<const0> ;
  assign LOCKSTEP_Master_Out[2470] = \<const0> ;
  assign LOCKSTEP_Master_Out[2471] = \<const0> ;
  assign LOCKSTEP_Master_Out[2472] = \<const0> ;
  assign LOCKSTEP_Master_Out[2473] = \<const0> ;
  assign LOCKSTEP_Master_Out[2474] = \<const0> ;
  assign LOCKSTEP_Master_Out[2475] = \<const0> ;
  assign LOCKSTEP_Master_Out[2476] = \<const0> ;
  assign LOCKSTEP_Master_Out[2477] = \<const0> ;
  assign LOCKSTEP_Master_Out[2478] = \<const0> ;
  assign LOCKSTEP_Master_Out[2479] = \<const0> ;
  assign LOCKSTEP_Master_Out[2480] = \<const0> ;
  assign LOCKSTEP_Master_Out[2481] = \<const0> ;
  assign LOCKSTEP_Master_Out[2482] = \<const0> ;
  assign LOCKSTEP_Master_Out[2483] = \<const0> ;
  assign LOCKSTEP_Master_Out[2484] = \<const0> ;
  assign LOCKSTEP_Master_Out[2485] = \<const0> ;
  assign LOCKSTEP_Master_Out[2486] = \<const0> ;
  assign LOCKSTEP_Master_Out[2487] = \<const0> ;
  assign LOCKSTEP_Master_Out[2488] = \<const0> ;
  assign LOCKSTEP_Master_Out[2489] = \<const0> ;
  assign LOCKSTEP_Master_Out[2490] = \<const0> ;
  assign LOCKSTEP_Master_Out[2491] = \<const0> ;
  assign LOCKSTEP_Master_Out[2492] = \<const0> ;
  assign LOCKSTEP_Master_Out[2493] = \<const0> ;
  assign LOCKSTEP_Master_Out[2494] = \<const0> ;
  assign LOCKSTEP_Master_Out[2495] = \<const0> ;
  assign LOCKSTEP_Master_Out[2496] = \<const0> ;
  assign LOCKSTEP_Master_Out[2497] = \<const0> ;
  assign LOCKSTEP_Master_Out[2498] = \<const0> ;
  assign LOCKSTEP_Master_Out[2499] = \<const0> ;
  assign LOCKSTEP_Master_Out[2500] = \<const0> ;
  assign LOCKSTEP_Master_Out[2501] = \<const0> ;
  assign LOCKSTEP_Master_Out[2502] = \<const0> ;
  assign LOCKSTEP_Master_Out[2503] = \<const0> ;
  assign LOCKSTEP_Master_Out[2504] = \<const0> ;
  assign LOCKSTEP_Master_Out[2505] = \<const0> ;
  assign LOCKSTEP_Master_Out[2506] = \<const0> ;
  assign LOCKSTEP_Master_Out[2507] = \<const0> ;
  assign LOCKSTEP_Master_Out[2508] = \<const0> ;
  assign LOCKSTEP_Master_Out[2509] = \<const0> ;
  assign LOCKSTEP_Master_Out[2510] = \<const0> ;
  assign LOCKSTEP_Master_Out[2511] = \<const0> ;
  assign LOCKSTEP_Master_Out[2512] = \<const0> ;
  assign LOCKSTEP_Master_Out[2513] = \<const0> ;
  assign LOCKSTEP_Master_Out[2514] = \<const0> ;
  assign LOCKSTEP_Master_Out[2515] = \<const0> ;
  assign LOCKSTEP_Master_Out[2516] = \<const0> ;
  assign LOCKSTEP_Master_Out[2517] = \<const0> ;
  assign LOCKSTEP_Master_Out[2518] = \<const0> ;
  assign LOCKSTEP_Master_Out[2519] = \<const0> ;
  assign LOCKSTEP_Master_Out[2520] = \<const0> ;
  assign LOCKSTEP_Master_Out[2521] = \<const0> ;
  assign LOCKSTEP_Master_Out[2522] = \<const0> ;
  assign LOCKSTEP_Master_Out[2523] = \<const0> ;
  assign LOCKSTEP_Master_Out[2524] = \<const0> ;
  assign LOCKSTEP_Master_Out[2525] = \<const0> ;
  assign LOCKSTEP_Master_Out[2526] = \<const0> ;
  assign LOCKSTEP_Master_Out[2527] = \<const0> ;
  assign LOCKSTEP_Master_Out[2528] = \<const0> ;
  assign LOCKSTEP_Master_Out[2529] = \<const0> ;
  assign LOCKSTEP_Master_Out[2530] = \<const0> ;
  assign LOCKSTEP_Master_Out[2531] = \<const0> ;
  assign LOCKSTEP_Master_Out[2532] = \<const0> ;
  assign LOCKSTEP_Master_Out[2533] = \<const0> ;
  assign LOCKSTEP_Master_Out[2534] = \<const0> ;
  assign LOCKSTEP_Master_Out[2535] = \<const0> ;
  assign LOCKSTEP_Master_Out[2536] = \<const0> ;
  assign LOCKSTEP_Master_Out[2537] = \<const0> ;
  assign LOCKSTEP_Master_Out[2538] = \<const0> ;
  assign LOCKSTEP_Master_Out[2539] = \<const0> ;
  assign LOCKSTEP_Master_Out[2540] = \<const0> ;
  assign LOCKSTEP_Master_Out[2541] = \<const0> ;
  assign LOCKSTEP_Master_Out[2542] = \<const0> ;
  assign LOCKSTEP_Master_Out[2543] = \<const0> ;
  assign LOCKSTEP_Master_Out[2544] = \<const0> ;
  assign LOCKSTEP_Master_Out[2545] = \<const0> ;
  assign LOCKSTEP_Master_Out[2546] = \<const0> ;
  assign LOCKSTEP_Master_Out[2547] = \<const0> ;
  assign LOCKSTEP_Master_Out[2548] = \<const0> ;
  assign LOCKSTEP_Master_Out[2549] = \<const0> ;
  assign LOCKSTEP_Master_Out[2550] = \<const0> ;
  assign LOCKSTEP_Master_Out[2551] = \<const0> ;
  assign LOCKSTEP_Master_Out[2552] = \<const0> ;
  assign LOCKSTEP_Master_Out[2553] = \<const0> ;
  assign LOCKSTEP_Master_Out[2554] = \<const0> ;
  assign LOCKSTEP_Master_Out[2555] = \<const0> ;
  assign LOCKSTEP_Master_Out[2556] = \<const0> ;
  assign LOCKSTEP_Master_Out[2557] = \<const0> ;
  assign LOCKSTEP_Master_Out[2558] = \<const0> ;
  assign LOCKSTEP_Master_Out[2559] = \<const0> ;
  assign LOCKSTEP_Master_Out[2560] = \<const0> ;
  assign LOCKSTEP_Master_Out[2561] = \<const0> ;
  assign LOCKSTEP_Master_Out[2562] = \<const0> ;
  assign LOCKSTEP_Master_Out[2563] = \<const0> ;
  assign LOCKSTEP_Master_Out[2564] = \<const0> ;
  assign LOCKSTEP_Master_Out[2565] = \<const0> ;
  assign LOCKSTEP_Master_Out[2566] = \<const0> ;
  assign LOCKSTEP_Master_Out[2567] = \<const0> ;
  assign LOCKSTEP_Master_Out[2568] = \<const0> ;
  assign LOCKSTEP_Master_Out[2569] = \<const0> ;
  assign LOCKSTEP_Master_Out[2570] = \<const0> ;
  assign LOCKSTEP_Master_Out[2571] = \<const0> ;
  assign LOCKSTEP_Master_Out[2572] = \<const0> ;
  assign LOCKSTEP_Master_Out[2573] = \<const0> ;
  assign LOCKSTEP_Master_Out[2574] = \<const0> ;
  assign LOCKSTEP_Master_Out[2575] = \<const0> ;
  assign LOCKSTEP_Master_Out[2576] = \<const0> ;
  assign LOCKSTEP_Master_Out[2577] = \<const0> ;
  assign LOCKSTEP_Master_Out[2578] = \<const0> ;
  assign LOCKSTEP_Master_Out[2579] = \<const0> ;
  assign LOCKSTEP_Master_Out[2580] = \<const0> ;
  assign LOCKSTEP_Master_Out[2581] = \<const0> ;
  assign LOCKSTEP_Master_Out[2582] = \<const0> ;
  assign LOCKSTEP_Master_Out[2583] = \<const0> ;
  assign LOCKSTEP_Master_Out[2584] = \<const0> ;
  assign LOCKSTEP_Master_Out[2585] = \<const0> ;
  assign LOCKSTEP_Master_Out[2586] = \<const0> ;
  assign LOCKSTEP_Master_Out[2587] = \<const0> ;
  assign LOCKSTEP_Master_Out[2588] = \<const0> ;
  assign LOCKSTEP_Master_Out[2589] = \<const0> ;
  assign LOCKSTEP_Master_Out[2590] = \<const0> ;
  assign LOCKSTEP_Master_Out[2591] = \<const0> ;
  assign LOCKSTEP_Master_Out[2592] = \<const0> ;
  assign LOCKSTEP_Master_Out[2593] = \<const0> ;
  assign LOCKSTEP_Master_Out[2594] = \<const0> ;
  assign LOCKSTEP_Master_Out[2595] = \<const0> ;
  assign LOCKSTEP_Master_Out[2596] = \<const0> ;
  assign LOCKSTEP_Master_Out[2597] = \<const0> ;
  assign LOCKSTEP_Master_Out[2598] = \<const0> ;
  assign LOCKSTEP_Master_Out[2599] = \<const0> ;
  assign LOCKSTEP_Master_Out[2600] = \<const0> ;
  assign LOCKSTEP_Master_Out[2601] = \<const0> ;
  assign LOCKSTEP_Master_Out[2602] = \<const0> ;
  assign LOCKSTEP_Master_Out[2603] = \<const0> ;
  assign LOCKSTEP_Master_Out[2604] = \<const0> ;
  assign LOCKSTEP_Master_Out[2605] = \<const0> ;
  assign LOCKSTEP_Master_Out[2606] = \<const0> ;
  assign LOCKSTEP_Master_Out[2607] = \<const0> ;
  assign LOCKSTEP_Master_Out[2608] = \<const0> ;
  assign LOCKSTEP_Master_Out[2609] = \<const0> ;
  assign LOCKSTEP_Master_Out[2610] = \<const0> ;
  assign LOCKSTEP_Master_Out[2611] = \<const0> ;
  assign LOCKSTEP_Master_Out[2612] = \<const0> ;
  assign LOCKSTEP_Master_Out[2613] = \<const0> ;
  assign LOCKSTEP_Master_Out[2614] = \<const0> ;
  assign LOCKSTEP_Master_Out[2615] = \<const0> ;
  assign LOCKSTEP_Master_Out[2616] = \<const0> ;
  assign LOCKSTEP_Master_Out[2617] = \<const0> ;
  assign LOCKSTEP_Master_Out[2618] = \<const0> ;
  assign LOCKSTEP_Master_Out[2619] = \<const0> ;
  assign LOCKSTEP_Master_Out[2620] = \<const0> ;
  assign LOCKSTEP_Master_Out[2621] = \<const0> ;
  assign LOCKSTEP_Master_Out[2622] = \<const0> ;
  assign LOCKSTEP_Master_Out[2623] = \<const0> ;
  assign LOCKSTEP_Master_Out[2624] = \<const0> ;
  assign LOCKSTEP_Master_Out[2625] = \<const0> ;
  assign LOCKSTEP_Master_Out[2626] = \<const0> ;
  assign LOCKSTEP_Master_Out[2627] = \<const0> ;
  assign LOCKSTEP_Master_Out[2628] = \<const0> ;
  assign LOCKSTEP_Master_Out[2629] = \<const0> ;
  assign LOCKSTEP_Master_Out[2630] = \<const0> ;
  assign LOCKSTEP_Master_Out[2631] = \<const0> ;
  assign LOCKSTEP_Master_Out[2632] = \<const0> ;
  assign LOCKSTEP_Master_Out[2633] = \<const0> ;
  assign LOCKSTEP_Master_Out[2634] = \<const0> ;
  assign LOCKSTEP_Master_Out[2635] = \<const0> ;
  assign LOCKSTEP_Master_Out[2636] = \<const0> ;
  assign LOCKSTEP_Master_Out[2637] = \<const0> ;
  assign LOCKSTEP_Master_Out[2638] = \<const0> ;
  assign LOCKSTEP_Master_Out[2639] = \<const0> ;
  assign LOCKSTEP_Master_Out[2640] = \<const0> ;
  assign LOCKSTEP_Master_Out[2641] = \<const0> ;
  assign LOCKSTEP_Master_Out[2642] = \<const0> ;
  assign LOCKSTEP_Master_Out[2643] = \<const0> ;
  assign LOCKSTEP_Master_Out[2644] = \<const0> ;
  assign LOCKSTEP_Master_Out[2645] = \<const0> ;
  assign LOCKSTEP_Master_Out[2646] = \<const0> ;
  assign LOCKSTEP_Master_Out[2647] = \<const0> ;
  assign LOCKSTEP_Master_Out[2648] = \<const0> ;
  assign LOCKSTEP_Master_Out[2649] = \<const0> ;
  assign LOCKSTEP_Master_Out[2650] = \<const0> ;
  assign LOCKSTEP_Master_Out[2651] = \<const0> ;
  assign LOCKSTEP_Master_Out[2652] = \<const0> ;
  assign LOCKSTEP_Master_Out[2653] = \<const0> ;
  assign LOCKSTEP_Master_Out[2654] = \<const0> ;
  assign LOCKSTEP_Master_Out[2655] = \<const0> ;
  assign LOCKSTEP_Master_Out[2656] = \<const0> ;
  assign LOCKSTEP_Master_Out[2657] = \<const0> ;
  assign LOCKSTEP_Master_Out[2658] = \<const0> ;
  assign LOCKSTEP_Master_Out[2659] = \<const0> ;
  assign LOCKSTEP_Master_Out[2660] = \<const0> ;
  assign LOCKSTEP_Master_Out[2661] = \<const0> ;
  assign LOCKSTEP_Master_Out[2662] = \<const0> ;
  assign LOCKSTEP_Master_Out[2663] = \<const0> ;
  assign LOCKSTEP_Master_Out[2664] = \<const0> ;
  assign LOCKSTEP_Master_Out[2665] = \<const0> ;
  assign LOCKSTEP_Master_Out[2666] = \<const0> ;
  assign LOCKSTEP_Master_Out[2667] = \<const0> ;
  assign LOCKSTEP_Master_Out[2668] = \<const0> ;
  assign LOCKSTEP_Master_Out[2669] = \<const0> ;
  assign LOCKSTEP_Master_Out[2670] = \<const0> ;
  assign LOCKSTEP_Master_Out[2671] = \<const0> ;
  assign LOCKSTEP_Master_Out[2672] = \<const0> ;
  assign LOCKSTEP_Master_Out[2673] = \<const0> ;
  assign LOCKSTEP_Master_Out[2674] = \<const0> ;
  assign LOCKSTEP_Master_Out[2675] = \<const0> ;
  assign LOCKSTEP_Master_Out[2676] = \<const0> ;
  assign LOCKSTEP_Master_Out[2677] = \<const0> ;
  assign LOCKSTEP_Master_Out[2678] = \<const0> ;
  assign LOCKSTEP_Master_Out[2679] = \<const0> ;
  assign LOCKSTEP_Master_Out[2680] = \<const0> ;
  assign LOCKSTEP_Master_Out[2681] = \<const0> ;
  assign LOCKSTEP_Master_Out[2682] = \<const0> ;
  assign LOCKSTEP_Master_Out[2683] = \<const0> ;
  assign LOCKSTEP_Master_Out[2684] = \<const0> ;
  assign LOCKSTEP_Master_Out[2685] = \<const0> ;
  assign LOCKSTEP_Master_Out[2686] = \<const0> ;
  assign LOCKSTEP_Master_Out[2687] = \<const0> ;
  assign LOCKSTEP_Master_Out[2688] = \<const0> ;
  assign LOCKSTEP_Master_Out[2689] = \<const0> ;
  assign LOCKSTEP_Master_Out[2690] = \<const0> ;
  assign LOCKSTEP_Master_Out[2691] = \<const0> ;
  assign LOCKSTEP_Master_Out[2692] = \<const0> ;
  assign LOCKSTEP_Master_Out[2693] = \<const0> ;
  assign LOCKSTEP_Master_Out[2694] = \<const0> ;
  assign LOCKSTEP_Master_Out[2695] = \<const0> ;
  assign LOCKSTEP_Master_Out[2696] = \<const0> ;
  assign LOCKSTEP_Master_Out[2697] = \<const0> ;
  assign LOCKSTEP_Master_Out[2698] = \<const0> ;
  assign LOCKSTEP_Master_Out[2699] = \<const0> ;
  assign LOCKSTEP_Master_Out[2700] = \<const0> ;
  assign LOCKSTEP_Master_Out[2701] = \<const0> ;
  assign LOCKSTEP_Master_Out[2702] = \<const0> ;
  assign LOCKSTEP_Master_Out[2703] = \<const0> ;
  assign LOCKSTEP_Master_Out[2704] = \<const0> ;
  assign LOCKSTEP_Master_Out[2705] = \<const0> ;
  assign LOCKSTEP_Master_Out[2706] = \<const0> ;
  assign LOCKSTEP_Master_Out[2707] = \<const0> ;
  assign LOCKSTEP_Master_Out[2708] = \<const0> ;
  assign LOCKSTEP_Master_Out[2709] = \<const0> ;
  assign LOCKSTEP_Master_Out[2710] = \<const0> ;
  assign LOCKSTEP_Master_Out[2711] = \<const0> ;
  assign LOCKSTEP_Master_Out[2712] = \<const0> ;
  assign LOCKSTEP_Master_Out[2713] = \<const0> ;
  assign LOCKSTEP_Master_Out[2714] = \<const0> ;
  assign LOCKSTEP_Master_Out[2715] = \<const0> ;
  assign LOCKSTEP_Master_Out[2716] = \<const0> ;
  assign LOCKSTEP_Master_Out[2717] = \<const0> ;
  assign LOCKSTEP_Master_Out[2718] = \<const0> ;
  assign LOCKSTEP_Master_Out[2719] = \<const0> ;
  assign LOCKSTEP_Master_Out[2720] = \<const0> ;
  assign LOCKSTEP_Master_Out[2721] = \<const0> ;
  assign LOCKSTEP_Master_Out[2722] = \<const0> ;
  assign LOCKSTEP_Master_Out[2723] = \<const0> ;
  assign LOCKSTEP_Master_Out[2724] = \<const0> ;
  assign LOCKSTEP_Master_Out[2725] = \<const0> ;
  assign LOCKSTEP_Master_Out[2726] = \<const0> ;
  assign LOCKSTEP_Master_Out[2727] = \<const0> ;
  assign LOCKSTEP_Master_Out[2728] = \<const0> ;
  assign LOCKSTEP_Master_Out[2729] = \<const0> ;
  assign LOCKSTEP_Master_Out[2730] = \<const0> ;
  assign LOCKSTEP_Master_Out[2731] = \<const0> ;
  assign LOCKSTEP_Master_Out[2732] = \<const0> ;
  assign LOCKSTEP_Master_Out[2733] = \<const0> ;
  assign LOCKSTEP_Master_Out[2734] = \<const0> ;
  assign LOCKSTEP_Master_Out[2735] = \<const0> ;
  assign LOCKSTEP_Master_Out[2736] = \<const0> ;
  assign LOCKSTEP_Master_Out[2737] = \<const0> ;
  assign LOCKSTEP_Master_Out[2738] = \<const0> ;
  assign LOCKSTEP_Master_Out[2739] = \<const0> ;
  assign LOCKSTEP_Master_Out[2740] = \<const0> ;
  assign LOCKSTEP_Master_Out[2741] = \<const0> ;
  assign LOCKSTEP_Master_Out[2742] = \<const0> ;
  assign LOCKSTEP_Master_Out[2743] = \<const0> ;
  assign LOCKSTEP_Master_Out[2744] = \<const0> ;
  assign LOCKSTEP_Master_Out[2745] = \<const0> ;
  assign LOCKSTEP_Master_Out[2746] = \<const0> ;
  assign LOCKSTEP_Master_Out[2747] = \<const0> ;
  assign LOCKSTEP_Master_Out[2748] = \<const0> ;
  assign LOCKSTEP_Master_Out[2749] = \<const0> ;
  assign LOCKSTEP_Master_Out[2750] = \<const0> ;
  assign LOCKSTEP_Master_Out[2751] = \<const0> ;
  assign LOCKSTEP_Master_Out[2752] = \<const0> ;
  assign LOCKSTEP_Master_Out[2753] = \<const0> ;
  assign LOCKSTEP_Master_Out[2754] = \<const0> ;
  assign LOCKSTEP_Master_Out[2755] = \<const0> ;
  assign LOCKSTEP_Master_Out[2756] = \<const0> ;
  assign LOCKSTEP_Master_Out[2757] = \<const0> ;
  assign LOCKSTEP_Master_Out[2758] = \<const0> ;
  assign LOCKSTEP_Master_Out[2759] = \<const0> ;
  assign LOCKSTEP_Master_Out[2760] = \<const0> ;
  assign LOCKSTEP_Master_Out[2761] = \<const0> ;
  assign LOCKSTEP_Master_Out[2762] = \<const0> ;
  assign LOCKSTEP_Master_Out[2763] = \<const0> ;
  assign LOCKSTEP_Master_Out[2764] = \<const0> ;
  assign LOCKSTEP_Master_Out[2765] = \<const0> ;
  assign LOCKSTEP_Master_Out[2766] = \<const0> ;
  assign LOCKSTEP_Master_Out[2767] = \<const0> ;
  assign LOCKSTEP_Master_Out[2768] = \<const0> ;
  assign LOCKSTEP_Master_Out[2769] = \<const0> ;
  assign LOCKSTEP_Master_Out[2770] = \<const0> ;
  assign LOCKSTEP_Master_Out[2771] = \<const0> ;
  assign LOCKSTEP_Master_Out[2772] = \<const0> ;
  assign LOCKSTEP_Master_Out[2773] = \<const0> ;
  assign LOCKSTEP_Master_Out[2774] = \<const0> ;
  assign LOCKSTEP_Master_Out[2775] = \<const0> ;
  assign LOCKSTEP_Master_Out[2776] = \<const0> ;
  assign LOCKSTEP_Master_Out[2777] = \<const0> ;
  assign LOCKSTEP_Master_Out[2778] = \<const0> ;
  assign LOCKSTEP_Master_Out[2779] = \<const0> ;
  assign LOCKSTEP_Master_Out[2780] = \<const0> ;
  assign LOCKSTEP_Master_Out[2781] = \<const0> ;
  assign LOCKSTEP_Master_Out[2782] = \<const0> ;
  assign LOCKSTEP_Master_Out[2783] = \<const0> ;
  assign LOCKSTEP_Master_Out[2784] = \<const0> ;
  assign LOCKSTEP_Master_Out[2785] = \<const0> ;
  assign LOCKSTEP_Master_Out[2786] = \<const0> ;
  assign LOCKSTEP_Master_Out[2787] = \<const0> ;
  assign LOCKSTEP_Master_Out[2788] = \<const0> ;
  assign LOCKSTEP_Master_Out[2789] = \<const0> ;
  assign LOCKSTEP_Master_Out[2790] = \<const0> ;
  assign LOCKSTEP_Master_Out[2791] = \<const0> ;
  assign LOCKSTEP_Master_Out[2792] = \<const0> ;
  assign LOCKSTEP_Master_Out[2793] = \<const0> ;
  assign LOCKSTEP_Master_Out[2794] = \<const0> ;
  assign LOCKSTEP_Master_Out[2795] = \<const0> ;
  assign LOCKSTEP_Master_Out[2796] = \<const0> ;
  assign LOCKSTEP_Master_Out[2797] = \<const0> ;
  assign LOCKSTEP_Master_Out[2798] = \<const0> ;
  assign LOCKSTEP_Master_Out[2799] = \<const0> ;
  assign LOCKSTEP_Master_Out[2800] = \<const0> ;
  assign LOCKSTEP_Master_Out[2801] = \<const0> ;
  assign LOCKSTEP_Master_Out[2802] = \<const0> ;
  assign LOCKSTEP_Master_Out[2803] = \<const0> ;
  assign LOCKSTEP_Master_Out[2804] = \<const0> ;
  assign LOCKSTEP_Master_Out[2805] = \<const0> ;
  assign LOCKSTEP_Master_Out[2806] = \<const0> ;
  assign LOCKSTEP_Master_Out[2807] = \<const0> ;
  assign LOCKSTEP_Master_Out[2808] = \<const0> ;
  assign LOCKSTEP_Master_Out[2809] = \<const0> ;
  assign LOCKSTEP_Master_Out[2810] = \<const0> ;
  assign LOCKSTEP_Master_Out[2811] = \<const0> ;
  assign LOCKSTEP_Master_Out[2812] = \<const0> ;
  assign LOCKSTEP_Master_Out[2813] = \<const0> ;
  assign LOCKSTEP_Master_Out[2814] = \<const0> ;
  assign LOCKSTEP_Master_Out[2815] = \<const0> ;
  assign LOCKSTEP_Master_Out[2816] = \<const0> ;
  assign LOCKSTEP_Master_Out[2817] = \<const0> ;
  assign LOCKSTEP_Master_Out[2818] = \<const0> ;
  assign LOCKSTEP_Master_Out[2819] = \<const0> ;
  assign LOCKSTEP_Master_Out[2820] = \<const0> ;
  assign LOCKSTEP_Master_Out[2821] = \<const0> ;
  assign LOCKSTEP_Master_Out[2822] = \<const0> ;
  assign LOCKSTEP_Master_Out[2823] = \<const0> ;
  assign LOCKSTEP_Master_Out[2824] = \<const0> ;
  assign LOCKSTEP_Master_Out[2825] = \<const0> ;
  assign LOCKSTEP_Master_Out[2826] = \<const0> ;
  assign LOCKSTEP_Master_Out[2827] = \<const0> ;
  assign LOCKSTEP_Master_Out[2828] = \<const0> ;
  assign LOCKSTEP_Master_Out[2829] = \<const0> ;
  assign LOCKSTEP_Master_Out[2830] = \<const0> ;
  assign LOCKSTEP_Master_Out[2831] = \<const0> ;
  assign LOCKSTEP_Master_Out[2832] = \<const0> ;
  assign LOCKSTEP_Master_Out[2833] = \<const0> ;
  assign LOCKSTEP_Master_Out[2834] = \<const0> ;
  assign LOCKSTEP_Master_Out[2835] = \<const0> ;
  assign LOCKSTEP_Master_Out[2836] = \<const0> ;
  assign LOCKSTEP_Master_Out[2837] = \<const0> ;
  assign LOCKSTEP_Master_Out[2838] = \<const0> ;
  assign LOCKSTEP_Master_Out[2839] = \<const0> ;
  assign LOCKSTEP_Master_Out[2840] = \<const0> ;
  assign LOCKSTEP_Master_Out[2841] = \<const0> ;
  assign LOCKSTEP_Master_Out[2842] = \<const0> ;
  assign LOCKSTEP_Master_Out[2843] = \<const0> ;
  assign LOCKSTEP_Master_Out[2844] = \<const0> ;
  assign LOCKSTEP_Master_Out[2845] = \<const0> ;
  assign LOCKSTEP_Master_Out[2846] = \<const0> ;
  assign LOCKSTEP_Master_Out[2847] = \<const0> ;
  assign LOCKSTEP_Master_Out[2848] = \<const0> ;
  assign LOCKSTEP_Master_Out[2849] = \<const0> ;
  assign LOCKSTEP_Master_Out[2850] = \<const0> ;
  assign LOCKSTEP_Master_Out[2851] = \<const0> ;
  assign LOCKSTEP_Master_Out[2852] = \<const0> ;
  assign LOCKSTEP_Master_Out[2853] = \<const0> ;
  assign LOCKSTEP_Master_Out[2854] = \<const0> ;
  assign LOCKSTEP_Master_Out[2855] = \<const0> ;
  assign LOCKSTEP_Master_Out[2856] = \<const0> ;
  assign LOCKSTEP_Master_Out[2857] = \<const0> ;
  assign LOCKSTEP_Master_Out[2858] = \<const0> ;
  assign LOCKSTEP_Master_Out[2859] = \<const0> ;
  assign LOCKSTEP_Master_Out[2860] = \<const0> ;
  assign LOCKSTEP_Master_Out[2861] = \<const0> ;
  assign LOCKSTEP_Master_Out[2862] = \<const0> ;
  assign LOCKSTEP_Master_Out[2863] = \<const0> ;
  assign LOCKSTEP_Master_Out[2864] = \<const0> ;
  assign LOCKSTEP_Master_Out[2865] = \<const0> ;
  assign LOCKSTEP_Master_Out[2866] = \<const0> ;
  assign LOCKSTEP_Master_Out[2867] = \<const0> ;
  assign LOCKSTEP_Master_Out[2868] = \<const0> ;
  assign LOCKSTEP_Master_Out[2869] = \<const0> ;
  assign LOCKSTEP_Master_Out[2870] = \<const0> ;
  assign LOCKSTEP_Master_Out[2871] = \<const0> ;
  assign LOCKSTEP_Master_Out[2872] = \<const0> ;
  assign LOCKSTEP_Master_Out[2873] = \<const0> ;
  assign LOCKSTEP_Master_Out[2874] = \<const0> ;
  assign LOCKSTEP_Master_Out[2875] = \<const0> ;
  assign LOCKSTEP_Master_Out[2876] = \<const0> ;
  assign LOCKSTEP_Master_Out[2877] = \<const0> ;
  assign LOCKSTEP_Master_Out[2878] = \<const0> ;
  assign LOCKSTEP_Master_Out[2879] = \<const0> ;
  assign LOCKSTEP_Master_Out[2880] = \<const0> ;
  assign LOCKSTEP_Master_Out[2881] = \<const0> ;
  assign LOCKSTEP_Master_Out[2882] = \<const0> ;
  assign LOCKSTEP_Master_Out[2883] = \<const0> ;
  assign LOCKSTEP_Master_Out[2884] = \<const0> ;
  assign LOCKSTEP_Master_Out[2885] = \<const0> ;
  assign LOCKSTEP_Master_Out[2886] = \<const0> ;
  assign LOCKSTEP_Master_Out[2887] = \<const0> ;
  assign LOCKSTEP_Master_Out[2888] = \<const0> ;
  assign LOCKSTEP_Master_Out[2889] = \<const0> ;
  assign LOCKSTEP_Master_Out[2890] = \<const0> ;
  assign LOCKSTEP_Master_Out[2891] = \<const0> ;
  assign LOCKSTEP_Master_Out[2892] = \<const0> ;
  assign LOCKSTEP_Master_Out[2893] = \<const0> ;
  assign LOCKSTEP_Master_Out[2894] = \<const0> ;
  assign LOCKSTEP_Master_Out[2895] = \<const0> ;
  assign LOCKSTEP_Master_Out[2896] = \<const0> ;
  assign LOCKSTEP_Master_Out[2897] = \<const0> ;
  assign LOCKSTEP_Master_Out[2898] = \<const0> ;
  assign LOCKSTEP_Master_Out[2899] = \<const0> ;
  assign LOCKSTEP_Master_Out[2900] = \<const0> ;
  assign LOCKSTEP_Master_Out[2901] = \<const0> ;
  assign LOCKSTEP_Master_Out[2902] = \<const0> ;
  assign LOCKSTEP_Master_Out[2903] = \<const0> ;
  assign LOCKSTEP_Master_Out[2904] = \<const0> ;
  assign LOCKSTEP_Master_Out[2905] = \<const0> ;
  assign LOCKSTEP_Master_Out[2906] = \<const0> ;
  assign LOCKSTEP_Master_Out[2907] = \<const0> ;
  assign LOCKSTEP_Master_Out[2908] = \<const0> ;
  assign LOCKSTEP_Master_Out[2909] = \<const0> ;
  assign LOCKSTEP_Master_Out[2910] = \<const0> ;
  assign LOCKSTEP_Master_Out[2911] = \<const0> ;
  assign LOCKSTEP_Master_Out[2912] = \<const0> ;
  assign LOCKSTEP_Master_Out[2913] = \<const0> ;
  assign LOCKSTEP_Master_Out[2914] = \<const0> ;
  assign LOCKSTEP_Master_Out[2915] = \<const0> ;
  assign LOCKSTEP_Master_Out[2916] = \<const0> ;
  assign LOCKSTEP_Master_Out[2917] = \<const0> ;
  assign LOCKSTEP_Master_Out[2918] = \<const0> ;
  assign LOCKSTEP_Master_Out[2919] = \<const0> ;
  assign LOCKSTEP_Master_Out[2920] = \<const0> ;
  assign LOCKSTEP_Master_Out[2921] = \<const0> ;
  assign LOCKSTEP_Master_Out[2922] = \<const0> ;
  assign LOCKSTEP_Master_Out[2923] = \<const0> ;
  assign LOCKSTEP_Master_Out[2924] = \<const0> ;
  assign LOCKSTEP_Master_Out[2925] = \<const0> ;
  assign LOCKSTEP_Master_Out[2926] = \<const0> ;
  assign LOCKSTEP_Master_Out[2927] = \<const0> ;
  assign LOCKSTEP_Master_Out[2928] = \<const0> ;
  assign LOCKSTEP_Master_Out[2929] = \<const0> ;
  assign LOCKSTEP_Master_Out[2930] = \<const0> ;
  assign LOCKSTEP_Master_Out[2931] = \<const0> ;
  assign LOCKSTEP_Master_Out[2932] = \<const0> ;
  assign LOCKSTEP_Master_Out[2933] = \<const0> ;
  assign LOCKSTEP_Master_Out[2934] = \<const0> ;
  assign LOCKSTEP_Master_Out[2935] = \<const0> ;
  assign LOCKSTEP_Master_Out[2936] = \<const0> ;
  assign LOCKSTEP_Master_Out[2937] = \<const0> ;
  assign LOCKSTEP_Master_Out[2938] = \<const0> ;
  assign LOCKSTEP_Master_Out[2939] = \<const0> ;
  assign LOCKSTEP_Master_Out[2940] = \<const0> ;
  assign LOCKSTEP_Master_Out[2941] = \<const0> ;
  assign LOCKSTEP_Master_Out[2942] = \<const0> ;
  assign LOCKSTEP_Master_Out[2943] = \<const0> ;
  assign LOCKSTEP_Master_Out[2944] = \<const0> ;
  assign LOCKSTEP_Master_Out[2945] = \<const0> ;
  assign LOCKSTEP_Master_Out[2946] = \<const0> ;
  assign LOCKSTEP_Master_Out[2947] = \<const0> ;
  assign LOCKSTEP_Master_Out[2948] = \<const0> ;
  assign LOCKSTEP_Master_Out[2949] = \<const0> ;
  assign LOCKSTEP_Master_Out[2950] = \<const0> ;
  assign LOCKSTEP_Master_Out[2951] = \<const0> ;
  assign LOCKSTEP_Master_Out[2952] = \<const0> ;
  assign LOCKSTEP_Master_Out[2953] = \<const0> ;
  assign LOCKSTEP_Master_Out[2954] = \<const0> ;
  assign LOCKSTEP_Master_Out[2955] = \<const0> ;
  assign LOCKSTEP_Master_Out[2956] = \<const0> ;
  assign LOCKSTEP_Master_Out[2957] = \<const0> ;
  assign LOCKSTEP_Master_Out[2958] = \<const0> ;
  assign LOCKSTEP_Master_Out[2959] = \<const0> ;
  assign LOCKSTEP_Master_Out[2960] = \<const0> ;
  assign LOCKSTEP_Master_Out[2961] = \<const0> ;
  assign LOCKSTEP_Master_Out[2962] = \<const0> ;
  assign LOCKSTEP_Master_Out[2963] = \<const0> ;
  assign LOCKSTEP_Master_Out[2964] = \<const0> ;
  assign LOCKSTEP_Master_Out[2965] = \<const0> ;
  assign LOCKSTEP_Master_Out[2966] = \<const0> ;
  assign LOCKSTEP_Master_Out[2967] = \<const0> ;
  assign LOCKSTEP_Master_Out[2968] = \<const0> ;
  assign LOCKSTEP_Master_Out[2969] = \<const0> ;
  assign LOCKSTEP_Master_Out[2970] = \<const0> ;
  assign LOCKSTEP_Master_Out[2971] = \<const0> ;
  assign LOCKSTEP_Master_Out[2972] = \<const0> ;
  assign LOCKSTEP_Master_Out[2973] = \<const0> ;
  assign LOCKSTEP_Master_Out[2974] = \<const0> ;
  assign LOCKSTEP_Master_Out[2975] = \<const0> ;
  assign LOCKSTEP_Master_Out[2976] = \<const0> ;
  assign LOCKSTEP_Master_Out[2977] = \<const0> ;
  assign LOCKSTEP_Master_Out[2978] = \<const0> ;
  assign LOCKSTEP_Master_Out[2979] = \<const0> ;
  assign LOCKSTEP_Master_Out[2980] = \<const0> ;
  assign LOCKSTEP_Master_Out[2981] = \<const0> ;
  assign LOCKSTEP_Master_Out[2982] = \<const0> ;
  assign LOCKSTEP_Master_Out[2983] = \<const0> ;
  assign LOCKSTEP_Master_Out[2984] = \<const0> ;
  assign LOCKSTEP_Master_Out[2985] = \<const0> ;
  assign LOCKSTEP_Master_Out[2986] = \<const0> ;
  assign LOCKSTEP_Master_Out[2987] = \<const0> ;
  assign LOCKSTEP_Master_Out[2988] = \<const0> ;
  assign LOCKSTEP_Master_Out[2989] = \<const0> ;
  assign LOCKSTEP_Master_Out[2990] = \<const0> ;
  assign LOCKSTEP_Master_Out[2991] = \<const0> ;
  assign LOCKSTEP_Master_Out[2992] = \<const0> ;
  assign LOCKSTEP_Master_Out[2993] = \<const0> ;
  assign LOCKSTEP_Master_Out[2994] = \<const0> ;
  assign LOCKSTEP_Master_Out[2995] = \<const0> ;
  assign LOCKSTEP_Master_Out[2996] = \<const0> ;
  assign LOCKSTEP_Master_Out[2997] = \<const0> ;
  assign LOCKSTEP_Master_Out[2998] = \<const0> ;
  assign LOCKSTEP_Master_Out[2999] = \<const0> ;
  assign LOCKSTEP_Master_Out[3000] = \<const0> ;
  assign LOCKSTEP_Master_Out[3001] = \<const0> ;
  assign LOCKSTEP_Master_Out[3002] = \<const0> ;
  assign LOCKSTEP_Master_Out[3003] = \<const0> ;
  assign LOCKSTEP_Master_Out[3004] = \<const0> ;
  assign LOCKSTEP_Master_Out[3005] = \<const0> ;
  assign LOCKSTEP_Master_Out[3006] = \<const0> ;
  assign LOCKSTEP_Master_Out[3007] = \<const0> ;
  assign LOCKSTEP_Master_Out[3008] = \<const0> ;
  assign LOCKSTEP_Master_Out[3009] = \<const0> ;
  assign LOCKSTEP_Master_Out[3010] = \<const0> ;
  assign LOCKSTEP_Master_Out[3011] = \<const0> ;
  assign LOCKSTEP_Master_Out[3012] = \<const0> ;
  assign LOCKSTEP_Master_Out[3013] = \<const0> ;
  assign LOCKSTEP_Master_Out[3014] = \<const0> ;
  assign LOCKSTEP_Master_Out[3015] = \<const0> ;
  assign LOCKSTEP_Master_Out[3016] = \<const0> ;
  assign LOCKSTEP_Master_Out[3017] = \<const0> ;
  assign LOCKSTEP_Master_Out[3018] = \<const0> ;
  assign LOCKSTEP_Master_Out[3019] = \<const0> ;
  assign LOCKSTEP_Master_Out[3020] = \<const0> ;
  assign LOCKSTEP_Master_Out[3021] = \<const0> ;
  assign LOCKSTEP_Master_Out[3022] = \<const0> ;
  assign LOCKSTEP_Master_Out[3023] = \<const0> ;
  assign LOCKSTEP_Master_Out[3024] = \<const0> ;
  assign LOCKSTEP_Master_Out[3025] = \<const0> ;
  assign LOCKSTEP_Master_Out[3026] = \<const0> ;
  assign LOCKSTEP_Master_Out[3027] = \<const0> ;
  assign LOCKSTEP_Master_Out[3028] = \<const0> ;
  assign LOCKSTEP_Master_Out[3029] = \<const0> ;
  assign LOCKSTEP_Master_Out[3030] = \<const0> ;
  assign LOCKSTEP_Master_Out[3031] = \<const0> ;
  assign LOCKSTEP_Master_Out[3032] = \<const0> ;
  assign LOCKSTEP_Master_Out[3033] = \<const0> ;
  assign LOCKSTEP_Master_Out[3034] = \<const0> ;
  assign LOCKSTEP_Master_Out[3035] = \<const0> ;
  assign LOCKSTEP_Master_Out[3036] = \<const0> ;
  assign LOCKSTEP_Master_Out[3037] = \<const0> ;
  assign LOCKSTEP_Master_Out[3038] = \<const0> ;
  assign LOCKSTEP_Master_Out[3039] = \<const0> ;
  assign LOCKSTEP_Master_Out[3040] = \<const0> ;
  assign LOCKSTEP_Master_Out[3041] = \<const0> ;
  assign LOCKSTEP_Master_Out[3042] = \<const0> ;
  assign LOCKSTEP_Master_Out[3043] = \<const0> ;
  assign LOCKSTEP_Master_Out[3044] = \<const0> ;
  assign LOCKSTEP_Master_Out[3045] = \<const0> ;
  assign LOCKSTEP_Master_Out[3046] = \<const0> ;
  assign LOCKSTEP_Master_Out[3047] = \<const0> ;
  assign LOCKSTEP_Master_Out[3048] = \<const0> ;
  assign LOCKSTEP_Master_Out[3049] = \<const0> ;
  assign LOCKSTEP_Master_Out[3050] = \<const0> ;
  assign LOCKSTEP_Master_Out[3051] = \<const0> ;
  assign LOCKSTEP_Master_Out[3052] = \<const0> ;
  assign LOCKSTEP_Master_Out[3053] = \<const0> ;
  assign LOCKSTEP_Master_Out[3054] = \<const0> ;
  assign LOCKSTEP_Master_Out[3055] = \<const0> ;
  assign LOCKSTEP_Master_Out[3056] = \<const0> ;
  assign LOCKSTEP_Master_Out[3057] = \<const0> ;
  assign LOCKSTEP_Master_Out[3058] = \<const0> ;
  assign LOCKSTEP_Master_Out[3059] = \<const0> ;
  assign LOCKSTEP_Master_Out[3060] = \<const0> ;
  assign LOCKSTEP_Master_Out[3061] = \<const0> ;
  assign LOCKSTEP_Master_Out[3062] = \<const0> ;
  assign LOCKSTEP_Master_Out[3063] = \<const0> ;
  assign LOCKSTEP_Master_Out[3064] = \<const0> ;
  assign LOCKSTEP_Master_Out[3065] = \<const0> ;
  assign LOCKSTEP_Master_Out[3066] = \<const0> ;
  assign LOCKSTEP_Master_Out[3067] = \<const0> ;
  assign LOCKSTEP_Master_Out[3068] = \<const0> ;
  assign LOCKSTEP_Master_Out[3069] = \<const0> ;
  assign LOCKSTEP_Master_Out[3070] = \<const0> ;
  assign LOCKSTEP_Master_Out[3071] = \<const0> ;
  assign LOCKSTEP_Master_Out[3072] = \<const0> ;
  assign LOCKSTEP_Master_Out[3073] = \<const0> ;
  assign LOCKSTEP_Master_Out[3074] = \<const0> ;
  assign LOCKSTEP_Master_Out[3075] = \<const0> ;
  assign LOCKSTEP_Master_Out[3076] = \<const0> ;
  assign LOCKSTEP_Master_Out[3077] = \<const0> ;
  assign LOCKSTEP_Master_Out[3078] = \<const0> ;
  assign LOCKSTEP_Master_Out[3079] = \<const0> ;
  assign LOCKSTEP_Master_Out[3080] = \<const0> ;
  assign LOCKSTEP_Master_Out[3081] = \<const0> ;
  assign LOCKSTEP_Master_Out[3082] = \<const0> ;
  assign LOCKSTEP_Master_Out[3083] = \<const0> ;
  assign LOCKSTEP_Master_Out[3084] = \<const0> ;
  assign LOCKSTEP_Master_Out[3085] = \<const0> ;
  assign LOCKSTEP_Master_Out[3086] = \<const0> ;
  assign LOCKSTEP_Master_Out[3087] = \<const0> ;
  assign LOCKSTEP_Master_Out[3088] = \<const0> ;
  assign LOCKSTEP_Master_Out[3089] = \<const0> ;
  assign LOCKSTEP_Master_Out[3090] = \<const0> ;
  assign LOCKSTEP_Master_Out[3091] = \<const0> ;
  assign LOCKSTEP_Master_Out[3092] = \<const0> ;
  assign LOCKSTEP_Master_Out[3093] = \<const0> ;
  assign LOCKSTEP_Master_Out[3094] = \<const0> ;
  assign LOCKSTEP_Master_Out[3095] = \<const0> ;
  assign LOCKSTEP_Master_Out[3096] = \<const0> ;
  assign LOCKSTEP_Master_Out[3097] = \<const0> ;
  assign LOCKSTEP_Master_Out[3098] = \<const0> ;
  assign LOCKSTEP_Master_Out[3099] = \<const0> ;
  assign LOCKSTEP_Master_Out[3100] = \<const0> ;
  assign LOCKSTEP_Master_Out[3101] = \<const0> ;
  assign LOCKSTEP_Master_Out[3102] = \<const0> ;
  assign LOCKSTEP_Master_Out[3103] = \<const0> ;
  assign LOCKSTEP_Master_Out[3104] = \<const0> ;
  assign LOCKSTEP_Master_Out[3105] = \<const0> ;
  assign LOCKSTEP_Master_Out[3106] = \<const0> ;
  assign LOCKSTEP_Master_Out[3107] = \<const0> ;
  assign LOCKSTEP_Master_Out[3108] = \<const0> ;
  assign LOCKSTEP_Master_Out[3109] = \<const0> ;
  assign LOCKSTEP_Master_Out[3110] = \<const0> ;
  assign LOCKSTEP_Master_Out[3111] = \<const0> ;
  assign LOCKSTEP_Master_Out[3112] = \<const0> ;
  assign LOCKSTEP_Master_Out[3113] = \<const0> ;
  assign LOCKSTEP_Master_Out[3114] = \<const0> ;
  assign LOCKSTEP_Master_Out[3115] = \<const0> ;
  assign LOCKSTEP_Master_Out[3116] = \<const0> ;
  assign LOCKSTEP_Master_Out[3117] = \<const0> ;
  assign LOCKSTEP_Master_Out[3118] = \<const0> ;
  assign LOCKSTEP_Master_Out[3119] = \<const0> ;
  assign LOCKSTEP_Master_Out[3120] = \<const0> ;
  assign LOCKSTEP_Master_Out[3121] = \<const0> ;
  assign LOCKSTEP_Master_Out[3122] = \<const0> ;
  assign LOCKSTEP_Master_Out[3123] = \<const0> ;
  assign LOCKSTEP_Master_Out[3124] = \<const0> ;
  assign LOCKSTEP_Master_Out[3125] = \<const0> ;
  assign LOCKSTEP_Master_Out[3126] = \<const0> ;
  assign LOCKSTEP_Master_Out[3127] = \<const0> ;
  assign LOCKSTEP_Master_Out[3128] = \<const0> ;
  assign LOCKSTEP_Master_Out[3129] = \<const0> ;
  assign LOCKSTEP_Master_Out[3130] = \<const0> ;
  assign LOCKSTEP_Master_Out[3131] = \<const0> ;
  assign LOCKSTEP_Master_Out[3132] = \<const0> ;
  assign LOCKSTEP_Master_Out[3133] = \<const0> ;
  assign LOCKSTEP_Master_Out[3134] = \<const0> ;
  assign LOCKSTEP_Master_Out[3135] = \<const0> ;
  assign LOCKSTEP_Master_Out[3136] = \<const0> ;
  assign LOCKSTEP_Master_Out[3137] = \<const0> ;
  assign LOCKSTEP_Master_Out[3138] = \<const0> ;
  assign LOCKSTEP_Master_Out[3139] = \<const0> ;
  assign LOCKSTEP_Master_Out[3140] = \<const0> ;
  assign LOCKSTEP_Master_Out[3141] = \<const0> ;
  assign LOCKSTEP_Master_Out[3142] = \<const0> ;
  assign LOCKSTEP_Master_Out[3143] = \<const0> ;
  assign LOCKSTEP_Master_Out[3144] = \<const0> ;
  assign LOCKSTEP_Master_Out[3145] = \<const0> ;
  assign LOCKSTEP_Master_Out[3146] = \<const0> ;
  assign LOCKSTEP_Master_Out[3147] = \<const0> ;
  assign LOCKSTEP_Master_Out[3148] = \<const0> ;
  assign LOCKSTEP_Master_Out[3149] = \<const0> ;
  assign LOCKSTEP_Master_Out[3150] = \<const0> ;
  assign LOCKSTEP_Master_Out[3151] = \<const0> ;
  assign LOCKSTEP_Master_Out[3152] = \<const0> ;
  assign LOCKSTEP_Master_Out[3153] = \<const0> ;
  assign LOCKSTEP_Master_Out[3154] = \<const0> ;
  assign LOCKSTEP_Master_Out[3155] = \<const0> ;
  assign LOCKSTEP_Master_Out[3156] = \<const0> ;
  assign LOCKSTEP_Master_Out[3157] = \<const0> ;
  assign LOCKSTEP_Master_Out[3158] = \<const0> ;
  assign LOCKSTEP_Master_Out[3159] = \<const0> ;
  assign LOCKSTEP_Master_Out[3160] = \<const0> ;
  assign LOCKSTEP_Master_Out[3161] = \<const0> ;
  assign LOCKSTEP_Master_Out[3162] = \<const0> ;
  assign LOCKSTEP_Master_Out[3163] = \<const0> ;
  assign LOCKSTEP_Master_Out[3164] = \<const0> ;
  assign LOCKSTEP_Master_Out[3165] = \<const0> ;
  assign LOCKSTEP_Master_Out[3166] = \<const0> ;
  assign LOCKSTEP_Master_Out[3167] = \<const0> ;
  assign LOCKSTEP_Master_Out[3168] = \<const0> ;
  assign LOCKSTEP_Master_Out[3169] = \<const0> ;
  assign LOCKSTEP_Master_Out[3170] = \<const0> ;
  assign LOCKSTEP_Master_Out[3171] = \<const0> ;
  assign LOCKSTEP_Master_Out[3172] = \<const0> ;
  assign LOCKSTEP_Master_Out[3173] = \<const0> ;
  assign LOCKSTEP_Master_Out[3174] = \<const0> ;
  assign LOCKSTEP_Master_Out[3175] = \<const0> ;
  assign LOCKSTEP_Master_Out[3176] = \<const0> ;
  assign LOCKSTEP_Master_Out[3177] = \<const0> ;
  assign LOCKSTEP_Master_Out[3178] = \<const0> ;
  assign LOCKSTEP_Master_Out[3179] = \<const0> ;
  assign LOCKSTEP_Master_Out[3180] = \<const0> ;
  assign LOCKSTEP_Master_Out[3181] = \<const0> ;
  assign LOCKSTEP_Master_Out[3182] = \<const0> ;
  assign LOCKSTEP_Master_Out[3183] = \<const0> ;
  assign LOCKSTEP_Master_Out[3184] = \<const0> ;
  assign LOCKSTEP_Master_Out[3185] = \<const0> ;
  assign LOCKSTEP_Master_Out[3186] = \<const0> ;
  assign LOCKSTEP_Master_Out[3187] = \<const0> ;
  assign LOCKSTEP_Master_Out[3188] = \<const0> ;
  assign LOCKSTEP_Master_Out[3189] = \<const0> ;
  assign LOCKSTEP_Master_Out[3190] = \<const0> ;
  assign LOCKSTEP_Master_Out[3191] = \<const0> ;
  assign LOCKSTEP_Master_Out[3192] = \<const0> ;
  assign LOCKSTEP_Master_Out[3193] = \<const0> ;
  assign LOCKSTEP_Master_Out[3194] = \<const0> ;
  assign LOCKSTEP_Master_Out[3195] = \<const0> ;
  assign LOCKSTEP_Master_Out[3196] = \<const0> ;
  assign LOCKSTEP_Master_Out[3197] = \<const0> ;
  assign LOCKSTEP_Master_Out[3198] = \<const0> ;
  assign LOCKSTEP_Master_Out[3199] = \<const0> ;
  assign LOCKSTEP_Master_Out[3200] = \<const0> ;
  assign LOCKSTEP_Master_Out[3201] = \<const0> ;
  assign LOCKSTEP_Master_Out[3202] = \<const0> ;
  assign LOCKSTEP_Master_Out[3203] = \<const0> ;
  assign LOCKSTEP_Master_Out[3204] = \<const0> ;
  assign LOCKSTEP_Master_Out[3205] = \<const0> ;
  assign LOCKSTEP_Master_Out[3206] = \<const0> ;
  assign LOCKSTEP_Master_Out[3207] = \<const0> ;
  assign LOCKSTEP_Master_Out[3208] = \<const0> ;
  assign LOCKSTEP_Master_Out[3209] = \<const0> ;
  assign LOCKSTEP_Master_Out[3210] = \<const0> ;
  assign LOCKSTEP_Master_Out[3211] = \<const0> ;
  assign LOCKSTEP_Master_Out[3212] = \<const0> ;
  assign LOCKSTEP_Master_Out[3213] = \<const0> ;
  assign LOCKSTEP_Master_Out[3214] = \<const0> ;
  assign LOCKSTEP_Master_Out[3215] = \<const0> ;
  assign LOCKSTEP_Master_Out[3216] = \<const0> ;
  assign LOCKSTEP_Master_Out[3217] = \<const0> ;
  assign LOCKSTEP_Master_Out[3218] = \<const0> ;
  assign LOCKSTEP_Master_Out[3219] = \<const0> ;
  assign LOCKSTEP_Master_Out[3220] = \<const0> ;
  assign LOCKSTEP_Master_Out[3221] = \<const0> ;
  assign LOCKSTEP_Master_Out[3222] = \<const0> ;
  assign LOCKSTEP_Master_Out[3223] = \<const0> ;
  assign LOCKSTEP_Master_Out[3224] = \<const0> ;
  assign LOCKSTEP_Master_Out[3225] = \<const0> ;
  assign LOCKSTEP_Master_Out[3226] = \<const0> ;
  assign LOCKSTEP_Master_Out[3227] = \<const0> ;
  assign LOCKSTEP_Master_Out[3228] = \<const0> ;
  assign LOCKSTEP_Master_Out[3229] = \<const0> ;
  assign LOCKSTEP_Master_Out[3230] = \<const0> ;
  assign LOCKSTEP_Master_Out[3231] = \<const0> ;
  assign LOCKSTEP_Master_Out[3232] = \<const0> ;
  assign LOCKSTEP_Master_Out[3233] = \<const0> ;
  assign LOCKSTEP_Master_Out[3234] = \<const0> ;
  assign LOCKSTEP_Master_Out[3235] = \<const0> ;
  assign LOCKSTEP_Master_Out[3236] = \<const0> ;
  assign LOCKSTEP_Master_Out[3237] = \<const0> ;
  assign LOCKSTEP_Master_Out[3238] = \<const0> ;
  assign LOCKSTEP_Master_Out[3239] = \<const0> ;
  assign LOCKSTEP_Master_Out[3240] = \<const0> ;
  assign LOCKSTEP_Master_Out[3241] = \<const0> ;
  assign LOCKSTEP_Master_Out[3242] = \<const0> ;
  assign LOCKSTEP_Master_Out[3243] = \<const0> ;
  assign LOCKSTEP_Master_Out[3244] = \<const0> ;
  assign LOCKSTEP_Master_Out[3245] = \<const0> ;
  assign LOCKSTEP_Master_Out[3246] = \<const0> ;
  assign LOCKSTEP_Master_Out[3247] = \<const0> ;
  assign LOCKSTEP_Master_Out[3248] = \<const0> ;
  assign LOCKSTEP_Master_Out[3249] = \<const0> ;
  assign LOCKSTEP_Master_Out[3250] = \<const0> ;
  assign LOCKSTEP_Master_Out[3251] = \<const0> ;
  assign LOCKSTEP_Master_Out[3252] = \<const0> ;
  assign LOCKSTEP_Master_Out[3253] = \<const0> ;
  assign LOCKSTEP_Master_Out[3254] = \<const0> ;
  assign LOCKSTEP_Master_Out[3255] = \<const0> ;
  assign LOCKSTEP_Master_Out[3256] = \<const0> ;
  assign LOCKSTEP_Master_Out[3257] = \<const0> ;
  assign LOCKSTEP_Master_Out[3258] = \<const0> ;
  assign LOCKSTEP_Master_Out[3259] = \<const0> ;
  assign LOCKSTEP_Master_Out[3260] = \<const0> ;
  assign LOCKSTEP_Master_Out[3261] = \<const0> ;
  assign LOCKSTEP_Master_Out[3262] = \<const0> ;
  assign LOCKSTEP_Master_Out[3263] = \<const0> ;
  assign LOCKSTEP_Master_Out[3264] = \<const0> ;
  assign LOCKSTEP_Master_Out[3265] = \<const0> ;
  assign LOCKSTEP_Master_Out[3266] = \<const0> ;
  assign LOCKSTEP_Master_Out[3267] = \<const0> ;
  assign LOCKSTEP_Master_Out[3268] = \<const0> ;
  assign LOCKSTEP_Master_Out[3269] = \<const0> ;
  assign LOCKSTEP_Master_Out[3270] = \<const0> ;
  assign LOCKSTEP_Master_Out[3271] = \<const0> ;
  assign LOCKSTEP_Master_Out[3272] = \<const0> ;
  assign LOCKSTEP_Master_Out[3273] = \<const0> ;
  assign LOCKSTEP_Master_Out[3274] = \<const0> ;
  assign LOCKSTEP_Master_Out[3275] = \<const0> ;
  assign LOCKSTEP_Master_Out[3276] = \<const0> ;
  assign LOCKSTEP_Master_Out[3277] = \<const0> ;
  assign LOCKSTEP_Master_Out[3278] = \<const0> ;
  assign LOCKSTEP_Master_Out[3279] = \<const0> ;
  assign LOCKSTEP_Master_Out[3280] = \<const0> ;
  assign LOCKSTEP_Master_Out[3281] = \<const0> ;
  assign LOCKSTEP_Master_Out[3282] = \<const0> ;
  assign LOCKSTEP_Master_Out[3283] = \<const0> ;
  assign LOCKSTEP_Master_Out[3284] = \<const0> ;
  assign LOCKSTEP_Master_Out[3285] = \<const0> ;
  assign LOCKSTEP_Master_Out[3286] = \<const0> ;
  assign LOCKSTEP_Master_Out[3287] = \<const0> ;
  assign LOCKSTEP_Master_Out[3288] = \<const0> ;
  assign LOCKSTEP_Master_Out[3289] = \<const0> ;
  assign LOCKSTEP_Master_Out[3290] = \<const0> ;
  assign LOCKSTEP_Master_Out[3291] = \<const0> ;
  assign LOCKSTEP_Master_Out[3292] = \<const0> ;
  assign LOCKSTEP_Master_Out[3293] = \<const0> ;
  assign LOCKSTEP_Master_Out[3294] = \<const0> ;
  assign LOCKSTEP_Master_Out[3295] = \<const0> ;
  assign LOCKSTEP_Master_Out[3296] = \<const0> ;
  assign LOCKSTEP_Master_Out[3297] = \<const0> ;
  assign LOCKSTEP_Master_Out[3298] = \<const0> ;
  assign LOCKSTEP_Master_Out[3299] = \<const0> ;
  assign LOCKSTEP_Master_Out[3300] = \<const0> ;
  assign LOCKSTEP_Master_Out[3301] = \<const0> ;
  assign LOCKSTEP_Master_Out[3302] = \<const0> ;
  assign LOCKSTEP_Master_Out[3303] = \<const0> ;
  assign LOCKSTEP_Master_Out[3304] = \<const0> ;
  assign LOCKSTEP_Master_Out[3305] = \<const0> ;
  assign LOCKSTEP_Master_Out[3306] = \<const0> ;
  assign LOCKSTEP_Master_Out[3307] = \<const0> ;
  assign LOCKSTEP_Master_Out[3308] = \<const0> ;
  assign LOCKSTEP_Master_Out[3309] = \<const0> ;
  assign LOCKSTEP_Master_Out[3310] = \<const0> ;
  assign LOCKSTEP_Master_Out[3311] = \<const0> ;
  assign LOCKSTEP_Master_Out[3312] = \<const0> ;
  assign LOCKSTEP_Master_Out[3313] = \<const0> ;
  assign LOCKSTEP_Master_Out[3314] = \<const0> ;
  assign LOCKSTEP_Master_Out[3315] = \<const0> ;
  assign LOCKSTEP_Master_Out[3316] = \<const0> ;
  assign LOCKSTEP_Master_Out[3317] = \<const0> ;
  assign LOCKSTEP_Master_Out[3318] = \<const0> ;
  assign LOCKSTEP_Master_Out[3319] = \<const0> ;
  assign LOCKSTEP_Master_Out[3320] = \<const0> ;
  assign LOCKSTEP_Master_Out[3321] = \<const0> ;
  assign LOCKSTEP_Master_Out[3322] = \<const0> ;
  assign LOCKSTEP_Master_Out[3323] = \<const0> ;
  assign LOCKSTEP_Master_Out[3324] = \<const0> ;
  assign LOCKSTEP_Master_Out[3325] = \<const0> ;
  assign LOCKSTEP_Master_Out[3326] = \<const0> ;
  assign LOCKSTEP_Master_Out[3327] = \<const0> ;
  assign LOCKSTEP_Master_Out[3328] = \<const0> ;
  assign LOCKSTEP_Master_Out[3329] = \<const0> ;
  assign LOCKSTEP_Master_Out[3330] = \<const0> ;
  assign LOCKSTEP_Master_Out[3331] = \<const0> ;
  assign LOCKSTEP_Master_Out[3332] = \<const0> ;
  assign LOCKSTEP_Master_Out[3333] = \<const0> ;
  assign LOCKSTEP_Master_Out[3334] = \<const0> ;
  assign LOCKSTEP_Master_Out[3335] = \<const0> ;
  assign LOCKSTEP_Master_Out[3336] = \<const0> ;
  assign LOCKSTEP_Master_Out[3337] = \<const0> ;
  assign LOCKSTEP_Master_Out[3338] = \<const0> ;
  assign LOCKSTEP_Master_Out[3339] = \<const0> ;
  assign LOCKSTEP_Master_Out[3340] = \<const0> ;
  assign LOCKSTEP_Master_Out[3341] = \<const0> ;
  assign LOCKSTEP_Master_Out[3342] = \<const0> ;
  assign LOCKSTEP_Master_Out[3343] = \<const0> ;
  assign LOCKSTEP_Master_Out[3344] = \<const0> ;
  assign LOCKSTEP_Master_Out[3345] = \<const0> ;
  assign LOCKSTEP_Master_Out[3346] = \<const0> ;
  assign LOCKSTEP_Master_Out[3347] = \<const0> ;
  assign LOCKSTEP_Master_Out[3348] = \<const0> ;
  assign LOCKSTEP_Master_Out[3349] = \<const0> ;
  assign LOCKSTEP_Master_Out[3350] = \<const0> ;
  assign LOCKSTEP_Master_Out[3351] = \<const0> ;
  assign LOCKSTEP_Master_Out[3352] = \<const0> ;
  assign LOCKSTEP_Master_Out[3353] = \<const0> ;
  assign LOCKSTEP_Master_Out[3354] = \<const0> ;
  assign LOCKSTEP_Master_Out[3355] = \<const0> ;
  assign LOCKSTEP_Master_Out[3356] = \<const0> ;
  assign LOCKSTEP_Master_Out[3357] = \<const0> ;
  assign LOCKSTEP_Master_Out[3358] = \<const0> ;
  assign LOCKSTEP_Master_Out[3359] = \<const0> ;
  assign LOCKSTEP_Master_Out[3360] = \<const0> ;
  assign LOCKSTEP_Master_Out[3361] = \<const0> ;
  assign LOCKSTEP_Master_Out[3362] = \<const0> ;
  assign LOCKSTEP_Master_Out[3363] = \<const0> ;
  assign LOCKSTEP_Master_Out[3364] = \<const0> ;
  assign LOCKSTEP_Master_Out[3365] = \<const0> ;
  assign LOCKSTEP_Master_Out[3366] = \<const0> ;
  assign LOCKSTEP_Master_Out[3367] = \<const0> ;
  assign LOCKSTEP_Master_Out[3368] = \<const0> ;
  assign LOCKSTEP_Master_Out[3369] = \<const0> ;
  assign LOCKSTEP_Master_Out[3370] = \<const0> ;
  assign LOCKSTEP_Master_Out[3371] = \<const0> ;
  assign LOCKSTEP_Master_Out[3372] = \<const0> ;
  assign LOCKSTEP_Master_Out[3373] = \<const0> ;
  assign LOCKSTEP_Master_Out[3374] = \<const0> ;
  assign LOCKSTEP_Master_Out[3375] = \<const0> ;
  assign LOCKSTEP_Master_Out[3376] = \<const0> ;
  assign LOCKSTEP_Master_Out[3377] = \<const0> ;
  assign LOCKSTEP_Master_Out[3378] = \<const0> ;
  assign LOCKSTEP_Master_Out[3379] = \<const0> ;
  assign LOCKSTEP_Master_Out[3380] = \<const0> ;
  assign LOCKSTEP_Master_Out[3381] = \<const0> ;
  assign LOCKSTEP_Master_Out[3382] = \<const0> ;
  assign LOCKSTEP_Master_Out[3383] = \<const0> ;
  assign LOCKSTEP_Master_Out[3384] = \<const0> ;
  assign LOCKSTEP_Master_Out[3385] = \<const0> ;
  assign LOCKSTEP_Master_Out[3386] = \<const0> ;
  assign LOCKSTEP_Master_Out[3387] = \<const0> ;
  assign LOCKSTEP_Master_Out[3388] = \<const0> ;
  assign LOCKSTEP_Master_Out[3389] = \<const0> ;
  assign LOCKSTEP_Master_Out[3390] = \<const0> ;
  assign LOCKSTEP_Master_Out[3391] = \<const0> ;
  assign LOCKSTEP_Master_Out[3392] = \<const0> ;
  assign LOCKSTEP_Master_Out[3393] = \<const0> ;
  assign LOCKSTEP_Master_Out[3394] = \<const0> ;
  assign LOCKSTEP_Master_Out[3395] = \<const0> ;
  assign LOCKSTEP_Master_Out[3396] = \<const0> ;
  assign LOCKSTEP_Master_Out[3397] = \<const0> ;
  assign LOCKSTEP_Master_Out[3398] = \<const0> ;
  assign LOCKSTEP_Master_Out[3399] = \<const0> ;
  assign LOCKSTEP_Master_Out[3400] = \<const0> ;
  assign LOCKSTEP_Master_Out[3401] = \<const0> ;
  assign LOCKSTEP_Master_Out[3402] = \<const0> ;
  assign LOCKSTEP_Master_Out[3403] = \<const0> ;
  assign LOCKSTEP_Master_Out[3404] = \<const0> ;
  assign LOCKSTEP_Master_Out[3405] = \<const0> ;
  assign LOCKSTEP_Master_Out[3406] = \<const0> ;
  assign LOCKSTEP_Master_Out[3407] = \<const0> ;
  assign LOCKSTEP_Master_Out[3408] = \<const0> ;
  assign LOCKSTEP_Master_Out[3409] = \<const0> ;
  assign LOCKSTEP_Master_Out[3410] = \<const0> ;
  assign LOCKSTEP_Master_Out[3411] = \<const0> ;
  assign LOCKSTEP_Master_Out[3412] = \<const0> ;
  assign LOCKSTEP_Master_Out[3413] = \<const0> ;
  assign LOCKSTEP_Master_Out[3414] = \<const0> ;
  assign LOCKSTEP_Master_Out[3415] = \<const0> ;
  assign LOCKSTEP_Master_Out[3416] = \<const0> ;
  assign LOCKSTEP_Master_Out[3417] = \<const0> ;
  assign LOCKSTEP_Master_Out[3418] = \<const0> ;
  assign LOCKSTEP_Master_Out[3419] = \<const0> ;
  assign LOCKSTEP_Master_Out[3420] = \<const0> ;
  assign LOCKSTEP_Master_Out[3421] = \<const0> ;
  assign LOCKSTEP_Master_Out[3422] = \<const0> ;
  assign LOCKSTEP_Master_Out[3423] = \<const0> ;
  assign LOCKSTEP_Master_Out[3424] = \<const0> ;
  assign LOCKSTEP_Master_Out[3425] = \<const0> ;
  assign LOCKSTEP_Master_Out[3426] = \<const0> ;
  assign LOCKSTEP_Master_Out[3427] = \<const0> ;
  assign LOCKSTEP_Master_Out[3428] = \<const0> ;
  assign LOCKSTEP_Master_Out[3429] = \<const0> ;
  assign LOCKSTEP_Master_Out[3430] = \<const0> ;
  assign LOCKSTEP_Master_Out[3431] = \<const0> ;
  assign LOCKSTEP_Master_Out[3432] = \<const0> ;
  assign LOCKSTEP_Master_Out[3433] = \<const0> ;
  assign LOCKSTEP_Master_Out[3434] = \<const0> ;
  assign LOCKSTEP_Master_Out[3435] = \<const0> ;
  assign LOCKSTEP_Master_Out[3436] = \<const0> ;
  assign LOCKSTEP_Master_Out[3437] = \<const0> ;
  assign LOCKSTEP_Master_Out[3438] = \<const0> ;
  assign LOCKSTEP_Master_Out[3439] = \<const0> ;
  assign LOCKSTEP_Master_Out[3440] = \<const0> ;
  assign LOCKSTEP_Master_Out[3441] = \<const0> ;
  assign LOCKSTEP_Master_Out[3442] = \<const0> ;
  assign LOCKSTEP_Master_Out[3443] = \<const0> ;
  assign LOCKSTEP_Master_Out[3444] = \<const0> ;
  assign LOCKSTEP_Master_Out[3445] = \<const0> ;
  assign LOCKSTEP_Master_Out[3446] = \<const0> ;
  assign LOCKSTEP_Master_Out[3447] = \<const0> ;
  assign LOCKSTEP_Master_Out[3448] = \<const0> ;
  assign LOCKSTEP_Master_Out[3449] = \<const0> ;
  assign LOCKSTEP_Master_Out[3450] = \<const0> ;
  assign LOCKSTEP_Master_Out[3451] = \<const0> ;
  assign LOCKSTEP_Master_Out[3452] = \<const0> ;
  assign LOCKSTEP_Master_Out[3453] = \<const0> ;
  assign LOCKSTEP_Master_Out[3454] = \<const0> ;
  assign LOCKSTEP_Master_Out[3455] = \<const0> ;
  assign LOCKSTEP_Master_Out[3456] = \<const0> ;
  assign LOCKSTEP_Master_Out[3457] = \<const0> ;
  assign LOCKSTEP_Master_Out[3458] = \<const0> ;
  assign LOCKSTEP_Master_Out[3459] = \<const0> ;
  assign LOCKSTEP_Master_Out[3460] = \<const0> ;
  assign LOCKSTEP_Master_Out[3461] = \<const0> ;
  assign LOCKSTEP_Master_Out[3462] = \<const0> ;
  assign LOCKSTEP_Master_Out[3463] = \<const0> ;
  assign LOCKSTEP_Master_Out[3464] = \<const0> ;
  assign LOCKSTEP_Master_Out[3465] = \<const0> ;
  assign LOCKSTEP_Master_Out[3466] = \<const0> ;
  assign LOCKSTEP_Master_Out[3467] = \<const0> ;
  assign LOCKSTEP_Master_Out[3468] = \<const0> ;
  assign LOCKSTEP_Master_Out[3469] = \<const0> ;
  assign LOCKSTEP_Master_Out[3470] = \<const0> ;
  assign LOCKSTEP_Master_Out[3471] = \<const0> ;
  assign LOCKSTEP_Master_Out[3472] = \<const0> ;
  assign LOCKSTEP_Master_Out[3473] = \<const0> ;
  assign LOCKSTEP_Master_Out[3474] = \<const0> ;
  assign LOCKSTEP_Master_Out[3475] = \<const0> ;
  assign LOCKSTEP_Master_Out[3476] = \<const0> ;
  assign LOCKSTEP_Master_Out[3477] = \<const0> ;
  assign LOCKSTEP_Master_Out[3478] = \<const0> ;
  assign LOCKSTEP_Master_Out[3479] = \<const0> ;
  assign LOCKSTEP_Master_Out[3480] = \<const0> ;
  assign LOCKSTEP_Master_Out[3481] = \<const0> ;
  assign LOCKSTEP_Master_Out[3482] = \<const0> ;
  assign LOCKSTEP_Master_Out[3483] = \<const0> ;
  assign LOCKSTEP_Master_Out[3484] = \<const0> ;
  assign LOCKSTEP_Master_Out[3485] = \<const0> ;
  assign LOCKSTEP_Master_Out[3486] = \<const0> ;
  assign LOCKSTEP_Master_Out[3487] = \<const0> ;
  assign LOCKSTEP_Master_Out[3488] = \<const0> ;
  assign LOCKSTEP_Master_Out[3489] = \<const0> ;
  assign LOCKSTEP_Master_Out[3490] = \<const0> ;
  assign LOCKSTEP_Master_Out[3491] = \<const0> ;
  assign LOCKSTEP_Master_Out[3492] = \<const0> ;
  assign LOCKSTEP_Master_Out[3493] = \<const0> ;
  assign LOCKSTEP_Master_Out[3494] = \<const0> ;
  assign LOCKSTEP_Master_Out[3495] = \<const0> ;
  assign LOCKSTEP_Master_Out[3496] = \<const0> ;
  assign LOCKSTEP_Master_Out[3497] = \<const0> ;
  assign LOCKSTEP_Master_Out[3498] = \<const0> ;
  assign LOCKSTEP_Master_Out[3499] = \<const0> ;
  assign LOCKSTEP_Master_Out[3500] = \<const0> ;
  assign LOCKSTEP_Master_Out[3501] = \<const0> ;
  assign LOCKSTEP_Master_Out[3502] = \<const0> ;
  assign LOCKSTEP_Master_Out[3503] = \<const0> ;
  assign LOCKSTEP_Master_Out[3504] = \<const0> ;
  assign LOCKSTEP_Master_Out[3505] = \<const0> ;
  assign LOCKSTEP_Master_Out[3506] = \<const0> ;
  assign LOCKSTEP_Master_Out[3507] = \<const0> ;
  assign LOCKSTEP_Master_Out[3508] = \<const0> ;
  assign LOCKSTEP_Master_Out[3509] = \<const0> ;
  assign LOCKSTEP_Master_Out[3510] = \<const0> ;
  assign LOCKSTEP_Master_Out[3511] = \<const0> ;
  assign LOCKSTEP_Master_Out[3512] = \<const0> ;
  assign LOCKSTEP_Master_Out[3513] = \<const0> ;
  assign LOCKSTEP_Master_Out[3514] = \<const0> ;
  assign LOCKSTEP_Master_Out[3515] = \<const0> ;
  assign LOCKSTEP_Master_Out[3516] = \<const0> ;
  assign LOCKSTEP_Master_Out[3517] = \<const0> ;
  assign LOCKSTEP_Master_Out[3518] = \<const0> ;
  assign LOCKSTEP_Master_Out[3519] = \<const0> ;
  assign LOCKSTEP_Master_Out[3520] = \<const0> ;
  assign LOCKSTEP_Master_Out[3521] = \<const0> ;
  assign LOCKSTEP_Master_Out[3522] = \<const0> ;
  assign LOCKSTEP_Master_Out[3523] = \<const0> ;
  assign LOCKSTEP_Master_Out[3524] = \<const0> ;
  assign LOCKSTEP_Master_Out[3525] = \<const0> ;
  assign LOCKSTEP_Master_Out[3526] = \<const0> ;
  assign LOCKSTEP_Master_Out[3527] = \<const0> ;
  assign LOCKSTEP_Master_Out[3528] = \<const0> ;
  assign LOCKSTEP_Master_Out[3529] = \<const0> ;
  assign LOCKSTEP_Master_Out[3530] = \<const0> ;
  assign LOCKSTEP_Master_Out[3531] = \<const0> ;
  assign LOCKSTEP_Master_Out[3532] = \<const0> ;
  assign LOCKSTEP_Master_Out[3533] = \<const0> ;
  assign LOCKSTEP_Master_Out[3534] = \<const0> ;
  assign LOCKSTEP_Master_Out[3535] = \<const0> ;
  assign LOCKSTEP_Master_Out[3536] = \<const0> ;
  assign LOCKSTEP_Master_Out[3537] = \<const0> ;
  assign LOCKSTEP_Master_Out[3538] = \<const0> ;
  assign LOCKSTEP_Master_Out[3539] = \<const0> ;
  assign LOCKSTEP_Master_Out[3540] = \<const0> ;
  assign LOCKSTEP_Master_Out[3541] = \<const0> ;
  assign LOCKSTEP_Master_Out[3542] = \<const0> ;
  assign LOCKSTEP_Master_Out[3543] = \<const0> ;
  assign LOCKSTEP_Master_Out[3544] = \<const0> ;
  assign LOCKSTEP_Master_Out[3545] = \<const0> ;
  assign LOCKSTEP_Master_Out[3546] = \<const0> ;
  assign LOCKSTEP_Master_Out[3547] = \<const0> ;
  assign LOCKSTEP_Master_Out[3548] = \<const0> ;
  assign LOCKSTEP_Master_Out[3549] = \<const0> ;
  assign LOCKSTEP_Master_Out[3550] = \<const0> ;
  assign LOCKSTEP_Master_Out[3551] = \<const0> ;
  assign LOCKSTEP_Master_Out[3552] = \<const0> ;
  assign LOCKSTEP_Master_Out[3553] = \<const0> ;
  assign LOCKSTEP_Master_Out[3554] = \<const0> ;
  assign LOCKSTEP_Master_Out[3555] = \<const0> ;
  assign LOCKSTEP_Master_Out[3556] = \<const0> ;
  assign LOCKSTEP_Master_Out[3557] = \<const0> ;
  assign LOCKSTEP_Master_Out[3558] = \<const0> ;
  assign LOCKSTEP_Master_Out[3559] = \<const0> ;
  assign LOCKSTEP_Master_Out[3560] = \<const0> ;
  assign LOCKSTEP_Master_Out[3561] = \<const0> ;
  assign LOCKSTEP_Master_Out[3562] = \<const0> ;
  assign LOCKSTEP_Master_Out[3563] = \<const0> ;
  assign LOCKSTEP_Master_Out[3564] = \<const0> ;
  assign LOCKSTEP_Master_Out[3565] = \<const0> ;
  assign LOCKSTEP_Master_Out[3566] = \<const0> ;
  assign LOCKSTEP_Master_Out[3567] = \<const0> ;
  assign LOCKSTEP_Master_Out[3568] = \<const0> ;
  assign LOCKSTEP_Master_Out[3569] = \<const0> ;
  assign LOCKSTEP_Master_Out[3570] = \<const0> ;
  assign LOCKSTEP_Master_Out[3571] = \<const0> ;
  assign LOCKSTEP_Master_Out[3572] = \<const0> ;
  assign LOCKSTEP_Master_Out[3573] = \<const0> ;
  assign LOCKSTEP_Master_Out[3574] = \<const0> ;
  assign LOCKSTEP_Master_Out[3575] = \<const0> ;
  assign LOCKSTEP_Master_Out[3576] = \<const0> ;
  assign LOCKSTEP_Master_Out[3577] = \<const0> ;
  assign LOCKSTEP_Master_Out[3578] = \<const0> ;
  assign LOCKSTEP_Master_Out[3579] = \<const0> ;
  assign LOCKSTEP_Master_Out[3580] = \<const0> ;
  assign LOCKSTEP_Master_Out[3581] = \<const0> ;
  assign LOCKSTEP_Master_Out[3582] = \<const0> ;
  assign LOCKSTEP_Master_Out[3583] = \<const0> ;
  assign LOCKSTEP_Master_Out[3584] = \<const0> ;
  assign LOCKSTEP_Master_Out[3585] = \<const0> ;
  assign LOCKSTEP_Master_Out[3586] = \<const0> ;
  assign LOCKSTEP_Master_Out[3587] = \<const0> ;
  assign LOCKSTEP_Master_Out[3588] = \<const0> ;
  assign LOCKSTEP_Master_Out[3589] = \<const0> ;
  assign LOCKSTEP_Master_Out[3590] = \<const0> ;
  assign LOCKSTEP_Master_Out[3591] = \<const0> ;
  assign LOCKSTEP_Master_Out[3592] = \<const0> ;
  assign LOCKSTEP_Master_Out[3593] = \<const0> ;
  assign LOCKSTEP_Master_Out[3594] = \<const0> ;
  assign LOCKSTEP_Master_Out[3595] = \<const0> ;
  assign LOCKSTEP_Master_Out[3596] = \<const0> ;
  assign LOCKSTEP_Master_Out[3597] = \<const0> ;
  assign LOCKSTEP_Master_Out[3598] = \<const0> ;
  assign LOCKSTEP_Master_Out[3599] = \<const0> ;
  assign LOCKSTEP_Master_Out[3600] = \<const0> ;
  assign LOCKSTEP_Master_Out[3601] = \<const0> ;
  assign LOCKSTEP_Master_Out[3602] = \<const0> ;
  assign LOCKSTEP_Master_Out[3603] = \<const0> ;
  assign LOCKSTEP_Master_Out[3604] = \<const0> ;
  assign LOCKSTEP_Master_Out[3605] = \<const0> ;
  assign LOCKSTEP_Master_Out[3606] = \<const0> ;
  assign LOCKSTEP_Master_Out[3607] = \<const0> ;
  assign LOCKSTEP_Master_Out[3608] = \<const0> ;
  assign LOCKSTEP_Master_Out[3609] = \<const0> ;
  assign LOCKSTEP_Master_Out[3610] = \<const0> ;
  assign LOCKSTEP_Master_Out[3611] = \<const0> ;
  assign LOCKSTEP_Master_Out[3612] = \<const0> ;
  assign LOCKSTEP_Master_Out[3613] = \<const0> ;
  assign LOCKSTEP_Master_Out[3614] = \<const0> ;
  assign LOCKSTEP_Master_Out[3615] = \<const0> ;
  assign LOCKSTEP_Master_Out[3616] = \<const0> ;
  assign LOCKSTEP_Master_Out[3617] = \<const0> ;
  assign LOCKSTEP_Master_Out[3618] = \<const0> ;
  assign LOCKSTEP_Master_Out[3619] = \<const0> ;
  assign LOCKSTEP_Master_Out[3620] = \<const0> ;
  assign LOCKSTEP_Master_Out[3621] = \<const0> ;
  assign LOCKSTEP_Master_Out[3622] = \<const0> ;
  assign LOCKSTEP_Master_Out[3623] = \<const0> ;
  assign LOCKSTEP_Master_Out[3624] = \<const0> ;
  assign LOCKSTEP_Master_Out[3625] = \<const0> ;
  assign LOCKSTEP_Master_Out[3626] = \<const0> ;
  assign LOCKSTEP_Master_Out[3627] = \<const0> ;
  assign LOCKSTEP_Master_Out[3628] = \<const0> ;
  assign LOCKSTEP_Master_Out[3629] = \<const0> ;
  assign LOCKSTEP_Master_Out[3630] = \<const0> ;
  assign LOCKSTEP_Master_Out[3631] = \<const0> ;
  assign LOCKSTEP_Master_Out[3632] = \<const0> ;
  assign LOCKSTEP_Master_Out[3633] = \<const0> ;
  assign LOCKSTEP_Master_Out[3634] = \<const0> ;
  assign LOCKSTEP_Master_Out[3635] = \<const0> ;
  assign LOCKSTEP_Master_Out[3636] = \<const0> ;
  assign LOCKSTEP_Master_Out[3637] = \<const0> ;
  assign LOCKSTEP_Master_Out[3638] = \<const0> ;
  assign LOCKSTEP_Master_Out[3639] = \<const0> ;
  assign LOCKSTEP_Master_Out[3640] = \<const0> ;
  assign LOCKSTEP_Master_Out[3641] = \<const0> ;
  assign LOCKSTEP_Master_Out[3642] = \<const0> ;
  assign LOCKSTEP_Master_Out[3643] = \<const0> ;
  assign LOCKSTEP_Master_Out[3644] = \<const0> ;
  assign LOCKSTEP_Master_Out[3645] = \<const0> ;
  assign LOCKSTEP_Master_Out[3646] = \<const0> ;
  assign LOCKSTEP_Master_Out[3647] = \<const0> ;
  assign LOCKSTEP_Master_Out[3648] = \<const0> ;
  assign LOCKSTEP_Master_Out[3649] = \<const0> ;
  assign LOCKSTEP_Master_Out[3650] = \<const0> ;
  assign LOCKSTEP_Master_Out[3651] = \<const0> ;
  assign LOCKSTEP_Master_Out[3652] = \<const0> ;
  assign LOCKSTEP_Master_Out[3653] = \<const0> ;
  assign LOCKSTEP_Master_Out[3654] = \<const0> ;
  assign LOCKSTEP_Master_Out[3655] = \<const0> ;
  assign LOCKSTEP_Master_Out[3656] = \<const0> ;
  assign LOCKSTEP_Master_Out[3657] = \<const0> ;
  assign LOCKSTEP_Master_Out[3658] = \<const0> ;
  assign LOCKSTEP_Master_Out[3659] = \<const0> ;
  assign LOCKSTEP_Master_Out[3660] = \<const0> ;
  assign LOCKSTEP_Master_Out[3661] = \<const0> ;
  assign LOCKSTEP_Master_Out[3662] = \<const0> ;
  assign LOCKSTEP_Master_Out[3663] = \<const0> ;
  assign LOCKSTEP_Master_Out[3664] = \<const0> ;
  assign LOCKSTEP_Master_Out[3665] = \<const0> ;
  assign LOCKSTEP_Master_Out[3666] = \<const0> ;
  assign LOCKSTEP_Master_Out[3667] = \<const0> ;
  assign LOCKSTEP_Master_Out[3668] = \<const0> ;
  assign LOCKSTEP_Master_Out[3669] = \<const0> ;
  assign LOCKSTEP_Master_Out[3670] = \<const0> ;
  assign LOCKSTEP_Master_Out[3671] = \<const0> ;
  assign LOCKSTEP_Master_Out[3672] = \<const0> ;
  assign LOCKSTEP_Master_Out[3673] = \<const0> ;
  assign LOCKSTEP_Master_Out[3674] = \<const0> ;
  assign LOCKSTEP_Master_Out[3675] = \<const0> ;
  assign LOCKSTEP_Master_Out[3676] = \<const0> ;
  assign LOCKSTEP_Master_Out[3677] = \<const0> ;
  assign LOCKSTEP_Master_Out[3678] = \<const0> ;
  assign LOCKSTEP_Master_Out[3679] = \<const0> ;
  assign LOCKSTEP_Master_Out[3680] = \<const0> ;
  assign LOCKSTEP_Master_Out[3681] = \<const0> ;
  assign LOCKSTEP_Master_Out[3682] = \<const0> ;
  assign LOCKSTEP_Master_Out[3683] = \<const0> ;
  assign LOCKSTEP_Master_Out[3684] = \<const0> ;
  assign LOCKSTEP_Master_Out[3685] = \<const0> ;
  assign LOCKSTEP_Master_Out[3686] = \<const0> ;
  assign LOCKSTEP_Master_Out[3687] = \<const0> ;
  assign LOCKSTEP_Master_Out[3688] = \<const0> ;
  assign LOCKSTEP_Master_Out[3689] = \<const0> ;
  assign LOCKSTEP_Master_Out[3690] = \<const0> ;
  assign LOCKSTEP_Master_Out[3691] = \<const0> ;
  assign LOCKSTEP_Master_Out[3692] = \<const0> ;
  assign LOCKSTEP_Master_Out[3693] = \<const0> ;
  assign LOCKSTEP_Master_Out[3694] = \<const0> ;
  assign LOCKSTEP_Master_Out[3695] = \<const0> ;
  assign LOCKSTEP_Master_Out[3696] = \<const0> ;
  assign LOCKSTEP_Master_Out[3697] = \<const0> ;
  assign LOCKSTEP_Master_Out[3698] = \<const0> ;
  assign LOCKSTEP_Master_Out[3699] = \<const0> ;
  assign LOCKSTEP_Master_Out[3700] = \<const0> ;
  assign LOCKSTEP_Master_Out[3701] = \<const0> ;
  assign LOCKSTEP_Master_Out[3702] = \<const0> ;
  assign LOCKSTEP_Master_Out[3703] = \<const0> ;
  assign LOCKSTEP_Master_Out[3704] = \<const0> ;
  assign LOCKSTEP_Master_Out[3705] = \<const0> ;
  assign LOCKSTEP_Master_Out[3706] = \<const0> ;
  assign LOCKSTEP_Master_Out[3707] = \<const0> ;
  assign LOCKSTEP_Master_Out[3708] = \<const0> ;
  assign LOCKSTEP_Master_Out[3709] = \<const0> ;
  assign LOCKSTEP_Master_Out[3710] = \<const0> ;
  assign LOCKSTEP_Master_Out[3711] = \<const0> ;
  assign LOCKSTEP_Master_Out[3712] = \<const0> ;
  assign LOCKSTEP_Master_Out[3713] = \<const0> ;
  assign LOCKSTEP_Master_Out[3714] = \<const0> ;
  assign LOCKSTEP_Master_Out[3715] = \<const0> ;
  assign LOCKSTEP_Master_Out[3716] = \<const0> ;
  assign LOCKSTEP_Master_Out[3717] = \<const0> ;
  assign LOCKSTEP_Master_Out[3718] = \<const0> ;
  assign LOCKSTEP_Master_Out[3719] = \<const0> ;
  assign LOCKSTEP_Master_Out[3720] = \<const0> ;
  assign LOCKSTEP_Master_Out[3721] = \<const0> ;
  assign LOCKSTEP_Master_Out[3722] = \<const0> ;
  assign LOCKSTEP_Master_Out[3723] = \<const0> ;
  assign LOCKSTEP_Master_Out[3724] = \<const0> ;
  assign LOCKSTEP_Master_Out[3725] = \<const0> ;
  assign LOCKSTEP_Master_Out[3726] = \<const0> ;
  assign LOCKSTEP_Master_Out[3727] = \<const0> ;
  assign LOCKSTEP_Master_Out[3728] = \<const0> ;
  assign LOCKSTEP_Master_Out[3729] = \<const0> ;
  assign LOCKSTEP_Master_Out[3730] = \<const0> ;
  assign LOCKSTEP_Master_Out[3731] = \<const0> ;
  assign LOCKSTEP_Master_Out[3732] = \<const0> ;
  assign LOCKSTEP_Master_Out[3733] = \<const0> ;
  assign LOCKSTEP_Master_Out[3734] = \<const0> ;
  assign LOCKSTEP_Master_Out[3735] = \<const0> ;
  assign LOCKSTEP_Master_Out[3736] = \<const0> ;
  assign LOCKSTEP_Master_Out[3737] = \<const0> ;
  assign LOCKSTEP_Master_Out[3738] = \<const0> ;
  assign LOCKSTEP_Master_Out[3739] = \<const0> ;
  assign LOCKSTEP_Master_Out[3740] = \<const0> ;
  assign LOCKSTEP_Master_Out[3741] = \<const0> ;
  assign LOCKSTEP_Master_Out[3742] = \<const0> ;
  assign LOCKSTEP_Master_Out[3743] = \<const0> ;
  assign LOCKSTEP_Master_Out[3744] = \<const0> ;
  assign LOCKSTEP_Master_Out[3745] = \<const0> ;
  assign LOCKSTEP_Master_Out[3746] = \<const0> ;
  assign LOCKSTEP_Master_Out[3747] = \<const0> ;
  assign LOCKSTEP_Master_Out[3748] = \<const0> ;
  assign LOCKSTEP_Master_Out[3749] = \<const0> ;
  assign LOCKSTEP_Master_Out[3750] = \<const0> ;
  assign LOCKSTEP_Master_Out[3751] = \<const0> ;
  assign LOCKSTEP_Master_Out[3752] = \<const0> ;
  assign LOCKSTEP_Master_Out[3753] = \<const0> ;
  assign LOCKSTEP_Master_Out[3754] = \<const0> ;
  assign LOCKSTEP_Master_Out[3755] = \<const0> ;
  assign LOCKSTEP_Master_Out[3756] = \<const0> ;
  assign LOCKSTEP_Master_Out[3757] = \<const0> ;
  assign LOCKSTEP_Master_Out[3758] = \<const0> ;
  assign LOCKSTEP_Master_Out[3759] = \<const0> ;
  assign LOCKSTEP_Master_Out[3760] = \<const0> ;
  assign LOCKSTEP_Master_Out[3761] = \<const0> ;
  assign LOCKSTEP_Master_Out[3762] = \<const0> ;
  assign LOCKSTEP_Master_Out[3763] = \<const0> ;
  assign LOCKSTEP_Master_Out[3764] = \<const0> ;
  assign LOCKSTEP_Master_Out[3765] = \<const0> ;
  assign LOCKSTEP_Master_Out[3766] = \<const0> ;
  assign LOCKSTEP_Master_Out[3767] = \<const0> ;
  assign LOCKSTEP_Master_Out[3768] = \<const0> ;
  assign LOCKSTEP_Master_Out[3769] = \<const0> ;
  assign LOCKSTEP_Master_Out[3770] = \<const0> ;
  assign LOCKSTEP_Master_Out[3771] = \<const0> ;
  assign LOCKSTEP_Master_Out[3772] = \<const0> ;
  assign LOCKSTEP_Master_Out[3773] = \<const0> ;
  assign LOCKSTEP_Master_Out[3774] = \<const0> ;
  assign LOCKSTEP_Master_Out[3775] = \<const0> ;
  assign LOCKSTEP_Master_Out[3776] = \<const0> ;
  assign LOCKSTEP_Master_Out[3777] = \<const0> ;
  assign LOCKSTEP_Master_Out[3778] = \<const0> ;
  assign LOCKSTEP_Master_Out[3779] = \<const0> ;
  assign LOCKSTEP_Master_Out[3780] = \<const0> ;
  assign LOCKSTEP_Master_Out[3781] = \<const0> ;
  assign LOCKSTEP_Master_Out[3782] = \<const0> ;
  assign LOCKSTEP_Master_Out[3783] = \<const0> ;
  assign LOCKSTEP_Master_Out[3784] = \<const0> ;
  assign LOCKSTEP_Master_Out[3785] = \<const0> ;
  assign LOCKSTEP_Master_Out[3786] = \<const0> ;
  assign LOCKSTEP_Master_Out[3787] = \<const0> ;
  assign LOCKSTEP_Master_Out[3788] = \<const0> ;
  assign LOCKSTEP_Master_Out[3789] = \<const0> ;
  assign LOCKSTEP_Master_Out[3790] = \<const0> ;
  assign LOCKSTEP_Master_Out[3791] = \<const0> ;
  assign LOCKSTEP_Master_Out[3792] = \<const0> ;
  assign LOCKSTEP_Master_Out[3793] = \<const0> ;
  assign LOCKSTEP_Master_Out[3794] = \<const0> ;
  assign LOCKSTEP_Master_Out[3795] = \<const0> ;
  assign LOCKSTEP_Master_Out[3796] = \<const0> ;
  assign LOCKSTEP_Master_Out[3797] = \<const0> ;
  assign LOCKSTEP_Master_Out[3798] = \<const0> ;
  assign LOCKSTEP_Master_Out[3799] = \<const0> ;
  assign LOCKSTEP_Master_Out[3800] = \<const0> ;
  assign LOCKSTEP_Master_Out[3801] = \<const0> ;
  assign LOCKSTEP_Master_Out[3802] = \<const0> ;
  assign LOCKSTEP_Master_Out[3803] = \<const0> ;
  assign LOCKSTEP_Master_Out[3804] = \<const0> ;
  assign LOCKSTEP_Master_Out[3805] = \<const0> ;
  assign LOCKSTEP_Master_Out[3806] = \<const0> ;
  assign LOCKSTEP_Master_Out[3807] = \<const0> ;
  assign LOCKSTEP_Master_Out[3808] = \<const0> ;
  assign LOCKSTEP_Master_Out[3809] = \<const0> ;
  assign LOCKSTEP_Master_Out[3810] = \<const0> ;
  assign LOCKSTEP_Master_Out[3811] = \<const0> ;
  assign LOCKSTEP_Master_Out[3812] = \<const0> ;
  assign LOCKSTEP_Master_Out[3813] = \<const0> ;
  assign LOCKSTEP_Master_Out[3814] = \<const0> ;
  assign LOCKSTEP_Master_Out[3815] = \<const0> ;
  assign LOCKSTEP_Master_Out[3816] = \<const0> ;
  assign LOCKSTEP_Master_Out[3817] = \<const0> ;
  assign LOCKSTEP_Master_Out[3818] = \<const0> ;
  assign LOCKSTEP_Master_Out[3819] = \<const0> ;
  assign LOCKSTEP_Master_Out[3820] = \<const0> ;
  assign LOCKSTEP_Master_Out[3821] = \<const0> ;
  assign LOCKSTEP_Master_Out[3822] = \<const0> ;
  assign LOCKSTEP_Master_Out[3823] = \<const0> ;
  assign LOCKSTEP_Master_Out[3824] = \<const0> ;
  assign LOCKSTEP_Master_Out[3825] = \<const0> ;
  assign LOCKSTEP_Master_Out[3826] = \<const0> ;
  assign LOCKSTEP_Master_Out[3827] = \<const0> ;
  assign LOCKSTEP_Master_Out[3828] = \<const0> ;
  assign LOCKSTEP_Master_Out[3829] = \<const0> ;
  assign LOCKSTEP_Master_Out[3830] = \<const0> ;
  assign LOCKSTEP_Master_Out[3831] = \<const0> ;
  assign LOCKSTEP_Master_Out[3832] = \<const0> ;
  assign LOCKSTEP_Master_Out[3833] = \<const0> ;
  assign LOCKSTEP_Master_Out[3834] = \<const0> ;
  assign LOCKSTEP_Master_Out[3835] = \<const0> ;
  assign LOCKSTEP_Master_Out[3836] = \<const0> ;
  assign LOCKSTEP_Master_Out[3837] = \<const0> ;
  assign LOCKSTEP_Master_Out[3838] = \<const0> ;
  assign LOCKSTEP_Master_Out[3839] = \<const0> ;
  assign LOCKSTEP_Master_Out[3840] = \<const0> ;
  assign LOCKSTEP_Master_Out[3841] = \<const0> ;
  assign LOCKSTEP_Master_Out[3842] = \<const0> ;
  assign LOCKSTEP_Master_Out[3843] = \<const0> ;
  assign LOCKSTEP_Master_Out[3844] = \<const0> ;
  assign LOCKSTEP_Master_Out[3845] = \<const0> ;
  assign LOCKSTEP_Master_Out[3846] = \<const0> ;
  assign LOCKSTEP_Master_Out[3847] = \<const0> ;
  assign LOCKSTEP_Master_Out[3848] = \<const0> ;
  assign LOCKSTEP_Master_Out[3849] = \<const0> ;
  assign LOCKSTEP_Master_Out[3850] = \<const0> ;
  assign LOCKSTEP_Master_Out[3851] = \<const0> ;
  assign LOCKSTEP_Master_Out[3852] = \<const0> ;
  assign LOCKSTEP_Master_Out[3853] = \<const0> ;
  assign LOCKSTEP_Master_Out[3854] = \<const0> ;
  assign LOCKSTEP_Master_Out[3855] = \<const0> ;
  assign LOCKSTEP_Master_Out[3856] = \<const0> ;
  assign LOCKSTEP_Master_Out[3857] = \<const0> ;
  assign LOCKSTEP_Master_Out[3858] = \<const0> ;
  assign LOCKSTEP_Master_Out[3859] = \<const0> ;
  assign LOCKSTEP_Master_Out[3860] = \<const0> ;
  assign LOCKSTEP_Master_Out[3861] = \<const0> ;
  assign LOCKSTEP_Master_Out[3862] = \<const0> ;
  assign LOCKSTEP_Master_Out[3863] = \<const0> ;
  assign LOCKSTEP_Master_Out[3864] = \<const0> ;
  assign LOCKSTEP_Master_Out[3865] = \<const0> ;
  assign LOCKSTEP_Master_Out[3866] = \<const0> ;
  assign LOCKSTEP_Master_Out[3867] = \<const0> ;
  assign LOCKSTEP_Master_Out[3868] = \<const0> ;
  assign LOCKSTEP_Master_Out[3869] = \<const0> ;
  assign LOCKSTEP_Master_Out[3870] = \<const0> ;
  assign LOCKSTEP_Master_Out[3871] = \<const0> ;
  assign LOCKSTEP_Master_Out[3872] = \<const0> ;
  assign LOCKSTEP_Master_Out[3873] = \<const0> ;
  assign LOCKSTEP_Master_Out[3874] = \<const0> ;
  assign LOCKSTEP_Master_Out[3875] = \<const0> ;
  assign LOCKSTEP_Master_Out[3876] = \<const0> ;
  assign LOCKSTEP_Master_Out[3877] = \<const0> ;
  assign LOCKSTEP_Master_Out[3878] = \<const0> ;
  assign LOCKSTEP_Master_Out[3879] = \<const0> ;
  assign LOCKSTEP_Master_Out[3880] = \<const0> ;
  assign LOCKSTEP_Master_Out[3881] = \<const0> ;
  assign LOCKSTEP_Master_Out[3882] = \<const0> ;
  assign LOCKSTEP_Master_Out[3883] = \<const0> ;
  assign LOCKSTEP_Master_Out[3884] = \<const0> ;
  assign LOCKSTEP_Master_Out[3885] = \<const0> ;
  assign LOCKSTEP_Master_Out[3886] = \<const0> ;
  assign LOCKSTEP_Master_Out[3887] = \<const0> ;
  assign LOCKSTEP_Master_Out[3888] = \<const0> ;
  assign LOCKSTEP_Master_Out[3889] = \<const0> ;
  assign LOCKSTEP_Master_Out[3890] = \<const0> ;
  assign LOCKSTEP_Master_Out[3891] = \<const0> ;
  assign LOCKSTEP_Master_Out[3892] = \<const0> ;
  assign LOCKSTEP_Master_Out[3893] = \<const0> ;
  assign LOCKSTEP_Master_Out[3894] = \<const0> ;
  assign LOCKSTEP_Master_Out[3895] = \<const0> ;
  assign LOCKSTEP_Master_Out[3896] = \<const0> ;
  assign LOCKSTEP_Master_Out[3897] = \<const0> ;
  assign LOCKSTEP_Master_Out[3898] = \<const0> ;
  assign LOCKSTEP_Master_Out[3899] = \<const0> ;
  assign LOCKSTEP_Master_Out[3900] = \<const0> ;
  assign LOCKSTEP_Master_Out[3901] = \<const0> ;
  assign LOCKSTEP_Master_Out[3902] = \<const0> ;
  assign LOCKSTEP_Master_Out[3903] = \<const0> ;
  assign LOCKSTEP_Master_Out[3904] = \<const0> ;
  assign LOCKSTEP_Master_Out[3905] = \<const0> ;
  assign LOCKSTEP_Master_Out[3906] = \<const0> ;
  assign LOCKSTEP_Master_Out[3907] = \<const0> ;
  assign LOCKSTEP_Master_Out[3908] = \<const0> ;
  assign LOCKSTEP_Master_Out[3909] = \<const0> ;
  assign LOCKSTEP_Master_Out[3910] = \<const0> ;
  assign LOCKSTEP_Master_Out[3911] = \<const0> ;
  assign LOCKSTEP_Master_Out[3912] = \<const0> ;
  assign LOCKSTEP_Master_Out[3913] = \<const0> ;
  assign LOCKSTEP_Master_Out[3914] = \<const0> ;
  assign LOCKSTEP_Master_Out[3915] = \<const0> ;
  assign LOCKSTEP_Master_Out[3916] = \<const0> ;
  assign LOCKSTEP_Master_Out[3917] = \<const0> ;
  assign LOCKSTEP_Master_Out[3918] = \<const0> ;
  assign LOCKSTEP_Master_Out[3919] = \<const0> ;
  assign LOCKSTEP_Master_Out[3920] = \<const0> ;
  assign LOCKSTEP_Master_Out[3921] = \<const0> ;
  assign LOCKSTEP_Master_Out[3922] = \<const0> ;
  assign LOCKSTEP_Master_Out[3923] = \<const0> ;
  assign LOCKSTEP_Master_Out[3924] = \<const0> ;
  assign LOCKSTEP_Master_Out[3925] = \<const0> ;
  assign LOCKSTEP_Master_Out[3926] = \<const0> ;
  assign LOCKSTEP_Master_Out[3927] = \<const0> ;
  assign LOCKSTEP_Master_Out[3928] = \<const0> ;
  assign LOCKSTEP_Master_Out[3929] = \<const0> ;
  assign LOCKSTEP_Master_Out[3930] = \<const0> ;
  assign LOCKSTEP_Master_Out[3931] = \<const0> ;
  assign LOCKSTEP_Master_Out[3932] = \<const0> ;
  assign LOCKSTEP_Master_Out[3933] = \<const0> ;
  assign LOCKSTEP_Master_Out[3934] = \<const0> ;
  assign LOCKSTEP_Master_Out[3935] = \<const0> ;
  assign LOCKSTEP_Master_Out[3936] = \<const0> ;
  assign LOCKSTEP_Master_Out[3937] = \<const0> ;
  assign LOCKSTEP_Master_Out[3938] = \<const0> ;
  assign LOCKSTEP_Master_Out[3939] = \<const0> ;
  assign LOCKSTEP_Master_Out[3940] = \<const0> ;
  assign LOCKSTEP_Master_Out[3941] = \<const0> ;
  assign LOCKSTEP_Master_Out[3942] = \<const0> ;
  assign LOCKSTEP_Master_Out[3943] = \<const0> ;
  assign LOCKSTEP_Master_Out[3944] = \<const0> ;
  assign LOCKSTEP_Master_Out[3945] = \<const0> ;
  assign LOCKSTEP_Master_Out[3946] = \<const0> ;
  assign LOCKSTEP_Master_Out[3947] = \<const0> ;
  assign LOCKSTEP_Master_Out[3948] = \<const0> ;
  assign LOCKSTEP_Master_Out[3949] = \<const0> ;
  assign LOCKSTEP_Master_Out[3950] = \<const0> ;
  assign LOCKSTEP_Master_Out[3951] = \<const0> ;
  assign LOCKSTEP_Master_Out[3952] = \<const0> ;
  assign LOCKSTEP_Master_Out[3953] = \<const0> ;
  assign LOCKSTEP_Master_Out[3954] = \<const0> ;
  assign LOCKSTEP_Master_Out[3955] = \<const0> ;
  assign LOCKSTEP_Master_Out[3956] = \<const0> ;
  assign LOCKSTEP_Master_Out[3957] = \<const0> ;
  assign LOCKSTEP_Master_Out[3958] = \<const0> ;
  assign LOCKSTEP_Master_Out[3959] = \<const0> ;
  assign LOCKSTEP_Master_Out[3960] = \<const0> ;
  assign LOCKSTEP_Master_Out[3961] = \<const0> ;
  assign LOCKSTEP_Master_Out[3962] = \<const0> ;
  assign LOCKSTEP_Master_Out[3963] = \<const0> ;
  assign LOCKSTEP_Master_Out[3964] = \<const0> ;
  assign LOCKSTEP_Master_Out[3965] = \<const0> ;
  assign LOCKSTEP_Master_Out[3966] = \<const0> ;
  assign LOCKSTEP_Master_Out[3967] = \<const0> ;
  assign LOCKSTEP_Master_Out[3968] = \<const0> ;
  assign LOCKSTEP_Master_Out[3969] = \<const0> ;
  assign LOCKSTEP_Master_Out[3970] = \<const0> ;
  assign LOCKSTEP_Master_Out[3971] = \<const0> ;
  assign LOCKSTEP_Master_Out[3972] = \<const0> ;
  assign LOCKSTEP_Master_Out[3973] = \<const0> ;
  assign LOCKSTEP_Master_Out[3974] = \<const0> ;
  assign LOCKSTEP_Master_Out[3975] = \<const0> ;
  assign LOCKSTEP_Master_Out[3976] = \<const0> ;
  assign LOCKSTEP_Master_Out[3977] = \<const0> ;
  assign LOCKSTEP_Master_Out[3978] = \<const0> ;
  assign LOCKSTEP_Master_Out[3979] = \<const0> ;
  assign LOCKSTEP_Master_Out[3980] = \<const0> ;
  assign LOCKSTEP_Master_Out[3981] = \<const0> ;
  assign LOCKSTEP_Master_Out[3982] = \<const0> ;
  assign LOCKSTEP_Master_Out[3983] = \<const0> ;
  assign LOCKSTEP_Master_Out[3984] = \<const0> ;
  assign LOCKSTEP_Master_Out[3985] = \<const0> ;
  assign LOCKSTEP_Master_Out[3986] = \<const0> ;
  assign LOCKSTEP_Master_Out[3987] = \<const0> ;
  assign LOCKSTEP_Master_Out[3988] = \<const0> ;
  assign LOCKSTEP_Master_Out[3989] = \<const0> ;
  assign LOCKSTEP_Master_Out[3990] = \<const0> ;
  assign LOCKSTEP_Master_Out[3991] = \<const0> ;
  assign LOCKSTEP_Master_Out[3992] = \<const0> ;
  assign LOCKSTEP_Master_Out[3993] = \<const0> ;
  assign LOCKSTEP_Master_Out[3994] = \<const0> ;
  assign LOCKSTEP_Master_Out[3995] = \<const0> ;
  assign LOCKSTEP_Master_Out[3996] = \<const0> ;
  assign LOCKSTEP_Master_Out[3997] = \<const0> ;
  assign LOCKSTEP_Master_Out[3998] = \<const0> ;
  assign LOCKSTEP_Master_Out[3999] = \<const0> ;
  assign LOCKSTEP_Master_Out[4000] = \<const0> ;
  assign LOCKSTEP_Master_Out[4001] = \<const0> ;
  assign LOCKSTEP_Master_Out[4002] = \<const0> ;
  assign LOCKSTEP_Master_Out[4003] = \<const0> ;
  assign LOCKSTEP_Master_Out[4004] = \<const0> ;
  assign LOCKSTEP_Master_Out[4005] = \<const0> ;
  assign LOCKSTEP_Master_Out[4006] = \<const0> ;
  assign LOCKSTEP_Master_Out[4007] = \<const0> ;
  assign LOCKSTEP_Master_Out[4008] = \<const0> ;
  assign LOCKSTEP_Master_Out[4009] = \<const0> ;
  assign LOCKSTEP_Master_Out[4010] = \<const0> ;
  assign LOCKSTEP_Master_Out[4011] = \<const0> ;
  assign LOCKSTEP_Master_Out[4012] = \<const0> ;
  assign LOCKSTEP_Master_Out[4013] = \<const0> ;
  assign LOCKSTEP_Master_Out[4014] = \<const0> ;
  assign LOCKSTEP_Master_Out[4015] = \<const0> ;
  assign LOCKSTEP_Master_Out[4016] = \<const0> ;
  assign LOCKSTEP_Master_Out[4017] = \<const0> ;
  assign LOCKSTEP_Master_Out[4018] = \<const0> ;
  assign LOCKSTEP_Master_Out[4019] = \<const0> ;
  assign LOCKSTEP_Master_Out[4020] = \<const0> ;
  assign LOCKSTEP_Master_Out[4021] = \<const0> ;
  assign LOCKSTEP_Master_Out[4022] = \<const0> ;
  assign LOCKSTEP_Master_Out[4023] = \<const0> ;
  assign LOCKSTEP_Master_Out[4024] = \<const0> ;
  assign LOCKSTEP_Master_Out[4025] = \<const0> ;
  assign LOCKSTEP_Master_Out[4026] = \<const0> ;
  assign LOCKSTEP_Master_Out[4027] = \<const0> ;
  assign LOCKSTEP_Master_Out[4028] = \<const0> ;
  assign LOCKSTEP_Master_Out[4029] = \<const0> ;
  assign LOCKSTEP_Master_Out[4030] = \<const0> ;
  assign LOCKSTEP_Master_Out[4031] = \<const0> ;
  assign LOCKSTEP_Master_Out[4032] = \<const0> ;
  assign LOCKSTEP_Master_Out[4033] = \<const0> ;
  assign LOCKSTEP_Master_Out[4034] = \<const0> ;
  assign LOCKSTEP_Master_Out[4035] = \<const0> ;
  assign LOCKSTEP_Master_Out[4036] = \<const0> ;
  assign LOCKSTEP_Master_Out[4037] = \<const0> ;
  assign LOCKSTEP_Master_Out[4038] = \<const0> ;
  assign LOCKSTEP_Master_Out[4039] = \<const0> ;
  assign LOCKSTEP_Master_Out[4040] = \<const0> ;
  assign LOCKSTEP_Master_Out[4041] = \<const0> ;
  assign LOCKSTEP_Master_Out[4042] = \<const0> ;
  assign LOCKSTEP_Master_Out[4043] = \<const0> ;
  assign LOCKSTEP_Master_Out[4044] = \<const0> ;
  assign LOCKSTEP_Master_Out[4045] = \<const0> ;
  assign LOCKSTEP_Master_Out[4046] = \<const0> ;
  assign LOCKSTEP_Master_Out[4047] = \<const0> ;
  assign LOCKSTEP_Master_Out[4048] = \<const0> ;
  assign LOCKSTEP_Master_Out[4049] = \<const0> ;
  assign LOCKSTEP_Master_Out[4050] = \<const0> ;
  assign LOCKSTEP_Master_Out[4051] = \<const0> ;
  assign LOCKSTEP_Master_Out[4052] = \<const0> ;
  assign LOCKSTEP_Master_Out[4053] = \<const0> ;
  assign LOCKSTEP_Master_Out[4054] = \<const0> ;
  assign LOCKSTEP_Master_Out[4055] = \<const0> ;
  assign LOCKSTEP_Master_Out[4056] = \<const0> ;
  assign LOCKSTEP_Master_Out[4057] = \<const0> ;
  assign LOCKSTEP_Master_Out[4058] = \<const0> ;
  assign LOCKSTEP_Master_Out[4059] = \<const0> ;
  assign LOCKSTEP_Master_Out[4060] = \<const0> ;
  assign LOCKSTEP_Master_Out[4061] = \<const0> ;
  assign LOCKSTEP_Master_Out[4062] = \<const0> ;
  assign LOCKSTEP_Master_Out[4063] = \<const0> ;
  assign LOCKSTEP_Master_Out[4064] = \<const0> ;
  assign LOCKSTEP_Master_Out[4065] = \<const0> ;
  assign LOCKSTEP_Master_Out[4066] = \<const0> ;
  assign LOCKSTEP_Master_Out[4067] = \<const0> ;
  assign LOCKSTEP_Master_Out[4068] = \<const0> ;
  assign LOCKSTEP_Master_Out[4069] = \<const0> ;
  assign LOCKSTEP_Master_Out[4070] = \<const0> ;
  assign LOCKSTEP_Master_Out[4071] = \<const0> ;
  assign LOCKSTEP_Master_Out[4072] = \<const0> ;
  assign LOCKSTEP_Master_Out[4073] = \<const0> ;
  assign LOCKSTEP_Master_Out[4074] = \<const0> ;
  assign LOCKSTEP_Master_Out[4075] = \<const0> ;
  assign LOCKSTEP_Master_Out[4076] = \<const0> ;
  assign LOCKSTEP_Master_Out[4077] = \<const0> ;
  assign LOCKSTEP_Master_Out[4078] = \<const0> ;
  assign LOCKSTEP_Master_Out[4079] = \<const0> ;
  assign LOCKSTEP_Master_Out[4080] = \<const0> ;
  assign LOCKSTEP_Master_Out[4081] = \<const0> ;
  assign LOCKSTEP_Master_Out[4082] = \<const0> ;
  assign LOCKSTEP_Master_Out[4083] = \<const0> ;
  assign LOCKSTEP_Master_Out[4084] = \<const0> ;
  assign LOCKSTEP_Master_Out[4085] = \<const0> ;
  assign LOCKSTEP_Master_Out[4086] = \<const0> ;
  assign LOCKSTEP_Master_Out[4087] = \<const0> ;
  assign LOCKSTEP_Master_Out[4088] = \<const0> ;
  assign LOCKSTEP_Master_Out[4089] = \<const0> ;
  assign LOCKSTEP_Master_Out[4090] = \<const0> ;
  assign LOCKSTEP_Master_Out[4091] = \<const0> ;
  assign LOCKSTEP_Master_Out[4092] = \<const0> ;
  assign LOCKSTEP_Master_Out[4093] = \<const0> ;
  assign LOCKSTEP_Master_Out[4094] = \<const0> ;
  assign LOCKSTEP_Master_Out[4095] = \<const0> ;
  assign LOCKSTEP_Out[0] = \^LOCKSTEP_Out [0];
  assign LOCKSTEP_Out[1] = \<const0> ;
  assign LOCKSTEP_Out[2:35] = \^LOCKSTEP_Out [2:35];
  assign LOCKSTEP_Out[36] = \<const0> ;
  assign LOCKSTEP_Out[37] = \<const0> ;
  assign LOCKSTEP_Out[38] = \<const0> ;
  assign LOCKSTEP_Out[39] = \<const0> ;
  assign LOCKSTEP_Out[40] = \<const0> ;
  assign LOCKSTEP_Out[41] = \<const0> ;
  assign LOCKSTEP_Out[42] = \<const0> ;
  assign LOCKSTEP_Out[43] = \<const0> ;
  assign LOCKSTEP_Out[44] = \<const0> ;
  assign LOCKSTEP_Out[45] = \<const0> ;
  assign LOCKSTEP_Out[46] = \<const0> ;
  assign LOCKSTEP_Out[47] = \<const0> ;
  assign LOCKSTEP_Out[48] = \<const0> ;
  assign LOCKSTEP_Out[49] = \<const0> ;
  assign LOCKSTEP_Out[50] = \<const0> ;
  assign LOCKSTEP_Out[51] = \<const0> ;
  assign LOCKSTEP_Out[52] = \<const0> ;
  assign LOCKSTEP_Out[53] = \<const0> ;
  assign LOCKSTEP_Out[54] = \<const0> ;
  assign LOCKSTEP_Out[55] = \<const0> ;
  assign LOCKSTEP_Out[56] = \<const0> ;
  assign LOCKSTEP_Out[57] = \<const0> ;
  assign LOCKSTEP_Out[58] = \<const0> ;
  assign LOCKSTEP_Out[59] = \<const0> ;
  assign LOCKSTEP_Out[60] = \<const0> ;
  assign LOCKSTEP_Out[61] = \<const0> ;
  assign LOCKSTEP_Out[62] = \<const0> ;
  assign LOCKSTEP_Out[63] = \<const0> ;
  assign LOCKSTEP_Out[64] = \<const0> ;
  assign LOCKSTEP_Out[65] = \<const0> ;
  assign LOCKSTEP_Out[66] = \<const0> ;
  assign LOCKSTEP_Out[67] = \<const0> ;
  assign LOCKSTEP_Out[68:99] = \^LOCKSTEP_Out [68:99];
  assign LOCKSTEP_Out[100] = \<const0> ;
  assign LOCKSTEP_Out[101] = \<const0> ;
  assign LOCKSTEP_Out[102] = \<const0> ;
  assign LOCKSTEP_Out[103] = \<const0> ;
  assign LOCKSTEP_Out[104] = \<const0> ;
  assign LOCKSTEP_Out[105] = \<const0> ;
  assign LOCKSTEP_Out[106] = \<const0> ;
  assign LOCKSTEP_Out[107] = \<const0> ;
  assign LOCKSTEP_Out[108] = \<const0> ;
  assign LOCKSTEP_Out[109] = \<const0> ;
  assign LOCKSTEP_Out[110] = \<const0> ;
  assign LOCKSTEP_Out[111] = \<const0> ;
  assign LOCKSTEP_Out[112] = \<const0> ;
  assign LOCKSTEP_Out[113] = \<const0> ;
  assign LOCKSTEP_Out[114] = \<const0> ;
  assign LOCKSTEP_Out[115] = \<const0> ;
  assign LOCKSTEP_Out[116] = \<const0> ;
  assign LOCKSTEP_Out[117] = \<const0> ;
  assign LOCKSTEP_Out[118] = \<const0> ;
  assign LOCKSTEP_Out[119] = \<const0> ;
  assign LOCKSTEP_Out[120] = \<const0> ;
  assign LOCKSTEP_Out[121] = \<const0> ;
  assign LOCKSTEP_Out[122] = \<const0> ;
  assign LOCKSTEP_Out[123] = \<const0> ;
  assign LOCKSTEP_Out[124] = \<const0> ;
  assign LOCKSTEP_Out[125] = \<const0> ;
  assign LOCKSTEP_Out[126] = \<const0> ;
  assign LOCKSTEP_Out[127] = \<const0> ;
  assign LOCKSTEP_Out[128] = \<const0> ;
  assign LOCKSTEP_Out[129] = \<const0> ;
  assign LOCKSTEP_Out[130] = \<const0> ;
  assign LOCKSTEP_Out[131] = \<const0> ;
  assign LOCKSTEP_Out[132:163] = \^LOCKSTEP_Out [132:163];
  assign LOCKSTEP_Out[164] = \<const0> ;
  assign LOCKSTEP_Out[165] = \<const0> ;
  assign LOCKSTEP_Out[166] = \<const0> ;
  assign LOCKSTEP_Out[167] = \<const0> ;
  assign LOCKSTEP_Out[168] = \<const0> ;
  assign LOCKSTEP_Out[169] = \<const0> ;
  assign LOCKSTEP_Out[170] = \<const0> ;
  assign LOCKSTEP_Out[171] = \<const0> ;
  assign LOCKSTEP_Out[172] = \<const0> ;
  assign LOCKSTEP_Out[173] = \<const0> ;
  assign LOCKSTEP_Out[174] = \<const0> ;
  assign LOCKSTEP_Out[175] = \<const0> ;
  assign LOCKSTEP_Out[176] = \<const0> ;
  assign LOCKSTEP_Out[177] = \<const0> ;
  assign LOCKSTEP_Out[178] = \<const0> ;
  assign LOCKSTEP_Out[179] = \<const0> ;
  assign LOCKSTEP_Out[180] = \<const0> ;
  assign LOCKSTEP_Out[181] = \<const0> ;
  assign LOCKSTEP_Out[182] = \<const0> ;
  assign LOCKSTEP_Out[183] = \<const0> ;
  assign LOCKSTEP_Out[184] = \<const0> ;
  assign LOCKSTEP_Out[185] = \<const0> ;
  assign LOCKSTEP_Out[186] = \<const0> ;
  assign LOCKSTEP_Out[187] = \<const0> ;
  assign LOCKSTEP_Out[188] = \<const0> ;
  assign LOCKSTEP_Out[189] = \<const0> ;
  assign LOCKSTEP_Out[190] = \<const0> ;
  assign LOCKSTEP_Out[191] = \<const0> ;
  assign LOCKSTEP_Out[192] = \<const0> ;
  assign LOCKSTEP_Out[193] = \<const0> ;
  assign LOCKSTEP_Out[194] = \<const0> ;
  assign LOCKSTEP_Out[195] = \<const0> ;
  assign LOCKSTEP_Out[196:202] = \^LOCKSTEP_Out [196:202];
  assign LOCKSTEP_Out[203] = \<const0> ;
  assign LOCKSTEP_Out[204] = \<const0> ;
  assign LOCKSTEP_Out[205] = \<const0> ;
  assign LOCKSTEP_Out[206] = \<const0> ;
  assign LOCKSTEP_Out[207] = \<const0> ;
  assign LOCKSTEP_Out[208] = \<const0> ;
  assign LOCKSTEP_Out[209] = \<const0> ;
  assign LOCKSTEP_Out[210] = \<const0> ;
  assign LOCKSTEP_Out[211] = \<const0> ;
  assign LOCKSTEP_Out[212] = \<const0> ;
  assign LOCKSTEP_Out[213] = \<const0> ;
  assign LOCKSTEP_Out[214] = \<const0> ;
  assign LOCKSTEP_Out[215] = \<const0> ;
  assign LOCKSTEP_Out[216] = \<const0> ;
  assign LOCKSTEP_Out[217] = \<const0> ;
  assign LOCKSTEP_Out[218] = \<const0> ;
  assign LOCKSTEP_Out[219] = \<const0> ;
  assign LOCKSTEP_Out[220] = \<const0> ;
  assign LOCKSTEP_Out[221] = \<const0> ;
  assign LOCKSTEP_Out[222] = \<const0> ;
  assign LOCKSTEP_Out[223] = \<const0> ;
  assign LOCKSTEP_Out[224] = \<const0> ;
  assign LOCKSTEP_Out[225] = \<const0> ;
  assign LOCKSTEP_Out[226] = \<const0> ;
  assign LOCKSTEP_Out[227] = \<const0> ;
  assign LOCKSTEP_Out[228] = \<const0> ;
  assign LOCKSTEP_Out[229] = \<const0> ;
  assign LOCKSTEP_Out[230] = \<const0> ;
  assign LOCKSTEP_Out[231] = \<const0> ;
  assign LOCKSTEP_Out[232] = \<const0> ;
  assign LOCKSTEP_Out[233] = \<const0> ;
  assign LOCKSTEP_Out[234] = \<const0> ;
  assign LOCKSTEP_Out[235] = \<const0> ;
  assign LOCKSTEP_Out[236] = \<const0> ;
  assign LOCKSTEP_Out[237] = \<const0> ;
  assign LOCKSTEP_Out[238] = \<const0> ;
  assign LOCKSTEP_Out[239] = \<const0> ;
  assign LOCKSTEP_Out[240] = \<const0> ;
  assign LOCKSTEP_Out[241] = \<const0> ;
  assign LOCKSTEP_Out[242] = \<const0> ;
  assign LOCKSTEP_Out[243] = \<const0> ;
  assign LOCKSTEP_Out[244] = \<const0> ;
  assign LOCKSTEP_Out[245] = \<const0> ;
  assign LOCKSTEP_Out[246] = \<const0> ;
  assign LOCKSTEP_Out[247] = \<const0> ;
  assign LOCKSTEP_Out[248] = \<const0> ;
  assign LOCKSTEP_Out[249] = \<const0> ;
  assign LOCKSTEP_Out[250] = \<const0> ;
  assign LOCKSTEP_Out[251] = \<const0> ;
  assign LOCKSTEP_Out[252] = \<const0> ;
  assign LOCKSTEP_Out[253] = \<const0> ;
  assign LOCKSTEP_Out[254] = \<const0> ;
  assign LOCKSTEP_Out[255] = \<const0> ;
  assign LOCKSTEP_Out[256] = \<const0> ;
  assign LOCKSTEP_Out[257] = \<const0> ;
  assign LOCKSTEP_Out[258] = \<const0> ;
  assign LOCKSTEP_Out[259] = \<const0> ;
  assign LOCKSTEP_Out[260] = \<const0> ;
  assign LOCKSTEP_Out[261] = \<const0> ;
  assign LOCKSTEP_Out[262] = \<const0> ;
  assign LOCKSTEP_Out[263] = \<const0> ;
  assign LOCKSTEP_Out[264] = \<const0> ;
  assign LOCKSTEP_Out[265] = \<const0> ;
  assign LOCKSTEP_Out[266] = \<const0> ;
  assign LOCKSTEP_Out[267] = \<const0> ;
  assign LOCKSTEP_Out[268] = \<const0> ;
  assign LOCKSTEP_Out[269] = \<const0> ;
  assign LOCKSTEP_Out[270] = \<const0> ;
  assign LOCKSTEP_Out[271] = \<const0> ;
  assign LOCKSTEP_Out[272] = \<const0> ;
  assign LOCKSTEP_Out[273] = \<const0> ;
  assign LOCKSTEP_Out[274] = \<const0> ;
  assign LOCKSTEP_Out[275] = \<const0> ;
  assign LOCKSTEP_Out[276] = \<const0> ;
  assign LOCKSTEP_Out[277] = \<const0> ;
  assign LOCKSTEP_Out[278] = \<const0> ;
  assign LOCKSTEP_Out[279] = \<const0> ;
  assign LOCKSTEP_Out[280] = \<const0> ;
  assign LOCKSTEP_Out[281] = \<const0> ;
  assign LOCKSTEP_Out[282] = \<const0> ;
  assign LOCKSTEP_Out[283] = \<const0> ;
  assign LOCKSTEP_Out[284] = \<const0> ;
  assign LOCKSTEP_Out[285] = \<const0> ;
  assign LOCKSTEP_Out[286] = \<const0> ;
  assign LOCKSTEP_Out[287] = \<const0> ;
  assign LOCKSTEP_Out[288] = \<const0> ;
  assign LOCKSTEP_Out[289] = \<const0> ;
  assign LOCKSTEP_Out[290] = \<const0> ;
  assign LOCKSTEP_Out[291] = \<const0> ;
  assign LOCKSTEP_Out[292] = \<const0> ;
  assign LOCKSTEP_Out[293] = \<const0> ;
  assign LOCKSTEP_Out[294] = \<const0> ;
  assign LOCKSTEP_Out[295] = \<const0> ;
  assign LOCKSTEP_Out[296] = \<const0> ;
  assign LOCKSTEP_Out[297] = \<const0> ;
  assign LOCKSTEP_Out[298] = \<const0> ;
  assign LOCKSTEP_Out[299] = \<const0> ;
  assign LOCKSTEP_Out[300] = \<const0> ;
  assign LOCKSTEP_Out[301] = \<const0> ;
  assign LOCKSTEP_Out[302] = \<const0> ;
  assign LOCKSTEP_Out[303] = \<const0> ;
  assign LOCKSTEP_Out[304] = \<const0> ;
  assign LOCKSTEP_Out[305] = \<const0> ;
  assign LOCKSTEP_Out[306] = \<const0> ;
  assign LOCKSTEP_Out[307] = \<const0> ;
  assign LOCKSTEP_Out[308] = \<const0> ;
  assign LOCKSTEP_Out[309] = \<const0> ;
  assign LOCKSTEP_Out[310] = \<const0> ;
  assign LOCKSTEP_Out[311] = \<const0> ;
  assign LOCKSTEP_Out[312] = \<const0> ;
  assign LOCKSTEP_Out[313] = \<const0> ;
  assign LOCKSTEP_Out[314] = \<const0> ;
  assign LOCKSTEP_Out[315] = \<const0> ;
  assign LOCKSTEP_Out[316] = \<const0> ;
  assign LOCKSTEP_Out[317] = \<const0> ;
  assign LOCKSTEP_Out[318] = \<const0> ;
  assign LOCKSTEP_Out[319] = \<const0> ;
  assign LOCKSTEP_Out[320] = \<const0> ;
  assign LOCKSTEP_Out[321] = \<const0> ;
  assign LOCKSTEP_Out[322] = \<const0> ;
  assign LOCKSTEP_Out[323] = \<const0> ;
  assign LOCKSTEP_Out[324] = \<const0> ;
  assign LOCKSTEP_Out[325] = \<const0> ;
  assign LOCKSTEP_Out[326] = \<const0> ;
  assign LOCKSTEP_Out[327] = \<const0> ;
  assign LOCKSTEP_Out[328] = \<const0> ;
  assign LOCKSTEP_Out[329] = \<const0> ;
  assign LOCKSTEP_Out[330] = \<const0> ;
  assign LOCKSTEP_Out[331] = \<const0> ;
  assign LOCKSTEP_Out[332] = \<const0> ;
  assign LOCKSTEP_Out[333] = \<const0> ;
  assign LOCKSTEP_Out[334] = \<const0> ;
  assign LOCKSTEP_Out[335] = \<const0> ;
  assign LOCKSTEP_Out[336] = \<const0> ;
  assign LOCKSTEP_Out[337] = \<const0> ;
  assign LOCKSTEP_Out[338] = \<const0> ;
  assign LOCKSTEP_Out[339] = \<const0> ;
  assign LOCKSTEP_Out[340] = \<const0> ;
  assign LOCKSTEP_Out[341] = \<const0> ;
  assign LOCKSTEP_Out[342] = \<const0> ;
  assign LOCKSTEP_Out[343] = \<const0> ;
  assign LOCKSTEP_Out[344] = \<const0> ;
  assign LOCKSTEP_Out[345] = \<const0> ;
  assign LOCKSTEP_Out[346] = \<const0> ;
  assign LOCKSTEP_Out[347] = \<const0> ;
  assign LOCKSTEP_Out[348] = \<const0> ;
  assign LOCKSTEP_Out[349] = \<const0> ;
  assign LOCKSTEP_Out[350] = \<const0> ;
  assign LOCKSTEP_Out[351] = \<const0> ;
  assign LOCKSTEP_Out[352] = \<const0> ;
  assign LOCKSTEP_Out[353] = \<const0> ;
  assign LOCKSTEP_Out[354] = \<const0> ;
  assign LOCKSTEP_Out[355] = \<const0> ;
  assign LOCKSTEP_Out[356] = \<const0> ;
  assign LOCKSTEP_Out[357] = \<const0> ;
  assign LOCKSTEP_Out[358] = \<const0> ;
  assign LOCKSTEP_Out[359] = \<const0> ;
  assign LOCKSTEP_Out[360] = \<const0> ;
  assign LOCKSTEP_Out[361] = \<const0> ;
  assign LOCKSTEP_Out[362] = \<const0> ;
  assign LOCKSTEP_Out[363] = \<const0> ;
  assign LOCKSTEP_Out[364] = \<const0> ;
  assign LOCKSTEP_Out[365] = \<const0> ;
  assign LOCKSTEP_Out[366] = \<const0> ;
  assign LOCKSTEP_Out[367] = \<const0> ;
  assign LOCKSTEP_Out[368] = \<const0> ;
  assign LOCKSTEP_Out[369] = \<const0> ;
  assign LOCKSTEP_Out[370] = \<const0> ;
  assign LOCKSTEP_Out[371] = \<const0> ;
  assign LOCKSTEP_Out[372] = \<const0> ;
  assign LOCKSTEP_Out[373] = \<const0> ;
  assign LOCKSTEP_Out[374] = \<const0> ;
  assign LOCKSTEP_Out[375] = \<const0> ;
  assign LOCKSTEP_Out[376] = \<const0> ;
  assign LOCKSTEP_Out[377] = \<const0> ;
  assign LOCKSTEP_Out[378] = \<const0> ;
  assign LOCKSTEP_Out[379] = \<const0> ;
  assign LOCKSTEP_Out[380] = \<const0> ;
  assign LOCKSTEP_Out[381] = \<const0> ;
  assign LOCKSTEP_Out[382] = \<const0> ;
  assign LOCKSTEP_Out[383] = \<const0> ;
  assign LOCKSTEP_Out[384] = \<const0> ;
  assign LOCKSTEP_Out[385] = \<const0> ;
  assign LOCKSTEP_Out[386] = \<const0> ;
  assign LOCKSTEP_Out[387] = \<const0> ;
  assign LOCKSTEP_Out[388] = \<const0> ;
  assign LOCKSTEP_Out[389] = \<const0> ;
  assign LOCKSTEP_Out[390] = \<const0> ;
  assign LOCKSTEP_Out[391] = \<const0> ;
  assign LOCKSTEP_Out[392] = \<const0> ;
  assign LOCKSTEP_Out[393] = \<const0> ;
  assign LOCKSTEP_Out[394] = \<const0> ;
  assign LOCKSTEP_Out[395] = \<const0> ;
  assign LOCKSTEP_Out[396] = \<const0> ;
  assign LOCKSTEP_Out[397] = \<const0> ;
  assign LOCKSTEP_Out[398] = \<const0> ;
  assign LOCKSTEP_Out[399] = \<const0> ;
  assign LOCKSTEP_Out[400] = \<const0> ;
  assign LOCKSTEP_Out[401] = \<const0> ;
  assign LOCKSTEP_Out[402] = \<const0> ;
  assign LOCKSTEP_Out[403] = \<const0> ;
  assign LOCKSTEP_Out[404] = \<const0> ;
  assign LOCKSTEP_Out[405] = \<const0> ;
  assign LOCKSTEP_Out[406] = \<const0> ;
  assign LOCKSTEP_Out[407] = \<const0> ;
  assign LOCKSTEP_Out[408] = \<const0> ;
  assign LOCKSTEP_Out[409] = \<const0> ;
  assign LOCKSTEP_Out[410] = \<const0> ;
  assign LOCKSTEP_Out[411] = \<const0> ;
  assign LOCKSTEP_Out[412] = \<const0> ;
  assign LOCKSTEP_Out[413] = \<const0> ;
  assign LOCKSTEP_Out[414] = \<const0> ;
  assign LOCKSTEP_Out[415] = \<const0> ;
  assign LOCKSTEP_Out[416] = \<const0> ;
  assign LOCKSTEP_Out[417] = \<const0> ;
  assign LOCKSTEP_Out[418] = \<const0> ;
  assign LOCKSTEP_Out[419] = \<const0> ;
  assign LOCKSTEP_Out[420] = \<const0> ;
  assign LOCKSTEP_Out[421] = \<const0> ;
  assign LOCKSTEP_Out[422] = \<const0> ;
  assign LOCKSTEP_Out[423] = \<const0> ;
  assign LOCKSTEP_Out[424] = \<const0> ;
  assign LOCKSTEP_Out[425] = \<const0> ;
  assign LOCKSTEP_Out[426] = \<const0> ;
  assign LOCKSTEP_Out[427] = \<const0> ;
  assign LOCKSTEP_Out[428] = \<const0> ;
  assign LOCKSTEP_Out[429] = \<const0> ;
  assign LOCKSTEP_Out[430] = \<const0> ;
  assign LOCKSTEP_Out[431] = \<const0> ;
  assign LOCKSTEP_Out[432] = \<const0> ;
  assign LOCKSTEP_Out[433] = \<const0> ;
  assign LOCKSTEP_Out[434] = \<const0> ;
  assign LOCKSTEP_Out[435] = \<const0> ;
  assign LOCKSTEP_Out[436] = \<const0> ;
  assign LOCKSTEP_Out[437] = \<const0> ;
  assign LOCKSTEP_Out[438] = \<const0> ;
  assign LOCKSTEP_Out[439] = \<const0> ;
  assign LOCKSTEP_Out[440] = \<const0> ;
  assign LOCKSTEP_Out[441] = \<const0> ;
  assign LOCKSTEP_Out[442] = \<const0> ;
  assign LOCKSTEP_Out[443] = \<const0> ;
  assign LOCKSTEP_Out[444] = \<const0> ;
  assign LOCKSTEP_Out[445] = \<const0> ;
  assign LOCKSTEP_Out[446] = \<const0> ;
  assign LOCKSTEP_Out[447] = \<const0> ;
  assign LOCKSTEP_Out[448] = \<const0> ;
  assign LOCKSTEP_Out[449] = \<const0> ;
  assign LOCKSTEP_Out[450] = \<const0> ;
  assign LOCKSTEP_Out[451] = \<const0> ;
  assign LOCKSTEP_Out[452] = \<const0> ;
  assign LOCKSTEP_Out[453] = \<const0> ;
  assign LOCKSTEP_Out[454] = \<const0> ;
  assign LOCKSTEP_Out[455] = \<const0> ;
  assign LOCKSTEP_Out[456] = \<const0> ;
  assign LOCKSTEP_Out[457] = \<const0> ;
  assign LOCKSTEP_Out[458] = \<const0> ;
  assign LOCKSTEP_Out[459] = \<const0> ;
  assign LOCKSTEP_Out[460] = \<const0> ;
  assign LOCKSTEP_Out[461] = \<const0> ;
  assign LOCKSTEP_Out[462] = \<const0> ;
  assign LOCKSTEP_Out[463] = \<const0> ;
  assign LOCKSTEP_Out[464] = \<const0> ;
  assign LOCKSTEP_Out[465] = \<const0> ;
  assign LOCKSTEP_Out[466:497] = \^LOCKSTEP_Out [632:663];
  assign LOCKSTEP_Out[498] = \<const0> ;
  assign LOCKSTEP_Out[499] = \<const0> ;
  assign LOCKSTEP_Out[500] = \<const0> ;
  assign LOCKSTEP_Out[501] = \<const0> ;
  assign LOCKSTEP_Out[502] = \<const0> ;
  assign LOCKSTEP_Out[503] = \<const0> ;
  assign LOCKSTEP_Out[504] = \<const0> ;
  assign LOCKSTEP_Out[505] = \<const0> ;
  assign LOCKSTEP_Out[506] = \<const0> ;
  assign LOCKSTEP_Out[507] = \<const0> ;
  assign LOCKSTEP_Out[508] = \<const0> ;
  assign LOCKSTEP_Out[509] = \<const0> ;
  assign LOCKSTEP_Out[510] = \<const0> ;
  assign LOCKSTEP_Out[511] = \<const0> ;
  assign LOCKSTEP_Out[512] = \<const0> ;
  assign LOCKSTEP_Out[513] = \<const0> ;
  assign LOCKSTEP_Out[514] = \<const0> ;
  assign LOCKSTEP_Out[515] = \<const0> ;
  assign LOCKSTEP_Out[516] = \<const0> ;
  assign LOCKSTEP_Out[517] = \<const0> ;
  assign LOCKSTEP_Out[518] = \<const0> ;
  assign LOCKSTEP_Out[519] = \<const0> ;
  assign LOCKSTEP_Out[520] = \<const0> ;
  assign LOCKSTEP_Out[521] = \<const0> ;
  assign LOCKSTEP_Out[522] = \<const0> ;
  assign LOCKSTEP_Out[523] = \<const0> ;
  assign LOCKSTEP_Out[524] = \<const0> ;
  assign LOCKSTEP_Out[525] = \<const0> ;
  assign LOCKSTEP_Out[526] = \<const0> ;
  assign LOCKSTEP_Out[527] = \<const0> ;
  assign LOCKSTEP_Out[528] = \<const0> ;
  assign LOCKSTEP_Out[529] = \<const0> ;
  assign LOCKSTEP_Out[530] = \<const0> ;
  assign LOCKSTEP_Out[531] = \<const0> ;
  assign LOCKSTEP_Out[532] = \<const0> ;
  assign LOCKSTEP_Out[533] = \<const0> ;
  assign LOCKSTEP_Out[534] = \<const0> ;
  assign LOCKSTEP_Out[535] = \<const0> ;
  assign LOCKSTEP_Out[536] = \<const0> ;
  assign LOCKSTEP_Out[537] = \<const0> ;
  assign LOCKSTEP_Out[538] = \<const0> ;
  assign LOCKSTEP_Out[539] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[540] = \<const0> ;
  assign LOCKSTEP_Out[541] = \<const0> ;
  assign LOCKSTEP_Out[542] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[543] = \<const0> ;
  assign LOCKSTEP_Out[544] = \<const0> ;
  assign LOCKSTEP_Out[545] = \<const0> ;
  assign LOCKSTEP_Out[546] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[547] = \<const0> ;
  assign LOCKSTEP_Out[548] = \<const0> ;
  assign LOCKSTEP_Out[549] = \<const0> ;
  assign LOCKSTEP_Out[550] = \<const0> ;
  assign LOCKSTEP_Out[551] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[552] = \<const0> ;
  assign LOCKSTEP_Out[553] = \<const0> ;
  assign LOCKSTEP_Out[554] = \<const0> ;
  assign LOCKSTEP_Out[555:587] = \^LOCKSTEP_Out [555:587];
  assign LOCKSTEP_Out[588] = \<const0> ;
  assign LOCKSTEP_Out[589] = \<const0> ;
  assign LOCKSTEP_Out[590] = \<const0> ;
  assign LOCKSTEP_Out[591] = \<const0> ;
  assign LOCKSTEP_Out[592] = \<const0> ;
  assign LOCKSTEP_Out[593] = \<const0> ;
  assign LOCKSTEP_Out[594] = \<const0> ;
  assign LOCKSTEP_Out[595] = \<const0> ;
  assign LOCKSTEP_Out[596] = \<const0> ;
  assign LOCKSTEP_Out[597] = \<const0> ;
  assign LOCKSTEP_Out[598] = \<const0> ;
  assign LOCKSTEP_Out[599] = \<const0> ;
  assign LOCKSTEP_Out[600] = \<const0> ;
  assign LOCKSTEP_Out[601] = \<const0> ;
  assign LOCKSTEP_Out[602] = \<const0> ;
  assign LOCKSTEP_Out[603] = \<const0> ;
  assign LOCKSTEP_Out[604] = \<const0> ;
  assign LOCKSTEP_Out[605] = \<const0> ;
  assign LOCKSTEP_Out[606] = \<const0> ;
  assign LOCKSTEP_Out[607] = \<const0> ;
  assign LOCKSTEP_Out[608] = \<const0> ;
  assign LOCKSTEP_Out[609] = \<const0> ;
  assign LOCKSTEP_Out[610] = \<const0> ;
  assign LOCKSTEP_Out[611] = \<const0> ;
  assign LOCKSTEP_Out[612] = \<const0> ;
  assign LOCKSTEP_Out[613] = \<const0> ;
  assign LOCKSTEP_Out[614] = \<const0> ;
  assign LOCKSTEP_Out[615] = \<const0> ;
  assign LOCKSTEP_Out[616] = \<const0> ;
  assign LOCKSTEP_Out[617] = \<const0> ;
  assign LOCKSTEP_Out[618] = \<const0> ;
  assign LOCKSTEP_Out[619] = \<const0> ;
  assign LOCKSTEP_Out[620:623] = \^LOCKSTEP_Out [620:623];
  assign LOCKSTEP_Out[624] = \<const0> ;
  assign LOCKSTEP_Out[625] = \<const0> ;
  assign LOCKSTEP_Out[626] = \<const0> ;
  assign LOCKSTEP_Out[627] = \<const0> ;
  assign LOCKSTEP_Out[628] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[629:630] = \^LOCKSTEP_Out [629:630];
  assign LOCKSTEP_Out[631] = \<const0> ;
  assign LOCKSTEP_Out[632:663] = \^LOCKSTEP_Out [632:663];
  assign LOCKSTEP_Out[664] = \<const0> ;
  assign LOCKSTEP_Out[665] = \<const0> ;
  assign LOCKSTEP_Out[666] = \<const0> ;
  assign LOCKSTEP_Out[667] = \<const0> ;
  assign LOCKSTEP_Out[668] = \<const0> ;
  assign LOCKSTEP_Out[669] = \<const0> ;
  assign LOCKSTEP_Out[670] = \<const0> ;
  assign LOCKSTEP_Out[671] = \<const0> ;
  assign LOCKSTEP_Out[672] = \<const0> ;
  assign LOCKSTEP_Out[673] = \<const0> ;
  assign LOCKSTEP_Out[674] = \<const0> ;
  assign LOCKSTEP_Out[675] = \<const0> ;
  assign LOCKSTEP_Out[676] = \<const0> ;
  assign LOCKSTEP_Out[677] = \<const0> ;
  assign LOCKSTEP_Out[678] = \<const0> ;
  assign LOCKSTEP_Out[679] = \<const0> ;
  assign LOCKSTEP_Out[680] = \<const0> ;
  assign LOCKSTEP_Out[681] = \<const0> ;
  assign LOCKSTEP_Out[682] = \<const0> ;
  assign LOCKSTEP_Out[683] = \<const0> ;
  assign LOCKSTEP_Out[684] = \<const0> ;
  assign LOCKSTEP_Out[685] = \<const0> ;
  assign LOCKSTEP_Out[686] = \<const0> ;
  assign LOCKSTEP_Out[687] = \<const0> ;
  assign LOCKSTEP_Out[688] = \<const0> ;
  assign LOCKSTEP_Out[689] = \<const0> ;
  assign LOCKSTEP_Out[690] = \<const0> ;
  assign LOCKSTEP_Out[691] = \<const0> ;
  assign LOCKSTEP_Out[692] = \<const0> ;
  assign LOCKSTEP_Out[693] = \<const0> ;
  assign LOCKSTEP_Out[694] = \<const0> ;
  assign LOCKSTEP_Out[695] = \<const0> ;
  assign LOCKSTEP_Out[696] = \<const0> ;
  assign LOCKSTEP_Out[697] = \<const0> ;
  assign LOCKSTEP_Out[698] = \<const0> ;
  assign LOCKSTEP_Out[699] = \<const0> ;
  assign LOCKSTEP_Out[700] = \<const0> ;
  assign LOCKSTEP_Out[701] = \<const0> ;
  assign LOCKSTEP_Out[702] = \<const0> ;
  assign LOCKSTEP_Out[703] = \<const0> ;
  assign LOCKSTEP_Out[704] = \<const0> ;
  assign LOCKSTEP_Out[705] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[706] = \<const0> ;
  assign LOCKSTEP_Out[707] = \<const0> ;
  assign LOCKSTEP_Out[708] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[709] = \<const0> ;
  assign LOCKSTEP_Out[710] = \<const0> ;
  assign LOCKSTEP_Out[711] = \<const0> ;
  assign LOCKSTEP_Out[712] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[713] = \<const0> ;
  assign LOCKSTEP_Out[714] = \<const0> ;
  assign LOCKSTEP_Out[715] = \<const0> ;
  assign LOCKSTEP_Out[716] = \<const0> ;
  assign LOCKSTEP_Out[717] = \^LOCKSTEP_Out [542];
  assign LOCKSTEP_Out[718] = \<const0> ;
  assign LOCKSTEP_Out[719] = \<const0> ;
  assign LOCKSTEP_Out[720] = \<const0> ;
  assign LOCKSTEP_Out[721:722] = \^LOCKSTEP_Out [721:722];
  assign LOCKSTEP_Out[723] = \<const0> ;
  assign LOCKSTEP_Out[724] = \<const0> ;
  assign LOCKSTEP_Out[725] = \<const0> ;
  assign LOCKSTEP_Out[726] = \<const0> ;
  assign LOCKSTEP_Out[727] = \<const0> ;
  assign LOCKSTEP_Out[728] = \<const0> ;
  assign LOCKSTEP_Out[729] = \<const0> ;
  assign LOCKSTEP_Out[730] = \<const0> ;
  assign LOCKSTEP_Out[731] = \<const0> ;
  assign LOCKSTEP_Out[732] = \<const0> ;
  assign LOCKSTEP_Out[733] = \<const0> ;
  assign LOCKSTEP_Out[734] = \<const0> ;
  assign LOCKSTEP_Out[735] = \<const0> ;
  assign LOCKSTEP_Out[736] = \<const0> ;
  assign LOCKSTEP_Out[737] = \<const0> ;
  assign LOCKSTEP_Out[738] = \<const0> ;
  assign LOCKSTEP_Out[739] = \<const0> ;
  assign LOCKSTEP_Out[740] = \<const0> ;
  assign LOCKSTEP_Out[741] = \<const0> ;
  assign LOCKSTEP_Out[742] = \<const0> ;
  assign LOCKSTEP_Out[743] = \<const0> ;
  assign LOCKSTEP_Out[744] = \<const0> ;
  assign LOCKSTEP_Out[745] = \<const0> ;
  assign LOCKSTEP_Out[746] = \<const0> ;
  assign LOCKSTEP_Out[747] = \<const0> ;
  assign LOCKSTEP_Out[748] = \<const0> ;
  assign LOCKSTEP_Out[749] = \<const0> ;
  assign LOCKSTEP_Out[750] = \<const0> ;
  assign LOCKSTEP_Out[751] = \<const0> ;
  assign LOCKSTEP_Out[752] = \<const0> ;
  assign LOCKSTEP_Out[753] = \<const0> ;
  assign LOCKSTEP_Out[754] = \<const0> ;
  assign LOCKSTEP_Out[755] = \<const0> ;
  assign LOCKSTEP_Out[756] = \<const0> ;
  assign LOCKSTEP_Out[757] = \<const0> ;
  assign LOCKSTEP_Out[758] = \<const0> ;
  assign LOCKSTEP_Out[759] = \<const0> ;
  assign LOCKSTEP_Out[760] = \<const0> ;
  assign LOCKSTEP_Out[761] = \<const0> ;
  assign LOCKSTEP_Out[762] = \<const0> ;
  assign LOCKSTEP_Out[763] = \<const0> ;
  assign LOCKSTEP_Out[764] = \<const0> ;
  assign LOCKSTEP_Out[765] = \<const0> ;
  assign LOCKSTEP_Out[766] = \<const0> ;
  assign LOCKSTEP_Out[767] = \<const0> ;
  assign LOCKSTEP_Out[768] = \<const0> ;
  assign LOCKSTEP_Out[769] = \<const0> ;
  assign LOCKSTEP_Out[770] = \<const0> ;
  assign LOCKSTEP_Out[771] = \<const0> ;
  assign LOCKSTEP_Out[772] = \<const0> ;
  assign LOCKSTEP_Out[773] = \<const0> ;
  assign LOCKSTEP_Out[774] = \<const0> ;
  assign LOCKSTEP_Out[775] = \<const0> ;
  assign LOCKSTEP_Out[776] = \<const0> ;
  assign LOCKSTEP_Out[777] = \<const0> ;
  assign LOCKSTEP_Out[778] = \<const0> ;
  assign LOCKSTEP_Out[779] = \<const0> ;
  assign LOCKSTEP_Out[780] = \<const0> ;
  assign LOCKSTEP_Out[781] = \<const0> ;
  assign LOCKSTEP_Out[782] = \<const0> ;
  assign LOCKSTEP_Out[783] = \<const0> ;
  assign LOCKSTEP_Out[784] = \<const0> ;
  assign LOCKSTEP_Out[785] = \<const0> ;
  assign LOCKSTEP_Out[786] = \<const0> ;
  assign LOCKSTEP_Out[787] = \<const0> ;
  assign LOCKSTEP_Out[788] = \<const0> ;
  assign LOCKSTEP_Out[789] = \<const0> ;
  assign LOCKSTEP_Out[790] = \<const0> ;
  assign LOCKSTEP_Out[791] = \<const0> ;
  assign LOCKSTEP_Out[792] = \<const0> ;
  assign LOCKSTEP_Out[793] = \<const0> ;
  assign LOCKSTEP_Out[794] = \<const0> ;
  assign LOCKSTEP_Out[795] = \<const0> ;
  assign LOCKSTEP_Out[796] = \<const0> ;
  assign LOCKSTEP_Out[797] = \<const0> ;
  assign LOCKSTEP_Out[798] = \<const0> ;
  assign LOCKSTEP_Out[799] = \<const0> ;
  assign LOCKSTEP_Out[800] = \<const0> ;
  assign LOCKSTEP_Out[801] = \<const0> ;
  assign LOCKSTEP_Out[802] = \<const0> ;
  assign LOCKSTEP_Out[803] = \<const0> ;
  assign LOCKSTEP_Out[804] = \<const0> ;
  assign LOCKSTEP_Out[805] = \<const0> ;
  assign LOCKSTEP_Out[806] = \<const0> ;
  assign LOCKSTEP_Out[807] = \<const0> ;
  assign LOCKSTEP_Out[808] = \<const0> ;
  assign LOCKSTEP_Out[809] = \<const0> ;
  assign LOCKSTEP_Out[810] = \<const0> ;
  assign LOCKSTEP_Out[811] = \<const0> ;
  assign LOCKSTEP_Out[812] = \<const0> ;
  assign LOCKSTEP_Out[813] = \<const0> ;
  assign LOCKSTEP_Out[814] = \<const0> ;
  assign LOCKSTEP_Out[815] = \<const0> ;
  assign LOCKSTEP_Out[816] = \<const0> ;
  assign LOCKSTEP_Out[817] = \<const0> ;
  assign LOCKSTEP_Out[818] = \<const0> ;
  assign LOCKSTEP_Out[819] = \<const0> ;
  assign LOCKSTEP_Out[820] = \<const0> ;
  assign LOCKSTEP_Out[821] = \<const0> ;
  assign LOCKSTEP_Out[822] = \<const0> ;
  assign LOCKSTEP_Out[823] = \<const0> ;
  assign LOCKSTEP_Out[824] = \<const0> ;
  assign LOCKSTEP_Out[825] = \<const0> ;
  assign LOCKSTEP_Out[826] = \<const0> ;
  assign LOCKSTEP_Out[827] = \<const0> ;
  assign LOCKSTEP_Out[828] = \<const0> ;
  assign LOCKSTEP_Out[829] = \<const0> ;
  assign LOCKSTEP_Out[830] = \<const0> ;
  assign LOCKSTEP_Out[831] = \<const0> ;
  assign LOCKSTEP_Out[832] = \<const0> ;
  assign LOCKSTEP_Out[833] = \<const0> ;
  assign LOCKSTEP_Out[834] = \<const0> ;
  assign LOCKSTEP_Out[835] = \<const0> ;
  assign LOCKSTEP_Out[836] = \<const0> ;
  assign LOCKSTEP_Out[837] = \<const0> ;
  assign LOCKSTEP_Out[838] = \<const0> ;
  assign LOCKSTEP_Out[839] = \<const0> ;
  assign LOCKSTEP_Out[840] = \<const0> ;
  assign LOCKSTEP_Out[841] = \<const0> ;
  assign LOCKSTEP_Out[842] = \<const0> ;
  assign LOCKSTEP_Out[843] = \<const0> ;
  assign LOCKSTEP_Out[844] = \<const0> ;
  assign LOCKSTEP_Out[845] = \<const0> ;
  assign LOCKSTEP_Out[846] = \<const0> ;
  assign LOCKSTEP_Out[847] = \<const0> ;
  assign LOCKSTEP_Out[848] = \<const0> ;
  assign LOCKSTEP_Out[849] = \<const0> ;
  assign LOCKSTEP_Out[850] = \<const0> ;
  assign LOCKSTEP_Out[851] = \<const0> ;
  assign LOCKSTEP_Out[852] = \<const0> ;
  assign LOCKSTEP_Out[853] = \<const0> ;
  assign LOCKSTEP_Out[854] = \<const0> ;
  assign LOCKSTEP_Out[855] = \<const0> ;
  assign LOCKSTEP_Out[856] = \<const0> ;
  assign LOCKSTEP_Out[857] = \<const0> ;
  assign LOCKSTEP_Out[858] = \<const0> ;
  assign LOCKSTEP_Out[859] = \<const0> ;
  assign LOCKSTEP_Out[860] = \<const0> ;
  assign LOCKSTEP_Out[861] = \<const0> ;
  assign LOCKSTEP_Out[862] = \<const0> ;
  assign LOCKSTEP_Out[863] = \<const0> ;
  assign LOCKSTEP_Out[864] = \<const0> ;
  assign LOCKSTEP_Out[865] = \<const0> ;
  assign LOCKSTEP_Out[866] = \<const0> ;
  assign LOCKSTEP_Out[867] = \<const0> ;
  assign LOCKSTEP_Out[868] = \<const0> ;
  assign LOCKSTEP_Out[869] = \<const0> ;
  assign LOCKSTEP_Out[870] = \<const0> ;
  assign LOCKSTEP_Out[871] = \<const0> ;
  assign LOCKSTEP_Out[872] = \<const0> ;
  assign LOCKSTEP_Out[873] = \<const0> ;
  assign LOCKSTEP_Out[874] = \<const0> ;
  assign LOCKSTEP_Out[875] = \<const0> ;
  assign LOCKSTEP_Out[876] = \<const0> ;
  assign LOCKSTEP_Out[877] = \<const0> ;
  assign LOCKSTEP_Out[878] = \<const0> ;
  assign LOCKSTEP_Out[879] = \<const0> ;
  assign LOCKSTEP_Out[880] = \<const0> ;
  assign LOCKSTEP_Out[881] = \<const0> ;
  assign LOCKSTEP_Out[882] = \<const0> ;
  assign LOCKSTEP_Out[883] = \<const0> ;
  assign LOCKSTEP_Out[884] = \<const0> ;
  assign LOCKSTEP_Out[885] = \<const0> ;
  assign LOCKSTEP_Out[886] = \<const0> ;
  assign LOCKSTEP_Out[887] = \<const0> ;
  assign LOCKSTEP_Out[888] = \<const0> ;
  assign LOCKSTEP_Out[889] = \<const0> ;
  assign LOCKSTEP_Out[890] = \<const0> ;
  assign LOCKSTEP_Out[891] = \<const0> ;
  assign LOCKSTEP_Out[892] = \<const0> ;
  assign LOCKSTEP_Out[893] = \<const0> ;
  assign LOCKSTEP_Out[894] = \<const0> ;
  assign LOCKSTEP_Out[895] = \<const0> ;
  assign LOCKSTEP_Out[896] = \<const0> ;
  assign LOCKSTEP_Out[897] = \<const0> ;
  assign LOCKSTEP_Out[898] = \<const0> ;
  assign LOCKSTEP_Out[899] = \<const0> ;
  assign LOCKSTEP_Out[900] = \<const0> ;
  assign LOCKSTEP_Out[901] = \<const0> ;
  assign LOCKSTEP_Out[902] = \<const0> ;
  assign LOCKSTEP_Out[903] = \<const0> ;
  assign LOCKSTEP_Out[904] = \<const0> ;
  assign LOCKSTEP_Out[905] = \<const0> ;
  assign LOCKSTEP_Out[906] = \<const0> ;
  assign LOCKSTEP_Out[907] = \<const0> ;
  assign LOCKSTEP_Out[908] = \<const0> ;
  assign LOCKSTEP_Out[909] = \<const0> ;
  assign LOCKSTEP_Out[910] = \<const0> ;
  assign LOCKSTEP_Out[911] = \<const0> ;
  assign LOCKSTEP_Out[912] = \<const0> ;
  assign LOCKSTEP_Out[913] = \<const0> ;
  assign LOCKSTEP_Out[914] = \<const0> ;
  assign LOCKSTEP_Out[915] = \<const0> ;
  assign LOCKSTEP_Out[916] = \<const0> ;
  assign LOCKSTEP_Out[917] = \<const0> ;
  assign LOCKSTEP_Out[918] = \<const0> ;
  assign LOCKSTEP_Out[919] = \<const0> ;
  assign LOCKSTEP_Out[920] = \<const0> ;
  assign LOCKSTEP_Out[921] = \<const0> ;
  assign LOCKSTEP_Out[922] = \<const0> ;
  assign LOCKSTEP_Out[923] = \<const0> ;
  assign LOCKSTEP_Out[924] = \<const0> ;
  assign LOCKSTEP_Out[925] = \<const0> ;
  assign LOCKSTEP_Out[926] = \<const0> ;
  assign LOCKSTEP_Out[927] = \<const0> ;
  assign LOCKSTEP_Out[928] = \<const0> ;
  assign LOCKSTEP_Out[929] = \<const0> ;
  assign LOCKSTEP_Out[930] = \<const0> ;
  assign LOCKSTEP_Out[931] = \<const0> ;
  assign LOCKSTEP_Out[932] = \<const0> ;
  assign LOCKSTEP_Out[933] = \<const0> ;
  assign LOCKSTEP_Out[934] = \<const0> ;
  assign LOCKSTEP_Out[935] = \<const0> ;
  assign LOCKSTEP_Out[936] = \<const0> ;
  assign LOCKSTEP_Out[937] = \<const0> ;
  assign LOCKSTEP_Out[938] = \<const0> ;
  assign LOCKSTEP_Out[939] = \<const0> ;
  assign LOCKSTEP_Out[940] = \<const0> ;
  assign LOCKSTEP_Out[941] = \<const0> ;
  assign LOCKSTEP_Out[942] = \<const0> ;
  assign LOCKSTEP_Out[943] = \<const0> ;
  assign LOCKSTEP_Out[944] = \<const0> ;
  assign LOCKSTEP_Out[945] = \<const0> ;
  assign LOCKSTEP_Out[946] = \<const0> ;
  assign LOCKSTEP_Out[947] = \<const0> ;
  assign LOCKSTEP_Out[948] = \<const0> ;
  assign LOCKSTEP_Out[949] = \<const0> ;
  assign LOCKSTEP_Out[950] = \<const0> ;
  assign LOCKSTEP_Out[951] = \<const0> ;
  assign LOCKSTEP_Out[952] = \<const0> ;
  assign LOCKSTEP_Out[953] = \<const0> ;
  assign LOCKSTEP_Out[954] = \<const0> ;
  assign LOCKSTEP_Out[955] = \<const0> ;
  assign LOCKSTEP_Out[956] = \<const0> ;
  assign LOCKSTEP_Out[957] = \<const0> ;
  assign LOCKSTEP_Out[958] = \<const0> ;
  assign LOCKSTEP_Out[959] = \<const0> ;
  assign LOCKSTEP_Out[960] = \<const0> ;
  assign LOCKSTEP_Out[961] = \<const0> ;
  assign LOCKSTEP_Out[962] = \<const0> ;
  assign LOCKSTEP_Out[963] = \<const0> ;
  assign LOCKSTEP_Out[964] = \<const0> ;
  assign LOCKSTEP_Out[965] = \<const0> ;
  assign LOCKSTEP_Out[966] = \<const0> ;
  assign LOCKSTEP_Out[967] = \<const0> ;
  assign LOCKSTEP_Out[968] = \<const0> ;
  assign LOCKSTEP_Out[969] = \<const0> ;
  assign LOCKSTEP_Out[970] = \<const0> ;
  assign LOCKSTEP_Out[971] = \<const0> ;
  assign LOCKSTEP_Out[972] = \<const0> ;
  assign LOCKSTEP_Out[973] = \<const0> ;
  assign LOCKSTEP_Out[974] = \<const0> ;
  assign LOCKSTEP_Out[975] = \<const0> ;
  assign LOCKSTEP_Out[976] = \<const0> ;
  assign LOCKSTEP_Out[977] = \<const0> ;
  assign LOCKSTEP_Out[978] = \<const0> ;
  assign LOCKSTEP_Out[979] = \<const0> ;
  assign LOCKSTEP_Out[980] = \<const0> ;
  assign LOCKSTEP_Out[981] = \<const0> ;
  assign LOCKSTEP_Out[982] = \<const0> ;
  assign LOCKSTEP_Out[983] = \<const0> ;
  assign LOCKSTEP_Out[984] = \<const0> ;
  assign LOCKSTEP_Out[985] = \<const0> ;
  assign LOCKSTEP_Out[986] = \<const0> ;
  assign LOCKSTEP_Out[987] = \<const0> ;
  assign LOCKSTEP_Out[988] = \<const0> ;
  assign LOCKSTEP_Out[989] = \<const0> ;
  assign LOCKSTEP_Out[990] = \<const0> ;
  assign LOCKSTEP_Out[991] = \<const0> ;
  assign LOCKSTEP_Out[992] = \<const0> ;
  assign LOCKSTEP_Out[993] = \<const0> ;
  assign LOCKSTEP_Out[994] = \<const0> ;
  assign LOCKSTEP_Out[995] = \<const0> ;
  assign LOCKSTEP_Out[996] = \<const0> ;
  assign LOCKSTEP_Out[997] = \<const0> ;
  assign LOCKSTEP_Out[998] = \<const0> ;
  assign LOCKSTEP_Out[999] = \<const0> ;
  assign LOCKSTEP_Out[1000] = \<const0> ;
  assign LOCKSTEP_Out[1001] = \<const0> ;
  assign LOCKSTEP_Out[1002] = \<const0> ;
  assign LOCKSTEP_Out[1003] = \<const0> ;
  assign LOCKSTEP_Out[1004] = \<const0> ;
  assign LOCKSTEP_Out[1005] = \<const0> ;
  assign LOCKSTEP_Out[1006] = \<const0> ;
  assign LOCKSTEP_Out[1007] = \<const0> ;
  assign LOCKSTEP_Out[1008] = \<const0> ;
  assign LOCKSTEP_Out[1009] = \<const0> ;
  assign LOCKSTEP_Out[1010] = \<const0> ;
  assign LOCKSTEP_Out[1011] = \<const0> ;
  assign LOCKSTEP_Out[1012] = \<const0> ;
  assign LOCKSTEP_Out[1013] = \<const0> ;
  assign LOCKSTEP_Out[1014] = \<const0> ;
  assign LOCKSTEP_Out[1015] = \<const0> ;
  assign LOCKSTEP_Out[1016] = \<const0> ;
  assign LOCKSTEP_Out[1017] = \<const0> ;
  assign LOCKSTEP_Out[1018] = \<const0> ;
  assign LOCKSTEP_Out[1019] = \<const0> ;
  assign LOCKSTEP_Out[1020] = \<const0> ;
  assign LOCKSTEP_Out[1021] = \<const0> ;
  assign LOCKSTEP_Out[1022] = \<const0> ;
  assign LOCKSTEP_Out[1023] = \<const0> ;
  assign LOCKSTEP_Out[1024] = \<const0> ;
  assign LOCKSTEP_Out[1025] = \<const0> ;
  assign LOCKSTEP_Out[1026] = \<const0> ;
  assign LOCKSTEP_Out[1027] = \<const0> ;
  assign LOCKSTEP_Out[1028] = \<const0> ;
  assign LOCKSTEP_Out[1029] = \<const0> ;
  assign LOCKSTEP_Out[1030] = \<const0> ;
  assign LOCKSTEP_Out[1031] = \<const0> ;
  assign LOCKSTEP_Out[1032] = \<const0> ;
  assign LOCKSTEP_Out[1033] = \<const0> ;
  assign LOCKSTEP_Out[1034] = \<const0> ;
  assign LOCKSTEP_Out[1035] = \<const0> ;
  assign LOCKSTEP_Out[1036] = \<const0> ;
  assign LOCKSTEP_Out[1037] = \<const0> ;
  assign LOCKSTEP_Out[1038] = \<const0> ;
  assign LOCKSTEP_Out[1039] = \<const0> ;
  assign LOCKSTEP_Out[1040] = \<const0> ;
  assign LOCKSTEP_Out[1041] = \<const0> ;
  assign LOCKSTEP_Out[1042] = \<const0> ;
  assign LOCKSTEP_Out[1043] = \<const0> ;
  assign LOCKSTEP_Out[1044] = \<const0> ;
  assign LOCKSTEP_Out[1045] = \<const0> ;
  assign LOCKSTEP_Out[1046] = \<const0> ;
  assign LOCKSTEP_Out[1047] = \<const0> ;
  assign LOCKSTEP_Out[1048] = \<const0> ;
  assign LOCKSTEP_Out[1049] = \<const0> ;
  assign LOCKSTEP_Out[1050] = \<const0> ;
  assign LOCKSTEP_Out[1051] = \<const0> ;
  assign LOCKSTEP_Out[1052] = \<const0> ;
  assign LOCKSTEP_Out[1053] = \<const0> ;
  assign LOCKSTEP_Out[1054] = \<const0> ;
  assign LOCKSTEP_Out[1055] = \<const0> ;
  assign LOCKSTEP_Out[1056] = \<const0> ;
  assign LOCKSTEP_Out[1057] = \<const0> ;
  assign LOCKSTEP_Out[1058] = \<const0> ;
  assign LOCKSTEP_Out[1059] = \<const0> ;
  assign LOCKSTEP_Out[1060] = \<const0> ;
  assign LOCKSTEP_Out[1061] = \<const0> ;
  assign LOCKSTEP_Out[1062] = \<const0> ;
  assign LOCKSTEP_Out[1063] = \<const0> ;
  assign LOCKSTEP_Out[1064] = \<const0> ;
  assign LOCKSTEP_Out[1065] = \<const0> ;
  assign LOCKSTEP_Out[1066] = \<const0> ;
  assign LOCKSTEP_Out[1067] = \<const0> ;
  assign LOCKSTEP_Out[1068] = \<const0> ;
  assign LOCKSTEP_Out[1069] = \<const0> ;
  assign LOCKSTEP_Out[1070] = \<const0> ;
  assign LOCKSTEP_Out[1071] = \<const0> ;
  assign LOCKSTEP_Out[1072] = \<const0> ;
  assign LOCKSTEP_Out[1073] = \<const0> ;
  assign LOCKSTEP_Out[1074] = \<const0> ;
  assign LOCKSTEP_Out[1075] = \<const0> ;
  assign LOCKSTEP_Out[1076] = \<const0> ;
  assign LOCKSTEP_Out[1077] = \<const0> ;
  assign LOCKSTEP_Out[1078] = \<const0> ;
  assign LOCKSTEP_Out[1079] = \<const0> ;
  assign LOCKSTEP_Out[1080] = \<const0> ;
  assign LOCKSTEP_Out[1081] = \<const0> ;
  assign LOCKSTEP_Out[1082] = \<const0> ;
  assign LOCKSTEP_Out[1083] = \<const0> ;
  assign LOCKSTEP_Out[1084] = \<const0> ;
  assign LOCKSTEP_Out[1085] = \<const0> ;
  assign LOCKSTEP_Out[1086] = \<const0> ;
  assign LOCKSTEP_Out[1087] = \<const0> ;
  assign LOCKSTEP_Out[1088] = \<const0> ;
  assign LOCKSTEP_Out[1089] = \<const0> ;
  assign LOCKSTEP_Out[1090] = \<const0> ;
  assign LOCKSTEP_Out[1091] = \<const0> ;
  assign LOCKSTEP_Out[1092] = \<const0> ;
  assign LOCKSTEP_Out[1093] = \<const0> ;
  assign LOCKSTEP_Out[1094] = \<const0> ;
  assign LOCKSTEP_Out[1095] = \<const0> ;
  assign LOCKSTEP_Out[1096] = \<const0> ;
  assign LOCKSTEP_Out[1097] = \<const0> ;
  assign LOCKSTEP_Out[1098] = \<const0> ;
  assign LOCKSTEP_Out[1099] = \<const0> ;
  assign LOCKSTEP_Out[1100] = \<const0> ;
  assign LOCKSTEP_Out[1101] = \<const0> ;
  assign LOCKSTEP_Out[1102] = \<const0> ;
  assign LOCKSTEP_Out[1103] = \<const0> ;
  assign LOCKSTEP_Out[1104] = \<const0> ;
  assign LOCKSTEP_Out[1105] = \<const0> ;
  assign LOCKSTEP_Out[1106] = \<const0> ;
  assign LOCKSTEP_Out[1107] = \<const0> ;
  assign LOCKSTEP_Out[1108] = \<const0> ;
  assign LOCKSTEP_Out[1109] = \<const0> ;
  assign LOCKSTEP_Out[1110] = \<const0> ;
  assign LOCKSTEP_Out[1111] = \<const0> ;
  assign LOCKSTEP_Out[1112] = \<const0> ;
  assign LOCKSTEP_Out[1113] = \<const0> ;
  assign LOCKSTEP_Out[1114] = \<const0> ;
  assign LOCKSTEP_Out[1115] = \<const0> ;
  assign LOCKSTEP_Out[1116] = \<const0> ;
  assign LOCKSTEP_Out[1117] = \<const0> ;
  assign LOCKSTEP_Out[1118] = \<const0> ;
  assign LOCKSTEP_Out[1119] = \<const0> ;
  assign LOCKSTEP_Out[1120] = \<const0> ;
  assign LOCKSTEP_Out[1121] = \<const0> ;
  assign LOCKSTEP_Out[1122] = \<const0> ;
  assign LOCKSTEP_Out[1123] = \<const0> ;
  assign LOCKSTEP_Out[1124] = \<const0> ;
  assign LOCKSTEP_Out[1125] = \<const0> ;
  assign LOCKSTEP_Out[1126] = \<const0> ;
  assign LOCKSTEP_Out[1127] = \<const0> ;
  assign LOCKSTEP_Out[1128] = \<const0> ;
  assign LOCKSTEP_Out[1129] = \<const0> ;
  assign LOCKSTEP_Out[1130] = \<const0> ;
  assign LOCKSTEP_Out[1131] = \<const0> ;
  assign LOCKSTEP_Out[1132] = \<const0> ;
  assign LOCKSTEP_Out[1133] = \<const0> ;
  assign LOCKSTEP_Out[1134] = \<const0> ;
  assign LOCKSTEP_Out[1135] = \<const0> ;
  assign LOCKSTEP_Out[1136] = \<const0> ;
  assign LOCKSTEP_Out[1137] = \<const0> ;
  assign LOCKSTEP_Out[1138] = \<const0> ;
  assign LOCKSTEP_Out[1139] = \<const0> ;
  assign LOCKSTEP_Out[1140] = \<const0> ;
  assign LOCKSTEP_Out[1141] = \<const0> ;
  assign LOCKSTEP_Out[1142] = \<const0> ;
  assign LOCKSTEP_Out[1143] = \<const0> ;
  assign LOCKSTEP_Out[1144] = \<const0> ;
  assign LOCKSTEP_Out[1145] = \<const0> ;
  assign LOCKSTEP_Out[1146] = \<const0> ;
  assign LOCKSTEP_Out[1147] = \<const0> ;
  assign LOCKSTEP_Out[1148] = \<const0> ;
  assign LOCKSTEP_Out[1149] = \<const0> ;
  assign LOCKSTEP_Out[1150] = \<const0> ;
  assign LOCKSTEP_Out[1151] = \<const0> ;
  assign LOCKSTEP_Out[1152] = \<const0> ;
  assign LOCKSTEP_Out[1153] = \<const0> ;
  assign LOCKSTEP_Out[1154] = \<const0> ;
  assign LOCKSTEP_Out[1155] = \<const0> ;
  assign LOCKSTEP_Out[1156] = \<const0> ;
  assign LOCKSTEP_Out[1157] = \<const0> ;
  assign LOCKSTEP_Out[1158] = \<const0> ;
  assign LOCKSTEP_Out[1159] = \<const0> ;
  assign LOCKSTEP_Out[1160] = \<const0> ;
  assign LOCKSTEP_Out[1161] = \<const0> ;
  assign LOCKSTEP_Out[1162] = \<const0> ;
  assign LOCKSTEP_Out[1163] = \<const0> ;
  assign LOCKSTEP_Out[1164] = \<const0> ;
  assign LOCKSTEP_Out[1165] = \<const0> ;
  assign LOCKSTEP_Out[1166] = \<const0> ;
  assign LOCKSTEP_Out[1167] = \<const0> ;
  assign LOCKSTEP_Out[1168] = \<const0> ;
  assign LOCKSTEP_Out[1169] = \<const0> ;
  assign LOCKSTEP_Out[1170] = \<const0> ;
  assign LOCKSTEP_Out[1171] = \<const0> ;
  assign LOCKSTEP_Out[1172] = \<const0> ;
  assign LOCKSTEP_Out[1173] = \<const0> ;
  assign LOCKSTEP_Out[1174] = \<const0> ;
  assign LOCKSTEP_Out[1175] = \<const0> ;
  assign LOCKSTEP_Out[1176] = \<const0> ;
  assign LOCKSTEP_Out[1177] = \<const0> ;
  assign LOCKSTEP_Out[1178] = \<const0> ;
  assign LOCKSTEP_Out[1179] = \<const0> ;
  assign LOCKSTEP_Out[1180] = \<const0> ;
  assign LOCKSTEP_Out[1181] = \<const0> ;
  assign LOCKSTEP_Out[1182] = \<const0> ;
  assign LOCKSTEP_Out[1183] = \<const0> ;
  assign LOCKSTEP_Out[1184] = \<const0> ;
  assign LOCKSTEP_Out[1185] = \<const0> ;
  assign LOCKSTEP_Out[1186] = \<const0> ;
  assign LOCKSTEP_Out[1187] = \<const0> ;
  assign LOCKSTEP_Out[1188] = \<const0> ;
  assign LOCKSTEP_Out[1189] = \<const0> ;
  assign LOCKSTEP_Out[1190] = \<const0> ;
  assign LOCKSTEP_Out[1191] = \<const0> ;
  assign LOCKSTEP_Out[1192] = \<const0> ;
  assign LOCKSTEP_Out[1193] = \<const0> ;
  assign LOCKSTEP_Out[1194] = \<const0> ;
  assign LOCKSTEP_Out[1195] = \<const0> ;
  assign LOCKSTEP_Out[1196] = \<const0> ;
  assign LOCKSTEP_Out[1197] = \<const0> ;
  assign LOCKSTEP_Out[1198] = \<const0> ;
  assign LOCKSTEP_Out[1199] = \<const0> ;
  assign LOCKSTEP_Out[1200] = \<const0> ;
  assign LOCKSTEP_Out[1201] = \<const0> ;
  assign LOCKSTEP_Out[1202] = \<const0> ;
  assign LOCKSTEP_Out[1203] = \<const0> ;
  assign LOCKSTEP_Out[1204] = \<const0> ;
  assign LOCKSTEP_Out[1205] = \<const0> ;
  assign LOCKSTEP_Out[1206] = \<const0> ;
  assign LOCKSTEP_Out[1207] = \<const0> ;
  assign LOCKSTEP_Out[1208] = \<const0> ;
  assign LOCKSTEP_Out[1209] = \<const0> ;
  assign LOCKSTEP_Out[1210] = \<const0> ;
  assign LOCKSTEP_Out[1211] = \<const0> ;
  assign LOCKSTEP_Out[1212] = \<const0> ;
  assign LOCKSTEP_Out[1213] = \<const0> ;
  assign LOCKSTEP_Out[1214] = \<const0> ;
  assign LOCKSTEP_Out[1215] = \<const0> ;
  assign LOCKSTEP_Out[1216] = \<const0> ;
  assign LOCKSTEP_Out[1217] = \<const0> ;
  assign LOCKSTEP_Out[1218] = \<const0> ;
  assign LOCKSTEP_Out[1219] = \<const0> ;
  assign LOCKSTEP_Out[1220] = \<const0> ;
  assign LOCKSTEP_Out[1221] = \<const0> ;
  assign LOCKSTEP_Out[1222] = \<const0> ;
  assign LOCKSTEP_Out[1223] = \<const0> ;
  assign LOCKSTEP_Out[1224] = \<const0> ;
  assign LOCKSTEP_Out[1225] = \<const0> ;
  assign LOCKSTEP_Out[1226] = \<const0> ;
  assign LOCKSTEP_Out[1227] = \<const0> ;
  assign LOCKSTEP_Out[1228] = \<const0> ;
  assign LOCKSTEP_Out[1229] = \<const0> ;
  assign LOCKSTEP_Out[1230] = \<const0> ;
  assign LOCKSTEP_Out[1231] = \<const0> ;
  assign LOCKSTEP_Out[1232] = \<const0> ;
  assign LOCKSTEP_Out[1233] = \<const0> ;
  assign LOCKSTEP_Out[1234] = \<const0> ;
  assign LOCKSTEP_Out[1235] = \<const0> ;
  assign LOCKSTEP_Out[1236] = \<const0> ;
  assign LOCKSTEP_Out[1237] = \<const0> ;
  assign LOCKSTEP_Out[1238] = \<const0> ;
  assign LOCKSTEP_Out[1239] = \<const0> ;
  assign LOCKSTEP_Out[1240] = \<const0> ;
  assign LOCKSTEP_Out[1241] = \<const0> ;
  assign LOCKSTEP_Out[1242] = \<const0> ;
  assign LOCKSTEP_Out[1243] = \<const0> ;
  assign LOCKSTEP_Out[1244] = \<const0> ;
  assign LOCKSTEP_Out[1245] = \<const0> ;
  assign LOCKSTEP_Out[1246] = \<const0> ;
  assign LOCKSTEP_Out[1247] = \<const0> ;
  assign LOCKSTEP_Out[1248] = \<const0> ;
  assign LOCKSTEP_Out[1249] = \<const0> ;
  assign LOCKSTEP_Out[1250] = \<const0> ;
  assign LOCKSTEP_Out[1251] = \<const0> ;
  assign LOCKSTEP_Out[1252] = \<const0> ;
  assign LOCKSTEP_Out[1253] = \<const0> ;
  assign LOCKSTEP_Out[1254] = \<const0> ;
  assign LOCKSTEP_Out[1255] = \<const0> ;
  assign LOCKSTEP_Out[1256] = \<const0> ;
  assign LOCKSTEP_Out[1257] = \<const0> ;
  assign LOCKSTEP_Out[1258] = \<const0> ;
  assign LOCKSTEP_Out[1259] = \<const0> ;
  assign LOCKSTEP_Out[1260] = \<const0> ;
  assign LOCKSTEP_Out[1261] = \<const0> ;
  assign LOCKSTEP_Out[1262] = \<const0> ;
  assign LOCKSTEP_Out[1263] = \<const0> ;
  assign LOCKSTEP_Out[1264] = \<const0> ;
  assign LOCKSTEP_Out[1265] = \<const0> ;
  assign LOCKSTEP_Out[1266] = \<const0> ;
  assign LOCKSTEP_Out[1267] = \<const0> ;
  assign LOCKSTEP_Out[1268] = \<const0> ;
  assign LOCKSTEP_Out[1269] = \<const0> ;
  assign LOCKSTEP_Out[1270] = \<const0> ;
  assign LOCKSTEP_Out[1271] = \<const0> ;
  assign LOCKSTEP_Out[1272] = \<const0> ;
  assign LOCKSTEP_Out[1273] = \<const0> ;
  assign LOCKSTEP_Out[1274] = \<const0> ;
  assign LOCKSTEP_Out[1275] = \<const0> ;
  assign LOCKSTEP_Out[1276] = \<const0> ;
  assign LOCKSTEP_Out[1277] = \<const0> ;
  assign LOCKSTEP_Out[1278] = \<const0> ;
  assign LOCKSTEP_Out[1279] = \<const0> ;
  assign LOCKSTEP_Out[1280] = \<const0> ;
  assign LOCKSTEP_Out[1281] = \<const0> ;
  assign LOCKSTEP_Out[1282] = \<const0> ;
  assign LOCKSTEP_Out[1283] = \<const0> ;
  assign LOCKSTEP_Out[1284] = \<const0> ;
  assign LOCKSTEP_Out[1285] = \<const0> ;
  assign LOCKSTEP_Out[1286] = \<const0> ;
  assign LOCKSTEP_Out[1287] = \<const0> ;
  assign LOCKSTEP_Out[1288] = \<const0> ;
  assign LOCKSTEP_Out[1289] = \<const0> ;
  assign LOCKSTEP_Out[1290] = \<const0> ;
  assign LOCKSTEP_Out[1291] = \<const0> ;
  assign LOCKSTEP_Out[1292] = \<const0> ;
  assign LOCKSTEP_Out[1293] = \<const0> ;
  assign LOCKSTEP_Out[1294] = \<const0> ;
  assign LOCKSTEP_Out[1295] = \<const0> ;
  assign LOCKSTEP_Out[1296] = \<const0> ;
  assign LOCKSTEP_Out[1297] = \<const0> ;
  assign LOCKSTEP_Out[1298] = \<const0> ;
  assign LOCKSTEP_Out[1299] = \<const0> ;
  assign LOCKSTEP_Out[1300] = \<const0> ;
  assign LOCKSTEP_Out[1301] = \<const0> ;
  assign LOCKSTEP_Out[1302] = \<const0> ;
  assign LOCKSTEP_Out[1303] = \<const0> ;
  assign LOCKSTEP_Out[1304] = \<const0> ;
  assign LOCKSTEP_Out[1305] = \<const0> ;
  assign LOCKSTEP_Out[1306] = \<const0> ;
  assign LOCKSTEP_Out[1307] = \<const0> ;
  assign LOCKSTEP_Out[1308] = \<const0> ;
  assign LOCKSTEP_Out[1309] = \<const0> ;
  assign LOCKSTEP_Out[1310] = \<const0> ;
  assign LOCKSTEP_Out[1311] = \<const0> ;
  assign LOCKSTEP_Out[1312] = \<const0> ;
  assign LOCKSTEP_Out[1313] = \<const0> ;
  assign LOCKSTEP_Out[1314] = \<const0> ;
  assign LOCKSTEP_Out[1315] = \<const0> ;
  assign LOCKSTEP_Out[1316] = \<const0> ;
  assign LOCKSTEP_Out[1317] = \<const0> ;
  assign LOCKSTEP_Out[1318] = \<const0> ;
  assign LOCKSTEP_Out[1319] = \<const0> ;
  assign LOCKSTEP_Out[1320] = \<const0> ;
  assign LOCKSTEP_Out[1321] = \<const0> ;
  assign LOCKSTEP_Out[1322] = \<const0> ;
  assign LOCKSTEP_Out[1323] = \<const0> ;
  assign LOCKSTEP_Out[1324] = \<const0> ;
  assign LOCKSTEP_Out[1325] = \<const0> ;
  assign LOCKSTEP_Out[1326] = \<const0> ;
  assign LOCKSTEP_Out[1327] = \<const0> ;
  assign LOCKSTEP_Out[1328] = \<const0> ;
  assign LOCKSTEP_Out[1329] = \<const0> ;
  assign LOCKSTEP_Out[1330] = \<const0> ;
  assign LOCKSTEP_Out[1331] = \<const0> ;
  assign LOCKSTEP_Out[1332] = \<const0> ;
  assign LOCKSTEP_Out[1333] = \<const0> ;
  assign LOCKSTEP_Out[1334] = \<const0> ;
  assign LOCKSTEP_Out[1335] = \<const0> ;
  assign LOCKSTEP_Out[1336] = \<const0> ;
  assign LOCKSTEP_Out[1337] = \<const0> ;
  assign LOCKSTEP_Out[1338] = \<const0> ;
  assign LOCKSTEP_Out[1339] = \<const0> ;
  assign LOCKSTEP_Out[1340] = \<const0> ;
  assign LOCKSTEP_Out[1341] = \<const0> ;
  assign LOCKSTEP_Out[1342] = \<const0> ;
  assign LOCKSTEP_Out[1343] = \<const0> ;
  assign LOCKSTEP_Out[1344] = \<const0> ;
  assign LOCKSTEP_Out[1345] = \<const0> ;
  assign LOCKSTEP_Out[1346] = \<const0> ;
  assign LOCKSTEP_Out[1347] = \<const0> ;
  assign LOCKSTEP_Out[1348] = \<const0> ;
  assign LOCKSTEP_Out[1349] = \<const0> ;
  assign LOCKSTEP_Out[1350] = \<const0> ;
  assign LOCKSTEP_Out[1351] = \<const0> ;
  assign LOCKSTEP_Out[1352] = \<const0> ;
  assign LOCKSTEP_Out[1353] = \<const0> ;
  assign LOCKSTEP_Out[1354] = \<const0> ;
  assign LOCKSTEP_Out[1355] = \<const0> ;
  assign LOCKSTEP_Out[1356] = \<const0> ;
  assign LOCKSTEP_Out[1357] = \<const0> ;
  assign LOCKSTEP_Out[1358] = \<const0> ;
  assign LOCKSTEP_Out[1359] = \<const0> ;
  assign LOCKSTEP_Out[1360] = \<const0> ;
  assign LOCKSTEP_Out[1361] = \<const0> ;
  assign LOCKSTEP_Out[1362] = \<const0> ;
  assign LOCKSTEP_Out[1363] = \<const0> ;
  assign LOCKSTEP_Out[1364] = \<const0> ;
  assign LOCKSTEP_Out[1365] = \<const0> ;
  assign LOCKSTEP_Out[1366] = \<const0> ;
  assign LOCKSTEP_Out[1367] = \<const0> ;
  assign LOCKSTEP_Out[1368] = \<const0> ;
  assign LOCKSTEP_Out[1369] = \<const0> ;
  assign LOCKSTEP_Out[1370] = \<const0> ;
  assign LOCKSTEP_Out[1371] = \<const0> ;
  assign LOCKSTEP_Out[1372] = \<const0> ;
  assign LOCKSTEP_Out[1373] = \<const0> ;
  assign LOCKSTEP_Out[1374] = \<const0> ;
  assign LOCKSTEP_Out[1375] = \<const0> ;
  assign LOCKSTEP_Out[1376] = \<const0> ;
  assign LOCKSTEP_Out[1377] = \<const0> ;
  assign LOCKSTEP_Out[1378] = \<const0> ;
  assign LOCKSTEP_Out[1379] = \<const0> ;
  assign LOCKSTEP_Out[1380] = \<const0> ;
  assign LOCKSTEP_Out[1381] = \<const0> ;
  assign LOCKSTEP_Out[1382] = \<const0> ;
  assign LOCKSTEP_Out[1383] = \<const0> ;
  assign LOCKSTEP_Out[1384] = \<const0> ;
  assign LOCKSTEP_Out[1385] = \<const0> ;
  assign LOCKSTEP_Out[1386] = \<const0> ;
  assign LOCKSTEP_Out[1387] = \<const0> ;
  assign LOCKSTEP_Out[1388] = \<const0> ;
  assign LOCKSTEP_Out[1389] = \<const0> ;
  assign LOCKSTEP_Out[1390] = \<const0> ;
  assign LOCKSTEP_Out[1391] = \<const0> ;
  assign LOCKSTEP_Out[1392] = \<const0> ;
  assign LOCKSTEP_Out[1393] = \<const0> ;
  assign LOCKSTEP_Out[1394] = \<const0> ;
  assign LOCKSTEP_Out[1395] = \<const0> ;
  assign LOCKSTEP_Out[1396] = \<const0> ;
  assign LOCKSTEP_Out[1397] = \<const0> ;
  assign LOCKSTEP_Out[1398] = \<const0> ;
  assign LOCKSTEP_Out[1399] = \<const0> ;
  assign LOCKSTEP_Out[1400] = \<const0> ;
  assign LOCKSTEP_Out[1401] = \<const0> ;
  assign LOCKSTEP_Out[1402] = \<const0> ;
  assign LOCKSTEP_Out[1403] = \<const0> ;
  assign LOCKSTEP_Out[1404] = \<const0> ;
  assign LOCKSTEP_Out[1405] = \<const0> ;
  assign LOCKSTEP_Out[1406] = \<const0> ;
  assign LOCKSTEP_Out[1407] = \<const0> ;
  assign LOCKSTEP_Out[1408] = \<const0> ;
  assign LOCKSTEP_Out[1409] = \<const0> ;
  assign LOCKSTEP_Out[1410] = \<const0> ;
  assign LOCKSTEP_Out[1411] = \<const0> ;
  assign LOCKSTEP_Out[1412] = \<const0> ;
  assign LOCKSTEP_Out[1413] = \<const0> ;
  assign LOCKSTEP_Out[1414] = \<const0> ;
  assign LOCKSTEP_Out[1415] = \<const0> ;
  assign LOCKSTEP_Out[1416] = \<const0> ;
  assign LOCKSTEP_Out[1417] = \<const0> ;
  assign LOCKSTEP_Out[1418] = \<const0> ;
  assign LOCKSTEP_Out[1419] = \<const0> ;
  assign LOCKSTEP_Out[1420] = \<const0> ;
  assign LOCKSTEP_Out[1421] = \<const0> ;
  assign LOCKSTEP_Out[1422] = \<const0> ;
  assign LOCKSTEP_Out[1423] = \<const0> ;
  assign LOCKSTEP_Out[1424] = \<const0> ;
  assign LOCKSTEP_Out[1425] = \<const0> ;
  assign LOCKSTEP_Out[1426] = \<const0> ;
  assign LOCKSTEP_Out[1427] = \<const0> ;
  assign LOCKSTEP_Out[1428] = \<const0> ;
  assign LOCKSTEP_Out[1429] = \<const0> ;
  assign LOCKSTEP_Out[1430] = \<const0> ;
  assign LOCKSTEP_Out[1431] = \<const0> ;
  assign LOCKSTEP_Out[1432] = \<const0> ;
  assign LOCKSTEP_Out[1433] = \<const0> ;
  assign LOCKSTEP_Out[1434] = \<const0> ;
  assign LOCKSTEP_Out[1435] = \<const0> ;
  assign LOCKSTEP_Out[1436] = \<const0> ;
  assign LOCKSTEP_Out[1437] = \<const0> ;
  assign LOCKSTEP_Out[1438] = \<const0> ;
  assign LOCKSTEP_Out[1439] = \<const0> ;
  assign LOCKSTEP_Out[1440] = \<const0> ;
  assign LOCKSTEP_Out[1441] = \<const0> ;
  assign LOCKSTEP_Out[1442] = \<const0> ;
  assign LOCKSTEP_Out[1443] = \<const0> ;
  assign LOCKSTEP_Out[1444] = \<const0> ;
  assign LOCKSTEP_Out[1445] = \<const0> ;
  assign LOCKSTEP_Out[1446] = \<const0> ;
  assign LOCKSTEP_Out[1447] = \<const0> ;
  assign LOCKSTEP_Out[1448] = \<const0> ;
  assign LOCKSTEP_Out[1449] = \<const0> ;
  assign LOCKSTEP_Out[1450] = \<const0> ;
  assign LOCKSTEP_Out[1451] = \<const0> ;
  assign LOCKSTEP_Out[1452] = \<const0> ;
  assign LOCKSTEP_Out[1453] = \<const0> ;
  assign LOCKSTEP_Out[1454] = \<const0> ;
  assign LOCKSTEP_Out[1455] = \<const0> ;
  assign LOCKSTEP_Out[1456] = \<const0> ;
  assign LOCKSTEP_Out[1457] = \<const0> ;
  assign LOCKSTEP_Out[1458] = \<const0> ;
  assign LOCKSTEP_Out[1459] = \<const0> ;
  assign LOCKSTEP_Out[1460] = \<const0> ;
  assign LOCKSTEP_Out[1461] = \<const0> ;
  assign LOCKSTEP_Out[1462] = \<const0> ;
  assign LOCKSTEP_Out[1463] = \<const0> ;
  assign LOCKSTEP_Out[1464] = \<const0> ;
  assign LOCKSTEP_Out[1465] = \<const0> ;
  assign LOCKSTEP_Out[1466] = \<const0> ;
  assign LOCKSTEP_Out[1467] = \<const0> ;
  assign LOCKSTEP_Out[1468] = \<const0> ;
  assign LOCKSTEP_Out[1469] = \<const0> ;
  assign LOCKSTEP_Out[1470] = \<const0> ;
  assign LOCKSTEP_Out[1471] = \<const0> ;
  assign LOCKSTEP_Out[1472] = \<const0> ;
  assign LOCKSTEP_Out[1473] = \<const0> ;
  assign LOCKSTEP_Out[1474] = \<const0> ;
  assign LOCKSTEP_Out[1475] = \<const0> ;
  assign LOCKSTEP_Out[1476] = \<const0> ;
  assign LOCKSTEP_Out[1477] = \<const0> ;
  assign LOCKSTEP_Out[1478] = \<const0> ;
  assign LOCKSTEP_Out[1479] = \<const0> ;
  assign LOCKSTEP_Out[1480] = \<const0> ;
  assign LOCKSTEP_Out[1481] = \<const0> ;
  assign LOCKSTEP_Out[1482] = \<const0> ;
  assign LOCKSTEP_Out[1483] = \<const0> ;
  assign LOCKSTEP_Out[1484] = \<const0> ;
  assign LOCKSTEP_Out[1485] = \<const0> ;
  assign LOCKSTEP_Out[1486] = \<const0> ;
  assign LOCKSTEP_Out[1487] = \<const0> ;
  assign LOCKSTEP_Out[1488] = \<const0> ;
  assign LOCKSTEP_Out[1489] = \<const0> ;
  assign LOCKSTEP_Out[1490] = \<const0> ;
  assign LOCKSTEP_Out[1491] = \<const0> ;
  assign LOCKSTEP_Out[1492] = \<const0> ;
  assign LOCKSTEP_Out[1493] = \<const0> ;
  assign LOCKSTEP_Out[1494] = \<const0> ;
  assign LOCKSTEP_Out[1495] = \<const0> ;
  assign LOCKSTEP_Out[1496] = \<const0> ;
  assign LOCKSTEP_Out[1497] = \<const0> ;
  assign LOCKSTEP_Out[1498] = \<const0> ;
  assign LOCKSTEP_Out[1499] = \<const0> ;
  assign LOCKSTEP_Out[1500] = \<const0> ;
  assign LOCKSTEP_Out[1501] = \<const0> ;
  assign LOCKSTEP_Out[1502] = \<const0> ;
  assign LOCKSTEP_Out[1503] = \<const0> ;
  assign LOCKSTEP_Out[1504] = \<const0> ;
  assign LOCKSTEP_Out[1505] = \<const0> ;
  assign LOCKSTEP_Out[1506] = \<const0> ;
  assign LOCKSTEP_Out[1507] = \<const0> ;
  assign LOCKSTEP_Out[1508] = \<const0> ;
  assign LOCKSTEP_Out[1509] = \<const0> ;
  assign LOCKSTEP_Out[1510] = \<const0> ;
  assign LOCKSTEP_Out[1511] = \<const0> ;
  assign LOCKSTEP_Out[1512] = \<const0> ;
  assign LOCKSTEP_Out[1513] = \<const0> ;
  assign LOCKSTEP_Out[1514] = \<const0> ;
  assign LOCKSTEP_Out[1515] = \<const0> ;
  assign LOCKSTEP_Out[1516] = \<const0> ;
  assign LOCKSTEP_Out[1517] = \<const0> ;
  assign LOCKSTEP_Out[1518] = \<const0> ;
  assign LOCKSTEP_Out[1519] = \<const0> ;
  assign LOCKSTEP_Out[1520] = \<const0> ;
  assign LOCKSTEP_Out[1521] = \<const0> ;
  assign LOCKSTEP_Out[1522] = \<const0> ;
  assign LOCKSTEP_Out[1523] = \<const0> ;
  assign LOCKSTEP_Out[1524] = \<const0> ;
  assign LOCKSTEP_Out[1525] = \<const0> ;
  assign LOCKSTEP_Out[1526] = \<const0> ;
  assign LOCKSTEP_Out[1527] = \<const0> ;
  assign LOCKSTEP_Out[1528] = \<const0> ;
  assign LOCKSTEP_Out[1529] = \<const0> ;
  assign LOCKSTEP_Out[1530] = \<const0> ;
  assign LOCKSTEP_Out[1531] = \<const0> ;
  assign LOCKSTEP_Out[1532] = \<const0> ;
  assign LOCKSTEP_Out[1533] = \<const0> ;
  assign LOCKSTEP_Out[1534] = \<const0> ;
  assign LOCKSTEP_Out[1535] = \<const0> ;
  assign LOCKSTEP_Out[1536] = \<const0> ;
  assign LOCKSTEP_Out[1537] = \<const0> ;
  assign LOCKSTEP_Out[1538] = \<const0> ;
  assign LOCKSTEP_Out[1539] = \<const0> ;
  assign LOCKSTEP_Out[1540] = \<const0> ;
  assign LOCKSTEP_Out[1541] = \<const0> ;
  assign LOCKSTEP_Out[1542] = \<const0> ;
  assign LOCKSTEP_Out[1543] = \<const0> ;
  assign LOCKSTEP_Out[1544] = \<const0> ;
  assign LOCKSTEP_Out[1545] = \<const0> ;
  assign LOCKSTEP_Out[1546] = \<const0> ;
  assign LOCKSTEP_Out[1547] = \<const0> ;
  assign LOCKSTEP_Out[1548] = \<const0> ;
  assign LOCKSTEP_Out[1549] = \<const0> ;
  assign LOCKSTEP_Out[1550] = \<const0> ;
  assign LOCKSTEP_Out[1551] = \<const0> ;
  assign LOCKSTEP_Out[1552] = \<const0> ;
  assign LOCKSTEP_Out[1553] = \<const0> ;
  assign LOCKSTEP_Out[1554] = \<const0> ;
  assign LOCKSTEP_Out[1555] = \<const0> ;
  assign LOCKSTEP_Out[1556] = \<const0> ;
  assign LOCKSTEP_Out[1557] = \<const0> ;
  assign LOCKSTEP_Out[1558] = \<const0> ;
  assign LOCKSTEP_Out[1559] = \<const0> ;
  assign LOCKSTEP_Out[1560] = \<const0> ;
  assign LOCKSTEP_Out[1561] = \<const0> ;
  assign LOCKSTEP_Out[1562] = \<const0> ;
  assign LOCKSTEP_Out[1563] = \<const0> ;
  assign LOCKSTEP_Out[1564] = \<const0> ;
  assign LOCKSTEP_Out[1565] = \<const0> ;
  assign LOCKSTEP_Out[1566] = \<const0> ;
  assign LOCKSTEP_Out[1567] = \<const0> ;
  assign LOCKSTEP_Out[1568] = \<const0> ;
  assign LOCKSTEP_Out[1569] = \<const0> ;
  assign LOCKSTEP_Out[1570] = \<const0> ;
  assign LOCKSTEP_Out[1571] = \<const0> ;
  assign LOCKSTEP_Out[1572] = \<const0> ;
  assign LOCKSTEP_Out[1573] = \<const0> ;
  assign LOCKSTEP_Out[1574] = \<const0> ;
  assign LOCKSTEP_Out[1575] = \<const0> ;
  assign LOCKSTEP_Out[1576] = \<const0> ;
  assign LOCKSTEP_Out[1577] = \<const0> ;
  assign LOCKSTEP_Out[1578] = \<const0> ;
  assign LOCKSTEP_Out[1579] = \<const0> ;
  assign LOCKSTEP_Out[1580] = \<const0> ;
  assign LOCKSTEP_Out[1581] = \<const0> ;
  assign LOCKSTEP_Out[1582] = \<const0> ;
  assign LOCKSTEP_Out[1583] = \<const0> ;
  assign LOCKSTEP_Out[1584] = \<const0> ;
  assign LOCKSTEP_Out[1585] = \<const0> ;
  assign LOCKSTEP_Out[1586] = \<const0> ;
  assign LOCKSTEP_Out[1587] = \<const0> ;
  assign LOCKSTEP_Out[1588] = \<const0> ;
  assign LOCKSTEP_Out[1589] = \<const0> ;
  assign LOCKSTEP_Out[1590] = \<const0> ;
  assign LOCKSTEP_Out[1591] = \<const0> ;
  assign LOCKSTEP_Out[1592] = \<const0> ;
  assign LOCKSTEP_Out[1593] = \<const0> ;
  assign LOCKSTEP_Out[1594] = \<const0> ;
  assign LOCKSTEP_Out[1595] = \<const0> ;
  assign LOCKSTEP_Out[1596] = \<const0> ;
  assign LOCKSTEP_Out[1597] = \<const0> ;
  assign LOCKSTEP_Out[1598] = \<const0> ;
  assign LOCKSTEP_Out[1599] = \<const0> ;
  assign LOCKSTEP_Out[1600] = \<const0> ;
  assign LOCKSTEP_Out[1601] = \<const0> ;
  assign LOCKSTEP_Out[1602] = \<const0> ;
  assign LOCKSTEP_Out[1603] = \<const0> ;
  assign LOCKSTEP_Out[1604] = \<const0> ;
  assign LOCKSTEP_Out[1605] = \<const0> ;
  assign LOCKSTEP_Out[1606] = \<const0> ;
  assign LOCKSTEP_Out[1607] = \<const0> ;
  assign LOCKSTEP_Out[1608] = \<const0> ;
  assign LOCKSTEP_Out[1609] = \<const0> ;
  assign LOCKSTEP_Out[1610] = \<const0> ;
  assign LOCKSTEP_Out[1611] = \<const0> ;
  assign LOCKSTEP_Out[1612] = \<const0> ;
  assign LOCKSTEP_Out[1613] = \<const0> ;
  assign LOCKSTEP_Out[1614] = \<const0> ;
  assign LOCKSTEP_Out[1615] = \<const0> ;
  assign LOCKSTEP_Out[1616] = \<const0> ;
  assign LOCKSTEP_Out[1617] = \<const0> ;
  assign LOCKSTEP_Out[1618] = \<const0> ;
  assign LOCKSTEP_Out[1619] = \<const0> ;
  assign LOCKSTEP_Out[1620] = \<const0> ;
  assign LOCKSTEP_Out[1621] = \<const0> ;
  assign LOCKSTEP_Out[1622] = \<const0> ;
  assign LOCKSTEP_Out[1623] = \<const0> ;
  assign LOCKSTEP_Out[1624] = \<const0> ;
  assign LOCKSTEP_Out[1625] = \<const0> ;
  assign LOCKSTEP_Out[1626] = \<const0> ;
  assign LOCKSTEP_Out[1627] = \<const0> ;
  assign LOCKSTEP_Out[1628] = \<const0> ;
  assign LOCKSTEP_Out[1629] = \<const0> ;
  assign LOCKSTEP_Out[1630] = \<const0> ;
  assign LOCKSTEP_Out[1631] = \<const0> ;
  assign LOCKSTEP_Out[1632] = \<const0> ;
  assign LOCKSTEP_Out[1633] = \<const0> ;
  assign LOCKSTEP_Out[1634] = \<const0> ;
  assign LOCKSTEP_Out[1635] = \<const0> ;
  assign LOCKSTEP_Out[1636] = \<const0> ;
  assign LOCKSTEP_Out[1637] = \<const0> ;
  assign LOCKSTEP_Out[1638] = \<const0> ;
  assign LOCKSTEP_Out[1639] = \<const0> ;
  assign LOCKSTEP_Out[1640] = \<const0> ;
  assign LOCKSTEP_Out[1641] = \<const0> ;
  assign LOCKSTEP_Out[1642] = \<const0> ;
  assign LOCKSTEP_Out[1643] = \<const0> ;
  assign LOCKSTEP_Out[1644] = \<const0> ;
  assign LOCKSTEP_Out[1645] = \<const0> ;
  assign LOCKSTEP_Out[1646] = \<const0> ;
  assign LOCKSTEP_Out[1647] = \<const0> ;
  assign LOCKSTEP_Out[1648] = \<const0> ;
  assign LOCKSTEP_Out[1649] = \<const0> ;
  assign LOCKSTEP_Out[1650] = \<const0> ;
  assign LOCKSTEP_Out[1651] = \<const0> ;
  assign LOCKSTEP_Out[1652] = \<const0> ;
  assign LOCKSTEP_Out[1653] = \<const0> ;
  assign LOCKSTEP_Out[1654] = \<const0> ;
  assign LOCKSTEP_Out[1655] = \<const0> ;
  assign LOCKSTEP_Out[1656] = \<const0> ;
  assign LOCKSTEP_Out[1657] = \<const0> ;
  assign LOCKSTEP_Out[1658] = \<const0> ;
  assign LOCKSTEP_Out[1659] = \<const0> ;
  assign LOCKSTEP_Out[1660] = \<const0> ;
  assign LOCKSTEP_Out[1661] = \<const0> ;
  assign LOCKSTEP_Out[1662] = \<const0> ;
  assign LOCKSTEP_Out[1663] = \<const0> ;
  assign LOCKSTEP_Out[1664] = \<const0> ;
  assign LOCKSTEP_Out[1665] = \<const0> ;
  assign LOCKSTEP_Out[1666] = \<const0> ;
  assign LOCKSTEP_Out[1667] = \<const0> ;
  assign LOCKSTEP_Out[1668] = \<const0> ;
  assign LOCKSTEP_Out[1669] = \<const0> ;
  assign LOCKSTEP_Out[1670] = \<const0> ;
  assign LOCKSTEP_Out[1671] = \<const0> ;
  assign LOCKSTEP_Out[1672] = \<const0> ;
  assign LOCKSTEP_Out[1673] = \<const0> ;
  assign LOCKSTEP_Out[1674] = \<const0> ;
  assign LOCKSTEP_Out[1675] = \<const0> ;
  assign LOCKSTEP_Out[1676] = \<const0> ;
  assign LOCKSTEP_Out[1677] = \<const0> ;
  assign LOCKSTEP_Out[1678] = \<const0> ;
  assign LOCKSTEP_Out[1679] = \<const0> ;
  assign LOCKSTEP_Out[1680] = \<const0> ;
  assign LOCKSTEP_Out[1681] = \<const0> ;
  assign LOCKSTEP_Out[1682] = \<const0> ;
  assign LOCKSTEP_Out[1683] = \<const0> ;
  assign LOCKSTEP_Out[1684] = \<const0> ;
  assign LOCKSTEP_Out[1685] = \<const0> ;
  assign LOCKSTEP_Out[1686] = \<const0> ;
  assign LOCKSTEP_Out[1687] = \<const0> ;
  assign LOCKSTEP_Out[1688] = \<const0> ;
  assign LOCKSTEP_Out[1689] = \<const0> ;
  assign LOCKSTEP_Out[1690] = \<const0> ;
  assign LOCKSTEP_Out[1691] = \<const0> ;
  assign LOCKSTEP_Out[1692] = \<const0> ;
  assign LOCKSTEP_Out[1693] = \<const0> ;
  assign LOCKSTEP_Out[1694] = \<const0> ;
  assign LOCKSTEP_Out[1695] = \<const0> ;
  assign LOCKSTEP_Out[1696] = \<const0> ;
  assign LOCKSTEP_Out[1697] = \<const0> ;
  assign LOCKSTEP_Out[1698] = \<const0> ;
  assign LOCKSTEP_Out[1699] = \<const0> ;
  assign LOCKSTEP_Out[1700] = \<const0> ;
  assign LOCKSTEP_Out[1701] = \<const0> ;
  assign LOCKSTEP_Out[1702] = \<const0> ;
  assign LOCKSTEP_Out[1703] = \<const0> ;
  assign LOCKSTEP_Out[1704] = \<const0> ;
  assign LOCKSTEP_Out[1705] = \<const0> ;
  assign LOCKSTEP_Out[1706] = \<const0> ;
  assign LOCKSTEP_Out[1707] = \<const0> ;
  assign LOCKSTEP_Out[1708] = \<const0> ;
  assign LOCKSTEP_Out[1709] = \<const0> ;
  assign LOCKSTEP_Out[1710] = \<const0> ;
  assign LOCKSTEP_Out[1711] = \<const0> ;
  assign LOCKSTEP_Out[1712] = \<const0> ;
  assign LOCKSTEP_Out[1713] = \<const0> ;
  assign LOCKSTEP_Out[1714] = \<const0> ;
  assign LOCKSTEP_Out[1715] = \<const0> ;
  assign LOCKSTEP_Out[1716] = \<const0> ;
  assign LOCKSTEP_Out[1717] = \<const0> ;
  assign LOCKSTEP_Out[1718] = \<const0> ;
  assign LOCKSTEP_Out[1719] = \<const0> ;
  assign LOCKSTEP_Out[1720] = \<const0> ;
  assign LOCKSTEP_Out[1721] = \<const0> ;
  assign LOCKSTEP_Out[1722] = \<const0> ;
  assign LOCKSTEP_Out[1723] = \<const0> ;
  assign LOCKSTEP_Out[1724] = \<const0> ;
  assign LOCKSTEP_Out[1725] = \<const0> ;
  assign LOCKSTEP_Out[1726] = \<const0> ;
  assign LOCKSTEP_Out[1727] = \<const0> ;
  assign LOCKSTEP_Out[1728] = \<const0> ;
  assign LOCKSTEP_Out[1729] = \<const0> ;
  assign LOCKSTEP_Out[1730] = \<const0> ;
  assign LOCKSTEP_Out[1731] = \<const0> ;
  assign LOCKSTEP_Out[1732] = \<const0> ;
  assign LOCKSTEP_Out[1733] = \<const0> ;
  assign LOCKSTEP_Out[1734] = \<const0> ;
  assign LOCKSTEP_Out[1735] = \<const0> ;
  assign LOCKSTEP_Out[1736] = \<const0> ;
  assign LOCKSTEP_Out[1737] = \<const0> ;
  assign LOCKSTEP_Out[1738] = \<const0> ;
  assign LOCKSTEP_Out[1739] = \<const0> ;
  assign LOCKSTEP_Out[1740] = \<const0> ;
  assign LOCKSTEP_Out[1741] = \<const0> ;
  assign LOCKSTEP_Out[1742] = \<const0> ;
  assign LOCKSTEP_Out[1743] = \<const0> ;
  assign LOCKSTEP_Out[1744] = \<const0> ;
  assign LOCKSTEP_Out[1745] = \<const0> ;
  assign LOCKSTEP_Out[1746] = \<const0> ;
  assign LOCKSTEP_Out[1747] = \<const0> ;
  assign LOCKSTEP_Out[1748] = \<const0> ;
  assign LOCKSTEP_Out[1749] = \<const0> ;
  assign LOCKSTEP_Out[1750] = \<const0> ;
  assign LOCKSTEP_Out[1751] = \<const0> ;
  assign LOCKSTEP_Out[1752] = \<const0> ;
  assign LOCKSTEP_Out[1753] = \<const0> ;
  assign LOCKSTEP_Out[1754] = \<const0> ;
  assign LOCKSTEP_Out[1755] = \<const0> ;
  assign LOCKSTEP_Out[1756] = \<const0> ;
  assign LOCKSTEP_Out[1757] = \<const0> ;
  assign LOCKSTEP_Out[1758] = \<const0> ;
  assign LOCKSTEP_Out[1759] = \<const0> ;
  assign LOCKSTEP_Out[1760] = \<const0> ;
  assign LOCKSTEP_Out[1761] = \<const0> ;
  assign LOCKSTEP_Out[1762] = \<const0> ;
  assign LOCKSTEP_Out[1763] = \<const0> ;
  assign LOCKSTEP_Out[1764] = \<const0> ;
  assign LOCKSTEP_Out[1765] = \<const0> ;
  assign LOCKSTEP_Out[1766] = \<const0> ;
  assign LOCKSTEP_Out[1767] = \<const0> ;
  assign LOCKSTEP_Out[1768] = \<const0> ;
  assign LOCKSTEP_Out[1769] = \<const0> ;
  assign LOCKSTEP_Out[1770] = \<const0> ;
  assign LOCKSTEP_Out[1771] = \<const0> ;
  assign LOCKSTEP_Out[1772] = \<const0> ;
  assign LOCKSTEP_Out[1773] = \<const0> ;
  assign LOCKSTEP_Out[1774] = \<const0> ;
  assign LOCKSTEP_Out[1775] = \<const0> ;
  assign LOCKSTEP_Out[1776] = \<const0> ;
  assign LOCKSTEP_Out[1777] = \<const0> ;
  assign LOCKSTEP_Out[1778] = \<const0> ;
  assign LOCKSTEP_Out[1779] = \<const0> ;
  assign LOCKSTEP_Out[1780] = \<const0> ;
  assign LOCKSTEP_Out[1781] = \<const0> ;
  assign LOCKSTEP_Out[1782] = \<const0> ;
  assign LOCKSTEP_Out[1783] = \<const0> ;
  assign LOCKSTEP_Out[1784] = \<const0> ;
  assign LOCKSTEP_Out[1785] = \<const0> ;
  assign LOCKSTEP_Out[1786] = \<const0> ;
  assign LOCKSTEP_Out[1787] = \<const0> ;
  assign LOCKSTEP_Out[1788] = \<const0> ;
  assign LOCKSTEP_Out[1789] = \<const0> ;
  assign LOCKSTEP_Out[1790] = \<const0> ;
  assign LOCKSTEP_Out[1791] = \<const0> ;
  assign LOCKSTEP_Out[1792] = \<const0> ;
  assign LOCKSTEP_Out[1793] = \<const0> ;
  assign LOCKSTEP_Out[1794] = \<const0> ;
  assign LOCKSTEP_Out[1795] = \<const0> ;
  assign LOCKSTEP_Out[1796] = \<const0> ;
  assign LOCKSTEP_Out[1797] = \<const0> ;
  assign LOCKSTEP_Out[1798] = \<const0> ;
  assign LOCKSTEP_Out[1799] = \<const0> ;
  assign LOCKSTEP_Out[1800] = \<const0> ;
  assign LOCKSTEP_Out[1801] = \<const0> ;
  assign LOCKSTEP_Out[1802] = \<const0> ;
  assign LOCKSTEP_Out[1803] = \<const0> ;
  assign LOCKSTEP_Out[1804] = \<const0> ;
  assign LOCKSTEP_Out[1805] = \<const0> ;
  assign LOCKSTEP_Out[1806] = \<const0> ;
  assign LOCKSTEP_Out[1807] = \<const0> ;
  assign LOCKSTEP_Out[1808] = \<const0> ;
  assign LOCKSTEP_Out[1809] = \<const0> ;
  assign LOCKSTEP_Out[1810] = \<const0> ;
  assign LOCKSTEP_Out[1811] = \<const0> ;
  assign LOCKSTEP_Out[1812] = \<const0> ;
  assign LOCKSTEP_Out[1813] = \<const0> ;
  assign LOCKSTEP_Out[1814] = \<const0> ;
  assign LOCKSTEP_Out[1815] = \<const0> ;
  assign LOCKSTEP_Out[1816] = \<const0> ;
  assign LOCKSTEP_Out[1817] = \<const0> ;
  assign LOCKSTEP_Out[1818] = \<const0> ;
  assign LOCKSTEP_Out[1819] = \<const0> ;
  assign LOCKSTEP_Out[1820] = \<const0> ;
  assign LOCKSTEP_Out[1821] = \<const0> ;
  assign LOCKSTEP_Out[1822] = \<const0> ;
  assign LOCKSTEP_Out[1823] = \<const0> ;
  assign LOCKSTEP_Out[1824] = \<const0> ;
  assign LOCKSTEP_Out[1825] = \<const0> ;
  assign LOCKSTEP_Out[1826] = \<const0> ;
  assign LOCKSTEP_Out[1827] = \<const0> ;
  assign LOCKSTEP_Out[1828] = \<const0> ;
  assign LOCKSTEP_Out[1829] = \<const0> ;
  assign LOCKSTEP_Out[1830] = \<const0> ;
  assign LOCKSTEP_Out[1831] = \<const0> ;
  assign LOCKSTEP_Out[1832] = \<const0> ;
  assign LOCKSTEP_Out[1833] = \<const0> ;
  assign LOCKSTEP_Out[1834] = \<const0> ;
  assign LOCKSTEP_Out[1835] = \<const0> ;
  assign LOCKSTEP_Out[1836] = \<const0> ;
  assign LOCKSTEP_Out[1837] = \<const0> ;
  assign LOCKSTEP_Out[1838] = \<const0> ;
  assign LOCKSTEP_Out[1839] = \<const0> ;
  assign LOCKSTEP_Out[1840] = \<const0> ;
  assign LOCKSTEP_Out[1841] = \<const0> ;
  assign LOCKSTEP_Out[1842] = \<const0> ;
  assign LOCKSTEP_Out[1843] = \<const0> ;
  assign LOCKSTEP_Out[1844] = \<const0> ;
  assign LOCKSTEP_Out[1845] = \<const0> ;
  assign LOCKSTEP_Out[1846] = \<const0> ;
  assign LOCKSTEP_Out[1847] = \<const0> ;
  assign LOCKSTEP_Out[1848] = \<const0> ;
  assign LOCKSTEP_Out[1849] = \<const0> ;
  assign LOCKSTEP_Out[1850] = \<const0> ;
  assign LOCKSTEP_Out[1851] = \<const0> ;
  assign LOCKSTEP_Out[1852] = \<const0> ;
  assign LOCKSTEP_Out[1853] = \<const0> ;
  assign LOCKSTEP_Out[1854] = \<const0> ;
  assign LOCKSTEP_Out[1855] = \<const0> ;
  assign LOCKSTEP_Out[1856] = \<const0> ;
  assign LOCKSTEP_Out[1857] = \<const0> ;
  assign LOCKSTEP_Out[1858] = \<const0> ;
  assign LOCKSTEP_Out[1859] = \<const0> ;
  assign LOCKSTEP_Out[1860] = \<const0> ;
  assign LOCKSTEP_Out[1861] = \<const0> ;
  assign LOCKSTEP_Out[1862] = \<const0> ;
  assign LOCKSTEP_Out[1863] = \<const0> ;
  assign LOCKSTEP_Out[1864] = \<const0> ;
  assign LOCKSTEP_Out[1865] = \<const0> ;
  assign LOCKSTEP_Out[1866] = \<const0> ;
  assign LOCKSTEP_Out[1867] = \<const0> ;
  assign LOCKSTEP_Out[1868] = \<const0> ;
  assign LOCKSTEP_Out[1869] = \<const0> ;
  assign LOCKSTEP_Out[1870] = \<const0> ;
  assign LOCKSTEP_Out[1871] = \<const0> ;
  assign LOCKSTEP_Out[1872] = \<const0> ;
  assign LOCKSTEP_Out[1873] = \<const0> ;
  assign LOCKSTEP_Out[1874] = \<const0> ;
  assign LOCKSTEP_Out[1875] = \<const0> ;
  assign LOCKSTEP_Out[1876] = \<const0> ;
  assign LOCKSTEP_Out[1877] = \<const0> ;
  assign LOCKSTEP_Out[1878] = \<const0> ;
  assign LOCKSTEP_Out[1879] = \<const0> ;
  assign LOCKSTEP_Out[1880] = \<const0> ;
  assign LOCKSTEP_Out[1881] = \<const0> ;
  assign LOCKSTEP_Out[1882] = \<const0> ;
  assign LOCKSTEP_Out[1883] = \<const0> ;
  assign LOCKSTEP_Out[1884] = \<const0> ;
  assign LOCKSTEP_Out[1885] = \<const0> ;
  assign LOCKSTEP_Out[1886] = \<const0> ;
  assign LOCKSTEP_Out[1887] = \<const0> ;
  assign LOCKSTEP_Out[1888] = \<const0> ;
  assign LOCKSTEP_Out[1889] = \<const0> ;
  assign LOCKSTEP_Out[1890] = \<const0> ;
  assign LOCKSTEP_Out[1891] = \<const0> ;
  assign LOCKSTEP_Out[1892] = \<const0> ;
  assign LOCKSTEP_Out[1893] = \<const0> ;
  assign LOCKSTEP_Out[1894] = \<const0> ;
  assign LOCKSTEP_Out[1895] = \<const0> ;
  assign LOCKSTEP_Out[1896] = \<const0> ;
  assign LOCKSTEP_Out[1897] = \<const0> ;
  assign LOCKSTEP_Out[1898] = \<const0> ;
  assign LOCKSTEP_Out[1899] = \<const0> ;
  assign LOCKSTEP_Out[1900] = \<const0> ;
  assign LOCKSTEP_Out[1901] = \<const0> ;
  assign LOCKSTEP_Out[1902] = \<const0> ;
  assign LOCKSTEP_Out[1903] = \<const0> ;
  assign LOCKSTEP_Out[1904] = \<const0> ;
  assign LOCKSTEP_Out[1905] = \<const0> ;
  assign LOCKSTEP_Out[1906] = \<const0> ;
  assign LOCKSTEP_Out[1907] = \<const0> ;
  assign LOCKSTEP_Out[1908] = \<const0> ;
  assign LOCKSTEP_Out[1909] = \<const0> ;
  assign LOCKSTEP_Out[1910] = \<const0> ;
  assign LOCKSTEP_Out[1911] = \<const0> ;
  assign LOCKSTEP_Out[1912] = \<const0> ;
  assign LOCKSTEP_Out[1913] = \<const0> ;
  assign LOCKSTEP_Out[1914] = \<const0> ;
  assign LOCKSTEP_Out[1915] = \<const0> ;
  assign LOCKSTEP_Out[1916] = \<const0> ;
  assign LOCKSTEP_Out[1917] = \<const0> ;
  assign LOCKSTEP_Out[1918] = \<const0> ;
  assign LOCKSTEP_Out[1919] = \<const0> ;
  assign LOCKSTEP_Out[1920] = \<const0> ;
  assign LOCKSTEP_Out[1921] = \<const0> ;
  assign LOCKSTEP_Out[1922] = \<const0> ;
  assign LOCKSTEP_Out[1923] = \<const0> ;
  assign LOCKSTEP_Out[1924] = \<const0> ;
  assign LOCKSTEP_Out[1925] = \<const0> ;
  assign LOCKSTEP_Out[1926] = \<const0> ;
  assign LOCKSTEP_Out[1927] = \<const0> ;
  assign LOCKSTEP_Out[1928] = \<const0> ;
  assign LOCKSTEP_Out[1929] = \<const0> ;
  assign LOCKSTEP_Out[1930] = \<const0> ;
  assign LOCKSTEP_Out[1931] = \<const0> ;
  assign LOCKSTEP_Out[1932] = \<const0> ;
  assign LOCKSTEP_Out[1933] = \<const0> ;
  assign LOCKSTEP_Out[1934] = \<const0> ;
  assign LOCKSTEP_Out[1935] = \<const0> ;
  assign LOCKSTEP_Out[1936] = \<const0> ;
  assign LOCKSTEP_Out[1937] = \<const0> ;
  assign LOCKSTEP_Out[1938] = \<const0> ;
  assign LOCKSTEP_Out[1939] = \<const0> ;
  assign LOCKSTEP_Out[1940] = \<const0> ;
  assign LOCKSTEP_Out[1941] = \<const0> ;
  assign LOCKSTEP_Out[1942] = \<const0> ;
  assign LOCKSTEP_Out[1943] = \<const0> ;
  assign LOCKSTEP_Out[1944] = \<const0> ;
  assign LOCKSTEP_Out[1945] = \<const0> ;
  assign LOCKSTEP_Out[1946] = \<const0> ;
  assign LOCKSTEP_Out[1947] = \<const0> ;
  assign LOCKSTEP_Out[1948] = \<const0> ;
  assign LOCKSTEP_Out[1949] = \<const0> ;
  assign LOCKSTEP_Out[1950] = \<const0> ;
  assign LOCKSTEP_Out[1951] = \<const0> ;
  assign LOCKSTEP_Out[1952] = \<const0> ;
  assign LOCKSTEP_Out[1953] = \<const0> ;
  assign LOCKSTEP_Out[1954] = \<const0> ;
  assign LOCKSTEP_Out[1955] = \<const0> ;
  assign LOCKSTEP_Out[1956] = \<const0> ;
  assign LOCKSTEP_Out[1957] = \<const0> ;
  assign LOCKSTEP_Out[1958] = \<const0> ;
  assign LOCKSTEP_Out[1959] = \<const0> ;
  assign LOCKSTEP_Out[1960] = \<const0> ;
  assign LOCKSTEP_Out[1961] = \<const0> ;
  assign LOCKSTEP_Out[1962] = \<const0> ;
  assign LOCKSTEP_Out[1963] = \<const0> ;
  assign LOCKSTEP_Out[1964] = \<const0> ;
  assign LOCKSTEP_Out[1965] = \<const0> ;
  assign LOCKSTEP_Out[1966] = \<const0> ;
  assign LOCKSTEP_Out[1967] = \<const0> ;
  assign LOCKSTEP_Out[1968] = \<const0> ;
  assign LOCKSTEP_Out[1969] = \<const0> ;
  assign LOCKSTEP_Out[1970] = \<const0> ;
  assign LOCKSTEP_Out[1971] = \<const0> ;
  assign LOCKSTEP_Out[1972] = \<const0> ;
  assign LOCKSTEP_Out[1973] = \<const0> ;
  assign LOCKSTEP_Out[1974] = \<const0> ;
  assign LOCKSTEP_Out[1975] = \<const0> ;
  assign LOCKSTEP_Out[1976] = \<const0> ;
  assign LOCKSTEP_Out[1977] = \<const0> ;
  assign LOCKSTEP_Out[1978] = \<const0> ;
  assign LOCKSTEP_Out[1979] = \<const0> ;
  assign LOCKSTEP_Out[1980] = \<const0> ;
  assign LOCKSTEP_Out[1981] = \<const0> ;
  assign LOCKSTEP_Out[1982] = \<const0> ;
  assign LOCKSTEP_Out[1983] = \<const0> ;
  assign LOCKSTEP_Out[1984] = \<const0> ;
  assign LOCKSTEP_Out[1985] = \<const0> ;
  assign LOCKSTEP_Out[1986] = \<const0> ;
  assign LOCKSTEP_Out[1987] = \<const0> ;
  assign LOCKSTEP_Out[1988] = \<const0> ;
  assign LOCKSTEP_Out[1989] = \<const0> ;
  assign LOCKSTEP_Out[1990] = \<const0> ;
  assign LOCKSTEP_Out[1991] = \<const0> ;
  assign LOCKSTEP_Out[1992] = \<const0> ;
  assign LOCKSTEP_Out[1993] = \<const0> ;
  assign LOCKSTEP_Out[1994] = \<const0> ;
  assign LOCKSTEP_Out[1995] = \<const0> ;
  assign LOCKSTEP_Out[1996] = \<const0> ;
  assign LOCKSTEP_Out[1997] = \<const0> ;
  assign LOCKSTEP_Out[1998] = \<const0> ;
  assign LOCKSTEP_Out[1999] = \<const0> ;
  assign LOCKSTEP_Out[2000] = \<const0> ;
  assign LOCKSTEP_Out[2001] = \<const0> ;
  assign LOCKSTEP_Out[2002] = \<const0> ;
  assign LOCKSTEP_Out[2003] = \<const0> ;
  assign LOCKSTEP_Out[2004] = \<const0> ;
  assign LOCKSTEP_Out[2005] = \<const0> ;
  assign LOCKSTEP_Out[2006] = \<const0> ;
  assign LOCKSTEP_Out[2007] = \<const0> ;
  assign LOCKSTEP_Out[2008] = \<const0> ;
  assign LOCKSTEP_Out[2009] = \<const0> ;
  assign LOCKSTEP_Out[2010] = \<const0> ;
  assign LOCKSTEP_Out[2011] = \<const0> ;
  assign LOCKSTEP_Out[2012] = \<const0> ;
  assign LOCKSTEP_Out[2013] = \<const0> ;
  assign LOCKSTEP_Out[2014] = \<const0> ;
  assign LOCKSTEP_Out[2015] = \<const0> ;
  assign LOCKSTEP_Out[2016] = \<const0> ;
  assign LOCKSTEP_Out[2017] = \<const0> ;
  assign LOCKSTEP_Out[2018] = \<const0> ;
  assign LOCKSTEP_Out[2019] = \<const0> ;
  assign LOCKSTEP_Out[2020] = \<const0> ;
  assign LOCKSTEP_Out[2021] = \<const0> ;
  assign LOCKSTEP_Out[2022] = \<const0> ;
  assign LOCKSTEP_Out[2023] = \<const0> ;
  assign LOCKSTEP_Out[2024] = \<const0> ;
  assign LOCKSTEP_Out[2025] = \<const0> ;
  assign LOCKSTEP_Out[2026] = \<const0> ;
  assign LOCKSTEP_Out[2027] = \<const0> ;
  assign LOCKSTEP_Out[2028] = \<const0> ;
  assign LOCKSTEP_Out[2029] = \<const0> ;
  assign LOCKSTEP_Out[2030] = \<const0> ;
  assign LOCKSTEP_Out[2031] = \<const0> ;
  assign LOCKSTEP_Out[2032] = \<const0> ;
  assign LOCKSTEP_Out[2033] = \<const0> ;
  assign LOCKSTEP_Out[2034] = \<const0> ;
  assign LOCKSTEP_Out[2035] = \<const0> ;
  assign LOCKSTEP_Out[2036] = \<const0> ;
  assign LOCKSTEP_Out[2037] = \<const0> ;
  assign LOCKSTEP_Out[2038] = \<const0> ;
  assign LOCKSTEP_Out[2039] = \<const0> ;
  assign LOCKSTEP_Out[2040] = \<const0> ;
  assign LOCKSTEP_Out[2041] = \<const0> ;
  assign LOCKSTEP_Out[2042] = \<const0> ;
  assign LOCKSTEP_Out[2043] = \<const0> ;
  assign LOCKSTEP_Out[2044] = \<const0> ;
  assign LOCKSTEP_Out[2045] = \<const0> ;
  assign LOCKSTEP_Out[2046] = \<const0> ;
  assign LOCKSTEP_Out[2047] = \<const0> ;
  assign LOCKSTEP_Out[2048] = \<const0> ;
  assign LOCKSTEP_Out[2049] = \<const0> ;
  assign LOCKSTEP_Out[2050] = \<const0> ;
  assign LOCKSTEP_Out[2051] = \<const0> ;
  assign LOCKSTEP_Out[2052] = \<const0> ;
  assign LOCKSTEP_Out[2053] = \<const0> ;
  assign LOCKSTEP_Out[2054] = \<const0> ;
  assign LOCKSTEP_Out[2055] = \<const0> ;
  assign LOCKSTEP_Out[2056] = \<const0> ;
  assign LOCKSTEP_Out[2057] = \<const0> ;
  assign LOCKSTEP_Out[2058] = \<const0> ;
  assign LOCKSTEP_Out[2059] = \<const0> ;
  assign LOCKSTEP_Out[2060] = \<const0> ;
  assign LOCKSTEP_Out[2061] = \<const0> ;
  assign LOCKSTEP_Out[2062] = \<const0> ;
  assign LOCKSTEP_Out[2063] = \<const0> ;
  assign LOCKSTEP_Out[2064] = \<const0> ;
  assign LOCKSTEP_Out[2065] = \<const0> ;
  assign LOCKSTEP_Out[2066] = \<const0> ;
  assign LOCKSTEP_Out[2067] = \<const0> ;
  assign LOCKSTEP_Out[2068] = \<const0> ;
  assign LOCKSTEP_Out[2069] = \<const0> ;
  assign LOCKSTEP_Out[2070] = \<const0> ;
  assign LOCKSTEP_Out[2071] = \<const0> ;
  assign LOCKSTEP_Out[2072] = \<const0> ;
  assign LOCKSTEP_Out[2073] = \<const0> ;
  assign LOCKSTEP_Out[2074] = \<const0> ;
  assign LOCKSTEP_Out[2075] = \<const0> ;
  assign LOCKSTEP_Out[2076] = \<const0> ;
  assign LOCKSTEP_Out[2077] = \<const0> ;
  assign LOCKSTEP_Out[2078] = \<const0> ;
  assign LOCKSTEP_Out[2079] = \<const0> ;
  assign LOCKSTEP_Out[2080] = \<const0> ;
  assign LOCKSTEP_Out[2081] = \<const0> ;
  assign LOCKSTEP_Out[2082] = \<const0> ;
  assign LOCKSTEP_Out[2083] = \<const0> ;
  assign LOCKSTEP_Out[2084] = \<const0> ;
  assign LOCKSTEP_Out[2085] = \<const0> ;
  assign LOCKSTEP_Out[2086] = \<const0> ;
  assign LOCKSTEP_Out[2087] = \<const0> ;
  assign LOCKSTEP_Out[2088] = \<const0> ;
  assign LOCKSTEP_Out[2089] = \<const0> ;
  assign LOCKSTEP_Out[2090] = \<const0> ;
  assign LOCKSTEP_Out[2091] = \<const0> ;
  assign LOCKSTEP_Out[2092] = \<const0> ;
  assign LOCKSTEP_Out[2093] = \<const0> ;
  assign LOCKSTEP_Out[2094] = \<const0> ;
  assign LOCKSTEP_Out[2095] = \<const0> ;
  assign LOCKSTEP_Out[2096] = \<const0> ;
  assign LOCKSTEP_Out[2097] = \<const0> ;
  assign LOCKSTEP_Out[2098] = \<const0> ;
  assign LOCKSTEP_Out[2099] = \<const0> ;
  assign LOCKSTEP_Out[2100] = \<const0> ;
  assign LOCKSTEP_Out[2101] = \<const0> ;
  assign LOCKSTEP_Out[2102] = \<const0> ;
  assign LOCKSTEP_Out[2103] = \<const0> ;
  assign LOCKSTEP_Out[2104] = \<const0> ;
  assign LOCKSTEP_Out[2105] = \<const0> ;
  assign LOCKSTEP_Out[2106] = \<const0> ;
  assign LOCKSTEP_Out[2107] = \<const0> ;
  assign LOCKSTEP_Out[2108] = \<const0> ;
  assign LOCKSTEP_Out[2109] = \<const0> ;
  assign LOCKSTEP_Out[2110] = \<const0> ;
  assign LOCKSTEP_Out[2111] = \<const0> ;
  assign LOCKSTEP_Out[2112] = \<const0> ;
  assign LOCKSTEP_Out[2113] = \<const0> ;
  assign LOCKSTEP_Out[2114] = \<const0> ;
  assign LOCKSTEP_Out[2115] = \<const0> ;
  assign LOCKSTEP_Out[2116] = \<const0> ;
  assign LOCKSTEP_Out[2117] = \<const0> ;
  assign LOCKSTEP_Out[2118] = \<const0> ;
  assign LOCKSTEP_Out[2119] = \<const0> ;
  assign LOCKSTEP_Out[2120] = \<const0> ;
  assign LOCKSTEP_Out[2121] = \<const0> ;
  assign LOCKSTEP_Out[2122] = \<const0> ;
  assign LOCKSTEP_Out[2123] = \<const0> ;
  assign LOCKSTEP_Out[2124] = \<const0> ;
  assign LOCKSTEP_Out[2125] = \<const0> ;
  assign LOCKSTEP_Out[2126] = \<const0> ;
  assign LOCKSTEP_Out[2127] = \<const0> ;
  assign LOCKSTEP_Out[2128] = \<const0> ;
  assign LOCKSTEP_Out[2129] = \<const0> ;
  assign LOCKSTEP_Out[2130] = \<const0> ;
  assign LOCKSTEP_Out[2131] = \<const0> ;
  assign LOCKSTEP_Out[2132] = \<const0> ;
  assign LOCKSTEP_Out[2133] = \<const0> ;
  assign LOCKSTEP_Out[2134] = \<const0> ;
  assign LOCKSTEP_Out[2135] = \<const0> ;
  assign LOCKSTEP_Out[2136] = \<const0> ;
  assign LOCKSTEP_Out[2137] = \<const0> ;
  assign LOCKSTEP_Out[2138] = \<const0> ;
  assign LOCKSTEP_Out[2139] = \<const0> ;
  assign LOCKSTEP_Out[2140] = \<const0> ;
  assign LOCKSTEP_Out[2141] = \<const0> ;
  assign LOCKSTEP_Out[2142] = \<const0> ;
  assign LOCKSTEP_Out[2143] = \<const0> ;
  assign LOCKSTEP_Out[2144] = \<const0> ;
  assign LOCKSTEP_Out[2145] = \<const0> ;
  assign LOCKSTEP_Out[2146] = \<const0> ;
  assign LOCKSTEP_Out[2147] = \<const0> ;
  assign LOCKSTEP_Out[2148] = \<const0> ;
  assign LOCKSTEP_Out[2149] = \<const0> ;
  assign LOCKSTEP_Out[2150] = \<const0> ;
  assign LOCKSTEP_Out[2151] = \<const0> ;
  assign LOCKSTEP_Out[2152] = \<const0> ;
  assign LOCKSTEP_Out[2153] = \<const0> ;
  assign LOCKSTEP_Out[2154] = \<const0> ;
  assign LOCKSTEP_Out[2155] = \<const0> ;
  assign LOCKSTEP_Out[2156] = \<const0> ;
  assign LOCKSTEP_Out[2157] = \<const0> ;
  assign LOCKSTEP_Out[2158] = \<const0> ;
  assign LOCKSTEP_Out[2159] = \<const0> ;
  assign LOCKSTEP_Out[2160] = \<const0> ;
  assign LOCKSTEP_Out[2161] = \<const0> ;
  assign LOCKSTEP_Out[2162] = \<const0> ;
  assign LOCKSTEP_Out[2163] = \<const0> ;
  assign LOCKSTEP_Out[2164] = \<const0> ;
  assign LOCKSTEP_Out[2165] = \<const0> ;
  assign LOCKSTEP_Out[2166] = \<const0> ;
  assign LOCKSTEP_Out[2167] = \<const0> ;
  assign LOCKSTEP_Out[2168] = \<const0> ;
  assign LOCKSTEP_Out[2169] = \<const0> ;
  assign LOCKSTEP_Out[2170] = \<const0> ;
  assign LOCKSTEP_Out[2171] = \<const0> ;
  assign LOCKSTEP_Out[2172] = \<const0> ;
  assign LOCKSTEP_Out[2173] = \<const0> ;
  assign LOCKSTEP_Out[2174] = \<const0> ;
  assign LOCKSTEP_Out[2175] = \<const0> ;
  assign LOCKSTEP_Out[2176] = \<const0> ;
  assign LOCKSTEP_Out[2177] = \<const0> ;
  assign LOCKSTEP_Out[2178] = \<const0> ;
  assign LOCKSTEP_Out[2179] = \<const0> ;
  assign LOCKSTEP_Out[2180] = \<const0> ;
  assign LOCKSTEP_Out[2181] = \<const0> ;
  assign LOCKSTEP_Out[2182] = \<const0> ;
  assign LOCKSTEP_Out[2183] = \<const0> ;
  assign LOCKSTEP_Out[2184] = \<const0> ;
  assign LOCKSTEP_Out[2185] = \<const0> ;
  assign LOCKSTEP_Out[2186] = \<const0> ;
  assign LOCKSTEP_Out[2187] = \<const0> ;
  assign LOCKSTEP_Out[2188] = \<const0> ;
  assign LOCKSTEP_Out[2189] = \<const0> ;
  assign LOCKSTEP_Out[2190] = \<const0> ;
  assign LOCKSTEP_Out[2191] = \<const0> ;
  assign LOCKSTEP_Out[2192] = \<const0> ;
  assign LOCKSTEP_Out[2193] = \<const0> ;
  assign LOCKSTEP_Out[2194] = \<const0> ;
  assign LOCKSTEP_Out[2195] = \<const0> ;
  assign LOCKSTEP_Out[2196] = \<const0> ;
  assign LOCKSTEP_Out[2197] = \<const0> ;
  assign LOCKSTEP_Out[2198] = \<const0> ;
  assign LOCKSTEP_Out[2199] = \<const0> ;
  assign LOCKSTEP_Out[2200] = \<const0> ;
  assign LOCKSTEP_Out[2201] = \<const0> ;
  assign LOCKSTEP_Out[2202] = \<const0> ;
  assign LOCKSTEP_Out[2203] = \<const0> ;
  assign LOCKSTEP_Out[2204] = \<const0> ;
  assign LOCKSTEP_Out[2205] = \<const0> ;
  assign LOCKSTEP_Out[2206] = \<const0> ;
  assign LOCKSTEP_Out[2207] = \<const0> ;
  assign LOCKSTEP_Out[2208] = \<const0> ;
  assign LOCKSTEP_Out[2209] = \<const0> ;
  assign LOCKSTEP_Out[2210] = \<const0> ;
  assign LOCKSTEP_Out[2211] = \<const0> ;
  assign LOCKSTEP_Out[2212] = \<const0> ;
  assign LOCKSTEP_Out[2213] = \<const0> ;
  assign LOCKSTEP_Out[2214] = \<const0> ;
  assign LOCKSTEP_Out[2215] = \<const0> ;
  assign LOCKSTEP_Out[2216] = \<const0> ;
  assign LOCKSTEP_Out[2217] = \<const0> ;
  assign LOCKSTEP_Out[2218] = \<const0> ;
  assign LOCKSTEP_Out[2219] = \<const0> ;
  assign LOCKSTEP_Out[2220] = \<const0> ;
  assign LOCKSTEP_Out[2221] = \<const0> ;
  assign LOCKSTEP_Out[2222] = \<const0> ;
  assign LOCKSTEP_Out[2223] = \<const0> ;
  assign LOCKSTEP_Out[2224] = \<const0> ;
  assign LOCKSTEP_Out[2225] = \<const0> ;
  assign LOCKSTEP_Out[2226] = \<const0> ;
  assign LOCKSTEP_Out[2227] = \<const0> ;
  assign LOCKSTEP_Out[2228] = \<const0> ;
  assign LOCKSTEP_Out[2229] = \<const0> ;
  assign LOCKSTEP_Out[2230] = \<const0> ;
  assign LOCKSTEP_Out[2231] = \<const0> ;
  assign LOCKSTEP_Out[2232] = \<const0> ;
  assign LOCKSTEP_Out[2233] = \<const0> ;
  assign LOCKSTEP_Out[2234] = \<const0> ;
  assign LOCKSTEP_Out[2235] = \<const0> ;
  assign LOCKSTEP_Out[2236] = \<const0> ;
  assign LOCKSTEP_Out[2237] = \<const0> ;
  assign LOCKSTEP_Out[2238] = \<const0> ;
  assign LOCKSTEP_Out[2239] = \<const0> ;
  assign LOCKSTEP_Out[2240] = \<const0> ;
  assign LOCKSTEP_Out[2241] = \<const0> ;
  assign LOCKSTEP_Out[2242] = \<const0> ;
  assign LOCKSTEP_Out[2243] = \<const0> ;
  assign LOCKSTEP_Out[2244] = \<const0> ;
  assign LOCKSTEP_Out[2245] = \<const0> ;
  assign LOCKSTEP_Out[2246] = \<const0> ;
  assign LOCKSTEP_Out[2247] = \<const0> ;
  assign LOCKSTEP_Out[2248] = \<const0> ;
  assign LOCKSTEP_Out[2249] = \<const0> ;
  assign LOCKSTEP_Out[2250] = \<const0> ;
  assign LOCKSTEP_Out[2251] = \<const0> ;
  assign LOCKSTEP_Out[2252] = \<const0> ;
  assign LOCKSTEP_Out[2253] = \<const0> ;
  assign LOCKSTEP_Out[2254] = \<const0> ;
  assign LOCKSTEP_Out[2255] = \<const0> ;
  assign LOCKSTEP_Out[2256] = \<const0> ;
  assign LOCKSTEP_Out[2257] = \<const0> ;
  assign LOCKSTEP_Out[2258] = \<const0> ;
  assign LOCKSTEP_Out[2259] = \<const0> ;
  assign LOCKSTEP_Out[2260] = \<const0> ;
  assign LOCKSTEP_Out[2261] = \<const0> ;
  assign LOCKSTEP_Out[2262] = \<const0> ;
  assign LOCKSTEP_Out[2263] = \<const0> ;
  assign LOCKSTEP_Out[2264] = \<const0> ;
  assign LOCKSTEP_Out[2265] = \<const0> ;
  assign LOCKSTEP_Out[2266] = \<const0> ;
  assign LOCKSTEP_Out[2267] = \<const0> ;
  assign LOCKSTEP_Out[2268] = \<const0> ;
  assign LOCKSTEP_Out[2269] = \<const0> ;
  assign LOCKSTEP_Out[2270] = \<const0> ;
  assign LOCKSTEP_Out[2271] = \<const0> ;
  assign LOCKSTEP_Out[2272] = \<const0> ;
  assign LOCKSTEP_Out[2273] = \<const0> ;
  assign LOCKSTEP_Out[2274] = \<const0> ;
  assign LOCKSTEP_Out[2275] = \<const0> ;
  assign LOCKSTEP_Out[2276] = \<const0> ;
  assign LOCKSTEP_Out[2277] = \<const0> ;
  assign LOCKSTEP_Out[2278] = \<const0> ;
  assign LOCKSTEP_Out[2279] = \<const0> ;
  assign LOCKSTEP_Out[2280] = \<const0> ;
  assign LOCKSTEP_Out[2281] = \<const0> ;
  assign LOCKSTEP_Out[2282] = \<const0> ;
  assign LOCKSTEP_Out[2283] = \<const0> ;
  assign LOCKSTEP_Out[2284] = \<const0> ;
  assign LOCKSTEP_Out[2285] = \<const0> ;
  assign LOCKSTEP_Out[2286] = \<const0> ;
  assign LOCKSTEP_Out[2287] = \<const0> ;
  assign LOCKSTEP_Out[2288] = \<const0> ;
  assign LOCKSTEP_Out[2289] = \<const0> ;
  assign LOCKSTEP_Out[2290] = \<const0> ;
  assign LOCKSTEP_Out[2291] = \<const0> ;
  assign LOCKSTEP_Out[2292] = \<const0> ;
  assign LOCKSTEP_Out[2293] = \<const0> ;
  assign LOCKSTEP_Out[2294] = \<const0> ;
  assign LOCKSTEP_Out[2295] = \<const0> ;
  assign LOCKSTEP_Out[2296] = \<const0> ;
  assign LOCKSTEP_Out[2297] = \<const0> ;
  assign LOCKSTEP_Out[2298] = \<const0> ;
  assign LOCKSTEP_Out[2299] = \<const0> ;
  assign LOCKSTEP_Out[2300] = \<const0> ;
  assign LOCKSTEP_Out[2301] = \<const0> ;
  assign LOCKSTEP_Out[2302] = \<const0> ;
  assign LOCKSTEP_Out[2303] = \<const0> ;
  assign LOCKSTEP_Out[2304] = \<const0> ;
  assign LOCKSTEP_Out[2305] = \<const0> ;
  assign LOCKSTEP_Out[2306] = \<const0> ;
  assign LOCKSTEP_Out[2307] = \<const0> ;
  assign LOCKSTEP_Out[2308] = \<const0> ;
  assign LOCKSTEP_Out[2309] = \<const0> ;
  assign LOCKSTEP_Out[2310] = \<const0> ;
  assign LOCKSTEP_Out[2311] = \<const0> ;
  assign LOCKSTEP_Out[2312] = \<const0> ;
  assign LOCKSTEP_Out[2313] = \<const0> ;
  assign LOCKSTEP_Out[2314] = \<const0> ;
  assign LOCKSTEP_Out[2315] = \<const0> ;
  assign LOCKSTEP_Out[2316] = \<const0> ;
  assign LOCKSTEP_Out[2317] = \<const0> ;
  assign LOCKSTEP_Out[2318] = \<const0> ;
  assign LOCKSTEP_Out[2319] = \<const0> ;
  assign LOCKSTEP_Out[2320] = \<const0> ;
  assign LOCKSTEP_Out[2321] = \<const0> ;
  assign LOCKSTEP_Out[2322] = \<const0> ;
  assign LOCKSTEP_Out[2323] = \<const0> ;
  assign LOCKSTEP_Out[2324] = \<const0> ;
  assign LOCKSTEP_Out[2325] = \<const0> ;
  assign LOCKSTEP_Out[2326] = \<const0> ;
  assign LOCKSTEP_Out[2327] = \<const0> ;
  assign LOCKSTEP_Out[2328] = \<const0> ;
  assign LOCKSTEP_Out[2329] = \<const0> ;
  assign LOCKSTEP_Out[2330] = \<const0> ;
  assign LOCKSTEP_Out[2331] = \<const0> ;
  assign LOCKSTEP_Out[2332] = \<const0> ;
  assign LOCKSTEP_Out[2333] = \<const0> ;
  assign LOCKSTEP_Out[2334] = \<const0> ;
  assign LOCKSTEP_Out[2335] = \<const0> ;
  assign LOCKSTEP_Out[2336] = \<const0> ;
  assign LOCKSTEP_Out[2337] = \<const0> ;
  assign LOCKSTEP_Out[2338] = \<const0> ;
  assign LOCKSTEP_Out[2339] = \<const0> ;
  assign LOCKSTEP_Out[2340] = \<const0> ;
  assign LOCKSTEP_Out[2341] = \<const0> ;
  assign LOCKSTEP_Out[2342] = \<const0> ;
  assign LOCKSTEP_Out[2343] = \<const0> ;
  assign LOCKSTEP_Out[2344] = \<const0> ;
  assign LOCKSTEP_Out[2345] = \<const0> ;
  assign LOCKSTEP_Out[2346] = \<const0> ;
  assign LOCKSTEP_Out[2347] = \<const0> ;
  assign LOCKSTEP_Out[2348] = \<const0> ;
  assign LOCKSTEP_Out[2349] = \<const0> ;
  assign LOCKSTEP_Out[2350] = \<const0> ;
  assign LOCKSTEP_Out[2351] = \<const0> ;
  assign LOCKSTEP_Out[2352] = \<const0> ;
  assign LOCKSTEP_Out[2353] = \<const0> ;
  assign LOCKSTEP_Out[2354] = \<const0> ;
  assign LOCKSTEP_Out[2355] = \<const0> ;
  assign LOCKSTEP_Out[2356] = \<const0> ;
  assign LOCKSTEP_Out[2357] = \<const0> ;
  assign LOCKSTEP_Out[2358] = \<const0> ;
  assign LOCKSTEP_Out[2359] = \<const0> ;
  assign LOCKSTEP_Out[2360] = \<const0> ;
  assign LOCKSTEP_Out[2361] = \<const0> ;
  assign LOCKSTEP_Out[2362] = \<const0> ;
  assign LOCKSTEP_Out[2363] = \<const0> ;
  assign LOCKSTEP_Out[2364] = \<const0> ;
  assign LOCKSTEP_Out[2365] = \<const0> ;
  assign LOCKSTEP_Out[2366] = \<const0> ;
  assign LOCKSTEP_Out[2367] = \<const0> ;
  assign LOCKSTEP_Out[2368] = \<const0> ;
  assign LOCKSTEP_Out[2369] = \<const0> ;
  assign LOCKSTEP_Out[2370] = \<const0> ;
  assign LOCKSTEP_Out[2371] = \<const0> ;
  assign LOCKSTEP_Out[2372] = \<const0> ;
  assign LOCKSTEP_Out[2373] = \<const0> ;
  assign LOCKSTEP_Out[2374] = \<const0> ;
  assign LOCKSTEP_Out[2375] = \<const0> ;
  assign LOCKSTEP_Out[2376] = \<const0> ;
  assign LOCKSTEP_Out[2377] = \<const0> ;
  assign LOCKSTEP_Out[2378] = \<const0> ;
  assign LOCKSTEP_Out[2379] = \<const0> ;
  assign LOCKSTEP_Out[2380] = \<const0> ;
  assign LOCKSTEP_Out[2381] = \<const0> ;
  assign LOCKSTEP_Out[2382] = \<const0> ;
  assign LOCKSTEP_Out[2383] = \<const0> ;
  assign LOCKSTEP_Out[2384] = \<const0> ;
  assign LOCKSTEP_Out[2385] = \<const0> ;
  assign LOCKSTEP_Out[2386] = \<const0> ;
  assign LOCKSTEP_Out[2387] = \<const0> ;
  assign LOCKSTEP_Out[2388] = \<const0> ;
  assign LOCKSTEP_Out[2389] = \<const0> ;
  assign LOCKSTEP_Out[2390] = \<const0> ;
  assign LOCKSTEP_Out[2391] = \<const0> ;
  assign LOCKSTEP_Out[2392] = \<const0> ;
  assign LOCKSTEP_Out[2393] = \<const0> ;
  assign LOCKSTEP_Out[2394] = \<const0> ;
  assign LOCKSTEP_Out[2395] = \<const0> ;
  assign LOCKSTEP_Out[2396] = \<const0> ;
  assign LOCKSTEP_Out[2397] = \<const0> ;
  assign LOCKSTEP_Out[2398] = \<const0> ;
  assign LOCKSTEP_Out[2399] = \<const0> ;
  assign LOCKSTEP_Out[2400] = \<const0> ;
  assign LOCKSTEP_Out[2401] = \<const0> ;
  assign LOCKSTEP_Out[2402] = \<const0> ;
  assign LOCKSTEP_Out[2403] = \<const0> ;
  assign LOCKSTEP_Out[2404] = \<const0> ;
  assign LOCKSTEP_Out[2405] = \<const0> ;
  assign LOCKSTEP_Out[2406] = \<const0> ;
  assign LOCKSTEP_Out[2407] = \<const0> ;
  assign LOCKSTEP_Out[2408] = \<const0> ;
  assign LOCKSTEP_Out[2409] = \<const0> ;
  assign LOCKSTEP_Out[2410] = \<const0> ;
  assign LOCKSTEP_Out[2411] = \<const0> ;
  assign LOCKSTEP_Out[2412] = \<const0> ;
  assign LOCKSTEP_Out[2413] = \<const0> ;
  assign LOCKSTEP_Out[2414] = \<const0> ;
  assign LOCKSTEP_Out[2415] = \<const0> ;
  assign LOCKSTEP_Out[2416] = \<const0> ;
  assign LOCKSTEP_Out[2417] = \<const0> ;
  assign LOCKSTEP_Out[2418] = \<const0> ;
  assign LOCKSTEP_Out[2419] = \<const0> ;
  assign LOCKSTEP_Out[2420] = \<const0> ;
  assign LOCKSTEP_Out[2421] = \<const0> ;
  assign LOCKSTEP_Out[2422] = \<const0> ;
  assign LOCKSTEP_Out[2423] = \<const0> ;
  assign LOCKSTEP_Out[2424] = \<const0> ;
  assign LOCKSTEP_Out[2425] = \<const0> ;
  assign LOCKSTEP_Out[2426] = \<const0> ;
  assign LOCKSTEP_Out[2427] = \<const0> ;
  assign LOCKSTEP_Out[2428] = \<const0> ;
  assign LOCKSTEP_Out[2429] = \<const0> ;
  assign LOCKSTEP_Out[2430] = \<const0> ;
  assign LOCKSTEP_Out[2431] = \<const0> ;
  assign LOCKSTEP_Out[2432] = \<const0> ;
  assign LOCKSTEP_Out[2433] = \<const0> ;
  assign LOCKSTEP_Out[2434] = \<const0> ;
  assign LOCKSTEP_Out[2435] = \<const0> ;
  assign LOCKSTEP_Out[2436] = \<const0> ;
  assign LOCKSTEP_Out[2437] = \<const0> ;
  assign LOCKSTEP_Out[2438] = \<const0> ;
  assign LOCKSTEP_Out[2439] = \<const0> ;
  assign LOCKSTEP_Out[2440] = \<const0> ;
  assign LOCKSTEP_Out[2441] = \<const0> ;
  assign LOCKSTEP_Out[2442] = \<const0> ;
  assign LOCKSTEP_Out[2443] = \<const0> ;
  assign LOCKSTEP_Out[2444] = \<const0> ;
  assign LOCKSTEP_Out[2445] = \<const0> ;
  assign LOCKSTEP_Out[2446] = \<const0> ;
  assign LOCKSTEP_Out[2447] = \<const0> ;
  assign LOCKSTEP_Out[2448] = \<const0> ;
  assign LOCKSTEP_Out[2449] = \<const0> ;
  assign LOCKSTEP_Out[2450] = \<const0> ;
  assign LOCKSTEP_Out[2451] = \<const0> ;
  assign LOCKSTEP_Out[2452] = \<const0> ;
  assign LOCKSTEP_Out[2453] = \<const0> ;
  assign LOCKSTEP_Out[2454] = \<const0> ;
  assign LOCKSTEP_Out[2455] = \<const0> ;
  assign LOCKSTEP_Out[2456] = \<const0> ;
  assign LOCKSTEP_Out[2457] = \<const0> ;
  assign LOCKSTEP_Out[2458] = \<const0> ;
  assign LOCKSTEP_Out[2459] = \<const0> ;
  assign LOCKSTEP_Out[2460] = \<const0> ;
  assign LOCKSTEP_Out[2461] = \<const0> ;
  assign LOCKSTEP_Out[2462] = \<const0> ;
  assign LOCKSTEP_Out[2463] = \<const0> ;
  assign LOCKSTEP_Out[2464] = \<const0> ;
  assign LOCKSTEP_Out[2465] = \<const0> ;
  assign LOCKSTEP_Out[2466] = \<const0> ;
  assign LOCKSTEP_Out[2467] = \<const0> ;
  assign LOCKSTEP_Out[2468] = \<const0> ;
  assign LOCKSTEP_Out[2469] = \<const0> ;
  assign LOCKSTEP_Out[2470] = \<const0> ;
  assign LOCKSTEP_Out[2471] = \<const0> ;
  assign LOCKSTEP_Out[2472] = \<const0> ;
  assign LOCKSTEP_Out[2473] = \<const0> ;
  assign LOCKSTEP_Out[2474] = \<const0> ;
  assign LOCKSTEP_Out[2475] = \<const0> ;
  assign LOCKSTEP_Out[2476] = \<const0> ;
  assign LOCKSTEP_Out[2477] = \<const0> ;
  assign LOCKSTEP_Out[2478] = \<const0> ;
  assign LOCKSTEP_Out[2479] = \<const0> ;
  assign LOCKSTEP_Out[2480] = \<const0> ;
  assign LOCKSTEP_Out[2481] = \<const0> ;
  assign LOCKSTEP_Out[2482] = \<const0> ;
  assign LOCKSTEP_Out[2483] = \<const0> ;
  assign LOCKSTEP_Out[2484] = \<const0> ;
  assign LOCKSTEP_Out[2485] = \<const0> ;
  assign LOCKSTEP_Out[2486] = \<const0> ;
  assign LOCKSTEP_Out[2487] = \<const0> ;
  assign LOCKSTEP_Out[2488] = \<const0> ;
  assign LOCKSTEP_Out[2489] = \<const0> ;
  assign LOCKSTEP_Out[2490] = \<const0> ;
  assign LOCKSTEP_Out[2491] = \<const0> ;
  assign LOCKSTEP_Out[2492] = \<const0> ;
  assign LOCKSTEP_Out[2493] = \<const0> ;
  assign LOCKSTEP_Out[2494] = \<const0> ;
  assign LOCKSTEP_Out[2495] = \<const0> ;
  assign LOCKSTEP_Out[2496] = \<const0> ;
  assign LOCKSTEP_Out[2497] = \<const0> ;
  assign LOCKSTEP_Out[2498] = \<const0> ;
  assign LOCKSTEP_Out[2499] = \<const0> ;
  assign LOCKSTEP_Out[2500] = \<const0> ;
  assign LOCKSTEP_Out[2501] = \<const0> ;
  assign LOCKSTEP_Out[2502] = \<const0> ;
  assign LOCKSTEP_Out[2503] = \<const0> ;
  assign LOCKSTEP_Out[2504] = \<const0> ;
  assign LOCKSTEP_Out[2505] = \<const0> ;
  assign LOCKSTEP_Out[2506] = \<const0> ;
  assign LOCKSTEP_Out[2507] = \<const0> ;
  assign LOCKSTEP_Out[2508] = \<const0> ;
  assign LOCKSTEP_Out[2509] = \<const0> ;
  assign LOCKSTEP_Out[2510] = \<const0> ;
  assign LOCKSTEP_Out[2511] = \<const0> ;
  assign LOCKSTEP_Out[2512] = \<const0> ;
  assign LOCKSTEP_Out[2513] = \<const0> ;
  assign LOCKSTEP_Out[2514] = \<const0> ;
  assign LOCKSTEP_Out[2515] = \<const0> ;
  assign LOCKSTEP_Out[2516] = \<const0> ;
  assign LOCKSTEP_Out[2517] = \<const0> ;
  assign LOCKSTEP_Out[2518] = \<const0> ;
  assign LOCKSTEP_Out[2519] = \<const0> ;
  assign LOCKSTEP_Out[2520] = \<const0> ;
  assign LOCKSTEP_Out[2521] = \<const0> ;
  assign LOCKSTEP_Out[2522] = \<const0> ;
  assign LOCKSTEP_Out[2523] = \<const0> ;
  assign LOCKSTEP_Out[2524] = \<const0> ;
  assign LOCKSTEP_Out[2525] = \<const0> ;
  assign LOCKSTEP_Out[2526] = \<const0> ;
  assign LOCKSTEP_Out[2527] = \<const0> ;
  assign LOCKSTEP_Out[2528] = \<const0> ;
  assign LOCKSTEP_Out[2529] = \<const0> ;
  assign LOCKSTEP_Out[2530] = \<const0> ;
  assign LOCKSTEP_Out[2531] = \<const0> ;
  assign LOCKSTEP_Out[2532] = \<const0> ;
  assign LOCKSTEP_Out[2533] = \<const0> ;
  assign LOCKSTEP_Out[2534] = \<const0> ;
  assign LOCKSTEP_Out[2535] = \<const0> ;
  assign LOCKSTEP_Out[2536] = \<const0> ;
  assign LOCKSTEP_Out[2537] = \<const0> ;
  assign LOCKSTEP_Out[2538] = \<const0> ;
  assign LOCKSTEP_Out[2539] = \<const0> ;
  assign LOCKSTEP_Out[2540] = \<const0> ;
  assign LOCKSTEP_Out[2541] = \<const0> ;
  assign LOCKSTEP_Out[2542] = \<const0> ;
  assign LOCKSTEP_Out[2543] = \<const0> ;
  assign LOCKSTEP_Out[2544] = \<const0> ;
  assign LOCKSTEP_Out[2545] = \<const0> ;
  assign LOCKSTEP_Out[2546] = \<const0> ;
  assign LOCKSTEP_Out[2547] = \<const0> ;
  assign LOCKSTEP_Out[2548] = \<const0> ;
  assign LOCKSTEP_Out[2549] = \<const0> ;
  assign LOCKSTEP_Out[2550] = \<const0> ;
  assign LOCKSTEP_Out[2551] = \<const0> ;
  assign LOCKSTEP_Out[2552] = \<const0> ;
  assign LOCKSTEP_Out[2553] = \<const0> ;
  assign LOCKSTEP_Out[2554] = \<const0> ;
  assign LOCKSTEP_Out[2555] = \<const0> ;
  assign LOCKSTEP_Out[2556] = \<const0> ;
  assign LOCKSTEP_Out[2557] = \<const0> ;
  assign LOCKSTEP_Out[2558] = \<const0> ;
  assign LOCKSTEP_Out[2559] = \<const0> ;
  assign LOCKSTEP_Out[2560] = \<const0> ;
  assign LOCKSTEP_Out[2561] = \<const0> ;
  assign LOCKSTEP_Out[2562] = \<const0> ;
  assign LOCKSTEP_Out[2563] = \<const0> ;
  assign LOCKSTEP_Out[2564] = \<const0> ;
  assign LOCKSTEP_Out[2565] = \<const0> ;
  assign LOCKSTEP_Out[2566] = \<const0> ;
  assign LOCKSTEP_Out[2567] = \<const0> ;
  assign LOCKSTEP_Out[2568] = \<const0> ;
  assign LOCKSTEP_Out[2569] = \<const0> ;
  assign LOCKSTEP_Out[2570] = \<const0> ;
  assign LOCKSTEP_Out[2571] = \<const0> ;
  assign LOCKSTEP_Out[2572] = \<const0> ;
  assign LOCKSTEP_Out[2573] = \<const0> ;
  assign LOCKSTEP_Out[2574] = \<const0> ;
  assign LOCKSTEP_Out[2575] = \<const0> ;
  assign LOCKSTEP_Out[2576] = \<const0> ;
  assign LOCKSTEP_Out[2577] = \<const0> ;
  assign LOCKSTEP_Out[2578] = \<const0> ;
  assign LOCKSTEP_Out[2579] = \<const0> ;
  assign LOCKSTEP_Out[2580] = \<const0> ;
  assign LOCKSTEP_Out[2581] = \<const0> ;
  assign LOCKSTEP_Out[2582] = \<const0> ;
  assign LOCKSTEP_Out[2583] = \<const0> ;
  assign LOCKSTEP_Out[2584] = \<const0> ;
  assign LOCKSTEP_Out[2585] = \<const0> ;
  assign LOCKSTEP_Out[2586] = \<const0> ;
  assign LOCKSTEP_Out[2587] = \<const0> ;
  assign LOCKSTEP_Out[2588] = \<const0> ;
  assign LOCKSTEP_Out[2589] = \<const0> ;
  assign LOCKSTEP_Out[2590] = \<const0> ;
  assign LOCKSTEP_Out[2591] = \<const0> ;
  assign LOCKSTEP_Out[2592] = \<const0> ;
  assign LOCKSTEP_Out[2593] = \<const0> ;
  assign LOCKSTEP_Out[2594] = \<const0> ;
  assign LOCKSTEP_Out[2595] = \<const0> ;
  assign LOCKSTEP_Out[2596] = \<const0> ;
  assign LOCKSTEP_Out[2597] = \<const0> ;
  assign LOCKSTEP_Out[2598] = \<const0> ;
  assign LOCKSTEP_Out[2599] = \<const0> ;
  assign LOCKSTEP_Out[2600] = \<const0> ;
  assign LOCKSTEP_Out[2601] = \<const0> ;
  assign LOCKSTEP_Out[2602] = \<const0> ;
  assign LOCKSTEP_Out[2603] = \<const0> ;
  assign LOCKSTEP_Out[2604] = \<const0> ;
  assign LOCKSTEP_Out[2605] = \<const0> ;
  assign LOCKSTEP_Out[2606] = \<const0> ;
  assign LOCKSTEP_Out[2607] = \<const0> ;
  assign LOCKSTEP_Out[2608] = \<const0> ;
  assign LOCKSTEP_Out[2609] = \<const0> ;
  assign LOCKSTEP_Out[2610] = \<const0> ;
  assign LOCKSTEP_Out[2611] = \<const0> ;
  assign LOCKSTEP_Out[2612] = \<const0> ;
  assign LOCKSTEP_Out[2613] = \<const0> ;
  assign LOCKSTEP_Out[2614] = \<const0> ;
  assign LOCKSTEP_Out[2615] = \<const0> ;
  assign LOCKSTEP_Out[2616] = \<const0> ;
  assign LOCKSTEP_Out[2617] = \<const0> ;
  assign LOCKSTEP_Out[2618] = \<const0> ;
  assign LOCKSTEP_Out[2619] = \<const0> ;
  assign LOCKSTEP_Out[2620] = \<const0> ;
  assign LOCKSTEP_Out[2621] = \<const0> ;
  assign LOCKSTEP_Out[2622] = \<const0> ;
  assign LOCKSTEP_Out[2623] = \<const0> ;
  assign LOCKSTEP_Out[2624] = \<const0> ;
  assign LOCKSTEP_Out[2625] = \<const0> ;
  assign LOCKSTEP_Out[2626] = \<const0> ;
  assign LOCKSTEP_Out[2627] = \<const0> ;
  assign LOCKSTEP_Out[2628] = \<const0> ;
  assign LOCKSTEP_Out[2629] = \<const0> ;
  assign LOCKSTEP_Out[2630] = \<const0> ;
  assign LOCKSTEP_Out[2631] = \<const0> ;
  assign LOCKSTEP_Out[2632] = \<const0> ;
  assign LOCKSTEP_Out[2633] = \<const0> ;
  assign LOCKSTEP_Out[2634] = \<const0> ;
  assign LOCKSTEP_Out[2635] = \<const0> ;
  assign LOCKSTEP_Out[2636] = \<const0> ;
  assign LOCKSTEP_Out[2637] = \<const0> ;
  assign LOCKSTEP_Out[2638] = \<const0> ;
  assign LOCKSTEP_Out[2639] = \<const0> ;
  assign LOCKSTEP_Out[2640] = \<const0> ;
  assign LOCKSTEP_Out[2641] = \<const0> ;
  assign LOCKSTEP_Out[2642] = \<const0> ;
  assign LOCKSTEP_Out[2643] = \<const0> ;
  assign LOCKSTEP_Out[2644] = \<const0> ;
  assign LOCKSTEP_Out[2645] = \<const0> ;
  assign LOCKSTEP_Out[2646] = \<const0> ;
  assign LOCKSTEP_Out[2647] = \<const0> ;
  assign LOCKSTEP_Out[2648] = \<const0> ;
  assign LOCKSTEP_Out[2649] = \<const0> ;
  assign LOCKSTEP_Out[2650] = \<const0> ;
  assign LOCKSTEP_Out[2651] = \<const0> ;
  assign LOCKSTEP_Out[2652] = \<const0> ;
  assign LOCKSTEP_Out[2653] = \<const0> ;
  assign LOCKSTEP_Out[2654] = \<const0> ;
  assign LOCKSTEP_Out[2655] = \<const0> ;
  assign LOCKSTEP_Out[2656] = \<const0> ;
  assign LOCKSTEP_Out[2657] = \<const0> ;
  assign LOCKSTEP_Out[2658] = \<const0> ;
  assign LOCKSTEP_Out[2659] = \<const0> ;
  assign LOCKSTEP_Out[2660] = \<const0> ;
  assign LOCKSTEP_Out[2661] = \<const0> ;
  assign LOCKSTEP_Out[2662] = \<const0> ;
  assign LOCKSTEP_Out[2663] = \<const0> ;
  assign LOCKSTEP_Out[2664] = \<const0> ;
  assign LOCKSTEP_Out[2665] = \<const0> ;
  assign LOCKSTEP_Out[2666] = \<const0> ;
  assign LOCKSTEP_Out[2667] = \<const0> ;
  assign LOCKSTEP_Out[2668] = \<const0> ;
  assign LOCKSTEP_Out[2669] = \<const0> ;
  assign LOCKSTEP_Out[2670] = \<const0> ;
  assign LOCKSTEP_Out[2671] = \<const0> ;
  assign LOCKSTEP_Out[2672] = \<const0> ;
  assign LOCKSTEP_Out[2673] = \<const0> ;
  assign LOCKSTEP_Out[2674] = \<const0> ;
  assign LOCKSTEP_Out[2675] = \<const0> ;
  assign LOCKSTEP_Out[2676] = \<const0> ;
  assign LOCKSTEP_Out[2677] = \<const0> ;
  assign LOCKSTEP_Out[2678] = \<const0> ;
  assign LOCKSTEP_Out[2679] = \<const0> ;
  assign LOCKSTEP_Out[2680] = \<const0> ;
  assign LOCKSTEP_Out[2681] = \<const0> ;
  assign LOCKSTEP_Out[2682] = \<const0> ;
  assign LOCKSTEP_Out[2683] = \<const0> ;
  assign LOCKSTEP_Out[2684] = \<const0> ;
  assign LOCKSTEP_Out[2685] = \<const0> ;
  assign LOCKSTEP_Out[2686] = \<const0> ;
  assign LOCKSTEP_Out[2687] = \<const0> ;
  assign LOCKSTEP_Out[2688] = \<const0> ;
  assign LOCKSTEP_Out[2689] = \<const0> ;
  assign LOCKSTEP_Out[2690] = \<const0> ;
  assign LOCKSTEP_Out[2691] = \<const0> ;
  assign LOCKSTEP_Out[2692] = \<const0> ;
  assign LOCKSTEP_Out[2693] = \<const0> ;
  assign LOCKSTEP_Out[2694] = \<const0> ;
  assign LOCKSTEP_Out[2695] = \<const0> ;
  assign LOCKSTEP_Out[2696] = \<const0> ;
  assign LOCKSTEP_Out[2697] = \<const0> ;
  assign LOCKSTEP_Out[2698] = \<const0> ;
  assign LOCKSTEP_Out[2699] = \<const0> ;
  assign LOCKSTEP_Out[2700] = \<const0> ;
  assign LOCKSTEP_Out[2701] = \<const0> ;
  assign LOCKSTEP_Out[2702] = \<const0> ;
  assign LOCKSTEP_Out[2703] = \<const0> ;
  assign LOCKSTEP_Out[2704] = \<const0> ;
  assign LOCKSTEP_Out[2705] = \<const0> ;
  assign LOCKSTEP_Out[2706] = \<const0> ;
  assign LOCKSTEP_Out[2707] = \<const0> ;
  assign LOCKSTEP_Out[2708] = \<const0> ;
  assign LOCKSTEP_Out[2709] = \<const0> ;
  assign LOCKSTEP_Out[2710] = \<const0> ;
  assign LOCKSTEP_Out[2711] = \<const0> ;
  assign LOCKSTEP_Out[2712] = \<const0> ;
  assign LOCKSTEP_Out[2713] = \<const0> ;
  assign LOCKSTEP_Out[2714] = \<const0> ;
  assign LOCKSTEP_Out[2715] = \<const0> ;
  assign LOCKSTEP_Out[2716] = \<const0> ;
  assign LOCKSTEP_Out[2717] = \<const0> ;
  assign LOCKSTEP_Out[2718] = \<const0> ;
  assign LOCKSTEP_Out[2719] = \<const0> ;
  assign LOCKSTEP_Out[2720] = \<const0> ;
  assign LOCKSTEP_Out[2721] = \<const0> ;
  assign LOCKSTEP_Out[2722] = \<const0> ;
  assign LOCKSTEP_Out[2723] = \<const0> ;
  assign LOCKSTEP_Out[2724] = \<const0> ;
  assign LOCKSTEP_Out[2725] = \<const0> ;
  assign LOCKSTEP_Out[2726] = \<const0> ;
  assign LOCKSTEP_Out[2727] = \<const0> ;
  assign LOCKSTEP_Out[2728] = \<const0> ;
  assign LOCKSTEP_Out[2729] = \<const0> ;
  assign LOCKSTEP_Out[2730] = \<const0> ;
  assign LOCKSTEP_Out[2731] = \<const0> ;
  assign LOCKSTEP_Out[2732] = \<const0> ;
  assign LOCKSTEP_Out[2733] = \<const0> ;
  assign LOCKSTEP_Out[2734] = \<const0> ;
  assign LOCKSTEP_Out[2735] = \<const0> ;
  assign LOCKSTEP_Out[2736] = \<const0> ;
  assign LOCKSTEP_Out[2737] = \<const0> ;
  assign LOCKSTEP_Out[2738] = \<const0> ;
  assign LOCKSTEP_Out[2739] = \<const0> ;
  assign LOCKSTEP_Out[2740] = \<const0> ;
  assign LOCKSTEP_Out[2741] = \<const0> ;
  assign LOCKSTEP_Out[2742] = \<const0> ;
  assign LOCKSTEP_Out[2743] = \<const0> ;
  assign LOCKSTEP_Out[2744] = \<const0> ;
  assign LOCKSTEP_Out[2745] = \<const0> ;
  assign LOCKSTEP_Out[2746] = \<const0> ;
  assign LOCKSTEP_Out[2747] = \<const0> ;
  assign LOCKSTEP_Out[2748] = \<const0> ;
  assign LOCKSTEP_Out[2749] = \<const0> ;
  assign LOCKSTEP_Out[2750] = \<const0> ;
  assign LOCKSTEP_Out[2751] = \<const0> ;
  assign LOCKSTEP_Out[2752] = \<const0> ;
  assign LOCKSTEP_Out[2753] = \<const0> ;
  assign LOCKSTEP_Out[2754] = \<const0> ;
  assign LOCKSTEP_Out[2755] = \<const0> ;
  assign LOCKSTEP_Out[2756] = \<const0> ;
  assign LOCKSTEP_Out[2757] = \<const0> ;
  assign LOCKSTEP_Out[2758] = \<const0> ;
  assign LOCKSTEP_Out[2759] = \<const0> ;
  assign LOCKSTEP_Out[2760] = \<const0> ;
  assign LOCKSTEP_Out[2761] = \<const0> ;
  assign LOCKSTEP_Out[2762] = \<const0> ;
  assign LOCKSTEP_Out[2763] = \<const0> ;
  assign LOCKSTEP_Out[2764] = \<const0> ;
  assign LOCKSTEP_Out[2765] = \<const0> ;
  assign LOCKSTEP_Out[2766] = \<const0> ;
  assign LOCKSTEP_Out[2767] = \<const0> ;
  assign LOCKSTEP_Out[2768] = \<const0> ;
  assign LOCKSTEP_Out[2769] = \<const0> ;
  assign LOCKSTEP_Out[2770] = \<const0> ;
  assign LOCKSTEP_Out[2771] = \<const0> ;
  assign LOCKSTEP_Out[2772] = \<const0> ;
  assign LOCKSTEP_Out[2773] = \<const0> ;
  assign LOCKSTEP_Out[2774] = \<const0> ;
  assign LOCKSTEP_Out[2775] = \<const0> ;
  assign LOCKSTEP_Out[2776] = \<const0> ;
  assign LOCKSTEP_Out[2777] = \<const0> ;
  assign LOCKSTEP_Out[2778] = \<const0> ;
  assign LOCKSTEP_Out[2779] = \<const0> ;
  assign LOCKSTEP_Out[2780] = \<const0> ;
  assign LOCKSTEP_Out[2781] = \<const0> ;
  assign LOCKSTEP_Out[2782] = \<const0> ;
  assign LOCKSTEP_Out[2783] = \<const0> ;
  assign LOCKSTEP_Out[2784] = \<const0> ;
  assign LOCKSTEP_Out[2785] = \<const0> ;
  assign LOCKSTEP_Out[2786] = \<const0> ;
  assign LOCKSTEP_Out[2787] = \<const0> ;
  assign LOCKSTEP_Out[2788] = \<const0> ;
  assign LOCKSTEP_Out[2789] = \<const0> ;
  assign LOCKSTEP_Out[2790] = \<const0> ;
  assign LOCKSTEP_Out[2791] = \<const0> ;
  assign LOCKSTEP_Out[2792] = \<const0> ;
  assign LOCKSTEP_Out[2793] = \<const0> ;
  assign LOCKSTEP_Out[2794] = \<const0> ;
  assign LOCKSTEP_Out[2795] = \<const0> ;
  assign LOCKSTEP_Out[2796] = \<const0> ;
  assign LOCKSTEP_Out[2797] = \<const0> ;
  assign LOCKSTEP_Out[2798] = \<const0> ;
  assign LOCKSTEP_Out[2799] = \<const0> ;
  assign LOCKSTEP_Out[2800] = \<const0> ;
  assign LOCKSTEP_Out[2801] = \<const0> ;
  assign LOCKSTEP_Out[2802] = \<const0> ;
  assign LOCKSTEP_Out[2803] = \<const0> ;
  assign LOCKSTEP_Out[2804] = \<const0> ;
  assign LOCKSTEP_Out[2805] = \<const0> ;
  assign LOCKSTEP_Out[2806] = \<const0> ;
  assign LOCKSTEP_Out[2807] = \<const0> ;
  assign LOCKSTEP_Out[2808] = \<const0> ;
  assign LOCKSTEP_Out[2809] = \<const0> ;
  assign LOCKSTEP_Out[2810] = \<const0> ;
  assign LOCKSTEP_Out[2811] = \<const0> ;
  assign LOCKSTEP_Out[2812] = \<const0> ;
  assign LOCKSTEP_Out[2813] = \<const0> ;
  assign LOCKSTEP_Out[2814] = \<const0> ;
  assign LOCKSTEP_Out[2815] = \<const0> ;
  assign LOCKSTEP_Out[2816] = \<const0> ;
  assign LOCKSTEP_Out[2817] = \<const0> ;
  assign LOCKSTEP_Out[2818] = \<const0> ;
  assign LOCKSTEP_Out[2819] = \<const0> ;
  assign LOCKSTEP_Out[2820] = \<const0> ;
  assign LOCKSTEP_Out[2821] = \<const0> ;
  assign LOCKSTEP_Out[2822] = \<const0> ;
  assign LOCKSTEP_Out[2823] = \<const0> ;
  assign LOCKSTEP_Out[2824] = \<const0> ;
  assign LOCKSTEP_Out[2825] = \<const0> ;
  assign LOCKSTEP_Out[2826] = \<const0> ;
  assign LOCKSTEP_Out[2827] = \<const0> ;
  assign LOCKSTEP_Out[2828] = \<const0> ;
  assign LOCKSTEP_Out[2829] = \<const0> ;
  assign LOCKSTEP_Out[2830] = \<const0> ;
  assign LOCKSTEP_Out[2831] = \<const0> ;
  assign LOCKSTEP_Out[2832] = \<const0> ;
  assign LOCKSTEP_Out[2833] = \<const0> ;
  assign LOCKSTEP_Out[2834] = \<const0> ;
  assign LOCKSTEP_Out[2835] = \<const0> ;
  assign LOCKSTEP_Out[2836] = \<const0> ;
  assign LOCKSTEP_Out[2837] = \<const0> ;
  assign LOCKSTEP_Out[2838] = \<const0> ;
  assign LOCKSTEP_Out[2839] = \<const0> ;
  assign LOCKSTEP_Out[2840] = \<const0> ;
  assign LOCKSTEP_Out[2841] = \<const0> ;
  assign LOCKSTEP_Out[2842] = \<const0> ;
  assign LOCKSTEP_Out[2843] = \<const0> ;
  assign LOCKSTEP_Out[2844] = \<const0> ;
  assign LOCKSTEP_Out[2845] = \<const0> ;
  assign LOCKSTEP_Out[2846] = \<const0> ;
  assign LOCKSTEP_Out[2847] = \<const0> ;
  assign LOCKSTEP_Out[2848] = \<const0> ;
  assign LOCKSTEP_Out[2849] = \<const0> ;
  assign LOCKSTEP_Out[2850] = \<const0> ;
  assign LOCKSTEP_Out[2851] = \<const0> ;
  assign LOCKSTEP_Out[2852] = \<const0> ;
  assign LOCKSTEP_Out[2853] = \<const0> ;
  assign LOCKSTEP_Out[2854] = \<const0> ;
  assign LOCKSTEP_Out[2855] = \<const0> ;
  assign LOCKSTEP_Out[2856] = \<const0> ;
  assign LOCKSTEP_Out[2857] = \<const0> ;
  assign LOCKSTEP_Out[2858] = \<const0> ;
  assign LOCKSTEP_Out[2859] = \<const0> ;
  assign LOCKSTEP_Out[2860] = \<const0> ;
  assign LOCKSTEP_Out[2861] = \<const0> ;
  assign LOCKSTEP_Out[2862] = \<const0> ;
  assign LOCKSTEP_Out[2863] = \<const0> ;
  assign LOCKSTEP_Out[2864] = \<const0> ;
  assign LOCKSTEP_Out[2865] = \<const0> ;
  assign LOCKSTEP_Out[2866] = \<const0> ;
  assign LOCKSTEP_Out[2867] = \<const0> ;
  assign LOCKSTEP_Out[2868] = \<const0> ;
  assign LOCKSTEP_Out[2869] = \<const0> ;
  assign LOCKSTEP_Out[2870] = \<const0> ;
  assign LOCKSTEP_Out[2871] = \<const0> ;
  assign LOCKSTEP_Out[2872] = \<const0> ;
  assign LOCKSTEP_Out[2873] = \<const0> ;
  assign LOCKSTEP_Out[2874] = \<const0> ;
  assign LOCKSTEP_Out[2875] = \<const0> ;
  assign LOCKSTEP_Out[2876] = \<const0> ;
  assign LOCKSTEP_Out[2877] = \<const0> ;
  assign LOCKSTEP_Out[2878] = \<const0> ;
  assign LOCKSTEP_Out[2879] = \<const0> ;
  assign LOCKSTEP_Out[2880] = \<const0> ;
  assign LOCKSTEP_Out[2881:2945] = \^LOCKSTEP_Out [2881:2945];
  assign LOCKSTEP_Out[2946] = \<const0> ;
  assign LOCKSTEP_Out[2947] = \<const0> ;
  assign LOCKSTEP_Out[2948] = \<const0> ;
  assign LOCKSTEP_Out[2949] = \<const0> ;
  assign LOCKSTEP_Out[2950] = \<const0> ;
  assign LOCKSTEP_Out[2951] = \<const0> ;
  assign LOCKSTEP_Out[2952] = \<const0> ;
  assign LOCKSTEP_Out[2953] = \<const0> ;
  assign LOCKSTEP_Out[2954] = \<const0> ;
  assign LOCKSTEP_Out[2955] = \<const0> ;
  assign LOCKSTEP_Out[2956] = \<const0> ;
  assign LOCKSTEP_Out[2957] = \<const0> ;
  assign LOCKSTEP_Out[2958] = \<const0> ;
  assign LOCKSTEP_Out[2959] = \<const0> ;
  assign LOCKSTEP_Out[2960] = \<const0> ;
  assign LOCKSTEP_Out[2961] = \<const0> ;
  assign LOCKSTEP_Out[2962] = \<const0> ;
  assign LOCKSTEP_Out[2963] = \<const0> ;
  assign LOCKSTEP_Out[2964] = \<const0> ;
  assign LOCKSTEP_Out[2965] = \<const0> ;
  assign LOCKSTEP_Out[2966] = \<const0> ;
  assign LOCKSTEP_Out[2967] = \<const0> ;
  assign LOCKSTEP_Out[2968] = \<const0> ;
  assign LOCKSTEP_Out[2969] = \<const0> ;
  assign LOCKSTEP_Out[2970] = \<const0> ;
  assign LOCKSTEP_Out[2971] = \<const0> ;
  assign LOCKSTEP_Out[2972] = \<const0> ;
  assign LOCKSTEP_Out[2973] = \<const0> ;
  assign LOCKSTEP_Out[2974] = \<const0> ;
  assign LOCKSTEP_Out[2975] = \<const0> ;
  assign LOCKSTEP_Out[2976] = \<const0> ;
  assign LOCKSTEP_Out[2977] = \<const0> ;
  assign LOCKSTEP_Out[2978:2983] = \^LOCKSTEP_Out [2978:2983];
  assign LOCKSTEP_Out[2984] = \<const0> ;
  assign LOCKSTEP_Out[2985] = \<const0> ;
  assign LOCKSTEP_Out[2986] = \<const0> ;
  assign LOCKSTEP_Out[2987] = \<const0> ;
  assign LOCKSTEP_Out[2988] = \<const0> ;
  assign LOCKSTEP_Out[2989] = \<const0> ;
  assign LOCKSTEP_Out[2990] = \<const0> ;
  assign LOCKSTEP_Out[2991] = \<const0> ;
  assign LOCKSTEP_Out[2992] = \^LOCKSTEP_Out [2992];
  assign LOCKSTEP_Out[2993] = \<const0> ;
  assign LOCKSTEP_Out[2994] = \<const0> ;
  assign LOCKSTEP_Out[2995:2997] = \^LOCKSTEP_Out [2995:2997];
  assign LOCKSTEP_Out[2998] = \<const0> ;
  assign LOCKSTEP_Out[2999] = \<const0> ;
  assign LOCKSTEP_Out[3000] = \<const0> ;
  assign LOCKSTEP_Out[3001] = \<const0> ;
  assign LOCKSTEP_Out[3002] = \<const0> ;
  assign LOCKSTEP_Out[3003] = \<const0> ;
  assign LOCKSTEP_Out[3004] = \<const0> ;
  assign LOCKSTEP_Out[3005] = \<const0> ;
  assign LOCKSTEP_Out[3006] = \<const0> ;
  assign LOCKSTEP_Out[3007:3038] = \^LOCKSTEP_Out [3007:3038];
  assign LOCKSTEP_Out[3039] = \<const0> ;
  assign LOCKSTEP_Out[3040] = \<const0> ;
  assign LOCKSTEP_Out[3041] = \<const0> ;
  assign LOCKSTEP_Out[3042] = \<const0> ;
  assign LOCKSTEP_Out[3043] = \<const0> ;
  assign LOCKSTEP_Out[3044] = \<const0> ;
  assign LOCKSTEP_Out[3045] = \<const0> ;
  assign LOCKSTEP_Out[3046] = \<const0> ;
  assign LOCKSTEP_Out[3047] = \<const0> ;
  assign LOCKSTEP_Out[3048] = \<const0> ;
  assign LOCKSTEP_Out[3049] = \<const0> ;
  assign LOCKSTEP_Out[3050] = \<const0> ;
  assign LOCKSTEP_Out[3051] = \<const0> ;
  assign LOCKSTEP_Out[3052] = \<const0> ;
  assign LOCKSTEP_Out[3053] = \<const0> ;
  assign LOCKSTEP_Out[3054] = \<const0> ;
  assign LOCKSTEP_Out[3055] = \<const0> ;
  assign LOCKSTEP_Out[3056] = \<const0> ;
  assign LOCKSTEP_Out[3057] = \<const0> ;
  assign LOCKSTEP_Out[3058] = \<const0> ;
  assign LOCKSTEP_Out[3059] = \<const0> ;
  assign LOCKSTEP_Out[3060] = \<const0> ;
  assign LOCKSTEP_Out[3061] = \<const0> ;
  assign LOCKSTEP_Out[3062] = \<const0> ;
  assign LOCKSTEP_Out[3063] = \<const0> ;
  assign LOCKSTEP_Out[3064] = \<const0> ;
  assign LOCKSTEP_Out[3065] = \<const0> ;
  assign LOCKSTEP_Out[3066] = \<const0> ;
  assign LOCKSTEP_Out[3067] = \<const0> ;
  assign LOCKSTEP_Out[3068] = \<const0> ;
  assign LOCKSTEP_Out[3069] = \<const0> ;
  assign LOCKSTEP_Out[3070] = \<const0> ;
  assign LOCKSTEP_Out[3071] = \^LOCKSTEP_Out [3071];
  assign LOCKSTEP_Out[3072] = \<const0> ;
  assign LOCKSTEP_Out[3073] = \^LOCKSTEP_Out [3073];
  assign LOCKSTEP_Out[3074] = \<const0> ;
  assign LOCKSTEP_Out[3075:3110] = \^LOCKSTEP_Out [3075:3110];
  assign LOCKSTEP_Out[3111] = \<const0> ;
  assign LOCKSTEP_Out[3112] = \<const0> ;
  assign LOCKSTEP_Out[3113] = \<const0> ;
  assign LOCKSTEP_Out[3114] = \<const0> ;
  assign LOCKSTEP_Out[3115] = \<const0> ;
  assign LOCKSTEP_Out[3116] = \<const0> ;
  assign LOCKSTEP_Out[3117] = \<const0> ;
  assign LOCKSTEP_Out[3118] = \<const0> ;
  assign LOCKSTEP_Out[3119] = \<const0> ;
  assign LOCKSTEP_Out[3120] = \<const0> ;
  assign LOCKSTEP_Out[3121] = \<const0> ;
  assign LOCKSTEP_Out[3122] = \<const0> ;
  assign LOCKSTEP_Out[3123] = \<const0> ;
  assign LOCKSTEP_Out[3124] = \<const0> ;
  assign LOCKSTEP_Out[3125] = \<const0> ;
  assign LOCKSTEP_Out[3126] = \<const0> ;
  assign LOCKSTEP_Out[3127] = \<const0> ;
  assign LOCKSTEP_Out[3128] = \<const0> ;
  assign LOCKSTEP_Out[3129] = \<const0> ;
  assign LOCKSTEP_Out[3130] = \<const0> ;
  assign LOCKSTEP_Out[3131] = \<const0> ;
  assign LOCKSTEP_Out[3132] = \<const0> ;
  assign LOCKSTEP_Out[3133] = \<const0> ;
  assign LOCKSTEP_Out[3134] = \<const0> ;
  assign LOCKSTEP_Out[3135] = \<const0> ;
  assign LOCKSTEP_Out[3136] = \<const0> ;
  assign LOCKSTEP_Out[3137] = \<const0> ;
  assign LOCKSTEP_Out[3138] = \<const0> ;
  assign LOCKSTEP_Out[3139] = \<const0> ;
  assign LOCKSTEP_Out[3140] = \<const0> ;
  assign LOCKSTEP_Out[3141] = \<const0> ;
  assign LOCKSTEP_Out[3142] = \<const0> ;
  assign LOCKSTEP_Out[3143:3174] = \^LOCKSTEP_Out [3143:3174];
  assign LOCKSTEP_Out[3175] = \<const0> ;
  assign LOCKSTEP_Out[3176] = \<const0> ;
  assign LOCKSTEP_Out[3177] = \<const0> ;
  assign LOCKSTEP_Out[3178] = \<const0> ;
  assign LOCKSTEP_Out[3179] = \<const0> ;
  assign LOCKSTEP_Out[3180] = \<const0> ;
  assign LOCKSTEP_Out[3181] = \<const0> ;
  assign LOCKSTEP_Out[3182] = \<const0> ;
  assign LOCKSTEP_Out[3183] = \<const0> ;
  assign LOCKSTEP_Out[3184] = \<const0> ;
  assign LOCKSTEP_Out[3185] = \<const0> ;
  assign LOCKSTEP_Out[3186] = \<const0> ;
  assign LOCKSTEP_Out[3187] = \<const0> ;
  assign LOCKSTEP_Out[3188] = \<const0> ;
  assign LOCKSTEP_Out[3189] = \<const0> ;
  assign LOCKSTEP_Out[3190] = \<const0> ;
  assign LOCKSTEP_Out[3191] = \<const0> ;
  assign LOCKSTEP_Out[3192] = \<const0> ;
  assign LOCKSTEP_Out[3193] = \<const0> ;
  assign LOCKSTEP_Out[3194] = \<const0> ;
  assign LOCKSTEP_Out[3195] = \<const0> ;
  assign LOCKSTEP_Out[3196] = \<const0> ;
  assign LOCKSTEP_Out[3197] = \<const0> ;
  assign LOCKSTEP_Out[3198] = \<const0> ;
  assign LOCKSTEP_Out[3199] = \<const0> ;
  assign LOCKSTEP_Out[3200] = \<const0> ;
  assign LOCKSTEP_Out[3201] = \<const0> ;
  assign LOCKSTEP_Out[3202] = \<const0> ;
  assign LOCKSTEP_Out[3203] = \<const0> ;
  assign LOCKSTEP_Out[3204] = \<const0> ;
  assign LOCKSTEP_Out[3205] = \<const0> ;
  assign LOCKSTEP_Out[3206] = \<const0> ;
  assign LOCKSTEP_Out[3207:3210] = \^LOCKSTEP_Out [3207:3210];
  assign LOCKSTEP_Out[3211] = \<const0> ;
  assign LOCKSTEP_Out[3212] = \<const0> ;
  assign LOCKSTEP_Out[3213] = \<const0> ;
  assign LOCKSTEP_Out[3214] = \<const0> ;
  assign LOCKSTEP_Out[3215:3217] = \^LOCKSTEP_Out [3215:3217];
  assign LOCKSTEP_Out[3218] = \<const0> ;
  assign LOCKSTEP_Out[3219] = \<const0> ;
  assign LOCKSTEP_Out[3220] = \<const0> ;
  assign LOCKSTEP_Out[3221] = \<const0> ;
  assign LOCKSTEP_Out[3222] = \<const0> ;
  assign LOCKSTEP_Out[3223] = \<const0> ;
  assign LOCKSTEP_Out[3224] = \<const0> ;
  assign LOCKSTEP_Out[3225:3228] = \^LOCKSTEP_Out [3225:3228];
  assign LOCKSTEP_Out[3229] = \<const0> ;
  assign LOCKSTEP_Out[3230] = \<const0> ;
  assign LOCKSTEP_Out[3231] = \<const0> ;
  assign LOCKSTEP_Out[3232] = \<const0> ;
  assign LOCKSTEP_Out[3233] = \<const0> ;
  assign LOCKSTEP_Out[3234] = \<const0> ;
  assign LOCKSTEP_Out[3235] = \<const0> ;
  assign LOCKSTEP_Out[3236] = \<const0> ;
  assign LOCKSTEP_Out[3237] = \<const0> ;
  assign LOCKSTEP_Out[3238] = \<const0> ;
  assign LOCKSTEP_Out[3239] = \<const0> ;
  assign LOCKSTEP_Out[3240] = \<const0> ;
  assign LOCKSTEP_Out[3241] = \<const0> ;
  assign LOCKSTEP_Out[3242] = \<const0> ;
  assign LOCKSTEP_Out[3243] = \<const0> ;
  assign LOCKSTEP_Out[3244] = \<const0> ;
  assign LOCKSTEP_Out[3245] = \<const0> ;
  assign LOCKSTEP_Out[3246] = \<const0> ;
  assign LOCKSTEP_Out[3247] = \<const0> ;
  assign LOCKSTEP_Out[3248] = \<const0> ;
  assign LOCKSTEP_Out[3249] = \<const0> ;
  assign LOCKSTEP_Out[3250] = \<const0> ;
  assign LOCKSTEP_Out[3251] = \<const0> ;
  assign LOCKSTEP_Out[3252] = \<const0> ;
  assign LOCKSTEP_Out[3253] = \<const0> ;
  assign LOCKSTEP_Out[3254] = \<const0> ;
  assign LOCKSTEP_Out[3255] = \<const0> ;
  assign LOCKSTEP_Out[3256] = \<const0> ;
  assign LOCKSTEP_Out[3257] = \<const0> ;
  assign LOCKSTEP_Out[3258] = \<const0> ;
  assign LOCKSTEP_Out[3259] = \<const0> ;
  assign LOCKSTEP_Out[3260] = \<const0> ;
  assign LOCKSTEP_Out[3261] = \<const0> ;
  assign LOCKSTEP_Out[3262] = \<const0> ;
  assign LOCKSTEP_Out[3263] = \<const0> ;
  assign LOCKSTEP_Out[3264] = \<const0> ;
  assign LOCKSTEP_Out[3265] = \<const0> ;
  assign LOCKSTEP_Out[3266] = \<const0> ;
  assign LOCKSTEP_Out[3267] = \<const0> ;
  assign LOCKSTEP_Out[3268] = \<const0> ;
  assign LOCKSTEP_Out[3269] = \<const0> ;
  assign LOCKSTEP_Out[3270] = \<const0> ;
  assign LOCKSTEP_Out[3271] = \<const0> ;
  assign LOCKSTEP_Out[3272] = \<const0> ;
  assign LOCKSTEP_Out[3273] = \<const0> ;
  assign LOCKSTEP_Out[3274] = \<const0> ;
  assign LOCKSTEP_Out[3275] = \<const0> ;
  assign LOCKSTEP_Out[3276] = \<const0> ;
  assign LOCKSTEP_Out[3277] = \<const0> ;
  assign LOCKSTEP_Out[3278] = \<const0> ;
  assign LOCKSTEP_Out[3279] = \<const0> ;
  assign LOCKSTEP_Out[3280] = \<const0> ;
  assign LOCKSTEP_Out[3281] = \<const0> ;
  assign LOCKSTEP_Out[3282] = \<const0> ;
  assign LOCKSTEP_Out[3283] = \<const0> ;
  assign LOCKSTEP_Out[3284] = \<const0> ;
  assign LOCKSTEP_Out[3285] = \<const0> ;
  assign LOCKSTEP_Out[3286] = \<const0> ;
  assign LOCKSTEP_Out[3287] = \<const0> ;
  assign LOCKSTEP_Out[3288] = \<const0> ;
  assign LOCKSTEP_Out[3289] = \<const0> ;
  assign LOCKSTEP_Out[3290] = \<const0> ;
  assign LOCKSTEP_Out[3291] = \<const0> ;
  assign LOCKSTEP_Out[3292] = \<const0> ;
  assign LOCKSTEP_Out[3293] = \<const0> ;
  assign LOCKSTEP_Out[3294] = \<const0> ;
  assign LOCKSTEP_Out[3295] = \<const0> ;
  assign LOCKSTEP_Out[3296] = \<const0> ;
  assign LOCKSTEP_Out[3297] = \<const0> ;
  assign LOCKSTEP_Out[3298] = \<const0> ;
  assign LOCKSTEP_Out[3299] = \<const0> ;
  assign LOCKSTEP_Out[3300] = \<const0> ;
  assign LOCKSTEP_Out[3301] = \<const0> ;
  assign LOCKSTEP_Out[3302] = \<const0> ;
  assign LOCKSTEP_Out[3303] = \<const0> ;
  assign LOCKSTEP_Out[3304] = \<const0> ;
  assign LOCKSTEP_Out[3305] = \<const0> ;
  assign LOCKSTEP_Out[3306] = \<const0> ;
  assign LOCKSTEP_Out[3307] = \<const0> ;
  assign LOCKSTEP_Out[3308] = \<const0> ;
  assign LOCKSTEP_Out[3309] = \<const0> ;
  assign LOCKSTEP_Out[3310] = \<const0> ;
  assign LOCKSTEP_Out[3311] = \<const0> ;
  assign LOCKSTEP_Out[3312] = \<const0> ;
  assign LOCKSTEP_Out[3313] = \<const0> ;
  assign LOCKSTEP_Out[3314] = \<const0> ;
  assign LOCKSTEP_Out[3315] = \<const0> ;
  assign LOCKSTEP_Out[3316] = \<const0> ;
  assign LOCKSTEP_Out[3317] = \<const0> ;
  assign LOCKSTEP_Out[3318] = \<const0> ;
  assign LOCKSTEP_Out[3319] = \<const0> ;
  assign LOCKSTEP_Out[3320] = \<const0> ;
  assign LOCKSTEP_Out[3321] = \<const0> ;
  assign LOCKSTEP_Out[3322] = \<const0> ;
  assign LOCKSTEP_Out[3323] = \<const0> ;
  assign LOCKSTEP_Out[3324] = \<const0> ;
  assign LOCKSTEP_Out[3325] = \<const0> ;
  assign LOCKSTEP_Out[3326] = \<const0> ;
  assign LOCKSTEP_Out[3327] = \<const0> ;
  assign LOCKSTEP_Out[3328] = \<const0> ;
  assign LOCKSTEP_Out[3329] = \<const0> ;
  assign LOCKSTEP_Out[3330] = \<const0> ;
  assign LOCKSTEP_Out[3331] = \<const0> ;
  assign LOCKSTEP_Out[3332] = \<const0> ;
  assign LOCKSTEP_Out[3333] = \<const0> ;
  assign LOCKSTEP_Out[3334] = \<const0> ;
  assign LOCKSTEP_Out[3335] = \<const0> ;
  assign LOCKSTEP_Out[3336] = \<const0> ;
  assign LOCKSTEP_Out[3337] = \<const0> ;
  assign LOCKSTEP_Out[3338] = \<const0> ;
  assign LOCKSTEP_Out[3339] = \<const0> ;
  assign LOCKSTEP_Out[3340] = \<const0> ;
  assign LOCKSTEP_Out[3341] = \<const0> ;
  assign LOCKSTEP_Out[3342] = \<const0> ;
  assign LOCKSTEP_Out[3343] = \<const0> ;
  assign LOCKSTEP_Out[3344] = \<const0> ;
  assign LOCKSTEP_Out[3345] = \<const0> ;
  assign LOCKSTEP_Out[3346] = \<const0> ;
  assign LOCKSTEP_Out[3347] = \<const0> ;
  assign LOCKSTEP_Out[3348] = \<const0> ;
  assign LOCKSTEP_Out[3349] = \<const0> ;
  assign LOCKSTEP_Out[3350] = \<const0> ;
  assign LOCKSTEP_Out[3351] = \<const0> ;
  assign LOCKSTEP_Out[3352] = \<const0> ;
  assign LOCKSTEP_Out[3353] = \<const0> ;
  assign LOCKSTEP_Out[3354] = \<const0> ;
  assign LOCKSTEP_Out[3355] = \<const0> ;
  assign LOCKSTEP_Out[3356] = \<const0> ;
  assign LOCKSTEP_Out[3357] = \<const0> ;
  assign LOCKSTEP_Out[3358] = \<const0> ;
  assign LOCKSTEP_Out[3359] = \<const0> ;
  assign LOCKSTEP_Out[3360] = \<const0> ;
  assign LOCKSTEP_Out[3361] = \<const0> ;
  assign LOCKSTEP_Out[3362] = \<const0> ;
  assign LOCKSTEP_Out[3363] = \<const0> ;
  assign LOCKSTEP_Out[3364] = \<const0> ;
  assign LOCKSTEP_Out[3365] = \<const0> ;
  assign LOCKSTEP_Out[3366] = \<const0> ;
  assign LOCKSTEP_Out[3367] = \<const0> ;
  assign LOCKSTEP_Out[3368] = \<const0> ;
  assign LOCKSTEP_Out[3369] = \<const0> ;
  assign LOCKSTEP_Out[3370] = \<const0> ;
  assign LOCKSTEP_Out[3371] = \<const0> ;
  assign LOCKSTEP_Out[3372] = \<const0> ;
  assign LOCKSTEP_Out[3373] = \<const0> ;
  assign LOCKSTEP_Out[3374] = \<const0> ;
  assign LOCKSTEP_Out[3375] = \<const0> ;
  assign LOCKSTEP_Out[3376] = \<const0> ;
  assign LOCKSTEP_Out[3377] = \<const0> ;
  assign LOCKSTEP_Out[3378] = \<const0> ;
  assign LOCKSTEP_Out[3379] = \<const0> ;
  assign LOCKSTEP_Out[3380] = \<const0> ;
  assign LOCKSTEP_Out[3381] = \<const0> ;
  assign LOCKSTEP_Out[3382] = \<const0> ;
  assign LOCKSTEP_Out[3383] = \<const0> ;
  assign LOCKSTEP_Out[3384] = \<const0> ;
  assign LOCKSTEP_Out[3385] = \<const0> ;
  assign LOCKSTEP_Out[3386] = \<const0> ;
  assign LOCKSTEP_Out[3387] = \<const0> ;
  assign LOCKSTEP_Out[3388] = \<const0> ;
  assign LOCKSTEP_Out[3389] = \<const0> ;
  assign LOCKSTEP_Out[3390] = \<const0> ;
  assign LOCKSTEP_Out[3391] = \<const0> ;
  assign LOCKSTEP_Out[3392] = \<const0> ;
  assign LOCKSTEP_Out[3393] = \<const0> ;
  assign LOCKSTEP_Out[3394] = \<const0> ;
  assign LOCKSTEP_Out[3395] = \<const0> ;
  assign LOCKSTEP_Out[3396] = \<const0> ;
  assign LOCKSTEP_Out[3397] = \<const0> ;
  assign LOCKSTEP_Out[3398] = \<const0> ;
  assign LOCKSTEP_Out[3399] = \<const0> ;
  assign LOCKSTEP_Out[3400] = \<const0> ;
  assign LOCKSTEP_Out[3401] = \<const0> ;
  assign LOCKSTEP_Out[3402] = \<const0> ;
  assign LOCKSTEP_Out[3403] = \<const0> ;
  assign LOCKSTEP_Out[3404] = \<const0> ;
  assign LOCKSTEP_Out[3405] = \<const0> ;
  assign LOCKSTEP_Out[3406] = \<const0> ;
  assign LOCKSTEP_Out[3407] = \<const0> ;
  assign LOCKSTEP_Out[3408] = \<const0> ;
  assign LOCKSTEP_Out[3409] = \<const0> ;
  assign LOCKSTEP_Out[3410] = \<const0> ;
  assign LOCKSTEP_Out[3411] = \<const0> ;
  assign LOCKSTEP_Out[3412] = \<const0> ;
  assign LOCKSTEP_Out[3413] = \<const0> ;
  assign LOCKSTEP_Out[3414] = \<const0> ;
  assign LOCKSTEP_Out[3415] = \<const0> ;
  assign LOCKSTEP_Out[3416] = \<const0> ;
  assign LOCKSTEP_Out[3417] = \<const0> ;
  assign LOCKSTEP_Out[3418] = \<const0> ;
  assign LOCKSTEP_Out[3419] = \<const0> ;
  assign LOCKSTEP_Out[3420] = \<const0> ;
  assign LOCKSTEP_Out[3421] = \<const0> ;
  assign LOCKSTEP_Out[3422] = \<const0> ;
  assign LOCKSTEP_Out[3423] = \<const0> ;
  assign LOCKSTEP_Out[3424] = \<const0> ;
  assign LOCKSTEP_Out[3425] = \<const0> ;
  assign LOCKSTEP_Out[3426] = \<const0> ;
  assign LOCKSTEP_Out[3427] = \<const0> ;
  assign LOCKSTEP_Out[3428] = \<const0> ;
  assign LOCKSTEP_Out[3429] = \<const0> ;
  assign LOCKSTEP_Out[3430] = \<const0> ;
  assign LOCKSTEP_Out[3431] = \<const0> ;
  assign LOCKSTEP_Out[3432] = \<const0> ;
  assign LOCKSTEP_Out[3433] = \<const0> ;
  assign LOCKSTEP_Out[3434] = \<const0> ;
  assign LOCKSTEP_Out[3435] = \<const0> ;
  assign LOCKSTEP_Out[3436] = \<const0> ;
  assign LOCKSTEP_Out[3437] = \<const0> ;
  assign LOCKSTEP_Out[3438] = \<const0> ;
  assign LOCKSTEP_Out[3439] = \<const0> ;
  assign LOCKSTEP_Out[3440] = \<const0> ;
  assign LOCKSTEP_Out[3441] = \<const0> ;
  assign LOCKSTEP_Out[3442] = \<const0> ;
  assign LOCKSTEP_Out[3443] = \<const0> ;
  assign LOCKSTEP_Out[3444] = \<const0> ;
  assign LOCKSTEP_Out[3445] = \<const0> ;
  assign LOCKSTEP_Out[3446] = \<const0> ;
  assign LOCKSTEP_Out[3447] = \<const0> ;
  assign LOCKSTEP_Out[3448] = \<const0> ;
  assign LOCKSTEP_Out[3449] = \<const0> ;
  assign LOCKSTEP_Out[3450] = \<const0> ;
  assign LOCKSTEP_Out[3451] = \<const0> ;
  assign LOCKSTEP_Out[3452] = \<const0> ;
  assign LOCKSTEP_Out[3453] = \<const0> ;
  assign LOCKSTEP_Out[3454] = \<const0> ;
  assign LOCKSTEP_Out[3455] = \<const0> ;
  assign LOCKSTEP_Out[3456] = \<const0> ;
  assign LOCKSTEP_Out[3457] = \<const0> ;
  assign LOCKSTEP_Out[3458] = \<const0> ;
  assign LOCKSTEP_Out[3459] = \<const0> ;
  assign LOCKSTEP_Out[3460] = \<const0> ;
  assign LOCKSTEP_Out[3461] = \<const0> ;
  assign LOCKSTEP_Out[3462] = \<const0> ;
  assign LOCKSTEP_Out[3463] = \<const0> ;
  assign LOCKSTEP_Out[3464] = \<const0> ;
  assign LOCKSTEP_Out[3465] = \<const0> ;
  assign LOCKSTEP_Out[3466] = \<const0> ;
  assign LOCKSTEP_Out[3467] = \<const0> ;
  assign LOCKSTEP_Out[3468] = \<const0> ;
  assign LOCKSTEP_Out[3469] = \<const0> ;
  assign LOCKSTEP_Out[3470] = \<const0> ;
  assign LOCKSTEP_Out[3471] = \<const0> ;
  assign LOCKSTEP_Out[3472] = \<const0> ;
  assign LOCKSTEP_Out[3473] = \<const0> ;
  assign LOCKSTEP_Out[3474] = \<const0> ;
  assign LOCKSTEP_Out[3475] = \<const0> ;
  assign LOCKSTEP_Out[3476] = \<const0> ;
  assign LOCKSTEP_Out[3477] = \<const0> ;
  assign LOCKSTEP_Out[3478] = \<const0> ;
  assign LOCKSTEP_Out[3479] = \<const0> ;
  assign LOCKSTEP_Out[3480] = \<const0> ;
  assign LOCKSTEP_Out[3481] = \<const0> ;
  assign LOCKSTEP_Out[3482] = \<const0> ;
  assign LOCKSTEP_Out[3483] = \<const0> ;
  assign LOCKSTEP_Out[3484] = \<const0> ;
  assign LOCKSTEP_Out[3485] = \<const0> ;
  assign LOCKSTEP_Out[3486] = \<const0> ;
  assign LOCKSTEP_Out[3487] = \<const0> ;
  assign LOCKSTEP_Out[3488] = \<const0> ;
  assign LOCKSTEP_Out[3489] = \<const0> ;
  assign LOCKSTEP_Out[3490] = \<const0> ;
  assign LOCKSTEP_Out[3491] = \<const0> ;
  assign LOCKSTEP_Out[3492] = \<const0> ;
  assign LOCKSTEP_Out[3493] = \<const0> ;
  assign LOCKSTEP_Out[3494] = \<const0> ;
  assign LOCKSTEP_Out[3495] = \<const0> ;
  assign LOCKSTEP_Out[3496] = \<const0> ;
  assign LOCKSTEP_Out[3497] = \<const0> ;
  assign LOCKSTEP_Out[3498] = \<const0> ;
  assign LOCKSTEP_Out[3499] = \<const0> ;
  assign LOCKSTEP_Out[3500] = \<const0> ;
  assign LOCKSTEP_Out[3501] = \<const0> ;
  assign LOCKSTEP_Out[3502] = \<const0> ;
  assign LOCKSTEP_Out[3503] = \<const0> ;
  assign LOCKSTEP_Out[3504] = \<const0> ;
  assign LOCKSTEP_Out[3505] = \<const0> ;
  assign LOCKSTEP_Out[3506] = \<const0> ;
  assign LOCKSTEP_Out[3507] = \<const0> ;
  assign LOCKSTEP_Out[3508] = \<const0> ;
  assign LOCKSTEP_Out[3509] = \<const0> ;
  assign LOCKSTEP_Out[3510] = \<const0> ;
  assign LOCKSTEP_Out[3511] = \<const0> ;
  assign LOCKSTEP_Out[3512] = \<const0> ;
  assign LOCKSTEP_Out[3513] = \<const0> ;
  assign LOCKSTEP_Out[3514] = \<const0> ;
  assign LOCKSTEP_Out[3515] = \<const0> ;
  assign LOCKSTEP_Out[3516] = \<const0> ;
  assign LOCKSTEP_Out[3517] = \<const0> ;
  assign LOCKSTEP_Out[3518] = \<const0> ;
  assign LOCKSTEP_Out[3519] = \<const0> ;
  assign LOCKSTEP_Out[3520] = \<const0> ;
  assign LOCKSTEP_Out[3521] = \<const0> ;
  assign LOCKSTEP_Out[3522] = \<const0> ;
  assign LOCKSTEP_Out[3523] = \<const0> ;
  assign LOCKSTEP_Out[3524] = \<const0> ;
  assign LOCKSTEP_Out[3525] = \<const0> ;
  assign LOCKSTEP_Out[3526] = \<const0> ;
  assign LOCKSTEP_Out[3527] = \<const0> ;
  assign LOCKSTEP_Out[3528] = \<const0> ;
  assign LOCKSTEP_Out[3529] = \<const0> ;
  assign LOCKSTEP_Out[3530] = \<const0> ;
  assign LOCKSTEP_Out[3531] = \<const0> ;
  assign LOCKSTEP_Out[3532] = \<const0> ;
  assign LOCKSTEP_Out[3533] = \<const0> ;
  assign LOCKSTEP_Out[3534] = \<const0> ;
  assign LOCKSTEP_Out[3535] = \<const0> ;
  assign LOCKSTEP_Out[3536] = \<const0> ;
  assign LOCKSTEP_Out[3537] = \<const0> ;
  assign LOCKSTEP_Out[3538] = \<const0> ;
  assign LOCKSTEP_Out[3539] = \<const0> ;
  assign LOCKSTEP_Out[3540] = \<const0> ;
  assign LOCKSTEP_Out[3541] = \<const0> ;
  assign LOCKSTEP_Out[3542] = \<const0> ;
  assign LOCKSTEP_Out[3543] = \<const0> ;
  assign LOCKSTEP_Out[3544] = \<const0> ;
  assign LOCKSTEP_Out[3545] = \<const0> ;
  assign LOCKSTEP_Out[3546] = \<const0> ;
  assign LOCKSTEP_Out[3547] = \<const0> ;
  assign LOCKSTEP_Out[3548] = \<const0> ;
  assign LOCKSTEP_Out[3549] = \<const0> ;
  assign LOCKSTEP_Out[3550] = \<const0> ;
  assign LOCKSTEP_Out[3551] = \<const0> ;
  assign LOCKSTEP_Out[3552] = \<const0> ;
  assign LOCKSTEP_Out[3553] = \<const0> ;
  assign LOCKSTEP_Out[3554] = \<const0> ;
  assign LOCKSTEP_Out[3555] = \<const0> ;
  assign LOCKSTEP_Out[3556] = \<const0> ;
  assign LOCKSTEP_Out[3557] = \<const0> ;
  assign LOCKSTEP_Out[3558] = \<const0> ;
  assign LOCKSTEP_Out[3559] = \<const0> ;
  assign LOCKSTEP_Out[3560] = \<const0> ;
  assign LOCKSTEP_Out[3561] = \<const0> ;
  assign LOCKSTEP_Out[3562] = \<const0> ;
  assign LOCKSTEP_Out[3563] = \<const0> ;
  assign LOCKSTEP_Out[3564] = \<const0> ;
  assign LOCKSTEP_Out[3565] = \<const0> ;
  assign LOCKSTEP_Out[3566] = \<const0> ;
  assign LOCKSTEP_Out[3567] = \<const0> ;
  assign LOCKSTEP_Out[3568] = \<const0> ;
  assign LOCKSTEP_Out[3569] = \<const0> ;
  assign LOCKSTEP_Out[3570] = \<const0> ;
  assign LOCKSTEP_Out[3571] = \<const0> ;
  assign LOCKSTEP_Out[3572] = \<const0> ;
  assign LOCKSTEP_Out[3573] = \<const0> ;
  assign LOCKSTEP_Out[3574] = \<const0> ;
  assign LOCKSTEP_Out[3575] = \<const0> ;
  assign LOCKSTEP_Out[3576] = \<const0> ;
  assign LOCKSTEP_Out[3577] = \<const0> ;
  assign LOCKSTEP_Out[3578] = \<const0> ;
  assign LOCKSTEP_Out[3579] = \<const0> ;
  assign LOCKSTEP_Out[3580] = \<const0> ;
  assign LOCKSTEP_Out[3581] = \<const0> ;
  assign LOCKSTEP_Out[3582] = \<const0> ;
  assign LOCKSTEP_Out[3583] = \<const0> ;
  assign LOCKSTEP_Out[3584] = \<const0> ;
  assign LOCKSTEP_Out[3585] = \<const0> ;
  assign LOCKSTEP_Out[3586] = \<const0> ;
  assign LOCKSTEP_Out[3587] = \<const0> ;
  assign LOCKSTEP_Out[3588] = \<const0> ;
  assign LOCKSTEP_Out[3589] = \<const0> ;
  assign LOCKSTEP_Out[3590] = \<const0> ;
  assign LOCKSTEP_Out[3591] = \<const0> ;
  assign LOCKSTEP_Out[3592] = \<const0> ;
  assign LOCKSTEP_Out[3593] = \<const0> ;
  assign LOCKSTEP_Out[3594] = \<const0> ;
  assign LOCKSTEP_Out[3595] = \<const0> ;
  assign LOCKSTEP_Out[3596] = \<const0> ;
  assign LOCKSTEP_Out[3597] = \<const0> ;
  assign LOCKSTEP_Out[3598] = \<const0> ;
  assign LOCKSTEP_Out[3599] = \<const0> ;
  assign LOCKSTEP_Out[3600] = \<const0> ;
  assign LOCKSTEP_Out[3601] = \<const0> ;
  assign LOCKSTEP_Out[3602] = \<const0> ;
  assign LOCKSTEP_Out[3603] = \<const0> ;
  assign LOCKSTEP_Out[3604] = \<const0> ;
  assign LOCKSTEP_Out[3605] = \<const0> ;
  assign LOCKSTEP_Out[3606] = \<const0> ;
  assign LOCKSTEP_Out[3607] = \<const0> ;
  assign LOCKSTEP_Out[3608] = \<const0> ;
  assign LOCKSTEP_Out[3609] = \<const0> ;
  assign LOCKSTEP_Out[3610] = \<const0> ;
  assign LOCKSTEP_Out[3611] = \<const0> ;
  assign LOCKSTEP_Out[3612] = \<const0> ;
  assign LOCKSTEP_Out[3613] = \<const0> ;
  assign LOCKSTEP_Out[3614] = \<const0> ;
  assign LOCKSTEP_Out[3615] = \<const0> ;
  assign LOCKSTEP_Out[3616] = \<const0> ;
  assign LOCKSTEP_Out[3617] = \<const0> ;
  assign LOCKSTEP_Out[3618] = \<const0> ;
  assign LOCKSTEP_Out[3619] = \<const0> ;
  assign LOCKSTEP_Out[3620] = \<const0> ;
  assign LOCKSTEP_Out[3621] = \<const0> ;
  assign LOCKSTEP_Out[3622] = \<const0> ;
  assign LOCKSTEP_Out[3623] = \<const0> ;
  assign LOCKSTEP_Out[3624] = \<const0> ;
  assign LOCKSTEP_Out[3625] = \<const0> ;
  assign LOCKSTEP_Out[3626] = \<const0> ;
  assign LOCKSTEP_Out[3627] = \<const0> ;
  assign LOCKSTEP_Out[3628] = \<const0> ;
  assign LOCKSTEP_Out[3629] = \<const0> ;
  assign LOCKSTEP_Out[3630] = \<const0> ;
  assign LOCKSTEP_Out[3631] = \<const0> ;
  assign LOCKSTEP_Out[3632] = \<const0> ;
  assign LOCKSTEP_Out[3633] = \<const0> ;
  assign LOCKSTEP_Out[3634] = \<const0> ;
  assign LOCKSTEP_Out[3635] = \<const0> ;
  assign LOCKSTEP_Out[3636] = \<const0> ;
  assign LOCKSTEP_Out[3637] = \<const0> ;
  assign LOCKSTEP_Out[3638] = \<const0> ;
  assign LOCKSTEP_Out[3639] = \<const0> ;
  assign LOCKSTEP_Out[3640] = \<const0> ;
  assign LOCKSTEP_Out[3641] = \<const0> ;
  assign LOCKSTEP_Out[3642] = \<const0> ;
  assign LOCKSTEP_Out[3643] = \<const0> ;
  assign LOCKSTEP_Out[3644] = \<const0> ;
  assign LOCKSTEP_Out[3645] = \<const0> ;
  assign LOCKSTEP_Out[3646] = \<const0> ;
  assign LOCKSTEP_Out[3647] = \<const0> ;
  assign LOCKSTEP_Out[3648] = \<const0> ;
  assign LOCKSTEP_Out[3649] = \<const0> ;
  assign LOCKSTEP_Out[3650] = \<const0> ;
  assign LOCKSTEP_Out[3651] = \<const0> ;
  assign LOCKSTEP_Out[3652] = \<const0> ;
  assign LOCKSTEP_Out[3653] = \<const0> ;
  assign LOCKSTEP_Out[3654] = \<const0> ;
  assign LOCKSTEP_Out[3655] = \<const0> ;
  assign LOCKSTEP_Out[3656] = \<const0> ;
  assign LOCKSTEP_Out[3657] = \<const0> ;
  assign LOCKSTEP_Out[3658] = \<const0> ;
  assign LOCKSTEP_Out[3659] = \<const0> ;
  assign LOCKSTEP_Out[3660] = \<const0> ;
  assign LOCKSTEP_Out[3661] = \<const0> ;
  assign LOCKSTEP_Out[3662] = \<const0> ;
  assign LOCKSTEP_Out[3663] = \<const0> ;
  assign LOCKSTEP_Out[3664] = \<const0> ;
  assign LOCKSTEP_Out[3665] = \<const0> ;
  assign LOCKSTEP_Out[3666] = \<const0> ;
  assign LOCKSTEP_Out[3667] = \<const0> ;
  assign LOCKSTEP_Out[3668] = \<const0> ;
  assign LOCKSTEP_Out[3669] = \<const0> ;
  assign LOCKSTEP_Out[3670] = \<const0> ;
  assign LOCKSTEP_Out[3671] = \<const0> ;
  assign LOCKSTEP_Out[3672] = \<const0> ;
  assign LOCKSTEP_Out[3673] = \<const0> ;
  assign LOCKSTEP_Out[3674] = \<const0> ;
  assign LOCKSTEP_Out[3675] = \<const0> ;
  assign LOCKSTEP_Out[3676] = \<const0> ;
  assign LOCKSTEP_Out[3677] = \<const0> ;
  assign LOCKSTEP_Out[3678] = \<const0> ;
  assign LOCKSTEP_Out[3679] = \<const0> ;
  assign LOCKSTEP_Out[3680] = \<const0> ;
  assign LOCKSTEP_Out[3681] = \<const0> ;
  assign LOCKSTEP_Out[3682] = \<const0> ;
  assign LOCKSTEP_Out[3683] = \<const0> ;
  assign LOCKSTEP_Out[3684] = \<const0> ;
  assign LOCKSTEP_Out[3685] = \<const0> ;
  assign LOCKSTEP_Out[3686] = \<const0> ;
  assign LOCKSTEP_Out[3687] = \<const0> ;
  assign LOCKSTEP_Out[3688] = \<const0> ;
  assign LOCKSTEP_Out[3689] = \<const0> ;
  assign LOCKSTEP_Out[3690] = \<const0> ;
  assign LOCKSTEP_Out[3691] = \<const0> ;
  assign LOCKSTEP_Out[3692] = \<const0> ;
  assign LOCKSTEP_Out[3693] = \<const0> ;
  assign LOCKSTEP_Out[3694] = \<const0> ;
  assign LOCKSTEP_Out[3695] = \<const0> ;
  assign LOCKSTEP_Out[3696] = \<const0> ;
  assign LOCKSTEP_Out[3697] = \<const0> ;
  assign LOCKSTEP_Out[3698] = \<const0> ;
  assign LOCKSTEP_Out[3699] = \<const0> ;
  assign LOCKSTEP_Out[3700] = \<const0> ;
  assign LOCKSTEP_Out[3701] = \<const0> ;
  assign LOCKSTEP_Out[3702] = \<const0> ;
  assign LOCKSTEP_Out[3703] = \<const0> ;
  assign LOCKSTEP_Out[3704] = \<const0> ;
  assign LOCKSTEP_Out[3705] = \<const0> ;
  assign LOCKSTEP_Out[3706] = \<const0> ;
  assign LOCKSTEP_Out[3707] = \<const0> ;
  assign LOCKSTEP_Out[3708] = \<const0> ;
  assign LOCKSTEP_Out[3709] = \<const0> ;
  assign LOCKSTEP_Out[3710] = \<const0> ;
  assign LOCKSTEP_Out[3711] = \<const0> ;
  assign LOCKSTEP_Out[3712] = \<const0> ;
  assign LOCKSTEP_Out[3713] = \<const0> ;
  assign LOCKSTEP_Out[3714] = \<const0> ;
  assign LOCKSTEP_Out[3715] = \<const0> ;
  assign LOCKSTEP_Out[3716] = \<const0> ;
  assign LOCKSTEP_Out[3717] = \<const0> ;
  assign LOCKSTEP_Out[3718] = \<const0> ;
  assign LOCKSTEP_Out[3719] = \<const0> ;
  assign LOCKSTEP_Out[3720] = \<const0> ;
  assign LOCKSTEP_Out[3721] = \<const0> ;
  assign LOCKSTEP_Out[3722] = \<const0> ;
  assign LOCKSTEP_Out[3723] = \<const0> ;
  assign LOCKSTEP_Out[3724] = \<const0> ;
  assign LOCKSTEP_Out[3725] = \<const0> ;
  assign LOCKSTEP_Out[3726] = \<const0> ;
  assign LOCKSTEP_Out[3727] = \<const0> ;
  assign LOCKSTEP_Out[3728] = \<const0> ;
  assign LOCKSTEP_Out[3729] = \<const0> ;
  assign LOCKSTEP_Out[3730] = \<const0> ;
  assign LOCKSTEP_Out[3731] = \<const0> ;
  assign LOCKSTEP_Out[3732] = \<const0> ;
  assign LOCKSTEP_Out[3733] = \<const0> ;
  assign LOCKSTEP_Out[3734] = \<const0> ;
  assign LOCKSTEP_Out[3735] = \<const0> ;
  assign LOCKSTEP_Out[3736] = \<const0> ;
  assign LOCKSTEP_Out[3737] = \<const0> ;
  assign LOCKSTEP_Out[3738] = \<const0> ;
  assign LOCKSTEP_Out[3739] = \<const0> ;
  assign LOCKSTEP_Out[3740] = \<const0> ;
  assign LOCKSTEP_Out[3741] = \<const0> ;
  assign LOCKSTEP_Out[3742] = \<const0> ;
  assign LOCKSTEP_Out[3743] = \<const0> ;
  assign LOCKSTEP_Out[3744] = \<const0> ;
  assign LOCKSTEP_Out[3745] = \<const0> ;
  assign LOCKSTEP_Out[3746] = \<const0> ;
  assign LOCKSTEP_Out[3747] = \<const0> ;
  assign LOCKSTEP_Out[3748] = \<const0> ;
  assign LOCKSTEP_Out[3749] = \<const0> ;
  assign LOCKSTEP_Out[3750] = \<const0> ;
  assign LOCKSTEP_Out[3751] = \<const0> ;
  assign LOCKSTEP_Out[3752] = \<const0> ;
  assign LOCKSTEP_Out[3753] = \<const0> ;
  assign LOCKSTEP_Out[3754] = \<const0> ;
  assign LOCKSTEP_Out[3755] = \<const0> ;
  assign LOCKSTEP_Out[3756] = \<const0> ;
  assign LOCKSTEP_Out[3757] = \<const0> ;
  assign LOCKSTEP_Out[3758] = \<const0> ;
  assign LOCKSTEP_Out[3759] = \<const0> ;
  assign LOCKSTEP_Out[3760] = \<const0> ;
  assign LOCKSTEP_Out[3761] = \<const0> ;
  assign LOCKSTEP_Out[3762] = \<const0> ;
  assign LOCKSTEP_Out[3763] = \<const0> ;
  assign LOCKSTEP_Out[3764] = \<const0> ;
  assign LOCKSTEP_Out[3765] = \<const0> ;
  assign LOCKSTEP_Out[3766] = \<const0> ;
  assign LOCKSTEP_Out[3767] = \<const0> ;
  assign LOCKSTEP_Out[3768] = \<const0> ;
  assign LOCKSTEP_Out[3769] = \<const0> ;
  assign LOCKSTEP_Out[3770] = \<const0> ;
  assign LOCKSTEP_Out[3771] = \<const0> ;
  assign LOCKSTEP_Out[3772] = \<const0> ;
  assign LOCKSTEP_Out[3773] = \<const0> ;
  assign LOCKSTEP_Out[3774] = \<const0> ;
  assign LOCKSTEP_Out[3775] = \<const0> ;
  assign LOCKSTEP_Out[3776] = \<const0> ;
  assign LOCKSTEP_Out[3777] = \<const0> ;
  assign LOCKSTEP_Out[3778] = \<const0> ;
  assign LOCKSTEP_Out[3779] = \<const0> ;
  assign LOCKSTEP_Out[3780] = \<const0> ;
  assign LOCKSTEP_Out[3781] = \<const0> ;
  assign LOCKSTEP_Out[3782] = \<const0> ;
  assign LOCKSTEP_Out[3783] = \<const0> ;
  assign LOCKSTEP_Out[3784] = \<const0> ;
  assign LOCKSTEP_Out[3785] = \<const0> ;
  assign LOCKSTEP_Out[3786] = \<const0> ;
  assign LOCKSTEP_Out[3787] = \<const0> ;
  assign LOCKSTEP_Out[3788] = \<const0> ;
  assign LOCKSTEP_Out[3789] = \<const0> ;
  assign LOCKSTEP_Out[3790] = \<const0> ;
  assign LOCKSTEP_Out[3791] = \<const0> ;
  assign LOCKSTEP_Out[3792] = \<const0> ;
  assign LOCKSTEP_Out[3793] = \<const0> ;
  assign LOCKSTEP_Out[3794] = \<const0> ;
  assign LOCKSTEP_Out[3795] = \<const0> ;
  assign LOCKSTEP_Out[3796] = \<const0> ;
  assign LOCKSTEP_Out[3797] = \<const0> ;
  assign LOCKSTEP_Out[3798] = \<const0> ;
  assign LOCKSTEP_Out[3799] = \<const0> ;
  assign LOCKSTEP_Out[3800] = \<const0> ;
  assign LOCKSTEP_Out[3801] = \<const0> ;
  assign LOCKSTEP_Out[3802] = \<const0> ;
  assign LOCKSTEP_Out[3803] = \<const0> ;
  assign LOCKSTEP_Out[3804] = \<const0> ;
  assign LOCKSTEP_Out[3805] = \<const0> ;
  assign LOCKSTEP_Out[3806] = \<const0> ;
  assign LOCKSTEP_Out[3807] = \<const0> ;
  assign LOCKSTEP_Out[3808] = \<const0> ;
  assign LOCKSTEP_Out[3809] = \<const0> ;
  assign LOCKSTEP_Out[3810] = \<const0> ;
  assign LOCKSTEP_Out[3811] = \<const0> ;
  assign LOCKSTEP_Out[3812] = \<const0> ;
  assign LOCKSTEP_Out[3813] = \<const0> ;
  assign LOCKSTEP_Out[3814] = \<const0> ;
  assign LOCKSTEP_Out[3815] = \<const0> ;
  assign LOCKSTEP_Out[3816] = \<const0> ;
  assign LOCKSTEP_Out[3817] = \<const0> ;
  assign LOCKSTEP_Out[3818] = \<const0> ;
  assign LOCKSTEP_Out[3819] = \<const0> ;
  assign LOCKSTEP_Out[3820] = \<const0> ;
  assign LOCKSTEP_Out[3821] = \<const0> ;
  assign LOCKSTEP_Out[3822] = \<const0> ;
  assign LOCKSTEP_Out[3823] = \<const0> ;
  assign LOCKSTEP_Out[3824] = \<const0> ;
  assign LOCKSTEP_Out[3825] = \<const0> ;
  assign LOCKSTEP_Out[3826] = \<const0> ;
  assign LOCKSTEP_Out[3827] = \<const0> ;
  assign LOCKSTEP_Out[3828] = \<const0> ;
  assign LOCKSTEP_Out[3829] = \<const0> ;
  assign LOCKSTEP_Out[3830] = \<const0> ;
  assign LOCKSTEP_Out[3831] = \<const0> ;
  assign LOCKSTEP_Out[3832] = \<const0> ;
  assign LOCKSTEP_Out[3833] = \<const0> ;
  assign LOCKSTEP_Out[3834] = \<const0> ;
  assign LOCKSTEP_Out[3835] = \<const0> ;
  assign LOCKSTEP_Out[3836] = \<const0> ;
  assign LOCKSTEP_Out[3837] = \<const0> ;
  assign LOCKSTEP_Out[3838] = \<const0> ;
  assign LOCKSTEP_Out[3839] = \<const0> ;
  assign LOCKSTEP_Out[3840] = \<const0> ;
  assign LOCKSTEP_Out[3841] = \<const0> ;
  assign LOCKSTEP_Out[3842] = \<const0> ;
  assign LOCKSTEP_Out[3843] = \<const0> ;
  assign LOCKSTEP_Out[3844] = \<const0> ;
  assign LOCKSTEP_Out[3845] = \<const0> ;
  assign LOCKSTEP_Out[3846] = \<const0> ;
  assign LOCKSTEP_Out[3847] = \<const0> ;
  assign LOCKSTEP_Out[3848] = \<const0> ;
  assign LOCKSTEP_Out[3849] = \<const0> ;
  assign LOCKSTEP_Out[3850] = \<const0> ;
  assign LOCKSTEP_Out[3851] = \<const0> ;
  assign LOCKSTEP_Out[3852] = \<const0> ;
  assign LOCKSTEP_Out[3853] = \<const0> ;
  assign LOCKSTEP_Out[3854] = \<const0> ;
  assign LOCKSTEP_Out[3855] = \<const0> ;
  assign LOCKSTEP_Out[3856] = \<const0> ;
  assign LOCKSTEP_Out[3857] = \<const0> ;
  assign LOCKSTEP_Out[3858] = \<const0> ;
  assign LOCKSTEP_Out[3859] = \<const0> ;
  assign LOCKSTEP_Out[3860] = \<const0> ;
  assign LOCKSTEP_Out[3861] = \<const0> ;
  assign LOCKSTEP_Out[3862] = \<const0> ;
  assign LOCKSTEP_Out[3863] = \<const0> ;
  assign LOCKSTEP_Out[3864] = \<const0> ;
  assign LOCKSTEP_Out[3865] = \<const0> ;
  assign LOCKSTEP_Out[3866] = \<const0> ;
  assign LOCKSTEP_Out[3867] = \<const0> ;
  assign LOCKSTEP_Out[3868] = \<const0> ;
  assign LOCKSTEP_Out[3869] = \<const0> ;
  assign LOCKSTEP_Out[3870] = \<const0> ;
  assign LOCKSTEP_Out[3871] = \<const0> ;
  assign LOCKSTEP_Out[3872] = \<const0> ;
  assign LOCKSTEP_Out[3873] = \<const0> ;
  assign LOCKSTEP_Out[3874] = \<const0> ;
  assign LOCKSTEP_Out[3875] = \<const0> ;
  assign LOCKSTEP_Out[3876] = \<const0> ;
  assign LOCKSTEP_Out[3877] = \<const0> ;
  assign LOCKSTEP_Out[3878] = \<const0> ;
  assign LOCKSTEP_Out[3879] = \<const0> ;
  assign LOCKSTEP_Out[3880] = \<const0> ;
  assign LOCKSTEP_Out[3881] = \<const0> ;
  assign LOCKSTEP_Out[3882] = \<const0> ;
  assign LOCKSTEP_Out[3883] = \<const0> ;
  assign LOCKSTEP_Out[3884] = \<const0> ;
  assign LOCKSTEP_Out[3885] = \<const0> ;
  assign LOCKSTEP_Out[3886] = \<const0> ;
  assign LOCKSTEP_Out[3887] = \<const0> ;
  assign LOCKSTEP_Out[3888] = \<const0> ;
  assign LOCKSTEP_Out[3889] = \<const0> ;
  assign LOCKSTEP_Out[3890] = \<const0> ;
  assign LOCKSTEP_Out[3891] = \<const0> ;
  assign LOCKSTEP_Out[3892] = \<const0> ;
  assign LOCKSTEP_Out[3893] = \<const0> ;
  assign LOCKSTEP_Out[3894] = \<const0> ;
  assign LOCKSTEP_Out[3895] = \<const0> ;
  assign LOCKSTEP_Out[3896] = \<const0> ;
  assign LOCKSTEP_Out[3897] = \<const0> ;
  assign LOCKSTEP_Out[3898] = \<const0> ;
  assign LOCKSTEP_Out[3899] = \<const0> ;
  assign LOCKSTEP_Out[3900] = \<const0> ;
  assign LOCKSTEP_Out[3901] = \<const0> ;
  assign LOCKSTEP_Out[3902] = \<const0> ;
  assign LOCKSTEP_Out[3903] = \<const0> ;
  assign LOCKSTEP_Out[3904] = \<const0> ;
  assign LOCKSTEP_Out[3905] = \<const0> ;
  assign LOCKSTEP_Out[3906] = \<const0> ;
  assign LOCKSTEP_Out[3907] = \<const0> ;
  assign LOCKSTEP_Out[3908] = \<const0> ;
  assign LOCKSTEP_Out[3909] = \<const0> ;
  assign LOCKSTEP_Out[3910] = \<const0> ;
  assign LOCKSTEP_Out[3911] = \<const0> ;
  assign LOCKSTEP_Out[3912] = \<const0> ;
  assign LOCKSTEP_Out[3913] = \<const0> ;
  assign LOCKSTEP_Out[3914] = \<const0> ;
  assign LOCKSTEP_Out[3915] = \<const0> ;
  assign LOCKSTEP_Out[3916] = \<const0> ;
  assign LOCKSTEP_Out[3917] = \<const0> ;
  assign LOCKSTEP_Out[3918] = \<const0> ;
  assign LOCKSTEP_Out[3919] = \<const0> ;
  assign LOCKSTEP_Out[3920] = \<const0> ;
  assign LOCKSTEP_Out[3921] = \<const0> ;
  assign LOCKSTEP_Out[3922] = \<const0> ;
  assign LOCKSTEP_Out[3923] = \<const0> ;
  assign LOCKSTEP_Out[3924] = \<const0> ;
  assign LOCKSTEP_Out[3925] = \<const0> ;
  assign LOCKSTEP_Out[3926] = \<const0> ;
  assign LOCKSTEP_Out[3927] = \<const0> ;
  assign LOCKSTEP_Out[3928] = \<const0> ;
  assign LOCKSTEP_Out[3929] = \<const0> ;
  assign LOCKSTEP_Out[3930] = \<const0> ;
  assign LOCKSTEP_Out[3931] = \<const0> ;
  assign LOCKSTEP_Out[3932] = \<const0> ;
  assign LOCKSTEP_Out[3933] = \<const0> ;
  assign LOCKSTEP_Out[3934] = \<const0> ;
  assign LOCKSTEP_Out[3935] = \<const0> ;
  assign LOCKSTEP_Out[3936] = \<const0> ;
  assign LOCKSTEP_Out[3937] = \<const0> ;
  assign LOCKSTEP_Out[3938] = \<const0> ;
  assign LOCKSTEP_Out[3939] = \<const0> ;
  assign LOCKSTEP_Out[3940] = \<const0> ;
  assign LOCKSTEP_Out[3941] = \<const0> ;
  assign LOCKSTEP_Out[3942] = \<const0> ;
  assign LOCKSTEP_Out[3943] = \<const0> ;
  assign LOCKSTEP_Out[3944] = \<const0> ;
  assign LOCKSTEP_Out[3945] = \<const0> ;
  assign LOCKSTEP_Out[3946] = \<const0> ;
  assign LOCKSTEP_Out[3947] = \<const0> ;
  assign LOCKSTEP_Out[3948] = \<const0> ;
  assign LOCKSTEP_Out[3949] = \<const0> ;
  assign LOCKSTEP_Out[3950] = \<const0> ;
  assign LOCKSTEP_Out[3951] = \<const0> ;
  assign LOCKSTEP_Out[3952] = \<const0> ;
  assign LOCKSTEP_Out[3953] = \<const0> ;
  assign LOCKSTEP_Out[3954] = \<const0> ;
  assign LOCKSTEP_Out[3955] = \<const0> ;
  assign LOCKSTEP_Out[3956] = \<const0> ;
  assign LOCKSTEP_Out[3957] = \<const0> ;
  assign LOCKSTEP_Out[3958] = \<const0> ;
  assign LOCKSTEP_Out[3959] = \<const0> ;
  assign LOCKSTEP_Out[3960] = \<const0> ;
  assign LOCKSTEP_Out[3961] = \<const0> ;
  assign LOCKSTEP_Out[3962] = \<const0> ;
  assign LOCKSTEP_Out[3963] = \<const0> ;
  assign LOCKSTEP_Out[3964] = \<const0> ;
  assign LOCKSTEP_Out[3965] = \<const0> ;
  assign LOCKSTEP_Out[3966] = \<const0> ;
  assign LOCKSTEP_Out[3967] = \<const0> ;
  assign LOCKSTEP_Out[3968] = \<const0> ;
  assign LOCKSTEP_Out[3969] = \<const0> ;
  assign LOCKSTEP_Out[3970] = \<const0> ;
  assign LOCKSTEP_Out[3971] = \<const0> ;
  assign LOCKSTEP_Out[3972] = \<const0> ;
  assign LOCKSTEP_Out[3973] = \<const0> ;
  assign LOCKSTEP_Out[3974] = \<const0> ;
  assign LOCKSTEP_Out[3975] = \<const0> ;
  assign LOCKSTEP_Out[3976] = \<const0> ;
  assign LOCKSTEP_Out[3977] = \<const0> ;
  assign LOCKSTEP_Out[3978] = \<const0> ;
  assign LOCKSTEP_Out[3979] = \<const0> ;
  assign LOCKSTEP_Out[3980] = \<const0> ;
  assign LOCKSTEP_Out[3981] = \<const0> ;
  assign LOCKSTEP_Out[3982] = \<const0> ;
  assign LOCKSTEP_Out[3983] = \<const0> ;
  assign LOCKSTEP_Out[3984] = \<const0> ;
  assign LOCKSTEP_Out[3985] = \<const0> ;
  assign LOCKSTEP_Out[3986] = \<const0> ;
  assign LOCKSTEP_Out[3987] = \<const0> ;
  assign LOCKSTEP_Out[3988] = \<const0> ;
  assign LOCKSTEP_Out[3989] = \<const0> ;
  assign LOCKSTEP_Out[3990] = \<const0> ;
  assign LOCKSTEP_Out[3991] = \<const0> ;
  assign LOCKSTEP_Out[3992] = \<const0> ;
  assign LOCKSTEP_Out[3993] = \<const0> ;
  assign LOCKSTEP_Out[3994] = \<const0> ;
  assign LOCKSTEP_Out[3995] = \<const0> ;
  assign LOCKSTEP_Out[3996] = \<const0> ;
  assign LOCKSTEP_Out[3997] = \<const0> ;
  assign LOCKSTEP_Out[3998] = \<const0> ;
  assign LOCKSTEP_Out[3999] = \<const0> ;
  assign LOCKSTEP_Out[4000] = \<const0> ;
  assign LOCKSTEP_Out[4001] = \<const0> ;
  assign LOCKSTEP_Out[4002] = \<const0> ;
  assign LOCKSTEP_Out[4003] = \<const0> ;
  assign LOCKSTEP_Out[4004] = \<const0> ;
  assign LOCKSTEP_Out[4005] = \<const0> ;
  assign LOCKSTEP_Out[4006] = \<const0> ;
  assign LOCKSTEP_Out[4007] = \<const0> ;
  assign LOCKSTEP_Out[4008] = \<const0> ;
  assign LOCKSTEP_Out[4009] = \<const0> ;
  assign LOCKSTEP_Out[4010] = \<const0> ;
  assign LOCKSTEP_Out[4011] = \<const0> ;
  assign LOCKSTEP_Out[4012] = \<const0> ;
  assign LOCKSTEP_Out[4013] = \<const0> ;
  assign LOCKSTEP_Out[4014] = \<const0> ;
  assign LOCKSTEP_Out[4015] = \<const0> ;
  assign LOCKSTEP_Out[4016] = \<const0> ;
  assign LOCKSTEP_Out[4017] = \<const0> ;
  assign LOCKSTEP_Out[4018] = \<const0> ;
  assign LOCKSTEP_Out[4019] = \<const0> ;
  assign LOCKSTEP_Out[4020] = \<const0> ;
  assign LOCKSTEP_Out[4021] = \<const0> ;
  assign LOCKSTEP_Out[4022] = \<const0> ;
  assign LOCKSTEP_Out[4023] = \<const0> ;
  assign LOCKSTEP_Out[4024] = \<const0> ;
  assign LOCKSTEP_Out[4025] = \<const0> ;
  assign LOCKSTEP_Out[4026] = \<const0> ;
  assign LOCKSTEP_Out[4027] = \<const0> ;
  assign LOCKSTEP_Out[4028] = \<const0> ;
  assign LOCKSTEP_Out[4029] = \<const0> ;
  assign LOCKSTEP_Out[4030] = \<const0> ;
  assign LOCKSTEP_Out[4031] = \<const0> ;
  assign LOCKSTEP_Out[4032] = \<const0> ;
  assign LOCKSTEP_Out[4033] = \<const0> ;
  assign LOCKSTEP_Out[4034] = \<const0> ;
  assign LOCKSTEP_Out[4035] = \<const0> ;
  assign LOCKSTEP_Out[4036] = \<const0> ;
  assign LOCKSTEP_Out[4037] = \<const0> ;
  assign LOCKSTEP_Out[4038] = \<const0> ;
  assign LOCKSTEP_Out[4039] = \<const0> ;
  assign LOCKSTEP_Out[4040] = \<const0> ;
  assign LOCKSTEP_Out[4041] = \<const0> ;
  assign LOCKSTEP_Out[4042] = \<const0> ;
  assign LOCKSTEP_Out[4043] = \<const0> ;
  assign LOCKSTEP_Out[4044] = \<const0> ;
  assign LOCKSTEP_Out[4045] = \<const0> ;
  assign LOCKSTEP_Out[4046] = \<const0> ;
  assign LOCKSTEP_Out[4047] = \<const0> ;
  assign LOCKSTEP_Out[4048] = \<const0> ;
  assign LOCKSTEP_Out[4049] = \<const0> ;
  assign LOCKSTEP_Out[4050] = \<const0> ;
  assign LOCKSTEP_Out[4051] = \<const0> ;
  assign LOCKSTEP_Out[4052] = \<const0> ;
  assign LOCKSTEP_Out[4053] = \<const0> ;
  assign LOCKSTEP_Out[4054] = \<const0> ;
  assign LOCKSTEP_Out[4055] = \<const0> ;
  assign LOCKSTEP_Out[4056] = \<const0> ;
  assign LOCKSTEP_Out[4057] = \<const0> ;
  assign LOCKSTEP_Out[4058] = \<const0> ;
  assign LOCKSTEP_Out[4059] = \<const0> ;
  assign LOCKSTEP_Out[4060] = \<const0> ;
  assign LOCKSTEP_Out[4061] = \<const0> ;
  assign LOCKSTEP_Out[4062] = \<const0> ;
  assign LOCKSTEP_Out[4063] = \<const0> ;
  assign LOCKSTEP_Out[4064] = \<const0> ;
  assign LOCKSTEP_Out[4065] = \<const0> ;
  assign LOCKSTEP_Out[4066] = \<const0> ;
  assign LOCKSTEP_Out[4067] = \<const0> ;
  assign LOCKSTEP_Out[4068] = \<const0> ;
  assign LOCKSTEP_Out[4069] = \<const0> ;
  assign LOCKSTEP_Out[4070] = \<const0> ;
  assign LOCKSTEP_Out[4071] = \<const0> ;
  assign LOCKSTEP_Out[4072] = \<const0> ;
  assign LOCKSTEP_Out[4073] = \<const0> ;
  assign LOCKSTEP_Out[4074] = \<const0> ;
  assign LOCKSTEP_Out[4075] = \<const0> ;
  assign LOCKSTEP_Out[4076] = \<const0> ;
  assign LOCKSTEP_Out[4077] = \<const0> ;
  assign LOCKSTEP_Out[4078] = \<const0> ;
  assign LOCKSTEP_Out[4079] = \<const0> ;
  assign LOCKSTEP_Out[4080] = \<const0> ;
  assign LOCKSTEP_Out[4081] = \<const0> ;
  assign LOCKSTEP_Out[4082] = \<const0> ;
  assign LOCKSTEP_Out[4083] = \<const0> ;
  assign LOCKSTEP_Out[4084] = \<const0> ;
  assign LOCKSTEP_Out[4085] = \<const0> ;
  assign LOCKSTEP_Out[4086] = \<const0> ;
  assign LOCKSTEP_Out[4087] = \<const0> ;
  assign LOCKSTEP_Out[4088] = \<const0> ;
  assign LOCKSTEP_Out[4089] = \<const0> ;
  assign LOCKSTEP_Out[4090] = \<const0> ;
  assign LOCKSTEP_Out[4091] = \<const0> ;
  assign LOCKSTEP_Out[4092] = \<const0> ;
  assign LOCKSTEP_Out[4093] = \<const0> ;
  assign LOCKSTEP_Out[4094] = \<const0> ;
  assign LOCKSTEP_Out[4095] = \<const0> ;
  assign M0_AXIS_TDATA[31] = \<const0> ;
  assign M0_AXIS_TDATA[30] = \<const0> ;
  assign M0_AXIS_TDATA[29] = \<const0> ;
  assign M0_AXIS_TDATA[28] = \<const0> ;
  assign M0_AXIS_TDATA[27] = \<const0> ;
  assign M0_AXIS_TDATA[26] = \<const0> ;
  assign M0_AXIS_TDATA[25] = \<const0> ;
  assign M0_AXIS_TDATA[24] = \<const0> ;
  assign M0_AXIS_TDATA[23] = \<const0> ;
  assign M0_AXIS_TDATA[22] = \<const0> ;
  assign M0_AXIS_TDATA[21] = \<const0> ;
  assign M0_AXIS_TDATA[20] = \<const0> ;
  assign M0_AXIS_TDATA[19] = \<const0> ;
  assign M0_AXIS_TDATA[18] = \<const0> ;
  assign M0_AXIS_TDATA[17] = \<const0> ;
  assign M0_AXIS_TDATA[16] = \<const0> ;
  assign M0_AXIS_TDATA[15] = \<const0> ;
  assign M0_AXIS_TDATA[14] = \<const0> ;
  assign M0_AXIS_TDATA[13] = \<const0> ;
  assign M0_AXIS_TDATA[12] = \<const0> ;
  assign M0_AXIS_TDATA[11] = \<const0> ;
  assign M0_AXIS_TDATA[10] = \<const0> ;
  assign M0_AXIS_TDATA[9] = \<const0> ;
  assign M0_AXIS_TDATA[8] = \<const0> ;
  assign M0_AXIS_TDATA[7] = \<const0> ;
  assign M0_AXIS_TDATA[6] = \<const0> ;
  assign M0_AXIS_TDATA[5] = \<const0> ;
  assign M0_AXIS_TDATA[4] = \<const0> ;
  assign M0_AXIS_TDATA[3] = \<const0> ;
  assign M0_AXIS_TDATA[2] = \<const0> ;
  assign M0_AXIS_TDATA[1] = \<const0> ;
  assign M0_AXIS_TDATA[0] = \<const0> ;
  assign M0_AXIS_TLAST = \<const0> ;
  assign M0_AXIS_TVALID = \<const0> ;
  assign M10_AXIS_TDATA[31] = \<const0> ;
  assign M10_AXIS_TDATA[30] = \<const0> ;
  assign M10_AXIS_TDATA[29] = \<const0> ;
  assign M10_AXIS_TDATA[28] = \<const0> ;
  assign M10_AXIS_TDATA[27] = \<const0> ;
  assign M10_AXIS_TDATA[26] = \<const0> ;
  assign M10_AXIS_TDATA[25] = \<const0> ;
  assign M10_AXIS_TDATA[24] = \<const0> ;
  assign M10_AXIS_TDATA[23] = \<const0> ;
  assign M10_AXIS_TDATA[22] = \<const0> ;
  assign M10_AXIS_TDATA[21] = \<const0> ;
  assign M10_AXIS_TDATA[20] = \<const0> ;
  assign M10_AXIS_TDATA[19] = \<const0> ;
  assign M10_AXIS_TDATA[18] = \<const0> ;
  assign M10_AXIS_TDATA[17] = \<const0> ;
  assign M10_AXIS_TDATA[16] = \<const0> ;
  assign M10_AXIS_TDATA[15] = \<const0> ;
  assign M10_AXIS_TDATA[14] = \<const0> ;
  assign M10_AXIS_TDATA[13] = \<const0> ;
  assign M10_AXIS_TDATA[12] = \<const0> ;
  assign M10_AXIS_TDATA[11] = \<const0> ;
  assign M10_AXIS_TDATA[10] = \<const0> ;
  assign M10_AXIS_TDATA[9] = \<const0> ;
  assign M10_AXIS_TDATA[8] = \<const0> ;
  assign M10_AXIS_TDATA[7] = \<const0> ;
  assign M10_AXIS_TDATA[6] = \<const0> ;
  assign M10_AXIS_TDATA[5] = \<const0> ;
  assign M10_AXIS_TDATA[4] = \<const0> ;
  assign M10_AXIS_TDATA[3] = \<const0> ;
  assign M10_AXIS_TDATA[2] = \<const0> ;
  assign M10_AXIS_TDATA[1] = \<const0> ;
  assign M10_AXIS_TDATA[0] = \<const0> ;
  assign M10_AXIS_TLAST = \<const0> ;
  assign M10_AXIS_TVALID = \<const0> ;
  assign M11_AXIS_TDATA[31] = \<const0> ;
  assign M11_AXIS_TDATA[30] = \<const0> ;
  assign M11_AXIS_TDATA[29] = \<const0> ;
  assign M11_AXIS_TDATA[28] = \<const0> ;
  assign M11_AXIS_TDATA[27] = \<const0> ;
  assign M11_AXIS_TDATA[26] = \<const0> ;
  assign M11_AXIS_TDATA[25] = \<const0> ;
  assign M11_AXIS_TDATA[24] = \<const0> ;
  assign M11_AXIS_TDATA[23] = \<const0> ;
  assign M11_AXIS_TDATA[22] = \<const0> ;
  assign M11_AXIS_TDATA[21] = \<const0> ;
  assign M11_AXIS_TDATA[20] = \<const0> ;
  assign M11_AXIS_TDATA[19] = \<const0> ;
  assign M11_AXIS_TDATA[18] = \<const0> ;
  assign M11_AXIS_TDATA[17] = \<const0> ;
  assign M11_AXIS_TDATA[16] = \<const0> ;
  assign M11_AXIS_TDATA[15] = \<const0> ;
  assign M11_AXIS_TDATA[14] = \<const0> ;
  assign M11_AXIS_TDATA[13] = \<const0> ;
  assign M11_AXIS_TDATA[12] = \<const0> ;
  assign M11_AXIS_TDATA[11] = \<const0> ;
  assign M11_AXIS_TDATA[10] = \<const0> ;
  assign M11_AXIS_TDATA[9] = \<const0> ;
  assign M11_AXIS_TDATA[8] = \<const0> ;
  assign M11_AXIS_TDATA[7] = \<const0> ;
  assign M11_AXIS_TDATA[6] = \<const0> ;
  assign M11_AXIS_TDATA[5] = \<const0> ;
  assign M11_AXIS_TDATA[4] = \<const0> ;
  assign M11_AXIS_TDATA[3] = \<const0> ;
  assign M11_AXIS_TDATA[2] = \<const0> ;
  assign M11_AXIS_TDATA[1] = \<const0> ;
  assign M11_AXIS_TDATA[0] = \<const0> ;
  assign M11_AXIS_TLAST = \<const0> ;
  assign M11_AXIS_TVALID = \<const0> ;
  assign M12_AXIS_TDATA[31] = \<const0> ;
  assign M12_AXIS_TDATA[30] = \<const0> ;
  assign M12_AXIS_TDATA[29] = \<const0> ;
  assign M12_AXIS_TDATA[28] = \<const0> ;
  assign M12_AXIS_TDATA[27] = \<const0> ;
  assign M12_AXIS_TDATA[26] = \<const0> ;
  assign M12_AXIS_TDATA[25] = \<const0> ;
  assign M12_AXIS_TDATA[24] = \<const0> ;
  assign M12_AXIS_TDATA[23] = \<const0> ;
  assign M12_AXIS_TDATA[22] = \<const0> ;
  assign M12_AXIS_TDATA[21] = \<const0> ;
  assign M12_AXIS_TDATA[20] = \<const0> ;
  assign M12_AXIS_TDATA[19] = \<const0> ;
  assign M12_AXIS_TDATA[18] = \<const0> ;
  assign M12_AXIS_TDATA[17] = \<const0> ;
  assign M12_AXIS_TDATA[16] = \<const0> ;
  assign M12_AXIS_TDATA[15] = \<const0> ;
  assign M12_AXIS_TDATA[14] = \<const0> ;
  assign M12_AXIS_TDATA[13] = \<const0> ;
  assign M12_AXIS_TDATA[12] = \<const0> ;
  assign M12_AXIS_TDATA[11] = \<const0> ;
  assign M12_AXIS_TDATA[10] = \<const0> ;
  assign M12_AXIS_TDATA[9] = \<const0> ;
  assign M12_AXIS_TDATA[8] = \<const0> ;
  assign M12_AXIS_TDATA[7] = \<const0> ;
  assign M12_AXIS_TDATA[6] = \<const0> ;
  assign M12_AXIS_TDATA[5] = \<const0> ;
  assign M12_AXIS_TDATA[4] = \<const0> ;
  assign M12_AXIS_TDATA[3] = \<const0> ;
  assign M12_AXIS_TDATA[2] = \<const0> ;
  assign M12_AXIS_TDATA[1] = \<const0> ;
  assign M12_AXIS_TDATA[0] = \<const0> ;
  assign M12_AXIS_TLAST = \<const0> ;
  assign M12_AXIS_TVALID = \<const0> ;
  assign M13_AXIS_TDATA[31] = \<const0> ;
  assign M13_AXIS_TDATA[30] = \<const0> ;
  assign M13_AXIS_TDATA[29] = \<const0> ;
  assign M13_AXIS_TDATA[28] = \<const0> ;
  assign M13_AXIS_TDATA[27] = \<const0> ;
  assign M13_AXIS_TDATA[26] = \<const0> ;
  assign M13_AXIS_TDATA[25] = \<const0> ;
  assign M13_AXIS_TDATA[24] = \<const0> ;
  assign M13_AXIS_TDATA[23] = \<const0> ;
  assign M13_AXIS_TDATA[22] = \<const0> ;
  assign M13_AXIS_TDATA[21] = \<const0> ;
  assign M13_AXIS_TDATA[20] = \<const0> ;
  assign M13_AXIS_TDATA[19] = \<const0> ;
  assign M13_AXIS_TDATA[18] = \<const0> ;
  assign M13_AXIS_TDATA[17] = \<const0> ;
  assign M13_AXIS_TDATA[16] = \<const0> ;
  assign M13_AXIS_TDATA[15] = \<const0> ;
  assign M13_AXIS_TDATA[14] = \<const0> ;
  assign M13_AXIS_TDATA[13] = \<const0> ;
  assign M13_AXIS_TDATA[12] = \<const0> ;
  assign M13_AXIS_TDATA[11] = \<const0> ;
  assign M13_AXIS_TDATA[10] = \<const0> ;
  assign M13_AXIS_TDATA[9] = \<const0> ;
  assign M13_AXIS_TDATA[8] = \<const0> ;
  assign M13_AXIS_TDATA[7] = \<const0> ;
  assign M13_AXIS_TDATA[6] = \<const0> ;
  assign M13_AXIS_TDATA[5] = \<const0> ;
  assign M13_AXIS_TDATA[4] = \<const0> ;
  assign M13_AXIS_TDATA[3] = \<const0> ;
  assign M13_AXIS_TDATA[2] = \<const0> ;
  assign M13_AXIS_TDATA[1] = \<const0> ;
  assign M13_AXIS_TDATA[0] = \<const0> ;
  assign M13_AXIS_TLAST = \<const0> ;
  assign M13_AXIS_TVALID = \<const0> ;
  assign M14_AXIS_TDATA[31] = \<const0> ;
  assign M14_AXIS_TDATA[30] = \<const0> ;
  assign M14_AXIS_TDATA[29] = \<const0> ;
  assign M14_AXIS_TDATA[28] = \<const0> ;
  assign M14_AXIS_TDATA[27] = \<const0> ;
  assign M14_AXIS_TDATA[26] = \<const0> ;
  assign M14_AXIS_TDATA[25] = \<const0> ;
  assign M14_AXIS_TDATA[24] = \<const0> ;
  assign M14_AXIS_TDATA[23] = \<const0> ;
  assign M14_AXIS_TDATA[22] = \<const0> ;
  assign M14_AXIS_TDATA[21] = \<const0> ;
  assign M14_AXIS_TDATA[20] = \<const0> ;
  assign M14_AXIS_TDATA[19] = \<const0> ;
  assign M14_AXIS_TDATA[18] = \<const0> ;
  assign M14_AXIS_TDATA[17] = \<const0> ;
  assign M14_AXIS_TDATA[16] = \<const0> ;
  assign M14_AXIS_TDATA[15] = \<const0> ;
  assign M14_AXIS_TDATA[14] = \<const0> ;
  assign M14_AXIS_TDATA[13] = \<const0> ;
  assign M14_AXIS_TDATA[12] = \<const0> ;
  assign M14_AXIS_TDATA[11] = \<const0> ;
  assign M14_AXIS_TDATA[10] = \<const0> ;
  assign M14_AXIS_TDATA[9] = \<const0> ;
  assign M14_AXIS_TDATA[8] = \<const0> ;
  assign M14_AXIS_TDATA[7] = \<const0> ;
  assign M14_AXIS_TDATA[6] = \<const0> ;
  assign M14_AXIS_TDATA[5] = \<const0> ;
  assign M14_AXIS_TDATA[4] = \<const0> ;
  assign M14_AXIS_TDATA[3] = \<const0> ;
  assign M14_AXIS_TDATA[2] = \<const0> ;
  assign M14_AXIS_TDATA[1] = \<const0> ;
  assign M14_AXIS_TDATA[0] = \<const0> ;
  assign M14_AXIS_TLAST = \<const0> ;
  assign M14_AXIS_TVALID = \<const0> ;
  assign M15_AXIS_TDATA[31] = \<const0> ;
  assign M15_AXIS_TDATA[30] = \<const0> ;
  assign M15_AXIS_TDATA[29] = \<const0> ;
  assign M15_AXIS_TDATA[28] = \<const0> ;
  assign M15_AXIS_TDATA[27] = \<const0> ;
  assign M15_AXIS_TDATA[26] = \<const0> ;
  assign M15_AXIS_TDATA[25] = \<const0> ;
  assign M15_AXIS_TDATA[24] = \<const0> ;
  assign M15_AXIS_TDATA[23] = \<const0> ;
  assign M15_AXIS_TDATA[22] = \<const0> ;
  assign M15_AXIS_TDATA[21] = \<const0> ;
  assign M15_AXIS_TDATA[20] = \<const0> ;
  assign M15_AXIS_TDATA[19] = \<const0> ;
  assign M15_AXIS_TDATA[18] = \<const0> ;
  assign M15_AXIS_TDATA[17] = \<const0> ;
  assign M15_AXIS_TDATA[16] = \<const0> ;
  assign M15_AXIS_TDATA[15] = \<const0> ;
  assign M15_AXIS_TDATA[14] = \<const0> ;
  assign M15_AXIS_TDATA[13] = \<const0> ;
  assign M15_AXIS_TDATA[12] = \<const0> ;
  assign M15_AXIS_TDATA[11] = \<const0> ;
  assign M15_AXIS_TDATA[10] = \<const0> ;
  assign M15_AXIS_TDATA[9] = \<const0> ;
  assign M15_AXIS_TDATA[8] = \<const0> ;
  assign M15_AXIS_TDATA[7] = \<const0> ;
  assign M15_AXIS_TDATA[6] = \<const0> ;
  assign M15_AXIS_TDATA[5] = \<const0> ;
  assign M15_AXIS_TDATA[4] = \<const0> ;
  assign M15_AXIS_TDATA[3] = \<const0> ;
  assign M15_AXIS_TDATA[2] = \<const0> ;
  assign M15_AXIS_TDATA[1] = \<const0> ;
  assign M15_AXIS_TDATA[0] = \<const0> ;
  assign M15_AXIS_TLAST = \<const0> ;
  assign M15_AXIS_TVALID = \<const0> ;
  assign M1_AXIS_TDATA[31] = \<const0> ;
  assign M1_AXIS_TDATA[30] = \<const0> ;
  assign M1_AXIS_TDATA[29] = \<const0> ;
  assign M1_AXIS_TDATA[28] = \<const0> ;
  assign M1_AXIS_TDATA[27] = \<const0> ;
  assign M1_AXIS_TDATA[26] = \<const0> ;
  assign M1_AXIS_TDATA[25] = \<const0> ;
  assign M1_AXIS_TDATA[24] = \<const0> ;
  assign M1_AXIS_TDATA[23] = \<const0> ;
  assign M1_AXIS_TDATA[22] = \<const0> ;
  assign M1_AXIS_TDATA[21] = \<const0> ;
  assign M1_AXIS_TDATA[20] = \<const0> ;
  assign M1_AXIS_TDATA[19] = \<const0> ;
  assign M1_AXIS_TDATA[18] = \<const0> ;
  assign M1_AXIS_TDATA[17] = \<const0> ;
  assign M1_AXIS_TDATA[16] = \<const0> ;
  assign M1_AXIS_TDATA[15] = \<const0> ;
  assign M1_AXIS_TDATA[14] = \<const0> ;
  assign M1_AXIS_TDATA[13] = \<const0> ;
  assign M1_AXIS_TDATA[12] = \<const0> ;
  assign M1_AXIS_TDATA[11] = \<const0> ;
  assign M1_AXIS_TDATA[10] = \<const0> ;
  assign M1_AXIS_TDATA[9] = \<const0> ;
  assign M1_AXIS_TDATA[8] = \<const0> ;
  assign M1_AXIS_TDATA[7] = \<const0> ;
  assign M1_AXIS_TDATA[6] = \<const0> ;
  assign M1_AXIS_TDATA[5] = \<const0> ;
  assign M1_AXIS_TDATA[4] = \<const0> ;
  assign M1_AXIS_TDATA[3] = \<const0> ;
  assign M1_AXIS_TDATA[2] = \<const0> ;
  assign M1_AXIS_TDATA[1] = \<const0> ;
  assign M1_AXIS_TDATA[0] = \<const0> ;
  assign M1_AXIS_TLAST = \<const0> ;
  assign M1_AXIS_TVALID = \<const0> ;
  assign M2_AXIS_TDATA[31] = \<const0> ;
  assign M2_AXIS_TDATA[30] = \<const0> ;
  assign M2_AXIS_TDATA[29] = \<const0> ;
  assign M2_AXIS_TDATA[28] = \<const0> ;
  assign M2_AXIS_TDATA[27] = \<const0> ;
  assign M2_AXIS_TDATA[26] = \<const0> ;
  assign M2_AXIS_TDATA[25] = \<const0> ;
  assign M2_AXIS_TDATA[24] = \<const0> ;
  assign M2_AXIS_TDATA[23] = \<const0> ;
  assign M2_AXIS_TDATA[22] = \<const0> ;
  assign M2_AXIS_TDATA[21] = \<const0> ;
  assign M2_AXIS_TDATA[20] = \<const0> ;
  assign M2_AXIS_TDATA[19] = \<const0> ;
  assign M2_AXIS_TDATA[18] = \<const0> ;
  assign M2_AXIS_TDATA[17] = \<const0> ;
  assign M2_AXIS_TDATA[16] = \<const0> ;
  assign M2_AXIS_TDATA[15] = \<const0> ;
  assign M2_AXIS_TDATA[14] = \<const0> ;
  assign M2_AXIS_TDATA[13] = \<const0> ;
  assign M2_AXIS_TDATA[12] = \<const0> ;
  assign M2_AXIS_TDATA[11] = \<const0> ;
  assign M2_AXIS_TDATA[10] = \<const0> ;
  assign M2_AXIS_TDATA[9] = \<const0> ;
  assign M2_AXIS_TDATA[8] = \<const0> ;
  assign M2_AXIS_TDATA[7] = \<const0> ;
  assign M2_AXIS_TDATA[6] = \<const0> ;
  assign M2_AXIS_TDATA[5] = \<const0> ;
  assign M2_AXIS_TDATA[4] = \<const0> ;
  assign M2_AXIS_TDATA[3] = \<const0> ;
  assign M2_AXIS_TDATA[2] = \<const0> ;
  assign M2_AXIS_TDATA[1] = \<const0> ;
  assign M2_AXIS_TDATA[0] = \<const0> ;
  assign M2_AXIS_TLAST = \<const0> ;
  assign M2_AXIS_TVALID = \<const0> ;
  assign M3_AXIS_TDATA[31] = \<const0> ;
  assign M3_AXIS_TDATA[30] = \<const0> ;
  assign M3_AXIS_TDATA[29] = \<const0> ;
  assign M3_AXIS_TDATA[28] = \<const0> ;
  assign M3_AXIS_TDATA[27] = \<const0> ;
  assign M3_AXIS_TDATA[26] = \<const0> ;
  assign M3_AXIS_TDATA[25] = \<const0> ;
  assign M3_AXIS_TDATA[24] = \<const0> ;
  assign M3_AXIS_TDATA[23] = \<const0> ;
  assign M3_AXIS_TDATA[22] = \<const0> ;
  assign M3_AXIS_TDATA[21] = \<const0> ;
  assign M3_AXIS_TDATA[20] = \<const0> ;
  assign M3_AXIS_TDATA[19] = \<const0> ;
  assign M3_AXIS_TDATA[18] = \<const0> ;
  assign M3_AXIS_TDATA[17] = \<const0> ;
  assign M3_AXIS_TDATA[16] = \<const0> ;
  assign M3_AXIS_TDATA[15] = \<const0> ;
  assign M3_AXIS_TDATA[14] = \<const0> ;
  assign M3_AXIS_TDATA[13] = \<const0> ;
  assign M3_AXIS_TDATA[12] = \<const0> ;
  assign M3_AXIS_TDATA[11] = \<const0> ;
  assign M3_AXIS_TDATA[10] = \<const0> ;
  assign M3_AXIS_TDATA[9] = \<const0> ;
  assign M3_AXIS_TDATA[8] = \<const0> ;
  assign M3_AXIS_TDATA[7] = \<const0> ;
  assign M3_AXIS_TDATA[6] = \<const0> ;
  assign M3_AXIS_TDATA[5] = \<const0> ;
  assign M3_AXIS_TDATA[4] = \<const0> ;
  assign M3_AXIS_TDATA[3] = \<const0> ;
  assign M3_AXIS_TDATA[2] = \<const0> ;
  assign M3_AXIS_TDATA[1] = \<const0> ;
  assign M3_AXIS_TDATA[0] = \<const0> ;
  assign M3_AXIS_TLAST = \<const0> ;
  assign M3_AXIS_TVALID = \<const0> ;
  assign M4_AXIS_TDATA[31] = \<const0> ;
  assign M4_AXIS_TDATA[30] = \<const0> ;
  assign M4_AXIS_TDATA[29] = \<const0> ;
  assign M4_AXIS_TDATA[28] = \<const0> ;
  assign M4_AXIS_TDATA[27] = \<const0> ;
  assign M4_AXIS_TDATA[26] = \<const0> ;
  assign M4_AXIS_TDATA[25] = \<const0> ;
  assign M4_AXIS_TDATA[24] = \<const0> ;
  assign M4_AXIS_TDATA[23] = \<const0> ;
  assign M4_AXIS_TDATA[22] = \<const0> ;
  assign M4_AXIS_TDATA[21] = \<const0> ;
  assign M4_AXIS_TDATA[20] = \<const0> ;
  assign M4_AXIS_TDATA[19] = \<const0> ;
  assign M4_AXIS_TDATA[18] = \<const0> ;
  assign M4_AXIS_TDATA[17] = \<const0> ;
  assign M4_AXIS_TDATA[16] = \<const0> ;
  assign M4_AXIS_TDATA[15] = \<const0> ;
  assign M4_AXIS_TDATA[14] = \<const0> ;
  assign M4_AXIS_TDATA[13] = \<const0> ;
  assign M4_AXIS_TDATA[12] = \<const0> ;
  assign M4_AXIS_TDATA[11] = \<const0> ;
  assign M4_AXIS_TDATA[10] = \<const0> ;
  assign M4_AXIS_TDATA[9] = \<const0> ;
  assign M4_AXIS_TDATA[8] = \<const0> ;
  assign M4_AXIS_TDATA[7] = \<const0> ;
  assign M4_AXIS_TDATA[6] = \<const0> ;
  assign M4_AXIS_TDATA[5] = \<const0> ;
  assign M4_AXIS_TDATA[4] = \<const0> ;
  assign M4_AXIS_TDATA[3] = \<const0> ;
  assign M4_AXIS_TDATA[2] = \<const0> ;
  assign M4_AXIS_TDATA[1] = \<const0> ;
  assign M4_AXIS_TDATA[0] = \<const0> ;
  assign M4_AXIS_TLAST = \<const0> ;
  assign M4_AXIS_TVALID = \<const0> ;
  assign M5_AXIS_TDATA[31] = \<const0> ;
  assign M5_AXIS_TDATA[30] = \<const0> ;
  assign M5_AXIS_TDATA[29] = \<const0> ;
  assign M5_AXIS_TDATA[28] = \<const0> ;
  assign M5_AXIS_TDATA[27] = \<const0> ;
  assign M5_AXIS_TDATA[26] = \<const0> ;
  assign M5_AXIS_TDATA[25] = \<const0> ;
  assign M5_AXIS_TDATA[24] = \<const0> ;
  assign M5_AXIS_TDATA[23] = \<const0> ;
  assign M5_AXIS_TDATA[22] = \<const0> ;
  assign M5_AXIS_TDATA[21] = \<const0> ;
  assign M5_AXIS_TDATA[20] = \<const0> ;
  assign M5_AXIS_TDATA[19] = \<const0> ;
  assign M5_AXIS_TDATA[18] = \<const0> ;
  assign M5_AXIS_TDATA[17] = \<const0> ;
  assign M5_AXIS_TDATA[16] = \<const0> ;
  assign M5_AXIS_TDATA[15] = \<const0> ;
  assign M5_AXIS_TDATA[14] = \<const0> ;
  assign M5_AXIS_TDATA[13] = \<const0> ;
  assign M5_AXIS_TDATA[12] = \<const0> ;
  assign M5_AXIS_TDATA[11] = \<const0> ;
  assign M5_AXIS_TDATA[10] = \<const0> ;
  assign M5_AXIS_TDATA[9] = \<const0> ;
  assign M5_AXIS_TDATA[8] = \<const0> ;
  assign M5_AXIS_TDATA[7] = \<const0> ;
  assign M5_AXIS_TDATA[6] = \<const0> ;
  assign M5_AXIS_TDATA[5] = \<const0> ;
  assign M5_AXIS_TDATA[4] = \<const0> ;
  assign M5_AXIS_TDATA[3] = \<const0> ;
  assign M5_AXIS_TDATA[2] = \<const0> ;
  assign M5_AXIS_TDATA[1] = \<const0> ;
  assign M5_AXIS_TDATA[0] = \<const0> ;
  assign M5_AXIS_TLAST = \<const0> ;
  assign M5_AXIS_TVALID = \<const0> ;
  assign M6_AXIS_TDATA[31] = \<const0> ;
  assign M6_AXIS_TDATA[30] = \<const0> ;
  assign M6_AXIS_TDATA[29] = \<const0> ;
  assign M6_AXIS_TDATA[28] = \<const0> ;
  assign M6_AXIS_TDATA[27] = \<const0> ;
  assign M6_AXIS_TDATA[26] = \<const0> ;
  assign M6_AXIS_TDATA[25] = \<const0> ;
  assign M6_AXIS_TDATA[24] = \<const0> ;
  assign M6_AXIS_TDATA[23] = \<const0> ;
  assign M6_AXIS_TDATA[22] = \<const0> ;
  assign M6_AXIS_TDATA[21] = \<const0> ;
  assign M6_AXIS_TDATA[20] = \<const0> ;
  assign M6_AXIS_TDATA[19] = \<const0> ;
  assign M6_AXIS_TDATA[18] = \<const0> ;
  assign M6_AXIS_TDATA[17] = \<const0> ;
  assign M6_AXIS_TDATA[16] = \<const0> ;
  assign M6_AXIS_TDATA[15] = \<const0> ;
  assign M6_AXIS_TDATA[14] = \<const0> ;
  assign M6_AXIS_TDATA[13] = \<const0> ;
  assign M6_AXIS_TDATA[12] = \<const0> ;
  assign M6_AXIS_TDATA[11] = \<const0> ;
  assign M6_AXIS_TDATA[10] = \<const0> ;
  assign M6_AXIS_TDATA[9] = \<const0> ;
  assign M6_AXIS_TDATA[8] = \<const0> ;
  assign M6_AXIS_TDATA[7] = \<const0> ;
  assign M6_AXIS_TDATA[6] = \<const0> ;
  assign M6_AXIS_TDATA[5] = \<const0> ;
  assign M6_AXIS_TDATA[4] = \<const0> ;
  assign M6_AXIS_TDATA[3] = \<const0> ;
  assign M6_AXIS_TDATA[2] = \<const0> ;
  assign M6_AXIS_TDATA[1] = \<const0> ;
  assign M6_AXIS_TDATA[0] = \<const0> ;
  assign M6_AXIS_TLAST = \<const0> ;
  assign M6_AXIS_TVALID = \<const0> ;
  assign M7_AXIS_TDATA[31] = \<const0> ;
  assign M7_AXIS_TDATA[30] = \<const0> ;
  assign M7_AXIS_TDATA[29] = \<const0> ;
  assign M7_AXIS_TDATA[28] = \<const0> ;
  assign M7_AXIS_TDATA[27] = \<const0> ;
  assign M7_AXIS_TDATA[26] = \<const0> ;
  assign M7_AXIS_TDATA[25] = \<const0> ;
  assign M7_AXIS_TDATA[24] = \<const0> ;
  assign M7_AXIS_TDATA[23] = \<const0> ;
  assign M7_AXIS_TDATA[22] = \<const0> ;
  assign M7_AXIS_TDATA[21] = \<const0> ;
  assign M7_AXIS_TDATA[20] = \<const0> ;
  assign M7_AXIS_TDATA[19] = \<const0> ;
  assign M7_AXIS_TDATA[18] = \<const0> ;
  assign M7_AXIS_TDATA[17] = \<const0> ;
  assign M7_AXIS_TDATA[16] = \<const0> ;
  assign M7_AXIS_TDATA[15] = \<const0> ;
  assign M7_AXIS_TDATA[14] = \<const0> ;
  assign M7_AXIS_TDATA[13] = \<const0> ;
  assign M7_AXIS_TDATA[12] = \<const0> ;
  assign M7_AXIS_TDATA[11] = \<const0> ;
  assign M7_AXIS_TDATA[10] = \<const0> ;
  assign M7_AXIS_TDATA[9] = \<const0> ;
  assign M7_AXIS_TDATA[8] = \<const0> ;
  assign M7_AXIS_TDATA[7] = \<const0> ;
  assign M7_AXIS_TDATA[6] = \<const0> ;
  assign M7_AXIS_TDATA[5] = \<const0> ;
  assign M7_AXIS_TDATA[4] = \<const0> ;
  assign M7_AXIS_TDATA[3] = \<const0> ;
  assign M7_AXIS_TDATA[2] = \<const0> ;
  assign M7_AXIS_TDATA[1] = \<const0> ;
  assign M7_AXIS_TDATA[0] = \<const0> ;
  assign M7_AXIS_TLAST = \<const0> ;
  assign M7_AXIS_TVALID = \<const0> ;
  assign M8_AXIS_TDATA[31] = \<const0> ;
  assign M8_AXIS_TDATA[30] = \<const0> ;
  assign M8_AXIS_TDATA[29] = \<const0> ;
  assign M8_AXIS_TDATA[28] = \<const0> ;
  assign M8_AXIS_TDATA[27] = \<const0> ;
  assign M8_AXIS_TDATA[26] = \<const0> ;
  assign M8_AXIS_TDATA[25] = \<const0> ;
  assign M8_AXIS_TDATA[24] = \<const0> ;
  assign M8_AXIS_TDATA[23] = \<const0> ;
  assign M8_AXIS_TDATA[22] = \<const0> ;
  assign M8_AXIS_TDATA[21] = \<const0> ;
  assign M8_AXIS_TDATA[20] = \<const0> ;
  assign M8_AXIS_TDATA[19] = \<const0> ;
  assign M8_AXIS_TDATA[18] = \<const0> ;
  assign M8_AXIS_TDATA[17] = \<const0> ;
  assign M8_AXIS_TDATA[16] = \<const0> ;
  assign M8_AXIS_TDATA[15] = \<const0> ;
  assign M8_AXIS_TDATA[14] = \<const0> ;
  assign M8_AXIS_TDATA[13] = \<const0> ;
  assign M8_AXIS_TDATA[12] = \<const0> ;
  assign M8_AXIS_TDATA[11] = \<const0> ;
  assign M8_AXIS_TDATA[10] = \<const0> ;
  assign M8_AXIS_TDATA[9] = \<const0> ;
  assign M8_AXIS_TDATA[8] = \<const0> ;
  assign M8_AXIS_TDATA[7] = \<const0> ;
  assign M8_AXIS_TDATA[6] = \<const0> ;
  assign M8_AXIS_TDATA[5] = \<const0> ;
  assign M8_AXIS_TDATA[4] = \<const0> ;
  assign M8_AXIS_TDATA[3] = \<const0> ;
  assign M8_AXIS_TDATA[2] = \<const0> ;
  assign M8_AXIS_TDATA[1] = \<const0> ;
  assign M8_AXIS_TDATA[0] = \<const0> ;
  assign M8_AXIS_TLAST = \<const0> ;
  assign M8_AXIS_TVALID = \<const0> ;
  assign M9_AXIS_TDATA[31] = \<const0> ;
  assign M9_AXIS_TDATA[30] = \<const0> ;
  assign M9_AXIS_TDATA[29] = \<const0> ;
  assign M9_AXIS_TDATA[28] = \<const0> ;
  assign M9_AXIS_TDATA[27] = \<const0> ;
  assign M9_AXIS_TDATA[26] = \<const0> ;
  assign M9_AXIS_TDATA[25] = \<const0> ;
  assign M9_AXIS_TDATA[24] = \<const0> ;
  assign M9_AXIS_TDATA[23] = \<const0> ;
  assign M9_AXIS_TDATA[22] = \<const0> ;
  assign M9_AXIS_TDATA[21] = \<const0> ;
  assign M9_AXIS_TDATA[20] = \<const0> ;
  assign M9_AXIS_TDATA[19] = \<const0> ;
  assign M9_AXIS_TDATA[18] = \<const0> ;
  assign M9_AXIS_TDATA[17] = \<const0> ;
  assign M9_AXIS_TDATA[16] = \<const0> ;
  assign M9_AXIS_TDATA[15] = \<const0> ;
  assign M9_AXIS_TDATA[14] = \<const0> ;
  assign M9_AXIS_TDATA[13] = \<const0> ;
  assign M9_AXIS_TDATA[12] = \<const0> ;
  assign M9_AXIS_TDATA[11] = \<const0> ;
  assign M9_AXIS_TDATA[10] = \<const0> ;
  assign M9_AXIS_TDATA[9] = \<const0> ;
  assign M9_AXIS_TDATA[8] = \<const0> ;
  assign M9_AXIS_TDATA[7] = \<const0> ;
  assign M9_AXIS_TDATA[6] = \<const0> ;
  assign M9_AXIS_TDATA[5] = \<const0> ;
  assign M9_AXIS_TDATA[4] = \<const0> ;
  assign M9_AXIS_TDATA[3] = \<const0> ;
  assign M9_AXIS_TDATA[2] = \<const0> ;
  assign M9_AXIS_TDATA[1] = \<const0> ;
  assign M9_AXIS_TDATA[0] = \<const0> ;
  assign M9_AXIS_TLAST = \<const0> ;
  assign M9_AXIS_TVALID = \<const0> ;
  assign MB_Error = \<const0> ;
  assign M_AXI_DC_ACREADY = \<const0> ;
  assign M_AXI_DC_ARADDR[31] = \<const0> ;
  assign M_AXI_DC_ARADDR[30] = \<const0> ;
  assign M_AXI_DC_ARADDR[29] = \<const0> ;
  assign M_AXI_DC_ARADDR[28] = \<const0> ;
  assign M_AXI_DC_ARADDR[27] = \<const0> ;
  assign M_AXI_DC_ARADDR[26] = \<const0> ;
  assign M_AXI_DC_ARADDR[25] = \<const0> ;
  assign M_AXI_DC_ARADDR[24] = \<const0> ;
  assign M_AXI_DC_ARADDR[23] = \<const0> ;
  assign M_AXI_DC_ARADDR[22] = \<const0> ;
  assign M_AXI_DC_ARADDR[21] = \<const0> ;
  assign M_AXI_DC_ARADDR[20] = \<const0> ;
  assign M_AXI_DC_ARADDR[19] = \<const0> ;
  assign M_AXI_DC_ARADDR[18] = \<const0> ;
  assign M_AXI_DC_ARADDR[17] = \<const0> ;
  assign M_AXI_DC_ARADDR[16] = \<const0> ;
  assign M_AXI_DC_ARADDR[15] = \<const0> ;
  assign M_AXI_DC_ARADDR[14] = \<const0> ;
  assign M_AXI_DC_ARADDR[13] = \<const0> ;
  assign M_AXI_DC_ARADDR[12] = \<const0> ;
  assign M_AXI_DC_ARADDR[11] = \<const0> ;
  assign M_AXI_DC_ARADDR[10] = \<const0> ;
  assign M_AXI_DC_ARADDR[9] = \<const0> ;
  assign M_AXI_DC_ARADDR[8] = \<const0> ;
  assign M_AXI_DC_ARADDR[7] = \<const0> ;
  assign M_AXI_DC_ARADDR[6] = \<const0> ;
  assign M_AXI_DC_ARADDR[5] = \<const0> ;
  assign M_AXI_DC_ARADDR[4] = \<const0> ;
  assign M_AXI_DC_ARADDR[3] = \<const0> ;
  assign M_AXI_DC_ARADDR[2] = \<const0> ;
  assign M_AXI_DC_ARADDR[1] = \<const0> ;
  assign M_AXI_DC_ARADDR[0] = \<const0> ;
  assign M_AXI_DC_ARBAR[1] = \<const0> ;
  assign M_AXI_DC_ARBAR[0] = \<const0> ;
  assign M_AXI_DC_ARBURST[1] = \<const0> ;
  assign M_AXI_DC_ARBURST[0] = \<const0> ;
  assign M_AXI_DC_ARCACHE[3] = \<const0> ;
  assign M_AXI_DC_ARCACHE[2] = \<const0> ;
  assign M_AXI_DC_ARCACHE[1] = \<const0> ;
  assign M_AXI_DC_ARCACHE[0] = \<const0> ;
  assign M_AXI_DC_ARDOMAIN[1] = \<const0> ;
  assign M_AXI_DC_ARDOMAIN[0] = \<const0> ;
  assign M_AXI_DC_ARID[0] = \<const0> ;
  assign M_AXI_DC_ARLEN[7] = \<const0> ;
  assign M_AXI_DC_ARLEN[6] = \<const0> ;
  assign M_AXI_DC_ARLEN[5] = \<const0> ;
  assign M_AXI_DC_ARLEN[4] = \<const0> ;
  assign M_AXI_DC_ARLEN[3] = \<const0> ;
  assign M_AXI_DC_ARLEN[2] = \<const0> ;
  assign M_AXI_DC_ARLEN[1] = \<const0> ;
  assign M_AXI_DC_ARLEN[0] = \<const0> ;
  assign M_AXI_DC_ARLOCK = \<const0> ;
  assign M_AXI_DC_ARPROT[2] = \<const0> ;
  assign M_AXI_DC_ARPROT[1] = \<const0> ;
  assign M_AXI_DC_ARPROT[0] = \<const0> ;
  assign M_AXI_DC_ARQOS[3] = \<const0> ;
  assign M_AXI_DC_ARQOS[2] = \<const0> ;
  assign M_AXI_DC_ARQOS[1] = \<const0> ;
  assign M_AXI_DC_ARQOS[0] = \<const0> ;
  assign M_AXI_DC_ARSIZE[2] = \<const0> ;
  assign M_AXI_DC_ARSIZE[1] = \<const0> ;
  assign M_AXI_DC_ARSIZE[0] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[3] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[2] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[1] = \<const0> ;
  assign M_AXI_DC_ARSNOOP[0] = \<const0> ;
  assign M_AXI_DC_ARUSER[4] = \<const0> ;
  assign M_AXI_DC_ARUSER[3] = \<const0> ;
  assign M_AXI_DC_ARUSER[2] = \<const0> ;
  assign M_AXI_DC_ARUSER[1] = \<const0> ;
  assign M_AXI_DC_ARUSER[0] = \<const0> ;
  assign M_AXI_DC_ARVALID = \<const0> ;
  assign M_AXI_DC_AWADDR[31] = \<const0> ;
  assign M_AXI_DC_AWADDR[30] = \<const0> ;
  assign M_AXI_DC_AWADDR[29] = \<const0> ;
  assign M_AXI_DC_AWADDR[28] = \<const0> ;
  assign M_AXI_DC_AWADDR[27] = \<const0> ;
  assign M_AXI_DC_AWADDR[26] = \<const0> ;
  assign M_AXI_DC_AWADDR[25] = \<const0> ;
  assign M_AXI_DC_AWADDR[24] = \<const0> ;
  assign M_AXI_DC_AWADDR[23] = \<const0> ;
  assign M_AXI_DC_AWADDR[22] = \<const0> ;
  assign M_AXI_DC_AWADDR[21] = \<const0> ;
  assign M_AXI_DC_AWADDR[20] = \<const0> ;
  assign M_AXI_DC_AWADDR[19] = \<const0> ;
  assign M_AXI_DC_AWADDR[18] = \<const0> ;
  assign M_AXI_DC_AWADDR[17] = \<const0> ;
  assign M_AXI_DC_AWADDR[16] = \<const0> ;
  assign M_AXI_DC_AWADDR[15] = \<const0> ;
  assign M_AXI_DC_AWADDR[14] = \<const0> ;
  assign M_AXI_DC_AWADDR[13] = \<const0> ;
  assign M_AXI_DC_AWADDR[12] = \<const0> ;
  assign M_AXI_DC_AWADDR[11] = \<const0> ;
  assign M_AXI_DC_AWADDR[10] = \<const0> ;
  assign M_AXI_DC_AWADDR[9] = \<const0> ;
  assign M_AXI_DC_AWADDR[8] = \<const0> ;
  assign M_AXI_DC_AWADDR[7] = \<const0> ;
  assign M_AXI_DC_AWADDR[6] = \<const0> ;
  assign M_AXI_DC_AWADDR[5] = \<const0> ;
  assign M_AXI_DC_AWADDR[4] = \<const0> ;
  assign M_AXI_DC_AWADDR[3] = \<const0> ;
  assign M_AXI_DC_AWADDR[2] = \<const0> ;
  assign M_AXI_DC_AWADDR[1] = \<const0> ;
  assign M_AXI_DC_AWADDR[0] = \<const0> ;
  assign M_AXI_DC_AWBAR[1] = \<const0> ;
  assign M_AXI_DC_AWBAR[0] = \<const0> ;
  assign M_AXI_DC_AWBURST[1] = \<const0> ;
  assign M_AXI_DC_AWBURST[0] = \<const0> ;
  assign M_AXI_DC_AWCACHE[3] = \<const0> ;
  assign M_AXI_DC_AWCACHE[2] = \<const0> ;
  assign M_AXI_DC_AWCACHE[1] = \<const0> ;
  assign M_AXI_DC_AWCACHE[0] = \<const0> ;
  assign M_AXI_DC_AWDOMAIN[1] = \<const0> ;
  assign M_AXI_DC_AWDOMAIN[0] = \<const0> ;
  assign M_AXI_DC_AWID[0] = \<const0> ;
  assign M_AXI_DC_AWLEN[7] = \<const0> ;
  assign M_AXI_DC_AWLEN[6] = \<const0> ;
  assign M_AXI_DC_AWLEN[5] = \<const0> ;
  assign M_AXI_DC_AWLEN[4] = \<const0> ;
  assign M_AXI_DC_AWLEN[3] = \<const0> ;
  assign M_AXI_DC_AWLEN[2] = \<const0> ;
  assign M_AXI_DC_AWLEN[1] = \<const0> ;
  assign M_AXI_DC_AWLEN[0] = \<const0> ;
  assign M_AXI_DC_AWLOCK = \<const0> ;
  assign M_AXI_DC_AWPROT[2] = \<const0> ;
  assign M_AXI_DC_AWPROT[1] = \<const0> ;
  assign M_AXI_DC_AWPROT[0] = \<const0> ;
  assign M_AXI_DC_AWQOS[3] = \<const0> ;
  assign M_AXI_DC_AWQOS[2] = \<const0> ;
  assign M_AXI_DC_AWQOS[1] = \<const0> ;
  assign M_AXI_DC_AWQOS[0] = \<const0> ;
  assign M_AXI_DC_AWSIZE[2] = \<const0> ;
  assign M_AXI_DC_AWSIZE[1] = \<const0> ;
  assign M_AXI_DC_AWSIZE[0] = \<const0> ;
  assign M_AXI_DC_AWSNOOP[2] = \<const0> ;
  assign M_AXI_DC_AWSNOOP[1] = \<const0> ;
  assign M_AXI_DC_AWSNOOP[0] = \<const0> ;
  assign M_AXI_DC_AWUSER[4] = \<const0> ;
  assign M_AXI_DC_AWUSER[3] = \<const0> ;
  assign M_AXI_DC_AWUSER[2] = \<const0> ;
  assign M_AXI_DC_AWUSER[1] = \<const0> ;
  assign M_AXI_DC_AWUSER[0] = \<const0> ;
  assign M_AXI_DC_AWVALID = \<const0> ;
  assign M_AXI_DC_BREADY = \<const0> ;
  assign M_AXI_DC_CDDATA[31] = \<const0> ;
  assign M_AXI_DC_CDDATA[30] = \<const0> ;
  assign M_AXI_DC_CDDATA[29] = \<const0> ;
  assign M_AXI_DC_CDDATA[28] = \<const0> ;
  assign M_AXI_DC_CDDATA[27] = \<const0> ;
  assign M_AXI_DC_CDDATA[26] = \<const0> ;
  assign M_AXI_DC_CDDATA[25] = \<const0> ;
  assign M_AXI_DC_CDDATA[24] = \<const0> ;
  assign M_AXI_DC_CDDATA[23] = \<const0> ;
  assign M_AXI_DC_CDDATA[22] = \<const0> ;
  assign M_AXI_DC_CDDATA[21] = \<const0> ;
  assign M_AXI_DC_CDDATA[20] = \<const0> ;
  assign M_AXI_DC_CDDATA[19] = \<const0> ;
  assign M_AXI_DC_CDDATA[18] = \<const0> ;
  assign M_AXI_DC_CDDATA[17] = \<const0> ;
  assign M_AXI_DC_CDDATA[16] = \<const0> ;
  assign M_AXI_DC_CDDATA[15] = \<const0> ;
  assign M_AXI_DC_CDDATA[14] = \<const0> ;
  assign M_AXI_DC_CDDATA[13] = \<const0> ;
  assign M_AXI_DC_CDDATA[12] = \<const0> ;
  assign M_AXI_DC_CDDATA[11] = \<const0> ;
  assign M_AXI_DC_CDDATA[10] = \<const0> ;
  assign M_AXI_DC_CDDATA[9] = \<const0> ;
  assign M_AXI_DC_CDDATA[8] = \<const0> ;
  assign M_AXI_DC_CDDATA[7] = \<const0> ;
  assign M_AXI_DC_CDDATA[6] = \<const0> ;
  assign M_AXI_DC_CDDATA[5] = \<const0> ;
  assign M_AXI_DC_CDDATA[4] = \<const0> ;
  assign M_AXI_DC_CDDATA[3] = \<const0> ;
  assign M_AXI_DC_CDDATA[2] = \<const0> ;
  assign M_AXI_DC_CDDATA[1] = \<const0> ;
  assign M_AXI_DC_CDDATA[0] = \<const0> ;
  assign M_AXI_DC_CDLAST = \<const0> ;
  assign M_AXI_DC_CDVALID = \<const0> ;
  assign M_AXI_DC_CRRESP[4] = \<const0> ;
  assign M_AXI_DC_CRRESP[3] = \<const0> ;
  assign M_AXI_DC_CRRESP[2] = \<const0> ;
  assign M_AXI_DC_CRRESP[1] = \<const0> ;
  assign M_AXI_DC_CRRESP[0] = \<const0> ;
  assign M_AXI_DC_CRVALID = \<const0> ;
  assign M_AXI_DC_RACK = \<const0> ;
  assign M_AXI_DC_RREADY = \<const0> ;
  assign M_AXI_DC_WACK = \<const0> ;
  assign M_AXI_DC_WDATA[31] = \<const0> ;
  assign M_AXI_DC_WDATA[30] = \<const0> ;
  assign M_AXI_DC_WDATA[29] = \<const0> ;
  assign M_AXI_DC_WDATA[28] = \<const0> ;
  assign M_AXI_DC_WDATA[27] = \<const0> ;
  assign M_AXI_DC_WDATA[26] = \<const0> ;
  assign M_AXI_DC_WDATA[25] = \<const0> ;
  assign M_AXI_DC_WDATA[24] = \<const0> ;
  assign M_AXI_DC_WDATA[23] = \<const0> ;
  assign M_AXI_DC_WDATA[22] = \<const0> ;
  assign M_AXI_DC_WDATA[21] = \<const0> ;
  assign M_AXI_DC_WDATA[20] = \<const0> ;
  assign M_AXI_DC_WDATA[19] = \<const0> ;
  assign M_AXI_DC_WDATA[18] = \<const0> ;
  assign M_AXI_DC_WDATA[17] = \<const0> ;
  assign M_AXI_DC_WDATA[16] = \<const0> ;
  assign M_AXI_DC_WDATA[15] = \<const0> ;
  assign M_AXI_DC_WDATA[14] = \<const0> ;
  assign M_AXI_DC_WDATA[13] = \<const0> ;
  assign M_AXI_DC_WDATA[12] = \<const0> ;
  assign M_AXI_DC_WDATA[11] = \<const0> ;
  assign M_AXI_DC_WDATA[10] = \<const0> ;
  assign M_AXI_DC_WDATA[9] = \<const0> ;
  assign M_AXI_DC_WDATA[8] = \<const0> ;
  assign M_AXI_DC_WDATA[7] = \<const0> ;
  assign M_AXI_DC_WDATA[6] = \<const0> ;
  assign M_AXI_DC_WDATA[5] = \<const0> ;
  assign M_AXI_DC_WDATA[4] = \<const0> ;
  assign M_AXI_DC_WDATA[3] = \<const0> ;
  assign M_AXI_DC_WDATA[2] = \<const0> ;
  assign M_AXI_DC_WDATA[1] = \<const0> ;
  assign M_AXI_DC_WDATA[0] = \<const0> ;
  assign M_AXI_DC_WLAST = \<const0> ;
  assign M_AXI_DC_WSTRB[3] = \<const0> ;
  assign M_AXI_DC_WSTRB[2] = \<const0> ;
  assign M_AXI_DC_WSTRB[1] = \<const0> ;
  assign M_AXI_DC_WSTRB[0] = \<const0> ;
  assign M_AXI_DC_WUSER[0] = \<const0> ;
  assign M_AXI_DC_WVALID = \<const0> ;
  assign M_AXI_DP_ARADDR[31:0] = M_AXI_DP_AWADDR;
  assign M_AXI_DP_ARBURST[1] = \<const0> ;
  assign M_AXI_DP_ARBURST[0] = \<const1> ;
  assign M_AXI_DP_ARCACHE[3] = \<const0> ;
  assign M_AXI_DP_ARCACHE[2] = \<const0> ;
  assign M_AXI_DP_ARCACHE[1] = \<const1> ;
  assign M_AXI_DP_ARCACHE[0] = \<const0> ;
  assign M_AXI_DP_ARID[0] = \<const0> ;
  assign M_AXI_DP_ARLEN[7] = \<const0> ;
  assign M_AXI_DP_ARLEN[6] = \<const0> ;
  assign M_AXI_DP_ARLEN[5] = \<const0> ;
  assign M_AXI_DP_ARLEN[4] = \<const0> ;
  assign M_AXI_DP_ARLEN[3] = \<const0> ;
  assign M_AXI_DP_ARLEN[2] = \<const0> ;
  assign M_AXI_DP_ARLEN[1] = \<const0> ;
  assign M_AXI_DP_ARLEN[0] = \<const0> ;
  assign M_AXI_DP_ARLOCK = \<const0> ;
  assign M_AXI_DP_ARPROT[2] = \<const0> ;
  assign M_AXI_DP_ARPROT[1] = \<const0> ;
  assign M_AXI_DP_ARPROT[0] = \<const0> ;
  assign M_AXI_DP_ARQOS[3] = \<const1> ;
  assign M_AXI_DP_ARQOS[2] = \<const0> ;
  assign M_AXI_DP_ARQOS[1] = \<const0> ;
  assign M_AXI_DP_ARQOS[0] = \<const0> ;
  assign M_AXI_DP_ARSIZE[2] = \<const0> ;
  assign M_AXI_DP_ARSIZE[1] = \<const1> ;
  assign M_AXI_DP_ARSIZE[0] = \<const0> ;
  assign M_AXI_DP_AWBURST[1] = \<const0> ;
  assign M_AXI_DP_AWBURST[0] = \<const1> ;
  assign M_AXI_DP_AWCACHE[3] = \<const0> ;
  assign M_AXI_DP_AWCACHE[2] = \<const0> ;
  assign M_AXI_DP_AWCACHE[1] = \<const1> ;
  assign M_AXI_DP_AWCACHE[0] = \<const0> ;
  assign M_AXI_DP_AWID[0] = \<const0> ;
  assign M_AXI_DP_AWLEN[7] = \<const0> ;
  assign M_AXI_DP_AWLEN[6] = \<const0> ;
  assign M_AXI_DP_AWLEN[5] = \<const0> ;
  assign M_AXI_DP_AWLEN[4] = \<const0> ;
  assign M_AXI_DP_AWLEN[3] = \<const0> ;
  assign M_AXI_DP_AWLEN[2] = \<const0> ;
  assign M_AXI_DP_AWLEN[1] = \<const0> ;
  assign M_AXI_DP_AWLEN[0] = \<const0> ;
  assign M_AXI_DP_AWLOCK = \<const0> ;
  assign M_AXI_DP_AWPROT[2] = \<const0> ;
  assign M_AXI_DP_AWPROT[1] = \<const0> ;
  assign M_AXI_DP_AWPROT[0] = \<const0> ;
  assign M_AXI_DP_AWQOS[3] = \<const1> ;
  assign M_AXI_DP_AWQOS[2] = \<const0> ;
  assign M_AXI_DP_AWQOS[1] = \<const0> ;
  assign M_AXI_DP_AWQOS[0] = \<const0> ;
  assign M_AXI_DP_AWSIZE[2] = \<const0> ;
  assign M_AXI_DP_AWSIZE[1] = \<const1> ;
  assign M_AXI_DP_AWSIZE[0] = \<const0> ;
  assign M_AXI_DP_WLAST = \<const1> ;
  assign M_AXI_IC_ACREADY = \<const0> ;
  assign M_AXI_IC_ARADDR[31] = \<const0> ;
  assign M_AXI_IC_ARADDR[30] = \<const0> ;
  assign M_AXI_IC_ARADDR[29] = \<const0> ;
  assign M_AXI_IC_ARADDR[28] = \<const0> ;
  assign M_AXI_IC_ARADDR[27] = \<const0> ;
  assign M_AXI_IC_ARADDR[26] = \<const0> ;
  assign M_AXI_IC_ARADDR[25] = \<const0> ;
  assign M_AXI_IC_ARADDR[24] = \<const0> ;
  assign M_AXI_IC_ARADDR[23] = \<const0> ;
  assign M_AXI_IC_ARADDR[22] = \<const0> ;
  assign M_AXI_IC_ARADDR[21] = \<const0> ;
  assign M_AXI_IC_ARADDR[20] = \<const0> ;
  assign M_AXI_IC_ARADDR[19] = \<const0> ;
  assign M_AXI_IC_ARADDR[18] = \<const0> ;
  assign M_AXI_IC_ARADDR[17] = \<const0> ;
  assign M_AXI_IC_ARADDR[16] = \<const0> ;
  assign M_AXI_IC_ARADDR[15] = \<const0> ;
  assign M_AXI_IC_ARADDR[14] = \<const0> ;
  assign M_AXI_IC_ARADDR[13] = \<const0> ;
  assign M_AXI_IC_ARADDR[12] = \<const0> ;
  assign M_AXI_IC_ARADDR[11] = \<const0> ;
  assign M_AXI_IC_ARADDR[10] = \<const0> ;
  assign M_AXI_IC_ARADDR[9] = \<const0> ;
  assign M_AXI_IC_ARADDR[8] = \<const0> ;
  assign M_AXI_IC_ARADDR[7] = \<const0> ;
  assign M_AXI_IC_ARADDR[6] = \<const0> ;
  assign M_AXI_IC_ARADDR[5] = \<const0> ;
  assign M_AXI_IC_ARADDR[4] = \<const0> ;
  assign M_AXI_IC_ARADDR[3] = \<const0> ;
  assign M_AXI_IC_ARADDR[2] = \<const0> ;
  assign M_AXI_IC_ARADDR[1] = \<const0> ;
  assign M_AXI_IC_ARADDR[0] = \<const0> ;
  assign M_AXI_IC_ARBAR[1] = \<const0> ;
  assign M_AXI_IC_ARBAR[0] = \<const0> ;
  assign M_AXI_IC_ARBURST[1] = \<const0> ;
  assign M_AXI_IC_ARBURST[0] = \<const0> ;
  assign M_AXI_IC_ARCACHE[3] = \<const0> ;
  assign M_AXI_IC_ARCACHE[2] = \<const0> ;
  assign M_AXI_IC_ARCACHE[1] = \<const0> ;
  assign M_AXI_IC_ARCACHE[0] = \<const0> ;
  assign M_AXI_IC_ARDOMAIN[1] = \<const0> ;
  assign M_AXI_IC_ARDOMAIN[0] = \<const0> ;
  assign M_AXI_IC_ARID[0] = \<const0> ;
  assign M_AXI_IC_ARLEN[7] = \<const0> ;
  assign M_AXI_IC_ARLEN[6] = \<const0> ;
  assign M_AXI_IC_ARLEN[5] = \<const0> ;
  assign M_AXI_IC_ARLEN[4] = \<const0> ;
  assign M_AXI_IC_ARLEN[3] = \<const0> ;
  assign M_AXI_IC_ARLEN[2] = \<const0> ;
  assign M_AXI_IC_ARLEN[1] = \<const0> ;
  assign M_AXI_IC_ARLEN[0] = \<const0> ;
  assign M_AXI_IC_ARLOCK = \<const0> ;
  assign M_AXI_IC_ARPROT[2] = \<const0> ;
  assign M_AXI_IC_ARPROT[1] = \<const0> ;
  assign M_AXI_IC_ARPROT[0] = \<const0> ;
  assign M_AXI_IC_ARQOS[3] = \<const0> ;
  assign M_AXI_IC_ARQOS[2] = \<const0> ;
  assign M_AXI_IC_ARQOS[1] = \<const0> ;
  assign M_AXI_IC_ARQOS[0] = \<const0> ;
  assign M_AXI_IC_ARSIZE[2] = \<const0> ;
  assign M_AXI_IC_ARSIZE[1] = \<const0> ;
  assign M_AXI_IC_ARSIZE[0] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[3] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[2] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[1] = \<const0> ;
  assign M_AXI_IC_ARSNOOP[0] = \<const0> ;
  assign M_AXI_IC_ARUSER[4] = \<const0> ;
  assign M_AXI_IC_ARUSER[3] = \<const0> ;
  assign M_AXI_IC_ARUSER[2] = \<const0> ;
  assign M_AXI_IC_ARUSER[1] = \<const0> ;
  assign M_AXI_IC_ARUSER[0] = \<const0> ;
  assign M_AXI_IC_ARVALID = \<const0> ;
  assign M_AXI_IC_AWADDR[31] = \<const0> ;
  assign M_AXI_IC_AWADDR[30] = \<const0> ;
  assign M_AXI_IC_AWADDR[29] = \<const0> ;
  assign M_AXI_IC_AWADDR[28] = \<const0> ;
  assign M_AXI_IC_AWADDR[27] = \<const0> ;
  assign M_AXI_IC_AWADDR[26] = \<const0> ;
  assign M_AXI_IC_AWADDR[25] = \<const0> ;
  assign M_AXI_IC_AWADDR[24] = \<const0> ;
  assign M_AXI_IC_AWADDR[23] = \<const0> ;
  assign M_AXI_IC_AWADDR[22] = \<const0> ;
  assign M_AXI_IC_AWADDR[21] = \<const0> ;
  assign M_AXI_IC_AWADDR[20] = \<const0> ;
  assign M_AXI_IC_AWADDR[19] = \<const0> ;
  assign M_AXI_IC_AWADDR[18] = \<const0> ;
  assign M_AXI_IC_AWADDR[17] = \<const0> ;
  assign M_AXI_IC_AWADDR[16] = \<const0> ;
  assign M_AXI_IC_AWADDR[15] = \<const0> ;
  assign M_AXI_IC_AWADDR[14] = \<const0> ;
  assign M_AXI_IC_AWADDR[13] = \<const0> ;
  assign M_AXI_IC_AWADDR[12] = \<const0> ;
  assign M_AXI_IC_AWADDR[11] = \<const0> ;
  assign M_AXI_IC_AWADDR[10] = \<const0> ;
  assign M_AXI_IC_AWADDR[9] = \<const0> ;
  assign M_AXI_IC_AWADDR[8] = \<const0> ;
  assign M_AXI_IC_AWADDR[7] = \<const0> ;
  assign M_AXI_IC_AWADDR[6] = \<const0> ;
  assign M_AXI_IC_AWADDR[5] = \<const0> ;
  assign M_AXI_IC_AWADDR[4] = \<const0> ;
  assign M_AXI_IC_AWADDR[3] = \<const0> ;
  assign M_AXI_IC_AWADDR[2] = \<const0> ;
  assign M_AXI_IC_AWADDR[1] = \<const0> ;
  assign M_AXI_IC_AWADDR[0] = \<const0> ;
  assign M_AXI_IC_AWBAR[1] = \<const0> ;
  assign M_AXI_IC_AWBAR[0] = \<const0> ;
  assign M_AXI_IC_AWBURST[1] = \<const0> ;
  assign M_AXI_IC_AWBURST[0] = \<const0> ;
  assign M_AXI_IC_AWCACHE[3] = \<const0> ;
  assign M_AXI_IC_AWCACHE[2] = \<const0> ;
  assign M_AXI_IC_AWCACHE[1] = \<const0> ;
  assign M_AXI_IC_AWCACHE[0] = \<const0> ;
  assign M_AXI_IC_AWDOMAIN[1] = \<const0> ;
  assign M_AXI_IC_AWDOMAIN[0] = \<const0> ;
  assign M_AXI_IC_AWID[0] = \<const0> ;
  assign M_AXI_IC_AWLEN[7] = \<const0> ;
  assign M_AXI_IC_AWLEN[6] = \<const0> ;
  assign M_AXI_IC_AWLEN[5] = \<const0> ;
  assign M_AXI_IC_AWLEN[4] = \<const0> ;
  assign M_AXI_IC_AWLEN[3] = \<const0> ;
  assign M_AXI_IC_AWLEN[2] = \<const0> ;
  assign M_AXI_IC_AWLEN[1] = \<const0> ;
  assign M_AXI_IC_AWLEN[0] = \<const0> ;
  assign M_AXI_IC_AWLOCK = \<const0> ;
  assign M_AXI_IC_AWPROT[2] = \<const0> ;
  assign M_AXI_IC_AWPROT[1] = \<const0> ;
  assign M_AXI_IC_AWPROT[0] = \<const0> ;
  assign M_AXI_IC_AWQOS[3] = \<const0> ;
  assign M_AXI_IC_AWQOS[2] = \<const0> ;
  assign M_AXI_IC_AWQOS[1] = \<const0> ;
  assign M_AXI_IC_AWQOS[0] = \<const0> ;
  assign M_AXI_IC_AWSIZE[2] = \<const0> ;
  assign M_AXI_IC_AWSIZE[1] = \<const0> ;
  assign M_AXI_IC_AWSIZE[0] = \<const0> ;
  assign M_AXI_IC_AWSNOOP[2] = \<const0> ;
  assign M_AXI_IC_AWSNOOP[1] = \<const0> ;
  assign M_AXI_IC_AWSNOOP[0] = \<const0> ;
  assign M_AXI_IC_AWUSER[4] = \<const0> ;
  assign M_AXI_IC_AWUSER[3] = \<const0> ;
  assign M_AXI_IC_AWUSER[2] = \<const0> ;
  assign M_AXI_IC_AWUSER[1] = \<const0> ;
  assign M_AXI_IC_AWUSER[0] = \<const0> ;
  assign M_AXI_IC_AWVALID = \<const0> ;
  assign M_AXI_IC_BREADY = \<const0> ;
  assign M_AXI_IC_CDDATA[31] = \<const0> ;
  assign M_AXI_IC_CDDATA[30] = \<const0> ;
  assign M_AXI_IC_CDDATA[29] = \<const0> ;
  assign M_AXI_IC_CDDATA[28] = \<const0> ;
  assign M_AXI_IC_CDDATA[27] = \<const0> ;
  assign M_AXI_IC_CDDATA[26] = \<const0> ;
  assign M_AXI_IC_CDDATA[25] = \<const0> ;
  assign M_AXI_IC_CDDATA[24] = \<const0> ;
  assign M_AXI_IC_CDDATA[23] = \<const0> ;
  assign M_AXI_IC_CDDATA[22] = \<const0> ;
  assign M_AXI_IC_CDDATA[21] = \<const0> ;
  assign M_AXI_IC_CDDATA[20] = \<const0> ;
  assign M_AXI_IC_CDDATA[19] = \<const0> ;
  assign M_AXI_IC_CDDATA[18] = \<const0> ;
  assign M_AXI_IC_CDDATA[17] = \<const0> ;
  assign M_AXI_IC_CDDATA[16] = \<const0> ;
  assign M_AXI_IC_CDDATA[15] = \<const0> ;
  assign M_AXI_IC_CDDATA[14] = \<const0> ;
  assign M_AXI_IC_CDDATA[13] = \<const0> ;
  assign M_AXI_IC_CDDATA[12] = \<const0> ;
  assign M_AXI_IC_CDDATA[11] = \<const0> ;
  assign M_AXI_IC_CDDATA[10] = \<const0> ;
  assign M_AXI_IC_CDDATA[9] = \<const0> ;
  assign M_AXI_IC_CDDATA[8] = \<const0> ;
  assign M_AXI_IC_CDDATA[7] = \<const0> ;
  assign M_AXI_IC_CDDATA[6] = \<const0> ;
  assign M_AXI_IC_CDDATA[5] = \<const0> ;
  assign M_AXI_IC_CDDATA[4] = \<const0> ;
  assign M_AXI_IC_CDDATA[3] = \<const0> ;
  assign M_AXI_IC_CDDATA[2] = \<const0> ;
  assign M_AXI_IC_CDDATA[1] = \<const0> ;
  assign M_AXI_IC_CDDATA[0] = \<const0> ;
  assign M_AXI_IC_CDLAST = \<const0> ;
  assign M_AXI_IC_CDVALID = \<const0> ;
  assign M_AXI_IC_CRRESP[4] = \<const0> ;
  assign M_AXI_IC_CRRESP[3] = \<const0> ;
  assign M_AXI_IC_CRRESP[2] = \<const0> ;
  assign M_AXI_IC_CRRESP[1] = \<const0> ;
  assign M_AXI_IC_CRRESP[0] = \<const0> ;
  assign M_AXI_IC_CRVALID = \<const0> ;
  assign M_AXI_IC_RACK = \<const0> ;
  assign M_AXI_IC_RREADY = \<const0> ;
  assign M_AXI_IC_WACK = \<const0> ;
  assign M_AXI_IC_WDATA[31] = \<const0> ;
  assign M_AXI_IC_WDATA[30] = \<const0> ;
  assign M_AXI_IC_WDATA[29] = \<const0> ;
  assign M_AXI_IC_WDATA[28] = \<const0> ;
  assign M_AXI_IC_WDATA[27] = \<const0> ;
  assign M_AXI_IC_WDATA[26] = \<const0> ;
  assign M_AXI_IC_WDATA[25] = \<const0> ;
  assign M_AXI_IC_WDATA[24] = \<const0> ;
  assign M_AXI_IC_WDATA[23] = \<const0> ;
  assign M_AXI_IC_WDATA[22] = \<const0> ;
  assign M_AXI_IC_WDATA[21] = \<const0> ;
  assign M_AXI_IC_WDATA[20] = \<const0> ;
  assign M_AXI_IC_WDATA[19] = \<const0> ;
  assign M_AXI_IC_WDATA[18] = \<const0> ;
  assign M_AXI_IC_WDATA[17] = \<const0> ;
  assign M_AXI_IC_WDATA[16] = \<const0> ;
  assign M_AXI_IC_WDATA[15] = \<const0> ;
  assign M_AXI_IC_WDATA[14] = \<const0> ;
  assign M_AXI_IC_WDATA[13] = \<const0> ;
  assign M_AXI_IC_WDATA[12] = \<const0> ;
  assign M_AXI_IC_WDATA[11] = \<const0> ;
  assign M_AXI_IC_WDATA[10] = \<const0> ;
  assign M_AXI_IC_WDATA[9] = \<const0> ;
  assign M_AXI_IC_WDATA[8] = \<const0> ;
  assign M_AXI_IC_WDATA[7] = \<const0> ;
  assign M_AXI_IC_WDATA[6] = \<const0> ;
  assign M_AXI_IC_WDATA[5] = \<const0> ;
  assign M_AXI_IC_WDATA[4] = \<const0> ;
  assign M_AXI_IC_WDATA[3] = \<const0> ;
  assign M_AXI_IC_WDATA[2] = \<const0> ;
  assign M_AXI_IC_WDATA[1] = \<const0> ;
  assign M_AXI_IC_WDATA[0] = \<const0> ;
  assign M_AXI_IC_WLAST = \<const0> ;
  assign M_AXI_IC_WSTRB[3] = \<const0> ;
  assign M_AXI_IC_WSTRB[2] = \<const0> ;
  assign M_AXI_IC_WSTRB[1] = \<const0> ;
  assign M_AXI_IC_WSTRB[0] = \<const0> ;
  assign M_AXI_IC_WUSER[0] = \<const0> ;
  assign M_AXI_IC_WVALID = \<const0> ;
  assign M_AXI_IP_ARADDR[31] = \<const0> ;
  assign M_AXI_IP_ARADDR[30] = \<const0> ;
  assign M_AXI_IP_ARADDR[29] = \<const0> ;
  assign M_AXI_IP_ARADDR[28] = \<const0> ;
  assign M_AXI_IP_ARADDR[27] = \<const0> ;
  assign M_AXI_IP_ARADDR[26] = \<const0> ;
  assign M_AXI_IP_ARADDR[25] = \<const0> ;
  assign M_AXI_IP_ARADDR[24] = \<const0> ;
  assign M_AXI_IP_ARADDR[23] = \<const0> ;
  assign M_AXI_IP_ARADDR[22] = \<const0> ;
  assign M_AXI_IP_ARADDR[21] = \<const0> ;
  assign M_AXI_IP_ARADDR[20] = \<const0> ;
  assign M_AXI_IP_ARADDR[19] = \<const0> ;
  assign M_AXI_IP_ARADDR[18] = \<const0> ;
  assign M_AXI_IP_ARADDR[17] = \<const0> ;
  assign M_AXI_IP_ARADDR[16] = \<const0> ;
  assign M_AXI_IP_ARADDR[15] = \<const0> ;
  assign M_AXI_IP_ARADDR[14] = \<const0> ;
  assign M_AXI_IP_ARADDR[13] = \<const0> ;
  assign M_AXI_IP_ARADDR[12] = \<const0> ;
  assign M_AXI_IP_ARADDR[11] = \<const0> ;
  assign M_AXI_IP_ARADDR[10] = \<const0> ;
  assign M_AXI_IP_ARADDR[9] = \<const0> ;
  assign M_AXI_IP_ARADDR[8] = \<const0> ;
  assign M_AXI_IP_ARADDR[7] = \<const0> ;
  assign M_AXI_IP_ARADDR[6] = \<const0> ;
  assign M_AXI_IP_ARADDR[5] = \<const0> ;
  assign M_AXI_IP_ARADDR[4] = \<const0> ;
  assign M_AXI_IP_ARADDR[3] = \<const0> ;
  assign M_AXI_IP_ARADDR[2] = \<const0> ;
  assign M_AXI_IP_ARADDR[1] = \<const0> ;
  assign M_AXI_IP_ARADDR[0] = \<const0> ;
  assign M_AXI_IP_ARBURST[1] = \<const0> ;
  assign M_AXI_IP_ARBURST[0] = \<const0> ;
  assign M_AXI_IP_ARCACHE[3] = \<const0> ;
  assign M_AXI_IP_ARCACHE[2] = \<const0> ;
  assign M_AXI_IP_ARCACHE[1] = \<const0> ;
  assign M_AXI_IP_ARCACHE[0] = \<const0> ;
  assign M_AXI_IP_ARID[0] = \<const0> ;
  assign M_AXI_IP_ARLEN[7] = \<const0> ;
  assign M_AXI_IP_ARLEN[6] = \<const0> ;
  assign M_AXI_IP_ARLEN[5] = \<const0> ;
  assign M_AXI_IP_ARLEN[4] = \<const0> ;
  assign M_AXI_IP_ARLEN[3] = \<const0> ;
  assign M_AXI_IP_ARLEN[2] = \<const0> ;
  assign M_AXI_IP_ARLEN[1] = \<const0> ;
  assign M_AXI_IP_ARLEN[0] = \<const0> ;
  assign M_AXI_IP_ARLOCK = \<const0> ;
  assign M_AXI_IP_ARPROT[2] = \<const0> ;
  assign M_AXI_IP_ARPROT[1] = \<const0> ;
  assign M_AXI_IP_ARPROT[0] = \<const0> ;
  assign M_AXI_IP_ARQOS[3] = \<const0> ;
  assign M_AXI_IP_ARQOS[2] = \<const0> ;
  assign M_AXI_IP_ARQOS[1] = \<const0> ;
  assign M_AXI_IP_ARQOS[0] = \<const0> ;
  assign M_AXI_IP_ARSIZE[2] = \<const0> ;
  assign M_AXI_IP_ARSIZE[1] = \<const0> ;
  assign M_AXI_IP_ARSIZE[0] = \<const0> ;
  assign M_AXI_IP_ARVALID = \<const0> ;
  assign M_AXI_IP_AWADDR[31] = \<const0> ;
  assign M_AXI_IP_AWADDR[30] = \<const0> ;
  assign M_AXI_IP_AWADDR[29] = \<const0> ;
  assign M_AXI_IP_AWADDR[28] = \<const0> ;
  assign M_AXI_IP_AWADDR[27] = \<const0> ;
  assign M_AXI_IP_AWADDR[26] = \<const0> ;
  assign M_AXI_IP_AWADDR[25] = \<const0> ;
  assign M_AXI_IP_AWADDR[24] = \<const0> ;
  assign M_AXI_IP_AWADDR[23] = \<const0> ;
  assign M_AXI_IP_AWADDR[22] = \<const0> ;
  assign M_AXI_IP_AWADDR[21] = \<const0> ;
  assign M_AXI_IP_AWADDR[20] = \<const0> ;
  assign M_AXI_IP_AWADDR[19] = \<const0> ;
  assign M_AXI_IP_AWADDR[18] = \<const0> ;
  assign M_AXI_IP_AWADDR[17] = \<const0> ;
  assign M_AXI_IP_AWADDR[16] = \<const0> ;
  assign M_AXI_IP_AWADDR[15] = \<const0> ;
  assign M_AXI_IP_AWADDR[14] = \<const0> ;
  assign M_AXI_IP_AWADDR[13] = \<const0> ;
  assign M_AXI_IP_AWADDR[12] = \<const0> ;
  assign M_AXI_IP_AWADDR[11] = \<const0> ;
  assign M_AXI_IP_AWADDR[10] = \<const0> ;
  assign M_AXI_IP_AWADDR[9] = \<const0> ;
  assign M_AXI_IP_AWADDR[8] = \<const0> ;
  assign M_AXI_IP_AWADDR[7] = \<const0> ;
  assign M_AXI_IP_AWADDR[6] = \<const0> ;
  assign M_AXI_IP_AWADDR[5] = \<const0> ;
  assign M_AXI_IP_AWADDR[4] = \<const0> ;
  assign M_AXI_IP_AWADDR[3] = \<const0> ;
  assign M_AXI_IP_AWADDR[2] = \<const0> ;
  assign M_AXI_IP_AWADDR[1] = \<const0> ;
  assign M_AXI_IP_AWADDR[0] = \<const0> ;
  assign M_AXI_IP_AWBURST[1] = \<const0> ;
  assign M_AXI_IP_AWBURST[0] = \<const0> ;
  assign M_AXI_IP_AWCACHE[3] = \<const0> ;
  assign M_AXI_IP_AWCACHE[2] = \<const0> ;
  assign M_AXI_IP_AWCACHE[1] = \<const0> ;
  assign M_AXI_IP_AWCACHE[0] = \<const0> ;
  assign M_AXI_IP_AWID[0] = \<const0> ;
  assign M_AXI_IP_AWLEN[7] = \<const0> ;
  assign M_AXI_IP_AWLEN[6] = \<const0> ;
  assign M_AXI_IP_AWLEN[5] = \<const0> ;
  assign M_AXI_IP_AWLEN[4] = \<const0> ;
  assign M_AXI_IP_AWLEN[3] = \<const0> ;
  assign M_AXI_IP_AWLEN[2] = \<const0> ;
  assign M_AXI_IP_AWLEN[1] = \<const0> ;
  assign M_AXI_IP_AWLEN[0] = \<const0> ;
  assign M_AXI_IP_AWLOCK = \<const0> ;
  assign M_AXI_IP_AWPROT[2] = \<const0> ;
  assign M_AXI_IP_AWPROT[1] = \<const0> ;
  assign M_AXI_IP_AWPROT[0] = \<const0> ;
  assign M_AXI_IP_AWQOS[3] = \<const0> ;
  assign M_AXI_IP_AWQOS[2] = \<const0> ;
  assign M_AXI_IP_AWQOS[1] = \<const0> ;
  assign M_AXI_IP_AWQOS[0] = \<const0> ;
  assign M_AXI_IP_AWSIZE[2] = \<const0> ;
  assign M_AXI_IP_AWSIZE[1] = \<const0> ;
  assign M_AXI_IP_AWSIZE[0] = \<const0> ;
  assign M_AXI_IP_AWVALID = \<const0> ;
  assign M_AXI_IP_BREADY = \<const0> ;
  assign M_AXI_IP_RREADY = \<const0> ;
  assign M_AXI_IP_WDATA[31] = \<const0> ;
  assign M_AXI_IP_WDATA[30] = \<const0> ;
  assign M_AXI_IP_WDATA[29] = \<const0> ;
  assign M_AXI_IP_WDATA[28] = \<const0> ;
  assign M_AXI_IP_WDATA[27] = \<const0> ;
  assign M_AXI_IP_WDATA[26] = \<const0> ;
  assign M_AXI_IP_WDATA[25] = \<const0> ;
  assign M_AXI_IP_WDATA[24] = \<const0> ;
  assign M_AXI_IP_WDATA[23] = \<const0> ;
  assign M_AXI_IP_WDATA[22] = \<const0> ;
  assign M_AXI_IP_WDATA[21] = \<const0> ;
  assign M_AXI_IP_WDATA[20] = \<const0> ;
  assign M_AXI_IP_WDATA[19] = \<const0> ;
  assign M_AXI_IP_WDATA[18] = \<const0> ;
  assign M_AXI_IP_WDATA[17] = \<const0> ;
  assign M_AXI_IP_WDATA[16] = \<const0> ;
  assign M_AXI_IP_WDATA[15] = \<const0> ;
  assign M_AXI_IP_WDATA[14] = \<const0> ;
  assign M_AXI_IP_WDATA[13] = \<const0> ;
  assign M_AXI_IP_WDATA[12] = \<const0> ;
  assign M_AXI_IP_WDATA[11] = \<const0> ;
  assign M_AXI_IP_WDATA[10] = \<const0> ;
  assign M_AXI_IP_WDATA[9] = \<const0> ;
  assign M_AXI_IP_WDATA[8] = \<const0> ;
  assign M_AXI_IP_WDATA[7] = \<const0> ;
  assign M_AXI_IP_WDATA[6] = \<const0> ;
  assign M_AXI_IP_WDATA[5] = \<const0> ;
  assign M_AXI_IP_WDATA[4] = \<const0> ;
  assign M_AXI_IP_WDATA[3] = \<const0> ;
  assign M_AXI_IP_WDATA[2] = \<const0> ;
  assign M_AXI_IP_WDATA[1] = \<const0> ;
  assign M_AXI_IP_WDATA[0] = \<const0> ;
  assign M_AXI_IP_WLAST = \<const0> ;
  assign M_AXI_IP_WSTRB[3] = \<const0> ;
  assign M_AXI_IP_WSTRB[2] = \<const0> ;
  assign M_AXI_IP_WSTRB[1] = \<const0> ;
  assign M_AXI_IP_WSTRB[0] = \<const0> ;
  assign M_AXI_IP_WVALID = \<const0> ;
  assign RAM_From[255] = \<const0> ;
  assign RAM_From[254] = \<const0> ;
  assign RAM_From[253] = \<const0> ;
  assign RAM_From[252] = \<const0> ;
  assign RAM_From[251] = \<const0> ;
  assign RAM_From[250] = \<const0> ;
  assign RAM_From[249] = \<const0> ;
  assign RAM_From[248] = \<const0> ;
  assign RAM_From[247] = \<const0> ;
  assign RAM_From[246] = \<const0> ;
  assign RAM_From[245] = \<const0> ;
  assign RAM_From[244] = \<const0> ;
  assign RAM_From[243] = \<const0> ;
  assign RAM_From[242] = \<const0> ;
  assign RAM_From[241] = \<const0> ;
  assign RAM_From[240] = \<const0> ;
  assign RAM_From[239] = \<const0> ;
  assign RAM_From[238] = \<const0> ;
  assign RAM_From[237] = \<const0> ;
  assign RAM_From[236] = \<const0> ;
  assign RAM_From[235] = \<const0> ;
  assign RAM_From[234] = \<const0> ;
  assign RAM_From[233] = \<const0> ;
  assign RAM_From[232] = \<const0> ;
  assign RAM_From[231] = \<const0> ;
  assign RAM_From[230] = \<const0> ;
  assign RAM_From[229] = \<const0> ;
  assign RAM_From[228] = \<const0> ;
  assign RAM_From[227] = \<const0> ;
  assign RAM_From[226] = \<const0> ;
  assign RAM_From[225] = \<const0> ;
  assign RAM_From[224] = \<const0> ;
  assign RAM_From[223] = \<const0> ;
  assign RAM_From[222] = \<const0> ;
  assign RAM_From[221] = \<const0> ;
  assign RAM_From[220] = \<const0> ;
  assign RAM_From[219] = \<const0> ;
  assign RAM_From[218] = \<const0> ;
  assign RAM_From[217] = \<const0> ;
  assign RAM_From[216] = \<const0> ;
  assign RAM_From[215] = \<const0> ;
  assign RAM_From[214] = \<const0> ;
  assign RAM_From[213] = \<const0> ;
  assign RAM_From[212] = \<const0> ;
  assign RAM_From[211] = \<const0> ;
  assign RAM_From[210] = \<const0> ;
  assign RAM_From[209] = \<const0> ;
  assign RAM_From[208] = \<const0> ;
  assign RAM_From[207] = \<const0> ;
  assign RAM_From[206] = \<const0> ;
  assign RAM_From[205] = \<const0> ;
  assign RAM_From[204] = \<const0> ;
  assign RAM_From[203] = \<const0> ;
  assign RAM_From[202] = \<const0> ;
  assign RAM_From[201] = \<const0> ;
  assign RAM_From[200] = \<const0> ;
  assign RAM_From[199] = \<const0> ;
  assign RAM_From[198] = \<const0> ;
  assign RAM_From[197] = \<const0> ;
  assign RAM_From[196] = \<const0> ;
  assign RAM_From[195] = \<const0> ;
  assign RAM_From[194] = \<const0> ;
  assign RAM_From[193] = \<const0> ;
  assign RAM_From[192] = \<const0> ;
  assign RAM_From[191] = \<const0> ;
  assign RAM_From[190] = \<const0> ;
  assign RAM_From[189] = \<const0> ;
  assign RAM_From[188] = \<const0> ;
  assign RAM_From[187] = \<const0> ;
  assign RAM_From[186] = \<const0> ;
  assign RAM_From[185] = \<const0> ;
  assign RAM_From[184] = \<const0> ;
  assign RAM_From[183] = \<const0> ;
  assign RAM_From[182] = \<const0> ;
  assign RAM_From[181] = \<const0> ;
  assign RAM_From[180] = \<const0> ;
  assign RAM_From[179] = \<const0> ;
  assign RAM_From[178] = \<const0> ;
  assign RAM_From[177] = \<const0> ;
  assign RAM_From[176] = \<const0> ;
  assign RAM_From[175] = \<const0> ;
  assign RAM_From[174] = \<const0> ;
  assign RAM_From[173] = \<const0> ;
  assign RAM_From[172] = \<const0> ;
  assign RAM_From[171] = \<const0> ;
  assign RAM_From[170] = \<const0> ;
  assign RAM_From[169] = \<const0> ;
  assign RAM_From[168] = \<const0> ;
  assign RAM_From[167] = \<const0> ;
  assign RAM_From[166] = \<const0> ;
  assign RAM_From[165] = \<const0> ;
  assign RAM_From[164] = \<const0> ;
  assign RAM_From[163] = \<const0> ;
  assign RAM_From[162] = \<const0> ;
  assign RAM_From[161] = \<const0> ;
  assign RAM_From[160] = \<const0> ;
  assign RAM_From[159] = \<const0> ;
  assign RAM_From[158] = \<const0> ;
  assign RAM_From[157] = \<const0> ;
  assign RAM_From[156] = \<const0> ;
  assign RAM_From[155] = \<const0> ;
  assign RAM_From[154] = \<const0> ;
  assign RAM_From[153] = \<const0> ;
  assign RAM_From[152] = \<const0> ;
  assign RAM_From[151] = \<const0> ;
  assign RAM_From[150] = \<const0> ;
  assign RAM_From[149] = \<const0> ;
  assign RAM_From[148] = \<const0> ;
  assign RAM_From[147] = \<const0> ;
  assign RAM_From[146] = \<const0> ;
  assign RAM_From[145] = \<const0> ;
  assign RAM_From[144] = \<const0> ;
  assign RAM_From[143] = \<const0> ;
  assign RAM_From[142] = \<const0> ;
  assign RAM_From[141] = \<const0> ;
  assign RAM_From[140] = \<const0> ;
  assign RAM_From[139] = \<const0> ;
  assign RAM_From[138] = \<const0> ;
  assign RAM_From[137] = \<const0> ;
  assign RAM_From[136] = \<const0> ;
  assign RAM_From[135] = \<const0> ;
  assign RAM_From[134] = \<const0> ;
  assign RAM_From[133] = \<const0> ;
  assign RAM_From[132] = \<const0> ;
  assign RAM_From[131] = \<const0> ;
  assign RAM_From[130] = \<const0> ;
  assign RAM_From[129] = \<const0> ;
  assign RAM_From[128] = \<const0> ;
  assign RAM_From[127] = \<const0> ;
  assign RAM_From[126] = \<const0> ;
  assign RAM_From[125] = \<const0> ;
  assign RAM_From[124] = \<const0> ;
  assign RAM_From[123] = \<const0> ;
  assign RAM_From[122] = \<const0> ;
  assign RAM_From[121] = \<const0> ;
  assign RAM_From[120] = \<const0> ;
  assign RAM_From[119] = \<const0> ;
  assign RAM_From[118] = \<const0> ;
  assign RAM_From[117] = \<const0> ;
  assign RAM_From[116] = \<const0> ;
  assign RAM_From[115] = \<const0> ;
  assign RAM_From[114] = \<const0> ;
  assign RAM_From[113] = \<const0> ;
  assign RAM_From[112] = \<const0> ;
  assign RAM_From[111] = \<const0> ;
  assign RAM_From[110] = \<const0> ;
  assign RAM_From[109] = \<const0> ;
  assign RAM_From[108] = \<const0> ;
  assign RAM_From[107] = \<const0> ;
  assign RAM_From[106] = \<const0> ;
  assign RAM_From[105] = \<const0> ;
  assign RAM_From[104] = \<const0> ;
  assign RAM_From[103] = \<const0> ;
  assign RAM_From[102] = \<const0> ;
  assign RAM_From[101] = \<const0> ;
  assign RAM_From[100] = \<const0> ;
  assign RAM_From[99] = \<const0> ;
  assign RAM_From[98] = \<const0> ;
  assign RAM_From[97] = \<const0> ;
  assign RAM_From[96] = \<const0> ;
  assign RAM_From[95] = \<const0> ;
  assign RAM_From[94] = \<const0> ;
  assign RAM_From[93] = \<const0> ;
  assign RAM_From[92] = \<const0> ;
  assign RAM_From[91] = \<const0> ;
  assign RAM_From[90] = \<const0> ;
  assign RAM_From[89] = \<const0> ;
  assign RAM_From[88] = \<const0> ;
  assign RAM_From[87] = \<const0> ;
  assign RAM_From[86] = \<const0> ;
  assign RAM_From[85] = \<const0> ;
  assign RAM_From[84] = \<const0> ;
  assign RAM_From[83] = \<const0> ;
  assign RAM_From[82] = \<const0> ;
  assign RAM_From[81] = \<const0> ;
  assign RAM_From[80] = \<const0> ;
  assign RAM_From[79] = \<const0> ;
  assign RAM_From[78] = \<const0> ;
  assign RAM_From[77] = \<const0> ;
  assign RAM_From[76] = \<const0> ;
  assign RAM_From[75] = \<const0> ;
  assign RAM_From[74] = \<const0> ;
  assign RAM_From[73] = \<const0> ;
  assign RAM_From[72] = \<const0> ;
  assign RAM_From[71] = \<const0> ;
  assign RAM_From[70] = \<const0> ;
  assign RAM_From[69] = \<const0> ;
  assign RAM_From[68] = \<const0> ;
  assign RAM_From[67] = \<const0> ;
  assign RAM_From[66] = \<const0> ;
  assign RAM_From[65] = \<const0> ;
  assign RAM_From[64] = \<const0> ;
  assign RAM_From[63] = \<const0> ;
  assign RAM_From[62] = \<const0> ;
  assign RAM_From[61] = \<const0> ;
  assign RAM_From[60] = \<const0> ;
  assign RAM_From[59] = \<const0> ;
  assign RAM_From[58] = \<const0> ;
  assign RAM_From[57] = \<const0> ;
  assign RAM_From[56] = \<const0> ;
  assign RAM_From[55] = \<const0> ;
  assign RAM_From[54] = \<const0> ;
  assign RAM_From[53] = \<const0> ;
  assign RAM_From[52] = \<const0> ;
  assign RAM_From[51] = \<const0> ;
  assign RAM_From[50] = \<const0> ;
  assign RAM_From[49] = \<const0> ;
  assign RAM_From[48] = \<const0> ;
  assign RAM_From[47] = \<const0> ;
  assign RAM_From[46] = \<const0> ;
  assign RAM_From[45] = \<const0> ;
  assign RAM_From[44] = \<const0> ;
  assign RAM_From[43] = \<const0> ;
  assign RAM_From[42] = \<const0> ;
  assign RAM_From[41] = \<const0> ;
  assign RAM_From[40] = \<const0> ;
  assign RAM_From[39] = \<const0> ;
  assign RAM_From[38] = \<const0> ;
  assign RAM_From[37] = \<const0> ;
  assign RAM_From[36] = \<const0> ;
  assign RAM_From[35] = \<const0> ;
  assign RAM_From[34] = \<const0> ;
  assign RAM_From[33] = \<const0> ;
  assign RAM_From[32] = \<const0> ;
  assign RAM_From[31] = \<const0> ;
  assign RAM_From[30] = \<const0> ;
  assign RAM_From[29] = \<const0> ;
  assign RAM_From[28] = \<const0> ;
  assign RAM_From[27] = \<const0> ;
  assign RAM_From[26] = \<const0> ;
  assign RAM_From[25] = \<const0> ;
  assign RAM_From[24] = \<const0> ;
  assign RAM_From[23] = \<const0> ;
  assign RAM_From[22] = \<const0> ;
  assign RAM_From[21] = \<const0> ;
  assign RAM_From[20] = \<const0> ;
  assign RAM_From[19] = \<const0> ;
  assign RAM_From[18] = \<const0> ;
  assign RAM_From[17] = \<const0> ;
  assign RAM_From[16] = \<const0> ;
  assign RAM_From[15] = \<const0> ;
  assign RAM_From[14] = \<const0> ;
  assign RAM_From[13] = \<const0> ;
  assign RAM_From[12] = \<const0> ;
  assign RAM_From[11] = \<const0> ;
  assign RAM_From[10] = \<const0> ;
  assign RAM_From[9] = \<const0> ;
  assign RAM_From[8] = \<const0> ;
  assign RAM_From[7] = \<const0> ;
  assign RAM_From[6] = \<const0> ;
  assign RAM_From[5] = \<const0> ;
  assign RAM_From[4] = \<const0> ;
  assign RAM_From[3] = \<const0> ;
  assign RAM_From[2] = \<const0> ;
  assign RAM_From[1] = \<const0> ;
  assign RAM_From[0] = \<const0> ;
  assign S0_AXIS_TREADY = \<const0> ;
  assign S10_AXIS_TREADY = \<const0> ;
  assign S11_AXIS_TREADY = \<const0> ;
  assign S12_AXIS_TREADY = \<const0> ;
  assign S13_AXIS_TREADY = \<const0> ;
  assign S14_AXIS_TREADY = \<const0> ;
  assign S15_AXIS_TREADY = \<const0> ;
  assign S1_AXIS_TREADY = \<const0> ;
  assign S2_AXIS_TREADY = \<const0> ;
  assign S3_AXIS_TREADY = \<const0> ;
  assign S4_AXIS_TREADY = \<const0> ;
  assign S5_AXIS_TREADY = \<const0> ;
  assign S6_AXIS_TREADY = \<const0> ;
  assign S7_AXIS_TREADY = \<const0> ;
  assign S8_AXIS_TREADY = \<const0> ;
  assign S9_AXIS_TREADY = \<const0> ;
  assign Trace_DCache_Hit = \<const0> ;
  assign Trace_DCache_Rdy = \<const0> ;
  assign Trace_DCache_Read = \<const0> ;
  assign Trace_DCache_Req = \<const0> ;
  assign Trace_Exception_Kind[0] = \<const0> ;
  assign Trace_Exception_Kind[1] = \^Trace_Exception_Kind [1];
  assign Trace_Exception_Kind[2] = \<const0> ;
  assign Trace_Exception_Kind[3:4] = \^Trace_Exception_Kind [3:4];
  assign Trace_ICache_Hit = \<const0> ;
  assign Trace_ICache_Rdy = \<const0> ;
  assign Trace_ICache_Req = \<const0> ;
  assign Trace_Jump_Hit = \<const0> ;
  assign Trace_MSR_Reg[0] = \<const0> ;
  assign Trace_MSR_Reg[1] = \<const0> ;
  assign Trace_MSR_Reg[2] = \<const0> ;
  assign Trace_MSR_Reg[3] = \<const0> ;
  assign Trace_MSR_Reg[4] = \<const0> ;
  assign Trace_MSR_Reg[5] = \<const0> ;
  assign Trace_MSR_Reg[6] = \<const0> ;
  assign Trace_MSR_Reg[7] = \<const0> ;
  assign Trace_MSR_Reg[8] = \^Trace_MSR_Reg [8];
  assign Trace_MSR_Reg[9] = \<const0> ;
  assign Trace_MSR_Reg[10] = \<const0> ;
  assign Trace_MSR_Reg[11:13] = \^Trace_MSR_Reg [11:13];
  assign Trace_MSR_Reg[14] = \<const0> ;
  assign Trace_PID_Reg[0] = \<const0> ;
  assign Trace_PID_Reg[1] = \<const0> ;
  assign Trace_PID_Reg[2] = \<const0> ;
  assign Trace_PID_Reg[3] = \<const0> ;
  assign Trace_PID_Reg[4] = \<const0> ;
  assign Trace_PID_Reg[5] = \<const0> ;
  assign Trace_PID_Reg[6] = \<const0> ;
  assign Trace_PID_Reg[7] = \<const0> ;
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    Dbg_TDO_INST_0_i_5
       (.I0(Dbg_Reg_En[5]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[6]),
        .I3(Dbg_Reg_En[7]),
        .I4(MicroBlaze_Core_I_n_413),
        .O(Data_Read_Reg_En));
  LUT5 #(
    .INIT(32'h00001000)) 
    Dbg_TDO_INST_0_i_6
       (.I0(Dbg_Reg_En[4]),
        .I1(Dbg_Reg_En[5]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[6]),
        .I4(MicroBlaze_Core_I_n_413),
        .O(\Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Status_Reg_En ));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    Dbg_TDO_INST_0_i_8
       (.I0(Dbg_Reg_En[5]),
        .I1(Dbg_Reg_En[4]),
        .I2(Dbg_Reg_En[7]),
        .I3(Dbg_Reg_En[6]),
        .I4(MicroBlaze_Core_I_n_413),
        .O(Config_Reg_En));
  GND GND
       (.G(\<const0> ));
  FDRE \LOCKSTEP_Out_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(MB_Halted),
        .Q(\^LOCKSTEP_Out [0]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[6]),
        .Q(\^LOCKSTEP_Out [10]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[7]),
        .Q(\^LOCKSTEP_Out [11]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[8]),
        .Q(\^LOCKSTEP_Out [12]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[132] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[0]),
        .Q(\^LOCKSTEP_Out [132]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[133] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[1]),
        .Q(\^LOCKSTEP_Out [133]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[134] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[2]),
        .Q(\^LOCKSTEP_Out [134]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[135] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[3]),
        .Q(\^LOCKSTEP_Out [135]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[136] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[4]),
        .Q(\^LOCKSTEP_Out [136]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[137] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[5]),
        .Q(\^LOCKSTEP_Out [137]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[138] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[6]),
        .Q(\^LOCKSTEP_Out [138]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[139] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[7]),
        .Q(\^LOCKSTEP_Out [139]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[9]),
        .Q(\^LOCKSTEP_Out [13]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[140] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[8]),
        .Q(\^LOCKSTEP_Out [140]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[141] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[9]),
        .Q(\^LOCKSTEP_Out [141]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[142] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[10]),
        .Q(\^LOCKSTEP_Out [142]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[143] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[11]),
        .Q(\^LOCKSTEP_Out [143]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[144] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[12]),
        .Q(\^LOCKSTEP_Out [144]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[145] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[13]),
        .Q(\^LOCKSTEP_Out [145]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[146] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[14]),
        .Q(\^LOCKSTEP_Out [146]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[147] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[15]),
        .Q(\^LOCKSTEP_Out [147]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[148] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[16]),
        .Q(\^LOCKSTEP_Out [148]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[149] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[17]),
        .Q(\^LOCKSTEP_Out [149]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[10]),
        .Q(\^LOCKSTEP_Out [14]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[150] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[18]),
        .Q(\^LOCKSTEP_Out [150]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[151] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[19]),
        .Q(\^LOCKSTEP_Out [151]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[152] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[20]),
        .Q(\^LOCKSTEP_Out [152]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[153] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[21]),
        .Q(\^LOCKSTEP_Out [153]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[154] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[22]),
        .Q(\^LOCKSTEP_Out [154]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[155] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[23]),
        .Q(\^LOCKSTEP_Out [155]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[156] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[24]),
        .Q(\^LOCKSTEP_Out [156]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[157] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[25]),
        .Q(\^LOCKSTEP_Out [157]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[158] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[26]),
        .Q(\^LOCKSTEP_Out [158]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[159] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[27]),
        .Q(\^LOCKSTEP_Out [159]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[11]),
        .Q(\^LOCKSTEP_Out [15]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[160] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[28]),
        .Q(\^LOCKSTEP_Out [160]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[161] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[29]),
        .Q(\^LOCKSTEP_Out [161]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[162] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[30]),
        .Q(\^LOCKSTEP_Out [162]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[163] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Write[31]),
        .Q(\^LOCKSTEP_Out [163]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[12]),
        .Q(\^LOCKSTEP_Out [16]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[13]),
        .Q(\^LOCKSTEP_Out [17]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[14]),
        .Q(\^LOCKSTEP_Out [18]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[196] 
       (.C(Clk),
        .CE(1'b1),
        .D(D_AS),
        .Q(\^LOCKSTEP_Out [196]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[197] 
       (.C(Clk),
        .CE(1'b1),
        .D(Read_Strobe),
        .Q(\^LOCKSTEP_Out [197]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[198] 
       (.C(Clk),
        .CE(1'b1),
        .D(Write_Strobe),
        .Q(\^LOCKSTEP_Out [198]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[199] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[0]),
        .Q(\^LOCKSTEP_Out [199]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[15]),
        .Q(\^LOCKSTEP_Out [19]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[200] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[1]),
        .Q(\^LOCKSTEP_Out [200]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[201] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[2]),
        .Q(\^LOCKSTEP_Out [201]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[202] 
       (.C(Clk),
        .CE(1'b1),
        .D(Byte_Enable[3]),
        .Q(\^LOCKSTEP_Out [202]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[16]),
        .Q(\^LOCKSTEP_Out [20]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[17]),
        .Q(\^LOCKSTEP_Out [21]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[18]),
        .Q(\^LOCKSTEP_Out [22]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[19]),
        .Q(\^LOCKSTEP_Out [23]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[20]),
        .Q(\^LOCKSTEP_Out [24]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[21]),
        .Q(\^LOCKSTEP_Out [25]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[22]),
        .Q(\^LOCKSTEP_Out [26]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[23]),
        .Q(\^LOCKSTEP_Out [27]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2881] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[0]),
        .Q(\^LOCKSTEP_Out [2881]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2882] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[1]),
        .Q(\^LOCKSTEP_Out [2882]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2883] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[2]),
        .Q(\^LOCKSTEP_Out [2883]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2884] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[3]),
        .Q(\^LOCKSTEP_Out [2884]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2885] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[4]),
        .Q(\^LOCKSTEP_Out [2885]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2886] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[5]),
        .Q(\^LOCKSTEP_Out [2886]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2887] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[6]),
        .Q(\^LOCKSTEP_Out [2887]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2888] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[7]),
        .Q(\^LOCKSTEP_Out [2888]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2889] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[8]),
        .Q(\^LOCKSTEP_Out [2889]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2890] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[9]),
        .Q(\^LOCKSTEP_Out [2890]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2891] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[10]),
        .Q(\^LOCKSTEP_Out [2891]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2892] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[11]),
        .Q(\^LOCKSTEP_Out [2892]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2893] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[12]),
        .Q(\^LOCKSTEP_Out [2893]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2894] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[13]),
        .Q(\^LOCKSTEP_Out [2894]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2895] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[14]),
        .Q(\^LOCKSTEP_Out [2895]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2896] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[15]),
        .Q(\^LOCKSTEP_Out [2896]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2897] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[16]),
        .Q(\^LOCKSTEP_Out [2897]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2898] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[17]),
        .Q(\^LOCKSTEP_Out [2898]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2899] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[18]),
        .Q(\^LOCKSTEP_Out [2899]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[24]),
        .Q(\^LOCKSTEP_Out [28]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2900] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[19]),
        .Q(\^LOCKSTEP_Out [2900]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2901] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[20]),
        .Q(\^LOCKSTEP_Out [2901]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2902] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[21]),
        .Q(\^LOCKSTEP_Out [2902]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2903] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[22]),
        .Q(\^LOCKSTEP_Out [2903]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2904] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[23]),
        .Q(\^LOCKSTEP_Out [2904]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2905] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[24]),
        .Q(\^LOCKSTEP_Out [2905]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2906] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[25]),
        .Q(\^LOCKSTEP_Out [2906]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2907] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[26]),
        .Q(\^LOCKSTEP_Out [2907]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2908] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[27]),
        .Q(\^LOCKSTEP_Out [2908]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2909] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[28]),
        .Q(\^LOCKSTEP_Out [2909]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2910] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[29]),
        .Q(\^LOCKSTEP_Out [2910]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2911] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[30]),
        .Q(\^LOCKSTEP_Out [2911]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2912] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Instruction[31]),
        .Q(\^LOCKSTEP_Out [2912]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2913] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Valid_Instr),
        .Q(\^LOCKSTEP_Out [2913]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2914] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[0]),
        .Q(\^LOCKSTEP_Out [2914]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2915] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[1]),
        .Q(\^LOCKSTEP_Out [2915]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2916] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[2]),
        .Q(\^LOCKSTEP_Out [2916]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2917] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[3]),
        .Q(\^LOCKSTEP_Out [2917]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2918] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[4]),
        .Q(\^LOCKSTEP_Out [2918]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2919] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[5]),
        .Q(\^LOCKSTEP_Out [2919]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2920] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[6]),
        .Q(\^LOCKSTEP_Out [2920]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2921] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[7]),
        .Q(\^LOCKSTEP_Out [2921]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2922] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[8]),
        .Q(\^LOCKSTEP_Out [2922]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2923] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[9]),
        .Q(\^LOCKSTEP_Out [2923]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2924] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[10]),
        .Q(\^LOCKSTEP_Out [2924]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2925] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[11]),
        .Q(\^LOCKSTEP_Out [2925]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2926] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[12]),
        .Q(\^LOCKSTEP_Out [2926]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2927] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[13]),
        .Q(\^LOCKSTEP_Out [2927]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2928] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[14]),
        .Q(\^LOCKSTEP_Out [2928]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2929] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[15]),
        .Q(\^LOCKSTEP_Out [2929]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2930] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[16]),
        .Q(\^LOCKSTEP_Out [2930]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2931] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[17]),
        .Q(\^LOCKSTEP_Out [2931]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2932] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[18]),
        .Q(\^LOCKSTEP_Out [2932]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2933] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[19]),
        .Q(\^LOCKSTEP_Out [2933]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2934] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[20]),
        .Q(\^LOCKSTEP_Out [2934]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2935] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[21]),
        .Q(\^LOCKSTEP_Out [2935]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2936] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[22]),
        .Q(\^LOCKSTEP_Out [2936]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2937] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[23]),
        .Q(\^LOCKSTEP_Out [2937]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2938] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[24]),
        .Q(\^LOCKSTEP_Out [2938]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2939] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[25]),
        .Q(\^LOCKSTEP_Out [2939]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2940] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[26]),
        .Q(\^LOCKSTEP_Out [2940]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2941] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[27]),
        .Q(\^LOCKSTEP_Out [2941]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2942] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[28]),
        .Q(\^LOCKSTEP_Out [2942]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2943] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[29]),
        .Q(\^LOCKSTEP_Out [2943]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2944] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[30]),
        .Q(\^LOCKSTEP_Out [2944]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2945] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_PC[31]),
        .Q(\^LOCKSTEP_Out [2945]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2978] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Write),
        .Q(\^LOCKSTEP_Out [2978]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2979] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[0]),
        .Q(\^LOCKSTEP_Out [2979]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2980] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[1]),
        .Q(\^LOCKSTEP_Out [2980]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2981] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[2]),
        .Q(\^LOCKSTEP_Out [2981]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2982] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[3]),
        .Q(\^LOCKSTEP_Out [2982]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2983] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Reg_Addr[4]),
        .Q(\^LOCKSTEP_Out [2983]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2992] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [8]),
        .Q(\^LOCKSTEP_Out [2992]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2995] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [11]),
        .Q(\^LOCKSTEP_Out [2995]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2996] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [12]),
        .Q(\^LOCKSTEP_Out [2996]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2997] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_MSR_Reg [13]),
        .Q(\^LOCKSTEP_Out [2997]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[25]),
        .Q(\^LOCKSTEP_Out [29]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(IFetch),
        .Q(\^LOCKSTEP_Out [2]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3007] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[0]),
        .Q(\^LOCKSTEP_Out [3007]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3008] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[1]),
        .Q(\^LOCKSTEP_Out [3008]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3009] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[2]),
        .Q(\^LOCKSTEP_Out [3009]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3010] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[3]),
        .Q(\^LOCKSTEP_Out [3010]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3011] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[4]),
        .Q(\^LOCKSTEP_Out [3011]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3012] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[5]),
        .Q(\^LOCKSTEP_Out [3012]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3013] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[6]),
        .Q(\^LOCKSTEP_Out [3013]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3014] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[7]),
        .Q(\^LOCKSTEP_Out [3014]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3015] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[8]),
        .Q(\^LOCKSTEP_Out [3015]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3016] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[9]),
        .Q(\^LOCKSTEP_Out [3016]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3017] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[10]),
        .Q(\^LOCKSTEP_Out [3017]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3018] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[11]),
        .Q(\^LOCKSTEP_Out [3018]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3019] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[12]),
        .Q(\^LOCKSTEP_Out [3019]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3020] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[13]),
        .Q(\^LOCKSTEP_Out [3020]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3021] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[14]),
        .Q(\^LOCKSTEP_Out [3021]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3022] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[15]),
        .Q(\^LOCKSTEP_Out [3022]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3023] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[16]),
        .Q(\^LOCKSTEP_Out [3023]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3024] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[17]),
        .Q(\^LOCKSTEP_Out [3024]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3025] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[18]),
        .Q(\^LOCKSTEP_Out [3025]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3026] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[19]),
        .Q(\^LOCKSTEP_Out [3026]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3027] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[20]),
        .Q(\^LOCKSTEP_Out [3027]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3028] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[21]),
        .Q(\^LOCKSTEP_Out [3028]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3029] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[22]),
        .Q(\^LOCKSTEP_Out [3029]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3030] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[23]),
        .Q(\^LOCKSTEP_Out [3030]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3031] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[24]),
        .Q(\^LOCKSTEP_Out [3031]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3032] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[25]),
        .Q(\^LOCKSTEP_Out [3032]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3033] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[26]),
        .Q(\^LOCKSTEP_Out [3033]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3034] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[27]),
        .Q(\^LOCKSTEP_Out [3034]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3035] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[28]),
        .Q(\^LOCKSTEP_Out [3035]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3036] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[29]),
        .Q(\^LOCKSTEP_Out [3036]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3037] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[30]),
        .Q(\^LOCKSTEP_Out [3037]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3038] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_New_Reg_Value[31]),
        .Q(\^LOCKSTEP_Out [3038]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3071] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Exception_Taken),
        .Q(\^LOCKSTEP_Out [3071]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3073] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_Exception_Kind [1]),
        .Q(\^LOCKSTEP_Out [3073]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3075] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_Exception_Kind [3]),
        .Q(\^LOCKSTEP_Out [3075]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3076] 
       (.C(Clk),
        .CE(1'b1),
        .D(\^Trace_Exception_Kind [4]),
        .Q(\^LOCKSTEP_Out [3076]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3077] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Jump_Taken),
        .Q(\^LOCKSTEP_Out [3077]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3078] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Delay_Slot),
        .Q(\^LOCKSTEP_Out [3078]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3079] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[0]),
        .Q(\^LOCKSTEP_Out [3079]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3080] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[1]),
        .Q(\^LOCKSTEP_Out [3080]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3081] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[2]),
        .Q(\^LOCKSTEP_Out [3081]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3082] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[3]),
        .Q(\^LOCKSTEP_Out [3082]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3083] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[4]),
        .Q(\^LOCKSTEP_Out [3083]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3084] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[5]),
        .Q(\^LOCKSTEP_Out [3084]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3085] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[6]),
        .Q(\^LOCKSTEP_Out [3085]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3086] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[7]),
        .Q(\^LOCKSTEP_Out [3086]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3087] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[8]),
        .Q(\^LOCKSTEP_Out [3087]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3088] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[9]),
        .Q(\^LOCKSTEP_Out [3088]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3089] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[10]),
        .Q(\^LOCKSTEP_Out [3089]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3090] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[11]),
        .Q(\^LOCKSTEP_Out [3090]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3091] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[12]),
        .Q(\^LOCKSTEP_Out [3091]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3092] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[13]),
        .Q(\^LOCKSTEP_Out [3092]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3093] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[14]),
        .Q(\^LOCKSTEP_Out [3093]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3094] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[15]),
        .Q(\^LOCKSTEP_Out [3094]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3095] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[16]),
        .Q(\^LOCKSTEP_Out [3095]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3096] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[17]),
        .Q(\^LOCKSTEP_Out [3096]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3097] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[18]),
        .Q(\^LOCKSTEP_Out [3097]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3098] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[19]),
        .Q(\^LOCKSTEP_Out [3098]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3099] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[20]),
        .Q(\^LOCKSTEP_Out [3099]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[26]),
        .Q(\^LOCKSTEP_Out [30]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3100] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[21]),
        .Q(\^LOCKSTEP_Out [3100]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3101] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[22]),
        .Q(\^LOCKSTEP_Out [3101]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3102] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[23]),
        .Q(\^LOCKSTEP_Out [3102]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3103] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[24]),
        .Q(\^LOCKSTEP_Out [3103]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3104] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[25]),
        .Q(\^LOCKSTEP_Out [3104]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3105] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[26]),
        .Q(\^LOCKSTEP_Out [3105]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3106] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[27]),
        .Q(\^LOCKSTEP_Out [3106]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3107] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[28]),
        .Q(\^LOCKSTEP_Out [3107]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3108] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[29]),
        .Q(\^LOCKSTEP_Out [3108]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3109] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[30]),
        .Q(\^LOCKSTEP_Out [3109]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3110] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Address[31]),
        .Q(\^LOCKSTEP_Out [3110]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3143] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[0]),
        .Q(\^LOCKSTEP_Out [3143]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3144] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[1]),
        .Q(\^LOCKSTEP_Out [3144]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3145] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[2]),
        .Q(\^LOCKSTEP_Out [3145]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3146] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[3]),
        .Q(\^LOCKSTEP_Out [3146]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3147] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[4]),
        .Q(\^LOCKSTEP_Out [3147]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3148] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[5]),
        .Q(\^LOCKSTEP_Out [3148]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3149] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[6]),
        .Q(\^LOCKSTEP_Out [3149]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3150] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[7]),
        .Q(\^LOCKSTEP_Out [3150]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3151] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[8]),
        .Q(\^LOCKSTEP_Out [3151]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3152] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[9]),
        .Q(\^LOCKSTEP_Out [3152]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3153] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[10]),
        .Q(\^LOCKSTEP_Out [3153]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3154] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[11]),
        .Q(\^LOCKSTEP_Out [3154]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3155] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[12]),
        .Q(\^LOCKSTEP_Out [3155]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3156] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[13]),
        .Q(\^LOCKSTEP_Out [3156]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3157] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[14]),
        .Q(\^LOCKSTEP_Out [3157]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3158] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[15]),
        .Q(\^LOCKSTEP_Out [3158]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3159] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[16]),
        .Q(\^LOCKSTEP_Out [3159]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3160] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[17]),
        .Q(\^LOCKSTEP_Out [3160]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3161] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[18]),
        .Q(\^LOCKSTEP_Out [3161]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3162] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[19]),
        .Q(\^LOCKSTEP_Out [3162]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3163] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[20]),
        .Q(\^LOCKSTEP_Out [3163]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3164] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[21]),
        .Q(\^LOCKSTEP_Out [3164]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3165] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[22]),
        .Q(\^LOCKSTEP_Out [3165]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3166] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[23]),
        .Q(\^LOCKSTEP_Out [3166]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3167] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[24]),
        .Q(\^LOCKSTEP_Out [3167]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3168] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[25]),
        .Q(\^LOCKSTEP_Out [3168]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3169] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[26]),
        .Q(\^LOCKSTEP_Out [3169]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3170] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[27]),
        .Q(\^LOCKSTEP_Out [3170]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3171] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[28]),
        .Q(\^LOCKSTEP_Out [3171]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3172] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[29]),
        .Q(\^LOCKSTEP_Out [3172]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3173] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[30]),
        .Q(\^LOCKSTEP_Out [3173]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3174] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write_Value[31]),
        .Q(\^LOCKSTEP_Out [3174]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[27]),
        .Q(\^LOCKSTEP_Out [31]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3207] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[0]),
        .Q(\^LOCKSTEP_Out [3207]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3208] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[1]),
        .Q(\^LOCKSTEP_Out [3208]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3209] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[2]),
        .Q(\^LOCKSTEP_Out [3209]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3210] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Byte_Enable[3]),
        .Q(\^LOCKSTEP_Out [3210]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3215] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Access),
        .Q(\^LOCKSTEP_Out [3215]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3216] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Read),
        .Q(\^LOCKSTEP_Out [3216]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3217] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_Data_Write),
        .Q(\^LOCKSTEP_Out [3217]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3225] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_OF_PipeRun),
        .Q(\^LOCKSTEP_Out [3225]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3226] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_EX_PipeRun),
        .Q(\^LOCKSTEP_Out [3226]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3227] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_MEM_PipeRun),
        .Q(\^LOCKSTEP_Out [3227]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3228] 
       (.C(Clk),
        .CE(1'b1),
        .D(Trace_MB_Halted),
        .Q(\^LOCKSTEP_Out [3228]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[32] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[28]),
        .Q(\^LOCKSTEP_Out [32]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[33] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[29]),
        .Q(\^LOCKSTEP_Out [33]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[34] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[30]),
        .Q(\^LOCKSTEP_Out [34]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[35] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[31]),
        .Q(\^LOCKSTEP_Out [35]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(I_AS),
        .Q(\^LOCKSTEP_Out [3]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[466] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[31]),
        .Q(\^LOCKSTEP_Out [632]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[467] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[30]),
        .Q(\^LOCKSTEP_Out [633]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[468] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[29]),
        .Q(\^LOCKSTEP_Out [634]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[469] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[28]),
        .Q(\^LOCKSTEP_Out [635]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[470] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[27]),
        .Q(\^LOCKSTEP_Out [636]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[471] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[26]),
        .Q(\^LOCKSTEP_Out [637]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[472] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[25]),
        .Q(\^LOCKSTEP_Out [638]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[473] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[24]),
        .Q(\^LOCKSTEP_Out [639]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[474] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[23]),
        .Q(\^LOCKSTEP_Out [640]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[475] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[22]),
        .Q(\^LOCKSTEP_Out [641]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[476] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[21]),
        .Q(\^LOCKSTEP_Out [642]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[477] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[20]),
        .Q(\^LOCKSTEP_Out [643]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[478] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[19]),
        .Q(\^LOCKSTEP_Out [644]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[479] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[18]),
        .Q(\^LOCKSTEP_Out [645]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[480] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[17]),
        .Q(\^LOCKSTEP_Out [646]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[481] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[16]),
        .Q(\^LOCKSTEP_Out [647]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[482] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[15]),
        .Q(\^LOCKSTEP_Out [648]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[483] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[14]),
        .Q(\^LOCKSTEP_Out [649]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[484] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[13]),
        .Q(\^LOCKSTEP_Out [650]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[485] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[12]),
        .Q(\^LOCKSTEP_Out [651]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[486] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[11]),
        .Q(\^LOCKSTEP_Out [652]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[487] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[10]),
        .Q(\^LOCKSTEP_Out [653]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[488] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[9]),
        .Q(\^LOCKSTEP_Out [654]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[489] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[8]),
        .Q(\^LOCKSTEP_Out [655]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[490] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[7]),
        .Q(\^LOCKSTEP_Out [656]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[491] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[6]),
        .Q(\^LOCKSTEP_Out [657]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[492] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[5]),
        .Q(\^LOCKSTEP_Out [658]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[493] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[4]),
        .Q(\^LOCKSTEP_Out [659]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[494] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[3]),
        .Q(\^LOCKSTEP_Out [660]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[495] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[2]),
        .Q(\^LOCKSTEP_Out [661]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[496] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[1]),
        .Q(\^LOCKSTEP_Out [662]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[497] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWADDR[0]),
        .Q(\^LOCKSTEP_Out [663]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[0]),
        .Q(\^LOCKSTEP_Out [4]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[539] 
       (.C(Clk),
        .CE(1'b1),
        .D(1'b1),
        .Q(\^LOCKSTEP_Out [542]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[555] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_AWVALID),
        .Q(\^LOCKSTEP_Out [555]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[556] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[31]),
        .Q(\^LOCKSTEP_Out [556]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[557] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[30]),
        .Q(\^LOCKSTEP_Out [557]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[558] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[29]),
        .Q(\^LOCKSTEP_Out [558]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[559] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[28]),
        .Q(\^LOCKSTEP_Out [559]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[560] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[27]),
        .Q(\^LOCKSTEP_Out [560]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[561] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[26]),
        .Q(\^LOCKSTEP_Out [561]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[562] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[25]),
        .Q(\^LOCKSTEP_Out [562]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[563] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[24]),
        .Q(\^LOCKSTEP_Out [563]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[564] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[23]),
        .Q(\^LOCKSTEP_Out [564]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[565] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[22]),
        .Q(\^LOCKSTEP_Out [565]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[566] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[21]),
        .Q(\^LOCKSTEP_Out [566]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[567] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[20]),
        .Q(\^LOCKSTEP_Out [567]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[568] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[19]),
        .Q(\^LOCKSTEP_Out [568]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[569] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[18]),
        .Q(\^LOCKSTEP_Out [569]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[570] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[17]),
        .Q(\^LOCKSTEP_Out [570]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[571] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[16]),
        .Q(\^LOCKSTEP_Out [571]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[572] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[15]),
        .Q(\^LOCKSTEP_Out [572]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[573] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[14]),
        .Q(\^LOCKSTEP_Out [573]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[574] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[13]),
        .Q(\^LOCKSTEP_Out [574]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[575] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[12]),
        .Q(\^LOCKSTEP_Out [575]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[576] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[11]),
        .Q(\^LOCKSTEP_Out [576]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[577] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[10]),
        .Q(\^LOCKSTEP_Out [577]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[578] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[9]),
        .Q(\^LOCKSTEP_Out [578]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[579] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[8]),
        .Q(\^LOCKSTEP_Out [579]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[580] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[7]),
        .Q(\^LOCKSTEP_Out [580]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[581] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[6]),
        .Q(\^LOCKSTEP_Out [581]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[582] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[5]),
        .Q(\^LOCKSTEP_Out [582]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[583] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[4]),
        .Q(\^LOCKSTEP_Out [583]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[584] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[3]),
        .Q(\^LOCKSTEP_Out [584]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[585] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[2]),
        .Q(\^LOCKSTEP_Out [585]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[586] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[1]),
        .Q(\^LOCKSTEP_Out [586]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[587] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WDATA[0]),
        .Q(\^LOCKSTEP_Out [587]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[1]),
        .Q(\^LOCKSTEP_Out [5]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[620] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[3]),
        .Q(\^LOCKSTEP_Out [620]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[621] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[2]),
        .Q(\^LOCKSTEP_Out [621]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[622] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[1]),
        .Q(\^LOCKSTEP_Out [622]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[623] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WSTRB[0]),
        .Q(\^LOCKSTEP_Out [623]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[629] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_WVALID),
        .Q(\^LOCKSTEP_Out [629]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[630] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_BREADY),
        .Q(\^LOCKSTEP_Out [630]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[68] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[0]),
        .Q(\^LOCKSTEP_Out [68]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[69] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[1]),
        .Q(\^LOCKSTEP_Out [69]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[2]),
        .Q(\^LOCKSTEP_Out [6]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[70] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[2]),
        .Q(\^LOCKSTEP_Out [70]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[71] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[3]),
        .Q(\^LOCKSTEP_Out [71]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[721] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_ARVALID),
        .Q(\^LOCKSTEP_Out [721]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[722] 
       (.C(Clk),
        .CE(1'b1),
        .D(M_AXI_DP_RREADY),
        .Q(\^LOCKSTEP_Out [722]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[72] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[4]),
        .Q(\^LOCKSTEP_Out [72]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[73] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[5]),
        .Q(\^LOCKSTEP_Out [73]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[74] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[6]),
        .Q(\^LOCKSTEP_Out [74]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[75] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[7]),
        .Q(\^LOCKSTEP_Out [75]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[76] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[8]),
        .Q(\^LOCKSTEP_Out [76]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[77] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[9]),
        .Q(\^LOCKSTEP_Out [77]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[78] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[10]),
        .Q(\^LOCKSTEP_Out [78]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[79] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[11]),
        .Q(\^LOCKSTEP_Out [79]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[3]),
        .Q(\^LOCKSTEP_Out [7]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[80] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[12]),
        .Q(\^LOCKSTEP_Out [80]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[81] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[13]),
        .Q(\^LOCKSTEP_Out [81]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[82] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[14]),
        .Q(\^LOCKSTEP_Out [82]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[83] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[15]),
        .Q(\^LOCKSTEP_Out [83]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[84] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[16]),
        .Q(\^LOCKSTEP_Out [84]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[85] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[17]),
        .Q(\^LOCKSTEP_Out [85]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[86] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[18]),
        .Q(\^LOCKSTEP_Out [86]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[87] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[19]),
        .Q(\^LOCKSTEP_Out [87]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[88] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[20]),
        .Q(\^LOCKSTEP_Out [88]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[89] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[21]),
        .Q(\^LOCKSTEP_Out [89]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[4]),
        .Q(\^LOCKSTEP_Out [8]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[90] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[22]),
        .Q(\^LOCKSTEP_Out [90]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[91] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[23]),
        .Q(\^LOCKSTEP_Out [91]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[92] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[24]),
        .Q(\^LOCKSTEP_Out [92]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[93] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[25]),
        .Q(\^LOCKSTEP_Out [93]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[94] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[26]),
        .Q(\^LOCKSTEP_Out [94]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[95] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[27]),
        .Q(\^LOCKSTEP_Out [95]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[96] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[28]),
        .Q(\^LOCKSTEP_Out [96]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[97] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[29]),
        .Q(\^LOCKSTEP_Out [97]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[98] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[30]),
        .Q(\^LOCKSTEP_Out [98]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[99] 
       (.C(Clk),
        .CE(1'b1),
        .D(Data_Addr[31]),
        .Q(\^LOCKSTEP_Out [99]),
        .R(Reset));
  FDRE \LOCKSTEP_Out_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(Instr_Addr[5]),
        .Q(\^LOCKSTEP_Out [9]),
        .R(Reset));
  microblaze_microblaze_0_0_MicroBlaze_Core MicroBlaze_Core_I
       (.Clk(Clk),
        .Config_Reg_En(Config_Reg_En),
        .Config_Reset(Config_Reset),
        .D({MB_Halted,IFetch,I_AS,Instr_Addr[0],Instr_Addr[1],Instr_Addr[2],Instr_Addr[3],Instr_Addr[4],Instr_Addr[5],Instr_Addr[6],Instr_Addr[7],Instr_Addr[8],Instr_Addr[9],Instr_Addr[10],Instr_Addr[11],Instr_Addr[12],Instr_Addr[13],Instr_Addr[14],Instr_Addr[15],Instr_Addr[16],Instr_Addr[17],Instr_Addr[18],Instr_Addr[19],Instr_Addr[20],Instr_Addr[21],Instr_Addr[22],Instr_Addr[23],Instr_Addr[24],Instr_Addr[25],Instr_Addr[26],Instr_Addr[27],Instr_Addr[28],Instr_Addr[29],Instr_Addr[30],Instr_Addr[31],Data_Addr[0],Data_Addr[1],Data_Addr[2],Data_Addr[3],Data_Addr[4],Data_Addr[5],Data_Addr[6],Data_Addr[7],Data_Addr[8],Data_Addr[9],Data_Addr[10],Data_Addr[11],Data_Addr[12],Data_Addr[13],Data_Addr[14],Data_Addr[15],Data_Addr[16],Data_Addr[17],Data_Addr[18],Data_Addr[19],Data_Addr[20],Data_Addr[21],Data_Addr[22],Data_Addr[23],Data_Addr[24],Data_Addr[25],Data_Addr[26],Data_Addr[27],Data_Addr[28],Data_Addr[29],Data_Addr[30],Data_Addr[31],Data_Write[0],Data_Write[1],Data_Write[2],Data_Write[3],Data_Write[4],Data_Write[5],Data_Write[6],Data_Write[7],Data_Write[8],Data_Write[9],Data_Write[10],Data_Write[11],Data_Write[12],Data_Write[13],Data_Write[14],Data_Write[15],Data_Write[16],Data_Write[17],Data_Write[18],Data_Write[19],Data_Write[20],Data_Write[21],Data_Write[22],Data_Write[23],Data_Write[24],Data_Write[25],Data_Write[26],Data_Write[27],Data_Write[28],Data_Write[29],Data_Write[30],Data_Write[31],D_AS,Read_Strobe,Write_Strobe,Byte_Enable[0],Byte_Enable[1],Byte_Enable[2],Byte_Enable[3],M_AXI_DP_AWADDR,M_AXI_DP_AWVALID,M_AXI_DP_WDATA,M_AXI_DP_WSTRB,M_AXI_DP_WVALID,M_AXI_DP_BREADY,M_AXI_DP_ARVALID,M_AXI_DP_RREADY,Trace_Instruction[0],Trace_Instruction[1],Trace_Instruction[2],Trace_Instruction[3],Trace_Instruction[4],Trace_Instruction[5],Trace_Instruction[6],Trace_Instruction[7],Trace_Instruction[8],Trace_Instruction[9],Trace_Instruction[10],Trace_Instruction[11],Trace_Instruction[12],Trace_Instruction[13],Trace_Instruction[14],Trace_Instruction[15],Trace_Instruction[16],Trace_Instruction[17],Trace_Instruction[18],Trace_Instruction[19],Trace_Instruction[20],Trace_Instruction[21],Trace_Instruction[22],Trace_Instruction[23],Trace_Instruction[24],Trace_Instruction[25],Trace_Instruction[26],Trace_Instruction[27],Trace_Instruction[28],Trace_Instruction[29],Trace_Instruction[30],Trace_Instruction[31],Trace_Valid_Instr,Trace_PC[0],Trace_PC[1],Trace_PC[2],Trace_PC[3],Trace_PC[4],Trace_PC[5],Trace_PC[6],Trace_PC[7],Trace_PC[8],Trace_PC[9],Trace_PC[10],Trace_PC[11],Trace_PC[12],Trace_PC[13],Trace_PC[14],Trace_PC[15],Trace_PC[16],Trace_PC[17],Trace_PC[18],Trace_PC[19],Trace_PC[20],Trace_PC[21],Trace_PC[22],Trace_PC[23],Trace_PC[24],Trace_PC[25],Trace_PC[26],Trace_PC[27],Trace_PC[28],Trace_PC[29],Trace_PC[30],Trace_PC[31],Trace_Reg_Write,Trace_Reg_Addr[0],Trace_Reg_Addr[1],Trace_Reg_Addr[2],Trace_Reg_Addr[3],Trace_Reg_Addr[4],\^Trace_MSR_Reg [8],\^Trace_MSR_Reg [11],\^Trace_MSR_Reg [12],\^Trace_MSR_Reg [13],Trace_New_Reg_Value[0],Trace_New_Reg_Value[1],Trace_New_Reg_Value[2],Trace_New_Reg_Value[3],Trace_New_Reg_Value[4],Trace_New_Reg_Value[5],Trace_New_Reg_Value[6],Trace_New_Reg_Value[7],Trace_New_Reg_Value[8],Trace_New_Reg_Value[9],Trace_New_Reg_Value[10],Trace_New_Reg_Value[11],Trace_New_Reg_Value[12],Trace_New_Reg_Value[13],Trace_New_Reg_Value[14],Trace_New_Reg_Value[15],Trace_New_Reg_Value[16],Trace_New_Reg_Value[17],Trace_New_Reg_Value[18],Trace_New_Reg_Value[19],Trace_New_Reg_Value[20],Trace_New_Reg_Value[21],Trace_New_Reg_Value[22],Trace_New_Reg_Value[23],Trace_New_Reg_Value[24],Trace_New_Reg_Value[25],Trace_New_Reg_Value[26],Trace_New_Reg_Value[27],Trace_New_Reg_Value[28],Trace_New_Reg_Value[29],Trace_New_Reg_Value[30],Trace_New_Reg_Value[31],Trace_Exception_Taken,\^Trace_Exception_Kind [1],\^Trace_Exception_Kind [3],\^Trace_Exception_Kind [4],Trace_Jump_Taken,Trace_Delay_Slot,Trace_Data_Address[0],Trace_Data_Address[1],Trace_Data_Address[2],Trace_Data_Address[3],Trace_Data_Address[4],Trace_Data_Address[5],Trace_Data_Address[6],Trace_Data_Address[7],Trace_Data_Address[8],Trace_Data_Address[9],Trace_Data_Address[10],Trace_Data_Address[11],Trace_Data_Address[12],Trace_Data_Address[13],Trace_Data_Address[14],Trace_Data_Address[15],Trace_Data_Address[16],Trace_Data_Address[17],Trace_Data_Address[18],Trace_Data_Address[19],Trace_Data_Address[20],Trace_Data_Address[21],Trace_Data_Address[22],Trace_Data_Address[23],Trace_Data_Address[24],Trace_Data_Address[25],Trace_Data_Address[26],Trace_Data_Address[27],Trace_Data_Address[28],Trace_Data_Address[29],Trace_Data_Address[30],Trace_Data_Address[31],Trace_Data_Write_Value[0],Trace_Data_Write_Value[1],Trace_Data_Write_Value[2],Trace_Data_Write_Value[3],Trace_Data_Write_Value[4],Trace_Data_Write_Value[5],Trace_Data_Write_Value[6],Trace_Data_Write_Value[7],Trace_Data_Write_Value[8],Trace_Data_Write_Value[9],Trace_Data_Write_Value[10],Trace_Data_Write_Value[11],Trace_Data_Write_Value[12],Trace_Data_Write_Value[13],Trace_Data_Write_Value[14],Trace_Data_Write_Value[15],Trace_Data_Write_Value[16],Trace_Data_Write_Value[17],Trace_Data_Write_Value[18],Trace_Data_Write_Value[19],Trace_Data_Write_Value[20],Trace_Data_Write_Value[21],Trace_Data_Write_Value[22],Trace_Data_Write_Value[23],Trace_Data_Write_Value[24],Trace_Data_Write_Value[25],Trace_Data_Write_Value[26],Trace_Data_Write_Value[27],Trace_Data_Write_Value[28],Trace_Data_Write_Value[29],Trace_Data_Write_Value[30],Trace_Data_Write_Value[31],Trace_Data_Byte_Enable[0],Trace_Data_Byte_Enable[1],Trace_Data_Byte_Enable[2],Trace_Data_Byte_Enable[3],Trace_Data_Access,Trace_Data_Read,Trace_Data_Write,Trace_OF_PipeRun,Trace_EX_PipeRun,Trace_MEM_PipeRun,Trace_MB_Halted}),
        .DReady(DReady),
        .DWait(DWait),
        .Data_Read(Data_Read),
        .Data_Read_Reg_En(Data_Read_Reg_En),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Reg_En_2_sp_1(MicroBlaze_Core_I_n_413),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trig_Ack_In({Dbg_Trig_Ack_In[0],Dbg_Trig_Ack_In[1]}),
        .Dbg_Trig_Ack_Out({\^Dbg_Trig_Ack_Out [0],\^Dbg_Trig_Ack_Out [1]}),
        .Dbg_Trig_In({\^Dbg_Trig_In [0],\^Dbg_Trig_In [1]}),
        .Dbg_Trig_Out({Dbg_Trig_Out[0],Dbg_Trig_Out[1]}),
        .Dbg_Update(Dbg_Update),
        .Debug_Rst(Debug_Rst),
        .Hibernate(Hibernate),
        .IReady(IReady),
        .IWAIT(IWAIT),
        .Instr(Instr),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .Interrupt_Address(Interrupt_Address),
        .LOCKSTEP_Master_Out({\^LOCKSTEP_Master_Out [3],\^LOCKSTEP_Master_Out [5],\^LOCKSTEP_Master_Out [6],\^LOCKSTEP_Master_Out [7],\^LOCKSTEP_Master_Out [11],\^LOCKSTEP_Master_Out [12],\^LOCKSTEP_Master_Out [13],\^LOCKSTEP_Master_Out [15],\^LOCKSTEP_Master_Out [16],\^LOCKSTEP_Master_Out [17],\^LOCKSTEP_Master_Out [18],\^LOCKSTEP_Master_Out [19],\^LOCKSTEP_Master_Out [20],\^LOCKSTEP_Master_Out [21],\^LOCKSTEP_Master_Out [22],\^LOCKSTEP_Master_Out [23],\^LOCKSTEP_Master_Out [24],\^LOCKSTEP_Master_Out [25],\^LOCKSTEP_Master_Out [26],\^LOCKSTEP_Master_Out [27],\^LOCKSTEP_Master_Out [28],\^LOCKSTEP_Master_Out [29],\^LOCKSTEP_Master_Out [30],\^LOCKSTEP_Master_Out [31],\^LOCKSTEP_Master_Out [32],\^LOCKSTEP_Master_Out [33],\^LOCKSTEP_Master_Out [34],\^LOCKSTEP_Master_Out [35],\^LOCKSTEP_Master_Out [36],\^LOCKSTEP_Master_Out [37],\^LOCKSTEP_Master_Out [38],\^LOCKSTEP_Master_Out [39],\^LOCKSTEP_Master_Out [40],\^LOCKSTEP_Master_Out [41],\^LOCKSTEP_Master_Out [42],\^LOCKSTEP_Master_Out [43],\^LOCKSTEP_Master_Out [44],\^LOCKSTEP_Master_Out [45],\^LOCKSTEP_Master_Out [46]}),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .Mb_Reset(Mb_Reset),
        .Pause(Pause),
        .Pause_Ack(Pause_Ack),
        .Reset(Reset),
        .Reset_Mode(Reset_Mode),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\^LOCKSTEP_Master_Out [4]),
        .Sleep(Sleep),
        .Status_Reg_En(\Frequency.Core/Use_Debug_Logic.Master_Core.Debug_Perf/Status_Reg_En ),
        .Suspend(Suspend),
        .Wakeup(Wakeup));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "MicroBlaze_Core" *) 
module microblaze_microblaze_0_0_MicroBlaze_Core
   (D,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    LOCKSTEP_Master_Out,
    Sleep,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    Dbg_TDO,
    Dbg_Reg_En_2_sp_1,
    Interrupt_Ack,
    Pause_Ack,
    Suspend,
    Hibernate,
    Dbg_Clk,
    Reset,
    Mb_Reset,
    Debug_Rst,
    Clk,
    Dbg_Update,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Pause,
    Dbg_Stop,
    Dbg_Capture,
    Reset_Mode,
    M_AXI_DP_BVALID,
    M_AXI_DP_RVALID,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WREADY,
    M_AXI_DP_ARREADY,
    DWait,
    DReady,
    IReady,
    Scan_Reset,
    Scan_En,
    Config_Reset,
    Scan_Reset_Sel,
    Dbg_Reg_En,
    Data_Read_Reg_En,
    Status_Reg_En,
    Config_Reg_En,
    Dbg_Shift,
    IWAIT,
    Dbg_TDI,
    Wakeup,
    Data_Read,
    M_AXI_DP_RDATA,
    Instr,
    Interrupt,
    Interrupt_Address);
  output [366:0]D;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  output [38:0]LOCKSTEP_Master_Out;
  output Sleep;
  output [1:0]Dbg_Trig_In;
  output [1:0]Dbg_Trig_Ack_Out;
  output Dbg_TDO;
  output Dbg_Reg_En_2_sp_1;
  output [0:1]Interrupt_Ack;
  output Pause_Ack;
  output Suspend;
  output Hibernate;
  input Dbg_Clk;
  input Reset;
  input Mb_Reset;
  input Debug_Rst;
  input Clk;
  input Dbg_Update;
  input [1:0]Dbg_Trig_Ack_In;
  input [1:0]Dbg_Trig_Out;
  input Pause;
  input Dbg_Stop;
  input Dbg_Capture;
  input [0:1]Reset_Mode;
  input M_AXI_DP_BVALID;
  input M_AXI_DP_RVALID;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_ARREADY;
  input DWait;
  input DReady;
  input IReady;
  input Scan_Reset;
  input Scan_En;
  input Config_Reset;
  input Scan_Reset_Sel;
  input [0:7]Dbg_Reg_En;
  input Data_Read_Reg_En;
  input Status_Reg_En;
  input Config_Reg_En;
  input Dbg_Shift;
  input IWAIT;
  input Dbg_TDI;
  input [0:1]Wakeup;
  input [0:31]Data_Read;
  input [31:0]M_AXI_DP_RDATA;
  input [0:31]Instr;
  input Interrupt;
  input [0:31]Interrupt_Address;

  wire Clk;
  wire Config_Reg_En;
  wire Config_Reset;
  wire [366:0]D;
  wire DReady;
  wire DWait;
  wire [0:31]Data_Read;
  wire Data_Read_Reg_En;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Reg_En_2_sn_1;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire Debug_Rst;
  wire Hibernate;
  wire IReady;
  wire IWAIT;
  wire [0:31]Instr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [38:0]LOCKSTEP_Master_Out;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire M_AXI_DP_WREADY;
  wire Mb_Reset;
  wire Pause;
  wire Pause_Ack;
  wire Reset;
  wire [0:1]Reset_Mode;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire Sleep;
  wire Status_Reg_En;
  wire Suspend;
  wire Synced;
  wire [0:1]Wakeup;
  wire reset_temp__0;
  wire sync_reset;
  wire [0:1]wakeup_i;

  assign Dbg_Reg_En_2_sp_1 = Dbg_Reg_En_2_sn_1;
  microblaze_microblaze_0_0_MicroBlaze_FF \Frequency.Core 
       (.Clk(Clk),
        .Config_Reg_En(Config_Reg_En),
        .Config_Reset(Config_Reset),
        .D(D),
        .DReady(DReady),
        .DWait(DWait),
        .Data_Read(Data_Read),
        .Data_Read_Reg_En(Data_Read_Reg_En),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Reg_En_2_sp_1(Dbg_Reg_En_2_sn_1),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Dbg_Update(Dbg_Update),
        .Hibernate(Hibernate),
        .IReady(IReady),
        .IWAIT(IWAIT),
        .Instr(Instr),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .Interrupt_Address(Interrupt_Address),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .Pause(Pause),
        .Pause_Ack(Pause_Ack),
        .Reset_Mode(Reset_Mode),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg (\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .Sleep(Sleep),
        .Status_Reg_En(Status_Reg_En),
        .Suspend(Suspend),
        .sync_reset(sync_reset),
        .wakeup_i(wakeup_i));
  microblaze_microblaze_0_0_mb_sync_bit Reset_DFF
       (.Clk(Clk),
        .out(Synced),
        .reset_temp(reset_temp__0));
  FDRE #(
    .INIT(1'b1)) 
    \Use_Async_Reset.sync_reset_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Synced),
        .Q(sync_reset),
        .R(1'b0));
  microblaze_microblaze_0_0_mb_sync_bit_0 \Using_Async_Wakeup_0.Wakeup_DFF 
       (.Clk(Clk),
        .SR(sync_reset),
        .Wakeup(Wakeup[0]),
        .out(wakeup_i[0]));
  microblaze_microblaze_0_0_mb_sync_bit_1 \Using_Async_Wakeup_1.Wakeup_DFF 
       (.Clk(Clk),
        .SR(sync_reset),
        .Wakeup(Wakeup[1]),
        .out(wakeup_i[1]));
  LUT3 #(
    .INIT(8'hFE)) 
    reset_temp
       (.I0(Reset),
        .I1(Mb_Reset),
        .I2(Debug_Rst),
        .O(reset_temp__0));
endmodule

(* ORIG_REF_NAME = "MicroBlaze_FF" *) 
module microblaze_microblaze_0_0_MicroBlaze_FF
   (D,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    LOCKSTEP_Master_Out,
    Sleep,
    Dbg_Trig_In,
    Dbg_Trig_Ack_Out,
    Dbg_TDO,
    Dbg_Reg_En_2_sp_1,
    Interrupt_Ack,
    Pause_Ack,
    Suspend,
    Hibernate,
    Dbg_Clk,
    sync_reset,
    Clk,
    Dbg_Update,
    Dbg_Trig_Ack_In,
    Dbg_Trig_Out,
    Pause,
    Dbg_Stop,
    Dbg_Capture,
    Reset_Mode,
    M_AXI_DP_BVALID,
    M_AXI_DP_RVALID,
    M_AXI_DP_AWREADY,
    M_AXI_DP_WREADY,
    M_AXI_DP_ARREADY,
    DWait,
    DReady,
    IReady,
    Scan_Reset,
    Scan_En,
    Config_Reset,
    Scan_Reset_Sel,
    Dbg_Reg_En,
    Data_Read_Reg_En,
    Status_Reg_En,
    Config_Reg_En,
    Dbg_Shift,
    IWAIT,
    wakeup_i,
    Dbg_TDI,
    Data_Read,
    M_AXI_DP_RDATA,
    Instr,
    Interrupt,
    Interrupt_Address);
  output [366:0]D;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  output [38:0]LOCKSTEP_Master_Out;
  output Sleep;
  output [1:0]Dbg_Trig_In;
  output [1:0]Dbg_Trig_Ack_Out;
  output Dbg_TDO;
  output Dbg_Reg_En_2_sp_1;
  output [0:1]Interrupt_Ack;
  output Pause_Ack;
  output Suspend;
  output Hibernate;
  input Dbg_Clk;
  input sync_reset;
  input Clk;
  input Dbg_Update;
  input [1:0]Dbg_Trig_Ack_In;
  input [1:0]Dbg_Trig_Out;
  input Pause;
  input Dbg_Stop;
  input Dbg_Capture;
  input [0:1]Reset_Mode;
  input M_AXI_DP_BVALID;
  input M_AXI_DP_RVALID;
  input M_AXI_DP_AWREADY;
  input M_AXI_DP_WREADY;
  input M_AXI_DP_ARREADY;
  input DWait;
  input DReady;
  input IReady;
  input Scan_Reset;
  input Scan_En;
  input Config_Reset;
  input Scan_Reset_Sel;
  input [0:7]Dbg_Reg_En;
  input Data_Read_Reg_En;
  input Status_Reg_En;
  input Config_Reg_En;
  input Dbg_Shift;
  input IWAIT;
  input [0:1]wakeup_i;
  input Dbg_TDI;
  input [0:31]Data_Read;
  input [31:0]M_AXI_DP_RDATA;
  input [0:31]Instr;
  input Interrupt;
  input [0:31]Interrupt_Address;

  wire \ALU_I1/DI ;
  wire \ALU_I1/Using_FPGA.ALL_Bits[0].ALU_Bit_I1/S ;
  wire \Barrel_Shifter_I/ex_left_shift_i ;
  wire \Barrel_Shifter_I/ex_void_bit ;
  wire [31:0]\Barrel_Shifter_I/p_31_out ;
  wire [8:15]\Byte_Doublet_Handle_I1/m1_op3 ;
  wire [1:0]\Byte_Doublet_Handle_I1/m1_unaligned_addr_3lsb ;
  wire \Byte_Doublet_Handle_I1/p_0_in ;
  wire Clk;
  wire Config_Reg_En;
  wire Config_Reset;
  wire [366:0]D;
  wire DATA_FLOW_I1_n_137;
  wire DATA_FLOW_I1_n_142;
  wire DATA_FLOW_I1_n_145;
  wire DATA_FLOW_I1_n_146;
  wire DATA_FLOW_I1_n_147;
  wire DATA_FLOW_I1_n_148;
  wire DATA_FLOW_I1_n_149;
  wire DATA_FLOW_I1_n_150;
  wire DATA_FLOW_I1_n_151;
  wire DATA_FLOW_I1_n_152;
  wire DATA_FLOW_I1_n_153;
  wire DATA_FLOW_I1_n_154;
  wire DATA_FLOW_I1_n_155;
  wire DATA_FLOW_I1_n_156;
  wire DATA_FLOW_I1_n_157;
  wire DATA_FLOW_I1_n_158;
  wire DATA_FLOW_I1_n_159;
  wire DATA_FLOW_I1_n_16;
  wire DATA_FLOW_I1_n_160;
  wire DATA_FLOW_I1_n_161;
  wire DATA_FLOW_I1_n_162;
  wire DATA_FLOW_I1_n_163;
  wire DATA_FLOW_I1_n_164;
  wire DATA_FLOW_I1_n_165;
  wire DATA_FLOW_I1_n_166;
  wire DATA_FLOW_I1_n_167;
  wire DATA_FLOW_I1_n_168;
  wire DATA_FLOW_I1_n_169;
  wire DATA_FLOW_I1_n_17;
  wire DATA_FLOW_I1_n_170;
  wire DATA_FLOW_I1_n_171;
  wire DATA_FLOW_I1_n_172;
  wire DATA_FLOW_I1_n_173;
  wire DATA_FLOW_I1_n_174;
  wire DATA_FLOW_I1_n_175;
  wire DATA_FLOW_I1_n_176;
  wire DATA_FLOW_I1_n_18;
  wire DATA_FLOW_I1_n_19;
  wire DATA_FLOW_I1_n_20;
  wire DATA_FLOW_I1_n_21;
  wire DATA_FLOW_I1_n_22;
  wire DATA_FLOW_I1_n_23;
  wire DATA_FLOW_I1_n_24;
  wire DATA_FLOW_I1_n_241;
  wire DATA_FLOW_I1_n_242;
  wire DATA_FLOW_I1_n_243;
  wire DATA_FLOW_I1_n_244;
  wire DATA_FLOW_I1_n_245;
  wire DATA_FLOW_I1_n_246;
  wire DATA_FLOW_I1_n_247;
  wire DATA_FLOW_I1_n_248;
  wire DATA_FLOW_I1_n_249;
  wire DATA_FLOW_I1_n_25;
  wire DATA_FLOW_I1_n_250;
  wire DATA_FLOW_I1_n_251;
  wire DATA_FLOW_I1_n_253;
  wire DATA_FLOW_I1_n_254;
  wire DATA_FLOW_I1_n_255;
  wire DATA_FLOW_I1_n_256;
  wire DATA_FLOW_I1_n_26;
  wire DATA_FLOW_I1_n_266;
  wire DATA_FLOW_I1_n_267;
  wire DATA_FLOW_I1_n_268;
  wire DATA_FLOW_I1_n_269;
  wire DATA_FLOW_I1_n_27;
  wire DATA_FLOW_I1_n_270;
  wire DATA_FLOW_I1_n_271;
  wire DATA_FLOW_I1_n_272;
  wire DATA_FLOW_I1_n_273;
  wire DATA_FLOW_I1_n_274;
  wire DATA_FLOW_I1_n_275;
  wire DATA_FLOW_I1_n_276;
  wire DATA_FLOW_I1_n_277;
  wire DATA_FLOW_I1_n_28;
  wire DATA_FLOW_I1_n_29;
  wire DATA_FLOW_I1_n_30;
  wire DATA_FLOW_I1_n_31;
  wire DATA_FLOW_I1_n_310;
  wire DATA_FLOW_I1_n_311;
  wire DATA_FLOW_I1_n_312;
  wire DATA_FLOW_I1_n_314;
  wire DATA_FLOW_I1_n_315;
  wire DATA_FLOW_I1_n_32;
  wire DATA_FLOW_I1_n_33;
  wire DATA_FLOW_I1_n_34;
  wire DATA_FLOW_I1_n_346;
  wire DATA_FLOW_I1_n_347;
  wire DATA_FLOW_I1_n_348;
  wire DATA_FLOW_I1_n_349;
  wire DATA_FLOW_I1_n_35;
  wire DATA_FLOW_I1_n_350;
  wire DATA_FLOW_I1_n_351;
  wire DATA_FLOW_I1_n_352;
  wire DATA_FLOW_I1_n_353;
  wire DATA_FLOW_I1_n_354;
  wire DATA_FLOW_I1_n_355;
  wire DATA_FLOW_I1_n_356;
  wire DATA_FLOW_I1_n_357;
  wire DATA_FLOW_I1_n_358;
  wire DATA_FLOW_I1_n_359;
  wire DATA_FLOW_I1_n_36;
  wire DATA_FLOW_I1_n_360;
  wire DATA_FLOW_I1_n_361;
  wire DATA_FLOW_I1_n_362;
  wire DATA_FLOW_I1_n_363;
  wire DATA_FLOW_I1_n_364;
  wire DATA_FLOW_I1_n_365;
  wire DATA_FLOW_I1_n_366;
  wire DATA_FLOW_I1_n_367;
  wire DATA_FLOW_I1_n_368;
  wire DATA_FLOW_I1_n_369;
  wire DATA_FLOW_I1_n_37;
  wire DATA_FLOW_I1_n_370;
  wire DATA_FLOW_I1_n_371;
  wire DATA_FLOW_I1_n_372;
  wire DATA_FLOW_I1_n_373;
  wire DATA_FLOW_I1_n_374;
  wire DATA_FLOW_I1_n_375;
  wire DATA_FLOW_I1_n_376;
  wire DATA_FLOW_I1_n_377;
  wire DATA_FLOW_I1_n_378;
  wire DATA_FLOW_I1_n_379;
  wire DATA_FLOW_I1_n_38;
  wire DATA_FLOW_I1_n_380;
  wire DATA_FLOW_I1_n_381;
  wire DATA_FLOW_I1_n_382;
  wire DATA_FLOW_I1_n_383;
  wire DATA_FLOW_I1_n_384;
  wire DATA_FLOW_I1_n_385;
  wire DATA_FLOW_I1_n_386;
  wire DATA_FLOW_I1_n_387;
  wire DATA_FLOW_I1_n_388;
  wire DATA_FLOW_I1_n_389;
  wire DATA_FLOW_I1_n_39;
  wire DATA_FLOW_I1_n_390;
  wire DATA_FLOW_I1_n_391;
  wire DATA_FLOW_I1_n_392;
  wire DATA_FLOW_I1_n_393;
  wire DATA_FLOW_I1_n_394;
  wire DATA_FLOW_I1_n_395;
  wire DATA_FLOW_I1_n_396;
  wire DATA_FLOW_I1_n_397;
  wire DATA_FLOW_I1_n_40;
  wire DATA_FLOW_I1_n_41;
  wire DATA_FLOW_I1_n_42;
  wire DATA_FLOW_I1_n_43;
  wire DATA_FLOW_I1_n_44;
  wire DATA_FLOW_I1_n_45;
  wire DATA_FLOW_I1_n_46;
  wire DATA_FLOW_I1_n_47;
  wire DATA_FLOW_I1_n_48;
  wire DATA_FLOW_I1_n_49;
  wire DATA_FLOW_I1_n_50;
  wire DATA_FLOW_I1_n_51;
  wire DATA_FLOW_I1_n_52;
  wire DATA_FLOW_I1_n_520;
  wire DATA_FLOW_I1_n_64;
  wire DATA_FLOW_I1_n_65;
  wire DATA_FLOW_I1_n_67;
  wire DATA_FLOW_I1_n_68;
  wire DATA_FLOW_I1_n_69;
  wire DATA_FLOW_I1_n_70;
  wire DATA_FLOW_I1_n_71;
  wire DATA_FLOW_I1_n_72;
  wire DATA_FLOW_I1_n_73;
  wire DATA_FLOW_I1_n_74;
  wire DATA_FLOW_I1_n_93;
  wire DAXI_interface_I1_n_72;
  wire DAXI_interface_I1_n_73;
  wire DAXI_interface_I1_n_74;
  wire DAXI_interface_I1_n_75;
  wire DAXI_interface_I1_n_76;
  wire DAXI_interface_I1_n_78;
  wire DAXI_interface_I1_n_79;
  wire DECODE_I1_n_1;
  wire DECODE_I1_n_123;
  wire DECODE_I1_n_124;
  wire DECODE_I1_n_126;
  wire DECODE_I1_n_149;
  wire DECODE_I1_n_150;
  wire DECODE_I1_n_151;
  wire DECODE_I1_n_152;
  wire DECODE_I1_n_157;
  wire DECODE_I1_n_159;
  wire DECODE_I1_n_160;
  wire DECODE_I1_n_161;
  wire DECODE_I1_n_162;
  wire DECODE_I1_n_163;
  wire DECODE_I1_n_164;
  wire DECODE_I1_n_165;
  wire DECODE_I1_n_166;
  wire DECODE_I1_n_169;
  wire DECODE_I1_n_171;
  wire DECODE_I1_n_172;
  wire DECODE_I1_n_205;
  wire DECODE_I1_n_206;
  wire DECODE_I1_n_207;
  wire DECODE_I1_n_208;
  wire DECODE_I1_n_209;
  wire DECODE_I1_n_210;
  wire DECODE_I1_n_211;
  wire DECODE_I1_n_213;
  wire DECODE_I1_n_215;
  wire DECODE_I1_n_216;
  wire DECODE_I1_n_217;
  wire DECODE_I1_n_218;
  wire DECODE_I1_n_219;
  wire DECODE_I1_n_222;
  wire DECODE_I1_n_231;
  wire DECODE_I1_n_232;
  wire DECODE_I1_n_233;
  wire DECODE_I1_n_234;
  wire DECODE_I1_n_235;
  wire DECODE_I1_n_236;
  wire DECODE_I1_n_237;
  wire DECODE_I1_n_238;
  wire DECODE_I1_n_239;
  wire DECODE_I1_n_240;
  wire DECODE_I1_n_241;
  wire DECODE_I1_n_242;
  wire DECODE_I1_n_243;
  wire DECODE_I1_n_244;
  wire DECODE_I1_n_245;
  wire DECODE_I1_n_246;
  wire DECODE_I1_n_247;
  wire DECODE_I1_n_248;
  wire DECODE_I1_n_249;
  wire DECODE_I1_n_250;
  wire DECODE_I1_n_251;
  wire DECODE_I1_n_252;
  wire DECODE_I1_n_253;
  wire DECODE_I1_n_254;
  wire DECODE_I1_n_255;
  wire DECODE_I1_n_256;
  wire DECODE_I1_n_257;
  wire DECODE_I1_n_258;
  wire DECODE_I1_n_259;
  wire DECODE_I1_n_260;
  wire DECODE_I1_n_261;
  wire DECODE_I1_n_262;
  wire DECODE_I1_n_263;
  wire DECODE_I1_n_264;
  wire DECODE_I1_n_30;
  wire DECODE_I1_n_300;
  wire DECODE_I1_n_301;
  wire DECODE_I1_n_309;
  wire DECODE_I1_n_310;
  wire DECODE_I1_n_311;
  wire DECODE_I1_n_316;
  wire DECODE_I1_n_330;
  wire DECODE_I1_n_331;
  wire DECODE_I1_n_332;
  wire DECODE_I1_n_333;
  wire DECODE_I1_n_334;
  wire DECODE_I1_n_335;
  wire DECODE_I1_n_337;
  wire DECODE_I1_n_338;
  wire DECODE_I1_n_339;
  wire DECODE_I1_n_357;
  wire DECODE_I1_n_358;
  wire DECODE_I1_n_359;
  wire DECODE_I1_n_36;
  wire DECODE_I1_n_360;
  wire DECODE_I1_n_361;
  wire DECODE_I1_n_362;
  wire DECODE_I1_n_363;
  wire DECODE_I1_n_364;
  wire DECODE_I1_n_365;
  wire DECODE_I1_n_366;
  wire DECODE_I1_n_367;
  wire DECODE_I1_n_368;
  wire DECODE_I1_n_369;
  wire DECODE_I1_n_37;
  wire DECODE_I1_n_371;
  wire DECODE_I1_n_372;
  wire DECODE_I1_n_373;
  wire DECODE_I1_n_374;
  wire DECODE_I1_n_375;
  wire DECODE_I1_n_376;
  wire DECODE_I1_n_377;
  wire DECODE_I1_n_378;
  wire DECODE_I1_n_379;
  wire DECODE_I1_n_38;
  wire DECODE_I1_n_380;
  wire DECODE_I1_n_381;
  wire DECODE_I1_n_382;
  wire DECODE_I1_n_383;
  wire DECODE_I1_n_39;
  wire DECODE_I1_n_419;
  wire DECODE_I1_n_420;
  wire DECODE_I1_n_421;
  wire DECODE_I1_n_422;
  wire DECODE_I1_n_423;
  wire DECODE_I1_n_424;
  wire DECODE_I1_n_425;
  wire DECODE_I1_n_426;
  wire DECODE_I1_n_427;
  wire DECODE_I1_n_428;
  wire DECODE_I1_n_429;
  wire DECODE_I1_n_43;
  wire DECODE_I1_n_430;
  wire DECODE_I1_n_431;
  wire DECODE_I1_n_432;
  wire DECODE_I1_n_433;
  wire DECODE_I1_n_434;
  wire DECODE_I1_n_435;
  wire DECODE_I1_n_436;
  wire DECODE_I1_n_437;
  wire DECODE_I1_n_440;
  wire DECODE_I1_n_441;
  wire DECODE_I1_n_442;
  wire DECODE_I1_n_443;
  wire DECODE_I1_n_445;
  wire DECODE_I1_n_447;
  wire DECODE_I1_n_448;
  wire DECODE_I1_n_449;
  wire DECODE_I1_n_45;
  wire DECODE_I1_n_450;
  wire DECODE_I1_n_451;
  wire DECODE_I1_n_452;
  wire DECODE_I1_n_454;
  wire DECODE_I1_n_455;
  wire DECODE_I1_n_456;
  wire DECODE_I1_n_457;
  wire DECODE_I1_n_458;
  wire DECODE_I1_n_459;
  wire DECODE_I1_n_460;
  wire DECODE_I1_n_461;
  wire DECODE_I1_n_462;
  wire DECODE_I1_n_464;
  wire DECODE_I1_n_466;
  wire DECODE_I1_n_467;
  wire DECODE_I1_n_468;
  wire DECODE_I1_n_472;
  wire DECODE_I1_n_473;
  wire DECODE_I1_n_474;
  wire DECODE_I1_n_475;
  wire DECODE_I1_n_480;
  wire DECODE_I1_n_481;
  wire DECODE_I1_n_482;
  wire DECODE_I1_n_483;
  wire DECODE_I1_n_484;
  wire DECODE_I1_n_485;
  wire DECODE_I1_n_486;
  wire DECODE_I1_n_487;
  wire DECODE_I1_n_488;
  wire DECODE_I1_n_489;
  wire DECODE_I1_n_490;
  wire DECODE_I1_n_491;
  wire DECODE_I1_n_492;
  wire DECODE_I1_n_493;
  wire DECODE_I1_n_494;
  wire DECODE_I1_n_495;
  wire DECODE_I1_n_496;
  wire DECODE_I1_n_497;
  wire DECODE_I1_n_498;
  wire DECODE_I1_n_499;
  wire DECODE_I1_n_500;
  wire DECODE_I1_n_501;
  wire DECODE_I1_n_502;
  wire DECODE_I1_n_503;
  wire DECODE_I1_n_504;
  wire DECODE_I1_n_505;
  wire DECODE_I1_n_506;
  wire DECODE_I1_n_507;
  wire DECODE_I1_n_508;
  wire DECODE_I1_n_509;
  wire DECODE_I1_n_51;
  wire DECODE_I1_n_510;
  wire DECODE_I1_n_511;
  wire DECODE_I1_n_512;
  wire DECODE_I1_n_513;
  wire DECODE_I1_n_514;
  wire DECODE_I1_n_515;
  wire DECODE_I1_n_516;
  wire DECODE_I1_n_517;
  wire DECODE_I1_n_518;
  wire DECODE_I1_n_519;
  wire DECODE_I1_n_52;
  wire DECODE_I1_n_520;
  wire DECODE_I1_n_522;
  wire DECODE_I1_n_527;
  wire DECODE_I1_n_528;
  wire DECODE_I1_n_54;
  wire DECODE_I1_n_566;
  wire DECODE_I1_n_567;
  wire DECODE_I1_n_568;
  wire DECODE_I1_n_569;
  wire DECODE_I1_n_570;
  wire DECODE_I1_n_571;
  wire DECODE_I1_n_572;
  wire DECODE_I1_n_573;
  wire DECODE_I1_n_574;
  wire DECODE_I1_n_575;
  wire DECODE_I1_n_576;
  wire DECODE_I1_n_577;
  wire DECODE_I1_n_578;
  wire DECODE_I1_n_579;
  wire DECODE_I1_n_580;
  wire DECODE_I1_n_581;
  wire DECODE_I1_n_582;
  wire DECODE_I1_n_583;
  wire DECODE_I1_n_584;
  wire DECODE_I1_n_585;
  wire DECODE_I1_n_586;
  wire DECODE_I1_n_587;
  wire DECODE_I1_n_588;
  wire DECODE_I1_n_589;
  wire DECODE_I1_n_590;
  wire DECODE_I1_n_591;
  wire DECODE_I1_n_592;
  wire DECODE_I1_n_593;
  wire DECODE_I1_n_594;
  wire DECODE_I1_n_595;
  wire DECODE_I1_n_596;
  wire DLMB_Interface_I1_n_11;
  wire DLMB_Interface_I1_n_12;
  wire DLMB_Interface_I1_n_2;
  wire DLMB_Interface_I1_n_29;
  wire DLMB_Interface_I1_n_30;
  wire DLMB_Interface_I1_n_31;
  wire DLMB_Interface_I1_n_32;
  wire DLMB_Interface_I1_n_33;
  wire DLMB_Interface_I1_n_34;
  wire DLMB_Interface_I1_n_35;
  wire DLMB_Interface_I1_n_36;
  wire DLMB_Interface_I1_n_37;
  wire DLMB_Interface_I1_n_38;
  wire DLMB_Interface_I1_n_39;
  wire DLMB_Interface_I1_n_40;
  wire DLMB_Interface_I1_n_41;
  wire DLMB_Interface_I1_n_42;
  wire DLMB_Interface_I1_n_43;
  wire DLMB_Interface_I1_n_5;
  wire DReady;
  wire DWait;
  wire \Data_Flow_Logic_I1/m0_ex_sel_res ;
  wire \Data_Flow_Logic_I1/m1_m0_sel_res ;
  wire \Data_Flow_Logic_I1/m1_m0_sel_res0 ;
  wire \Data_Flow_Logic_I1/m2_m1_sel_res0 ;
  wire \Data_Flow_Logic_I1/m3_m2_sel_res ;
  wire \Data_Flow_Logic_I1/wb_m3_sel_res0 ;
  wire [0:31]Data_Read;
  wire Data_Read_Reg_En;
  wire Dbg_Capture;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_Reg_En_2_sn_1;
  wire Dbg_Shift;
  wire Dbg_Stop;
  wire Dbg_TDI;
  wire Dbg_TDO;
  wire [1:0]Dbg_Trig_Ack_In;
  wire [1:0]Dbg_Trig_Ack_Out;
  wire [1:0]Dbg_Trig_In;
  wire [1:0]Dbg_Trig_Out;
  wire Dbg_Update;
  wire EX_CarryIn;
  wire Hibernate;
  wire ILMB_Interface_I1_n_37;
  wire ILMB_Interface_I1_n_38;
  wire IReady;
  wire IWAIT;
  wire [0:31]Instr;
  wire Interrupt;
  wire [0:1]Interrupt_Ack;
  wire [0:31]Interrupt_Address;
  wire [38:0]LOCKSTEP_Master_Out;
  wire M1_Sel_Mul_Res_i_1_n_0;
  wire \MSR_I1/D ;
  wire [22:30]\MSR_I1/ex_MSR_cmb_no_restore ;
  wire [17:31]\MSR_I1/ex_MSR_i ;
  wire [25:30]\MSR_I1/of_MSR_cmb ;
  wire [22:23]\MSR_I1/of_MSR_i ;
  wire [6:1]\MSR_I1/p_0_in ;
  wire [6:1]\MSR_I1/p_1_in ;
  wire [17:31]\MSR_I1/wb_MSR_i ;
  wire M_AXI_DP_ARREADY;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_BVALID;
  wire [31:0]M_AXI_DP_RDATA;
  wire M_AXI_DP_RVALID;
  wire M_AXI_DP_WREADY;
  wire [0:15]\Operand_Select_I1/imm_reg ;
  wire [0:31]\Operand_Select_I1/of_branch_cmp ;
  wire [0:31]\Operand_Select_I1/of_op1 ;
  wire [31:31]\Operand_Select_I1/of_op2 ;
  wire [31:31]\Operand_Select_I1/of_op3 ;
  wire [0:0]\PREFETCH_BUFFER_I1/if_predecode ;
  wire Pause;
  wire Pause_Ack;
  wire [0:1]Reset_Mode;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire Sleep;
  wire Sleep_Decode;
  wire Sleep_Out;
  wire Status_Reg_En;
  wire Suspend;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_38 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_42 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_43 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_44 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_50 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_53 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_54 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_56 ;
  wire \Use_Debug_Logic.Master_Core.Debug_Perf_n_57 ;
  wire \Using_Div_Unit.Div_Unit_I1/Q0 ;
  wire \Using_Div_Unit.Div_Unit_I1/Res_Neg ;
  wire \Using_Div_Unit.Div_Unit_I1/div_busy ;
  wire \Using_Div_Unit.Div_Unit_I1/floating_hold_div_by_zero__0 ;
  wire \Using_Div_Unit.Div_Unit_I1/last_cycle ;
  wire \Using_Div_Unit.Div_Unit_I1/make_result_neg ;
  wire \Using_Div_Unit.Div_Unit_I1/negative_operands ;
  wire \Using_Div_Unit.Div_Unit_I1/next_sub ;
  wire \Using_Div_Unit.Div_Unit_I1/reset_Q ;
  wire \Using_IF1_Insert_FPGA_No_MMU.PR_IF1_Ins_Or1/carry_or_i1/S ;
  wire \Using_Ready_FPGA.Rdy_Or1/carry_or_i1/S ;
  wire \Using_Ready_FPGA.Rdy_Or2/carry_or_i1/S ;
  wire \Using_Ready_FPGA.Rdy_Or2/carry_or_i1/S_0 ;
  wire \Using_Ready_FPGA.Rdy_Or3/carry_or_i1/S ;
  wire active_wakeup;
  wire bp0_dead_fetch_hold;
  wire bp1_dead_fetch_hold_bt;
  wire bp1_raw_valid_i_1_n_0;
  wire ex_Interrupt;
  wire ex_alu_carry_32;
  wire [0:1]ex_alu_op;
  wire [30:31]ex_alu_result;
  wire ex_alu_sel_logic;
  wire ex_arith_shift;
  wire ex_bit_extract;
  wire ex_bit_insert;
  wire ex_clz_instr;
  wire ex_cmp_op;
  wire [0:29]ex_databus_addr;
  wire ex_dbg_pc_hit_i;
  wire ex_div_unsigned;
  wire ex_enable_alu;
  wire ex_enable_sext_shift;
  wire [0:31]ex_fwd;
  wire ex_hibernate_i_i_1_n_0;
  wire ex_is_div_instr_i_i_1_n_0;
  wire [0:1]ex_logic_op;
  wire ex_mbar_decode;
  wire ex_mbar_decode_i_1_n_0;
  wire ex_msrclr;
  wire ex_msrset;
  wire ex_op1_cmp_equal;
  wire ex_op1_cmp_equal_n;
  wire ex_op1_neg;
  wire ex_op1_zero;
  wire [0:27]ex_op2;
  wire ex_pattern_cmp_sel;
  wire ex_sel_alu_res;
  wire ex_sel_barrel_res;
  wire [0:1]ex_sext_op;
  wire ex_sleep_i0;
  wire ex_sleep_i_i_1_n_0;
  wire ex_start_div;
  wire ex_suspend_i_i_1_n_0;
  wire ex_unsigned_op;
  wire ex_use_carry;
  wire [31:2]\exception_registers_I1/WB_Exception_Return_Addr0 ;
  wire \exception_registers_I1/wb_PC_i0 ;
  wire [29:31]gpr_op1;
  wire [0:31]gpr_op2;
  wire [30:31]gpr_op3;
  wire if0_pause;
  wire if0_raw_valid;
  wire if0_raw_valid_i_1_n_0;
  wire if1_insert_piperun_i;
  wire if2_ibus_access_raw0;
  wire if2_ibus_access_raw_i_1_n_0;
  wire if2_ilmb_issued;
  wire if2_piperun;
  wire if2_raw_valid_i_1_n_0;
  wire if3_allow_iready;
  wire if3_ilmb_iready;
  wire if3_piperun;
  wire if3_potential_bubble;
  wire if3_raw_valid_i_1_n_0;
  wire [0:31]if4_addr_mmu;
  wire [0:31]if4_data;
  wire if4_piperun;
  wire if4_raw_valid_i_1_n_0;
  wire if4_ready;
  wire [0:31]interrupt_address_d1;
  wire kill_fetch_mmu;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m0_ex_sel_res_i_1_n_0;
  wire m0_piperun;
  wire m0_sel_barrel_res;
  wire m1_byte_access;
  wire m1_dlmb_issued;
  wire m1_doublet_access;
  wire m1_piperun;
  wire m1_sel_mul_res;
  wire m2_active_access;
  wire m2_allow_dready;
  wire m2_dlmb_dready;
  wire m2_dlmb_drop_request;
  wire m2_is_div_instr;
  wire m2_piperun;
  wire m2_potential_bubble;
  wire m3_active_access;
  wire m3_databus_ready;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire m3_div_stall;
  wire m3_div_stall_i_i_1_n_0;
  wire m3_div_zero_overflow_ex_hold;
  wire m3_is_div_instr_i_i_1_n_0;
  wire [30:30]m3_msr;
  wire [0:31]m3_pc;
  wire m3_piperun;
  wire m3_sel_div_res;
  wire m3_sel_load_res;
  wire make_result_neg_i_1_n_0;
  wire negative_operands_i_1_n_0;
  wire next_sub_i_1_n_0;
  wire normal_stop_i;
  wire [28:30]of_MSR_i;
  wire [0:4]of_gpr_op1_rd_addr;
  wire [0:4]of_gpr_op2_rd_addr;
  wire [0:4]of_gpr_op3_rd_addr;
  wire [5:15]of_imm_data;
  wire of_is_div_instr;
  wire [30:30]of_msr;
  wire [1:2]of_op1_sel;
  wire [0:2]of_op2_sel;
  wire [0:2]of_op3_sel;
  wire [0:31]of_pc;
  wire of_piperun;
  wire of_write_imm_reg;
  wire p_0_in105_in;
  wire p_1_in106_in;
  wire p_2_in;
  wire p_4_out__0;
  wire p_55_out;
  wire read_register_MSR_1;
  wire single_Step_N;
  wire sync_reset;
  wire [0:31]trace_wb_instr;
  wire trace_wb_jump_taken;
  wire trace_wb_valid_instr;
  wire [0:1]wakeup_i;
  wire wb_byte_access;
  wire wb_databus_access;
  wire [0:31]wb_databus_addr_mmu;
  wire [0:3]wb_databus_byte_enable;
  wire wb_databus_read;
  wire [0:15]wb_databus_read_data;
  wire wb_databus_write;
  wire [0:31]wb_databus_write_data;
  wire [0:31]wb_daxi_valid_read_data;
  wire wb_delay_slot;
  wire wb_div_zero_overflow;
  wire [0:15]wb_dlmb_valid_read_data;
  wire wb_doublet_access;
  wire [28:31]wb_exception_kind;
  wire wb_exception_taken;
  wire [0:31]wb_fwd;
  wire wb_gpr_wr;
  wire [0:4]wb_gpr_wr_addr;
  wire wb_gpr_wr_dbg;
  wire wb_halted;
  wire [25:30]wb_msr;
  wire wb_msr_clear_bip;
  wire wb_msr_clear_ie;
  wire [0:31]wb_pc;
  wire wb_pc_valid;
  wire wb_read_imm_reg;
  wire wb_read_imm_reg_1;

  assign Dbg_Reg_En_2_sp_1 = Dbg_Reg_En_2_sn_1;
  microblaze_microblaze_0_0_Data_Flow_ff DATA_FLOW_I1
       (.ADDRD({wb_gpr_wr_addr[0],wb_gpr_wr_addr[1],wb_gpr_wr_addr[2],wb_gpr_wr_addr[3],wb_gpr_wr_addr[4]}),
        .Clk(Clk),
        .D({DATA_FLOW_I1_n_145,DATA_FLOW_I1_n_146,DATA_FLOW_I1_n_147,DATA_FLOW_I1_n_148,DATA_FLOW_I1_n_149,DATA_FLOW_I1_n_150,DATA_FLOW_I1_n_151,DATA_FLOW_I1_n_152,DATA_FLOW_I1_n_153,DATA_FLOW_I1_n_154,DATA_FLOW_I1_n_155,DATA_FLOW_I1_n_156,DATA_FLOW_I1_n_157,DATA_FLOW_I1_n_158,DATA_FLOW_I1_n_159,DATA_FLOW_I1_n_160,DATA_FLOW_I1_n_161,DATA_FLOW_I1_n_162,DATA_FLOW_I1_n_163,DATA_FLOW_I1_n_164,DATA_FLOW_I1_n_165,DATA_FLOW_I1_n_166,DATA_FLOW_I1_n_167,DATA_FLOW_I1_n_168,DATA_FLOW_I1_n_169,DATA_FLOW_I1_n_170,DATA_FLOW_I1_n_171,DATA_FLOW_I1_n_172,DATA_FLOW_I1_n_173,DATA_FLOW_I1_n_174,DATA_FLOW_I1_n_175,DATA_FLOW_I1_n_176}),
        .DI(DECODE_I1_n_334),
        .DI_0(\ALU_I1/DI ),
        .D_2(\MSR_I1/D ),
        .E(\Using_Div_Unit.Div_Unit_I1/div_busy ),
        .\EX_Branch_CMP_Op1_reg[0] (ex_op1_neg),
        .\EX_Branch_CMP_Op1_reg[28] (DECODE_I1_n_419),
        .\EX_Branch_CMP_Op1_reg[28]_0 (DECODE_I1_n_420),
        .\EX_Branch_CMP_Op1_reg[29] ({\Operand_Select_I1/of_branch_cmp [29],\Operand_Select_I1/of_branch_cmp [30],\Operand_Select_I1/of_branch_cmp [31]}),
        .EX_CLZ_Instr_reg(DATA_FLOW_I1_n_266),
        .EX_CLZ_Instr_reg_0(DATA_FLOW_I1_n_347),
        .EX_CarryIn(EX_CarryIn),
        .EX_Enable_ALU(ex_enable_alu),
        .EX_Enable_Sext_Shift_reg({ex_fwd[16],ex_fwd[17],ex_fwd[18],ex_fwd[20],ex_fwd[21],ex_fwd[29],ex_fwd[31]}),
        .\EX_Logic_Op_reg[0] (DATA_FLOW_I1_n_315),
        .\EX_Logic_Op_reg[1] (DATA_FLOW_I1_n_355),
        .EX_Op1_CMP_Equal(ex_op1_cmp_equal),
        .EX_Op1_Zero(ex_op1_zero),
        .\EX_Op1_reg[0] ({DATA_FLOW_I1_n_20,DATA_FLOW_I1_n_21,DATA_FLOW_I1_n_22,DATA_FLOW_I1_n_23,DATA_FLOW_I1_n_24,DATA_FLOW_I1_n_25,DATA_FLOW_I1_n_26,DATA_FLOW_I1_n_27,DATA_FLOW_I1_n_28,DATA_FLOW_I1_n_29,DATA_FLOW_I1_n_30,DATA_FLOW_I1_n_31,DATA_FLOW_I1_n_32,DATA_FLOW_I1_n_33,DATA_FLOW_I1_n_34,DATA_FLOW_I1_n_35,DATA_FLOW_I1_n_36,DATA_FLOW_I1_n_37,DATA_FLOW_I1_n_38,DATA_FLOW_I1_n_39,DATA_FLOW_I1_n_40,DATA_FLOW_I1_n_41,DATA_FLOW_I1_n_42,DATA_FLOW_I1_n_43,DATA_FLOW_I1_n_44,DATA_FLOW_I1_n_45,DATA_FLOW_I1_n_46,DATA_FLOW_I1_n_47,DATA_FLOW_I1_n_48,DATA_FLOW_I1_n_49,DATA_FLOW_I1_n_50,DATA_FLOW_I1_n_51}),
        .\EX_Op1_reg[0]_0 (DATA_FLOW_I1_n_346),
        .\EX_Op1_reg[0]_1 (DATA_FLOW_I1_n_348),
        .\EX_Op1_reg[0]_2 (DATA_FLOW_I1_n_352),
        .\EX_Op1_reg[0]_3 ({\Operand_Select_I1/of_op1 [0],\Operand_Select_I1/of_op1 [1],\Operand_Select_I1/of_op1 [2],\Operand_Select_I1/of_op1 [3],\Operand_Select_I1/of_op1 [4],\Operand_Select_I1/of_op1 [5],\Operand_Select_I1/of_op1 [6],\Operand_Select_I1/of_op1 [7],\Operand_Select_I1/of_op1 [8],\Operand_Select_I1/of_op1 [9],\Operand_Select_I1/of_op1 [10],\Operand_Select_I1/of_op1 [11],\Operand_Select_I1/of_op1 [12],\Operand_Select_I1/of_op1 [13],\Operand_Select_I1/of_op1 [14],\Operand_Select_I1/of_op1 [15],\Operand_Select_I1/of_op1 [16],\Operand_Select_I1/of_op1 [17],\Operand_Select_I1/of_op1 [18],\Operand_Select_I1/of_op1 [19],\Operand_Select_I1/of_op1 [20],\Operand_Select_I1/of_op1 [21],\Operand_Select_I1/of_op1 [22],\Operand_Select_I1/of_op1 [23],\Operand_Select_I1/of_op1 [24],\Operand_Select_I1/of_op1 [25],\Operand_Select_I1/of_op1 [26],\Operand_Select_I1/of_op1 [27],\Operand_Select_I1/of_op1 [28],\Operand_Select_I1/of_op1 [29],\Operand_Select_I1/of_op1 [30],\Operand_Select_I1/of_op1 [31]}),
        .\EX_Op1_reg[10] (DATA_FLOW_I1_n_245),
        .\EX_Op1_reg[16] (DATA_FLOW_I1_n_354),
        .\EX_Op1_reg[1] (DATA_FLOW_I1_n_247),
        .\EX_Op1_reg[24] (DATA_FLOW_I1_n_349),
        .\EX_Op1_reg[24]_0 (DATA_FLOW_I1_n_350),
        .\EX_Op1_reg[24]_1 (DATA_FLOW_I1_n_388),
        .\EX_Op1_reg[8] (DATA_FLOW_I1_n_248),
        .\EX_Op1_reg[9] (DATA_FLOW_I1_n_246),
        .\EX_Op2_reg[0] (DECODE_I1_n_339),
        .\EX_Op2_reg[10] (DECODE_I1_n_380),
        .\EX_Op2_reg[11] (DECODE_I1_n_381),
        .\EX_Op2_reg[12] (DECODE_I1_n_361),
        .\EX_Op2_reg[13] (DECODE_I1_n_362),
        .\EX_Op2_reg[14] (DECODE_I1_n_363),
        .\EX_Op2_reg[15] (DECODE_I1_n_382),
        .\EX_Op2_reg[16] (DECODE_I1_n_364),
        .\EX_Op2_reg[17] (DECODE_I1_n_374),
        .\EX_Op2_reg[18] (DECODE_I1_n_365),
        .\EX_Op2_reg[19] (DECODE_I1_n_427),
        .\EX_Op2_reg[1] (DECODE_I1_n_371),
        .\EX_Op2_reg[1]_0 (DECODE_I1_n_372),
        .\EX_Op2_reg[1]_1 (DECODE_I1_n_375),
        .\EX_Op2_reg[20] (DECODE_I1_n_373),
        .\EX_Op2_reg[21] (DECODE_I1_n_366),
        .\EX_Op2_reg[22] (DECODE_I1_n_426),
        .\EX_Op2_reg[23] (DECODE_I1_n_425),
        .\EX_Op2_reg[24] (DECODE_I1_n_424),
        .\EX_Op2_reg[25] (DATA_FLOW_I1_n_254),
        .\EX_Op2_reg[25]_0 (DATA_FLOW_I1_n_255),
        .\EX_Op2_reg[25]_1 (DATA_FLOW_I1_n_312),
        .\EX_Op2_reg[25]_2 (DECODE_I1_n_367),
        .\EX_Op2_reg[26] (DECODE_I1_n_423),
        .\EX_Op2_reg[27] (DECODE_I1_n_422),
        .\EX_Op2_reg[28] (DECODE_I1_n_421),
        .\EX_Op2_reg[29] (DATA_FLOW_I1_n_395),
        .\EX_Op2_reg[29]_0 (DECODE_I1_n_368),
        .\EX_Op2_reg[2] (DECODE_I1_n_357),
        .\EX_Op2_reg[30] (DATA_FLOW_I1_n_396),
        .\EX_Op2_reg[30]_0 (DECODE_I1_n_383),
        .\EX_Op2_reg[31] (\Operand_Select_I1/of_op2 ),
        .\EX_Op2_reg[3] (DECODE_I1_n_376),
        .\EX_Op2_reg[4] (DECODE_I1_n_377),
        .\EX_Op2_reg[5] (DECODE_I1_n_358),
        .\EX_Op2_reg[6] (DECODE_I1_n_378),
        .\EX_Op2_reg[7] (DECODE_I1_n_379),
        .\EX_Op2_reg[8] (DECODE_I1_n_359),
        .\EX_Op2_reg[9] (DECODE_I1_n_360),
        .\EX_Op3[1]_i_2 ({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4],of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4],of_gpr_op2_rd_addr[0],of_gpr_op2_rd_addr[1],of_gpr_op2_rd_addr[2],of_gpr_op2_rd_addr[3],of_gpr_op2_rd_addr[4],of_imm_data[5],of_imm_data[6],of_imm_data[7],of_imm_data[8],of_imm_data[9],of_imm_data[10],of_imm_data[11],of_imm_data[12],of_imm_data[13],of_imm_data[14],of_imm_data[15]}),
        .\EX_Op3[29]_i_2 (DECODE_I1_n_300),
        .\EX_Op3[29]_i_2_0 (DECODE_I1_n_301),
        .\EX_Op3_reg[29] (DECODE_I1_n_369),
        .\EX_Op3_reg[30] (DECODE_I1_n_337),
        .\EX_Op3_reg[30]_0 (DECODE_I1_n_338),
        .\EX_Op3_reg[30]_1 (DECODE_I1_n_335),
        .\EX_Op3_reg[31] (\Operand_Select_I1/of_op3 ),
        .EX_Pattern_Cmp_Sel_reg(DATA_FLOW_I1_n_351),
        .EX_Pattern_Cmp_Sel_reg_0(DATA_FLOW_I1_n_353),
        .GPR_Op1({gpr_op1[29],gpr_op1[30],gpr_op1[31]}),
        .GPR_Op2(gpr_op2),
        .GPR_Op3({gpr_op3[30],gpr_op3[31]}),
        .LO(ex_alu_carry_32),
        .M1_Sel_Mul_Res_reg(DATA_FLOW_I1_n_268),
        .M1_Sel_Mul_Res_reg_0(DATA_FLOW_I1_n_270),
        .M1_Sel_Mul_Res_reg_1(DATA_FLOW_I1_n_271),
        .M1_Sel_Mul_Res_reg_2(DATA_FLOW_I1_n_272),
        .M1_Sel_Mul_Res_reg_3(DATA_FLOW_I1_n_274),
        .M1_Sel_Mul_Res_reg_4(DATA_FLOW_I1_n_275),
        .M1_Sel_Mul_Res_reg_5(DATA_FLOW_I1_n_277),
        .M3_Div_By_Zero_reg(DATA_FLOW_I1_n_397),
        .M3_Div_By_Zero_reg_0(DECODE_I1_n_429),
        .\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0] ({\Byte_Doublet_Handle_I1/p_0_in ,DATA_FLOW_I1_n_253}),
        .\No_Long.No_Reverse_Mem_Accesses.wb_byte_selects_reg[0]_0 (DATA_FLOW_I1_n_387),
        .O(\Using_Div_Unit.Div_Unit_I1/Res_Neg ),
        .Q({ex_op2[0],ex_op2[17],ex_op2[18],ex_op2[19],ex_op2[20],ex_op2[21],ex_op2[22],ex_op2[23],ex_op2[24],ex_op2[25],ex_op2[26],ex_op2[27],DATA_FLOW_I1_n_16,DATA_FLOW_I1_n_17,DATA_FLOW_I1_n_18,DATA_FLOW_I1_n_19}),
        .\R_reg[32] (\Using_Div_Unit.Div_Unit_I1/Q0 ),
        .S({DECODE_I1_n_205,DECODE_I1_n_206,DECODE_I1_n_207,DECODE_I1_n_208}),
        .SR(\Using_Div_Unit.Div_Unit_I1/reset_Q ),
        .S_1(\ALU_I1/Using_FPGA.ALL_Bits[0].ALU_Bit_I1/S ),
        .\Use_HW_BS.Using_BitField.mem_mask0_reg[0] ({\Barrel_Shifter_I/p_31_out [31],DECODE_I1_n_213,\Barrel_Shifter_I/p_31_out [26],DECODE_I1_n_215,DECODE_I1_n_216,DECODE_I1_n_217,DECODE_I1_n_218,DECODE_I1_n_219,\Barrel_Shifter_I/p_31_out [18:17],DECODE_I1_n_222,\Barrel_Shifter_I/p_31_out [15],\Barrel_Shifter_I/p_31_out [11:8],\Barrel_Shifter_I/p_31_out [3],\Barrel_Shifter_I/p_31_out [1:0]}),
        .\Use_HW_BS.Using_BitField.mem_mask0_reg[2] (DECODE_I1_n_231),
        .\Use_HW_BS.Using_BitField.mem_mask1_reg[5] (DECODE_I1_n_211),
        .\Use_HW_BS.mem_mux3_reg[0] (DECODE_I1_n_516),
        .\Use_HW_BS.mem_mux3_reg[0]_0 (DECODE_I1_n_519),
        .\Use_HW_BS.mem_mux3_reg[0]_1 (DECODE_I1_n_520),
        .\Use_HW_BS.mem_mux3_reg[1] ({DECODE_I1_n_481,DECODE_I1_n_482,DECODE_I1_n_483,DECODE_I1_n_484,DECODE_I1_n_485,DECODE_I1_n_486,DECODE_I1_n_487,DECODE_I1_n_488,DECODE_I1_n_489,DECODE_I1_n_490,DECODE_I1_n_491,DECODE_I1_n_492,DECODE_I1_n_493,DECODE_I1_n_494,DECODE_I1_n_495,DECODE_I1_n_496,DECODE_I1_n_497,DECODE_I1_n_498,DECODE_I1_n_499,DECODE_I1_n_500,DECODE_I1_n_501,DECODE_I1_n_502,DECODE_I1_n_503,DECODE_I1_n_504,DECODE_I1_n_505,DECODE_I1_n_506,DECODE_I1_n_507,DECODE_I1_n_508}),
        .\Use_HW_BS.mem_mux3_reg[27] (DECODE_I1_n_517),
        .\Use_HW_BS.mem_mux3_reg[30] (DECODE_I1_n_522),
        .\Use_HW_BS.mem_mux3_reg[30]_0 (DECODE_I1_n_518),
        .\Using_FPGA.DSP48E1_I1 (DECODE_I1_n_30),
        .\Using_FPGA.Native (DATA_FLOW_I1_n_64),
        .\Using_FPGA.Native_0 (DATA_FLOW_I1_n_65),
        .\Using_FPGA.Native_1 (DATA_FLOW_I1_n_67),
        .\Using_FPGA.Native_10 (DECODE_I1_n_455),
        .\Using_FPGA.Native_11 (DECODE_I1_n_456),
        .\Using_FPGA.Native_12 (DECODE_I1_n_457),
        .\Using_FPGA.Native_13 (DECODE_I1_n_448),
        .\Using_FPGA.Native_14 (DECODE_I1_n_449),
        .\Using_FPGA.Native_15 (DECODE_I1_n_458),
        .\Using_FPGA.Native_16 (DECODE_I1_n_459),
        .\Using_FPGA.Native_17 (DECODE_I1_n_460),
        .\Using_FPGA.Native_18 (DECODE_I1_n_461),
        .\Using_FPGA.Native_19 (DECODE_I1_n_432),
        .\Using_FPGA.Native_2 (DATA_FLOW_I1_n_68),
        .\Using_FPGA.Native_20 (DECODE_I1_n_452),
        .\Using_FPGA.Native_21 (DECODE_I1_n_450),
        .\Using_FPGA.Native_22 (DECODE_I1_n_462),
        .\Using_FPGA.Native_23 (DECODE_I1_n_468),
        .\Using_FPGA.Native_24 (DECODE_I1_n_473),
        .\Using_FPGA.Native_25 (DECODE_I1_n_467),
        .\Using_FPGA.Native_26 (DECODE_I1_n_474),
        .\Using_FPGA.Native_27 (DECODE_I1_n_466),
        .\Using_FPGA.Native_28 (DECODE_I1_n_475),
        .\Using_FPGA.Native_29 (DECODE_I1_n_527),
        .\Using_FPGA.Native_3 (DATA_FLOW_I1_n_69),
        .\Using_FPGA.Native_30 (DECODE_I1_n_472),
        .\Using_FPGA.Native_31 (DECODE_I1_n_528),
        .\Using_FPGA.Native_32 (DECODE_I1_n_451),
        .\Using_FPGA.Native_4 (DATA_FLOW_I1_n_70),
        .\Using_FPGA.Native_5 (DATA_FLOW_I1_n_71),
        .\Using_FPGA.Native_6 (DATA_FLOW_I1_n_72),
        .\Using_FPGA.Native_7 (DATA_FLOW_I1_n_73),
        .\Using_FPGA.Native_8 (DATA_FLOW_I1_n_74),
        .\Using_FPGA.Native_9 (DECODE_I1_n_454),
        .WB_Byte_Access_reg(DATA_FLOW_I1_n_251),
        .\WB_DataBus_Byte_Enable_reg[0] ({wb_databus_byte_enable[0],wb_databus_byte_enable[1],wb_databus_byte_enable[2],wb_databus_byte_enable[3]}),
        .\WB_DataBus_Write_Data_reg[0] ({wb_databus_write_data[0],wb_databus_write_data[1],wb_databus_write_data[2],wb_databus_write_data[3],wb_databus_write_data[4],wb_databus_write_data[5],wb_databus_write_data[6],wb_databus_write_data[7],wb_databus_write_data[8],wb_databus_write_data[9],wb_databus_write_data[10],wb_databus_write_data[11],wb_databus_write_data[12],wb_databus_write_data[13],wb_databus_write_data[14],wb_databus_write_data[15],wb_databus_write_data[16],wb_databus_write_data[17],wb_databus_write_data[18],wb_databus_write_data[19],wb_databus_write_data[20],wb_databus_write_data[21],wb_databus_write_data[22],wb_databus_write_data[23],wb_databus_write_data[24],wb_databus_write_data[25],wb_databus_write_data[26],wb_databus_write_data[27],wb_databus_write_data[28],wb_databus_write_data[29],wb_databus_write_data[30],wb_databus_write_data[31]}),
        .WB_Div_Zero_Overflow_reg(DECODE_I1_n_151),
        .WB_Exception_Return_Addr0(\exception_registers_I1/WB_Exception_Return_Addr0 ),
        .\WB_Exception_Return_Addr_reg[0] ({DECODE_I1_n_263,DECODE_I1_n_264}),
        .\WB_Exception_Return_Addr_reg[0]_0 ({DECODE_I1_n_566,DECODE_I1_n_567,DECODE_I1_n_568,DECODE_I1_n_569,DECODE_I1_n_570,DECODE_I1_n_571,DECODE_I1_n_572,DECODE_I1_n_573,DECODE_I1_n_574,DECODE_I1_n_575,DECODE_I1_n_576,DECODE_I1_n_577,DECODE_I1_n_578,DECODE_I1_n_579,DECODE_I1_n_580,DECODE_I1_n_581,DECODE_I1_n_582,DECODE_I1_n_583,DECODE_I1_n_584,DECODE_I1_n_585,DECODE_I1_n_586,DECODE_I1_n_587,DECODE_I1_n_588,DECODE_I1_n_589,DECODE_I1_n_590,DECODE_I1_n_591,DECODE_I1_n_592,DECODE_I1_n_593,DECODE_I1_n_594,DECODE_I1_n_595,DECODE_I1_n_596}),
        .\WB_Exception_Return_Addr_reg[10] ({DECODE_I1_n_251,DECODE_I1_n_252,DECODE_I1_n_253,DECODE_I1_n_254}),
        .\WB_Exception_Return_Addr_reg[14] ({DECODE_I1_n_247,DECODE_I1_n_248,DECODE_I1_n_249,DECODE_I1_n_250}),
        .\WB_Exception_Return_Addr_reg[18] ({DECODE_I1_n_243,DECODE_I1_n_244,DECODE_I1_n_245,DECODE_I1_n_246}),
        .\WB_Exception_Return_Addr_reg[22] ({DECODE_I1_n_239,DECODE_I1_n_240,DECODE_I1_n_241,DECODE_I1_n_242}),
        .\WB_Exception_Return_Addr_reg[2] ({DECODE_I1_n_259,DECODE_I1_n_260,DECODE_I1_n_261,DECODE_I1_n_262}),
        .\WB_Exception_Return_Addr_reg[6] ({DECODE_I1_n_255,DECODE_I1_n_256,DECODE_I1_n_257,DECODE_I1_n_258}),
        .\cnt_shifts_reg[0] (DECODE_I1_n_464),
        .\data_rd_reg_reg[30] (\Use_Debug_Logic.Master_Core.Debug_Perf_n_38 ),
        .div_busy_reg(DECODE_I1_n_150),
        .div_iterations_early_reg(DATA_FLOW_I1_n_137),
        .ex_MSR_i({\MSR_I1/ex_MSR_i [17],\MSR_I1/ex_MSR_i [18],\MSR_I1/ex_MSR_i [19],\MSR_I1/ex_MSR_i [20],\MSR_I1/ex_MSR_i [21],\MSR_I1/ex_MSR_i [22],\MSR_I1/ex_MSR_i [23],\MSR_I1/ex_MSR_i [24],\MSR_I1/ex_MSR_i [26],\MSR_I1/ex_MSR_i [27],\MSR_I1/ex_MSR_i [31]}),
        .ex_alu_result({ex_alu_result[30],ex_alu_result[31]}),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_arith_shift(ex_arith_shift),
        .ex_bit_extract(ex_bit_extract),
        .ex_bit_insert(ex_bit_insert),
        .ex_clz_instr(ex_clz_instr),
        .ex_cmp_op(ex_cmp_op),
        .ex_databus_addr({ex_databus_addr[0],ex_databus_addr[1],ex_databus_addr[2],ex_databus_addr[3],ex_databus_addr[4],ex_databus_addr[5],ex_databus_addr[6],ex_databus_addr[7],ex_databus_addr[8],ex_databus_addr[9],ex_databus_addr[10],ex_databus_addr[11],ex_databus_addr[12],ex_databus_addr[13],ex_databus_addr[14],ex_databus_addr[15],ex_databus_addr[16],ex_databus_addr[17],ex_databus_addr[18],ex_databus_addr[19],ex_databus_addr[20],ex_databus_addr[21],ex_databus_addr[22],ex_databus_addr[23],ex_databus_addr[24],ex_databus_addr[25],ex_databus_addr[26],ex_databus_addr[27],ex_databus_addr[28],ex_databus_addr[29]}),
        .ex_div_unsigned(ex_div_unsigned),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_left_shift_i(\Barrel_Shifter_I/ex_left_shift_i ),
        .ex_logic_op(ex_logic_op),
        .ex_msrclr(ex_msrclr),
        .ex_msrset(ex_msrset),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .ex_pattern_cmp_sel(ex_pattern_cmp_sel),
        .ex_sel_alu_reg(DATA_FLOW_I1_n_356),
        .ex_sel_alu_res(ex_sel_alu_res),
        .ex_start_div(ex_start_div),
        .ex_unsigned_op(ex_unsigned_op),
        .ex_use_carry(ex_use_carry),
        .ex_void_bit(\Barrel_Shifter_I/ex_void_bit ),
        .floating_hold_div_by_zero__0(\Using_Div_Unit.Div_Unit_I1/floating_hold_div_by_zero__0 ),
        .floating_hold_div_by_zero_reg(DECODE_I1_n_428),
        .floating_hold_div_overflow_reg(DATA_FLOW_I1_n_142),
        .floating_hold_div_overflow_reg_0(DECODE_I1_n_430),
        .\imm_reg_reg[0] ({\Operand_Select_I1/imm_reg [0],\Operand_Select_I1/imm_reg [1],\Operand_Select_I1/imm_reg [2],\Operand_Select_I1/imm_reg [3],\Operand_Select_I1/imm_reg [4],\Operand_Select_I1/imm_reg [5],\Operand_Select_I1/imm_reg [6],\Operand_Select_I1/imm_reg [7],\Operand_Select_I1/imm_reg [8],\Operand_Select_I1/imm_reg [9],\Operand_Select_I1/imm_reg [10],\Operand_Select_I1/imm_reg [11],\Operand_Select_I1/imm_reg [12],\Operand_Select_I1/imm_reg [13],\Operand_Select_I1/imm_reg [14],\Operand_Select_I1/imm_reg [15]}),
        .\imm_reg_reg[15] (of_write_imm_reg),
        .in0(DECODE_I1_n_514),
        .last_cycle(\Using_Div_Unit.Div_Unit_I1/last_cycle ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\m0_Ex_Result_i_reg[0] (DATA_FLOW_I1_n_250),
        .\m0_Ex_Result_i_reg[0]_0 ({ex_fwd[0],ex_fwd[1],ex_fwd[2],ex_fwd[3],ex_fwd[4],ex_fwd[5],ex_fwd[6],ex_fwd[7],ex_fwd[8],ex_fwd[9],ex_fwd[10],ex_fwd[11],ex_fwd[12],ex_fwd[13],ex_fwd[14],ex_fwd[15],ex_fwd[30]}),
        .\m0_Ex_Result_i_reg[10] (DATA_FLOW_I1_n_375),
        .\m0_Ex_Result_i_reg[11] (DATA_FLOW_I1_n_377),
        .\m0_Ex_Result_i_reg[12] (DATA_FLOW_I1_n_380),
        .\m0_Ex_Result_i_reg[13] (DATA_FLOW_I1_n_382),
        .\m0_Ex_Result_i_reg[14] (DATA_FLOW_I1_n_384),
        .\m0_Ex_Result_i_reg[15] (DATA_FLOW_I1_n_385),
        .\m0_Ex_Result_i_reg[17] ({ex_sext_op[0],ex_sext_op[1]}),
        .\m0_Ex_Result_i_reg[1] (DATA_FLOW_I1_n_357),
        .\m0_Ex_Result_i_reg[24] (DECODE_I1_n_510),
        .\m0_Ex_Result_i_reg[26] (DECODE_I1_n_513),
        .\m0_Ex_Result_i_reg[27] (DECODE_I1_n_512),
        .\m0_Ex_Result_i_reg[28] (DECODE_I1_n_511),
        .\m0_Ex_Result_i_reg[29] (DATA_FLOW_I1_n_390),
        .\m0_Ex_Result_i_reg[29]_0 (DECODE_I1_n_209),
        .\m0_Ex_Result_i_reg[2] (DATA_FLOW_I1_n_360),
        .\m0_Ex_Result_i_reg[30] (DATA_FLOW_I1_n_391),
        .\m0_Ex_Result_i_reg[30]_0 (DECODE_I1_n_210),
        .\m0_Ex_Result_i_reg[31] (DATA_FLOW_I1_n_394),
        .\m0_Ex_Result_i_reg[31]_0 (DECODE_I1_n_509),
        .\m0_Ex_Result_i_reg[3] (DATA_FLOW_I1_n_361),
        .\m0_Ex_Result_i_reg[4] (DATA_FLOW_I1_n_363),
        .\m0_Ex_Result_i_reg[5] (DATA_FLOW_I1_n_366),
        .\m0_Ex_Result_i_reg[6] (DATA_FLOW_I1_n_367),
        .\m0_Ex_Result_i_reg[7] (DATA_FLOW_I1_n_369),
        .\m0_Ex_Result_i_reg[8] (DATA_FLOW_I1_n_372),
        .\m0_Ex_Result_i_reg[9] (DATA_FLOW_I1_n_374),
        .\m0_databus_addr_i_reg[9] ({ex_alu_op[0],ex_alu_op[1]}),
        .m0_ex_sel_res(\Data_Flow_Logic_I1/m0_ex_sel_res ),
        .m0_ex_sel_res_reg(m0_ex_sel_res_i_1_n_0),
        .m0_piperun(m0_piperun),
        .m0_sel_barrel_res(m0_sel_barrel_res),
        .\m1_M0_Result_i_reg[0] (DATA_FLOW_I1_n_249),
        .\m1_M0_Result_i_reg[10] (DATA_FLOW_I1_n_376),
        .\m1_M0_Result_i_reg[11] (DATA_FLOW_I1_n_378),
        .\m1_M0_Result_i_reg[12] (DATA_FLOW_I1_n_379),
        .\m1_M0_Result_i_reg[13] (DATA_FLOW_I1_n_381),
        .\m1_M0_Result_i_reg[14] (DATA_FLOW_I1_n_383),
        .\m1_M0_Result_i_reg[15] (DATA_FLOW_I1_n_386),
        .\m1_M0_Result_i_reg[16] (DATA_FLOW_I1_n_269),
        .\m1_M0_Result_i_reg[1] (DATA_FLOW_I1_n_358),
        .\m1_M0_Result_i_reg[25] (DATA_FLOW_I1_n_276),
        .\m1_M0_Result_i_reg[29] (DATA_FLOW_I1_n_389),
        .\m1_M0_Result_i_reg[2] (DATA_FLOW_I1_n_359),
        .\m1_M0_Result_i_reg[30] (DATA_FLOW_I1_n_392),
        .\m1_M0_Result_i_reg[31] (DATA_FLOW_I1_n_393),
        .\m1_M0_Result_i_reg[3] (DATA_FLOW_I1_n_362),
        .\m1_M0_Result_i_reg[4] (DATA_FLOW_I1_n_364),
        .\m1_M0_Result_i_reg[5] (DATA_FLOW_I1_n_365),
        .\m1_M0_Result_i_reg[6] (DATA_FLOW_I1_n_368),
        .\m1_M0_Result_i_reg[7] (DATA_FLOW_I1_n_370),
        .\m1_M0_Result_i_reg[8] (DATA_FLOW_I1_n_371),
        .\m1_M0_Result_i_reg[9] (DATA_FLOW_I1_n_373),
        .m1_byte_access(m1_byte_access),
        .m1_doublet_access(m1_doublet_access),
        .m1_m0_sel_res(\Data_Flow_Logic_I1/m1_m0_sel_res ),
        .m1_m0_sel_res0(\Data_Flow_Logic_I1/m1_m0_sel_res0 ),
        .\m1_op3_reg[24] ({D[299:292],D[283:268],D[264:261]}),
        .\m1_op3_reg[8] ({\Byte_Doublet_Handle_I1/m1_op3 [8],\Byte_Doublet_Handle_I1/m1_op3 [9],\Byte_Doublet_Handle_I1/m1_op3 [10],\Byte_Doublet_Handle_I1/m1_op3 [11],\Byte_Doublet_Handle_I1/m1_op3 [12],\Byte_Doublet_Handle_I1/m1_op3 [13],\Byte_Doublet_Handle_I1/m1_op3 [14],\Byte_Doublet_Handle_I1/m1_op3 [15]}),
        .m1_piperun(m1_piperun),
        .m1_sel_mul_res(m1_sel_mul_res),
        .m1_unaligned_addr_3lsb(\Byte_Doublet_Handle_I1/m1_unaligned_addr_3lsb ),
        .\m2_M1_Result_i_reg[29] (DATA_FLOW_I1_n_241),
        .\m2_M1_Result_i_reg[30] (DATA_FLOW_I1_n_242),
        .\m2_M1_Result_i_reg[31] (DATA_FLOW_I1_n_243),
        .m2_is_div_instr(m2_is_div_instr),
        .m2_m1_sel_res0(\Data_Flow_Logic_I1/m2_m1_sel_res0 ),
        .m2_m1_sel_res_reg(DATA_FLOW_I1_n_267),
        .m2_m1_sel_res_reg_0(DATA_FLOW_I1_n_273),
        .m2_m1_sel_res_reg_1({\Operand_Select_I1/of_branch_cmp [0],\Operand_Select_I1/of_branch_cmp [1],\Operand_Select_I1/of_branch_cmp [2],\Operand_Select_I1/of_branch_cmp [3],\Operand_Select_I1/of_branch_cmp [4],\Operand_Select_I1/of_branch_cmp [5],\Operand_Select_I1/of_branch_cmp [6],\Operand_Select_I1/of_branch_cmp [7],\Operand_Select_I1/of_branch_cmp [8],\Operand_Select_I1/of_branch_cmp [9],\Operand_Select_I1/of_branch_cmp [10],\Operand_Select_I1/of_branch_cmp [11],\Operand_Select_I1/of_branch_cmp [12],\Operand_Select_I1/of_branch_cmp [13],\Operand_Select_I1/of_branch_cmp [14],\Operand_Select_I1/of_branch_cmp [15],\Operand_Select_I1/of_branch_cmp [16],\Operand_Select_I1/of_branch_cmp [17],\Operand_Select_I1/of_branch_cmp [18],\Operand_Select_I1/of_branch_cmp [19],\Operand_Select_I1/of_branch_cmp [20],\Operand_Select_I1/of_branch_cmp [21],\Operand_Select_I1/of_branch_cmp [22],\Operand_Select_I1/of_branch_cmp [23],\Operand_Select_I1/of_branch_cmp [24],\Operand_Select_I1/of_branch_cmp [25],\Operand_Select_I1/of_branch_cmp [26],\Operand_Select_I1/of_branch_cmp [27],\Operand_Select_I1/of_branch_cmp [28]}),
        .m2_m1_sel_res_reg_2(DATA_FLOW_I1_n_310),
        .m2_piperun(m2_piperun),
        .\m3_databus_write_data_i_reg[0] (D[227:192]),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow(m3_div_overflow),
        .m3_div_overflow_i_reg(DATA_FLOW_I1_n_311),
        .m3_div_overflow_i_reg_0(DECODE_I1_n_431),
        .m3_div_overflow_i_reg_1(DECODE_I1_n_1),
        .m3_div_stall(m3_div_stall),
        .m3_div_stall_i_reg(DATA_FLOW_I1_n_256),
        .m3_div_stall_i_reg_0(m3_div_stall_i_i_1_n_0),
        .m3_div_zero_overflow_ex_hold(m3_div_zero_overflow_ex_hold),
        .m3_last_cycle_reg(DATA_FLOW_I1_n_520),
        .m3_m2_sel_res(\Data_Flow_Logic_I1/m3_m2_sel_res ),
        .m3_msr(m3_msr),
        .m3_piperun(m3_piperun),
        .m3_sel_div_res(m3_sel_div_res),
        .make_result_neg(\Using_Div_Unit.Div_Unit_I1/make_result_neg ),
        .make_result_neg_reg(make_result_neg_i_1_n_0),
        .negative_operands(\Using_Div_Unit.Div_Unit_I1/negative_operands ),
        .negative_operands_reg(DATA_FLOW_I1_n_314),
        .negative_operands_reg_0(negative_operands_i_1_n_0),
        .next_sub(\Using_Div_Unit.Div_Unit_I1/next_sub ),
        .next_sub_reg(next_sub_i_1_n_0),
        .\of_MSR_i_reg[17] ({DECODE_I1_n_433,DECODE_I1_n_434,DECODE_I1_n_435,DECODE_I1_n_436,DECODE_I1_n_437,\MSR_I1/ex_MSR_cmb_no_restore [22],\MSR_I1/ex_MSR_cmb_no_restore [23],DECODE_I1_n_440,DECODE_I1_n_441,DECODE_I1_n_442,DECODE_I1_n_443,\MSR_I1/ex_MSR_cmb_no_restore [28],DECODE_I1_n_445,\MSR_I1/ex_MSR_cmb_no_restore [30],DECODE_I1_n_447}),
        .\of_MSR_i_reg[22] ({\MSR_I1/of_MSR_i [22],\MSR_I1/of_MSR_i [23],DATA_FLOW_I1_n_93,of_MSR_i[28],of_MSR_i[30]}),
        .\of_MSR_i_reg[22]_0 ({DECODE_I1_n_309,DECODE_I1_n_310,DECODE_I1_n_311,of_msr}),
        .\of_MSR_i_reg[25] ({\MSR_I1/p_0_in [6],\MSR_I1/p_0_in [1]}),
        .\of_MSR_i_reg[25]_0 ({\MSR_I1/of_MSR_cmb [25],\MSR_I1/of_MSR_cmb [30]}),
        .of_op1_sel({of_op1_sel[1],of_op1_sel[2]}),
        .of_op2_sel(of_op2_sel),
        .of_op3_sel(of_op3_sel),
        .of_piperun(of_piperun),
        .out(DATA_FLOW_I1_n_52),
        .read_register_MSR_1(read_register_MSR_1),
        .sync_reset(sync_reset),
        .\trace_new_reg_value_i_reg[15] (DECODE_I1_n_480),
        .\trace_new_reg_value_i_reg[16] (DLMB_Interface_I1_n_43),
        .\trace_new_reg_value_i_reg[17] (DLMB_Interface_I1_n_42),
        .\trace_new_reg_value_i_reg[18] (DLMB_Interface_I1_n_41),
        .\trace_new_reg_value_i_reg[19] (DLMB_Interface_I1_n_40),
        .\trace_new_reg_value_i_reg[20] (DLMB_Interface_I1_n_39),
        .\trace_new_reg_value_i_reg[21] (DLMB_Interface_I1_n_38),
        .\trace_new_reg_value_i_reg[22] (DLMB_Interface_I1_n_37),
        .\trace_new_reg_value_i_reg[23] (DLMB_Interface_I1_n_36),
        .\trace_new_reg_value_i_reg[24] (DLMB_Interface_I1_n_35),
        .\trace_new_reg_value_i_reg[25] (DLMB_Interface_I1_n_34),
        .\trace_new_reg_value_i_reg[26] (DLMB_Interface_I1_n_33),
        .\trace_new_reg_value_i_reg[27] (DLMB_Interface_I1_n_32),
        .\trace_new_reg_value_i_reg[28] (DLMB_Interface_I1_n_31),
        .\trace_new_reg_value_i_reg[29] (DLMB_Interface_I1_n_30),
        .\trace_new_reg_value_i_reg[30] (DLMB_Interface_I1_n_29),
        .\trace_new_reg_value_i_reg[31] (DLMB_Interface_I1_n_12),
        .wb_MSR_i({\MSR_I1/wb_MSR_i [17],\MSR_I1/wb_MSR_i [18],\MSR_I1/wb_MSR_i [19],\MSR_I1/wb_MSR_i [20],\MSR_I1/wb_MSR_i [21],\MSR_I1/wb_MSR_i [22],\MSR_I1/wb_MSR_i [23],\MSR_I1/wb_MSR_i [24],\MSR_I1/wb_MSR_i [26],\MSR_I1/wb_MSR_i [27],\MSR_I1/wb_MSR_i [31]}),
        .\wb_PC_i_reg[0] ({wb_pc[0],wb_pc[1],wb_pc[2],wb_pc[3],wb_pc[4],wb_pc[5],wb_pc[6],wb_pc[7],wb_pc[8],wb_pc[9],wb_pc[10],wb_pc[11],wb_pc[12],wb_pc[13],wb_pc[14],wb_pc[15],wb_pc[16],wb_pc[17],wb_pc[18],wb_pc[19],wb_pc[20],wb_pc[21],wb_pc[22],wb_pc[23],wb_pc[24],wb_pc[25],wb_pc[26],wb_pc[27],wb_pc[28],wb_pc[29],wb_pc[30],wb_pc[31]}),
        .\wb_PC_i_reg[0]_0 ({m3_pc[0],m3_pc[1],m3_pc[2],m3_pc[3],m3_pc[4],m3_pc[5],m3_pc[6],m3_pc[7],m3_pc[8],m3_pc[9],m3_pc[10],m3_pc[11],m3_pc[12],m3_pc[13],m3_pc[14],m3_pc[15],m3_pc[16],m3_pc[17],m3_pc[18],m3_pc[19],m3_pc[20],m3_pc[21],m3_pc[22],m3_pc[23],m3_pc[24],m3_pc[25],m3_pc[26],m3_pc[27],m3_pc[28],m3_pc[29],m3_pc[30],m3_pc[31]}),
        .\wb_PC_i_reg[31] (\exception_registers_I1/wb_PC_i0 ),
        .wb_byte_access(wb_byte_access),
        .wb_databus_read_data({wb_databus_read_data[0],wb_databus_read_data[1],wb_databus_read_data[2],wb_databus_read_data[3],wb_databus_read_data[4],wb_databus_read_data[5],wb_databus_read_data[6],wb_databus_read_data[7],wb_databus_read_data[8],wb_databus_read_data[9],wb_databus_read_data[10],wb_databus_read_data[11],wb_databus_read_data[12],wb_databus_read_data[13],wb_databus_read_data[14],wb_databus_read_data[15]}),
        .wb_div_zero_overflow(wb_div_zero_overflow),
        .wb_exception_from_m3_reg_rep__0({\MSR_I1/p_1_in [6],\MSR_I1/p_1_in [1]}),
        .wb_exception_from_m3_reg_rep__0_0(DATA_FLOW_I1_n_244),
        .wb_exception_taken(wb_exception_taken),
        .wb_fwd(wb_fwd),
        .wb_gpr_wr(wb_gpr_wr),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .wb_m3_sel_res0(\Data_Flow_Logic_I1/wb_m3_sel_res0 ),
        .wb_msr({wb_msr[25],wb_msr[28],wb_msr[29],wb_msr[30]}),
        .wb_msr_clear_bip(wb_msr_clear_bip));
  microblaze_microblaze_0_0_DAXI_interface_ff DAXI_interface_I1
       (.Clk(Clk),
        .D({D[260:229],D[227:192],D[190:188]}),
        .DReady(DReady),
        .DWait(DWait),
        .\LOCKSTEP_Out_reg[721] (DLMB_Interface_I1_n_2),
        .M_AXI_DP_ARREADY(M_AXI_DP_ARREADY),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RDATA(M_AXI_DP_RDATA),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .Q({wb_daxi_valid_read_data[0],wb_daxi_valid_read_data[1],wb_daxi_valid_read_data[2],wb_daxi_valid_read_data[3],wb_daxi_valid_read_data[4],wb_daxi_valid_read_data[5],wb_daxi_valid_read_data[6],wb_daxi_valid_read_data[7],wb_daxi_valid_read_data[8],wb_daxi_valid_read_data[9],wb_daxi_valid_read_data[10],wb_daxi_valid_read_data[11],wb_daxi_valid_read_data[12],wb_daxi_valid_read_data[13],wb_daxi_valid_read_data[14],wb_daxi_valid_read_data[15],wb_daxi_valid_read_data[16],wb_daxi_valid_read_data[17],wb_daxi_valid_read_data[18],wb_daxi_valid_read_data[19],wb_daxi_valid_read_data[20],wb_daxi_valid_read_data[21],wb_daxi_valid_read_data[22],wb_daxi_valid_read_data[23],wb_daxi_valid_read_data[24],wb_daxi_valid_read_data[25],wb_daxi_valid_read_data[26],wb_daxi_valid_read_data[27],wb_daxi_valid_read_data[28],wb_daxi_valid_read_data[29],wb_daxi_valid_read_data[30],wb_daxi_valid_read_data[31]}),
        .S(\Using_Ready_FPGA.Rdy_Or1/carry_or_i1/S ),
        .\Use_DAXI.M_AXI_DP_ARADDR_reg[1]_0 (\Byte_Doublet_Handle_I1/m1_unaligned_addr_3lsb ),
        .\Use_DAXI.M_AXI_DP_ARADDR_reg[31]_0 ({D[331:302],D[299:268],D[264:261]}),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 (DAXI_interface_I1_n_75),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 (DECODE_I1_n_165),
        .\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg_0 (DAXI_interface_I1_n_72),
        .\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg_1 (DECODE_I1_n_163),
        .\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 (DAXI_interface_I1_n_76),
        .\Use_DAXI.M_AXI_DP_BREADY_I_reg_1 (DAXI_interface_I1_n_78),
        .\Use_DAXI.M_AXI_DP_BREADY_I_reg_2 (DECODE_I1_n_235),
        .\Use_DAXI.M_AXI_DP_RREADY_I_reg_0 (DECODE_I1_n_236),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 (DAXI_interface_I1_n_73),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 (DECODE_I1_n_164),
        .\Use_DAXI.m2_active_access_unmasked_reg_0 (DAXI_interface_I1_n_74),
        .\Use_DAXI.m2_active_access_unmasked_reg_1 (DECODE_I1_n_233),
        .\Use_DAXI.wb_data_has_been_used_reg_0 (DECODE_I1_n_160),
        .\Using_FPGA.Native (DECODE_I1_n_52),
        .\Using_FPGA.Native_0 (DECODE_I1_n_126),
        .\Using_FPGA.Native_1 (DECODE_I1_n_51),
        .m1_piperun(m1_piperun),
        .m2_active_access(m2_active_access),
        .m2_allow_dready(m2_allow_dready),
        .m2_databus_access_i_reg(DAXI_interface_I1_n_79),
        .m2_dlmb_drop_request(m2_dlmb_drop_request),
        .m2_piperun(m2_piperun),
        .m3_active_access(m3_active_access),
        .m3_piperun(m3_piperun),
        .m3_sel_load_res(m3_sel_load_res),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_Decode_ff DECODE_I1
       (.ADDRD({wb_gpr_wr_addr[0],wb_gpr_wr_addr[1],wb_gpr_wr_addr[2],wb_gpr_wr_addr[3],wb_gpr_wr_addr[4]}),
        .Clk(Clk),
        .D({D[366:332],D[301:300],D[291:284],D[267:265]}),
        .DI(DECODE_I1_n_334),
        .DI_3(\ALU_I1/DI ),
        .DReady(DReady),
        .DWait(DWait),
        .D_1(\MSR_I1/D ),
        .E(\Using_Div_Unit.Div_Unit_I1/div_busy ),
        .\EX_ALU_Op_reg[0]_0 ({ex_alu_op[0],ex_alu_op[1]}),
        .EX_Bit_Extract_reg_0(DECODE_I1_n_231),
        .EX_Bit_Insert_reg_0(DECODE_I1_n_211),
        .EX_Bit_Insert_reg_1({\Barrel_Shifter_I/p_31_out [31],DECODE_I1_n_213,\Barrel_Shifter_I/p_31_out [26],DECODE_I1_n_215,DECODE_I1_n_216,DECODE_I1_n_217,DECODE_I1_n_218,DECODE_I1_n_219,\Barrel_Shifter_I/p_31_out [18:17],DECODE_I1_n_222,\Barrel_Shifter_I/p_31_out [15],\Barrel_Shifter_I/p_31_out [11:8],\Barrel_Shifter_I/p_31_out [3],\Barrel_Shifter_I/p_31_out [1:0]}),
        .\EX_Branch_CMP_Op1[29]_i_3 (DECODE_I1_n_419),
        .\EX_Branch_CMP_Op1[30]_i_3 (DECODE_I1_n_420),
        .\EX_Branch_CMP_Op1_reg[29] (DATA_FLOW_I1_n_389),
        .\EX_Branch_CMP_Op1_reg[29]_0 (DATA_FLOW_I1_n_390),
        .\EX_Branch_CMP_Op1_reg[30] (DATA_FLOW_I1_n_310),
        .\EX_Branch_CMP_Op1_reg[30]_0 (DATA_FLOW_I1_n_392),
        .\EX_Branch_CMP_Op1_reg[30]_1 (DATA_FLOW_I1_n_391),
        .EX_CLZ_Instr_reg_0(DECODE_I1_n_335),
        .EX_CarryIn(EX_CarryIn),
        .EX_Enable_ALU(ex_enable_alu),
        .EX_Enable_Sext_Shift_reg_0(DECODE_I1_n_209),
        .EX_Enable_Sext_Shift_reg_1(DECODE_I1_n_210),
        .EX_Enable_Sext_Shift_reg_2({ex_fwd[0],ex_fwd[1],ex_fwd[2],ex_fwd[3],ex_fwd[4],ex_fwd[5],ex_fwd[6],ex_fwd[7],ex_fwd[8],ex_fwd[9],ex_fwd[10],ex_fwd[11],ex_fwd[12],ex_fwd[13],ex_fwd[14],ex_fwd[15],ex_fwd[30]}),
        .\EX_Logic_Op_reg[0]_0 ({ex_logic_op[0],ex_logic_op[1],p_1_in106_in,p_0_in105_in}),
        .\EX_Op1[29]_i_5 (DATA_FLOW_I1_n_388),
        .\EX_Op1[29]_i_5_0 (DATA_FLOW_I1_n_245),
        .\EX_Op1[29]_i_5_1 (DATA_FLOW_I1_n_346),
        .\EX_Op1[30]_i_5 (DATA_FLOW_I1_n_349),
        .\EX_Op1[30]_i_5_0 (DATA_FLOW_I1_n_248),
        .\EX_Op1[30]_i_5_1 (DATA_FLOW_I1_n_348),
        .EX_Op1_CMP_Equal(ex_op1_cmp_equal),
        .EX_Op1_Zero(ex_op1_zero),
        .\EX_Op1_reg[0] ({\Operand_Select_I1/of_branch_cmp [0],\Operand_Select_I1/of_branch_cmp [1],\Operand_Select_I1/of_branch_cmp [2],\Operand_Select_I1/of_branch_cmp [3],\Operand_Select_I1/of_branch_cmp [4],\Operand_Select_I1/of_branch_cmp [5],\Operand_Select_I1/of_branch_cmp [6],\Operand_Select_I1/of_branch_cmp [7],\Operand_Select_I1/of_branch_cmp [8],\Operand_Select_I1/of_branch_cmp [9],\Operand_Select_I1/of_branch_cmp [10],\Operand_Select_I1/of_branch_cmp [11],\Operand_Select_I1/of_branch_cmp [12],\Operand_Select_I1/of_branch_cmp [13],\Operand_Select_I1/of_branch_cmp [14],\Operand_Select_I1/of_branch_cmp [15],\Operand_Select_I1/of_branch_cmp [16],\Operand_Select_I1/of_branch_cmp [17],\Operand_Select_I1/of_branch_cmp [18],\Operand_Select_I1/of_branch_cmp [19],\Operand_Select_I1/of_branch_cmp [20],\Operand_Select_I1/of_branch_cmp [21],\Operand_Select_I1/of_branch_cmp [22],\Operand_Select_I1/of_branch_cmp [23],\Operand_Select_I1/of_branch_cmp [24],\Operand_Select_I1/of_branch_cmp [25],\Operand_Select_I1/of_branch_cmp [26],\Operand_Select_I1/of_branch_cmp [27],\Operand_Select_I1/of_branch_cmp [28]}),
        .\EX_Op1_reg[1] (DECODE_I1_n_520),
        .\EX_Op1_reg[27] (DECODE_I1_n_512),
        .\EX_Op1_reg[28] (DECODE_I1_n_511),
        .\EX_Op1_reg[29] (DATA_FLOW_I1_n_241),
        .\EX_Op1_reg[29]_0 (DATA_FLOW_I1_n_315),
        .\EX_Op1_reg[30] (DECODE_I1_n_518),
        .\EX_Op1_reg[30]_0 (DATA_FLOW_I1_n_242),
        .\EX_Op1_reg[31] (DECODE_I1_n_522),
        .\EX_Op1_reg[31]_0 (DATA_FLOW_I1_n_243),
        .\EX_Op1_reg[31]_1 (DATA_FLOW_I1_n_351),
        .\EX_Op1_reg[3] (DECODE_I1_n_519),
        .\EX_Op2[0]_i_4 ({\Operand_Select_I1/imm_reg [0],\Operand_Select_I1/imm_reg [1],\Operand_Select_I1/imm_reg [2],\Operand_Select_I1/imm_reg [3],\Operand_Select_I1/imm_reg [4],\Operand_Select_I1/imm_reg [5],\Operand_Select_I1/imm_reg [6],\Operand_Select_I1/imm_reg [7],\Operand_Select_I1/imm_reg [8],\Operand_Select_I1/imm_reg [9],\Operand_Select_I1/imm_reg [10],\Operand_Select_I1/imm_reg [11],\Operand_Select_I1/imm_reg [12],\Operand_Select_I1/imm_reg [13],\Operand_Select_I1/imm_reg [14],\Operand_Select_I1/imm_reg [15]}),
        .\EX_Op2[0]_i_6 (DECODE_I1_n_371),
        .\EX_Op2[0]_i_7 (DECODE_I1_n_372),
        .\EX_Op2[16]_i_2 ({ex_fwd[16],ex_fwd[17],ex_fwd[18],ex_fwd[20],ex_fwd[21],ex_fwd[29],ex_fwd[31]}),
        .\EX_Op2[25]_i_2 (DATA_FLOW_I1_n_356),
        .\EX_Op2_reg[0] (DATA_FLOW_I1_n_249),
        .\EX_Op2_reg[0]_0 (DATA_FLOW_I1_n_250),
        .\EX_Op2_reg[10] (DATA_FLOW_I1_n_376),
        .\EX_Op2_reg[10]_0 (DATA_FLOW_I1_n_375),
        .\EX_Op2_reg[11] (DATA_FLOW_I1_n_378),
        .\EX_Op2_reg[11]_0 (DATA_FLOW_I1_n_377),
        .\EX_Op2_reg[12] (DATA_FLOW_I1_n_379),
        .\EX_Op2_reg[12]_0 (DATA_FLOW_I1_n_380),
        .\EX_Op2_reg[13] (DATA_FLOW_I1_n_381),
        .\EX_Op2_reg[13]_0 (DATA_FLOW_I1_n_382),
        .\EX_Op2_reg[14] (DATA_FLOW_I1_n_383),
        .\EX_Op2_reg[14]_0 (DATA_FLOW_I1_n_384),
        .\EX_Op2_reg[15] (DATA_FLOW_I1_n_386),
        .\EX_Op2_reg[15]_0 (DATA_FLOW_I1_n_385),
        .\EX_Op2_reg[16] (DATA_FLOW_I1_n_269),
        .\EX_Op2_reg[17] ({DECODE_I1_n_433,DECODE_I1_n_434,DECODE_I1_n_435,DECODE_I1_n_436,DECODE_I1_n_437,\MSR_I1/ex_MSR_cmb_no_restore [22],\MSR_I1/ex_MSR_cmb_no_restore [23],DECODE_I1_n_440,DECODE_I1_n_441,DECODE_I1_n_442,DECODE_I1_n_443,\MSR_I1/ex_MSR_cmb_no_restore [28],DECODE_I1_n_445,\MSR_I1/ex_MSR_cmb_no_restore [30],DECODE_I1_n_447}),
        .\EX_Op2_reg[17]_0 (DATA_FLOW_I1_n_274),
        .\EX_Op2_reg[18] (DATA_FLOW_I1_n_270),
        .\EX_Op2_reg[1] (DATA_FLOW_I1_n_358),
        .\EX_Op2_reg[1]_0 (DATA_FLOW_I1_n_357),
        .\EX_Op2_reg[20] (DATA_FLOW_I1_n_275),
        .\EX_Op2_reg[21] (DATA_FLOW_I1_n_271),
        .\EX_Op2_reg[25] (DATA_FLOW_I1_n_276),
        .\EX_Op2_reg[29] ({DECODE_I1_n_481,DECODE_I1_n_482,DECODE_I1_n_483,DECODE_I1_n_484,DECODE_I1_n_485,DECODE_I1_n_486,DECODE_I1_n_487,DECODE_I1_n_488,DECODE_I1_n_489,DECODE_I1_n_490,DECODE_I1_n_491,DECODE_I1_n_492,DECODE_I1_n_493,DECODE_I1_n_494,DECODE_I1_n_495,DECODE_I1_n_496,DECODE_I1_n_497,DECODE_I1_n_498,DECODE_I1_n_499,DECODE_I1_n_500,DECODE_I1_n_501,DECODE_I1_n_502,DECODE_I1_n_503,DECODE_I1_n_504,DECODE_I1_n_505,DECODE_I1_n_506,DECODE_I1_n_507,DECODE_I1_n_508}),
        .\EX_Op2_reg[29]_0 (DATA_FLOW_I1_n_272),
        .\EX_Op2_reg[29]_1 (DATA_FLOW_I1_n_266),
        .\EX_Op2_reg[2] (DATA_FLOW_I1_n_359),
        .\EX_Op2_reg[2]_0 (DATA_FLOW_I1_n_360),
        .\EX_Op2_reg[30] (DATA_FLOW_I1_n_277),
        .\EX_Op2_reg[31] (DECODE_I1_n_516),
        .\EX_Op2_reg[31]_0 (DECODE_I1_n_517),
        .\EX_Op2_reg[31]_1 (DATA_FLOW_I1_n_394),
        .\EX_Op2_reg[31]_2 (DATA_FLOW_I1_n_393),
        .\EX_Op2_reg[31]_3 (DATA_FLOW_I1_n_352),
        .\EX_Op2_reg[31]_4 (DATA_FLOW_I1_n_273),
        .\EX_Op2_reg[3] (DATA_FLOW_I1_n_362),
        .\EX_Op2_reg[3]_0 (DATA_FLOW_I1_n_361),
        .\EX_Op2_reg[4] (DATA_FLOW_I1_n_364),
        .\EX_Op2_reg[4]_0 (DATA_FLOW_I1_n_363),
        .\EX_Op2_reg[5] (DATA_FLOW_I1_n_365),
        .\EX_Op2_reg[5]_0 (DATA_FLOW_I1_n_366),
        .\EX_Op2_reg[6] (DATA_FLOW_I1_n_368),
        .\EX_Op2_reg[6]_0 (DATA_FLOW_I1_n_367),
        .\EX_Op2_reg[7] (DATA_FLOW_I1_n_370),
        .\EX_Op2_reg[7]_0 (DATA_FLOW_I1_n_369),
        .\EX_Op2_reg[8] (DATA_FLOW_I1_n_371),
        .\EX_Op2_reg[8]_0 (DATA_FLOW_I1_n_372),
        .\EX_Op2_reg[9] (DATA_FLOW_I1_n_373),
        .\EX_Op2_reg[9]_0 (DATA_FLOW_I1_n_374),
        .\EX_Op3[0]_i_6 (DECODE_I1_n_337),
        .\EX_Op3[0]_i_7 (DECODE_I1_n_338),
        .\EX_Op3[30]_i_2 (DATA_FLOW_I1_n_350),
        .\EX_Op3[31]_i_3 (DATA_FLOW_I1_n_355),
        .\EX_Op3[31]_i_3_0 (DATA_FLOW_I1_n_353),
        .\EX_Op3_reg[30] (DATA_FLOW_I1_n_268),
        .\EX_Op3_reg[31] (DATA_FLOW_I1_n_267),
        .EX_Pattern_Cmp_Sel_reg_0(DECODE_I1_n_509),
        .\EX_Sext_Op_reg[0]_0 ({ex_sext_op[0],ex_sext_op[1]}),
        .\EX_Sext_Op_reg[1]_0 (DECODE_I1_n_510),
        .GPR_Op1({gpr_op1[29],gpr_op1[30],gpr_op1[31]}),
        .GPR_Op2(gpr_op2),
        .GPR_Op3({gpr_op3[30],gpr_op3[31]}),
        .Hibernate(Hibernate),
        .IWAIT(IWAIT),
        .Interrupt(Interrupt),
        .Interrupt_Ack(Interrupt_Ack),
        .LO(ex_alu_carry_32),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[37],LOCKSTEP_Master_Out[35]}),
        .M1_Sel_Mul_Res_reg_0(DECODE_I1_n_368),
        .M1_Sel_Mul_Res_reg_1(DECODE_I1_n_383),
        .M1_Sel_Mul_Res_reg_2(M1_Sel_Mul_Res_i_1_n_0),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .Pause(Pause),
        .Pause_Ack(Pause_Ack),
        .\Performance_Debug_Control.dbg_freeze_nohalt_reg (\Use_Debug_Logic.Master_Core.Debug_Perf_n_42 ),
        .\Performance_Debug_Control.ex_brki_hit_reg (\Use_Debug_Logic.Master_Core.Debug_Perf_n_57 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg (\Use_Debug_Logic.Master_Core.Debug_Perf_n_53 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_50 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg (DECODE_I1_n_171),
        .Q({of_gpr_op3_rd_addr[0],of_gpr_op3_rd_addr[1],of_gpr_op3_rd_addr[2],of_gpr_op3_rd_addr[3],of_gpr_op3_rd_addr[4],of_gpr_op1_rd_addr[0],of_gpr_op1_rd_addr[1],of_gpr_op1_rd_addr[2],of_gpr_op1_rd_addr[3],of_gpr_op1_rd_addr[4],of_gpr_op2_rd_addr[0],of_gpr_op2_rd_addr[1],of_gpr_op2_rd_addr[2],of_gpr_op2_rd_addr[3],of_gpr_op2_rd_addr[4],of_imm_data[5],of_imm_data[6],of_imm_data[7],of_imm_data[8],of_imm_data[9],of_imm_data[10],of_imm_data[11],of_imm_data[12],of_imm_data[13],of_imm_data[14],of_imm_data[15]}),
        .\Q_reg[32] (DATA_FLOW_I1_n_520),
        .S({DECODE_I1_n_205,DECODE_I1_n_206,DECODE_I1_n_207,DECODE_I1_n_208}),
        .SR(\Using_Div_Unit.Div_Unit_I1/reset_Q ),
        .S_0(\Using_IF1_Insert_FPGA_No_MMU.PR_IF1_Ins_Or1/carry_or_i1/S ),
        .S_2(\ALU_I1/Using_FPGA.ALL_Bits[0].ALU_Bit_I1/S ),
        .\Serial_Dbg_Intf.control_reg_reg[8] (DECODE_I1_n_152),
        .Sleep(Sleep),
        .Sleep_Decode(Sleep_Decode),
        .Sleep_Out(Sleep_Out),
        .Suspend(Suspend),
        .\Use_Async_Reset.sync_reset_reg (DECODE_I1_n_1),
        .\Use_Async_Reset.sync_reset_reg_0 (DECODE_I1_n_160),
        .\Use_Async_Reset.sync_reset_reg_1 (DECODE_I1_n_161),
        .\Use_Async_Reset.sync_reset_reg_2 (DECODE_I1_n_162),
        .\Use_Async_Reset.sync_reset_reg_3 (DECODE_I1_n_166),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg (DECODE_I1_n_165),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 (DAXI_interface_I1_n_75),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 (DAXI_interface_I1_n_76),
        .\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg (DAXI_interface_I1_n_72),
        .\Use_DAXI.M_AXI_DP_BREADY_I_reg (DECODE_I1_n_235),
        .\Use_DAXI.M_AXI_DP_RREADY_I_reg (DECODE_I1_n_236),
        .\Use_DAXI.M_AXI_DP_RREADY_I_reg_0 (DAXI_interface_I1_n_74),
        .\Use_DAXI.M_AXI_DP_WDATA_reg[23] ({D[275:268],D[190],D[188]}),
        .\Use_DAXI.M_AXI_DP_WDATA_reg[23]_0 ({\Byte_Doublet_Handle_I1/m1_op3 [8],\Byte_Doublet_Handle_I1/m1_op3 [9],\Byte_Doublet_Handle_I1/m1_op3 [10],\Byte_Doublet_Handle_I1/m1_op3 [11],\Byte_Doublet_Handle_I1/m1_op3 [12],\Byte_Doublet_Handle_I1/m1_op3 [13],\Byte_Doublet_Handle_I1/m1_op3 [14],\Byte_Doublet_Handle_I1/m1_op3 [15]}),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg (DLMB_Interface_I1_n_5),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 (DAXI_interface_I1_n_73),
        .\Use_DLMB.m1_dlmb_issued_reg (DECODE_I1_n_238),
        .\Use_DLMB.m2_dready_hold_reg (DLMB_Interface_I1_n_11),
        .\Use_DLMB.m2_potential_bubble_reg (DECODE_I1_n_159),
        .\Use_HW_BS.Using_BitField.mem_mask0_reg[15] (DATA_FLOW_I1_n_254),
        .\Use_HW_BS.Using_BitField.mem_mask0_reg[15]_0 (DATA_FLOW_I1_n_395),
        .\Use_HW_BS.Using_BitField.mem_mask0_reg[6] (DATA_FLOW_I1_n_396),
        .\Use_HW_BS.Using_BitField.mem_mask0_reg[9] (DATA_FLOW_I1_n_255),
        .\Use_HW_BS.mem_mux3_reg[28] ({DATA_FLOW_I1_n_20,DATA_FLOW_I1_n_21,DATA_FLOW_I1_n_22,DATA_FLOW_I1_n_23,DATA_FLOW_I1_n_24,DATA_FLOW_I1_n_25,DATA_FLOW_I1_n_26,DATA_FLOW_I1_n_27,DATA_FLOW_I1_n_28,DATA_FLOW_I1_n_29,DATA_FLOW_I1_n_30,DATA_FLOW_I1_n_31,DATA_FLOW_I1_n_32,DATA_FLOW_I1_n_33,DATA_FLOW_I1_n_34,DATA_FLOW_I1_n_35,DATA_FLOW_I1_n_36,DATA_FLOW_I1_n_37,DATA_FLOW_I1_n_38,DATA_FLOW_I1_n_39,DATA_FLOW_I1_n_40,DATA_FLOW_I1_n_41,DATA_FLOW_I1_n_42,DATA_FLOW_I1_n_43,DATA_FLOW_I1_n_44,DATA_FLOW_I1_n_45,DATA_FLOW_I1_n_46,DATA_FLOW_I1_n_47,DATA_FLOW_I1_n_48,DATA_FLOW_I1_n_49,DATA_FLOW_I1_n_50,DATA_FLOW_I1_n_51}),
        .\Use_ILMB.if2_ilmb_issued_reg (DECODE_I1_n_237),
        .\Use_ILMB.if3_iready_hold_reg (ILMB_Interface_I1_n_37),
        .\Use_ILMB.if4_ILMB_Data_Strobe_i_reg (\Use_Debug_Logic.Master_Core.Debug_Perf_n_56 ),
        .\Using_FPGA.Native (DECODE_I1_n_37),
        .\Using_FPGA.Native_0 (of_write_imm_reg),
        .\Using_FPGA.Native_1 (DECODE_I1_n_300),
        .\Using_FPGA.Native_10 (DECODE_I1_n_455),
        .\Using_FPGA.Native_11 (DECODE_I1_n_456),
        .\Using_FPGA.Native_12 (DECODE_I1_n_457),
        .\Using_FPGA.Native_13 (DECODE_I1_n_458),
        .\Using_FPGA.Native_14 (DECODE_I1_n_460),
        .\Using_FPGA.Native_15 (DECODE_I1_n_461),
        .\Using_FPGA.Native_16 (DECODE_I1_n_462),
        .\Using_FPGA.Native_17 ({DECODE_I1_n_566,DECODE_I1_n_567,DECODE_I1_n_568,DECODE_I1_n_569,DECODE_I1_n_570,DECODE_I1_n_571,DECODE_I1_n_572,DECODE_I1_n_573,DECODE_I1_n_574,DECODE_I1_n_575,DECODE_I1_n_576,DECODE_I1_n_577,DECODE_I1_n_578,DECODE_I1_n_579,DECODE_I1_n_580,DECODE_I1_n_581,DECODE_I1_n_582,DECODE_I1_n_583,DECODE_I1_n_584,DECODE_I1_n_585,DECODE_I1_n_586,DECODE_I1_n_587,DECODE_I1_n_588,DECODE_I1_n_589,DECODE_I1_n_590,DECODE_I1_n_591,DECODE_I1_n_592,DECODE_I1_n_593,DECODE_I1_n_594,DECODE_I1_n_595,DECODE_I1_n_596}),
        .\Using_FPGA.Native_18 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_54 ),
        .\Using_FPGA.Native_19 (DAXI_interface_I1_n_79),
        .\Using_FPGA.Native_2 (DECODE_I1_n_430),
        .\Using_FPGA.Native_20 (DAXI_interface_I1_n_78),
        .\Using_FPGA.Native_21 ({ex_op2[0],ex_op2[17],ex_op2[18],ex_op2[19],ex_op2[20],ex_op2[21],ex_op2[22],ex_op2[23],ex_op2[24],ex_op2[25],ex_op2[26],ex_op2[27],DATA_FLOW_I1_n_16,DATA_FLOW_I1_n_17,DATA_FLOW_I1_n_18,DATA_FLOW_I1_n_19}),
        .\Using_FPGA.Native_22 (DATA_FLOW_I1_n_67),
        .\Using_FPGA.Native_23 (\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .\Using_FPGA.Native_24 (DLMB_Interface_I1_n_2),
        .\Using_FPGA.Native_25 (DATA_FLOW_I1_n_65),
        .\Using_FPGA.Native_26 (DATA_FLOW_I1_n_64),
        .\Using_FPGA.Native_27 (DATA_FLOW_I1_n_312),
        .\Using_FPGA.Native_28 (DATA_FLOW_I1_n_72),
        .\Using_FPGA.Native_29 (DATA_FLOW_I1_n_70),
        .\Using_FPGA.Native_3 (DECODE_I1_n_431),
        .\Using_FPGA.Native_30 (DATA_FLOW_I1_n_68),
        .\Using_FPGA.Native_31 (DATA_FLOW_I1_n_73),
        .\Using_FPGA.Native_32 (DATA_FLOW_I1_n_69),
        .\Using_FPGA.Native_33 (DATA_FLOW_I1_n_71),
        .\Using_FPGA.Native_34 (DATA_FLOW_I1_n_397),
        .\Using_FPGA.Native_35 (DATA_FLOW_I1_n_74),
        .\Using_FPGA.Native_36 (ex_op1_neg),
        .\Using_FPGA.Native_4 (DECODE_I1_n_432),
        .\Using_FPGA.Native_5 (DECODE_I1_n_448),
        .\Using_FPGA.Native_6 (DECODE_I1_n_449),
        .\Using_FPGA.Native_7 (DECODE_I1_n_451),
        .\Using_FPGA.Native_8 (DECODE_I1_n_452),
        .\Using_FPGA.Native_9 (DECODE_I1_n_454),
        .\Using_Mul_Instr.ex_not_mul_op_i_reg_0 (DECODE_I1_n_123),
        .WB_Div_Zero_Overflow_reg_0(DECODE_I1_n_459),
        .WB_Div_Zero_Overflow_reg_1(DECODE_I1_n_466),
        .WB_Div_Zero_Overflow_reg_2(DECODE_I1_n_467),
        .WB_Div_Zero_Overflow_reg_3(DECODE_I1_n_468),
        .WB_Div_Zero_Overflow_reg_4({\MSR_I1/of_MSR_cmb [25],\MSR_I1/of_MSR_cmb [30]}),
        .WB_Div_Zero_Overflow_reg_5(DECODE_I1_n_527),
        .WB_Div_Zero_Overflow_reg_6(DATA_FLOW_I1_n_244),
        .WB_Doublet_Access_reg_0(DECODE_I1_n_480),
        .WB_Doublet_Access_reg_1(DECODE_I1_n_515),
        .WB_Exception_Return_Addr0(\exception_registers_I1/WB_Exception_Return_Addr0 ),
        .\WB_Exception_Return_Addr_reg[16] (DECODE_I1_n_364),
        .\WB_Exception_Return_Addr_reg[17] (DECODE_I1_n_374),
        .\WB_Exception_Return_Addr_reg[18] (DECODE_I1_n_365),
        .\WB_Exception_Return_Addr_reg[20] (DECODE_I1_n_373),
        .\WB_Exception_Return_Addr_reg[21] (DECODE_I1_n_366),
        .\WB_Exception_Return_Addr_reg[25] (DECODE_I1_n_367),
        .WB_MSR_Clear_BIP_reg_0(DECODE_I1_n_528),
        .WB_MSR_Set_IE_reg_0(DATA_FLOW_I1_n_256),
        .active_wakeup(active_wakeup),
        .\bp0_branch_target_reg[0]_0 ({interrupt_address_d1[0],interrupt_address_d1[1],interrupt_address_d1[2],interrupt_address_d1[3],interrupt_address_d1[4],interrupt_address_d1[5],interrupt_address_d1[6],interrupt_address_d1[7],interrupt_address_d1[8],interrupt_address_d1[9],interrupt_address_d1[10],interrupt_address_d1[11],interrupt_address_d1[12],interrupt_address_d1[13],interrupt_address_d1[14],interrupt_address_d1[15],interrupt_address_d1[16],interrupt_address_d1[17],interrupt_address_d1[18],interrupt_address_d1[19],interrupt_address_d1[20],interrupt_address_d1[21],interrupt_address_d1[22],interrupt_address_d1[23],interrupt_address_d1[24],interrupt_address_d1[25],interrupt_address_d1[26],interrupt_address_d1[27],interrupt_address_d1[28],interrupt_address_d1[29],interrupt_address_d1[30],interrupt_address_d1[31]}),
        .\bp0_branch_target_reg[0]_1 ({ex_databus_addr[0],ex_databus_addr[1],ex_databus_addr[2],ex_databus_addr[3],ex_databus_addr[4],ex_databus_addr[5],ex_databus_addr[6],ex_databus_addr[7],ex_databus_addr[8],ex_databus_addr[9],ex_databus_addr[10],ex_databus_addr[11],ex_databus_addr[12],ex_databus_addr[13],ex_databus_addr[14],ex_databus_addr[15],ex_databus_addr[16],ex_databus_addr[17],ex_databus_addr[18],ex_databus_addr[19],ex_databus_addr[20],ex_databus_addr[21],ex_databus_addr[22],ex_databus_addr[23],ex_databus_addr[24],ex_databus_addr[25],ex_databus_addr[26],ex_databus_addr[27],ex_databus_addr[28],ex_databus_addr[29]}),
        .bp0_dead_fetch_hold(bp0_dead_fetch_hold),
        .bp0_raw_valid_reg_0(DECODE_I1_n_54),
        .bp0_raw_valid_reg_1(\Use_Debug_Logic.Master_Core.Debug_Perf_n_38 ),
        .bp0_raw_valid_reg_2(\Use_Debug_Logic.Master_Core.Debug_Perf_n_43 ),
        .bp1_dead_fetch_hold_bt(bp1_dead_fetch_hold_bt),
        .bp1_dead_fetch_hold_reg_0(DECODE_I1_n_316),
        .bp1_raw_valid_reg_0(DECODE_I1_n_36),
        .bp1_raw_valid_reg_1(DECODE_I1_n_38),
        .bp1_raw_valid_reg_2(bp1_raw_valid_i_1_n_0),
        .\cur_data_i_reg[12] (DECODE_I1_n_427),
        .\cur_data_i_reg[26] (DECODE_I1_n_172),
        .\cur_data_i_reg[31] ({of_pc[0],of_pc[1],of_pc[2],of_pc[3],of_pc[4],of_pc[5],of_pc[6],of_pc[7],of_pc[8],of_pc[9],of_pc[10],of_pc[11],of_pc[12],of_pc[13],of_pc[14],of_pc[15],of_pc[16],of_pc[17],of_pc[18],of_pc[19],of_pc[20],of_pc[21],of_pc[22],of_pc[23],of_pc[24],of_pc[25],of_pc[26],of_pc[27],of_pc[28],of_pc[29],of_pc[30],of_pc[31]}),
        .\cur_data_i_reg[31]_0 ({\Operand_Select_I1/of_op1 [0],\Operand_Select_I1/of_op1 [1],\Operand_Select_I1/of_op1 [2],\Operand_Select_I1/of_op1 [3],\Operand_Select_I1/of_op1 [4],\Operand_Select_I1/of_op1 [5],\Operand_Select_I1/of_op1 [6],\Operand_Select_I1/of_op1 [7],\Operand_Select_I1/of_op1 [8],\Operand_Select_I1/of_op1 [9],\Operand_Select_I1/of_op1 [10],\Operand_Select_I1/of_op1 [11],\Operand_Select_I1/of_op1 [12],\Operand_Select_I1/of_op1 [13],\Operand_Select_I1/of_op1 [14],\Operand_Select_I1/of_op1 [15],\Operand_Select_I1/of_op1 [16],\Operand_Select_I1/of_op1 [17],\Operand_Select_I1/of_op1 [18],\Operand_Select_I1/of_op1 [19],\Operand_Select_I1/of_op1 [20],\Operand_Select_I1/of_op1 [21],\Operand_Select_I1/of_op1 [22],\Operand_Select_I1/of_op1 [23],\Operand_Select_I1/of_op1 [24],\Operand_Select_I1/of_op1 [25],\Operand_Select_I1/of_op1 [26],\Operand_Select_I1/of_op1 [27],\Operand_Select_I1/of_op1 [28],\Operand_Select_I1/of_op1 [29],\Operand_Select_I1/of_op1 [30],\Operand_Select_I1/of_op1 [31]}),
        .\cur_data_i_reg[31]_1 ({if4_addr_mmu[0],if4_addr_mmu[1],if4_addr_mmu[2],if4_addr_mmu[3],if4_addr_mmu[4],if4_addr_mmu[5],if4_addr_mmu[6],if4_addr_mmu[7],if4_addr_mmu[8],if4_addr_mmu[9],if4_addr_mmu[10],if4_addr_mmu[11],if4_addr_mmu[12],if4_addr_mmu[13],if4_addr_mmu[14],if4_addr_mmu[15],if4_addr_mmu[16],if4_addr_mmu[17],if4_addr_mmu[18],if4_addr_mmu[19],if4_addr_mmu[20],if4_addr_mmu[21],if4_addr_mmu[22],if4_addr_mmu[23],if4_addr_mmu[24],if4_addr_mmu[25],if4_addr_mmu[26],if4_addr_mmu[27],if4_addr_mmu[28],if4_addr_mmu[29],if4_addr_mmu[30],if4_addr_mmu[31]}),
        .\cur_data_i_reg[3] (DECODE_I1_n_421),
        .\cur_data_i_reg[4] (DECODE_I1_n_422),
        .\cur_data_i_reg[5] (DECODE_I1_n_423),
        .\cur_data_i_reg[6] ({of_op1_sel[1],of_op1_sel[2]}),
        .\cur_data_i_reg[7] (DECODE_I1_n_424),
        .\cur_data_i_reg[8] (DECODE_I1_n_425),
        .\cur_data_i_reg[9] (DECODE_I1_n_426),
        .div_busy_reg(\Using_Div_Unit.Div_Unit_I1/Q0 ),
        .ex_Interrupt(ex_Interrupt),
        .ex_Interrupt_raw_reg_0(LOCKSTEP_Master_Out[38]),
        .ex_MSR_i({\MSR_I1/ex_MSR_i [17],\MSR_I1/ex_MSR_i [18],\MSR_I1/ex_MSR_i [19],\MSR_I1/ex_MSR_i [20],\MSR_I1/ex_MSR_i [21],\MSR_I1/ex_MSR_i [22],\MSR_I1/ex_MSR_i [23],\MSR_I1/ex_MSR_i [24],\MSR_I1/ex_MSR_i [26],\MSR_I1/ex_MSR_i [27],\MSR_I1/ex_MSR_i [31]}),
        .ex_alu_result({ex_alu_result[30],ex_alu_result[31]}),
        .ex_alu_sel_logic(ex_alu_sel_logic),
        .ex_arith_shift(ex_arith_shift),
        .ex_bit_extract(ex_bit_extract),
        .ex_bit_insert(ex_bit_insert),
        .ex_clz_instr(ex_clz_instr),
        .ex_cmp_op(ex_cmp_op),
        .ex_dbg_pc_hit_i(ex_dbg_pc_hit_i),
        .ex_div_unsigned(ex_div_unsigned),
        .ex_enable_sext_shift(ex_enable_sext_shift),
        .ex_hibernate_i_reg_0(ex_hibernate_i_i_1_n_0),
        .ex_is_div_instr_i_reg_0(DECODE_I1_n_149),
        .ex_is_div_instr_i_reg_1(ex_is_div_instr_i_i_1_n_0),
        .ex_left_shift_i(\Barrel_Shifter_I/ex_left_shift_i ),
        .ex_mbar_decode(ex_mbar_decode),
        .ex_mbar_decode_reg_0(ex_mbar_decode_i_1_n_0),
        .ex_msrclr(ex_msrclr),
        .ex_msrset(ex_msrset),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .ex_pattern_cmp_sel(ex_pattern_cmp_sel),
        .ex_raw_valid_reg_0(DECODE_I1_n_30),
        .ex_sel_alu_reg_0(DECODE_I1_n_369),
        .ex_sel_alu_reg_1(DECODE_I1_n_513),
        .ex_sel_alu_res(ex_sel_alu_res),
        .ex_sel_barrel_res(ex_sel_barrel_res),
        .ex_sleep_i0(ex_sleep_i0),
        .ex_sleep_i_reg_0(ex_sleep_i_i_1_n_0),
        .ex_start_div(ex_start_div),
        .ex_suspend_i_reg_0(ex_suspend_i_i_1_n_0),
        .ex_unsigned_op(ex_unsigned_op),
        .ex_use_carry(ex_use_carry),
        .ex_void_bit(\Barrel_Shifter_I/ex_void_bit ),
        .floating_hold_div_by_zero__0(\Using_Div_Unit.Div_Unit_I1/floating_hold_div_by_zero__0 ),
        .floating_hold_div_by_zero_reg(DECODE_I1_n_428),
        .floating_hold_div_by_zero_reg_0(DECODE_I1_n_429),
        .floating_hold_div_overflow_reg(DATA_FLOW_I1_n_314),
        .floating_hold_div_overflow_reg_0(DATA_FLOW_I1_n_142),
        .if0_pause(if0_pause),
        .if0_raw_valid(if0_raw_valid),
        .if0_raw_valid_reg_0(if0_raw_valid_i_1_n_0),
        .if1_insert_piperun_i(if1_insert_piperun_i),
        .if2_ibus_access_raw0(if2_ibus_access_raw0),
        .if2_ibus_access_raw_reg_0(if2_ibus_access_raw_i_1_n_0),
        .if2_ibus_first_cycle_raw_reg_0(DECODE_I1_n_234),
        .if2_ilmb_issued(if2_ilmb_issued),
        .if2_piperun(if2_piperun),
        .if2_raw_valid_reg_0(DECODE_I1_n_39),
        .if2_raw_valid_reg_1(if2_raw_valid_i_1_n_0),
        .if3_allow_iready(if3_allow_iready),
        .if3_ilmb_iready(if3_ilmb_iready),
        .if3_piperun(if3_piperun),
        .if3_potential_bubble(if3_potential_bubble),
        .if3_raw_valid_reg_0(DECODE_I1_n_43),
        .if3_raw_valid_reg_1(if3_raw_valid_i_1_n_0),
        .if4_data(if4_data),
        .if4_ibus_access_i_reg_0(ILMB_Interface_I1_n_38),
        .if4_piperun(if4_piperun),
        .if4_raw_valid_reg_0(DECODE_I1_n_45),
        .if4_raw_valid_reg_1(if4_raw_valid_i_1_n_0),
        .if4_ready(if4_ready),
        .in(\PREFETCH_BUFFER_I1/if_predecode ),
        .in0(DECODE_I1_n_514),
        .kill_fetch_mmu(kill_fetch_mmu),
        .last_cycle(\Using_Div_Unit.Div_Unit_I1/last_cycle ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .\m0_Ex_Result_i_reg[30] (DATA_FLOW_I1_n_347),
        .\m0_Ex_Result_i_reg[30]_0 (DATA_FLOW_I1_n_247),
        .\m0_Ex_Result_i_reg[30]_1 (DATA_FLOW_I1_n_246),
        .\m0_Ex_Result_i_reg[30]_2 (DATA_FLOW_I1_n_354),
        .m0_ex_sel_res(\Data_Flow_Logic_I1/m0_ex_sel_res ),
        .\m0_exception_raw_kind_reg[31]_0 (LOCKSTEP_Master_Out[36]),
        .m0_not_mul_op_i_reg_0(DECODE_I1_n_124),
        .m0_piperun(m0_piperun),
        .m0_sel_barrel_res(m0_sel_barrel_res),
        .\m1_M0_Result_i_reg[0] (DECODE_I1_n_339),
        .\m1_M0_Result_i_reg[10] (DECODE_I1_n_380),
        .\m1_M0_Result_i_reg[11] (DECODE_I1_n_381),
        .\m1_M0_Result_i_reg[12] (DECODE_I1_n_361),
        .\m1_M0_Result_i_reg[13] (DECODE_I1_n_362),
        .\m1_M0_Result_i_reg[14] (DECODE_I1_n_363),
        .\m1_M0_Result_i_reg[15] (DECODE_I1_n_382),
        .\m1_M0_Result_i_reg[1] (DECODE_I1_n_375),
        .\m1_M0_Result_i_reg[2] (DECODE_I1_n_357),
        .\m1_M0_Result_i_reg[3] (DECODE_I1_n_376),
        .\m1_M0_Result_i_reg[4] (DECODE_I1_n_377),
        .\m1_M0_Result_i_reg[5] (DECODE_I1_n_358),
        .\m1_M0_Result_i_reg[6] (DECODE_I1_n_378),
        .\m1_M0_Result_i_reg[7] (DECODE_I1_n_379),
        .\m1_M0_Result_i_reg[8] (DECODE_I1_n_359),
        .\m1_M0_Result_i_reg[9] (DECODE_I1_n_360),
        .m1_byte_access(m1_byte_access),
        .m1_databus_access_from_m0_reg_0(DECODE_I1_n_233),
        .m1_databus_addr_from_m0_reg_0(DECODE_I1_n_232),
        .m1_databus_write_from_m0_reg_0(DECODE_I1_n_163),
        .m1_databus_write_from_m0_reg_1(DECODE_I1_n_164),
        .m1_dlmb_issued(m1_dlmb_issued),
        .m1_doublet_access(m1_doublet_access),
        .m1_m0_sel_res(\Data_Flow_Logic_I1/m1_m0_sel_res ),
        .m1_m0_sel_res0(\Data_Flow_Logic_I1/m1_m0_sel_res0 ),
        .m1_piperun(m1_piperun),
        .m1_sel_mul_res(m1_sel_mul_res),
        .m1_unaligned_addr_3lsb(\Byte_Doublet_Handle_I1/m1_unaligned_addr_3lsb ),
        .\m2_M1_Result_i_reg[29] ({\Operand_Select_I1/of_branch_cmp [29],\Operand_Select_I1/of_branch_cmp [30],\Operand_Select_I1/of_branch_cmp [31]}),
        .m2_allow_dready(m2_allow_dready),
        .m2_databus_access_i_reg_0(DECODE_I1_n_126),
        .m2_dlmb_dready(m2_dlmb_dready),
        .m2_dlmb_drop_request(m2_dlmb_drop_request),
        .m2_is_div_instr(m2_is_div_instr),
        .m2_m1_sel_res0(\Data_Flow_Logic_I1/m2_m1_sel_res0 ),
        .m2_m1_sel_res_reg(\Operand_Select_I1/of_op3 ),
        .m2_m1_sel_res_reg_0(\Operand_Select_I1/of_op2 ),
        .m2_piperun(m2_piperun),
        .m2_potential_bubble(m2_potential_bubble),
        .m2_raw_valid_reg_0(DECODE_I1_n_51),
        .\m3_PC_i_reg[0] ({m3_pc[0],m3_pc[1],m3_pc[2],m3_pc[3],m3_pc[4],m3_pc[5],m3_pc[6],m3_pc[7],m3_pc[8],m3_pc[9],m3_pc[10],m3_pc[11],m3_pc[12],m3_pc[13],m3_pc[14],m3_pc[15],m3_pc[16],m3_pc[17],m3_pc[18],m3_pc[19],m3_pc[20],m3_pc[21],m3_pc[22],m3_pc[23],m3_pc[24],m3_pc[25],m3_pc[26],m3_pc[27],m3_pc[28],m3_pc[29],m3_pc[30],m3_pc[31]}),
        .\m3_PC_i_reg[11] ({DECODE_I1_n_251,DECODE_I1_n_252,DECODE_I1_n_253,DECODE_I1_n_254}),
        .\m3_PC_i_reg[15] ({DECODE_I1_n_247,DECODE_I1_n_248,DECODE_I1_n_249,DECODE_I1_n_250}),
        .\m3_PC_i_reg[19] ({DECODE_I1_n_243,DECODE_I1_n_244,DECODE_I1_n_245,DECODE_I1_n_246}),
        .\m3_PC_i_reg[1] ({DECODE_I1_n_263,DECODE_I1_n_264}),
        .\m3_PC_i_reg[23] ({DECODE_I1_n_239,DECODE_I1_n_240,DECODE_I1_n_241,DECODE_I1_n_242}),
        .\m3_PC_i_reg[3] ({DECODE_I1_n_259,DECODE_I1_n_260,DECODE_I1_n_261,DECODE_I1_n_262}),
        .\m3_PC_i_reg[7] ({DECODE_I1_n_255,DECODE_I1_n_256,DECODE_I1_n_257,DECODE_I1_n_258}),
        .m3_active_access(m3_active_access),
        .m3_databus_ready(m3_databus_ready),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow(m3_div_overflow),
        .m3_div_overflow_i_reg(DATA_FLOW_I1_n_311),
        .m3_div_stall(m3_div_stall),
        .m3_div_zero_overflow_ex_hold(m3_div_zero_overflow_ex_hold),
        .\m3_gpr_write_addr_reg[3]_0 (DECODE_I1_n_301),
        .m3_is_div_instr_i_reg_0(m3_is_div_instr_i_i_1_n_0),
        .m3_m2_sel_res(\Data_Flow_Logic_I1/m3_m2_sel_res ),
        .m3_msr(m3_msr),
        .m3_piperun(m3_piperun),
        .m3_raw_valid_reg_0(DECODE_I1_n_52),
        .m3_sel_div_res(m3_sel_div_res),
        .m3_sel_load_res(m3_sel_load_res),
        .normal_stop_i(normal_stop_i),
        .\of_MSR_i_reg[22] ({DECODE_I1_n_309,DECODE_I1_n_310,DECODE_I1_n_311,of_msr}),
        .\of_MSR_i_reg[22]_0 ({\MSR_I1/of_MSR_i [22],\MSR_I1/of_MSR_i [23],DATA_FLOW_I1_n_93,of_MSR_i[28],of_MSR_i[30]}),
        .\of_MSR_i_reg[25] ({wb_msr[25],wb_msr[28],wb_msr[29],wb_msr[30]}),
        .\of_MSR_i_reg[25]_0 ({\MSR_I1/p_1_in [6],\MSR_I1/p_1_in [1]}),
        .\of_MSR_i_reg[25]_1 ({\MSR_I1/p_0_in [6],\MSR_I1/p_0_in [1]}),
        .of_is_div_instr(of_is_div_instr),
        .of_op2_sel(of_op2_sel),
        .of_op3_sel(of_op3_sel),
        .of_piperun(of_piperun),
        .out(DATA_FLOW_I1_n_52),
        .p_2_in(p_2_in),
        .p_4_out__0(p_4_out__0),
        .p_55_out(p_55_out),
        .single_Step_N(single_Step_N),
        .single_Step_N_reg(DECODE_I1_n_169),
        .sync_reset(sync_reset),
        .\trace_new_reg_value_i[24]_i_2 ({\Byte_Doublet_Handle_I1/p_0_in ,DATA_FLOW_I1_n_253}),
        .trace_wb_jump_taken(trace_wb_jump_taken),
        .trace_wb_valid_instr(trace_wb_valid_instr),
        .wakeup_i(wakeup_i),
        .wb_MSR_i({\MSR_I1/wb_MSR_i [17],\MSR_I1/wb_MSR_i [18],\MSR_I1/wb_MSR_i [19],\MSR_I1/wb_MSR_i [20],\MSR_I1/wb_MSR_i [21],\MSR_I1/wb_MSR_i [22],\MSR_I1/wb_MSR_i [23],\MSR_I1/wb_MSR_i [24],\MSR_I1/wb_MSR_i [26],\MSR_I1/wb_MSR_i [27],\MSR_I1/wb_MSR_i [31]}),
        .\wb_PC_i_reg[31] (\Use_Debug_Logic.Master_Core.Debug_Perf_n_44 ),
        .wb_byte_access(wb_byte_access),
        .wb_databus_access(wb_databus_access),
        .wb_databus_read(wb_databus_read),
        .wb_databus_write(wb_databus_write),
        .wb_delay_slot(wb_delay_slot),
        .wb_div_zero_overflow(wb_div_zero_overflow),
        .wb_doublet_access(wb_doublet_access),
        .wb_exception_from_m3_reg_0({wb_exception_kind[28],wb_exception_kind[30],wb_exception_kind[31]}),
        .wb_exception_from_m3_reg_rep_0(DECODE_I1_n_150),
        .wb_exception_from_m3_reg_rep_1(DECODE_I1_n_464),
        .wb_exception_from_m3_reg_rep__0_0(DECODE_I1_n_151),
        .wb_exception_from_m3_reg_rep__0_1(DECODE_I1_n_450),
        .wb_exception_from_m3_reg_rep__0_2(DECODE_I1_n_472),
        .wb_exception_from_m3_reg_rep__0_3(DECODE_I1_n_473),
        .wb_exception_from_m3_reg_rep__0_4(DECODE_I1_n_474),
        .wb_exception_from_m3_reg_rep__0_5(DECODE_I1_n_475),
        .\wb_exception_raw_kind_reg[31]_0 (DECODE_I1_n_157),
        .\wb_exception_raw_kind_reg[31]_1 (\exception_registers_I1/wb_PC_i0 ),
        .wb_exception_taken(wb_exception_taken),
        .wb_fwd({wb_fwd[16],wb_fwd[17],wb_fwd[18],wb_fwd[20],wb_fwd[21],wb_fwd[25],wb_fwd[29],wb_fwd[30],wb_fwd[31]}),
        .wb_gpr_wr(wb_gpr_wr),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .\wb_gpr_write_addr_reg[1]_0 ({DECODE_I1_n_330,DECODE_I1_n_331,DECODE_I1_n_332}),
        .wb_halted(wb_halted),
        .\wb_instr_i_reg[0]_0 ({trace_wb_instr[0],trace_wb_instr[1],trace_wb_instr[2],trace_wb_instr[3],trace_wb_instr[4],trace_wb_instr[5],trace_wb_instr[6],trace_wb_instr[7],trace_wb_instr[8],trace_wb_instr[9],trace_wb_instr[10],trace_wb_instr[11],trace_wb_instr[12],trace_wb_instr[13],trace_wb_instr[14],trace_wb_instr[15],trace_wb_instr[16],trace_wb_instr[17],trace_wb_instr[18],trace_wb_instr[19],trace_wb_instr[20],trace_wb_instr[21],trace_wb_instr[22],trace_wb_instr[23],trace_wb_instr[24],trace_wb_instr[25],trace_wb_instr[26],trace_wb_instr[27],trace_wb_instr[28],trace_wb_instr[29],trace_wb_instr[30],trace_wb_instr[31]}),
        .wb_m3_sel_res0(\Data_Flow_Logic_I1/wb_m3_sel_res0 ),
        .wb_msr_clear_bip(wb_msr_clear_bip),
        .wb_msr_clear_ie(wb_msr_clear_ie),
        .wb_pc_valid(wb_pc_valid),
        .wb_read_imm_reg(wb_read_imm_reg),
        .wb_read_imm_reg_1(wb_read_imm_reg_1),
        .wb_reset_reg_0(DECODE_I1_n_333));
  microblaze_microblaze_0_0_DLMB_Interface_ff DLMB_Interface_I1
       (.Clk(Clk),
        .D({D[228],D[191]}),
        .DReady(DReady),
        .DWait(DWait),
        .DWait_0(DLMB_Interface_I1_n_5),
        .Data_Read(Data_Read),
        .\LOCKSTEP_Out_reg[555] (DAXI_interface_I1_n_72),
        .\LOCKSTEP_Out_reg[629] (DAXI_interface_I1_n_73),
        .Q({wb_dlmb_valid_read_data[0],wb_dlmb_valid_read_data[1],wb_dlmb_valid_read_data[2],wb_dlmb_valid_read_data[3],wb_dlmb_valid_read_data[4],wb_dlmb_valid_read_data[5],wb_dlmb_valid_read_data[6],wb_dlmb_valid_read_data[7],wb_dlmb_valid_read_data[8],wb_dlmb_valid_read_data[9],wb_dlmb_valid_read_data[10],wb_dlmb_valid_read_data[11],wb_dlmb_valid_read_data[12],wb_dlmb_valid_read_data[13],wb_dlmb_valid_read_data[14],wb_dlmb_valid_read_data[15]}),
        .S(\Using_Ready_FPGA.Rdy_Or2/carry_or_i1/S ),
        .\Use_DAXI.m3_active_access_reg (DAXI_interface_I1_n_74),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[10]_0 (DLMB_Interface_I1_n_33),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[11]_0 (DLMB_Interface_I1_n_32),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[12]_0 (DLMB_Interface_I1_n_31),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[13]_0 (DLMB_Interface_I1_n_30),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[14]_0 (DLMB_Interface_I1_n_29),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[15]_0 (DLMB_Interface_I1_n_12),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[16]_0 (DLMB_Interface_I1_n_43),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[17]_0 (DLMB_Interface_I1_n_42),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[18]_0 (DLMB_Interface_I1_n_41),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[19]_0 (DLMB_Interface_I1_n_40),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[20]_0 (DLMB_Interface_I1_n_39),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[21]_0 (DLMB_Interface_I1_n_38),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[22]_0 (DLMB_Interface_I1_n_37),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[23]_0 (DLMB_Interface_I1_n_36),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[8]_0 (DLMB_Interface_I1_n_35),
        .\Use_DLMB.WB_DLMB_Valid_Read_Data_reg[9]_0 (DLMB_Interface_I1_n_34),
        .\Use_DLMB.m1_dlmb_issued_reg_0 (DLMB_Interface_I1_n_11),
        .\Use_DLMB.m1_dlmb_issued_reg_1 (DECODE_I1_n_238),
        .\Use_DLMB.m2_allow_dready_reg_0 (DECODE_I1_n_232),
        .\Use_DLMB.m2_dready_hold_reg_0 (DLMB_Interface_I1_n_2),
        .\Use_DLMB.m2_dready_hold_reg_1 (DECODE_I1_n_161),
        .\Use_DLMB.m2_potential_bubble_reg_0 (DECODE_I1_n_159),
        .m1_dlmb_issued(m1_dlmb_issued),
        .m1_piperun(m1_piperun),
        .m2_active_access(m2_active_access),
        .m2_allow_dready(m2_allow_dready),
        .m2_dlmb_dready(m2_dlmb_dready),
        .m2_dlmb_drop_request(m2_dlmb_drop_request),
        .m2_piperun(m2_piperun),
        .m2_potential_bubble(m2_potential_bubble),
        .m3_piperun(m3_piperun),
        .sync_reset(sync_reset),
        .\trace_new_reg_value_i[31]_i_2_0 (DATA_FLOW_I1_n_251),
        .\trace_new_reg_value_i_reg[16] ({wb_daxi_valid_read_data[0],wb_daxi_valid_read_data[1],wb_daxi_valid_read_data[2],wb_daxi_valid_read_data[3],wb_daxi_valid_read_data[4],wb_daxi_valid_read_data[5],wb_daxi_valid_read_data[6],wb_daxi_valid_read_data[7],wb_daxi_valid_read_data[8],wb_daxi_valid_read_data[9],wb_daxi_valid_read_data[10],wb_daxi_valid_read_data[11],wb_daxi_valid_read_data[12],wb_daxi_valid_read_data[13],wb_daxi_valid_read_data[14],wb_daxi_valid_read_data[15],wb_daxi_valid_read_data[16],wb_daxi_valid_read_data[17],wb_daxi_valid_read_data[18],wb_daxi_valid_read_data[19],wb_daxi_valid_read_data[20],wb_daxi_valid_read_data[21],wb_daxi_valid_read_data[22],wb_daxi_valid_read_data[23],wb_daxi_valid_read_data[24],wb_daxi_valid_read_data[25],wb_daxi_valid_read_data[26],wb_daxi_valid_read_data[27],wb_daxi_valid_read_data[28],wb_daxi_valid_read_data[29],wb_daxi_valid_read_data[30],wb_daxi_valid_read_data[31]}),
        .\trace_new_reg_value_i_reg[23] (\Byte_Doublet_Handle_I1/p_0_in ),
        .\trace_new_reg_value_i_reg[31] (DECODE_I1_n_515),
        .\trace_new_reg_value_i_reg[31]_0 (DATA_FLOW_I1_n_387),
        .wb_databus_read_data({wb_databus_read_data[0],wb_databus_read_data[1],wb_databus_read_data[2],wb_databus_read_data[3],wb_databus_read_data[4],wb_databus_read_data[5],wb_databus_read_data[6],wb_databus_read_data[7]}),
        .wb_doublet_access(wb_doublet_access));
  microblaze_microblaze_0_0_DSide_Logic_ff DSide_Logic_I1
       (.Q({wb_dlmb_valid_read_data[0],wb_dlmb_valid_read_data[1],wb_dlmb_valid_read_data[2],wb_dlmb_valid_read_data[3],wb_dlmb_valid_read_data[4],wb_dlmb_valid_read_data[5],wb_dlmb_valid_read_data[6],wb_dlmb_valid_read_data[7],wb_dlmb_valid_read_data[8],wb_dlmb_valid_read_data[9],wb_dlmb_valid_read_data[10],wb_dlmb_valid_read_data[11],wb_dlmb_valid_read_data[12],wb_dlmb_valid_read_data[13],wb_dlmb_valid_read_data[14],wb_dlmb_valid_read_data[15]}),
        .S(\Using_Ready_FPGA.Rdy_Or1/carry_or_i1/S ),
        .S_0(\Using_Ready_FPGA.Rdy_Or2/carry_or_i1/S ),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lopt_3(lopt_6),
        .lopt_4(lopt_7),
        .lopt_5(lopt_8),
        .m3_databus_ready(m3_databus_ready),
        .\trace_new_reg_value_i_reg[0] ({wb_daxi_valid_read_data[0],wb_daxi_valid_read_data[1],wb_daxi_valid_read_data[2],wb_daxi_valid_read_data[3],wb_daxi_valid_read_data[4],wb_daxi_valid_read_data[5],wb_daxi_valid_read_data[6],wb_daxi_valid_read_data[7],wb_daxi_valid_read_data[8],wb_daxi_valid_read_data[9],wb_daxi_valid_read_data[10],wb_daxi_valid_read_data[11],wb_daxi_valid_read_data[12],wb_daxi_valid_read_data[13],wb_daxi_valid_read_data[14],wb_daxi_valid_read_data[15]}),
        .wb_databus_read_data({wb_databus_read_data[0],wb_databus_read_data[1],wb_databus_read_data[2],wb_databus_read_data[3],wb_databus_read_data[4],wb_databus_read_data[5],wb_databus_read_data[6],wb_databus_read_data[7],wb_databus_read_data[8],wb_databus_read_data[9],wb_databus_read_data[10],wb_databus_read_data[11],wb_databus_read_data[12],wb_databus_read_data[13],wb_databus_read_data[14],wb_databus_read_data[15]}));
  microblaze_microblaze_0_0_ILMB_Interface_ff ILMB_Interface_I1
       (.Clk(Clk),
        .IReady(IReady),
        .IWAIT(IWAIT),
        .Instr(Instr),
        .LOCKSTEP_Master_Out(LOCKSTEP_Master_Out[31:0]),
        .S(\Using_Ready_FPGA.Rdy_Or2/carry_or_i1/S_0 ),
        .\Use_ILMB.if2_ilmb_issued_reg_0 (ILMB_Interface_I1_n_37),
        .\Use_ILMB.if2_ilmb_issued_reg_1 (DECODE_I1_n_237),
        .\Use_ILMB.if3_allow_iready_reg_0 (DECODE_I1_n_234),
        .\Use_ILMB.if3_iready_hold_reg_0 (ILMB_Interface_I1_n_38),
        .\Use_ILMB.if3_iready_hold_reg_1 (DECODE_I1_n_162),
        .\Use_ILMB.if3_potential_bubble_reg_0 (DECODE_I1_n_166),
        .\cur_data_i_reg[31] (\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .if2_ilmb_issued(if2_ilmb_issued),
        .if2_piperun(if2_piperun),
        .if3_allow_iready(if3_allow_iready),
        .if3_ilmb_iready(if3_ilmb_iready),
        .if3_piperun(if3_piperun),
        .if3_potential_bubble(if3_potential_bubble),
        .if4_data(if4_data),
        .if4_piperun(if4_piperun),
        .in(\PREFETCH_BUFFER_I1/if_predecode ),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_ISide_Logic_ff ISide_Logic_I1
       (.S(\Using_Ready_FPGA.Rdy_Or2/carry_or_i1/S_0 ),
        .S_0(\Using_Ready_FPGA.Rdy_Or3/carry_or_i1/S ),
        .\Using_FPGA.Native (DECODE_I1_n_157),
        .if4_ready(if4_ready));
  LUT1 #(
    .INIT(2'h1)) 
    M0_Sel_Mul_Res_i_1
       (.I0(DECODE_I1_n_123),
        .O(p_2_in));
  LUT1 #(
    .INIT(2'h1)) 
    M1_Sel_Mul_Res_i_1
       (.I0(DECODE_I1_n_124),
        .O(M1_Sel_Mul_Res_i_1_n_0));
  microblaze_microblaze_0_0_MMU_ff MMU_I1
       (.Clk(Clk),
        .D({ex_databus_addr[0],ex_databus_addr[1],ex_databus_addr[2],ex_databus_addr[3],ex_databus_addr[4],ex_databus_addr[5],ex_databus_addr[6],ex_databus_addr[7],ex_databus_addr[8],ex_databus_addr[9],ex_databus_addr[10],ex_databus_addr[11],ex_databus_addr[12],ex_databus_addr[13],ex_databus_addr[14],ex_databus_addr[15],ex_databus_addr[16],ex_databus_addr[17],ex_databus_addr[18],ex_databus_addr[19],ex_databus_addr[20],ex_databus_addr[21],ex_databus_addr[22],ex_databus_addr[23],ex_databus_addr[24],ex_databus_addr[25],ex_databus_addr[26],ex_databus_addr[27],ex_databus_addr[28],ex_databus_addr[29]}),
        .E(m0_piperun),
        .Q({wb_databus_addr_mmu[0],wb_databus_addr_mmu[1],wb_databus_addr_mmu[2],wb_databus_addr_mmu[3],wb_databus_addr_mmu[4],wb_databus_addr_mmu[5],wb_databus_addr_mmu[6],wb_databus_addr_mmu[7],wb_databus_addr_mmu[8],wb_databus_addr_mmu[9],wb_databus_addr_mmu[10],wb_databus_addr_mmu[11],wb_databus_addr_mmu[12],wb_databus_addr_mmu[13],wb_databus_addr_mmu[14],wb_databus_addr_mmu[15],wb_databus_addr_mmu[16],wb_databus_addr_mmu[17],wb_databus_addr_mmu[18],wb_databus_addr_mmu[19],wb_databus_addr_mmu[20],wb_databus_addr_mmu[21],wb_databus_addr_mmu[22],wb_databus_addr_mmu[23],wb_databus_addr_mmu[24],wb_databus_addr_mmu[25],wb_databus_addr_mmu[26],wb_databus_addr_mmu[27],wb_databus_addr_mmu[28],wb_databus_addr_mmu[29],wb_databus_addr_mmu[30],wb_databus_addr_mmu[31]}),
        .if2_piperun(if2_piperun),
        .\if3_addr_i_reg[0]_0 ({D[363:332],D[260:229]}),
        .if3_piperun(if3_piperun),
        .\if4_addr_i_reg[0]_0 ({if4_addr_mmu[0],if4_addr_mmu[1],if4_addr_mmu[2],if4_addr_mmu[3],if4_addr_mmu[4],if4_addr_mmu[5],if4_addr_mmu[6],if4_addr_mmu[7],if4_addr_mmu[8],if4_addr_mmu[9],if4_addr_mmu[10],if4_addr_mmu[11],if4_addr_mmu[12],if4_addr_mmu[13],if4_addr_mmu[14],if4_addr_mmu[15],if4_addr_mmu[16],if4_addr_mmu[17],if4_addr_mmu[18],if4_addr_mmu[19],if4_addr_mmu[20],if4_addr_mmu[21],if4_addr_mmu[22],if4_addr_mmu[23],if4_addr_mmu[24],if4_addr_mmu[25],if4_addr_mmu[26],if4_addr_mmu[27],if4_addr_mmu[28],if4_addr_mmu[29],if4_addr_mmu[30],if4_addr_mmu[31]}),
        .\m0_databus_addr_i_reg[0]_0 (DECODE_I1_n_30),
        .\m1_databus_addr_i_reg[0]_0 (D[331:302]),
        .m2_piperun(m2_piperun),
        .m3_piperun(m3_piperun),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_Debug \Use_Debug_Logic.Master_Core.Debug_Perf 
       (.Address(of_pc),
        .Clk(Clk),
        .Config_Reg_En(Config_Reg_En),
        .Config_Reset(Config_Reset),
        .D(D[366]),
        .Data_Read_Reg_En(Data_Read_Reg_En),
        .Dbg_Capture(Dbg_Capture),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .Dbg_Reg_En_2_sp_1(Dbg_Reg_En_2_sn_1),
        .Dbg_Shift(Dbg_Shift),
        .Dbg_Stop(Dbg_Stop),
        .Dbg_TDI(Dbg_TDI),
        .Dbg_TDO(Dbg_TDO),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Dbg_Update(Dbg_Update),
        .LOCKSTEP_Master_Out({LOCKSTEP_Master_Out[38],LOCKSTEP_Master_Out[36],LOCKSTEP_Master_Out[34:0]}),
        .Pause(Pause),
        .\Performance_Debug_Control.dbg_freeze_nohalt_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_44 ),
        .\Performance_Debug_Control.dbg_state_nohalt_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_43 ),
        .\Performance_Debug_Control.dbg_stop_instr_fetch_nohalt_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_38 ),
        .\Performance_Debug_Control.ex_brki_hit_reg_0 (DECODE_I1_n_152),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_54 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 (DECODE_I1_n_171),
        .\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_50 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 (DECODE_I1_n_169),
        .\Performance_Debug_Control.m0_dbg_hit_reg[0]_0 (DECODE_I1_n_30),
        .Q(\Use_Debug_Logic.Master_Core.Debug_Perf_n_57 ),
        .Reset_Mode(Reset_Mode),
        .S(\Using_Ready_FPGA.Rdy_Or3/carry_or_i1/S ),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg_0 (\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .\Serial_Dbg_Intf.if_debug_ready_i_reg_1 (\Use_Debug_Logic.Master_Core.Debug_Perf_n_56 ),
        .Sleep(Sleep),
        .Sleep_Decode(Sleep_Decode),
        .Sleep_Out(Sleep_Out),
        .Status_Reg_En(Status_Reg_En),
        .\data_rd_reg_reg[0]_0 ({DATA_FLOW_I1_n_145,DATA_FLOW_I1_n_146,DATA_FLOW_I1_n_147,DATA_FLOW_I1_n_148,DATA_FLOW_I1_n_149,DATA_FLOW_I1_n_150,DATA_FLOW_I1_n_151,DATA_FLOW_I1_n_152,DATA_FLOW_I1_n_153,DATA_FLOW_I1_n_154,DATA_FLOW_I1_n_155,DATA_FLOW_I1_n_156,DATA_FLOW_I1_n_157,DATA_FLOW_I1_n_158,DATA_FLOW_I1_n_159,DATA_FLOW_I1_n_160,DATA_FLOW_I1_n_161,DATA_FLOW_I1_n_162,DATA_FLOW_I1_n_163,DATA_FLOW_I1_n_164,DATA_FLOW_I1_n_165,DATA_FLOW_I1_n_166,DATA_FLOW_I1_n_167,DATA_FLOW_I1_n_168,DATA_FLOW_I1_n_169,DATA_FLOW_I1_n_170,DATA_FLOW_I1_n_171,DATA_FLOW_I1_n_172,DATA_FLOW_I1_n_173,DATA_FLOW_I1_n_174,DATA_FLOW_I1_n_175,DATA_FLOW_I1_n_176}),
        .dbg_halt_reset_mode_reg_0(\Use_Debug_Logic.Master_Core.Debug_Perf_n_42 ),
        .ex_Interrupt(ex_Interrupt),
        .ex_dbg_pc_hit_i(ex_dbg_pc_hit_i),
        .exception_reg_0({D[155],D[80]}),
        .if0_pause(if0_pause),
        .m0_piperun(m0_piperun),
        .m1_piperun(m1_piperun),
        .m2_piperun(m2_piperun),
        .m3_piperun(m3_piperun),
        .normal_stop_i(normal_stop_i),
        .of_piperun(of_piperun),
        .p_4_out__0(p_4_out__0),
        .read_register_MSR_1(read_register_MSR_1),
        .single_Step_N(single_Step_N),
        .single_Step_N_reg_0(\Use_Debug_Logic.Master_Core.Debug_Perf_n_53 ),
        .sync_reset(sync_reset),
        .wakeup_i(wakeup_i),
        .wb_delay_slot(wb_delay_slot),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg),
        .wb_halted(wb_halted),
        .wb_pc_valid(wb_pc_valid),
        .wb_read_imm_reg(wb_read_imm_reg),
        .wb_read_imm_reg_1(wb_read_imm_reg_1));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_Fast_Interrupt.wb_ie_rising_i_1 
       (.I0(m3_msr),
        .I1(wb_msr[30]),
        .O(p_55_out));
  LUT6 #(
    .INIT(64'h00000000222E2222)) 
    bp1_raw_valid_i_1
       (.I0(DECODE_I1_n_36),
        .I1(DECODE_I1_n_38),
        .I2(kill_fetch_mmu),
        .I3(bp0_dead_fetch_hold),
        .I4(DECODE_I1_n_54),
        .I5(bp1_dead_fetch_hold_bt),
        .O(bp1_raw_valid_i_1_n_0));
  LUT5 #(
    .INIT(32'h0000002E)) 
    ex_hibernate_i_i_1
       (.I0(Hibernate),
        .I1(ex_sleep_i0),
        .I2(p_1_in106_in),
        .I3(active_wakeup),
        .I4(sync_reset),
        .O(ex_hibernate_i_i_1_n_0));
  LUT5 #(
    .INIT(32'h0000CC0A)) 
    ex_is_div_instr_i_i_1
       (.I0(DECODE_I1_n_149),
        .I1(of_is_div_instr),
        .I2(DECODE_I1_n_30),
        .I3(of_piperun),
        .I4(sync_reset),
        .O(ex_is_div_instr_i_i_1_n_0));
  LUT6 #(
    .INIT(64'h00000000303000AA)) 
    ex_mbar_decode_i_1
       (.I0(ex_mbar_decode),
        .I1(DECODE_I1_n_172),
        .I2(of_gpr_op1_rd_addr[3]),
        .I3(DECODE_I1_n_30),
        .I4(of_piperun),
        .I5(sync_reset),
        .O(ex_mbar_decode_i_1_n_0));
  LUT5 #(
    .INIT(32'h0000002E)) 
    ex_sleep_i_i_1
       (.I0(Sleep_Decode),
        .I1(ex_sleep_i0),
        .I2(p_0_in105_in),
        .I3(active_wakeup),
        .I4(sync_reset),
        .O(ex_sleep_i_i_1_n_0));
  LUT6 #(
    .INIT(64'h000000000000E222)) 
    ex_suspend_i_i_1
       (.I0(Suspend),
        .I1(ex_sleep_i0),
        .I2(p_0_in105_in),
        .I3(p_1_in106_in),
        .I4(active_wakeup),
        .I5(sync_reset),
        .O(ex_suspend_i_i_1_n_0));
  LUT6 #(
    .INIT(64'h100010FF10001000)) 
    if0_raw_valid_i_1
       (.I0(kill_fetch_mmu),
        .I1(DECODE_I1_n_316),
        .I2(DECODE_I1_n_36),
        .I3(DECODE_I1_n_37),
        .I4(DECODE_I1_n_39),
        .I5(if0_raw_valid),
        .O(if0_raw_valid_i_1_n_0));
  LUT5 #(
    .INIT(32'h0000CC0A)) 
    if2_ibus_access_raw_i_1
       (.I0(D[365]),
        .I1(if2_ibus_access_raw0),
        .I2(if2_piperun),
        .I3(if1_insert_piperun_i),
        .I4(sync_reset),
        .O(if2_ibus_access_raw_i_1_n_0));
  LUT5 #(
    .INIT(32'h0000CC0A)) 
    if2_raw_valid_i_1
       (.I0(\Using_IF1_Insert_FPGA_No_MMU.PR_IF1_Ins_Or1/carry_or_i1/S ),
        .I1(if2_ibus_access_raw0),
        .I2(if2_piperun),
        .I3(if1_insert_piperun_i),
        .I4(sync_reset),
        .O(if2_raw_valid_i_1_n_0));
  LUT6 #(
    .INIT(64'h00000000FCFC00AA)) 
    if3_raw_valid_i_1
       (.I0(DECODE_I1_n_43),
        .I1(\Using_IF1_Insert_FPGA_No_MMU.PR_IF1_Ins_Or1/carry_or_i1/S ),
        .I2(if0_raw_valid),
        .I3(if3_piperun),
        .I4(if2_piperun),
        .I5(sync_reset),
        .O(if3_raw_valid_i_1_n_0));
  LUT5 #(
    .INIT(32'h0000CC0A)) 
    if4_raw_valid_i_1
       (.I0(DECODE_I1_n_45),
        .I1(DECODE_I1_n_43),
        .I2(if4_piperun),
        .I3(if3_piperun),
        .I4(sync_reset),
        .O(if4_raw_valid_i_1_n_0));
  FDRE \interrupt_address_d1_reg[0] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[0]),
        .Q(interrupt_address_d1[0]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[10] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[10]),
        .Q(interrupt_address_d1[10]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[11] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[11]),
        .Q(interrupt_address_d1[11]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[12] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[12]),
        .Q(interrupt_address_d1[12]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[13] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[13]),
        .Q(interrupt_address_d1[13]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[14] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[14]),
        .Q(interrupt_address_d1[14]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[15] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[15]),
        .Q(interrupt_address_d1[15]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[16] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[16]),
        .Q(interrupt_address_d1[16]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[17] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[17]),
        .Q(interrupt_address_d1[17]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[18] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[18]),
        .Q(interrupt_address_d1[18]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[19] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[19]),
        .Q(interrupt_address_d1[19]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[1] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[1]),
        .Q(interrupt_address_d1[1]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[20] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[20]),
        .Q(interrupt_address_d1[20]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[21] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[21]),
        .Q(interrupt_address_d1[21]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[22] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[22]),
        .Q(interrupt_address_d1[22]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[23] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[23]),
        .Q(interrupt_address_d1[23]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[24] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[24]),
        .Q(interrupt_address_d1[24]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[25] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[25]),
        .Q(interrupt_address_d1[25]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[26] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[26]),
        .Q(interrupt_address_d1[26]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[27] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[27]),
        .Q(interrupt_address_d1[27]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[28] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[28]),
        .Q(interrupt_address_d1[28]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[29] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[29]),
        .Q(interrupt_address_d1[29]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[2] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[2]),
        .Q(interrupt_address_d1[2]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[30] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[30]),
        .Q(interrupt_address_d1[30]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[31] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[31]),
        .Q(interrupt_address_d1[31]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[3] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[3]),
        .Q(interrupt_address_d1[3]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[4] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[4]),
        .Q(interrupt_address_d1[4]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[5] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[5]),
        .Q(interrupt_address_d1[5]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[6] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[6]),
        .Q(interrupt_address_d1[6]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[7] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[7]),
        .Q(interrupt_address_d1[7]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[8] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[8]),
        .Q(interrupt_address_d1[8]),
        .R(1'b0));
  FDRE \interrupt_address_d1_reg[9] 
       (.C(Clk),
        .CE(Interrupt),
        .D(Interrupt_Address[9]),
        .Q(interrupt_address_d1[9]),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    m0_ex_sel_res_i_1
       (.I0(ex_sel_barrel_res),
        .O(m0_ex_sel_res_i_1_n_0));
  LUT5 #(
    .INIT(32'h44444000)) 
    m3_div_stall_i_i_1
       (.I0(DECODE_I1_n_150),
        .I1(DATA_FLOW_I1_n_137),
        .I2(m2_is_div_instr),
        .I3(m2_piperun),
        .I4(m3_div_stall),
        .O(m3_div_stall_i_i_1_n_0));
  LUT4 #(
    .INIT(16'hA3A0)) 
    m3_is_div_instr_i_i_1
       (.I0(m2_is_div_instr),
        .I1(m3_piperun),
        .I2(m2_piperun),
        .I3(m3_sel_div_res),
        .O(m3_is_div_instr_i_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFF06FF00000600)) 
    make_result_neg_i_1
       (.I0(DATA_FLOW_I1_n_20),
        .I1(ex_op2[0]),
        .I2(ex_div_unsigned),
        .I3(ex_start_div),
        .I4(DECODE_I1_n_150),
        .I5(\Using_Div_Unit.Div_Unit_I1/make_result_neg ),
        .O(make_result_neg_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFF08FF00000800)) 
    negative_operands_i_1
       (.I0(DATA_FLOW_I1_n_20),
        .I1(ex_op2[0]),
        .I2(ex_div_unsigned),
        .I3(ex_start_div),
        .I4(DECODE_I1_n_150),
        .I5(\Using_Div_Unit.Div_Unit_I1/negative_operands ),
        .O(negative_operands_i_1_n_0));
  LUT5 #(
    .INIT(32'hFFFFFF2E)) 
    next_sub_i_1
       (.I0(\Using_Div_Unit.Div_Unit_I1/next_sub ),
        .I1(\Using_Div_Unit.Div_Unit_I1/div_busy ),
        .I2(\Using_Div_Unit.Div_Unit_I1/Res_Neg ),
        .I3(sync_reset),
        .I4(ex_start_div),
        .O(next_sub_i_1_n_0));
  FDRE trace_data_access_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_access),
        .Q(D[6]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[0]),
        .Q(D[74]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[10]),
        .Q(D[64]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[11]),
        .Q(D[63]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[12]),
        .Q(D[62]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[13]),
        .Q(D[61]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[14]),
        .Q(D[60]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[15]),
        .Q(D[59]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[16]),
        .Q(D[58]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[17]),
        .Q(D[57]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[18]),
        .Q(D[56]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[19]),
        .Q(D[55]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[1]),
        .Q(D[73]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[20]),
        .Q(D[54]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[21]),
        .Q(D[53]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[22]),
        .Q(D[52]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[23]),
        .Q(D[51]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[24]),
        .Q(D[50]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[25]),
        .Q(D[49]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[26]),
        .Q(D[48]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[27]),
        .Q(D[47]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[28]),
        .Q(D[46]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[29]),
        .Q(D[45]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[2]),
        .Q(D[72]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[30]),
        .Q(D[44]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[31]),
        .Q(D[43]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[3]),
        .Q(D[71]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[4]),
        .Q(D[70]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[5]),
        .Q(D[69]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[6]),
        .Q(D[68]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[7]),
        .Q(D[67]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[8]),
        .Q(D[66]),
        .R(1'b0));
  FDRE \trace_data_address_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_addr_mmu[9]),
        .Q(D[65]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_byte_enable[0]),
        .Q(D[10]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_byte_enable[1]),
        .Q(D[9]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_byte_enable[2]),
        .Q(D[8]),
        .R(1'b0));
  FDRE \trace_data_byte_enable_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_byte_enable[3]),
        .Q(D[7]),
        .R(1'b0));
  FDRE trace_data_read_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_read),
        .Q(D[5]),
        .R(1'b0));
  FDRE trace_data_write_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write),
        .Q(D[4]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[0]),
        .Q(D[42]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[10]),
        .Q(D[32]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[11]),
        .Q(D[31]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[12]),
        .Q(D[30]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[13]),
        .Q(D[29]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[14]),
        .Q(D[28]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[15]),
        .Q(D[27]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[16]),
        .Q(D[26]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[17]),
        .Q(D[25]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[18]),
        .Q(D[24]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[19]),
        .Q(D[23]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[1]),
        .Q(D[41]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[20]),
        .Q(D[22]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[21]),
        .Q(D[21]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[22]),
        .Q(D[20]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[23]),
        .Q(D[19]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[24]),
        .Q(D[18]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[25]),
        .Q(D[17]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[26]),
        .Q(D[16]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[27]),
        .Q(D[15]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[28]),
        .Q(D[14]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[29]),
        .Q(D[13]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[2]),
        .Q(D[40]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[30]),
        .Q(D[12]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[31]),
        .Q(D[11]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[3]),
        .Q(D[39]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[4]),
        .Q(D[38]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[5]),
        .Q(D[37]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[6]),
        .Q(D[36]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[7]),
        .Q(D[35]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[8]),
        .Q(D[34]),
        .R(1'b0));
  FDRE \trace_data_write_value_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_databus_write_data[9]),
        .Q(D[33]),
        .R(1'b0));
  FDRE trace_delay_slot_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(wb_delay_slot),
        .Q(D[75]),
        .R(1'b0));
  FDRE trace_ex_piperun_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(DECODE_I1_n_30),
        .Q(D[2]),
        .R(1'b0));
  FDRE \trace_exception_kind_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_exception_kind[28]),
        .Q(D[79]),
        .R(1'b0));
  FDRE \trace_exception_kind_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_exception_kind[30]),
        .Q(D[78]),
        .R(1'b0));
  FDRE \trace_exception_kind_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_exception_kind[31]),
        .Q(D[77]),
        .R(1'b0));
  FDRE trace_exception_taken_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(wb_exception_taken),
        .Q(D[80]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[0]),
        .Q(D[187]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[10]),
        .Q(D[177]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[11]),
        .Q(D[176]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[12]),
        .Q(D[175]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[13]),
        .Q(D[174]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[14]),
        .Q(D[173]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[15]),
        .Q(D[172]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[16]),
        .Q(D[171]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[17]),
        .Q(D[170]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[18]),
        .Q(D[169]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[19]),
        .Q(D[168]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[1]),
        .Q(D[186]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[20]),
        .Q(D[167]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[21]),
        .Q(D[166]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[22]),
        .Q(D[165]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[23]),
        .Q(D[164]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[24]),
        .Q(D[163]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[25]),
        .Q(D[162]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[26]),
        .Q(D[161]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[27]),
        .Q(D[160]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[28]),
        .Q(D[159]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[29]),
        .Q(D[158]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[2]),
        .Q(D[185]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[30]),
        .Q(D[157]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[31]),
        .Q(D[156]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[3]),
        .Q(D[184]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[4]),
        .Q(D[183]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[5]),
        .Q(D[182]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[6]),
        .Q(D[181]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[7]),
        .Q(D[180]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[8]),
        .Q(D[179]),
        .R(1'b0));
  FDRE \trace_instruction_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_instr[9]),
        .Q(D[178]),
        .R(1'b0));
  FDRE trace_jump_taken_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_jump_taken),
        .Q(D[76]),
        .R(1'b0));
  FDRE trace_mb_halted_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(D[366]),
        .Q(D[0]),
        .R(1'b0));
  FDRE trace_mem_piperun_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(m3_piperun),
        .Q(D[1]),
        .R(1'b0));
  FDRE \trace_msr_reg_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_msr[28]),
        .Q(D[115]),
        .R(1'b0));
  FDRE \trace_msr_reg_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_msr[29]),
        .Q(D[114]),
        .R(1'b0));
  FDRE \trace_msr_reg_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_msr[30]),
        .Q(D[113]),
        .R(1'b0));
  FDRE \trace_msr_reg_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_msr[25]),
        .Q(D[116]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[0]),
        .Q(D[112]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[10]),
        .Q(D[102]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[11]),
        .Q(D[101]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[12]),
        .Q(D[100]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[13]),
        .Q(D[99]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[14]),
        .Q(D[98]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[15]),
        .Q(D[97]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[16]),
        .Q(D[96]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[17]),
        .Q(D[95]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[18]),
        .Q(D[94]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[19]),
        .Q(D[93]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[1]),
        .Q(D[111]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[20]),
        .Q(D[92]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[21]),
        .Q(D[91]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[22]),
        .Q(D[90]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[23]),
        .Q(D[89]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[24]),
        .Q(D[88]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[25]),
        .Q(D[87]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[26]),
        .Q(D[86]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[27]),
        .Q(D[85]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[28]),
        .Q(D[84]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[29]),
        .Q(D[83]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[2]),
        .Q(D[110]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[30]),
        .Q(D[82]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[31]),
        .Q(D[81]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[3]),
        .Q(D[109]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[4]),
        .Q(D[108]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[5]),
        .Q(D[107]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[6]),
        .Q(D[106]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[7]),
        .Q(D[105]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[8]),
        .Q(D[104]),
        .R(1'b0));
  FDRE \trace_new_reg_value_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_fwd[9]),
        .Q(D[103]),
        .R(1'b0));
  FDRE trace_of_piperun_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(of_piperun),
        .Q(D[3]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[0]),
        .Q(D[154]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[10]),
        .Q(D[144]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[11]),
        .Q(D[143]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[12]),
        .Q(D[142]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[13]),
        .Q(D[141]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[14]),
        .Q(D[140]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[15]),
        .Q(D[139]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[16]),
        .Q(D[138]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[17]),
        .Q(D[137]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[18]),
        .Q(D[136]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[19]),
        .Q(D[135]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[1]),
        .Q(D[153]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[20]),
        .Q(D[134]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[21]),
        .Q(D[133]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[22]),
        .Q(D[132]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[23]),
        .Q(D[131]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[24]),
        .Q(D[130]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[25]),
        .Q(D[129]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[26]),
        .Q(D[128]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[27]),
        .Q(D[127]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[28]),
        .Q(D[126]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[29]),
        .Q(D[125]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[2]),
        .Q(D[152]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[30]),
        .Q(D[124]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[31]),
        .Q(D[123]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[3]),
        .Q(D[151]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[4]),
        .Q(D[150]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[5]),
        .Q(D[149]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[6]),
        .Q(D[148]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[7]),
        .Q(D[147]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[8]),
        .Q(D[146]),
        .R(1'b0));
  FDRE \trace_pc_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_pc[9]),
        .Q(D[145]),
        .R(1'b0));
  FDRE \trace_reg_addr_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_gpr_wr_addr[0]),
        .Q(D[121]),
        .R(1'b0));
  FDSE \trace_reg_addr_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(DECODE_I1_n_330),
        .Q(D[120]),
        .S(wb_msr_clear_ie));
  FDSE \trace_reg_addr_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(DECODE_I1_n_331),
        .Q(D[119]),
        .S(wb_msr_clear_ie));
  FDSE \trace_reg_addr_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(DECODE_I1_n_332),
        .Q(D[118]),
        .S(wb_msr_clear_ie));
  FDRE \trace_reg_addr_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(wb_gpr_wr_addr[4]),
        .Q(D[117]),
        .R(1'b0));
  FDSE trace_reg_write_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(DECODE_I1_n_333),
        .Q(D[122]),
        .S(wb_msr_clear_ie));
  FDRE trace_valid_instr_i_reg
       (.C(Clk),
        .CE(1'b1),
        .D(trace_wb_valid_instr),
        .Q(D[155]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "OneHot_Buffer" *) 
module microblaze_microblaze_0_0_OneHot_Buffer
   (\Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    of_raw_valid,
    addr,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    Q,
    \cur_data_i_reg[26]_0 ,
    \cur_data_i_reg[27]_0 ,
    ex_jump_nodelay_reg,
    \Using_FPGA.Native_1 ,
    ex_jump_nodelay_reg_0,
    \cur_data_i_reg[26]_1 ,
    \cur_data_i_reg[26]_2 ,
    \cur_data_i_reg[28]_0 ,
    ex_jump_nodelay_reg_1,
    \cur_data_i_reg[10]_0 ,
    \cur_data_i_reg[28]_1 ,
    \cur_data_i_reg[26]_3 ,
    \cur_data_i_reg[26]_4 ,
    \cur_data_i_reg[26]_5 ,
    \cur_data_i_reg[26]_6 ,
    \cur_data_i_reg[26]_7 ,
    of_ex_complete_in_later_stage,
    of_m0_complete_in_later_stage,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \m3_gpr_write_addr_reg[3] ,
    \wb_gpr_write_addr_reg[3] ,
    of_op3_sel,
    of_op1_sel_spr,
    of_m1_complete_in_later_stage,
    \cur_data_i_reg[27]_1 ,
    ex_move_to_MSR_instr35_out,
    in0,
    \cur_data_i_reg[18]_0 ,
    \cur_data_i_reg[28]_2 ,
    ex_MSR_set_decode,
    ex_MSR_clear_decode,
    ex_branch_with_delayslot0,
    ex_jump_nodelay0,
    ex_atomic_instruction_pair0,
    \cur_data_i_reg[31]_0 ,
    of_doublet_access,
    EX_Pattern_Cmp_Sel7_out,
    \cur_data_i_reg[7]_0 ,
    \Using_FPGA.Native_4 ,
    ex_set_bip,
    D,
    force12_out,
    use_Reg_Neg_S3_out,
    force_Val10_out,
    use_Reg_Neg_DI1_out,
    ex_op1_cmp_eq1,
    ex_op1_cmp_eq,
    ex_op1_cmp_eq_n7_out,
    \cur_data_i_reg[5]_0 ,
    ex_load_shift_carry0,
    \cur_data_i_reg[5]_1 ,
    ex_databus_read_i0,
    ex_databus_exclusive_i0,
    p_104_in,
    S,
    m3_is_div_instr_i_reg,
    of_is_div_instr,
    \Use_Async_Reset.sync_reset_reg ,
    of_byte_access,
    \cur_data_i_reg[31]_1 ,
    ex_mbar_is_sleep0,
    EX_CMP_Op12_out,
    EX_Unsigned_Op11_out,
    ex_load_alu_carry2_out,
    EX_Use_Carry10_out,
    EX_Bit_Extract0,
    of_is_bsifi,
    OF_Use_Op_B,
    \Using_FPGA.Native_5 ,
    S_10,
    S_11,
    S_12,
    S_13,
    S_14,
    \cur_data_i_reg[30]_0 ,
    \cur_data_i_reg[29]_0 ,
    \cur_data_i_reg[28]_3 ,
    \cur_data_i_reg[28]_4 ,
    \cur_data_i_reg[28]_5 ,
    \cur_data_i_reg[28]_6 ,
    \ex_gpr_write_addr_reg[2] ,
    \m0_gpr_write_addr_reg[2] ,
    \m1_gpr_write_addr_reg[2] ,
    \m2_gpr_write_addr_reg[2] ,
    \m3_gpr_write_addr_reg[2] ,
    \cur_data_i_reg[26]_8 ,
    \cur_data_i_reg[31]_2 ,
    \cur_data_i_reg[26]_9 ,
    \cur_data_i_reg[31]_3 ,
    \cur_data_i_reg[26]_10 ,
    \cur_data_i_reg[31]_4 ,
    \cur_data_i_reg[26]_11 ,
    \cur_data_i_reg[31]_5 ,
    EX_CLZ_Instr_reg,
    m2_m1_sel_res_reg,
    \EX_Op3[0]_i_6_0 ,
    \EX_Op3[0]_i_7_0 ,
    \cur_data_i_reg[6]_0 ,
    \cur_data_i_reg[15]_0 ,
    \cur_data_i_reg[14]_0 ,
    \cur_data_i_reg[13]_0 ,
    \cur_data_i_reg[11]_0 ,
    \cur_data_i_reg[10]_1 ,
    \cur_data_i_reg[31]_6 ,
    \cur_data_i_reg[0]_0 ,
    \cur_data_i_reg[15]_1 ,
    \imm_reg_reg[2] ,
    \imm_reg_reg[3] ,
    \imm_reg_reg[4] ,
    \imm_reg_reg[5] ,
    \imm_reg_reg[6] ,
    \imm_reg_reg[7] ,
    \imm_reg_reg[8] ,
    \imm_reg_reg[9] ,
    \imm_reg_reg[10] ,
    \imm_reg_reg[11] ,
    \imm_reg_reg[12] ,
    \imm_reg_reg[13] ,
    \imm_reg_reg[14] ,
    \imm_reg_reg[15] ,
    \imm_reg_reg[0] ,
    \cur_data_i_reg[0]_1 ,
    \cur_data_i_reg[1]_0 ,
    \cur_data_i_reg[2]_0 ,
    \cur_data_i_reg[3]_0 ,
    \cur_data_i_reg[4]_0 ,
    \cur_data_i_reg[5]_2 ,
    \cur_data_i_reg[7]_1 ,
    \cur_data_i_reg[8]_0 ,
    \cur_data_i_reg[9]_0 ,
    \cur_data_i_reg[12]_0 ,
    if4_push_instr_fetch,
    \Using_FPGA.Native_6 ,
    Clear_Buffer,
    sync_reset,
    Clk,
    \Performance_Debug_Control.ex_brki_hit_reg ,
    \Performance_Debug_Control.ex_brki_hit_reg_0 ,
    ex_jump_nodelay,
    ex_jump,
    ex_branch_with_delayslot,
    \Using_FPGA.Native_7 ,
    if4_data,
    \cur_data_i_reg[0]_2 ,
    \EX_Op3[0]_i_4 ,
    \EX_Op3[0]_i_18_0 ,
    \EX_Op3[0]_i_7_1 ,
    \EX_Op3[0]_i_17_0 ,
    \EX_Op3[0]_i_7_2 ,
    \EX_Op3[0]_i_16_0 ,
    \EX_Op3[0]_i_7_3 ,
    \EX_Op3[0]_i_15_0 ,
    \EX_Op3[0]_i_7_4 ,
    ex_gpr_write,
    \EX_Op3[29]_i_3 ,
    ex_databus_access_i_reg,
    ex_jump_hold,
    \Using_FPGA.Native_8 ,
    m2_is_div_instr,
    m1_is_div_instr_i,
    m0_is_div_instr_i,
    \Using_FPGA.Native_9 ,
    \EX_Op3[0]_i_7_5 ,
    if0_pause,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \EX_Op3[0]_i_12_0 ,
    \EX_Op3[0]_i_6_1 ,
    ex_gpr_write_addr,
    \Using_FPGA.Native_12 ,
    \EX_Op3_reg[30] ,
    \EX_Op3_reg[30]_0 ,
    \EX_Op3_reg[30]_1 ,
    GPR_Op3,
    \EX_Op3_reg[31] ,
    wb_fwd,
    \EX_Op3_reg[31]_0 ,
    \EX_Op3_reg[31]_1 ,
    \EX_Op3_reg[31]_2 ,
    \EX_Op3_reg[31]_3 ,
    \EX_Op3_reg[31]_4 ,
    \EX_Op2[25]_i_2 ,
    GPR_Op2,
    \EX_Op2[21]_i_2 ,
    \EX_Op2[16]_i_2 ,
    \EX_Op1_reg[0] ,
    \EX_Op1_reg[0]_0 ,
    \EX_Op1_reg[0]_1 ,
    ex_set_msr_ee_instr,
    \EX_Op1_reg[23] ,
    \EX_Op1_reg[25] ,
    of_msr,
    of_read_imm_reg,
    \EX_Op2[0]_i_4 );
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  output of_raw_valid;
  output [1:0]addr;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  output [31:0]Q;
  output \cur_data_i_reg[26]_0 ;
  output \cur_data_i_reg[27]_0 ;
  output ex_jump_nodelay_reg;
  output [0:0]\Using_FPGA.Native_1 ;
  output ex_jump_nodelay_reg_0;
  output \cur_data_i_reg[26]_1 ;
  output \cur_data_i_reg[26]_2 ;
  output \cur_data_i_reg[28]_0 ;
  output ex_jump_nodelay_reg_1;
  output \cur_data_i_reg[10]_0 ;
  output \cur_data_i_reg[28]_1 ;
  output \cur_data_i_reg[26]_3 ;
  output \cur_data_i_reg[26]_4 ;
  output \cur_data_i_reg[26]_5 ;
  output \cur_data_i_reg[26]_6 ;
  output \cur_data_i_reg[26]_7 ;
  output of_ex_complete_in_later_stage;
  output of_m0_complete_in_later_stage;
  output \Using_FPGA.Native_2 ;
  output \Using_FPGA.Native_3 ;
  output \m3_gpr_write_addr_reg[3] ;
  output \wb_gpr_write_addr_reg[3] ;
  output [0:0]of_op3_sel;
  output of_op1_sel_spr;
  output of_m1_complete_in_later_stage;
  output \cur_data_i_reg[27]_1 ;
  output ex_move_to_MSR_instr35_out;
  output in0;
  output \cur_data_i_reg[18]_0 ;
  output \cur_data_i_reg[28]_2 ;
  output ex_MSR_set_decode;
  output ex_MSR_clear_decode;
  output ex_branch_with_delayslot0;
  output ex_jump_nodelay0;
  output ex_atomic_instruction_pair0;
  output \cur_data_i_reg[31]_0 ;
  output of_doublet_access;
  output EX_Pattern_Cmp_Sel7_out;
  output \cur_data_i_reg[7]_0 ;
  output \Using_FPGA.Native_4 ;
  output ex_set_bip;
  output [1:0]D;
  output force12_out;
  output use_Reg_Neg_S3_out;
  output force_Val10_out;
  output use_Reg_Neg_DI1_out;
  output ex_op1_cmp_eq1;
  output ex_op1_cmp_eq;
  output ex_op1_cmp_eq_n7_out;
  output [1:0]\cur_data_i_reg[5]_0 ;
  output ex_load_shift_carry0;
  output \cur_data_i_reg[5]_1 ;
  output ex_databus_read_i0;
  output ex_databus_exclusive_i0;
  output p_104_in;
  output S;
  output m3_is_div_instr_i_reg;
  output of_is_div_instr;
  output \Use_Async_Reset.sync_reset_reg ;
  output of_byte_access;
  output \cur_data_i_reg[31]_1 ;
  output ex_mbar_is_sleep0;
  output EX_CMP_Op12_out;
  output EX_Unsigned_Op11_out;
  output ex_load_alu_carry2_out;
  output EX_Use_Carry10_out;
  output EX_Bit_Extract0;
  output of_is_bsifi;
  output OF_Use_Op_B;
  output \Using_FPGA.Native_5 ;
  output S_10;
  output S_11;
  output S_12;
  output S_13;
  output S_14;
  output \cur_data_i_reg[30]_0 ;
  output \cur_data_i_reg[29]_0 ;
  output \cur_data_i_reg[28]_3 ;
  output \cur_data_i_reg[28]_4 ;
  output \cur_data_i_reg[28]_5 ;
  output \cur_data_i_reg[28]_6 ;
  output \ex_gpr_write_addr_reg[2] ;
  output \m0_gpr_write_addr_reg[2] ;
  output \m1_gpr_write_addr_reg[2] ;
  output \m2_gpr_write_addr_reg[2] ;
  output \m3_gpr_write_addr_reg[2] ;
  output \cur_data_i_reg[26]_8 ;
  output \cur_data_i_reg[31]_2 ;
  output \cur_data_i_reg[26]_9 ;
  output \cur_data_i_reg[31]_3 ;
  output \cur_data_i_reg[26]_10 ;
  output \cur_data_i_reg[31]_4 ;
  output \cur_data_i_reg[26]_11 ;
  output \cur_data_i_reg[31]_5 ;
  output EX_CLZ_Instr_reg;
  output [0:0]m2_m1_sel_res_reg;
  output \EX_Op3[0]_i_6_0 ;
  output \EX_Op3[0]_i_7_0 ;
  output \cur_data_i_reg[6]_0 ;
  output \cur_data_i_reg[15]_0 ;
  output \cur_data_i_reg[14]_0 ;
  output \cur_data_i_reg[13]_0 ;
  output \cur_data_i_reg[11]_0 ;
  output \cur_data_i_reg[10]_1 ;
  output [28:0]\cur_data_i_reg[31]_6 ;
  output \cur_data_i_reg[0]_0 ;
  output \cur_data_i_reg[15]_1 ;
  output \imm_reg_reg[2] ;
  output \imm_reg_reg[3] ;
  output \imm_reg_reg[4] ;
  output \imm_reg_reg[5] ;
  output \imm_reg_reg[6] ;
  output \imm_reg_reg[7] ;
  output \imm_reg_reg[8] ;
  output \imm_reg_reg[9] ;
  output \imm_reg_reg[10] ;
  output \imm_reg_reg[11] ;
  output \imm_reg_reg[12] ;
  output \imm_reg_reg[13] ;
  output \imm_reg_reg[14] ;
  output \imm_reg_reg[15] ;
  output \imm_reg_reg[0] ;
  output \cur_data_i_reg[0]_1 ;
  output \cur_data_i_reg[1]_0 ;
  output \cur_data_i_reg[2]_0 ;
  output \cur_data_i_reg[3]_0 ;
  output \cur_data_i_reg[4]_0 ;
  output \cur_data_i_reg[5]_2 ;
  output \cur_data_i_reg[7]_1 ;
  output \cur_data_i_reg[8]_0 ;
  output \cur_data_i_reg[9]_0 ;
  output \cur_data_i_reg[12]_0 ;
  input if4_push_instr_fetch;
  input \Using_FPGA.Native_6 ;
  input Clear_Buffer;
  input sync_reset;
  input Clk;
  input [0:0]\Performance_Debug_Control.ex_brki_hit_reg ;
  input \Performance_Debug_Control.ex_brki_hit_reg_0 ;
  input ex_jump_nodelay;
  input ex_jump;
  input ex_branch_with_delayslot;
  input \Using_FPGA.Native_7 ;
  input [0:31]if4_data;
  input \cur_data_i_reg[0]_2 ;
  input \EX_Op3[0]_i_4 ;
  input [4:0]\EX_Op3[0]_i_18_0 ;
  input \EX_Op3[0]_i_7_1 ;
  input [4:0]\EX_Op3[0]_i_17_0 ;
  input \EX_Op3[0]_i_7_2 ;
  input [4:0]\EX_Op3[0]_i_16_0 ;
  input \EX_Op3[0]_i_7_3 ;
  input [4:0]\EX_Op3[0]_i_15_0 ;
  input \EX_Op3[0]_i_7_4 ;
  input ex_gpr_write;
  input \EX_Op3[29]_i_3 ;
  input ex_databus_access_i_reg;
  input ex_jump_hold;
  input \Using_FPGA.Native_8 ;
  input m2_is_div_instr;
  input m1_is_div_instr_i;
  input m0_is_div_instr_i;
  input \Using_FPGA.Native_9 ;
  input [0:0]\EX_Op3[0]_i_7_5 ;
  input if0_pause;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input [4:0]\EX_Op3[0]_i_12_0 ;
  input \EX_Op3[0]_i_6_1 ;
  input [2:0]ex_gpr_write_addr;
  input [1:0]\Using_FPGA.Native_12 ;
  input \EX_Op3_reg[30] ;
  input \EX_Op3_reg[30]_0 ;
  input \EX_Op3_reg[30]_1 ;
  input [1:0]GPR_Op3;
  input \EX_Op3_reg[31] ;
  input [0:0]wb_fwd;
  input \EX_Op3_reg[31]_0 ;
  input \EX_Op3_reg[31]_1 ;
  input \EX_Op3_reg[31]_2 ;
  input \EX_Op3_reg[31]_3 ;
  input \EX_Op3_reg[31]_4 ;
  input \EX_Op2[25]_i_2 ;
  input [0:31]GPR_Op2;
  input \EX_Op2[21]_i_2 ;
  input [4:0]\EX_Op2[16]_i_2 ;
  input [29:0]\EX_Op1_reg[0] ;
  input \EX_Op1_reg[0]_0 ;
  input [28:0]\EX_Op1_reg[0]_1 ;
  input ex_set_msr_ee_instr;
  input \EX_Op1_reg[23] ;
  input [0:0]\EX_Op1_reg[25] ;
  input [0:0]of_msr;
  input of_read_imm_reg;
  input [15:0]\EX_Op2[0]_i_4 ;

  wire Clear_Buffer;
  wire Clk;
  wire [1:0]D;
  wire \Data_Mux[0].new_data_cmb_reg ;
  wire \Data_Mux[10].new_data_cmb_reg ;
  wire \Data_Mux[11].new_data_cmb_reg ;
  wire \Data_Mux[12].new_data_cmb_reg ;
  wire \Data_Mux[13].new_data_cmb_reg ;
  wire \Data_Mux[14].new_data_cmb_reg ;
  wire \Data_Mux[1].new_data_cmb_reg ;
  wire \Data_Mux[2].new_data_cmb_reg ;
  wire \Data_Mux[3].new_data_cmb_reg ;
  wire \Data_Mux[4].new_data_cmb_reg ;
  wire \Data_Mux[5].new_data_cmb_reg ;
  wire \Data_Mux[6].new_data_cmb_reg ;
  wire \Data_Mux[7].new_data_cmb_reg ;
  wire \Data_Mux[8].new_data_cmb_reg ;
  wire \Data_Mux[9].new_data_cmb_reg ;
  wire \EX_ALU_Op[0]_i_2_n_0 ;
  wire EX_Bit_Extract0;
  wire EX_Bit_Insert_i_2_n_0;
  wire EX_CLZ_Instr_reg;
  wire EX_CMP_Op12_out;
  wire [29:0]\EX_Op1_reg[0] ;
  wire \EX_Op1_reg[0]_0 ;
  wire [28:0]\EX_Op1_reg[0]_1 ;
  wire \EX_Op1_reg[23] ;
  wire [0:0]\EX_Op1_reg[25] ;
  wire [15:0]\EX_Op2[0]_i_4 ;
  wire [4:0]\EX_Op2[16]_i_2 ;
  wire \EX_Op2[21]_i_2 ;
  wire \EX_Op2[25]_i_2 ;
  wire \EX_Op3[0]_i_10_n_0 ;
  wire [4:0]\EX_Op3[0]_i_12_0 ;
  wire \EX_Op3[0]_i_12_n_0 ;
  wire \EX_Op3[0]_i_13_n_0 ;
  wire [4:0]\EX_Op3[0]_i_15_0 ;
  wire \EX_Op3[0]_i_15_n_0 ;
  wire [4:0]\EX_Op3[0]_i_16_0 ;
  wire \EX_Op3[0]_i_16_n_0 ;
  wire [4:0]\EX_Op3[0]_i_17_0 ;
  wire \EX_Op3[0]_i_17_n_0 ;
  wire [4:0]\EX_Op3[0]_i_18_0 ;
  wire \EX_Op3[0]_i_18_n_0 ;
  wire \EX_Op3[0]_i_20_n_0 ;
  wire \EX_Op3[0]_i_4 ;
  wire \EX_Op3[0]_i_6_0 ;
  wire \EX_Op3[0]_i_6_1 ;
  wire \EX_Op3[0]_i_7_0 ;
  wire \EX_Op3[0]_i_7_1 ;
  wire \EX_Op3[0]_i_7_2 ;
  wire \EX_Op3[0]_i_7_3 ;
  wire \EX_Op3[0]_i_7_4 ;
  wire [0:0]\EX_Op3[0]_i_7_5 ;
  wire \EX_Op3[0]_i_8_n_0 ;
  wire \EX_Op3[0]_i_9_n_0 ;
  wire \EX_Op3[29]_i_3 ;
  wire \EX_Op3[31]_i_3_n_0 ;
  wire \EX_Op3[31]_i_4_n_0 ;
  wire \EX_Op3_reg[30] ;
  wire \EX_Op3_reg[30]_0 ;
  wire \EX_Op3_reg[30]_1 ;
  wire \EX_Op3_reg[31] ;
  wire \EX_Op3_reg[31]_0 ;
  wire \EX_Op3_reg[31]_1 ;
  wire \EX_Op3_reg[31]_2 ;
  wire \EX_Op3_reg[31]_3 ;
  wire \EX_Op3_reg[31]_4 ;
  wire EX_Pattern_Cmp_Sel7_out;
  wire EX_Unsigned_Op11_out;
  wire EX_Use_Carry10_out;
  wire [0:31]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire OF_Use_Op_B;
  wire \Op3_Conflict_Stall/OF_EX_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op3_Conflict_Stall/OF_M0_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op3_Conflict_Stall/OF_M1_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op3_Conflict_Stall/OF_M2_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op3_Conflict_Stall/OF_M3_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Performance_Debug_Control.ex_brki_hit_i_2_n_0 ;
  wire \Performance_Debug_Control.ex_brki_hit_i_3_n_0 ;
  wire \Performance_Debug_Control.ex_brki_hit_i_4_n_0 ;
  wire \Performance_Debug_Control.ex_brki_hit_i_5_n_0 ;
  wire \Performance_Debug_Control.ex_brki_hit_i_6_n_0 ;
  wire [0:0]\Performance_Debug_Control.ex_brki_hit_reg ;
  wire \Performance_Debug_Control.ex_brki_hit_reg_0 ;
  wire Prefetch_Almost_Full;
  wire Prefetch_Early_Full;
  wire [31:0]Q;
  wire S;
  wire S_10;
  wire S_11;
  wire S_12;
  wire S_13;
  wire S_14;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire Use_Next_Data;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire [1:0]\Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire [1:0]addr;
  wire \cur_data_i_reg[0]_0 ;
  wire \cur_data_i_reg[0]_1 ;
  wire \cur_data_i_reg[0]_2 ;
  wire \cur_data_i_reg[10]_0 ;
  wire \cur_data_i_reg[10]_1 ;
  wire \cur_data_i_reg[11]_0 ;
  wire \cur_data_i_reg[12]_0 ;
  wire \cur_data_i_reg[13]_0 ;
  wire \cur_data_i_reg[14]_0 ;
  wire \cur_data_i_reg[15]_0 ;
  wire \cur_data_i_reg[15]_1 ;
  wire \cur_data_i_reg[18]_0 ;
  wire \cur_data_i_reg[1]_0 ;
  wire \cur_data_i_reg[26]_0 ;
  wire \cur_data_i_reg[26]_1 ;
  wire \cur_data_i_reg[26]_10 ;
  wire \cur_data_i_reg[26]_11 ;
  wire \cur_data_i_reg[26]_2 ;
  wire \cur_data_i_reg[26]_3 ;
  wire \cur_data_i_reg[26]_4 ;
  wire \cur_data_i_reg[26]_5 ;
  wire \cur_data_i_reg[26]_6 ;
  wire \cur_data_i_reg[26]_7 ;
  wire \cur_data_i_reg[26]_8 ;
  wire \cur_data_i_reg[26]_9 ;
  wire \cur_data_i_reg[27]_0 ;
  wire \cur_data_i_reg[27]_1 ;
  wire \cur_data_i_reg[28]_0 ;
  wire \cur_data_i_reg[28]_1 ;
  wire \cur_data_i_reg[28]_2 ;
  wire \cur_data_i_reg[28]_3 ;
  wire \cur_data_i_reg[28]_4 ;
  wire \cur_data_i_reg[28]_5 ;
  wire \cur_data_i_reg[28]_6 ;
  wire \cur_data_i_reg[29]_0 ;
  wire \cur_data_i_reg[2]_0 ;
  wire \cur_data_i_reg[30]_0 ;
  wire \cur_data_i_reg[31]_0 ;
  wire \cur_data_i_reg[31]_1 ;
  wire \cur_data_i_reg[31]_2 ;
  wire \cur_data_i_reg[31]_3 ;
  wire \cur_data_i_reg[31]_4 ;
  wire \cur_data_i_reg[31]_5 ;
  wire [28:0]\cur_data_i_reg[31]_6 ;
  wire \cur_data_i_reg[3]_0 ;
  wire \cur_data_i_reg[4]_0 ;
  wire [1:0]\cur_data_i_reg[5]_0 ;
  wire \cur_data_i_reg[5]_1 ;
  wire \cur_data_i_reg[5]_2 ;
  wire \cur_data_i_reg[6]_0 ;
  wire \cur_data_i_reg[7]_0 ;
  wire \cur_data_i_reg[7]_1 ;
  wire \cur_data_i_reg[8]_0 ;
  wire \cur_data_i_reg[9]_0 ;
  wire cur_valid_cmb;
  wire \data_buffer_reg[3][0]_srl4_n_0 ;
  wire ex_MSR_clear_decode;
  wire ex_MSR_clear_decode_i_2_n_0;
  wire ex_MSR_set_decode;
  wire ex_atomic_instruction_pair0;
  wire ex_atomic_instruction_pair_i_2_n_0;
  wire ex_branch_with_delayslot;
  wire ex_branch_with_delayslot0;
  wire ex_complete_in_later_stage_i_2_n_0;
  wire ex_databus_access_i_reg;
  wire ex_databus_exclusive_i0;
  wire ex_databus_exclusive_i_i_2_n_0;
  wire ex_databus_read_i0;
  wire ex_gpr_write;
  wire [2:0]ex_gpr_write_addr;
  wire \ex_gpr_write_addr_reg[2] ;
  wire ex_jump;
  wire ex_jump_hold;
  wire ex_jump_nodelay;
  wire ex_jump_nodelay0;
  wire ex_jump_nodelay_reg;
  wire ex_jump_nodelay_reg_0;
  wire ex_jump_nodelay_reg_1;
  wire ex_load_alu_carry2_out;
  wire ex_load_shift_carry0;
  wire ex_mbar_is_sleep0;
  wire ex_move_to_MSR_instr35_out;
  wire ex_move_to_MSR_instr_i_2_n_0;
  wire ex_op1_cmp_eq;
  wire ex_op1_cmp_eq1;
  wire ex_op1_cmp_eq_i_2_n_0;
  wire ex_op1_cmp_eq_n7_out;
  wire ex_set_bip;
  wire ex_set_msr_ee_instr;
  wire force12_out;
  wire force_Val10_out;
  wire if0_pause;
  wire [0:31]if4_data;
  wire if4_push_instr_fetch;
  wire \imm_reg_reg[0] ;
  wire \imm_reg_reg[10] ;
  wire \imm_reg_reg[11] ;
  wire \imm_reg_reg[12] ;
  wire \imm_reg_reg[13] ;
  wire \imm_reg_reg[14] ;
  wire \imm_reg_reg[15] ;
  wire \imm_reg_reg[2] ;
  wire \imm_reg_reg[3] ;
  wire \imm_reg_reg[4] ;
  wire \imm_reg_reg[5] ;
  wire \imm_reg_reg[6] ;
  wire \imm_reg_reg[7] ;
  wire \imm_reg_reg[8] ;
  wire \imm_reg_reg[9] ;
  wire in0;
  wire \m0_gpr_write_addr_reg[2] ;
  wire m0_is_div_instr_i;
  wire \m1_gpr_write_addr_reg[2] ;
  wire m1_is_div_instr_i;
  wire \m2_gpr_write_addr_reg[2] ;
  wire m2_is_div_instr;
  wire [0:0]m2_m1_sel_res_reg;
  wire \m3_gpr_write_addr_reg[2] ;
  wire \m3_gpr_write_addr_reg[3] ;
  wire m3_is_div_instr_i_reg;
  wire [31:15]new_data_cmb;
  wire of_byte_access;
  wire of_doublet_access;
  wire of_ex_complete_in_later_stage;
  wire of_gpr_write_dbg_inferred_i_2_n_0;
  wire of_gpr_write_dbg_inferred_i_3_n_0;
  wire of_gpr_write_dbg_inferred_i_5_n_0;
  wire of_is_bsifi;
  wire of_is_div_instr;
  wire of_m0_complete_in_later_stage;
  wire of_m1_complete_in_later_stage;
  wire [0:0]of_msr;
  wire of_op1_sel_spr;
  wire [0:0]of_op3_sel;
  wire of_raw_valid;
  wire of_read_imm_reg;
  wire p_104_in;
  wire p_1_in105_in;
  wire p_1_in110_in;
  wire p_1_in116_in;
  wire p_1_in122_in;
  wire p_1_in128_in;
  wire p_1_in134_in;
  wire p_1_in140_in;
  wire p_1_in146_in;
  wire p_1_in14_in;
  wire p_1_in152_in;
  wire p_1_in158_in;
  wire p_1_in164_in;
  wire p_1_in170_in;
  wire p_1_in176_in;
  wire p_1_in182_in;
  wire p_1_in20_in;
  wire p_1_in26_in;
  wire p_1_in2_in;
  wire p_1_in32_in;
  wire p_1_in38_in;
  wire p_1_in44_in;
  wire p_1_in50_in;
  wire p_1_in56_in;
  wire p_1_in62_in;
  wire p_1_in68_in;
  wire p_1_in74_in;
  wire p_1_in80_in;
  wire p_1_in86_in;
  wire p_1_in8_in;
  wire p_1_in92_in;
  wire p_1_in98_in;
  wire sel_input_delayslot;
  wire sel_input_depth;
  wire sel_input_i;
  wire sel_input_iii_0;
  wire sel_input_iii_1;
  wire sel_input_iii_2;
  wire sel_input_iii_3;
  wire sync_reset;
  wire use_Reg_Neg_DI1_out;
  wire use_Reg_Neg_S3_out;
  wire [0:0]wb_fwd;
  wire \wb_gpr_write_addr_reg[3] ;

  LUT6 #(
    .INIT(64'hDDDF0000DDDFDDDF)) 
    \EX_ALU_Op[0]_i_1 
       (.I0(\EX_ALU_Op[0]_i_2_n_0 ),
        .I1(Q[27]),
        .I2(Q[30]),
        .I3(Q[31]),
        .I4(of_gpr_write_dbg_inferred_i_3_n_0),
        .I5(Q[19]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT5 #(
    .INIT(32'h00007707)) 
    \EX_ALU_Op[0]_i_2 
       (.I0(Q[30]),
        .I1(Q[31]),
        .I2(Q[10]),
        .I3(Q[29]),
        .I4(Q[28]),
        .O(\EX_ALU_Op[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF444F44444444)) 
    \EX_ALU_Op[1]_i_1 
       (.I0(of_gpr_write_dbg_inferred_i_3_n_0),
        .I1(Q[19]),
        .I2(Q[30]),
        .I3(Q[31]),
        .I4(\EX_ALU_Op[0]_i_2_n_0 ),
        .I5(Q[26]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT3 #(
    .INIT(8'h14)) 
    EX_ALU_Sel_Logic_i_1
       (.I0(Q[28]),
        .I1(Q[30]),
        .I2(Q[31]),
        .O(\cur_data_i_reg[28]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT5 #(
    .INIT(32'h00000080)) 
    EX_Bit_Extract_i_1
       (.I0(Q[14]),
        .I1(Q[26]),
        .I2(Q[29]),
        .I3(Q[27]),
        .I4(EX_Bit_Insert_i_2_n_0),
        .O(EX_Bit_Extract0));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT5 #(
    .INIT(32'h00000080)) 
    EX_Bit_Insert_i_1
       (.I0(Q[15]),
        .I1(Q[26]),
        .I2(Q[29]),
        .I3(Q[27]),
        .I4(EX_Bit_Insert_i_2_n_0),
        .O(of_is_bsifi));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT3 #(
    .INIT(8'hFB)) 
    EX_Bit_Insert_i_2
       (.I0(Q[31]),
        .I1(Q[30]),
        .I2(Q[28]),
        .O(EX_Bit_Insert_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    EX_CLZ_Instr_i_1
       (.I0(\cur_data_i_reg[26]_2 ),
        .I1(Q[5]),
        .I2(Q[6]),
        .I3(Q[7]),
        .O(\cur_data_i_reg[5]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    EX_CMP_Op_i_1
       (.I0(Q[0]),
        .I1(Q[31]),
        .I2(Q[30]),
        .I3(Q[29]),
        .O(EX_CMP_Op12_out));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT5 #(
    .INIT(32'hFFFFFF9F)) 
    EX_Enable_ALU_i_1
       (.I0(Q[30]),
        .I1(Q[31]),
        .I2(Q[10]),
        .I3(Q[29]),
        .I4(Q[28]),
        .O(\cur_data_i_reg[30]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT5 #(
    .INIT(32'h15555555)) 
    EX_Enable_Sext_Shift_i_1
       (.I0(ex_MSR_clear_decode_i_2_n_0),
        .I1(Q[7]),
        .I2(Q[6]),
        .I3(Q[5]),
        .I4(\cur_data_i_reg[26]_2 ),
        .O(\cur_data_i_reg[7]_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \EX_Op1[0]_i_1 
       (.I0(\EX_Op1_reg[0] [29]),
        .I1(\cur_data_i_reg[27]_1 ),
        .I2(\EX_Op1_reg[0]_0 ),
        .I3(of_op1_sel_spr),
        .I4(\EX_Op1_reg[0]_1 [28]),
        .O(\cur_data_i_reg[31]_6 [28]));
  LUT6 #(
    .INIT(64'h4444444444444F44)) 
    \EX_Op1[0]_i_2 
       (.I0(ex_MSR_clear_decode_i_2_n_0),
        .I1(Q[27]),
        .I2(Q[0]),
        .I3(Q[15]),
        .I4(Q[14]),
        .I5(ex_move_to_MSR_instr_i_2_n_0),
        .O(\cur_data_i_reg[27]_1 ));
  LUT5 #(
    .INIT(32'h50505150)) 
    \EX_Op1[0]_i_4 
       (.I0(ex_MSR_clear_decode_i_2_n_0),
        .I1(Q[29]),
        .I2(Q[27]),
        .I3(Q[26]),
        .I4(Q[14]),
        .O(of_op1_sel_spr));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[10]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [19]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [18]),
        .O(\cur_data_i_reg[31]_6 [18]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[11]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [18]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [17]),
        .O(\cur_data_i_reg[31]_6 [17]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[12]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [17]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [16]),
        .O(\cur_data_i_reg[31]_6 [16]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[13]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [16]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [15]),
        .O(\cur_data_i_reg[31]_6 [15]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[14]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [15]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [14]),
        .O(\cur_data_i_reg[31]_6 [14]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[15]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [14]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [13]),
        .O(\cur_data_i_reg[31]_6 [13]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[16]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [13]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [12]),
        .O(\cur_data_i_reg[31]_6 [12]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[17]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [12]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [11]),
        .O(\cur_data_i_reg[31]_6 [11]));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[18]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [11]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [10]),
        .O(\cur_data_i_reg[31]_6 [10]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[19]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [10]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [9]),
        .O(\cur_data_i_reg[31]_6 [9]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[1]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [28]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [27]),
        .O(\cur_data_i_reg[31]_6 [27]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[20]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [9]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [8]),
        .O(\cur_data_i_reg[31]_6 [8]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[21]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [8]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [7]),
        .O(\cur_data_i_reg[31]_6 [7]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[22]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [7]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [6]),
        .O(\cur_data_i_reg[31]_6 [6]));
  LUT6 #(
    .INIT(64'h88B8FFFF88B80000)) 
    \EX_Op1[23]_i_1 
       (.I0(\EX_Op1_reg[0] [6]),
        .I1(\cur_data_i_reg[27]_1 ),
        .I2(ex_set_msr_ee_instr),
        .I3(\EX_Op1_reg[23] ),
        .I4(of_op1_sel_spr),
        .I5(\EX_Op1_reg[0]_1 [5]),
        .O(\cur_data_i_reg[31]_6 [5]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[24]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [5]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [4]),
        .O(\cur_data_i_reg[31]_6 [4]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \EX_Op1[25]_i_1 
       (.I0(\EX_Op1_reg[0] [4]),
        .I1(\cur_data_i_reg[27]_1 ),
        .I2(\EX_Op1_reg[25] ),
        .I3(of_op1_sel_spr),
        .I4(\EX_Op1_reg[0]_1 [3]),
        .O(\cur_data_i_reg[31]_6 [3]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[26]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [3]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [2]),
        .O(\cur_data_i_reg[31]_6 [2]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[27]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [2]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [1]),
        .O(\cur_data_i_reg[31]_6 [1]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \EX_Op1[28]_i_1 
       (.I0(\EX_Op1_reg[0] [1]),
        .I1(\cur_data_i_reg[27]_1 ),
        .I2(of_msr),
        .I3(of_op1_sel_spr),
        .I4(\EX_Op1_reg[0]_1 [0]),
        .O(\cur_data_i_reg[31]_6 [0]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[2]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [27]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [26]),
        .O(\cur_data_i_reg[31]_6 [26]));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \EX_Op1[31]_i_2 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [0]),
        .O(\cur_data_i_reg[0]_0 ));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[3]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [26]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [25]),
        .O(\cur_data_i_reg[31]_6 [25]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[4]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [25]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [24]),
        .O(\cur_data_i_reg[31]_6 [24]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[5]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [24]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [23]),
        .O(\cur_data_i_reg[31]_6 [23]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[6]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [23]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [22]),
        .O(\cur_data_i_reg[31]_6 [22]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[7]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [22]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [21]),
        .O(\cur_data_i_reg[31]_6 [21]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[8]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [21]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [20]),
        .O(\cur_data_i_reg[31]_6 [20]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \EX_Op1[9]_i_1 
       (.I0(\cur_data_i_reg[27]_1 ),
        .I1(\EX_Op1_reg[0] [20]),
        .I2(of_op1_sel_spr),
        .I3(\EX_Op1_reg[0]_1 [19]),
        .O(\cur_data_i_reg[31]_6 [19]));
  LUT6 #(
    .INIT(64'hF0F0F2F0F0F0F0F0)) 
    \EX_Op2[0]_i_10 
       (.I0(Q[26]),
        .I1(Q[27]),
        .I2(Q[29]),
        .I3(Q[31]),
        .I4(Q[30]),
        .I5(Q[28]),
        .O(\cur_data_i_reg[26]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT5 #(
    .INIT(32'hAAAAAEAA)) 
    \EX_Op2[0]_i_14 
       (.I0(Q[29]),
        .I1(Q[31]),
        .I2(Q[30]),
        .I3(Q[28]),
        .I4(Q[27]),
        .O(\cur_data_i_reg[29]_0 ));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \EX_Op2[0]_i_8 
       (.I0(\EX_Op2[0]_i_4 [15]),
        .I1(of_read_imm_reg),
        .I2(Q[15]),
        .I3(\cur_data_i_reg[26]_0 ),
        .I4(GPR_Op2[0]),
        .O(\imm_reg_reg[0] ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[10]_i_6 
       (.I0(GPR_Op2[10]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [5]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[10] ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[11]_i_6 
       (.I0(GPR_Op2[11]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [4]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[11] ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[12]_i_6 
       (.I0(GPR_Op2[12]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [3]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[12] ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[13]_i_6 
       (.I0(GPR_Op2[13]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [2]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[13] ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[14]_i_6 
       (.I0(GPR_Op2[14]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [1]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[14] ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[15]_i_6 
       (.I0(GPR_Op2[15]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [0]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[15] ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \EX_Op2[16]_i_4 
       (.I0(\EX_Op2[16]_i_2 [4]),
        .I1(\EX_Op2[21]_i_2 ),
        .I2(Q[15]),
        .I3(\cur_data_i_reg[26]_0 ),
        .I4(GPR_Op2[16]),
        .O(\cur_data_i_reg[15]_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \EX_Op2[17]_i_4 
       (.I0(\EX_Op2[16]_i_2 [3]),
        .I1(\EX_Op2[21]_i_2 ),
        .I2(Q[14]),
        .I3(\cur_data_i_reg[26]_0 ),
        .I4(GPR_Op2[17]),
        .O(\cur_data_i_reg[14]_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \EX_Op2[18]_i_4 
       (.I0(\EX_Op2[16]_i_2 [2]),
        .I1(\EX_Op2[21]_i_2 ),
        .I2(Q[13]),
        .I3(\cur_data_i_reg[26]_0 ),
        .I4(GPR_Op2[18]),
        .O(\cur_data_i_reg[13]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \EX_Op2[19]_i_5 
       (.I0(Q[12]),
        .I1(\cur_data_i_reg[26]_0 ),
        .I2(GPR_Op2[19]),
        .O(\cur_data_i_reg[12]_0 ));
  LUT5 #(
    .INIT(32'h0355CF55)) 
    \EX_Op2[1]_i_6 
       (.I0(GPR_Op2[1]),
        .I1(of_read_imm_reg),
        .I2(Q[15]),
        .I3(\cur_data_i_reg[26]_0 ),
        .I4(\EX_Op2[0]_i_4 [14]),
        .O(\cur_data_i_reg[15]_1 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \EX_Op2[20]_i_4 
       (.I0(\EX_Op2[16]_i_2 [1]),
        .I1(\EX_Op2[21]_i_2 ),
        .I2(Q[11]),
        .I3(\cur_data_i_reg[26]_0 ),
        .I4(GPR_Op2[20]),
        .O(\cur_data_i_reg[11]_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \EX_Op2[21]_i_4 
       (.I0(\EX_Op2[16]_i_2 [0]),
        .I1(\EX_Op2[21]_i_2 ),
        .I2(Q[10]),
        .I3(\cur_data_i_reg[26]_0 ),
        .I4(GPR_Op2[21]),
        .O(\cur_data_i_reg[10]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \EX_Op2[22]_i_5 
       (.I0(Q[9]),
        .I1(\cur_data_i_reg[26]_0 ),
        .I2(GPR_Op2[22]),
        .O(\cur_data_i_reg[9]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \EX_Op2[23]_i_5 
       (.I0(Q[8]),
        .I1(\cur_data_i_reg[26]_0 ),
        .I2(GPR_Op2[23]),
        .O(\cur_data_i_reg[8]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \EX_Op2[24]_i_5 
       (.I0(Q[7]),
        .I1(GPR_Op2[24]),
        .I2(\cur_data_i_reg[26]_0 ),
        .O(\cur_data_i_reg[7]_1 ));
  LUT5 #(
    .INIT(32'h5555CFC0)) 
    \EX_Op2[25]_i_4 
       (.I0(\EX_Op2[25]_i_2 ),
        .I1(Q[6]),
        .I2(\cur_data_i_reg[26]_0 ),
        .I3(GPR_Op2[25]),
        .I4(\EX_Op2[21]_i_2 ),
        .O(\cur_data_i_reg[6]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \EX_Op2[26]_i_5 
       (.I0(Q[5]),
        .I1(\cur_data_i_reg[26]_0 ),
        .I2(GPR_Op2[26]),
        .O(\cur_data_i_reg[5]_2 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \EX_Op2[27]_i_5 
       (.I0(Q[4]),
        .I1(\cur_data_i_reg[26]_0 ),
        .I2(GPR_Op2[27]),
        .O(\cur_data_i_reg[4]_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \EX_Op2[28]_i_5 
       (.I0(Q[3]),
        .I1(\cur_data_i_reg[26]_0 ),
        .I2(GPR_Op2[28]),
        .O(\cur_data_i_reg[3]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \EX_Op2[29]_i_6 
       (.I0(Q[2]),
        .I1(\cur_data_i_reg[26]_0 ),
        .I2(GPR_Op2[29]),
        .O(\cur_data_i_reg[2]_0 ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[2]_i_6 
       (.I0(GPR_Op2[2]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [13]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \EX_Op2[30]_i_5 
       (.I0(Q[1]),
        .I1(\cur_data_i_reg[26]_0 ),
        .I2(GPR_Op2[30]),
        .O(\cur_data_i_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \EX_Op2[31]_i_5 
       (.I0(Q[0]),
        .I1(\cur_data_i_reg[26]_0 ),
        .I2(GPR_Op2[31]),
        .O(\cur_data_i_reg[0]_1 ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[3]_i_6 
       (.I0(GPR_Op2[3]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [12]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[3] ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[4]_i_6 
       (.I0(GPR_Op2[4]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [11]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[4] ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[5]_i_6 
       (.I0(GPR_Op2[5]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [10]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[5] ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[6]_i_6 
       (.I0(GPR_Op2[6]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [9]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[6] ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[7]_i_6 
       (.I0(GPR_Op2[7]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [8]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[7] ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[8]_i_6 
       (.I0(GPR_Op2[8]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [7]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[8] ));
  LUT5 #(
    .INIT(32'h0C3F5555)) 
    \EX_Op2[9]_i_6 
       (.I0(GPR_Op2[9]),
        .I1(of_read_imm_reg),
        .I2(\EX_Op2[0]_i_4 [6]),
        .I3(Q[15]),
        .I4(\cur_data_i_reg[26]_0 ),
        .O(\imm_reg_reg[9] ));
  LUT5 #(
    .INIT(32'h6FF6FFFF)) 
    \EX_Op3[0]_i_10 
       (.I0(Q[22]),
        .I1(ex_gpr_write_addr[1]),
        .I2(ex_gpr_write_addr[0]),
        .I3(Q[21]),
        .I4(\Op3_Conflict_Stall/OF_EX_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .O(\EX_Op3[0]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hFFF6FFFFFFFFFFF6)) 
    \EX_Op3[0]_i_12 
       (.I0(\EX_Op3[0]_i_12_0 [1]),
        .I1(Q[22]),
        .I2(\EX_Op3[0]_i_20_n_0 ),
        .I3(\EX_Op3[0]_i_6_1 ),
        .I4(\EX_Op3[0]_i_12_0 [3]),
        .I5(Q[24]),
        .O(\EX_Op3[0]_i_12_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \EX_Op3[0]_i_13 
       (.I0(\EX_Op3[0]_i_18_n_0 ),
        .I1(\EX_Op3[0]_i_17_n_0 ),
        .O(\EX_Op3[0]_i_13_n_0 ));
  LUT4 #(
    .INIT(16'h0008)) 
    \EX_Op3[0]_i_14 
       (.I0(ex_gpr_write),
        .I1(\EX_Op3[29]_i_3 ),
        .I2(\EX_Op3[0]_i_10_n_0 ),
        .I3(\EX_Op3[0]_i_9_n_0 ),
        .O(\Using_FPGA.Native_3 ));
  LUT6 #(
    .INIT(64'h0000000082000082)) 
    \EX_Op3[0]_i_15 
       (.I0(\Op3_Conflict_Stall/OF_M0_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(\EX_Op3[0]_i_15_0 [1]),
        .I2(Q[22]),
        .I3(\EX_Op3[0]_i_15_0 [0]),
        .I4(Q[21]),
        .I5(\EX_Op3[0]_i_7_4 ),
        .O(\EX_Op3[0]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h0000000082000082)) 
    \EX_Op3[0]_i_16 
       (.I0(\Op3_Conflict_Stall/OF_M1_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(\EX_Op3[0]_i_16_0 [1]),
        .I2(Q[22]),
        .I3(\EX_Op3[0]_i_16_0 [0]),
        .I4(Q[21]),
        .I5(\EX_Op3[0]_i_7_3 ),
        .O(\EX_Op3[0]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'h0000000082000082)) 
    \EX_Op3[0]_i_17 
       (.I0(\Op3_Conflict_Stall/OF_M2_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(\EX_Op3[0]_i_17_0 [1]),
        .I2(Q[22]),
        .I3(\EX_Op3[0]_i_17_0 [0]),
        .I4(Q[21]),
        .I5(\EX_Op3[0]_i_7_2 ),
        .O(\EX_Op3[0]_i_17_n_0 ));
  LUT6 #(
    .INIT(64'h0000000082000082)) 
    \EX_Op3[0]_i_18 
       (.I0(\Op3_Conflict_Stall/OF_M3_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(\EX_Op3[0]_i_18_0 [1]),
        .I2(Q[22]),
        .I3(\EX_Op3[0]_i_18_0 [0]),
        .I4(Q[21]),
        .I5(\EX_Op3[0]_i_7_1 ),
        .O(\EX_Op3[0]_i_18_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op3[0]_i_19 
       (.I0(ex_gpr_write_addr[2]),
        .I1(Q[23]),
        .I2(Q[25]),
        .I3(\Using_FPGA.Native_12 [1]),
        .I4(Q[24]),
        .I5(\Using_FPGA.Native_12 [0]),
        .O(\Op3_Conflict_Stall/OF_EX_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT2 #(
    .INIT(4'h2)) 
    \EX_Op3[0]_i_2 
       (.I0(of_op3_sel),
        .I1(\wb_gpr_write_addr_reg[3] ),
        .O(\EX_Op3[0]_i_6_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \EX_Op3[0]_i_20 
       (.I0(\EX_Op3[0]_i_12_0 [2]),
        .I1(Q[23]),
        .I2(Q[25]),
        .I3(\EX_Op3[0]_i_12_0 [4]),
        .I4(Q[21]),
        .I5(\EX_Op3[0]_i_12_0 [0]),
        .O(\EX_Op3[0]_i_20_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op3[0]_i_21 
       (.I0(\EX_Op3[0]_i_15_0 [2]),
        .I1(Q[23]),
        .I2(Q[25]),
        .I3(\EX_Op3[0]_i_15_0 [4]),
        .I4(Q[24]),
        .I5(\EX_Op3[0]_i_15_0 [3]),
        .O(\Op3_Conflict_Stall/OF_M0_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op3[0]_i_22 
       (.I0(\EX_Op3[0]_i_16_0 [2]),
        .I1(Q[23]),
        .I2(Q[25]),
        .I3(\EX_Op3[0]_i_16_0 [4]),
        .I4(Q[24]),
        .I5(\EX_Op3[0]_i_16_0 [3]),
        .O(\Op3_Conflict_Stall/OF_M1_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op3[0]_i_23 
       (.I0(\EX_Op3[0]_i_17_0 [2]),
        .I1(Q[23]),
        .I2(Q[25]),
        .I3(\EX_Op3[0]_i_17_0 [4]),
        .I4(Q[24]),
        .I5(\EX_Op3[0]_i_17_0 [3]),
        .O(\Op3_Conflict_Stall/OF_M2_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op3[0]_i_24 
       (.I0(\EX_Op3[0]_i_18_0 [2]),
        .I1(Q[23]),
        .I2(Q[24]),
        .I3(\EX_Op3[0]_i_18_0 [3]),
        .I4(Q[25]),
        .I5(\EX_Op3[0]_i_18_0 [4]),
        .O(\Op3_Conflict_Stall/OF_M3_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    \EX_Op3[0]_i_3 
       (.I0(of_op3_sel),
        .I1(\wb_gpr_write_addr_reg[3] ),
        .I2(\Using_FPGA.Native_2 ),
        .O(\EX_Op3[0]_i_7_0 ));
  LUT6 #(
    .INIT(64'h2220222000002220)) 
    \EX_Op3[0]_i_5 
       (.I0(\EX_Op3[0]_i_8_n_0 ),
        .I1(\EX_Op3[0]_i_9_n_0 ),
        .I2(\EX_Op3[0]_i_10_n_0 ),
        .I3(\EX_Op3[0]_i_4 ),
        .I4(\EX_Op3[0]_i_12_n_0 ),
        .I5(\EX_Op3[0]_i_13_n_0 ),
        .O(of_op3_sel));
  LUT6 #(
    .INIT(64'h5557555755575500)) 
    \EX_Op3[0]_i_6 
       (.I0(\EX_Op3[0]_i_8_n_0 ),
        .I1(\EX_Op3[0]_i_13_n_0 ),
        .I2(\EX_Op3[0]_i_12_n_0 ),
        .I3(\EX_Op3[0]_i_9_n_0 ),
        .I4(\EX_Op3[0]_i_10_n_0 ),
        .I5(\EX_Op3[0]_i_4 ),
        .O(\wb_gpr_write_addr_reg[3] ));
  LUT6 #(
    .INIT(64'hABAAABABABAAABAA)) 
    \EX_Op3[0]_i_7 
       (.I0(\Using_FPGA.Native_3 ),
        .I1(\EX_Op3[0]_i_9_n_0 ),
        .I2(\EX_Op3[0]_i_15_n_0 ),
        .I3(\EX_Op3[0]_i_16_n_0 ),
        .I4(\EX_Op3[0]_i_17_n_0 ),
        .I5(\EX_Op3[0]_i_18_n_0 ),
        .O(\Using_FPGA.Native_2 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'hCD)) 
    \EX_Op3[0]_i_8 
       (.I0(\EX_Op3[0]_i_16_n_0 ),
        .I1(\EX_Op3[0]_i_9_n_0 ),
        .I2(\EX_Op3[0]_i_15_n_0 ),
        .O(\EX_Op3[0]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h5455555555555555)) 
    \EX_Op3[0]_i_9 
       (.I0(\EX_Op3[0]_i_7_5 ),
        .I1(EX_Bit_Insert_i_2_n_0),
        .I2(Q[27]),
        .I3(Q[29]),
        .I4(Q[26]),
        .I5(Q[15]),
        .O(\EX_Op3[0]_i_9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT5 #(
    .INIT(32'h000000F2)) 
    \EX_Op3[29]_i_4 
       (.I0(\EX_Op3[0]_i_18_n_0 ),
        .I1(\EX_Op3[0]_i_17_n_0 ),
        .I2(\EX_Op3[0]_i_16_n_0 ),
        .I3(\EX_Op3[0]_i_15_n_0 ),
        .I4(\EX_Op3[0]_i_9_n_0 ),
        .O(\m3_gpr_write_addr_reg[3] ));
  LUT6 #(
    .INIT(64'h88B888B8BBBB8888)) 
    \EX_Op3[30]_i_2 
       (.I0(\EX_Op3_reg[30] ),
        .I1(\wb_gpr_write_addr_reg[3] ),
        .I2(\EX_Op3_reg[30]_0 ),
        .I3(\EX_Op3_reg[30]_1 ),
        .I4(GPR_Op3[1]),
        .I5(\Using_FPGA.Native_2 ),
        .O(EX_CLZ_Instr_reg));
  LUT6 #(
    .INIT(64'hB8BBB8BBB8BBB888)) 
    \EX_Op3[31]_i_1 
       (.I0(\EX_Op3_reg[31] ),
        .I1(\EX_Op3[0]_i_6_0 ),
        .I2(wb_fwd),
        .I3(\EX_Op3[0]_i_7_0 ),
        .I4(\EX_Op3[31]_i_3_n_0 ),
        .I5(\EX_Op3[31]_i_4_n_0 ),
        .O(m2_m1_sel_res_reg));
  LUT6 #(
    .INIT(64'h00000000EEEE22E2)) 
    \EX_Op3[31]_i_3 
       (.I0(GPR_Op3[0]),
        .I1(\Using_FPGA.Native_2 ),
        .I2(\EX_Op3_reg[31]_2 ),
        .I3(\EX_Op3_reg[31]_3 ),
        .I4(\EX_Op3_reg[31]_4 ),
        .I5(\wb_gpr_write_addr_reg[3] ),
        .O(\EX_Op3[31]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \EX_Op3[31]_i_4 
       (.I0(\wb_gpr_write_addr_reg[3] ),
        .I1(\EX_Op3_reg[31]_0 ),
        .I2(\Using_FPGA.Native_2 ),
        .I3(\EX_Op3_reg[31]_1 ),
        .O(\EX_Op3[31]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    EX_Pattern_Cmp_Sel_i_1
       (.I0(Q[30]),
        .I1(Q[31]),
        .I2(Q[10]),
        .I3(Q[29]),
        .I4(Q[28]),
        .O(EX_Pattern_Cmp_Sel7_out));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT4 #(
    .INIT(16'hF7FF)) 
    \EX_Sext_Op[0]_i_1 
       (.I0(Q[5]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(\cur_data_i_reg[26]_2 ),
        .O(\cur_data_i_reg[5]_0 [1]));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT5 #(
    .INIT(32'hAAAA8AAA)) 
    \EX_Sext_Op[1]_i_1 
       (.I0(\cur_data_i_reg[26]_2 ),
        .I1(Q[7]),
        .I2(Q[6]),
        .I3(Q[5]),
        .I4(Q[0]),
        .O(\cur_data_i_reg[5]_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    EX_Unsigned_Op_i_1
       (.I0(Q[1]),
        .I1(Q[31]),
        .I2(Q[30]),
        .I3(Q[29]),
        .O(EX_Unsigned_Op11_out));
  LUT3 #(
    .INIT(8'h02)) 
    EX_Use_Carry_i_1
       (.I0(Q[27]),
        .I1(Q[30]),
        .I2(Q[31]),
        .O(EX_Use_Carry10_out));
  microblaze_microblaze_0_0_MB_FDR_264 \Generating_Control_Logic.Using_FPGA.Gen_Mux_Select_LUT6[1].Gen_Sel_DFF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (addr[1]),
        .sel_input_iii_3(sel_input_iii_3),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_LUT6 \Generating_Control_Logic.Using_FPGA.Gen_Mux_Select_LUT6[1].Mux_Select_LUT6 
       (.Clear_Buffer(Clear_Buffer),
        .Prefetch_Almost_Full(Prefetch_Almost_Full),
        .\Using_FPGA.Native_0 (addr[1]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_6 ),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .sel_input_iii_3(sel_input_iii_3));
  microblaze_microblaze_0_0_MB_FDR_265 \Generating_Control_Logic.Using_FPGA.Gen_Mux_Select_LUT6[2].Gen_Sel_DFF 
       (.Clk(Clk),
        .Prefetch_Almost_Full(Prefetch_Almost_Full),
        .Prefetch_Early_Full(Prefetch_Early_Full),
        .\Using_FPGA.Native_0 (addr[0]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_2 (addr[1]),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_11 ),
        .if0_pause(if0_pause),
        .sel_input_iii_2(sel_input_iii_2),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_LUT6_266 \Generating_Control_Logic.Using_FPGA.Gen_Mux_Select_LUT6[2].Mux_Select_LUT6 
       (.Clear_Buffer(Clear_Buffer),
        .Prefetch_Almost_Full(Prefetch_Almost_Full),
        .Prefetch_Early_Full(Prefetch_Early_Full),
        .\Using_FPGA.Native_0 (addr[1]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_6 ),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .sel_input_iii_2(sel_input_iii_2));
  microblaze_microblaze_0_0_MB_FDR_267 \Generating_Control_Logic.Using_FPGA.Gen_Mux_Select_LUT6[3].Gen_Sel_DFF 
       (.Clk(Clk),
        .Prefetch_Early_Full(Prefetch_Early_Full),
        .sel_input_iii_1(sel_input_iii_1),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_LUT6_268 \Generating_Control_Logic.Using_FPGA.Gen_Mux_Select_LUT6[3].Mux_Select_LUT6 
       (.Clear_Buffer(Clear_Buffer),
        .Prefetch_Almost_Full(Prefetch_Almost_Full),
        .Prefetch_Early_Full(Prefetch_Early_Full),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_6 ),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .sel_input_iii_1(sel_input_iii_1));
  microblaze_microblaze_0_0_MB_FDR_269 \Generating_Control_Logic.Using_FPGA.Gen_Mux_Select_LUT6[4].Gen_Sel_DFF 
       (.Clk(Clk),
        .D({new_data_cmb,\Data_Mux[14].new_data_cmb_reg ,\Data_Mux[13].new_data_cmb_reg ,\Data_Mux[12].new_data_cmb_reg ,\Data_Mux[11].new_data_cmb_reg ,\Data_Mux[10].new_data_cmb_reg ,\Data_Mux[9].new_data_cmb_reg ,\Data_Mux[8].new_data_cmb_reg ,\Data_Mux[7].new_data_cmb_reg ,\Data_Mux[6].new_data_cmb_reg ,\Data_Mux[5].new_data_cmb_reg ,\Data_Mux[4].new_data_cmb_reg ,\Data_Mux[3].new_data_cmb_reg ,\Data_Mux[2].new_data_cmb_reg ,\Data_Mux[1].new_data_cmb_reg ,\Data_Mux[0].new_data_cmb_reg }),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[0] (\cur_data_i_reg[0]_2 ),
        .\cur_data_i_reg[31] (\Using_FPGA.Native_6 ),
        .if4_data(if4_data),
        .out({p_1_in98_in,p_1_in92_in,p_1_in86_in,p_1_in80_in,p_1_in74_in,p_1_in68_in,p_1_in62_in,p_1_in56_in,p_1_in50_in,p_1_in44_in,p_1_in38_in,p_1_in32_in,p_1_in26_in,p_1_in20_in,p_1_in14_in,p_1_in8_in,p_1_in2_in,p_1_in182_in,p_1_in176_in,p_1_in170_in,p_1_in164_in,p_1_in158_in,p_1_in152_in,p_1_in146_in,p_1_in140_in,p_1_in134_in,p_1_in128_in,p_1_in122_in,p_1_in116_in,p_1_in110_in,p_1_in105_in,\data_buffer_reg[3][0]_srl4_n_0 }),
        .sel_input_i(sel_input_i),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_LUT6_270 \Generating_Control_Logic.Using_FPGA.Gen_Mux_Select_LUT6[4].Mux_Select_LUT6 
       (.Clear_Buffer(Clear_Buffer),
        .Prefetch_Early_Full(Prefetch_Early_Full),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_6 ),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .sel_input_iii_0(sel_input_iii_0));
  microblaze_microblaze_0_0_MB_LUT6__parameterized2 \Generating_Control_Logic.Using_FPGA.Gen_Mux_Select_LUT6[4].Using_ExtraMUX.Mux_Select_Delayslot_LUT6 
       (.Clear_Buffer(Clear_Buffer),
        .Prefetch_Early_Full(Prefetch_Early_Full),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_6 ),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .sel_input_delayslot(sel_input_delayslot));
  microblaze_microblaze_0_0_MB_MUXF7 \Generating_Control_Logic.Using_FPGA.Gen_Mux_Select_LUT6[4].Using_ExtraMUX.Sel_Mux_MUXF7 
       (.Use_Next_Data(Use_Next_Data),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_7 ),
        .ex_branch_with_delayslot(ex_branch_with_delayslot),
        .sel_input_delayslot(sel_input_delayslot),
        .sel_input_i(sel_input_i),
        .sel_input_iii_0(sel_input_iii_0));
  microblaze_microblaze_0_0_MB_FDS \Generating_Control_Logic.Using_FPGA.Last_Sel_DFF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .sel_input_depth(sel_input_depth),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_MB_LUT6__parameterized4 \Generating_Control_Logic.Using_FPGA.Mux_Select_Empty_LUT6 
       (.Clear_Buffer(Clear_Buffer),
        .Use_Next_Data(Use_Next_Data),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_6 ),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .sel_input_depth(sel_input_depth));
  microblaze_microblaze_0_0_MB_LUT6__parameterized6 \Generating_Control_Logic.Using_FPGA.Mux_Select_OF_Valid_LUT6 
       (.Clear_Buffer(Clear_Buffer),
        .Use_Next_Data(Use_Next_Data),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_6 ),
        .cur_valid_cmb(cur_valid_cmb),
        .if4_push_instr_fetch(if4_push_instr_fetch));
  microblaze_microblaze_0_0_MB_FDR_271 \Generating_Control_Logic.Using_FPGA.OF_Valid_DFF 
       (.Clk(Clk),
        .Dbg_Clean_Stop_reg(ex_atomic_instruction_pair_i_2_n_0),
        .Q({Q[29],Q[27:26]}),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_1 ),
        .cur_valid_cmb(cur_valid_cmb),
        .ex_atomic_instruction_pair0(ex_atomic_instruction_pair0),
        .ex_jump(ex_jump),
        .ex_jump_nodelay(ex_jump_nodelay),
        .ex_jump_nodelay_reg(ex_jump_nodelay_reg),
        .\imm_reg_reg[15] (ex_MSR_clear_decode_i_2_n_0),
        .of_raw_valid(of_raw_valid),
        .sync_reset(sync_reset));
  LUT5 #(
    .INIT(32'h00000008)) 
    \Performance_Debug_Control.ex_brki_hit_i_1 
       (.I0(\Performance_Debug_Control.ex_brki_hit_reg ),
        .I1(Q[29]),
        .I2(of_gpr_write_dbg_inferred_i_3_n_0),
        .I3(\Performance_Debug_Control.ex_brki_hit_i_2_n_0 ),
        .I4(\Performance_Debug_Control.ex_brki_hit_reg_0 ),
        .O(\Serial_Dbg_Intf.control_reg_reg[8] ));
  LUT5 #(
    .INIT(32'hFFFFEEEA)) 
    \Performance_Debug_Control.ex_brki_hit_i_2 
       (.I0(\Performance_Debug_Control.ex_brki_hit_i_3_n_0 ),
        .I1(ex_jump_nodelay),
        .I2(ex_jump_hold),
        .I3(ex_jump),
        .I4(\Performance_Debug_Control.ex_brki_hit_i_4_n_0 ),
        .O(\Performance_Debug_Control.ex_brki_hit_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF7)) 
    \Performance_Debug_Control.ex_brki_hit_i_3 
       (.I0(Q[19]),
        .I1(Q[18]),
        .I2(Q[20]),
        .I3(Q[10]),
        .I4(Q[11]),
        .I5(Q[1]),
        .O(\Performance_Debug_Control.ex_brki_hit_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \Performance_Debug_Control.ex_brki_hit_i_4 
       (.I0(\Performance_Debug_Control.ex_brki_hit_i_5_n_0 ),
        .I1(\Performance_Debug_Control.ex_brki_hit_i_6_n_0 ),
        .I2(Q[5]),
        .I3(Q[0]),
        .I4(Q[13]),
        .I5(Q[6]),
        .O(\Performance_Debug_Control.ex_brki_hit_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFDFFFFFFFF)) 
    \Performance_Debug_Control.ex_brki_hit_i_5 
       (.I0(Q[4]),
        .I1(Q[14]),
        .I2(Q[7]),
        .I3(Q[8]),
        .I4(Q[9]),
        .I5(Q[3]),
        .O(\Performance_Debug_Control.ex_brki_hit_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Performance_Debug_Control.ex_brki_hit_i_6 
       (.I0(Q[2]),
        .I1(\Using_FPGA.Native_7 ),
        .I2(Q[12]),
        .I3(Q[15]),
        .O(\Performance_Debug_Control.ex_brki_hit_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEEEEE)) 
    \Performance_Debug_Control.ex_dbg_pc_hit_i_i_6 
       (.I0(\cur_data_i_reg[26]_1 ),
        .I1(\Performance_Debug_Control.ex_brki_hit_i_4_n_0 ),
        .I2(ex_jump),
        .I3(ex_jump_hold),
        .I4(ex_jump_nodelay),
        .I5(\Performance_Debug_Control.ex_brki_hit_i_3_n_0 ),
        .O(\Using_FPGA.Native_4 ));
  LUT3 #(
    .INIT(8'h7F)) 
    \Using_FPGA.Native_i_1__100 
       (.I0(Q[31]),
        .I1(Q[30]),
        .I2(Q[28]),
        .O(\cur_data_i_reg[31]_5 ));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    \Using_FPGA.Native_i_1__219 
       (.I0(Q[26]),
        .I1(Q[27]),
        .I2(Q[28]),
        .I3(Q[30]),
        .I4(Q[31]),
        .I5(Q[29]),
        .O(\cur_data_i_reg[26]_3 ));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    \Using_FPGA.Native_i_1__220 
       (.I0(Q[26]),
        .I1(Q[27]),
        .I2(Q[28]),
        .I3(Q[30]),
        .I4(Q[31]),
        .I5(Q[29]),
        .O(\cur_data_i_reg[26]_4 ));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    \Using_FPGA.Native_i_1__221 
       (.I0(Q[26]),
        .I1(Q[27]),
        .I2(Q[28]),
        .I3(Q[30]),
        .I4(Q[31]),
        .I5(Q[29]),
        .O(\cur_data_i_reg[26]_5 ));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    \Using_FPGA.Native_i_1__222 
       (.I0(Q[26]),
        .I1(Q[27]),
        .I2(Q[28]),
        .I3(Q[30]),
        .I4(Q[31]),
        .I5(Q[29]),
        .O(\cur_data_i_reg[26]_6 ));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    \Using_FPGA.Native_i_1__223 
       (.I0(Q[26]),
        .I1(Q[27]),
        .I2(Q[28]),
        .I3(Q[30]),
        .I4(Q[31]),
        .I5(Q[29]),
        .O(\cur_data_i_reg[26]_7 ));
  LUT6 #(
    .INIT(64'h0000000000080000)) 
    \Using_FPGA.Native_i_1__23 
       (.I0(Q[26]),
        .I1(Q[29]),
        .I2(Q[27]),
        .I3(Q[28]),
        .I4(Q[30]),
        .I5(Q[31]),
        .O(OF_Use_Op_B));
  LUT6 #(
    .INIT(64'h00FF00DF00FF00FF)) 
    \Using_FPGA.Native_i_1__5 
       (.I0(Q[28]),
        .I1(Q[30]),
        .I2(Q[31]),
        .I3(Q[29]),
        .I4(Q[27]),
        .I5(Q[26]),
        .O(\cur_data_i_reg[28]_2 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__52 
       (.I0(Q[22]),
        .I1(ex_gpr_write_addr[1]),
        .I2(ex_gpr_write_addr[0]),
        .I3(Q[21]),
        .O(S_10));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__53 
       (.I0(Q[21]),
        .I1(\EX_Op3[0]_i_15_0 [0]),
        .I2(Q[22]),
        .I3(\EX_Op3[0]_i_15_0 [1]),
        .O(S_11));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__54 
       (.I0(Q[21]),
        .I1(\EX_Op3[0]_i_16_0 [0]),
        .I2(Q[22]),
        .I3(\EX_Op3[0]_i_16_0 [1]),
        .O(S_12));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__55 
       (.I0(Q[21]),
        .I1(\EX_Op3[0]_i_17_0 [0]),
        .I2(Q[22]),
        .I3(\EX_Op3[0]_i_17_0 [1]),
        .O(S_13));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__56 
       (.I0(Q[21]),
        .I1(\EX_Op3[0]_i_18_0 [0]),
        .I2(Q[22]),
        .I3(\EX_Op3[0]_i_18_0 [1]),
        .O(S_14));
  LUT3 #(
    .INIT(8'h7F)) 
    \Using_FPGA.Native_i_1__6 
       (.I0(Q[31]),
        .I1(Q[30]),
        .I2(Q[28]),
        .O(S));
  LUT6 #(
    .INIT(64'h5555555555555557)) 
    \Using_FPGA.Native_i_1__8 
       (.I0(of_is_div_instr),
        .I1(\Using_FPGA.Native_8 ),
        .I2(m2_is_div_instr),
        .I3(m1_is_div_instr_i),
        .I4(m0_is_div_instr_i),
        .I5(\Using_FPGA.Native_9 ),
        .O(m3_is_div_instr_i_reg));
  LUT6 #(
    .INIT(64'h00FF00DF00FF00FF)) 
    \Using_FPGA.Native_i_1__84 
       (.I0(Q[28]),
        .I1(Q[30]),
        .I2(Q[31]),
        .I3(Q[29]),
        .I4(Q[27]),
        .I5(Q[26]),
        .O(\cur_data_i_reg[28]_3 ));
  LUT6 #(
    .INIT(64'h00FF00DF00FF00FF)) 
    \Using_FPGA.Native_i_1__85 
       (.I0(Q[28]),
        .I1(Q[30]),
        .I2(Q[31]),
        .I3(Q[29]),
        .I4(Q[27]),
        .I5(Q[26]),
        .O(\cur_data_i_reg[28]_4 ));
  LUT6 #(
    .INIT(64'h00FF00DF00FF00FF)) 
    \Using_FPGA.Native_i_1__86 
       (.I0(Q[28]),
        .I1(Q[30]),
        .I2(Q[31]),
        .I3(Q[29]),
        .I4(Q[27]),
        .I5(Q[26]),
        .O(\cur_data_i_reg[28]_5 ));
  LUT6 #(
    .INIT(64'h00FF00DF00FF00FF)) 
    \Using_FPGA.Native_i_1__87 
       (.I0(Q[28]),
        .I1(Q[30]),
        .I2(Q[31]),
        .I3(Q[29]),
        .I4(Q[27]),
        .I5(Q[26]),
        .O(\cur_data_i_reg[28]_6 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__88 
       (.I0(ex_gpr_write_addr[2]),
        .I1(Q[23]),
        .I2(Q[25]),
        .I3(\Using_FPGA.Native_12 [1]),
        .I4(Q[24]),
        .I5(\Using_FPGA.Native_12 [0]),
        .O(\ex_gpr_write_addr_reg[2] ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__89 
       (.I0(\EX_Op3[0]_i_15_0 [2]),
        .I1(Q[23]),
        .I2(Q[25]),
        .I3(\EX_Op3[0]_i_15_0 [4]),
        .I4(Q[24]),
        .I5(\EX_Op3[0]_i_15_0 [3]),
        .O(\m0_gpr_write_addr_reg[2] ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__90 
       (.I0(\EX_Op3[0]_i_16_0 [2]),
        .I1(Q[23]),
        .I2(Q[25]),
        .I3(\EX_Op3[0]_i_16_0 [4]),
        .I4(Q[24]),
        .I5(\EX_Op3[0]_i_16_0 [3]),
        .O(\m1_gpr_write_addr_reg[2] ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__91 
       (.I0(\EX_Op3[0]_i_17_0 [2]),
        .I1(Q[23]),
        .I2(Q[25]),
        .I3(\EX_Op3[0]_i_17_0 [4]),
        .I4(Q[24]),
        .I5(\EX_Op3[0]_i_17_0 [3]),
        .O(\m2_gpr_write_addr_reg[2] ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__92 
       (.I0(\EX_Op3[0]_i_18_0 [2]),
        .I1(Q[23]),
        .I2(Q[24]),
        .I3(\EX_Op3[0]_i_18_0 [3]),
        .I4(Q[25]),
        .I5(\EX_Op3[0]_i_18_0 [4]),
        .O(\m3_gpr_write_addr_reg[2] ));
  LUT6 #(
    .INIT(64'h0000000000080000)) 
    \Using_FPGA.Native_i_1__93 
       (.I0(Q[26]),
        .I1(Q[29]),
        .I2(Q[27]),
        .I3(Q[28]),
        .I4(Q[30]),
        .I5(Q[31]),
        .O(\cur_data_i_reg[26]_8 ));
  LUT3 #(
    .INIT(8'h7F)) 
    \Using_FPGA.Native_i_1__94 
       (.I0(Q[31]),
        .I1(Q[30]),
        .I2(Q[28]),
        .O(\cur_data_i_reg[31]_2 ));
  LUT6 #(
    .INIT(64'h0000000000080000)) 
    \Using_FPGA.Native_i_1__95 
       (.I0(Q[26]),
        .I1(Q[29]),
        .I2(Q[27]),
        .I3(Q[28]),
        .I4(Q[30]),
        .I5(Q[31]),
        .O(\cur_data_i_reg[26]_9 ));
  LUT3 #(
    .INIT(8'h7F)) 
    \Using_FPGA.Native_i_1__96 
       (.I0(Q[31]),
        .I1(Q[30]),
        .I2(Q[28]),
        .O(\cur_data_i_reg[31]_3 ));
  LUT6 #(
    .INIT(64'h0000000000080000)) 
    \Using_FPGA.Native_i_1__97 
       (.I0(Q[26]),
        .I1(Q[29]),
        .I2(Q[27]),
        .I3(Q[28]),
        .I4(Q[30]),
        .I5(Q[31]),
        .O(\cur_data_i_reg[26]_10 ));
  LUT3 #(
    .INIT(8'h7F)) 
    \Using_FPGA.Native_i_1__98 
       (.I0(Q[31]),
        .I1(Q[30]),
        .I2(Q[28]),
        .O(\cur_data_i_reg[31]_4 ));
  LUT6 #(
    .INIT(64'h0000000000080000)) 
    \Using_FPGA.Native_i_1__99 
       (.I0(Q[26]),
        .I1(Q[29]),
        .I2(Q[27]),
        .I3(Q[28]),
        .I4(Q[30]),
        .I5(Q[31]),
        .O(\cur_data_i_reg[26]_11 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT5 #(
    .INIT(32'h00000200)) 
    \Using_FPGA.Native_i_2__0 
       (.I0(Q[27]),
        .I1(Q[26]),
        .I2(Q[28]),
        .I3(Q[30]),
        .I4(Q[31]),
        .O(of_is_div_instr));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFB)) 
    \Using_Mul_Instr.ex_not_mul_op_i_i_1 
       (.I0(Q[31]),
        .I1(Q[30]),
        .I2(Q[28]),
        .I3(Q[27]),
        .I4(Q[26]),
        .O(\cur_data_i_reg[31]_1 ));
  FDRE \cur_data_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[0].new_data_cmb_reg ),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[10].new_data_cmb_reg ),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[11].new_data_cmb_reg ),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[12].new_data_cmb_reg ),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[13].new_data_cmb_reg ),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[14].new_data_cmb_reg ),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[15]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[16]),
        .Q(Q[16]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[17]),
        .Q(Q[17]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[18]),
        .Q(Q[18]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[19]),
        .Q(Q[19]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[1].new_data_cmb_reg ),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[20]),
        .Q(Q[20]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[21]),
        .Q(Q[21]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[22]),
        .Q(Q[22]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[23]),
        .Q(Q[23]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[24]),
        .Q(Q[24]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[25]),
        .Q(Q[25]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[26]),
        .Q(Q[26]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[27]),
        .Q(Q[27]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[28]),
        .Q(Q[28]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[29]),
        .Q(Q[29]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[2].new_data_cmb_reg ),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[30]),
        .Q(Q[30]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[31]),
        .Q(Q[31]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[3].new_data_cmb_reg ),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[4].new_data_cmb_reg ),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[5].new_data_cmb_reg ),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[6].new_data_cmb_reg ),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[7].new_data_cmb_reg ),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[8].new_data_cmb_reg ),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[9].new_data_cmb_reg ),
        .Q(Q[9]),
        .R(sync_reset));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][0]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][0]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[31]),
        .Q(\data_buffer_reg[3][0]_srl4_n_0 ));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][10]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][10]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[21]),
        .Q(p_1_in158_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][11]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][11]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[20]),
        .Q(p_1_in164_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][12]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][12]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[19]),
        .Q(p_1_in170_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][13]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][13]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[18]),
        .Q(p_1_in176_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][14]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][14]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[17]),
        .Q(p_1_in182_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][15]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][15]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[16]),
        .Q(p_1_in2_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][16]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][16]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[15]),
        .Q(p_1_in8_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][17]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][17]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[14]),
        .Q(p_1_in14_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][18]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][18]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[13]),
        .Q(p_1_in20_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][19]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][19]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[12]),
        .Q(p_1_in26_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][1]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][1]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[30]),
        .Q(p_1_in105_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][20]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][20]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[11]),
        .Q(p_1_in32_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][21]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][21]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[10]),
        .Q(p_1_in38_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][22]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][22]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[9]),
        .Q(p_1_in44_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][23]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][23]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[8]),
        .Q(p_1_in50_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][24]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][24]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[7]),
        .Q(p_1_in56_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][25]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][25]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[6]),
        .Q(p_1_in62_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][26]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][26]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[5]),
        .Q(p_1_in68_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][27]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][27]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[4]),
        .Q(p_1_in74_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][28]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][28]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[3]),
        .Q(p_1_in80_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][29]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][29]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[2]),
        .Q(p_1_in86_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][2]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][2]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[29]),
        .Q(p_1_in110_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][30]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][30]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[1]),
        .Q(p_1_in92_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][31]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][31]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[0]),
        .Q(p_1_in98_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][3]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][3]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[28]),
        .Q(p_1_in116_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][4]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][4]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[27]),
        .Q(p_1_in122_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][5]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][5]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[26]),
        .Q(p_1_in128_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][6]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][6]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[25]),
        .Q(p_1_in134_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][7]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][7]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[24]),
        .Q(p_1_in140_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][8]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][8]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[23]),
        .Q(p_1_in146_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/INSTR_BUFFER_I1/data_buffer_reg[3][9]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][9]_srl4 
       (.A0(addr[0]),
        .A1(addr[1]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(if4_data[22]),
        .Q(p_1_in152_in));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    ex_Is_BS_Instr_i_i_1
       (.I0(Q[27]),
        .I1(Q[26]),
        .I2(Q[28]),
        .I3(Q[30]),
        .I4(Q[31]),
        .O(\cur_data_i_reg[27]_0 ));
  LUT6 #(
    .INIT(64'h0000000000020000)) 
    ex_MSR_clear_decode_i_1
       (.I0(Q[16]),
        .I1(ex_MSR_clear_decode_i_2_n_0),
        .I2(Q[29]),
        .I3(Q[27]),
        .I4(Q[26]),
        .I5(Q[15]),
        .O(ex_MSR_clear_decode));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'hDF)) 
    ex_MSR_clear_decode_i_2
       (.I0(Q[28]),
        .I1(Q[30]),
        .I2(Q[31]),
        .O(ex_MSR_clear_decode_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    ex_MSR_set_decode_i_1
       (.I0(Q[16]),
        .I1(ex_MSR_clear_decode_i_2_n_0),
        .I2(Q[29]),
        .I3(Q[27]),
        .I4(Q[26]),
        .I5(Q[15]),
        .O(ex_MSR_set_decode));
  LUT6 #(
    .INIT(64'h0000ACF00000AC00)) 
    ex_atomic_instruction_pair_i_2
       (.I0(Q[25]),
        .I1(Q[20]),
        .I2(Q[26]),
        .I3(Q[27]),
        .I4(ex_MSR_clear_decode_i_2_n_0),
        .I5(Q[29]),
        .O(ex_atomic_instruction_pair_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT2 #(
    .INIT(4'h2)) 
    ex_branch_with_delayslot_i_1
       (.I0(ex_atomic_instruction_pair_i_2_n_0),
        .I1(ex_databus_access_i_reg),
        .O(ex_branch_with_delayslot0));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT2 #(
    .INIT(4'h1)) 
    ex_byte_access_i_i_1
       (.I0(Q[26]),
        .I1(Q[27]),
        .O(of_byte_access));
  LUT6 #(
    .INIT(64'hAAFFAAAAAABFAAAA)) 
    ex_complete_in_later_stage_i_1
       (.I0(ex_complete_in_later_stage_i_2_n_0),
        .I1(Q[27]),
        .I2(Q[26]),
        .I3(Q[28]),
        .I4(Q[30]),
        .I5(Q[31]),
        .O(of_ex_complete_in_later_stage));
  LUT6 #(
    .INIT(64'h1010101010101000)) 
    ex_complete_in_later_stage_i_2
       (.I0(ex_move_to_MSR_instr_i_2_n_0),
        .I1(Q[14]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .I5(Q[2]),
        .O(ex_complete_in_later_stage_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT5 #(
    .INIT(32'h00007000)) 
    ex_databus_access_i_i_1
       (.I0(ex_jump),
        .I1(ex_jump_nodelay),
        .I2(Q[31]),
        .I3(Q[30]),
        .I4(ex_databus_access_i_reg),
        .O(p_104_in));
  LUT6 #(
    .INIT(64'h0000004000000000)) 
    ex_databus_exclusive_i_i_1
       (.I0(ex_databus_access_i_reg),
        .I1(ex_databus_exclusive_i_i_2_n_0),
        .I2(Q[10]),
        .I3(Q[29]),
        .I4(Q[26]),
        .I5(Q[27]),
        .O(ex_databus_exclusive_i0));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT4 #(
    .INIT(16'h0888)) 
    ex_databus_exclusive_i_i_2
       (.I0(Q[30]),
        .I1(Q[31]),
        .I2(ex_jump_nodelay),
        .I3(ex_jump),
        .O(ex_databus_exclusive_i_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT5 #(
    .INIT(32'h00080808)) 
    ex_databus_read_i_i_1
       (.I0(Q[31]),
        .I1(Q[30]),
        .I2(Q[28]),
        .I3(ex_jump_nodelay),
        .I4(ex_jump),
        .O(ex_databus_read_i0));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT5 #(
    .INIT(32'h70000000)) 
    ex_databus_write_i_i_1
       (.I0(ex_jump),
        .I1(ex_jump_nodelay),
        .I2(Q[31]),
        .I3(Q[30]),
        .I4(Q[28]),
        .O(ex_jump_nodelay_reg_1));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT2 #(
    .INIT(4'h2)) 
    ex_doublet_access_i_i_1
       (.I0(Q[26]),
        .I1(Q[27]),
        .O(of_doublet_access));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT3 #(
    .INIT(8'h15)) 
    ex_jump_nodelay_i_1
       (.I0(ex_atomic_instruction_pair_i_2_n_0),
        .I1(ex_jump_nodelay),
        .I2(ex_jump),
        .O(ex_jump_nodelay0));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT3 #(
    .INIT(8'h01)) 
    ex_load_alu_carry_i_1
       (.I0(Q[30]),
        .I1(Q[31]),
        .I2(Q[28]),
        .O(ex_load_alu_carry2_out));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT3 #(
    .INIT(8'h2A)) 
    ex_load_shift_carry_i_1
       (.I0(\cur_data_i_reg[26]_2 ),
        .I1(Q[6]),
        .I2(Q[5]),
        .O(ex_load_shift_carry0));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT5 #(
    .INIT(32'hAFAAABAA)) 
    ex_m0_complete_in_later_stage_i_1
       (.I0(ex_complete_in_later_stage_i_2_n_0),
        .I1(Q[26]),
        .I2(Q[28]),
        .I3(Q[30]),
        .I4(Q[31]),
        .O(of_m0_complete_in_later_stage));
  LUT6 #(
    .INIT(64'hAAFFAAAAAAAEAAAA)) 
    ex_m1_complete_in_later_stage_i_1
       (.I0(ex_complete_in_later_stage_i_2_n_0),
        .I1(Q[27]),
        .I2(Q[26]),
        .I3(Q[28]),
        .I4(Q[30]),
        .I5(Q[31]),
        .O(of_m1_complete_in_later_stage));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT3 #(
    .INIT(8'h40)) 
    ex_m3_complete_in_later_stage_i_1
       (.I0(Q[28]),
        .I1(Q[30]),
        .I2(Q[31]),
        .O(\cur_data_i_reg[28]_0 ));
  LUT6 #(
    .INIT(64'hFFBFFFFFFFFFFFFF)) 
    ex_mbar_decode_i_2
       (.I0(Q[26]),
        .I1(Q[27]),
        .I2(Q[28]),
        .I3(Q[30]),
        .I4(Q[31]),
        .I5(Q[29]),
        .O(\cur_data_i_reg[26]_1 ));
  LUT2 #(
    .INIT(4'hE)) 
    ex_mbar_is_sleep_i_1
       (.I0(Q[25]),
        .I1(Q[24]),
        .O(ex_mbar_is_sleep0));
  LUT6 #(
    .INIT(64'h0000000000020000)) 
    ex_move_to_MSR_instr_i_1
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(Q[14]),
        .I5(ex_move_to_MSR_instr_i_2_n_0),
        .O(ex_move_to_MSR_instr35_out));
  LUT6 #(
    .INIT(64'hFFFFFFDFFFFFFFFF)) 
    ex_move_to_MSR_instr_i_2
       (.I0(Q[28]),
        .I1(Q[30]),
        .I2(Q[31]),
        .I3(Q[29]),
        .I4(Q[27]),
        .I5(Q[26]),
        .O(ex_move_to_MSR_instr_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT4 #(
    .INIT(16'hFFEB)) 
    ex_op1_cmp_eq_i_1
       (.I0(Q[22]),
        .I1(Q[21]),
        .I2(Q[23]),
        .I3(ex_op1_cmp_eq_i_2_n_0),
        .O(ex_op1_cmp_eq));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT5 #(
    .INIT(32'hDFFFFFFF)) 
    ex_op1_cmp_eq_i_2
       (.I0(Q[31]),
        .I1(Q[30]),
        .I2(Q[28]),
        .I3(Q[26]),
        .I4(Q[27]),
        .O(ex_op1_cmp_eq_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT4 #(
    .INIT(16'h0014)) 
    ex_op1_cmp_eq_n_i_1
       (.I0(ex_op1_cmp_eq_i_2_n_0),
        .I1(Q[23]),
        .I2(Q[21]),
        .I3(Q[22]),
        .O(ex_op1_cmp_eq_n7_out));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT4 #(
    .INIT(16'h0DFF)) 
    ex_sel_alu_i_1
       (.I0(Q[10]),
        .I1(Q[29]),
        .I2(Q[28]),
        .I3(Q[31]),
        .O(\cur_data_i_reg[10]_0 ));
  LUT4 #(
    .INIT(16'h0040)) 
    ex_set_bip_i_1
       (.I0(of_gpr_write_dbg_inferred_i_3_n_0),
        .I1(Q[19]),
        .I2(Q[18]),
        .I3(Q[20]),
        .O(ex_set_bip));
  LUT3 #(
    .INIT(8'h08)) 
    ex_start_div_raw_i_1
       (.I0(of_is_div_instr),
        .I1(\Using_FPGA.Native_6 ),
        .I2(sync_reset),
        .O(\Use_Async_Reset.sync_reset_reg ));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT3 #(
    .INIT(8'h01)) 
    force1_i_1
       (.I0(Q[22]),
        .I1(Q[23]),
        .I2(ex_op1_cmp_eq_i_2_n_0),
        .O(force12_out));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT5 #(
    .INIT(32'h00800000)) 
    force2_i_1
       (.I0(Q[27]),
        .I1(Q[26]),
        .I2(Q[28]),
        .I3(Q[30]),
        .I4(Q[31]),
        .O(ex_op1_cmp_eq1));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT3 #(
    .INIT(8'h04)) 
    force_Val1_i_1
       (.I0(ex_op1_cmp_eq_i_2_n_0),
        .I1(Q[22]),
        .I2(Q[23]),
        .O(force_Val10_out));
  LUT6 #(
    .INIT(64'hFFFFDFDFDFFFFFFF)) 
    force_Val2_N_i_1
       (.I0(Q[31]),
        .I1(Q[30]),
        .I2(Q[28]),
        .I3(Q[29]),
        .I4(Q[26]),
        .I5(Q[27]),
        .O(\cur_data_i_reg[31]_0 ));
  LUT6 #(
    .INIT(64'h00AE00AE00AEAEAE)) 
    of_gpr_write_dbg_inferred_i_1
       (.I0(of_gpr_write_dbg_inferred_i_2_n_0),
        .I1(Q[18]),
        .I2(of_gpr_write_dbg_inferred_i_3_n_0),
        .I3(\cur_data_i_reg[26]_2 ),
        .I4(Q[2]),
        .I5(Q[3]),
        .O(\cur_data_i_reg[18]_0 ));
  LUT6 #(
    .INIT(64'hF0000000F0F1F0F3)) 
    of_gpr_write_dbg_inferred_i_2
       (.I0(Q[14]),
        .I1(Q[29]),
        .I2(ex_MSR_clear_decode_i_2_n_0),
        .I3(Q[27]),
        .I4(Q[26]),
        .I5(of_gpr_write_dbg_inferred_i_5_n_0),
        .O(of_gpr_write_dbg_inferred_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT5 #(
    .INIT(32'hFFFFDFFF)) 
    of_gpr_write_dbg_inferred_i_3
       (.I0(Q[31]),
        .I1(Q[30]),
        .I2(Q[28]),
        .I3(Q[27]),
        .I4(Q[26]),
        .O(of_gpr_write_dbg_inferred_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    of_gpr_write_dbg_inferred_i_4
       (.I0(Q[26]),
        .I1(Q[27]),
        .I2(Q[28]),
        .I3(Q[30]),
        .I4(Q[31]),
        .I5(Q[29]),
        .O(\cur_data_i_reg[26]_2 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT3 #(
    .INIT(8'h80)) 
    of_gpr_write_dbg_inferred_i_5
       (.I0(Q[28]),
        .I1(Q[30]),
        .I2(Q[31]),
        .O(of_gpr_write_dbg_inferred_i_5_n_0));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA8)) 
    of_gpr_write_inferred_i_1
       (.I0(\cur_data_i_reg[18]_0 ),
        .I1(Q[21]),
        .I2(Q[24]),
        .I3(Q[25]),
        .I4(Q[23]),
        .I5(Q[22]),
        .O(in0));
  LUT6 #(
    .INIT(64'h0000000700000000)) 
    of_read_imm_reg_raw_i_2
       (.I0(ex_jump_nodelay),
        .I1(ex_jump),
        .I2(Q[27]),
        .I3(Q[26]),
        .I4(ex_MSR_clear_decode_i_2_n_0),
        .I5(Q[29]),
        .O(ex_jump_nodelay_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT4 #(
    .INIT(16'h1004)) 
    use_Reg_Neg_DI_i_1
       (.I0(ex_op1_cmp_eq_i_2_n_0),
        .I1(Q[22]),
        .I2(Q[23]),
        .I3(Q[21]),
        .O(use_Reg_Neg_DI1_out));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT4 #(
    .INIT(16'h1004)) 
    use_Reg_Neg_S_i_1
       (.I0(ex_op1_cmp_eq_i_2_n_0),
        .I1(Q[23]),
        .I2(Q[22]),
        .I3(Q[21]),
        .O(use_Reg_Neg_S3_out));
endmodule

(* ORIG_REF_NAME = "OneHot_Buffer" *) 
module microblaze_microblaze_0_0_OneHot_Buffer__parameterized1
   (Q,
    \cur_data_i_reg[1]_0 ,
    \cur_data_i_reg[0]_0 ,
    \cur_data_i_reg[26] ,
    \cur_data_i_reg[6]_0 ,
    \cur_data_i_reg[6]_1 ,
    S_0,
    S_1,
    S_2,
    S_3,
    S_4,
    S_5,
    S_6,
    S_7,
    S_8,
    S_9,
    \cur_data_i_reg[8]_0 ,
    \m0_gpr_write_addr_reg[2] ,
    \m1_gpr_write_addr_reg[2] ,
    \m2_gpr_write_addr_reg[2] ,
    \m3_gpr_write_addr_reg[2] ,
    \cur_data_i_reg[3]_0 ,
    \m0_gpr_write_addr_reg[2]_0 ,
    \m1_gpr_write_addr_reg[2]_0 ,
    \m2_gpr_write_addr_reg[2]_0 ,
    \m3_gpr_write_addr_reg[2]_0 ,
    \m1_M0_Result_i_reg[0] ,
    \m1_M0_Result_i_reg[2] ,
    \m1_M0_Result_i_reg[5] ,
    \m1_M0_Result_i_reg[8] ,
    \m1_M0_Result_i_reg[9] ,
    \m1_M0_Result_i_reg[12] ,
    \m1_M0_Result_i_reg[13] ,
    \m1_M0_Result_i_reg[14] ,
    \WB_Exception_Return_Addr_reg[16] ,
    \WB_Exception_Return_Addr_reg[18] ,
    \WB_Exception_Return_Addr_reg[21] ,
    \WB_Exception_Return_Addr_reg[25] ,
    M1_Sel_Mul_Res_reg,
    m2_m1_sel_res_reg,
    \EX_Op2[0]_i_6_0 ,
    \EX_Op2[0]_i_7_0 ,
    \WB_Exception_Return_Addr_reg[20] ,
    \WB_Exception_Return_Addr_reg[17] ,
    \m1_M0_Result_i_reg[1] ,
    \m1_M0_Result_i_reg[3] ,
    \m1_M0_Result_i_reg[4] ,
    \m1_M0_Result_i_reg[6] ,
    \m1_M0_Result_i_reg[7] ,
    \m1_M0_Result_i_reg[10] ,
    \m1_M0_Result_i_reg[11] ,
    \m1_M0_Result_i_reg[15] ,
    M1_Sel_Mul_Res_reg_0,
    \cur_data_i_reg[2]_0 ,
    \m2_M1_Result_i_reg[29] ,
    \EX_Branch_CMP_Op1[29]_i_3_0 ,
    \EX_Branch_CMP_Op1[30]_i_3_0 ,
    \cur_data_i_reg[10]_0 ,
    \cur_data_i_reg[0]_1 ,
    in,
    \cur_data_i_reg[10]_1 ,
    \EX_Op2[16]_i_3 ,
    \EX_Op2[0]_i_6_1 ,
    \EX_Op2[0]_i_6_2 ,
    \EX_Branch_CMP_Op1[30]_i_7_0 ,
    \EX_Op2[0]_i_7_1 ,
    m3_gpr_write,
    \EX_Branch_CMP_Op1[30]_i_3_1 ,
    \EX_Branch_CMP_Op1[30]_i_7_1 ,
    \EX_Op2[0]_i_7_2 ,
    m2_gpr_write,
    \EX_Branch_CMP_Op1[30]_i_7_2 ,
    \EX_Branch_CMP_Op1[30]_i_8_0 ,
    \EX_Op2[0]_i_7_3 ,
    m1_gpr_write,
    \EX_Branch_CMP_Op1[30]_i_3_2 ,
    \EX_Branch_CMP_Op1[30]_i_8_1 ,
    \EX_Op2[0]_i_7_4 ,
    \EX_Branch_CMP_Op1[30]_i_8_2 ,
    m0_gpr_write,
    ex_gpr_write_addr,
    \EX_Op2[0]_i_7_5 ,
    \Using_FPGA.Native ,
    \EX_Op2[0]_i_6_3 ,
    \EX_Op2[0]_i_12_0 ,
    \EX_Branch_CMP_Op1[30]_i_3_3 ,
    \EX_Op2_reg[0] ,
    \EX_Op2_reg[0]_0 ,
    \EX_Op2_reg[0]_1 ,
    \EX_Op2_reg[0]_2 ,
    \EX_Op2_reg[2] ,
    \EX_Op2_reg[2]_0 ,
    \EX_Op2_reg[2]_1 ,
    \EX_Op2_reg[2]_2 ,
    \EX_Op2_reg[5] ,
    \EX_Op2_reg[5]_0 ,
    \EX_Op2_reg[5]_1 ,
    \EX_Op2_reg[5]_2 ,
    \EX_Op2_reg[8] ,
    \EX_Op2_reg[8]_0 ,
    \EX_Op2_reg[8]_1 ,
    \EX_Op2_reg[8]_2 ,
    \EX_Op2_reg[9] ,
    \EX_Op2_reg[9]_0 ,
    \EX_Op2_reg[9]_1 ,
    \EX_Op2_reg[9]_2 ,
    \EX_Op2_reg[12] ,
    \EX_Op2_reg[12]_0 ,
    \EX_Op2_reg[12]_1 ,
    \EX_Op2_reg[12]_2 ,
    \EX_Op2_reg[13] ,
    \EX_Op2_reg[13]_0 ,
    \EX_Op2_reg[13]_1 ,
    \EX_Op2_reg[13]_2 ,
    \EX_Op2_reg[14] ,
    \EX_Op2_reg[14]_0 ,
    \EX_Op2_reg[14]_1 ,
    \EX_Op2_reg[14]_2 ,
    wb_fwd,
    \EX_Op2_reg[16] ,
    \EX_Op2_reg[16]_0 ,
    \EX_Op2_reg[18] ,
    \EX_Op2_reg[18]_0 ,
    \EX_Op2_reg[21] ,
    \EX_Op2_reg[21]_0 ,
    \EX_Op2_reg[25] ,
    \EX_Op2_reg[25]_0 ,
    \EX_Op2_reg[29] ,
    \EX_Op2_reg[29]_0 ,
    \EX_Op2_reg[29]_1 ,
    \EX_Op2_reg[29]_2 ,
    \EX_Op2_reg[31] ,
    \EX_Op2_reg[31]_0 ,
    \EX_Op2_reg[31]_1 ,
    \EX_Op2_reg[20] ,
    \EX_Op2_reg[20]_0 ,
    \EX_Op2_reg[17] ,
    \EX_Op2_reg[17]_0 ,
    \EX_Op2_reg[1] ,
    \EX_Op2_reg[1]_0 ,
    \EX_Op2_reg[1]_1 ,
    \EX_Op2_reg[1]_2 ,
    \EX_Op2_reg[3] ,
    \EX_Op2_reg[3]_0 ,
    \EX_Op2_reg[3]_1 ,
    \EX_Op2_reg[3]_2 ,
    \EX_Op2_reg[4] ,
    \EX_Op2_reg[4]_0 ,
    \EX_Op2_reg[4]_1 ,
    \EX_Op2_reg[4]_2 ,
    \EX_Op2_reg[6] ,
    \EX_Op2_reg[6]_0 ,
    \EX_Op2_reg[6]_1 ,
    \EX_Op2_reg[6]_2 ,
    \EX_Op2_reg[7] ,
    \EX_Op2_reg[7]_0 ,
    \EX_Op2_reg[7]_1 ,
    \EX_Op2_reg[7]_2 ,
    \EX_Op2_reg[10] ,
    \EX_Op2_reg[10]_0 ,
    \EX_Op2_reg[10]_1 ,
    \EX_Op2_reg[10]_2 ,
    \EX_Op2_reg[11] ,
    \EX_Op2_reg[11]_0 ,
    \EX_Op2_reg[11]_1 ,
    \EX_Op2_reg[11]_2 ,
    \EX_Op2_reg[15] ,
    \EX_Op2_reg[15]_0 ,
    \EX_Op2_reg[15]_1 ,
    \EX_Op2_reg[15]_2 ,
    \EX_Op2_reg[30] ,
    \EX_Op2_reg[30]_0 ,
    \EX_Op1_reg[30] ,
    \EX_Op2_reg[30]_1 ,
    \EX_Op2_reg[31]_2 ,
    \EX_Op2_reg[31]_3 ,
    \EX_Op2_reg[31]_4 ,
    \EX_Op2_reg[31]_5 ,
    \EX_Op1_reg[29] ,
    of_op1_sel_spr,
    \EX_Op1_reg[29]_0 ,
    \EX_Branch_CMP_Op1_reg[29] ,
    \EX_Branch_CMP_Op1_reg[29]_0 ,
    \EX_Branch_CMP_Op1_reg[29]_1 ,
    \EX_Op1_reg[29]_1 ,
    \EX_Op1_reg[29]_2 ,
    \EX_Op1_reg[29]_3 ,
    \EX_Op1_reg[29]_4 ,
    \EX_Op1_reg[30]_0 ,
    \EX_Op1_reg[30]_1 ,
    \EX_Branch_CMP_Op1_reg[30] ,
    GPR_Op1,
    \EX_Branch_CMP_Op1_reg[30]_0 ,
    \EX_Branch_CMP_Op1_reg[30]_1 ,
    ex_alu_result,
    \EX_Op1_reg[31] ,
    \EX_Op1_reg[31]_0 ,
    \EX_Op1_reg[31]_1 ,
    \EX_Branch_CMP_Op1_reg[30]_2 ,
    \EX_Branch_CMP_Op1_reg[30]_3 ,
    if4_push_instr_fetch,
    addr,
    Clk,
    sync_reset);
  output [1:0]Q;
  output \cur_data_i_reg[1]_0 ;
  output \cur_data_i_reg[0]_0 ;
  output \cur_data_i_reg[26] ;
  output \cur_data_i_reg[6]_0 ;
  output \cur_data_i_reg[6]_1 ;
  output S_0;
  output S_1;
  output S_2;
  output S_3;
  output S_4;
  output S_5;
  output S_6;
  output S_7;
  output S_8;
  output S_9;
  output \cur_data_i_reg[8]_0 ;
  output \m0_gpr_write_addr_reg[2] ;
  output \m1_gpr_write_addr_reg[2] ;
  output \m2_gpr_write_addr_reg[2] ;
  output \m3_gpr_write_addr_reg[2] ;
  output \cur_data_i_reg[3]_0 ;
  output \m0_gpr_write_addr_reg[2]_0 ;
  output \m1_gpr_write_addr_reg[2]_0 ;
  output \m2_gpr_write_addr_reg[2]_0 ;
  output \m3_gpr_write_addr_reg[2]_0 ;
  output \m1_M0_Result_i_reg[0] ;
  output \m1_M0_Result_i_reg[2] ;
  output \m1_M0_Result_i_reg[5] ;
  output \m1_M0_Result_i_reg[8] ;
  output \m1_M0_Result_i_reg[9] ;
  output \m1_M0_Result_i_reg[12] ;
  output \m1_M0_Result_i_reg[13] ;
  output \m1_M0_Result_i_reg[14] ;
  output \WB_Exception_Return_Addr_reg[16] ;
  output \WB_Exception_Return_Addr_reg[18] ;
  output \WB_Exception_Return_Addr_reg[21] ;
  output \WB_Exception_Return_Addr_reg[25] ;
  output M1_Sel_Mul_Res_reg;
  output [0:0]m2_m1_sel_res_reg;
  output \EX_Op2[0]_i_6_0 ;
  output \EX_Op2[0]_i_7_0 ;
  output \WB_Exception_Return_Addr_reg[20] ;
  output \WB_Exception_Return_Addr_reg[17] ;
  output \m1_M0_Result_i_reg[1] ;
  output \m1_M0_Result_i_reg[3] ;
  output \m1_M0_Result_i_reg[4] ;
  output \m1_M0_Result_i_reg[6] ;
  output \m1_M0_Result_i_reg[7] ;
  output \m1_M0_Result_i_reg[10] ;
  output \m1_M0_Result_i_reg[11] ;
  output \m1_M0_Result_i_reg[15] ;
  output M1_Sel_Mul_Res_reg_0;
  output [2:0]\cur_data_i_reg[2]_0 ;
  output [2:0]\m2_M1_Result_i_reg[29] ;
  output \EX_Branch_CMP_Op1[29]_i_3_0 ;
  output \EX_Branch_CMP_Op1[30]_i_3_0 ;
  input \cur_data_i_reg[10]_0 ;
  input \cur_data_i_reg[0]_1 ;
  input [10:0]in;
  input \cur_data_i_reg[10]_1 ;
  input \EX_Op2[16]_i_3 ;
  input \EX_Op2[0]_i_6_1 ;
  input \EX_Op2[0]_i_6_2 ;
  input [4:0]\EX_Branch_CMP_Op1[30]_i_7_0 ;
  input \EX_Op2[0]_i_7_1 ;
  input m3_gpr_write;
  input \EX_Branch_CMP_Op1[30]_i_3_1 ;
  input [4:0]\EX_Branch_CMP_Op1[30]_i_7_1 ;
  input \EX_Op2[0]_i_7_2 ;
  input m2_gpr_write;
  input \EX_Branch_CMP_Op1[30]_i_7_2 ;
  input [4:0]\EX_Branch_CMP_Op1[30]_i_8_0 ;
  input \EX_Op2[0]_i_7_3 ;
  input m1_gpr_write;
  input \EX_Branch_CMP_Op1[30]_i_3_2 ;
  input [4:0]\EX_Branch_CMP_Op1[30]_i_8_1 ;
  input \EX_Op2[0]_i_7_4 ;
  input \EX_Branch_CMP_Op1[30]_i_8_2 ;
  input m0_gpr_write;
  input [2:0]ex_gpr_write_addr;
  input \EX_Op2[0]_i_7_5 ;
  input [1:0]\Using_FPGA.Native ;
  input [4:0]\EX_Op2[0]_i_6_3 ;
  input \EX_Op2[0]_i_12_0 ;
  input \EX_Branch_CMP_Op1[30]_i_3_3 ;
  input \EX_Op2_reg[0] ;
  input \EX_Op2_reg[0]_0 ;
  input [0:0]\EX_Op2_reg[0]_1 ;
  input \EX_Op2_reg[0]_2 ;
  input \EX_Op2_reg[2] ;
  input \EX_Op2_reg[2]_0 ;
  input \EX_Op2_reg[2]_1 ;
  input \EX_Op2_reg[2]_2 ;
  input \EX_Op2_reg[5] ;
  input \EX_Op2_reg[5]_0 ;
  input \EX_Op2_reg[5]_1 ;
  input \EX_Op2_reg[5]_2 ;
  input \EX_Op2_reg[8] ;
  input \EX_Op2_reg[8]_0 ;
  input \EX_Op2_reg[8]_1 ;
  input \EX_Op2_reg[8]_2 ;
  input \EX_Op2_reg[9] ;
  input \EX_Op2_reg[9]_0 ;
  input \EX_Op2_reg[9]_1 ;
  input \EX_Op2_reg[9]_2 ;
  input \EX_Op2_reg[12] ;
  input \EX_Op2_reg[12]_0 ;
  input \EX_Op2_reg[12]_1 ;
  input \EX_Op2_reg[12]_2 ;
  input \EX_Op2_reg[13] ;
  input \EX_Op2_reg[13]_0 ;
  input \EX_Op2_reg[13]_1 ;
  input \EX_Op2_reg[13]_2 ;
  input \EX_Op2_reg[14] ;
  input \EX_Op2_reg[14]_0 ;
  input \EX_Op2_reg[14]_1 ;
  input \EX_Op2_reg[14]_2 ;
  input [8:0]wb_fwd;
  input \EX_Op2_reg[16] ;
  input \EX_Op2_reg[16]_0 ;
  input \EX_Op2_reg[18] ;
  input \EX_Op2_reg[18]_0 ;
  input \EX_Op2_reg[21] ;
  input \EX_Op2_reg[21]_0 ;
  input \EX_Op2_reg[25] ;
  input \EX_Op2_reg[25]_0 ;
  input \EX_Op2_reg[29] ;
  input \EX_Op2_reg[29]_0 ;
  input \EX_Op2_reg[29]_1 ;
  input \EX_Op2_reg[29]_2 ;
  input \EX_Op2_reg[31] ;
  input \EX_Op2_reg[31]_0 ;
  input \EX_Op2_reg[31]_1 ;
  input \EX_Op2_reg[20] ;
  input \EX_Op2_reg[20]_0 ;
  input \EX_Op2_reg[17] ;
  input \EX_Op2_reg[17]_0 ;
  input \EX_Op2_reg[1] ;
  input \EX_Op2_reg[1]_0 ;
  input \EX_Op2_reg[1]_1 ;
  input \EX_Op2_reg[1]_2 ;
  input \EX_Op2_reg[3] ;
  input \EX_Op2_reg[3]_0 ;
  input \EX_Op2_reg[3]_1 ;
  input \EX_Op2_reg[3]_2 ;
  input \EX_Op2_reg[4] ;
  input \EX_Op2_reg[4]_0 ;
  input \EX_Op2_reg[4]_1 ;
  input \EX_Op2_reg[4]_2 ;
  input \EX_Op2_reg[6] ;
  input \EX_Op2_reg[6]_0 ;
  input \EX_Op2_reg[6]_1 ;
  input \EX_Op2_reg[6]_2 ;
  input \EX_Op2_reg[7] ;
  input \EX_Op2_reg[7]_0 ;
  input \EX_Op2_reg[7]_1 ;
  input \EX_Op2_reg[7]_2 ;
  input \EX_Op2_reg[10] ;
  input \EX_Op2_reg[10]_0 ;
  input \EX_Op2_reg[10]_1 ;
  input \EX_Op2_reg[10]_2 ;
  input \EX_Op2_reg[11] ;
  input \EX_Op2_reg[11]_0 ;
  input \EX_Op2_reg[11]_1 ;
  input \EX_Op2_reg[11]_2 ;
  input \EX_Op2_reg[15] ;
  input \EX_Op2_reg[15]_0 ;
  input \EX_Op2_reg[15]_1 ;
  input \EX_Op2_reg[15]_2 ;
  input \EX_Op2_reg[30] ;
  input \EX_Op2_reg[30]_0 ;
  input \EX_Op1_reg[30] ;
  input \EX_Op2_reg[30]_1 ;
  input \EX_Op2_reg[31]_2 ;
  input \EX_Op2_reg[31]_3 ;
  input \EX_Op2_reg[31]_4 ;
  input \EX_Op2_reg[31]_5 ;
  input \EX_Op1_reg[29] ;
  input of_op1_sel_spr;
  input \EX_Op1_reg[29]_0 ;
  input [1:0]\EX_Branch_CMP_Op1_reg[29] ;
  input \EX_Branch_CMP_Op1_reg[29]_0 ;
  input \EX_Branch_CMP_Op1_reg[29]_1 ;
  input \EX_Op1_reg[29]_1 ;
  input \EX_Op1_reg[29]_2 ;
  input [0:0]\EX_Op1_reg[29]_3 ;
  input \EX_Op1_reg[29]_4 ;
  input \EX_Op1_reg[30]_0 ;
  input \EX_Op1_reg[30]_1 ;
  input \EX_Branch_CMP_Op1_reg[30] ;
  input [2:0]GPR_Op1;
  input \EX_Branch_CMP_Op1_reg[30]_0 ;
  input \EX_Branch_CMP_Op1_reg[30]_1 ;
  input [1:0]ex_alu_result;
  input \EX_Op1_reg[31] ;
  input \EX_Op1_reg[31]_0 ;
  input \EX_Op1_reg[31]_1 ;
  input \EX_Branch_CMP_Op1_reg[30]_2 ;
  input \EX_Branch_CMP_Op1_reg[30]_3 ;
  input if4_push_instr_fetch;
  input [0:1]addr;
  input Clk;
  input sync_reset;

  wire Clk;
  wire \EX_Branch_CMP_Op1[29]_i_2_n_0 ;
  wire \EX_Branch_CMP_Op1[29]_i_3_0 ;
  wire \EX_Branch_CMP_Op1[29]_i_4_n_0 ;
  wire \EX_Branch_CMP_Op1[29]_i_5_n_0 ;
  wire \EX_Branch_CMP_Op1[29]_i_6_n_0 ;
  wire \EX_Branch_CMP_Op1[29]_i_7_n_0 ;
  wire \EX_Branch_CMP_Op1[29]_i_8_n_0 ;
  wire \EX_Branch_CMP_Op1[30]_i_11_n_0 ;
  wire \EX_Branch_CMP_Op1[30]_i_12_n_0 ;
  wire \EX_Branch_CMP_Op1[30]_i_13_n_0 ;
  wire \EX_Branch_CMP_Op1[30]_i_14_n_0 ;
  wire \EX_Branch_CMP_Op1[30]_i_3_0 ;
  wire \EX_Branch_CMP_Op1[30]_i_3_1 ;
  wire \EX_Branch_CMP_Op1[30]_i_3_2 ;
  wire \EX_Branch_CMP_Op1[30]_i_3_3 ;
  wire \EX_Branch_CMP_Op1[30]_i_5_n_0 ;
  wire \EX_Branch_CMP_Op1[30]_i_6_n_0 ;
  wire [4:0]\EX_Branch_CMP_Op1[30]_i_7_0 ;
  wire [4:0]\EX_Branch_CMP_Op1[30]_i_7_1 ;
  wire \EX_Branch_CMP_Op1[30]_i_7_2 ;
  wire \EX_Branch_CMP_Op1[30]_i_7_n_0 ;
  wire [4:0]\EX_Branch_CMP_Op1[30]_i_8_0 ;
  wire [4:0]\EX_Branch_CMP_Op1[30]_i_8_1 ;
  wire \EX_Branch_CMP_Op1[30]_i_8_2 ;
  wire \EX_Branch_CMP_Op1[30]_i_8_n_0 ;
  wire \EX_Branch_CMP_Op1[30]_i_9_n_0 ;
  wire \EX_Branch_CMP_Op1[31]_i_2_n_0 ;
  wire [1:0]\EX_Branch_CMP_Op1_reg[29] ;
  wire \EX_Branch_CMP_Op1_reg[29]_0 ;
  wire \EX_Branch_CMP_Op1_reg[29]_1 ;
  wire \EX_Branch_CMP_Op1_reg[30] ;
  wire \EX_Branch_CMP_Op1_reg[30]_0 ;
  wire \EX_Branch_CMP_Op1_reg[30]_1 ;
  wire \EX_Branch_CMP_Op1_reg[30]_2 ;
  wire \EX_Branch_CMP_Op1_reg[30]_3 ;
  wire \EX_Op1[29]_i_4_n_0 ;
  wire \EX_Op1[29]_i_5_n_0 ;
  wire \EX_Op1[29]_i_6_n_0 ;
  wire \EX_Op1[30]_i_4_n_0 ;
  wire \EX_Op1[30]_i_5_n_0 ;
  wire \EX_Op1[30]_i_6_n_0 ;
  wire \EX_Op1[31]_i_3_n_0 ;
  wire \EX_Op1[31]_i_4_n_0 ;
  wire \EX_Op1[31]_i_5_n_0 ;
  wire \EX_Op1_reg[29] ;
  wire \EX_Op1_reg[29]_0 ;
  wire \EX_Op1_reg[29]_1 ;
  wire \EX_Op1_reg[29]_2 ;
  wire [0:0]\EX_Op1_reg[29]_3 ;
  wire \EX_Op1_reg[29]_4 ;
  wire \EX_Op1_reg[30] ;
  wire \EX_Op1_reg[30]_0 ;
  wire \EX_Op1_reg[30]_1 ;
  wire \EX_Op1_reg[31] ;
  wire \EX_Op1_reg[31]_0 ;
  wire \EX_Op1_reg[31]_1 ;
  wire \EX_Op2[0]_i_11_n_0 ;
  wire \EX_Op2[0]_i_12_0 ;
  wire \EX_Op2[0]_i_12_n_0 ;
  wire \EX_Op2[0]_i_13_n_0 ;
  wire \EX_Op2[0]_i_15_n_0 ;
  wire \EX_Op2[0]_i_16_n_0 ;
  wire \EX_Op2[0]_i_17_n_0 ;
  wire \EX_Op2[0]_i_18_n_0 ;
  wire \EX_Op2[0]_i_20_n_0 ;
  wire \EX_Op2[0]_i_21_n_0 ;
  wire \EX_Op2[0]_i_27_n_0 ;
  wire \EX_Op2[0]_i_6_0 ;
  wire \EX_Op2[0]_i_6_1 ;
  wire \EX_Op2[0]_i_6_2 ;
  wire [4:0]\EX_Op2[0]_i_6_3 ;
  wire \EX_Op2[0]_i_7_0 ;
  wire \EX_Op2[0]_i_7_1 ;
  wire \EX_Op2[0]_i_7_2 ;
  wire \EX_Op2[0]_i_7_3 ;
  wire \EX_Op2[0]_i_7_4 ;
  wire \EX_Op2[0]_i_7_5 ;
  wire \EX_Op2[0]_i_9_n_0 ;
  wire \EX_Op2[16]_i_3 ;
  wire \EX_Op2[31]_i_3_n_0 ;
  wire \EX_Op2[31]_i_4_n_0 ;
  wire \EX_Op2_reg[0] ;
  wire \EX_Op2_reg[0]_0 ;
  wire [0:0]\EX_Op2_reg[0]_1 ;
  wire \EX_Op2_reg[0]_2 ;
  wire \EX_Op2_reg[10] ;
  wire \EX_Op2_reg[10]_0 ;
  wire \EX_Op2_reg[10]_1 ;
  wire \EX_Op2_reg[10]_2 ;
  wire \EX_Op2_reg[11] ;
  wire \EX_Op2_reg[11]_0 ;
  wire \EX_Op2_reg[11]_1 ;
  wire \EX_Op2_reg[11]_2 ;
  wire \EX_Op2_reg[12] ;
  wire \EX_Op2_reg[12]_0 ;
  wire \EX_Op2_reg[12]_1 ;
  wire \EX_Op2_reg[12]_2 ;
  wire \EX_Op2_reg[13] ;
  wire \EX_Op2_reg[13]_0 ;
  wire \EX_Op2_reg[13]_1 ;
  wire \EX_Op2_reg[13]_2 ;
  wire \EX_Op2_reg[14] ;
  wire \EX_Op2_reg[14]_0 ;
  wire \EX_Op2_reg[14]_1 ;
  wire \EX_Op2_reg[14]_2 ;
  wire \EX_Op2_reg[15] ;
  wire \EX_Op2_reg[15]_0 ;
  wire \EX_Op2_reg[15]_1 ;
  wire \EX_Op2_reg[15]_2 ;
  wire \EX_Op2_reg[16] ;
  wire \EX_Op2_reg[16]_0 ;
  wire \EX_Op2_reg[17] ;
  wire \EX_Op2_reg[17]_0 ;
  wire \EX_Op2_reg[18] ;
  wire \EX_Op2_reg[18]_0 ;
  wire \EX_Op2_reg[1] ;
  wire \EX_Op2_reg[1]_0 ;
  wire \EX_Op2_reg[1]_1 ;
  wire \EX_Op2_reg[1]_2 ;
  wire \EX_Op2_reg[20] ;
  wire \EX_Op2_reg[20]_0 ;
  wire \EX_Op2_reg[21] ;
  wire \EX_Op2_reg[21]_0 ;
  wire \EX_Op2_reg[25] ;
  wire \EX_Op2_reg[25]_0 ;
  wire \EX_Op2_reg[29] ;
  wire \EX_Op2_reg[29]_0 ;
  wire \EX_Op2_reg[29]_1 ;
  wire \EX_Op2_reg[29]_2 ;
  wire \EX_Op2_reg[2] ;
  wire \EX_Op2_reg[2]_0 ;
  wire \EX_Op2_reg[2]_1 ;
  wire \EX_Op2_reg[2]_2 ;
  wire \EX_Op2_reg[30] ;
  wire \EX_Op2_reg[30]_0 ;
  wire \EX_Op2_reg[30]_1 ;
  wire \EX_Op2_reg[31] ;
  wire \EX_Op2_reg[31]_0 ;
  wire \EX_Op2_reg[31]_1 ;
  wire \EX_Op2_reg[31]_2 ;
  wire \EX_Op2_reg[31]_3 ;
  wire \EX_Op2_reg[31]_4 ;
  wire \EX_Op2_reg[31]_5 ;
  wire \EX_Op2_reg[3] ;
  wire \EX_Op2_reg[3]_0 ;
  wire \EX_Op2_reg[3]_1 ;
  wire \EX_Op2_reg[3]_2 ;
  wire \EX_Op2_reg[4] ;
  wire \EX_Op2_reg[4]_0 ;
  wire \EX_Op2_reg[4]_1 ;
  wire \EX_Op2_reg[4]_2 ;
  wire \EX_Op2_reg[5] ;
  wire \EX_Op2_reg[5]_0 ;
  wire \EX_Op2_reg[5]_1 ;
  wire \EX_Op2_reg[5]_2 ;
  wire \EX_Op2_reg[6] ;
  wire \EX_Op2_reg[6]_0 ;
  wire \EX_Op2_reg[6]_1 ;
  wire \EX_Op2_reg[6]_2 ;
  wire \EX_Op2_reg[7] ;
  wire \EX_Op2_reg[7]_0 ;
  wire \EX_Op2_reg[7]_1 ;
  wire \EX_Op2_reg[7]_2 ;
  wire \EX_Op2_reg[8] ;
  wire \EX_Op2_reg[8]_0 ;
  wire \EX_Op2_reg[8]_1 ;
  wire \EX_Op2_reg[8]_2 ;
  wire \EX_Op2_reg[9] ;
  wire \EX_Op2_reg[9]_0 ;
  wire \EX_Op2_reg[9]_1 ;
  wire \EX_Op2_reg[9]_2 ;
  wire [2:0]GPR_Op1;
  wire M1_Sel_Mul_Res_reg;
  wire M1_Sel_Mul_Res_reg_0;
  wire \Op1_Conflict_Stall/OF_EX_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op1_Conflict_Stall/OF_M0_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op1_Conflict_Stall/OF_M1_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op1_Conflict_Stall/OF_M2_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op1_Conflict_Stall/OF_M3_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op2_Conflict_Stall/OF_EX_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op2_Conflict_Stall/OF_M0_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op2_Conflict_Stall/OF_M1_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op2_Conflict_Stall/OF_M2_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire \Op2_Conflict_Stall/OF_M3_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ;
  wire [1:0]Q;
  wire S_0;
  wire S_1;
  wire S_2;
  wire S_3;
  wire S_4;
  wire S_5;
  wire S_6;
  wire S_7;
  wire S_8;
  wire S_9;
  wire [1:0]\Using_FPGA.Native ;
  wire \WB_Exception_Return_Addr_reg[16] ;
  wire \WB_Exception_Return_Addr_reg[17] ;
  wire \WB_Exception_Return_Addr_reg[18] ;
  wire \WB_Exception_Return_Addr_reg[20] ;
  wire \WB_Exception_Return_Addr_reg[21] ;
  wire \WB_Exception_Return_Addr_reg[25] ;
  wire [0:1]addr;
  wire \cur_data_i[0]_i_1_n_0 ;
  wire \cur_data_i[10]_i_1_n_0 ;
  wire \cur_data_i[1]_i_1_n_0 ;
  wire \cur_data_i[2]_i_1_n_0 ;
  wire \cur_data_i[3]_i_1_n_0 ;
  wire \cur_data_i[4]_i_1_n_0 ;
  wire \cur_data_i[5]_i_1_n_0 ;
  wire \cur_data_i[6]_i_1_n_0 ;
  wire \cur_data_i[7]_i_1_n_0 ;
  wire \cur_data_i[8]_i_1_n_0 ;
  wire \cur_data_i[9]_i_1_n_0 ;
  wire \cur_data_i_reg[0]_0 ;
  wire \cur_data_i_reg[0]_1 ;
  wire \cur_data_i_reg[10]_0 ;
  wire \cur_data_i_reg[10]_1 ;
  wire \cur_data_i_reg[1]_0 ;
  wire \cur_data_i_reg[26] ;
  wire [2:0]\cur_data_i_reg[2]_0 ;
  wire \cur_data_i_reg[3]_0 ;
  wire \cur_data_i_reg[6]_0 ;
  wire \cur_data_i_reg[6]_1 ;
  wire \cur_data_i_reg[8]_0 ;
  wire \data_buffer_reg[3][0]_srl4_n_0 ;
  wire [1:0]ex_alu_result;
  wire [2:0]ex_gpr_write_addr;
  wire if4_push_instr_fetch;
  wire [10:0]in;
  wire m0_gpr_write;
  wire \m0_gpr_write_addr_reg[2] ;
  wire \m0_gpr_write_addr_reg[2]_0 ;
  wire \m1_M0_Result_i_reg[0] ;
  wire \m1_M0_Result_i_reg[10] ;
  wire \m1_M0_Result_i_reg[11] ;
  wire \m1_M0_Result_i_reg[12] ;
  wire \m1_M0_Result_i_reg[13] ;
  wire \m1_M0_Result_i_reg[14] ;
  wire \m1_M0_Result_i_reg[15] ;
  wire \m1_M0_Result_i_reg[1] ;
  wire \m1_M0_Result_i_reg[2] ;
  wire \m1_M0_Result_i_reg[3] ;
  wire \m1_M0_Result_i_reg[4] ;
  wire \m1_M0_Result_i_reg[5] ;
  wire \m1_M0_Result_i_reg[6] ;
  wire \m1_M0_Result_i_reg[7] ;
  wire \m1_M0_Result_i_reg[8] ;
  wire \m1_M0_Result_i_reg[9] ;
  wire m1_gpr_write;
  wire \m1_gpr_write_addr_reg[2] ;
  wire \m1_gpr_write_addr_reg[2]_0 ;
  wire [2:0]\m2_M1_Result_i_reg[29] ;
  wire m2_gpr_write;
  wire \m2_gpr_write_addr_reg[2] ;
  wire \m2_gpr_write_addr_reg[2]_0 ;
  wire [0:0]m2_m1_sel_res_reg;
  wire m3_gpr_write;
  wire \m3_gpr_write_addr_reg[2] ;
  wire \m3_gpr_write_addr_reg[2]_0 ;
  wire [0:0]of_op1_sel;
  wire of_op1_sel_spr;
  wire [1:10]of_predecode;
  wire p_2_in13_in;
  wire p_2_in19_in;
  wire p_2_in25_in;
  wire p_2_in31_in;
  wire p_2_in37_in;
  wire p_2_in43_in;
  wire p_2_in49_in;
  wire p_2_in55_in;
  wire p_2_in61_in;
  wire p_2_in7_in;
  wire sync_reset;
  wire [8:0]wb_fwd;

  LUT2 #(
    .INIT(4'h2)) 
    \EX_Branch_CMP_Op1[0]_i_2 
       (.I0(of_op1_sel),
        .I1(\cur_data_i_reg[6]_1 ),
        .O(\EX_Branch_CMP_Op1[30]_i_3_0 ));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    \EX_Branch_CMP_Op1[0]_i_3 
       (.I0(of_op1_sel),
        .I1(\cur_data_i_reg[6]_1 ),
        .I2(\cur_data_i_reg[6]_0 ),
        .O(\EX_Branch_CMP_Op1[29]_i_3_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBABAAABAB)) 
    \EX_Branch_CMP_Op1[29]_i_1 
       (.I0(\EX_Op1_reg[29]_0 ),
        .I1(\EX_Op1[29]_i_4_n_0 ),
        .I2(\EX_Branch_CMP_Op1[29]_i_2_n_0 ),
        .I3(\EX_Branch_CMP_Op1_reg[29] [1]),
        .I4(\cur_data_i_reg[6]_0 ),
        .I5(\EX_Op1[29]_i_6_n_0 ),
        .O(\m2_M1_Result_i_reg[29] [2]));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Branch_CMP_Op1[29]_i_11 
       (.I0(\EX_Branch_CMP_Op1[30]_i_8_0 [2]),
        .I1(of_predecode[3]),
        .I2(of_predecode[1]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_0 [4]),
        .I4(of_predecode[2]),
        .I5(\EX_Branch_CMP_Op1[30]_i_8_0 [3]),
        .O(\Op1_Conflict_Stall/OF_M1_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Branch_CMP_Op1[29]_i_12 
       (.I0(\EX_Branch_CMP_Op1[30]_i_7_1 [2]),
        .I1(of_predecode[3]),
        .I2(of_predecode[2]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_1 [3]),
        .I4(of_predecode[1]),
        .I5(\EX_Branch_CMP_Op1[30]_i_7_1 [4]),
        .O(\Op1_Conflict_Stall/OF_M2_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Branch_CMP_Op1[29]_i_14 
       (.I0(\EX_Branch_CMP_Op1[30]_i_7_0 [2]),
        .I1(of_predecode[3]),
        .I2(of_predecode[1]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_0 [4]),
        .I4(of_predecode[2]),
        .I5(\EX_Branch_CMP_Op1[30]_i_7_0 [3]),
        .O(\Op1_Conflict_Stall/OF_M3_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Branch_CMP_Op1[29]_i_16 
       (.I0(\EX_Branch_CMP_Op1[30]_i_8_1 [2]),
        .I1(of_predecode[3]),
        .I2(of_predecode[1]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_1 [4]),
        .I4(of_predecode[2]),
        .I5(\EX_Branch_CMP_Op1[30]_i_8_1 [3]),
        .O(\Op1_Conflict_Stall/OF_M0_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT3 #(
    .INIT(8'hAB)) 
    \EX_Branch_CMP_Op1[29]_i_2 
       (.I0(\cur_data_i_reg[6]_1 ),
        .I1(GPR_Op1[2]),
        .I2(\cur_data_i_reg[6]_0 ),
        .O(\EX_Branch_CMP_Op1[29]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hAAAABFBB)) 
    \EX_Branch_CMP_Op1[29]_i_3 
       (.I0(\EX_Branch_CMP_Op1[29]_i_4_n_0 ),
        .I1(\EX_Branch_CMP_Op1[29]_i_5_n_0 ),
        .I2(\EX_Branch_CMP_Op1[29]_i_6_n_0 ),
        .I3(\EX_Branch_CMP_Op1[29]_i_7_n_0 ),
        .I4(\EX_Branch_CMP_Op1[29]_i_8_n_0 ),
        .O(\cur_data_i_reg[6]_0 ));
  LUT6 #(
    .INIT(64'h0000000082000082)) 
    \EX_Branch_CMP_Op1[29]_i_4 
       (.I0(\Op1_Conflict_Stall/OF_EX_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(of_predecode[4]),
        .I2(ex_gpr_write_addr[1]),
        .I3(of_predecode[5]),
        .I4(ex_gpr_write_addr[0]),
        .I5(\EX_Op2[0]_i_7_5 ),
        .O(\EX_Branch_CMP_Op1[29]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF6FF6FFFFFFFF)) 
    \EX_Branch_CMP_Op1[29]_i_5 
       (.I0(\EX_Branch_CMP_Op1[30]_i_8_0 [1]),
        .I1(of_predecode[4]),
        .I2(\EX_Branch_CMP_Op1[30]_i_8_0 [0]),
        .I3(of_predecode[5]),
        .I4(\EX_Op2[0]_i_7_3 ),
        .I5(\Op1_Conflict_Stall/OF_M1_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .O(\EX_Branch_CMP_Op1[29]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000082000082)) 
    \EX_Branch_CMP_Op1[29]_i_6 
       (.I0(\Op1_Conflict_Stall/OF_M2_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(\EX_Branch_CMP_Op1[30]_i_7_1 [1]),
        .I2(of_predecode[4]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_1 [0]),
        .I4(of_predecode[5]),
        .I5(\EX_Op2[0]_i_7_2 ),
        .O(\EX_Branch_CMP_Op1[29]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000082000082)) 
    \EX_Branch_CMP_Op1[29]_i_7 
       (.I0(\Op1_Conflict_Stall/OF_M3_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(\EX_Branch_CMP_Op1[30]_i_7_0 [1]),
        .I2(of_predecode[4]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_0 [0]),
        .I4(of_predecode[5]),
        .I5(\EX_Op2[0]_i_7_1 ),
        .O(\EX_Branch_CMP_Op1[29]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000082000082)) 
    \EX_Branch_CMP_Op1[29]_i_8 
       (.I0(\Op1_Conflict_Stall/OF_M0_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(\EX_Branch_CMP_Op1[30]_i_8_1 [1]),
        .I2(of_predecode[4]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_1 [0]),
        .I4(of_predecode[5]),
        .I5(\EX_Op2[0]_i_7_4 ),
        .O(\EX_Branch_CMP_Op1[29]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Branch_CMP_Op1[29]_i_9 
       (.I0(of_predecode[2]),
        .I1(\Using_FPGA.Native [0]),
        .I2(\Using_FPGA.Native [1]),
        .I3(of_predecode[1]),
        .I4(ex_gpr_write_addr[2]),
        .I5(of_predecode[3]),
        .O(\Op1_Conflict_Stall/OF_EX_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT6 #(
    .INIT(64'hE2FFE2FF22332200)) 
    \EX_Branch_CMP_Op1[30]_i_1 
       (.I0(\EX_Branch_CMP_Op1_reg[30] ),
        .I1(\cur_data_i_reg[6]_1 ),
        .I2(wb_fwd[1]),
        .I3(of_op1_sel),
        .I4(\EX_Branch_CMP_Op1[30]_i_5_n_0 ),
        .I5(\EX_Op1[30]_i_6_n_0 ),
        .O(\m2_M1_Result_i_reg[29] [1]));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \EX_Branch_CMP_Op1[30]_i_11 
       (.I0(\EX_Branch_CMP_Op1[30]_i_7_0 [1]),
        .I1(of_predecode[4]),
        .I2(\EX_Branch_CMP_Op1[30]_i_7_0 [0]),
        .I3(of_predecode[5]),
        .O(\EX_Branch_CMP_Op1[30]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h7FF7FFFFFFFF7FF7)) 
    \EX_Branch_CMP_Op1[30]_i_12 
       (.I0(m2_gpr_write),
        .I1(\EX_Branch_CMP_Op1[30]_i_7_2 ),
        .I2(of_predecode[5]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_1 [0]),
        .I4(of_predecode[4]),
        .I5(\EX_Branch_CMP_Op1[30]_i_7_1 [1]),
        .O(\EX_Branch_CMP_Op1[30]_i_12_n_0 ));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \EX_Branch_CMP_Op1[30]_i_13 
       (.I0(\EX_Branch_CMP_Op1[30]_i_8_0 [1]),
        .I1(of_predecode[4]),
        .I2(\EX_Branch_CMP_Op1[30]_i_8_0 [0]),
        .I3(of_predecode[5]),
        .O(\EX_Branch_CMP_Op1[30]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h7FF7FFFFFFFF7FF7)) 
    \EX_Branch_CMP_Op1[30]_i_14 
       (.I0(\EX_Branch_CMP_Op1[30]_i_8_2 ),
        .I1(m0_gpr_write),
        .I2(of_predecode[5]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_1 [0]),
        .I4(of_predecode[4]),
        .I5(\EX_Branch_CMP_Op1[30]_i_8_1 [1]),
        .O(\EX_Branch_CMP_Op1[30]_i_14_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT4 #(
    .INIT(16'h0455)) 
    \EX_Branch_CMP_Op1[30]_i_3 
       (.I0(\EX_Branch_CMP_Op1[29]_i_4_n_0 ),
        .I1(\EX_Branch_CMP_Op1[30]_i_6_n_0 ),
        .I2(\EX_Branch_CMP_Op1[30]_i_7_n_0 ),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_n_0 ),
        .O(\cur_data_i_reg[6]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT4 #(
    .INIT(16'h00E0)) 
    \EX_Branch_CMP_Op1[30]_i_4 
       (.I0(\EX_Branch_CMP_Op1[30]_i_7_n_0 ),
        .I1(\EX_Branch_CMP_Op1[30]_i_6_n_0 ),
        .I2(\EX_Branch_CMP_Op1[30]_i_8_n_0 ),
        .I3(\EX_Branch_CMP_Op1[29]_i_4_n_0 ),
        .O(of_op1_sel));
  LUT6 #(
    .INIT(64'hE0EEFFFFE0EE0000)) 
    \EX_Branch_CMP_Op1[30]_i_5 
       (.I0(\EX_Branch_CMP_Op1_reg[30]_1 ),
        .I1(\EX_Branch_CMP_Op1_reg[30]_0 ),
        .I2(ex_alu_result[1]),
        .I3(\EX_Op1_reg[29]_4 ),
        .I4(\cur_data_i_reg[6]_0 ),
        .I5(GPR_Op1[1]),
        .O(\EX_Branch_CMP_Op1[30]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000009009)) 
    \EX_Branch_CMP_Op1[30]_i_6 
       (.I0(of_predecode[2]),
        .I1(\EX_Op2[0]_i_6_3 [3]),
        .I2(\EX_Op2[0]_i_6_3 [4]),
        .I3(of_predecode[1]),
        .I4(\EX_Branch_CMP_Op1[30]_i_9_n_0 ),
        .I5(\EX_Branch_CMP_Op1[30]_i_3_3 ),
        .O(\EX_Branch_CMP_Op1[30]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0800FFFF08000800)) 
    \EX_Branch_CMP_Op1[30]_i_7 
       (.I0(m3_gpr_write),
        .I1(\EX_Branch_CMP_Op1[30]_i_3_1 ),
        .I2(\EX_Branch_CMP_Op1[30]_i_11_n_0 ),
        .I3(\Op1_Conflict_Stall/OF_M3_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I4(\EX_Branch_CMP_Op1[30]_i_12_n_0 ),
        .I5(\Op1_Conflict_Stall/OF_M2_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .O(\EX_Branch_CMP_Op1[30]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFF7F0000FF7FFF7F)) 
    \EX_Branch_CMP_Op1[30]_i_8 
       (.I0(\Op1_Conflict_Stall/OF_M1_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(m1_gpr_write),
        .I2(\EX_Branch_CMP_Op1[30]_i_3_2 ),
        .I3(\EX_Branch_CMP_Op1[30]_i_13_n_0 ),
        .I4(\EX_Branch_CMP_Op1[30]_i_14_n_0 ),
        .I5(\Op1_Conflict_Stall/OF_M0_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .O(\EX_Branch_CMP_Op1[30]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \EX_Branch_CMP_Op1[30]_i_9 
       (.I0(\EX_Op2[0]_i_6_3 [0]),
        .I1(of_predecode[5]),
        .I2(of_predecode[4]),
        .I3(\EX_Op2[0]_i_6_3 [1]),
        .I4(of_predecode[3]),
        .I5(\EX_Op2[0]_i_6_3 [2]),
        .O(\EX_Branch_CMP_Op1[30]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF55551011)) 
    \EX_Branch_CMP_Op1[31]_i_1 
       (.I0(\EX_Op1[31]_i_3_n_0 ),
        .I1(\EX_Branch_CMP_Op1[31]_i_2_n_0 ),
        .I2(\EX_Branch_CMP_Op1_reg[29] [0]),
        .I3(\cur_data_i_reg[6]_0 ),
        .I4(\EX_Op1[31]_i_5_n_0 ),
        .I5(\EX_Op1_reg[31]_0 ),
        .O(\m2_M1_Result_i_reg[29] [0]));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT3 #(
    .INIT(8'hAB)) 
    \EX_Branch_CMP_Op1[31]_i_2 
       (.I0(\cur_data_i_reg[6]_1 ),
        .I1(GPR_Op1[0]),
        .I2(\cur_data_i_reg[6]_0 ),
        .O(\EX_Branch_CMP_Op1[31]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8BBB8BBB8BBB8B8)) 
    \EX_Op1[29]_i_1 
       (.I0(\EX_Op1_reg[29] ),
        .I1(of_op1_sel_spr),
        .I2(\EX_Op1_reg[29]_0 ),
        .I3(\EX_Op1[29]_i_4_n_0 ),
        .I4(\EX_Op1[29]_i_5_n_0 ),
        .I5(\EX_Op1[29]_i_6_n_0 ),
        .O(\cur_data_i_reg[2]_0 [2]));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    \EX_Op1[29]_i_4 
       (.I0(\EX_Branch_CMP_Op1[30]_i_3_0 ),
        .I1(wb_fwd[2]),
        .I2(of_op1_sel),
        .O(\EX_Op1[29]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FF55FDFD)) 
    \EX_Op1[29]_i_5 
       (.I0(\cur_data_i_reg[6]_0 ),
        .I1(\EX_Op1_reg[29]_1 ),
        .I2(\EX_Op1_reg[29]_2 ),
        .I3(\EX_Op1_reg[29]_3 ),
        .I4(\EX_Op1_reg[29]_4 ),
        .I5(\EX_Branch_CMP_Op1[29]_i_2_n_0 ),
        .O(\EX_Op1[29]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hBABFAAAA)) 
    \EX_Op1[29]_i_6 
       (.I0(\EX_Branch_CMP_Op1[29]_i_3_0 ),
        .I1(\EX_Branch_CMP_Op1_reg[29]_0 ),
        .I2(\cur_data_i_reg[6]_0 ),
        .I3(\EX_Branch_CMP_Op1_reg[29]_1 ),
        .I4(\cur_data_i_reg[6]_1 ),
        .O(\EX_Op1[29]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hB8BBB8BBB8BBB8B8)) 
    \EX_Op1[30]_i_1 
       (.I0(\EX_Op1_reg[30]_0 ),
        .I1(of_op1_sel_spr),
        .I2(\EX_Op1_reg[30]_1 ),
        .I3(\EX_Op1[30]_i_4_n_0 ),
        .I4(\EX_Op1[30]_i_5_n_0 ),
        .I5(\EX_Op1[30]_i_6_n_0 ),
        .O(\cur_data_i_reg[2]_0 [1]));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    \EX_Op1[30]_i_4 
       (.I0(\EX_Branch_CMP_Op1[30]_i_3_0 ),
        .I1(wb_fwd[1]),
        .I2(of_op1_sel),
        .O(\EX_Op1[30]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h000000002E2E2E22)) 
    \EX_Op1[30]_i_5 
       (.I0(GPR_Op1[1]),
        .I1(\cur_data_i_reg[6]_0 ),
        .I2(\EX_Op1_reg[30] ),
        .I3(\EX_Branch_CMP_Op1_reg[30]_0 ),
        .I4(\EX_Branch_CMP_Op1_reg[30]_1 ),
        .I5(\cur_data_i_reg[6]_1 ),
        .O(\EX_Op1[30]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hBABFAAAA)) 
    \EX_Op1[30]_i_6 
       (.I0(\EX_Branch_CMP_Op1[29]_i_3_0 ),
        .I1(\EX_Branch_CMP_Op1_reg[30]_2 ),
        .I2(\cur_data_i_reg[6]_0 ),
        .I3(\EX_Branch_CMP_Op1_reg[30]_3 ),
        .I4(\cur_data_i_reg[6]_1 ),
        .O(\EX_Op1[30]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBB8B8B8B88)) 
    \EX_Op1[31]_i_1 
       (.I0(\EX_Op1_reg[31] ),
        .I1(of_op1_sel_spr),
        .I2(\EX_Op1[31]_i_3_n_0 ),
        .I3(\EX_Op1[31]_i_4_n_0 ),
        .I4(\EX_Op1[31]_i_5_n_0 ),
        .I5(\EX_Op1_reg[31]_0 ),
        .O(\cur_data_i_reg[2]_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    \EX_Op1[31]_i_3 
       (.I0(\EX_Branch_CMP_Op1[30]_i_3_0 ),
        .I1(wb_fwd[0]),
        .I2(of_op1_sel),
        .O(\EX_Op1[31]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00000000D5DFD5D5)) 
    \EX_Op1[31]_i_4 
       (.I0(\cur_data_i_reg[6]_0 ),
        .I1(ex_alu_result[0]),
        .I2(\EX_Op1_reg[29]_4 ),
        .I3(\EX_Op1_reg[31]_1 ),
        .I4(\EX_Op2_reg[31]_3 ),
        .I5(\EX_Branch_CMP_Op1[31]_i_2_n_0 ),
        .O(\EX_Op1[31]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hBABFAAAA)) 
    \EX_Op1[31]_i_5 
       (.I0(\EX_Branch_CMP_Op1[29]_i_3_0 ),
        .I1(\EX_Op2_reg[31]_1 ),
        .I2(\cur_data_i_reg[6]_0 ),
        .I3(\EX_Op2_reg[31]_0 ),
        .I4(\cur_data_i_reg[6]_1 ),
        .O(\EX_Op1[31]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF6FF6FFFFFFFF)) 
    \EX_Op2[0]_i_11 
       (.I0(Q[0]),
        .I1(ex_gpr_write_addr[1]),
        .I2(of_predecode[10]),
        .I3(ex_gpr_write_addr[0]),
        .I4(\EX_Op2[0]_i_7_5 ),
        .I5(\Op2_Conflict_Stall/OF_EX_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .O(\EX_Op2[0]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hEFFEFFFFEFFEEFFE)) 
    \EX_Op2[0]_i_12 
       (.I0(\EX_Op2[0]_i_20_n_0 ),
        .I1(\EX_Op2[0]_i_21_n_0 ),
        .I2(of_predecode[10]),
        .I3(\EX_Op2[0]_i_6_3 [0]),
        .I4(\EX_Op2[0]_i_6_3 [4]),
        .I5(of_predecode[6]),
        .O(\EX_Op2[0]_i_12_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \EX_Op2[0]_i_13 
       (.I0(\EX_Op2[0]_i_18_n_0 ),
        .I1(\EX_Op2[0]_i_17_n_0 ),
        .O(\EX_Op2[0]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h0000000082000082)) 
    \EX_Op2[0]_i_15 
       (.I0(\Op2_Conflict_Stall/OF_M0_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(\EX_Branch_CMP_Op1[30]_i_8_1 [1]),
        .I2(Q[0]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_1 [0]),
        .I4(of_predecode[10]),
        .I5(\EX_Op2[0]_i_7_4 ),
        .O(\EX_Op2[0]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h0000000082000082)) 
    \EX_Op2[0]_i_16 
       (.I0(\Op2_Conflict_Stall/OF_M1_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(\EX_Branch_CMP_Op1[30]_i_8_0 [1]),
        .I2(Q[0]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_0 [0]),
        .I4(of_predecode[10]),
        .I5(\EX_Op2[0]_i_7_3 ),
        .O(\EX_Op2[0]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'h0000000082000082)) 
    \EX_Op2[0]_i_17 
       (.I0(\Op2_Conflict_Stall/OF_M2_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(\EX_Branch_CMP_Op1[30]_i_7_1 [1]),
        .I2(Q[0]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_1 [0]),
        .I4(of_predecode[10]),
        .I5(\EX_Op2[0]_i_7_2 ),
        .O(\EX_Op2[0]_i_17_n_0 ));
  LUT6 #(
    .INIT(64'h0000000082000082)) 
    \EX_Op2[0]_i_18 
       (.I0(\Op2_Conflict_Stall/OF_M3_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ),
        .I1(\EX_Branch_CMP_Op1[30]_i_7_0 [1]),
        .I2(Q[0]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_0 [0]),
        .I4(of_predecode[10]),
        .I5(\EX_Op2[0]_i_7_1 ),
        .O(\EX_Op2[0]_i_18_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op2[0]_i_19 
       (.I0(of_predecode[7]),
        .I1(\Using_FPGA.Native [0]),
        .I2(\Using_FPGA.Native [1]),
        .I3(of_predecode[6]),
        .I4(ex_gpr_write_addr[2]),
        .I5(of_predecode[8]),
        .O(\Op2_Conflict_Stall/OF_EX_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT2 #(
    .INIT(4'h2)) 
    \EX_Op2[0]_i_2 
       (.I0(\cur_data_i_reg[26] ),
        .I1(\cur_data_i_reg[0]_0 ),
        .O(\EX_Op2[0]_i_6_0 ));
  LUT5 #(
    .INIT(32'hFFFF22F2)) 
    \EX_Op2[0]_i_20 
       (.I0(\EX_Op2[0]_i_6_3 [2]),
        .I1(of_predecode[8]),
        .I2(of_predecode[7]),
        .I3(\EX_Op2[0]_i_6_3 [3]),
        .I4(\EX_Op2[0]_i_12_0 ),
        .O(\EX_Op2[0]_i_20_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF22F2)) 
    \EX_Op2[0]_i_21 
       (.I0(Q[0]),
        .I1(\EX_Op2[0]_i_6_3 [1]),
        .I2(\EX_Op2[0]_i_6_3 [3]),
        .I3(of_predecode[7]),
        .I4(\EX_Op2[0]_i_27_n_0 ),
        .O(\EX_Op2[0]_i_21_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op2[0]_i_22 
       (.I0(\EX_Branch_CMP_Op1[30]_i_8_1 [2]),
        .I1(of_predecode[8]),
        .I2(of_predecode[6]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_1 [4]),
        .I4(of_predecode[7]),
        .I5(\EX_Branch_CMP_Op1[30]_i_8_1 [3]),
        .O(\Op2_Conflict_Stall/OF_M0_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op2[0]_i_23 
       (.I0(\EX_Branch_CMP_Op1[30]_i_8_0 [2]),
        .I1(of_predecode[8]),
        .I2(of_predecode[7]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_0 [3]),
        .I4(of_predecode[6]),
        .I5(\EX_Branch_CMP_Op1[30]_i_8_0 [4]),
        .O(\Op2_Conflict_Stall/OF_M1_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op2[0]_i_24 
       (.I0(\EX_Branch_CMP_Op1[30]_i_7_1 [2]),
        .I1(of_predecode[8]),
        .I2(of_predecode[6]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_1 [4]),
        .I4(of_predecode[7]),
        .I5(\EX_Branch_CMP_Op1[30]_i_7_1 [3]),
        .O(\Op2_Conflict_Stall/OF_M2_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \EX_Op2[0]_i_25 
       (.I0(\EX_Branch_CMP_Op1[30]_i_7_0 [2]),
        .I1(of_predecode[8]),
        .I2(of_predecode[7]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_0 [3]),
        .I4(of_predecode[6]),
        .I5(\EX_Branch_CMP_Op1[30]_i_7_0 [4]),
        .O(\Op2_Conflict_Stall/OF_M3_Cmp/comparator_i1/Comp_Carry_Chain[1].carry_sel_reg ));
  LUT4 #(
    .INIT(16'h4F44)) 
    \EX_Op2[0]_i_27 
       (.I0(of_predecode[6]),
        .I1(\EX_Op2[0]_i_6_3 [4]),
        .I2(\EX_Op2[0]_i_6_3 [2]),
        .I3(of_predecode[8]),
        .O(\EX_Op2[0]_i_27_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    \EX_Op2[0]_i_3 
       (.I0(\cur_data_i_reg[26] ),
        .I1(\cur_data_i_reg[0]_0 ),
        .I2(\cur_data_i_reg[1]_0 ),
        .O(\EX_Op2[0]_i_7_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[0]_i_4 
       (.I0(\EX_Op2_reg[0] ),
        .I1(\EX_Op2_reg[0]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[0]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[0]_2 ),
        .O(\m1_M0_Result_i_reg[0] ));
  LUT6 #(
    .INIT(64'h0200020000000200)) 
    \EX_Op2[0]_i_5 
       (.I0(\EX_Op2[0]_i_9_n_0 ),
        .I1(\EX_Op2[0]_i_6_2 ),
        .I2(\EX_Op2[0]_i_6_1 ),
        .I3(\EX_Op2[0]_i_11_n_0 ),
        .I4(\EX_Op2[0]_i_12_n_0 ),
        .I5(\EX_Op2[0]_i_13_n_0 ),
        .O(\cur_data_i_reg[26] ));
  LUT6 #(
    .INIT(64'h5555555555555700)) 
    \EX_Op2[0]_i_6 
       (.I0(\EX_Op2[0]_i_9_n_0 ),
        .I1(\EX_Op2[0]_i_12_n_0 ),
        .I2(\EX_Op2[0]_i_13_n_0 ),
        .I3(\EX_Op2[0]_i_11_n_0 ),
        .I4(\EX_Op2[0]_i_6_1 ),
        .I5(\EX_Op2[0]_i_6_2 ),
        .O(\cur_data_i_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h1311131313111311)) 
    \EX_Op2[0]_i_7 
       (.I0(\EX_Op2[0]_i_11_n_0 ),
        .I1(\EX_Op2[16]_i_3 ),
        .I2(\EX_Op2[0]_i_15_n_0 ),
        .I3(\EX_Op2[0]_i_16_n_0 ),
        .I4(\EX_Op2[0]_i_17_n_0 ),
        .I5(\EX_Op2[0]_i_18_n_0 ),
        .O(\cur_data_i_reg[1]_0 ));
  LUT4 #(
    .INIT(16'hFCFD)) 
    \EX_Op2[0]_i_9 
       (.I0(\EX_Op2[0]_i_16_n_0 ),
        .I1(\EX_Op2[0]_i_6_1 ),
        .I2(\EX_Op2[0]_i_6_2 ),
        .I3(\EX_Op2[0]_i_15_n_0 ),
        .O(\EX_Op2[0]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[10]_i_2 
       (.I0(\EX_Op2_reg[10] ),
        .I1(\EX_Op2_reg[10]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[10]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[10]_2 ),
        .O(\m1_M0_Result_i_reg[10] ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[11]_i_2 
       (.I0(\EX_Op2_reg[11] ),
        .I1(\EX_Op2_reg[11]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[11]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[11]_2 ),
        .O(\m1_M0_Result_i_reg[11] ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[12]_i_2 
       (.I0(\EX_Op2_reg[12] ),
        .I1(\EX_Op2_reg[12]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[12]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[12]_2 ),
        .O(\m1_M0_Result_i_reg[12] ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[13]_i_2 
       (.I0(\EX_Op2_reg[13] ),
        .I1(\EX_Op2_reg[13]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[13]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[13]_2 ),
        .O(\m1_M0_Result_i_reg[13] ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[14]_i_2 
       (.I0(\EX_Op2_reg[14] ),
        .I1(\EX_Op2_reg[14]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[14]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[14]_2 ),
        .O(\m1_M0_Result_i_reg[14] ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[15]_i_2 
       (.I0(\EX_Op2_reg[15] ),
        .I1(\EX_Op2_reg[15]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[15]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[15]_2 ),
        .O(\m1_M0_Result_i_reg[15] ));
  LUT6 #(
    .INIT(64'hBFBB8F8BB0B88088)) 
    \EX_Op2[16]_i_2 
       (.I0(wb_fwd[8]),
        .I1(\cur_data_i_reg[26] ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\cur_data_i_reg[1]_0 ),
        .I4(\EX_Op2_reg[16] ),
        .I5(\EX_Op2_reg[16]_0 ),
        .O(\WB_Exception_Return_Addr_reg[16] ));
  LUT6 #(
    .INIT(64'hBFBB8F8BB0B88088)) 
    \EX_Op2[17]_i_2 
       (.I0(wb_fwd[7]),
        .I1(\cur_data_i_reg[26] ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\cur_data_i_reg[1]_0 ),
        .I4(\EX_Op2_reg[17] ),
        .I5(\EX_Op2_reg[17]_0 ),
        .O(\WB_Exception_Return_Addr_reg[17] ));
  LUT6 #(
    .INIT(64'hBFBB8F8BB0B88088)) 
    \EX_Op2[18]_i_2 
       (.I0(wb_fwd[6]),
        .I1(\cur_data_i_reg[26] ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\cur_data_i_reg[1]_0 ),
        .I4(\EX_Op2_reg[18] ),
        .I5(\EX_Op2_reg[18]_0 ),
        .O(\WB_Exception_Return_Addr_reg[18] ));
  LUT6 #(
    .INIT(64'h553355330F000FFF)) 
    \EX_Op2[1]_i_2 
       (.I0(\EX_Op2_reg[1] ),
        .I1(\EX_Op2_reg[1]_0 ),
        .I2(\EX_Op2_reg[1]_1 ),
        .I3(\cur_data_i_reg[1]_0 ),
        .I4(\EX_Op2_reg[1]_2 ),
        .I5(\cur_data_i_reg[0]_0 ),
        .O(\m1_M0_Result_i_reg[1] ));
  LUT6 #(
    .INIT(64'hBFBB8F8BB0B88088)) 
    \EX_Op2[20]_i_2 
       (.I0(wb_fwd[5]),
        .I1(\cur_data_i_reg[26] ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\cur_data_i_reg[1]_0 ),
        .I4(\EX_Op2_reg[20] ),
        .I5(\EX_Op2_reg[20]_0 ),
        .O(\WB_Exception_Return_Addr_reg[20] ));
  LUT6 #(
    .INIT(64'hBFBB8F8BB0B88088)) 
    \EX_Op2[21]_i_2 
       (.I0(wb_fwd[4]),
        .I1(\cur_data_i_reg[26] ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\cur_data_i_reg[1]_0 ),
        .I4(\EX_Op2_reg[21] ),
        .I5(\EX_Op2_reg[21]_0 ),
        .O(\WB_Exception_Return_Addr_reg[21] ));
  LUT6 #(
    .INIT(64'hBFBB8F8BB0B88088)) 
    \EX_Op2[25]_i_2 
       (.I0(wb_fwd[3]),
        .I1(\cur_data_i_reg[26] ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\cur_data_i_reg[1]_0 ),
        .I4(\EX_Op2_reg[25] ),
        .I5(\EX_Op2_reg[25]_0 ),
        .O(\WB_Exception_Return_Addr_reg[25] ));
  LUT6 #(
    .INIT(64'h88B8BBBB88B88888)) 
    \EX_Op2[29]_i_2 
       (.I0(\EX_Op2_reg[29] ),
        .I1(\cur_data_i_reg[0]_0 ),
        .I2(\EX_Op2_reg[29]_0 ),
        .I3(\EX_Op2_reg[29]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[29]_2 ),
        .O(M1_Sel_Mul_Res_reg));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[2]_i_2 
       (.I0(\EX_Op2_reg[2] ),
        .I1(\EX_Op2_reg[2]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[2]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[2]_2 ),
        .O(\m1_M0_Result_i_reg[2] ));
  LUT6 #(
    .INIT(64'h88B8BBBB88B88888)) 
    \EX_Op2[30]_i_2 
       (.I0(\EX_Op2_reg[30] ),
        .I1(\cur_data_i_reg[0]_0 ),
        .I2(\EX_Op2_reg[30]_0 ),
        .I3(\EX_Op1_reg[30] ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[30]_1 ),
        .O(M1_Sel_Mul_Res_reg_0));
  LUT6 #(
    .INIT(64'hB8BBB8BBB8BBB888)) 
    \EX_Op2[31]_i_1 
       (.I0(\EX_Op2_reg[31] ),
        .I1(\EX_Op2[0]_i_6_0 ),
        .I2(wb_fwd[0]),
        .I3(\EX_Op2[0]_i_7_0 ),
        .I4(\EX_Op2[31]_i_3_n_0 ),
        .I5(\EX_Op2[31]_i_4_n_0 ),
        .O(m2_m1_sel_res_reg));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \EX_Op2[31]_i_3 
       (.I0(\cur_data_i_reg[0]_0 ),
        .I1(\EX_Op2_reg[31]_0 ),
        .I2(\cur_data_i_reg[1]_0 ),
        .I3(\EX_Op2_reg[31]_1 ),
        .O(\EX_Op2[31]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h00000000EEEE22E2)) 
    \EX_Op2[31]_i_4 
       (.I0(\EX_Op2_reg[31]_2 ),
        .I1(\cur_data_i_reg[1]_0 ),
        .I2(\EX_Op2_reg[31]_3 ),
        .I3(\EX_Op2_reg[31]_4 ),
        .I4(\EX_Op2_reg[31]_5 ),
        .I5(\cur_data_i_reg[0]_0 ),
        .O(\EX_Op2[31]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[3]_i_2 
       (.I0(\EX_Op2_reg[3] ),
        .I1(\EX_Op2_reg[3]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[3]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[3]_2 ),
        .O(\m1_M0_Result_i_reg[3] ));
  LUT6 #(
    .INIT(64'h553355330F000FFF)) 
    \EX_Op2[4]_i_2 
       (.I0(\EX_Op2_reg[4] ),
        .I1(\EX_Op2_reg[4]_0 ),
        .I2(\EX_Op2_reg[4]_1 ),
        .I3(\cur_data_i_reg[1]_0 ),
        .I4(\EX_Op2_reg[4]_2 ),
        .I5(\cur_data_i_reg[0]_0 ),
        .O(\m1_M0_Result_i_reg[4] ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[5]_i_2 
       (.I0(\EX_Op2_reg[5] ),
        .I1(\EX_Op2_reg[5]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[5]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[5]_2 ),
        .O(\m1_M0_Result_i_reg[5] ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[6]_i_2 
       (.I0(\EX_Op2_reg[6] ),
        .I1(\EX_Op2_reg[6]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[6]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[6]_2 ),
        .O(\m1_M0_Result_i_reg[6] ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[7]_i_2 
       (.I0(\EX_Op2_reg[7] ),
        .I1(\EX_Op2_reg[7]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[7]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[7]_2 ),
        .O(\m1_M0_Result_i_reg[7] ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[8]_i_2 
       (.I0(\EX_Op2_reg[8] ),
        .I1(\EX_Op2_reg[8]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[8]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[8]_2 ),
        .O(\m1_M0_Result_i_reg[8] ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \EX_Op2[9]_i_2 
       (.I0(\EX_Op2_reg[9] ),
        .I1(\EX_Op2_reg[9]_0 ),
        .I2(\cur_data_i_reg[0]_0 ),
        .I3(\EX_Op2_reg[9]_1 ),
        .I4(\cur_data_i_reg[1]_0 ),
        .I5(\EX_Op2_reg[9]_2 ),
        .O(\m1_M0_Result_i_reg[9] ));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__42 
       (.I0(ex_gpr_write_addr[0]),
        .I1(of_predecode[5]),
        .I2(ex_gpr_write_addr[1]),
        .I3(of_predecode[4]),
        .O(S_0));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__43 
       (.I0(of_predecode[5]),
        .I1(\EX_Branch_CMP_Op1[30]_i_8_1 [0]),
        .I2(of_predecode[4]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_1 [1]),
        .O(S_1));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__44 
       (.I0(of_predecode[5]),
        .I1(\EX_Branch_CMP_Op1[30]_i_8_0 [0]),
        .I2(of_predecode[4]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_0 [1]),
        .O(S_2));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__45 
       (.I0(of_predecode[5]),
        .I1(\EX_Branch_CMP_Op1[30]_i_7_1 [0]),
        .I2(of_predecode[4]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_1 [1]),
        .O(S_3));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__46 
       (.I0(of_predecode[5]),
        .I1(\EX_Branch_CMP_Op1[30]_i_7_0 [0]),
        .I2(of_predecode[4]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_0 [1]),
        .O(S_4));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__47 
       (.I0(ex_gpr_write_addr[0]),
        .I1(of_predecode[10]),
        .I2(ex_gpr_write_addr[1]),
        .I3(Q[0]),
        .O(S_5));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__48 
       (.I0(of_predecode[10]),
        .I1(\EX_Branch_CMP_Op1[30]_i_8_1 [0]),
        .I2(Q[0]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_1 [1]),
        .O(S_6));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__49 
       (.I0(of_predecode[10]),
        .I1(\EX_Branch_CMP_Op1[30]_i_8_0 [0]),
        .I2(Q[0]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_0 [1]),
        .O(S_7));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__50 
       (.I0(of_predecode[10]),
        .I1(\EX_Branch_CMP_Op1[30]_i_7_1 [0]),
        .I2(Q[0]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_1 [1]),
        .O(S_8));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.Native_i_1__51 
       (.I0(of_predecode[10]),
        .I1(\EX_Branch_CMP_Op1[30]_i_7_0 [0]),
        .I2(Q[0]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_0 [1]),
        .O(S_9));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__64 
       (.I0(of_predecode[2]),
        .I1(\Using_FPGA.Native [0]),
        .I2(\Using_FPGA.Native [1]),
        .I3(of_predecode[1]),
        .I4(ex_gpr_write_addr[2]),
        .I5(of_predecode[3]),
        .O(\cur_data_i_reg[8]_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__66 
       (.I0(\EX_Branch_CMP_Op1[30]_i_8_1 [2]),
        .I1(of_predecode[3]),
        .I2(of_predecode[1]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_1 [4]),
        .I4(of_predecode[2]),
        .I5(\EX_Branch_CMP_Op1[30]_i_8_1 [3]),
        .O(\m0_gpr_write_addr_reg[2] ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__68 
       (.I0(\EX_Branch_CMP_Op1[30]_i_8_0 [2]),
        .I1(of_predecode[3]),
        .I2(of_predecode[1]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_0 [4]),
        .I4(of_predecode[2]),
        .I5(\EX_Branch_CMP_Op1[30]_i_8_0 [3]),
        .O(\m1_gpr_write_addr_reg[2] ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__70 
       (.I0(\EX_Branch_CMP_Op1[30]_i_7_1 [2]),
        .I1(of_predecode[3]),
        .I2(of_predecode[2]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_1 [3]),
        .I4(of_predecode[1]),
        .I5(\EX_Branch_CMP_Op1[30]_i_7_1 [4]),
        .O(\m2_gpr_write_addr_reg[2] ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__72 
       (.I0(\EX_Branch_CMP_Op1[30]_i_7_0 [2]),
        .I1(of_predecode[3]),
        .I2(of_predecode[1]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_0 [4]),
        .I4(of_predecode[2]),
        .I5(\EX_Branch_CMP_Op1[30]_i_7_0 [3]),
        .O(\m3_gpr_write_addr_reg[2] ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__74 
       (.I0(of_predecode[7]),
        .I1(\Using_FPGA.Native [0]),
        .I2(\Using_FPGA.Native [1]),
        .I3(of_predecode[6]),
        .I4(ex_gpr_write_addr[2]),
        .I5(of_predecode[8]),
        .O(\cur_data_i_reg[3]_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__76 
       (.I0(\EX_Branch_CMP_Op1[30]_i_8_1 [2]),
        .I1(of_predecode[8]),
        .I2(of_predecode[6]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_1 [4]),
        .I4(of_predecode[7]),
        .I5(\EX_Branch_CMP_Op1[30]_i_8_1 [3]),
        .O(\m0_gpr_write_addr_reg[2]_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__78 
       (.I0(\EX_Branch_CMP_Op1[30]_i_8_0 [2]),
        .I1(of_predecode[8]),
        .I2(of_predecode[7]),
        .I3(\EX_Branch_CMP_Op1[30]_i_8_0 [3]),
        .I4(of_predecode[6]),
        .I5(\EX_Branch_CMP_Op1[30]_i_8_0 [4]),
        .O(\m1_gpr_write_addr_reg[2]_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__80 
       (.I0(\EX_Branch_CMP_Op1[30]_i_7_1 [2]),
        .I1(of_predecode[8]),
        .I2(of_predecode[6]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_1 [4]),
        .I4(of_predecode[7]),
        .I5(\EX_Branch_CMP_Op1[30]_i_7_1 [3]),
        .O(\m2_gpr_write_addr_reg[2]_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.Native_i_1__82 
       (.I0(\EX_Branch_CMP_Op1[30]_i_7_0 [2]),
        .I1(of_predecode[8]),
        .I2(of_predecode[7]),
        .I3(\EX_Branch_CMP_Op1[30]_i_7_0 [3]),
        .I4(of_predecode[6]),
        .I5(\EX_Branch_CMP_Op1[30]_i_7_0 [4]),
        .O(\m3_gpr_write_addr_reg[2]_0 ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[0]_i_1 
       (.I0(\cur_data_i_reg[10]_0 ),
        .I1(\data_buffer_reg[3][0]_srl4_n_0 ),
        .I2(\cur_data_i_reg[0]_1 ),
        .I3(in[0]),
        .I4(\cur_data_i_reg[10]_1 ),
        .I5(of_predecode[10]),
        .O(\cur_data_i[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[10]_i_1 
       (.I0(\cur_data_i_reg[10]_0 ),
        .I1(p_2_in61_in),
        .I2(\cur_data_i_reg[0]_1 ),
        .I3(in[10]),
        .I4(\cur_data_i_reg[10]_1 ),
        .I5(Q[1]),
        .O(\cur_data_i[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[1]_i_1 
       (.I0(\cur_data_i_reg[10]_0 ),
        .I1(p_2_in7_in),
        .I2(\cur_data_i_reg[0]_1 ),
        .I3(in[1]),
        .I4(\cur_data_i_reg[10]_1 ),
        .I5(Q[0]),
        .O(\cur_data_i[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[2]_i_1 
       (.I0(\cur_data_i_reg[10]_0 ),
        .I1(p_2_in13_in),
        .I2(\cur_data_i_reg[0]_1 ),
        .I3(in[2]),
        .I4(\cur_data_i_reg[10]_1 ),
        .I5(of_predecode[8]),
        .O(\cur_data_i[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[3]_i_1 
       (.I0(\cur_data_i_reg[10]_0 ),
        .I1(p_2_in19_in),
        .I2(\cur_data_i_reg[0]_1 ),
        .I3(in[3]),
        .I4(\cur_data_i_reg[10]_1 ),
        .I5(of_predecode[7]),
        .O(\cur_data_i[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[4]_i_1 
       (.I0(\cur_data_i_reg[10]_0 ),
        .I1(p_2_in25_in),
        .I2(\cur_data_i_reg[0]_1 ),
        .I3(in[4]),
        .I4(\cur_data_i_reg[10]_1 ),
        .I5(of_predecode[6]),
        .O(\cur_data_i[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[5]_i_1 
       (.I0(\cur_data_i_reg[10]_0 ),
        .I1(p_2_in31_in),
        .I2(\cur_data_i_reg[0]_1 ),
        .I3(in[5]),
        .I4(\cur_data_i_reg[10]_1 ),
        .I5(of_predecode[5]),
        .O(\cur_data_i[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[6]_i_1 
       (.I0(\cur_data_i_reg[10]_0 ),
        .I1(p_2_in37_in),
        .I2(\cur_data_i_reg[0]_1 ),
        .I3(in[6]),
        .I4(\cur_data_i_reg[10]_1 ),
        .I5(of_predecode[4]),
        .O(\cur_data_i[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[7]_i_1 
       (.I0(\cur_data_i_reg[10]_0 ),
        .I1(p_2_in43_in),
        .I2(\cur_data_i_reg[0]_1 ),
        .I3(in[7]),
        .I4(\cur_data_i_reg[10]_1 ),
        .I5(of_predecode[3]),
        .O(\cur_data_i[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[8]_i_1 
       (.I0(\cur_data_i_reg[10]_0 ),
        .I1(p_2_in49_in),
        .I2(\cur_data_i_reg[0]_1 ),
        .I3(in[8]),
        .I4(\cur_data_i_reg[10]_1 ),
        .I5(of_predecode[2]),
        .O(\cur_data_i[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[9]_i_1 
       (.I0(\cur_data_i_reg[10]_0 ),
        .I1(p_2_in55_in),
        .I2(\cur_data_i_reg[0]_1 ),
        .I3(in[9]),
        .I4(\cur_data_i_reg[10]_1 ),
        .I5(of_predecode[1]),
        .O(\cur_data_i[9]_i_1_n_0 ));
  FDRE \cur_data_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cur_data_i[0]_i_1_n_0 ),
        .Q(of_predecode[10]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cur_data_i[10]_i_1_n_0 ),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cur_data_i[1]_i_1_n_0 ),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cur_data_i[2]_i_1_n_0 ),
        .Q(of_predecode[8]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cur_data_i[3]_i_1_n_0 ),
        .Q(of_predecode[7]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cur_data_i[4]_i_1_n_0 ),
        .Q(of_predecode[6]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cur_data_i[5]_i_1_n_0 ),
        .Q(of_predecode[5]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cur_data_i[6]_i_1_n_0 ),
        .Q(of_predecode[4]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cur_data_i[7]_i_1_n_0 ),
        .Q(of_predecode[3]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cur_data_i[8]_i_1_n_0 ),
        .Q(of_predecode[2]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(\cur_data_i[9]_i_1_n_0 ),
        .Q(of_predecode[1]),
        .R(sync_reset));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3][0]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][0]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(in[0]),
        .Q(\data_buffer_reg[3][0]_srl4_n_0 ));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3][10]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][10]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(in[10]),
        .Q(p_2_in61_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3][1]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][1]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(in[1]),
        .Q(p_2_in7_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3][2]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][2]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(in[2]),
        .Q(p_2_in13_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3][3]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][3]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(in[3]),
        .Q(p_2_in19_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3][4]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][4]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(in[4]),
        .Q(p_2_in25_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3][5]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][5]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(in[5]),
        .Q(p_2_in31_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3][6]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][6]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(in[6]),
        .Q(p_2_in37_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3][7]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][7]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(in[7]),
        .Q(p_2_in43_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3][8]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][8]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(in[8]),
        .Q(p_2_in49_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PREFETCH_BUFFER_I1/PREDECODE_BUFFER_I1/data_buffer_reg[3][9]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][9]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(in[9]),
        .Q(p_2_in55_in));
endmodule

(* ORIG_REF_NAME = "OneHot_Buffer" *) 
module microblaze_microblaze_0_0_OneHot_Buffer__parameterized3
   (\cur_data_i_reg[31]_0 ,
    \cur_data_i_reg[2]_0 ,
    \cur_data_i_reg[1]_0 ,
    if4_sel_input,
    \cur_data_i_reg[31]_1 ,
    \cur_data_i_reg[31]_2 ,
    \cur_data_i_reg[30]_0 ,
    of_op1_sel_spr_pc,
    \EX_Op1_reg[29] ,
    \EX_Op1_reg[30] ,
    \EX_Op1_reg[30]_0 ,
    ex_set_msr_ie_instr,
    if4_push_instr_fetch,
    addr,
    Clk,
    sync_reset);
  output [31:0]\cur_data_i_reg[31]_0 ;
  output \cur_data_i_reg[2]_0 ;
  output \cur_data_i_reg[1]_0 ;
  input [0:0]if4_sel_input;
  input \cur_data_i_reg[31]_1 ;
  input [31:0]\cur_data_i_reg[31]_2 ;
  input \cur_data_i_reg[30]_0 ;
  input of_op1_sel_spr_pc;
  input \EX_Op1_reg[29] ;
  input [0:0]\EX_Op1_reg[30] ;
  input \EX_Op1_reg[30]_0 ;
  input ex_set_msr_ie_instr;
  input if4_push_instr_fetch;
  input [0:1]addr;
  input Clk;
  input sync_reset;

  wire Clk;
  wire \Data_Mux[0].new_data_cmb_reg ;
  wire \Data_Mux[10].new_data_cmb_reg ;
  wire \Data_Mux[11].new_data_cmb_reg ;
  wire \Data_Mux[12].new_data_cmb_reg ;
  wire \Data_Mux[13].new_data_cmb_reg ;
  wire \Data_Mux[14].new_data_cmb_reg ;
  wire \Data_Mux[1].new_data_cmb_reg ;
  wire \Data_Mux[2].new_data_cmb_reg ;
  wire \Data_Mux[3].new_data_cmb_reg ;
  wire \Data_Mux[4].new_data_cmb_reg ;
  wire \Data_Mux[5].new_data_cmb_reg ;
  wire \Data_Mux[6].new_data_cmb_reg ;
  wire \Data_Mux[7].new_data_cmb_reg ;
  wire \Data_Mux[8].new_data_cmb_reg ;
  wire \Data_Mux[9].new_data_cmb_reg ;
  wire \EX_Op1_reg[29] ;
  wire [0:0]\EX_Op1_reg[30] ;
  wire \EX_Op1_reg[30]_0 ;
  wire [0:1]addr;
  wire \cur_data_i_reg[1]_0 ;
  wire \cur_data_i_reg[2]_0 ;
  wire \cur_data_i_reg[30]_0 ;
  wire [31:0]\cur_data_i_reg[31]_0 ;
  wire \cur_data_i_reg[31]_1 ;
  wire [31:0]\cur_data_i_reg[31]_2 ;
  wire \data_buffer_reg[3][0]_srl4_n_0 ;
  wire ex_set_msr_ie_instr;
  wire if4_push_instr_fetch;
  wire [0:0]if4_sel_input;
  wire [31:15]new_data_cmb;
  wire of_op1_sel_spr_pc;
  wire p_2_in106_in;
  wire p_2_in111_in;
  wire p_2_in117_in;
  wire p_2_in123_in;
  wire p_2_in129_in;
  wire p_2_in135_in;
  wire p_2_in141_in;
  wire p_2_in147_in;
  wire p_2_in153_in;
  wire p_2_in159_in;
  wire p_2_in15_in;
  wire p_2_in165_in;
  wire p_2_in171_in;
  wire p_2_in177_in;
  wire p_2_in183_in;
  wire p_2_in21_in;
  wire p_2_in27_in;
  wire p_2_in33_in;
  wire p_2_in39_in;
  wire p_2_in3_in;
  wire p_2_in45_in;
  wire p_2_in51_in;
  wire p_2_in57_in;
  wire p_2_in63_in;
  wire p_2_in69_in;
  wire p_2_in75_in;
  wire p_2_in81_in;
  wire p_2_in87_in;
  wire p_2_in93_in;
  wire p_2_in99_in;
  wire p_2_in9_in;
  wire sync_reset;

  LUT3 #(
    .INIT(8'hB8)) 
    \EX_Op1[29]_i_2 
       (.I0(\cur_data_i_reg[31]_0 [2]),
        .I1(of_op1_sel_spr_pc),
        .I2(\EX_Op1_reg[29] ),
        .O(\cur_data_i_reg[2]_0 ));
  LUT5 #(
    .INIT(32'hB8BBB8B8)) 
    \EX_Op1[30]_i_2 
       (.I0(\cur_data_i_reg[31]_0 [1]),
        .I1(of_op1_sel_spr_pc),
        .I2(\EX_Op1_reg[30] ),
        .I3(\EX_Op1_reg[30]_0 ),
        .I4(ex_set_msr_ie_instr),
        .O(\cur_data_i_reg[1]_0 ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[0]_i_1__1 
       (.I0(if4_sel_input),
        .I1(\data_buffer_reg[3][0]_srl4_n_0 ),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [0]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [0]),
        .O(\Data_Mux[0].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[10]_i_1__1 
       (.I0(if4_sel_input),
        .I1(p_2_in159_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [10]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [10]),
        .O(\Data_Mux[10].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[11]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in165_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [11]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [11]),
        .O(\Data_Mux[11].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[12]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in171_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [12]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [12]),
        .O(\Data_Mux[12].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[13]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in177_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [13]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [13]),
        .O(\Data_Mux[13].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[14]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in183_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [14]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [14]),
        .O(\Data_Mux[14].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[15]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in3_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [15]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [15]),
        .O(new_data_cmb[15]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[16]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in9_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [16]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [16]),
        .O(new_data_cmb[16]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[17]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in15_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [17]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [17]),
        .O(new_data_cmb[17]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[18]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in21_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [18]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [18]),
        .O(new_data_cmb[18]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[19]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in27_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [19]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [19]),
        .O(new_data_cmb[19]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[1]_i_1__1 
       (.I0(if4_sel_input),
        .I1(p_2_in106_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [1]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [1]),
        .O(\Data_Mux[1].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[20]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in33_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [20]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [20]),
        .O(new_data_cmb[20]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[21]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in39_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [21]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [21]),
        .O(new_data_cmb[21]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[22]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in45_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [22]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [22]),
        .O(new_data_cmb[22]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[23]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in51_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [23]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [23]),
        .O(new_data_cmb[23]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[24]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in57_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [24]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [24]),
        .O(new_data_cmb[24]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[25]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in63_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [25]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [25]),
        .O(new_data_cmb[25]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[26]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in69_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [26]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [26]),
        .O(new_data_cmb[26]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[27]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in75_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [27]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [27]),
        .O(new_data_cmb[27]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[28]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in81_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [28]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [28]),
        .O(new_data_cmb[28]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[29]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in87_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [29]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [29]),
        .O(new_data_cmb[29]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[2]_i_1__1 
       (.I0(if4_sel_input),
        .I1(p_2_in111_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [2]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [2]),
        .O(\Data_Mux[2].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[30]_i_1__0 
       (.I0(if4_sel_input),
        .I1(p_2_in93_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [30]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [30]),
        .O(new_data_cmb[30]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[31]_i_1 
       (.I0(if4_sel_input),
        .I1(p_2_in99_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [31]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [31]),
        .O(new_data_cmb[31]));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[3]_i_1__1 
       (.I0(if4_sel_input),
        .I1(p_2_in117_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [3]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [3]),
        .O(\Data_Mux[3].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[4]_i_1__1 
       (.I0(if4_sel_input),
        .I1(p_2_in123_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [4]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [4]),
        .O(\Data_Mux[4].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[5]_i_1__1 
       (.I0(if4_sel_input),
        .I1(p_2_in129_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [5]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [5]),
        .O(\Data_Mux[5].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[6]_i_1__1 
       (.I0(if4_sel_input),
        .I1(p_2_in135_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [6]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [6]),
        .O(\Data_Mux[6].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[7]_i_1__1 
       (.I0(if4_sel_input),
        .I1(p_2_in141_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [7]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [7]),
        .O(\Data_Mux[7].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[8]_i_1__1 
       (.I0(if4_sel_input),
        .I1(p_2_in147_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [8]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [8]),
        .O(\Data_Mux[8].new_data_cmb_reg ));
  LUT6 #(
    .INIT(64'hEF40EF4FEF40E040)) 
    \cur_data_i[9]_i_1__1 
       (.I0(if4_sel_input),
        .I1(p_2_in153_in),
        .I2(\cur_data_i_reg[31]_1 ),
        .I3(\cur_data_i_reg[31]_2 [9]),
        .I4(\cur_data_i_reg[30]_0 ),
        .I5(\cur_data_i_reg[31]_0 [9]),
        .O(\Data_Mux[9].new_data_cmb_reg ));
  FDRE \cur_data_i_reg[0] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[0].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [0]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[10] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[10].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [10]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[11] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[11].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [11]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[12] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[12].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [12]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[13] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[13].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [13]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[14] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[14].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [14]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[15] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[15]),
        .Q(\cur_data_i_reg[31]_0 [15]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[16] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[16]),
        .Q(\cur_data_i_reg[31]_0 [16]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[17] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[17]),
        .Q(\cur_data_i_reg[31]_0 [17]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[18] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[18]),
        .Q(\cur_data_i_reg[31]_0 [18]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[19] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[19]),
        .Q(\cur_data_i_reg[31]_0 [19]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[1].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [1]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[20] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[20]),
        .Q(\cur_data_i_reg[31]_0 [20]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[21] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[21]),
        .Q(\cur_data_i_reg[31]_0 [21]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[22] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[22]),
        .Q(\cur_data_i_reg[31]_0 [22]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[23] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[23]),
        .Q(\cur_data_i_reg[31]_0 [23]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[24] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[24]),
        .Q(\cur_data_i_reg[31]_0 [24]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[25] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[25]),
        .Q(\cur_data_i_reg[31]_0 [25]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[26] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[26]),
        .Q(\cur_data_i_reg[31]_0 [26]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[27] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[27]),
        .Q(\cur_data_i_reg[31]_0 [27]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[28] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[28]),
        .Q(\cur_data_i_reg[31]_0 [28]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[29] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[29]),
        .Q(\cur_data_i_reg[31]_0 [29]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[2].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [2]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[30] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[30]),
        .Q(\cur_data_i_reg[31]_0 [30]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[31] 
       (.C(Clk),
        .CE(1'b1),
        .D(new_data_cmb[31]),
        .Q(\cur_data_i_reg[31]_0 [31]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[3] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[3].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [3]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[4] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[4].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [4]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[5] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[5].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [5]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[6] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[6].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [6]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[7] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[7].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [7]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[8] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[8].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [8]),
        .R(sync_reset));
  FDRE \cur_data_i_reg[9] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Data_Mux[9].new_data_cmb_reg ),
        .Q(\cur_data_i_reg[31]_0 [9]),
        .R(sync_reset));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][0]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][0]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [0]),
        .Q(\data_buffer_reg[3][0]_srl4_n_0 ));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][10]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][10]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [10]),
        .Q(p_2_in159_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][11]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][11]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [11]),
        .Q(p_2_in165_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][12]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][12]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [12]),
        .Q(p_2_in171_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][13]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][13]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [13]),
        .Q(p_2_in177_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][14]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][14]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [14]),
        .Q(p_2_in183_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][15]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][15]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [15]),
        .Q(p_2_in3_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][16]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][16]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [16]),
        .Q(p_2_in9_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][17]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][17]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [17]),
        .Q(p_2_in15_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][18]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][18]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [18]),
        .Q(p_2_in21_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][19]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][19]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [19]),
        .Q(p_2_in27_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][1]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][1]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [1]),
        .Q(p_2_in106_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][20]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][20]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [20]),
        .Q(p_2_in33_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][21]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][21]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [21]),
        .Q(p_2_in39_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][22]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][22]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [22]),
        .Q(p_2_in45_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][23]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][23]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [23]),
        .Q(p_2_in51_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][24]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][24]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [24]),
        .Q(p_2_in57_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][25]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][25]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [25]),
        .Q(p_2_in63_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][26]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][26]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [26]),
        .Q(p_2_in69_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][27]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][27]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [27]),
        .Q(p_2_in75_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][28]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][28]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [28]),
        .Q(p_2_in81_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][29]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][29]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [29]),
        .Q(p_2_in87_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][2]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][2]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [2]),
        .Q(p_2_in111_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][30]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][30]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [30]),
        .Q(p_2_in93_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][31]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][31]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [31]),
        .Q(p_2_in99_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][3]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][3]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [3]),
        .Q(p_2_in117_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][4]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][4]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [4]),
        .Q(p_2_in123_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][5]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][5]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [5]),
        .Q(p_2_in129_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][6]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][6]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [6]),
        .Q(p_2_in135_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][7]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][7]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [7]),
        .Q(p_2_in141_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][8]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][8]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [8]),
        .Q(p_2_in147_in));
  (* srl_bus_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3] " *) 
  (* srl_name = "U0/\MicroBlaze_Core_I/Frequency.Core/DECODE_I1/PC_MODULE_I1/PC_BUFFER_I1/data_buffer_reg[3][9]_srl4 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \data_buffer_reg[3][9]_srl4 
       (.A0(addr[1]),
        .A1(addr[0]),
        .A2(1'b0),
        .A3(1'b0),
        .CE(if4_push_instr_fetch),
        .CLK(Clk),
        .D(\cur_data_i_reg[31]_2 [9]),
        .Q(p_2_in153_in));
endmodule

(* ORIG_REF_NAME = "Operand_Select_ff" *) 
module microblaze_microblaze_0_0_Operand_Select_ff
   (\EX_Op1_reg[10]_0 ,
    Q,
    \EX_Op1_reg[9]_0 ,
    \EX_Op1_reg[1]_0 ,
    \EX_Op1_reg[8]_0 ,
    \EX_Op2_reg[0]_0 ,
    EX_Bit_Extract_reg,
    EX_Bit_Extract_reg_0,
    \EX_Op2_reg[25]_0 ,
    \EX_Op2_reg[25]_1 ,
    \EX_Op2_reg[25]_2 ,
    ex_sel_alu_reg,
    \EX_Logic_Op_reg[0] ,
    EX_CLZ_Instr_reg,
    \EX_Op1_reg[0]_0 ,
    EX_CLZ_Instr_reg_0,
    \EX_Op1_reg[0]_1 ,
    \EX_Op1_reg[24]_0 ,
    \EX_Op1_reg[24]_1 ,
    EX_Pattern_Cmp_Sel_reg,
    \EX_Op1_reg[0]_2 ,
    EX_Pattern_Cmp_Sel_reg_0,
    \EX_Op1_reg[16]_0 ,
    \EX_Logic_Op_reg[1] ,
    I2,
    I0,
    S,
    \EX_Op1_reg[30]_0 ,
    \EX_Op1_reg[29]_0 ,
    \EX_Op1_reg[28]_0 ,
    \EX_Op1_reg[27]_0 ,
    \EX_Op1_reg[26]_0 ,
    \EX_Op1_reg[25]_0 ,
    \EX_Op1_reg[24]_2 ,
    \EX_Op1_reg[23]_0 ,
    \EX_Op1_reg[22]_0 ,
    \EX_Op1_reg[21]_0 ,
    \EX_Op1_reg[20]_0 ,
    \EX_Op1_reg[19]_0 ,
    \EX_Op1_reg[18]_0 ,
    \EX_Op1_reg[17]_0 ,
    \EX_Op1_reg[16]_1 ,
    \EX_Op1_reg[15]_0 ,
    \EX_Op1_reg[14]_0 ,
    \EX_Op1_reg[13]_0 ,
    \EX_Op1_reg[12]_0 ,
    \EX_Op1_reg[11]_0 ,
    \EX_Op1_reg[10]_1 ,
    \EX_Op1_reg[9]_1 ,
    \EX_Op1_reg[8]_1 ,
    \EX_Op1_reg[7]_0 ,
    \EX_Op1_reg[6]_0 ,
    \EX_Op1_reg[5]_0 ,
    \EX_Op1_reg[4]_0 ,
    \EX_Op1_reg[3]_0 ,
    \EX_Op1_reg[2]_0 ,
    CI,
    EX_Div_Unsigned_reg,
    \Using_FPGA.D_Handle[0].D_Sel_reg ,
    ex_sel_alu_reg_0,
    \EX_Op1_reg[23]_1 ,
    \EX_Op1_reg[22]_1 ,
    \EX_Op1_reg[21]_1 ,
    \EX_Op1_reg[20]_1 ,
    \EX_Op1_reg[19]_1 ,
    \EX_Op1_reg[18]_1 ,
    \EX_Op1_reg[16]_2 ,
    in0,
    \EX_Op1_reg[17]_1 ,
    D,
    \EX_Op1_reg[24]_3 ,
    \EX_Op2_reg[29]_0 ,
    \EX_Op2_reg[30]_0 ,
    \EX_Branch_CMP_Op1_reg[30]_0 ,
    \EX_Branch_CMP_Op1_reg[0]_0 ,
    \imm_reg_reg[0]_0 ,
    \EX_Op3_reg[0]_0 ,
    ex_clz_instr,
    ex_bit_insert,
    ex_bit_extract,
    \Use_HW_BS.Using_BitField.mem_mask0_reg[2] ,
    ex_msrclr,
    ex_msrset,
    \Using_FPGA.Native_i_2__8 ,
    \Using_FPGA.Native_i_2__8_0 ,
    m3_div_zero_overflow_ex_hold,
    ex_pattern_cmp_sel,
    ex_databus_addr,
    ex_sel_alu_res,
    \m0_Ex_Result_i_reg[29] ,
    \m0_Ex_Result_i_reg[30] ,
    ex_alu_result,
    \m0_Ex_Result_i_reg[31] ,
    ex_logic_op,
    \m0_Ex_Result_i_reg[26] ,
    \m0_Ex_Result_i_reg[26]_0 ,
    \m0_Ex_Result_i_reg[27] ,
    \m0_Ex_Result_i_reg[27]_0 ,
    \m0_Ex_Result_i_reg[28] ,
    ex_cmp_op,
    ex_alu_sel_logic,
    ex_div_unsigned,
    \Use_HW_BS.Using_BitField.mem_mask1_reg[5] ,
    \m0_Ex_Result_i_reg[24] ,
    ex_enable_sext_shift,
    \m0_Ex_Result_i_reg[17] ,
    out,
    \Use_HW_BS.mem_mux3_reg[0] ,
    ex_void_bit,
    \Use_HW_BS.mem_mux3_reg[30] ,
    \Use_HW_BS.mem_mux3_reg[27] ,
    ex_left_shift_i,
    \Use_HW_BS.mem_mux3_reg[0]_0 ,
    \Use_HW_BS.mem_mux3_reg[30]_0 ,
    \Use_HW_BS.mem_mux3_reg[0]_1 ,
    ex_arith_shift,
    sync_reset,
    \imm_reg_reg[15]_0 ,
    \imm_reg_reg[0]_1 ,
    Clk,
    of_piperun,
    \EX_Op1_reg[0]_3 ,
    \EX_Op2_reg[0]_1 ,
    \EX_Op3_reg[0]_1 ,
    \EX_Branch_CMP_Op1_reg[0]_1 );
  output \EX_Op1_reg[10]_0 ;
  output [31:0]Q;
  output \EX_Op1_reg[9]_0 ;
  output \EX_Op1_reg[1]_0 ;
  output \EX_Op1_reg[8]_0 ;
  output [31:0]\EX_Op2_reg[0]_0 ;
  output [30:0]EX_Bit_Extract_reg;
  output [12:0]EX_Bit_Extract_reg_0;
  output \EX_Op2_reg[25]_0 ;
  output \EX_Op2_reg[25]_1 ;
  output \EX_Op2_reg[25]_2 ;
  output [6:0]ex_sel_alu_reg;
  output \EX_Logic_Op_reg[0] ;
  output EX_CLZ_Instr_reg;
  output \EX_Op1_reg[0]_0 ;
  output EX_CLZ_Instr_reg_0;
  output \EX_Op1_reg[0]_1 ;
  output \EX_Op1_reg[24]_0 ;
  output \EX_Op1_reg[24]_1 ;
  output EX_Pattern_Cmp_Sel_reg;
  output \EX_Op1_reg[0]_2 ;
  output EX_Pattern_Cmp_Sel_reg_0;
  output \EX_Op1_reg[16]_0 ;
  output \EX_Logic_Op_reg[1] ;
  output I2;
  output I0;
  output S;
  output \EX_Op1_reg[30]_0 ;
  output \EX_Op1_reg[29]_0 ;
  output \EX_Op1_reg[28]_0 ;
  output \EX_Op1_reg[27]_0 ;
  output \EX_Op1_reg[26]_0 ;
  output \EX_Op1_reg[25]_0 ;
  output \EX_Op1_reg[24]_2 ;
  output \EX_Op1_reg[23]_0 ;
  output \EX_Op1_reg[22]_0 ;
  output \EX_Op1_reg[21]_0 ;
  output \EX_Op1_reg[20]_0 ;
  output \EX_Op1_reg[19]_0 ;
  output \EX_Op1_reg[18]_0 ;
  output \EX_Op1_reg[17]_0 ;
  output \EX_Op1_reg[16]_1 ;
  output \EX_Op1_reg[15]_0 ;
  output \EX_Op1_reg[14]_0 ;
  output \EX_Op1_reg[13]_0 ;
  output \EX_Op1_reg[12]_0 ;
  output \EX_Op1_reg[11]_0 ;
  output \EX_Op1_reg[10]_1 ;
  output \EX_Op1_reg[9]_1 ;
  output \EX_Op1_reg[8]_1 ;
  output \EX_Op1_reg[7]_0 ;
  output \EX_Op1_reg[6]_0 ;
  output \EX_Op1_reg[5]_0 ;
  output \EX_Op1_reg[4]_0 ;
  output \EX_Op1_reg[3]_0 ;
  output \EX_Op1_reg[2]_0 ;
  output CI;
  output EX_Div_Unsigned_reg;
  output \Using_FPGA.D_Handle[0].D_Sel_reg ;
  output ex_sel_alu_reg_0;
  output \EX_Op1_reg[23]_1 ;
  output \EX_Op1_reg[22]_1 ;
  output \EX_Op1_reg[21]_1 ;
  output \EX_Op1_reg[20]_1 ;
  output \EX_Op1_reg[19]_1 ;
  output \EX_Op1_reg[18]_1 ;
  output \EX_Op1_reg[16]_2 ;
  output in0;
  output \EX_Op1_reg[17]_1 ;
  output [3:0]D;
  output \EX_Op1_reg[24]_3 ;
  output \EX_Op2_reg[29]_0 ;
  output \EX_Op2_reg[30]_0 ;
  output \EX_Branch_CMP_Op1_reg[30]_0 ;
  output [29:0]\EX_Branch_CMP_Op1_reg[0]_0 ;
  output [15:0]\imm_reg_reg[0]_0 ;
  output [31:0]\EX_Op3_reg[0]_0 ;
  input ex_clz_instr;
  input ex_bit_insert;
  input ex_bit_extract;
  input \Use_HW_BS.Using_BitField.mem_mask0_reg[2] ;
  input ex_msrclr;
  input ex_msrset;
  input \Using_FPGA.Native_i_2__8 ;
  input \Using_FPGA.Native_i_2__8_0 ;
  input m3_div_zero_overflow_ex_hold;
  input ex_pattern_cmp_sel;
  input [3:0]ex_databus_addr;
  input ex_sel_alu_res;
  input \m0_Ex_Result_i_reg[29] ;
  input \m0_Ex_Result_i_reg[30] ;
  input [0:0]ex_alu_result;
  input \m0_Ex_Result_i_reg[31] ;
  input [0:1]ex_logic_op;
  input \m0_Ex_Result_i_reg[26] ;
  input \m0_Ex_Result_i_reg[26]_0 ;
  input \m0_Ex_Result_i_reg[27] ;
  input \m0_Ex_Result_i_reg[27]_0 ;
  input \m0_Ex_Result_i_reg[28] ;
  input ex_cmp_op;
  input ex_alu_sel_logic;
  input ex_div_unsigned;
  input \Use_HW_BS.Using_BitField.mem_mask1_reg[5] ;
  input \m0_Ex_Result_i_reg[24] ;
  input ex_enable_sext_shift;
  input [1:0]\m0_Ex_Result_i_reg[17] ;
  input out;
  input \Use_HW_BS.mem_mux3_reg[0] ;
  input ex_void_bit;
  input \Use_HW_BS.mem_mux3_reg[30] ;
  input \Use_HW_BS.mem_mux3_reg[27] ;
  input ex_left_shift_i;
  input \Use_HW_BS.mem_mux3_reg[0]_0 ;
  input \Use_HW_BS.mem_mux3_reg[30]_0 ;
  input \Use_HW_BS.mem_mux3_reg[0]_1 ;
  input ex_arith_shift;
  input sync_reset;
  input [0:0]\imm_reg_reg[15]_0 ;
  input [15:0]\imm_reg_reg[0]_1 ;
  input Clk;
  input of_piperun;
  input [31:0]\EX_Op1_reg[0]_3 ;
  input [31:0]\EX_Op2_reg[0]_1 ;
  input [31:0]\EX_Op3_reg[0]_1 ;
  input [31:0]\EX_Branch_CMP_Op1_reg[0]_1 ;

  wire CI;
  wire Clk;
  wire [3:0]D;
  wire [30:0]EX_Bit_Extract_reg;
  wire [12:0]EX_Bit_Extract_reg_0;
  wire [29:0]\EX_Branch_CMP_Op1_reg[0]_0 ;
  wire [31:0]\EX_Branch_CMP_Op1_reg[0]_1 ;
  wire \EX_Branch_CMP_Op1_reg[30]_0 ;
  wire EX_CLZ_Instr_reg;
  wire EX_CLZ_Instr_reg_0;
  wire EX_Div_Unsigned_reg;
  wire \EX_Logic_Op_reg[0] ;
  wire \EX_Logic_Op_reg[1] ;
  wire \EX_Op1[29]_i_11_n_0 ;
  wire \EX_Op1[29]_i_12_n_0 ;
  wire \EX_Op1[30]_i_12_n_0 ;
  wire \EX_Op1[31]_i_10_n_0 ;
  wire \EX_Op1[31]_i_11_n_0 ;
  wire \EX_Op1[31]_i_12_n_0 ;
  wire \EX_Op1[31]_i_13_n_0 ;
  wire \EX_Op1[31]_i_14_n_0 ;
  wire \EX_Op1_reg[0]_0 ;
  wire \EX_Op1_reg[0]_1 ;
  wire \EX_Op1_reg[0]_2 ;
  wire [31:0]\EX_Op1_reg[0]_3 ;
  wire \EX_Op1_reg[10]_0 ;
  wire \EX_Op1_reg[10]_1 ;
  wire \EX_Op1_reg[11]_0 ;
  wire \EX_Op1_reg[12]_0 ;
  wire \EX_Op1_reg[13]_0 ;
  wire \EX_Op1_reg[14]_0 ;
  wire \EX_Op1_reg[15]_0 ;
  wire \EX_Op1_reg[16]_0 ;
  wire \EX_Op1_reg[16]_1 ;
  wire \EX_Op1_reg[16]_2 ;
  wire \EX_Op1_reg[17]_0 ;
  wire \EX_Op1_reg[17]_1 ;
  wire \EX_Op1_reg[18]_0 ;
  wire \EX_Op1_reg[18]_1 ;
  wire \EX_Op1_reg[19]_0 ;
  wire \EX_Op1_reg[19]_1 ;
  wire \EX_Op1_reg[1]_0 ;
  wire \EX_Op1_reg[20]_0 ;
  wire \EX_Op1_reg[20]_1 ;
  wire \EX_Op1_reg[21]_0 ;
  wire \EX_Op1_reg[21]_1 ;
  wire \EX_Op1_reg[22]_0 ;
  wire \EX_Op1_reg[22]_1 ;
  wire \EX_Op1_reg[23]_0 ;
  wire \EX_Op1_reg[23]_1 ;
  wire \EX_Op1_reg[24]_0 ;
  wire \EX_Op1_reg[24]_1 ;
  wire \EX_Op1_reg[24]_2 ;
  wire \EX_Op1_reg[24]_3 ;
  wire \EX_Op1_reg[25]_0 ;
  wire \EX_Op1_reg[26]_0 ;
  wire \EX_Op1_reg[27]_0 ;
  wire \EX_Op1_reg[28]_0 ;
  wire \EX_Op1_reg[29]_0 ;
  wire \EX_Op1_reg[2]_0 ;
  wire \EX_Op1_reg[30]_0 ;
  wire \EX_Op1_reg[3]_0 ;
  wire \EX_Op1_reg[4]_0 ;
  wire \EX_Op1_reg[5]_0 ;
  wire \EX_Op1_reg[6]_0 ;
  wire \EX_Op1_reg[7]_0 ;
  wire \EX_Op1_reg[8]_0 ;
  wire \EX_Op1_reg[8]_1 ;
  wire \EX_Op1_reg[9]_0 ;
  wire \EX_Op1_reg[9]_1 ;
  wire \EX_Op2[29]_i_10_n_0 ;
  wire \EX_Op2[29]_i_11_n_0 ;
  wire \EX_Op2[29]_i_12_n_0 ;
  wire \EX_Op2[29]_i_13_n_0 ;
  wire \EX_Op2[29]_i_7_n_0 ;
  wire \EX_Op2[29]_i_8_n_0 ;
  wire \EX_Op2[29]_i_9_n_0 ;
  wire \EX_Op2[30]_i_7_n_0 ;
  wire [31:0]\EX_Op2_reg[0]_0 ;
  wire [31:0]\EX_Op2_reg[0]_1 ;
  wire \EX_Op2_reg[25]_0 ;
  wire \EX_Op2_reg[25]_1 ;
  wire \EX_Op2_reg[25]_2 ;
  wire \EX_Op2_reg[29]_0 ;
  wire \EX_Op2_reg[30]_0 ;
  wire [31:0]\EX_Op3_reg[0]_0 ;
  wire [31:0]\EX_Op3_reg[0]_1 ;
  wire EX_Pattern_Cmp_Sel_reg;
  wire EX_Pattern_Cmp_Sel_reg_0;
  wire I0;
  wire I2;
  wire [31:0]Q;
  wire S;
  wire \Use_HW_BS.Using_BitField.mem_mask0[1]_i_3_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask0[25]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask0[2]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask0_reg[2] ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[0]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[10]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[12]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[13]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[14]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[15]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[1]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[2]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[3]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[3]_i_3_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[4]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[6]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[8]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1[9]_i_2_n_0 ;
  wire \Use_HW_BS.Using_BitField.mem_mask1_reg[5] ;
  wire \Use_HW_BS.mem_mux3[0]_i_3_n_0 ;
  wire \Use_HW_BS.mem_mux3[0]_i_4_n_0 ;
  wire \Use_HW_BS.mem_mux3[31]_i_2_n_0 ;
  wire \Use_HW_BS.mem_mux3_reg[0] ;
  wire \Use_HW_BS.mem_mux3_reg[0]_0 ;
  wire \Use_HW_BS.mem_mux3_reg[0]_1 ;
  wire \Use_HW_BS.mem_mux3_reg[27] ;
  wire \Use_HW_BS.mem_mux3_reg[30] ;
  wire \Use_HW_BS.mem_mux3_reg[30]_0 ;
  wire \Using_FPGA.D_Handle[0].D_Sel_reg ;
  wire \Using_FPGA.Native_i_2__8 ;
  wire \Using_FPGA.Native_i_2__8_0 ;
  wire [0:0]ex_alu_result;
  wire ex_alu_sel_logic;
  wire ex_arith_shift;
  wire ex_bit_extract;
  wire ex_bit_insert;
  wire [30:31]ex_branch_cmp_op1;
  wire ex_clz_instr;
  wire ex_cmp_op;
  wire [3:0]ex_databus_addr;
  wire ex_div_unsigned;
  wire ex_enable_sext_shift;
  wire ex_left_shift_i;
  wire [0:1]ex_logic_op;
  wire ex_msrclr;
  wire ex_msrset;
  wire ex_pattern_cmp_sel;
  wire [6:0]ex_sel_alu_reg;
  wire ex_sel_alu_reg_0;
  wire ex_sel_alu_res;
  wire ex_void_bit;
  wire [15:0]\imm_reg_reg[0]_0 ;
  wire [15:0]\imm_reg_reg[0]_1 ;
  wire [0:0]\imm_reg_reg[15]_0 ;
  wire in0;
  wire \m0_Ex_Result_i[26]_i_10_n_0 ;
  wire \m0_Ex_Result_i[26]_i_11_n_0 ;
  wire \m0_Ex_Result_i[26]_i_12_n_0 ;
  wire \m0_Ex_Result_i[26]_i_13_n_0 ;
  wire \m0_Ex_Result_i[26]_i_14_n_0 ;
  wire \m0_Ex_Result_i[26]_i_15_n_0 ;
  wire \m0_Ex_Result_i[26]_i_16_n_0 ;
  wire \m0_Ex_Result_i[26]_i_5_n_0 ;
  wire \m0_Ex_Result_i[26]_i_7_n_0 ;
  wire \m0_Ex_Result_i[26]_i_8_n_0 ;
  wire \m0_Ex_Result_i[26]_i_9_n_0 ;
  wire \m0_Ex_Result_i[28]_i_3_n_0 ;
  wire \m0_Ex_Result_i[28]_i_4_n_0 ;
  wire \m0_Ex_Result_i[28]_i_5_n_0 ;
  wire \m0_Ex_Result_i[29]_i_3_n_0 ;
  wire \m0_Ex_Result_i[29]_i_7_n_0 ;
  wire \m0_Ex_Result_i[29]_i_8_n_0 ;
  wire \m0_Ex_Result_i[30]_i_10_n_0 ;
  wire \m0_Ex_Result_i[30]_i_11_n_0 ;
  wire \m0_Ex_Result_i[30]_i_5_n_0 ;
  wire \m0_Ex_Result_i[30]_i_8_n_0 ;
  wire \m0_Ex_Result_i[30]_i_9_n_0 ;
  wire \m0_Ex_Result_i[31]_i_10_n_0 ;
  wire \m0_Ex_Result_i[31]_i_11_n_0 ;
  wire \m0_Ex_Result_i[31]_i_3_n_0 ;
  wire \m0_Ex_Result_i[31]_i_5_n_0 ;
  wire \m0_Ex_Result_i[31]_i_6_n_0 ;
  wire \m0_Ex_Result_i[31]_i_7_n_0 ;
  wire \m0_Ex_Result_i[31]_i_8_n_0 ;
  wire \m0_Ex_Result_i[31]_i_9_n_0 ;
  wire [1:0]\m0_Ex_Result_i_reg[17] ;
  wire \m0_Ex_Result_i_reg[24] ;
  wire \m0_Ex_Result_i_reg[26] ;
  wire \m0_Ex_Result_i_reg[26]_0 ;
  wire \m0_Ex_Result_i_reg[27] ;
  wire \m0_Ex_Result_i_reg[27]_0 ;
  wire \m0_Ex_Result_i_reg[28] ;
  wire \m0_Ex_Result_i_reg[29] ;
  wire \m0_Ex_Result_i_reg[30] ;
  wire \m0_Ex_Result_i_reg[31] ;
  wire m3_div_zero_overflow_ex_hold;
  wire of_piperun;
  wire out;
  wire sync_reset;

  FDRE \EX_Branch_CMP_Op1_reg[0] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [31]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [29]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[10] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [21]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [19]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[11] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [20]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [18]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[12] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [19]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [17]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[13] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [18]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [16]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[14] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [17]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [15]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[15] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [16]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[16] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [15]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[17] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [14]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[18] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [13]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [11]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[19] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [12]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[1] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [30]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [28]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[20] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [11]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[21] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [10]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[22] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [9]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [7]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[23] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [8]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [6]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[24] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [7]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[25] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [6]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[26] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [5]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[27] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [4]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[28] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [3]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[29] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [2]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[2] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [29]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [27]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[30] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [1]),
        .Q(ex_branch_cmp_op1[30]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[31] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [0]),
        .Q(ex_branch_cmp_op1[31]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[3] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [28]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [26]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[4] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [27]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [25]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[5] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [26]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [24]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[6] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [25]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [23]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[7] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [24]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [22]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[8] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [23]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [21]),
        .R(sync_reset));
  FDRE \EX_Branch_CMP_Op1_reg[9] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Branch_CMP_Op1_reg[0]_1 [22]),
        .Q(\EX_Branch_CMP_Op1_reg[0]_0 [20]),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT5 #(
    .INIT(32'hFFFF04F4)) 
    \EX_Op1[29]_i_10 
       (.I0(\EX_Op1[29]_i_11_n_0 ),
        .I1(\m0_Ex_Result_i[26]_i_5_n_0 ),
        .I2(\EX_Op1_reg[16]_0 ),
        .I3(\EX_Op1[29]_i_12_n_0 ),
        .I4(\EX_Op1_reg[9]_0 ),
        .O(\EX_Op1_reg[24]_3 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \EX_Op1[29]_i_11 
       (.I0(Q[7]),
        .I1(Q[6]),
        .I2(Q[5]),
        .I3(Q[4]),
        .O(\EX_Op1[29]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \EX_Op1[29]_i_12 
       (.I0(Q[15]),
        .I1(Q[14]),
        .I2(Q[13]),
        .I3(Q[12]),
        .O(\EX_Op1[29]_i_12_n_0 ));
  LUT3 #(
    .INIT(8'h4F)) 
    \EX_Op1[30]_i_11 
       (.I0(\EX_Op1[30]_i_12_n_0 ),
        .I1(\EX_Op1_reg[9]_0 ),
        .I2(\EX_Op1_reg[1]_0 ),
        .O(\EX_Op1_reg[8]_0 ));
  LUT6 #(
    .INIT(64'h1111111111110001)) 
    \EX_Op1[30]_i_12 
       (.I0(Q[23]),
        .I1(Q[22]),
        .I2(Q[18]),
        .I3(Q[19]),
        .I4(Q[20]),
        .I5(Q[21]),
        .O(\EX_Op1[30]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8B8BB88BBBB)) 
    \EX_Op1[31]_i_10 
       (.I0(\EX_Op1[31]_i_12_n_0 ),
        .I1(\EX_Op1_reg[9]_0 ),
        .I2(\EX_Op1[31]_i_13_n_0 ),
        .I3(\EX_Op1[31]_i_14_n_0 ),
        .I4(\m0_Ex_Result_i[26]_i_5_n_0 ),
        .I5(\EX_Op1_reg[16]_0 ),
        .O(\EX_Op1[31]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h5555555511110010)) 
    \EX_Op1[31]_i_11 
       (.I0(Q[30]),
        .I1(Q[28]),
        .I2(Q[25]),
        .I3(Q[26]),
        .I4(Q[27]),
        .I5(Q[29]),
        .O(\EX_Op1[31]_i_11_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \EX_Op1[31]_i_12 
       (.I0(Q[23]),
        .I1(\m0_Ex_Result_i[31]_i_7_n_0 ),
        .O(\EX_Op1[31]_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \EX_Op1[31]_i_13 
       (.I0(Q[15]),
        .I1(\m0_Ex_Result_i[31]_i_10_n_0 ),
        .O(\EX_Op1[31]_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \EX_Op1[31]_i_14 
       (.I0(Q[7]),
        .I1(\m0_Ex_Result_i[31]_i_11_n_0 ),
        .O(\EX_Op1[31]_i_14_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF44470000)) 
    \EX_Op1[31]_i_7 
       (.I0(\EX_Op1[31]_i_10_n_0 ),
        .I1(\EX_Op1_reg[1]_0 ),
        .I2(Q[31]),
        .I3(\EX_Op1[31]_i_11_n_0 ),
        .I4(ex_clz_instr),
        .I5(\m0_Ex_Result_i_reg[31] ),
        .O(\EX_Op1_reg[0]_2 ));
  FDRE \EX_Op1_reg[0] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [31]),
        .Q(Q[31]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[10] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [21]),
        .Q(Q[21]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[11] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [20]),
        .Q(Q[20]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[12] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [19]),
        .Q(Q[19]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[13] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [18]),
        .Q(Q[18]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[14] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [17]),
        .Q(Q[17]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[15] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [16]),
        .Q(Q[16]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[16] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [15]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[17] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [14]),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[18] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [13]),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[19] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [12]),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[1] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [30]),
        .Q(Q[30]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[20] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [11]),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[21] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [10]),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[22] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [9]),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[23] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [8]),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[24] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [7]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[25] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [6]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[26] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [5]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[27] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [4]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[28] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [3]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[29] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [2]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[2] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [29]),
        .Q(Q[29]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[30] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [1]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[31] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [0]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[3] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [28]),
        .Q(Q[28]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[4] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [27]),
        .Q(Q[27]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[5] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [26]),
        .Q(Q[26]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[6] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [25]),
        .Q(Q[25]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[7] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [24]),
        .Q(Q[24]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[8] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [23]),
        .Q(Q[23]),
        .R(sync_reset));
  FDRE \EX_Op1_reg[9] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op1_reg[0]_3 [22]),
        .Q(Q[22]),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h4747774747777777)) 
    \EX_Op2[25]_i_5 
       (.I0(ex_databus_addr[2]),
        .I1(ex_sel_alu_res),
        .I2(ex_enable_sext_shift),
        .I3(\m0_Ex_Result_i_reg[24] ),
        .I4(Q[7]),
        .I5(Q[6]),
        .O(ex_sel_alu_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \EX_Op2[29]_i_10 
       (.I0(Q[21]),
        .I1(Q[20]),
        .I2(Q[23]),
        .I3(Q[22]),
        .O(\EX_Op2[29]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF04FF)) 
    \EX_Op2[29]_i_11 
       (.I0(\EX_Op2[29]_i_13_n_0 ),
        .I1(\m0_Ex_Result_i[26]_i_15_n_0 ),
        .I2(\m0_Ex_Result_i[26]_i_16_n_0 ),
        .I3(ex_pattern_cmp_sel),
        .I4(ex_logic_op[0]),
        .O(\EX_Op2[29]_i_11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \EX_Op2[29]_i_12 
       (.I0(Q[12]),
        .I1(Q[13]),
        .O(\EX_Op2[29]_i_12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT4 #(
    .INIT(16'h6FF6)) 
    \EX_Op2[29]_i_13 
       (.I0(Q[31]),
        .I1(\EX_Op2_reg[0]_0 [31]),
        .I2(\EX_Op2_reg[0]_0 [30]),
        .I3(Q[30]),
        .O(\EX_Op2[29]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF0000D0DF)) 
    \EX_Op2[29]_i_4 
       (.I0(\EX_Op1_reg[0]_0 ),
        .I1(\EX_Op2[29]_i_7_n_0 ),
        .I2(ex_clz_instr),
        .I3(\m0_Ex_Result_i_reg[29] ),
        .I4(ex_pattern_cmp_sel),
        .I5(\EX_Op2[29]_i_8_n_0 ),
        .O(EX_CLZ_Instr_reg));
  LUT6 #(
    .INIT(64'hFF00AE000000AE00)) 
    \EX_Op2[29]_i_7 
       (.I0(\EX_Op2[29]_i_9_n_0 ),
        .I1(\m0_Ex_Result_i[28]_i_3_n_0 ),
        .I2(\EX_Op1[29]_i_11_n_0 ),
        .I3(\EX_Op1_reg[1]_0 ),
        .I4(\EX_Op1_reg[9]_0 ),
        .I5(\EX_Op2[29]_i_10_n_0 ),
        .O(\EX_Op2[29]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAEFAF)) 
    \EX_Op2[29]_i_8 
       (.I0(ex_sel_alu_res),
        .I1(\EX_Op1_reg[9]_0 ),
        .I2(ex_pattern_cmp_sel),
        .I3(\EX_Op1_reg[16]_0 ),
        .I4(\m0_Ex_Result_i[26]_i_5_n_0 ),
        .I5(\EX_Op2[29]_i_11_n_0 ),
        .O(\EX_Op2[29]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000FE00)) 
    \EX_Op2[29]_i_9 
       (.I0(\m0_Ex_Result_i[26]_i_13_n_0 ),
        .I1(\m0_Ex_Result_i[26]_i_12_n_0 ),
        .I2(\m0_Ex_Result_i[28]_i_5_n_0 ),
        .I3(\EX_Op2[29]_i_12_n_0 ),
        .I4(Q[14]),
        .I5(Q[15]),
        .O(\EX_Op2[29]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFF00AE000000AE00)) 
    \EX_Op2[30]_i_6 
       (.I0(\EX_Op2[30]_i_7_n_0 ),
        .I1(\m0_Ex_Result_i[28]_i_3_n_0 ),
        .I2(\m0_Ex_Result_i[30]_i_10_n_0 ),
        .I3(\EX_Op1_reg[1]_0 ),
        .I4(\EX_Op1_reg[9]_0 ),
        .I5(\EX_Op1[30]_i_12_n_0 ),
        .O(\EX_Op1_reg[24]_1 ));
  LUT4 #(
    .INIT(16'h00FE)) 
    \EX_Op2[30]_i_7 
       (.I0(\m0_Ex_Result_i[26]_i_13_n_0 ),
        .I1(\m0_Ex_Result_i[26]_i_12_n_0 ),
        .I2(\m0_Ex_Result_i[28]_i_5_n_0 ),
        .I3(\m0_Ex_Result_i[30]_i_11_n_0 ),
        .O(\EX_Op2[30]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA6A)) 
    \EX_Op2[31]_i_8 
       (.I0(ex_logic_op[1]),
        .I1(\EX_Op1_reg[1]_0 ),
        .I2(ex_pattern_cmp_sel),
        .I3(\EX_Op1_reg[16]_0 ),
        .I4(\m0_Ex_Result_i[26]_i_5_n_0 ),
        .I5(\EX_Op1_reg[9]_0 ),
        .O(\EX_Logic_Op_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT4 #(
    .INIT(16'hB0A0)) 
    \EX_Op2[31]_i_9 
       (.I0(\EX_Op1_reg[1]_0 ),
        .I1(\EX_Op1_reg[16]_0 ),
        .I2(ex_pattern_cmp_sel),
        .I3(\EX_Op1_reg[9]_0 ),
        .O(EX_Pattern_Cmp_Sel_reg_0));
  FDRE \EX_Op2_reg[0] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [31]),
        .Q(\EX_Op2_reg[0]_0 [31]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[10] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [21]),
        .Q(\EX_Op2_reg[0]_0 [21]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[11] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [20]),
        .Q(\EX_Op2_reg[0]_0 [20]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[12] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [19]),
        .Q(\EX_Op2_reg[0]_0 [19]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[13] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [18]),
        .Q(\EX_Op2_reg[0]_0 [18]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[14] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [17]),
        .Q(\EX_Op2_reg[0]_0 [17]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[15] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [16]),
        .Q(\EX_Op2_reg[0]_0 [16]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[16] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [15]),
        .Q(\EX_Op2_reg[0]_0 [15]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[17] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [14]),
        .Q(\EX_Op2_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[18] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [13]),
        .Q(\EX_Op2_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[19] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [12]),
        .Q(\EX_Op2_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[1] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [30]),
        .Q(\EX_Op2_reg[0]_0 [30]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[20] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [11]),
        .Q(\EX_Op2_reg[0]_0 [11]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[21] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [10]),
        .Q(\EX_Op2_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[22] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [9]),
        .Q(\EX_Op2_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[23] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [8]),
        .Q(\EX_Op2_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[24] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [7]),
        .Q(\EX_Op2_reg[0]_0 [7]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[25] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [6]),
        .Q(\EX_Op2_reg[0]_0 [6]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[26] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [5]),
        .Q(\EX_Op2_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[27] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [4]),
        .Q(\EX_Op2_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[28] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [3]),
        .Q(\EX_Op2_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[29] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [2]),
        .Q(\EX_Op2_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[2] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [29]),
        .Q(\EX_Op2_reg[0]_0 [29]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[30] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [1]),
        .Q(\EX_Op2_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[31] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [0]),
        .Q(\EX_Op2_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[3] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [28]),
        .Q(\EX_Op2_reg[0]_0 [28]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[4] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [27]),
        .Q(\EX_Op2_reg[0]_0 [27]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[5] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [26]),
        .Q(\EX_Op2_reg[0]_0 [26]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[6] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [25]),
        .Q(\EX_Op2_reg[0]_0 [25]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[7] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [24]),
        .Q(\EX_Op2_reg[0]_0 [24]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[8] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [23]),
        .Q(\EX_Op2_reg[0]_0 [23]),
        .R(sync_reset));
  FDRE \EX_Op2_reg[9] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op2_reg[0]_1 [22]),
        .Q(\EX_Op2_reg[0]_0 [22]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[0] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [31]),
        .Q(\EX_Op3_reg[0]_0 [31]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[10] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [21]),
        .Q(\EX_Op3_reg[0]_0 [21]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[11] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [20]),
        .Q(\EX_Op3_reg[0]_0 [20]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[12] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [19]),
        .Q(\EX_Op3_reg[0]_0 [19]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[13] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [18]),
        .Q(\EX_Op3_reg[0]_0 [18]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[14] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [17]),
        .Q(\EX_Op3_reg[0]_0 [17]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[15] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [16]),
        .Q(\EX_Op3_reg[0]_0 [16]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[16] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [15]),
        .Q(\EX_Op3_reg[0]_0 [15]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[17] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [14]),
        .Q(\EX_Op3_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[18] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [13]),
        .Q(\EX_Op3_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[19] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [12]),
        .Q(\EX_Op3_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[1] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [30]),
        .Q(\EX_Op3_reg[0]_0 [30]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[20] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [11]),
        .Q(\EX_Op3_reg[0]_0 [11]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[21] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [10]),
        .Q(\EX_Op3_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[22] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [9]),
        .Q(\EX_Op3_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[23] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [8]),
        .Q(\EX_Op3_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[24] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [7]),
        .Q(\EX_Op3_reg[0]_0 [7]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[25] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [6]),
        .Q(\EX_Op3_reg[0]_0 [6]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[26] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [5]),
        .Q(\EX_Op3_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[27] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [4]),
        .Q(\EX_Op3_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[28] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [3]),
        .Q(\EX_Op3_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[29] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [2]),
        .Q(\EX_Op3_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[2] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [29]),
        .Q(\EX_Op3_reg[0]_0 [29]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[30] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [1]),
        .Q(\EX_Op3_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[31] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [0]),
        .Q(\EX_Op3_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[3] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [28]),
        .Q(\EX_Op3_reg[0]_0 [28]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[4] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [27]),
        .Q(\EX_Op3_reg[0]_0 [27]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[5] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [26]),
        .Q(\EX_Op3_reg[0]_0 [26]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[6] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [25]),
        .Q(\EX_Op3_reg[0]_0 [25]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[7] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [24]),
        .Q(\EX_Op3_reg[0]_0 [24]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[8] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [23]),
        .Q(\EX_Op3_reg[0]_0 [23]),
        .R(sync_reset));
  FDRE \EX_Op3_reg[9] 
       (.C(Clk),
        .CE(of_piperun),
        .D(\EX_Op3_reg[0]_1 [22]),
        .Q(\EX_Op3_reg[0]_0 [22]),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hF0FFF0FF0F003A3F)) 
    \Use_HW_BS.Using_BitField.mem_mask0[10]_i_1 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(\EX_Op2_reg[0]_0 [3]),
        .I2(ex_bit_insert),
        .I3(ex_bit_extract),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0[2]_i_2_n_0 ),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0_reg[2] ),
        .O(EX_Bit_Extract_reg_0[8]));
  LUT6 #(
    .INIT(64'h00007777F787F787)) 
    \Use_HW_BS.Using_BitField.mem_mask0[17]_i_1 
       (.I0(\EX_Op2_reg[25]_1 ),
        .I1(\Use_HW_BS.Using_BitField.mem_mask0[1]_i_3_n_0 ),
        .I2(ex_bit_extract),
        .I3(\EX_Op2_reg[0]_0 [10]),
        .I4(\EX_Op2_reg[0]_0 [4]),
        .I5(ex_bit_insert),
        .O(EX_Bit_Extract_reg_0[7]));
  LUT6 #(
    .INIT(64'h3A3FF0FF0F000F00)) 
    \Use_HW_BS.Using_BitField.mem_mask0[18]_i_1 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(\EX_Op2_reg[0]_0 [3]),
        .I2(ex_bit_insert),
        .I3(ex_bit_extract),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0[2]_i_2_n_0 ),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0_reg[2] ),
        .O(EX_Bit_Extract_reg_0[6]));
  LUT6 #(
    .INIT(64'h0000DDDDFD2DFD2D)) 
    \Use_HW_BS.Using_BitField.mem_mask0[19]_i_1 
       (.I0(\Use_HW_BS.Using_BitField.mem_mask0[1]_i_3_n_0 ),
        .I1(\EX_Op2_reg[25]_0 ),
        .I2(ex_bit_extract),
        .I3(\EX_Op2_reg[0]_0 [10]),
        .I4(\EX_Op2_reg[0]_0 [4]),
        .I5(ex_bit_insert),
        .O(EX_Bit_Extract_reg_0[5]));
  LUT6 #(
    .INIT(64'h0FDDFF55FF55FF55)) 
    \Use_HW_BS.Using_BitField.mem_mask0[1]_i_1 
       (.I0(ex_bit_extract),
        .I1(\EX_Op2_reg[0]_0 [10]),
        .I2(\EX_Op2_reg[0]_0 [4]),
        .I3(ex_bit_insert),
        .I4(\EX_Op2_reg[25]_1 ),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0[1]_i_3_n_0 ),
        .O(EX_Bit_Extract_reg_0[12]));
  LUT6 #(
    .INIT(64'hCCCCA0000000A000)) 
    \Use_HW_BS.Using_BitField.mem_mask0[1]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [6]),
        .I1(\EX_Op2_reg[0]_0 [0]),
        .I2(\EX_Op2_reg[0]_0 [7]),
        .I3(ex_bit_extract),
        .I4(ex_bit_insert),
        .I5(\EX_Op2_reg[0]_0 [1]),
        .O(\EX_Op2_reg[25]_1 ));
  LUT6 #(
    .INIT(64'hCCCCA0000000A000)) 
    \Use_HW_BS.Using_BitField.mem_mask0[1]_i_3 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(\EX_Op2_reg[0]_0 [3]),
        .I2(\EX_Op2_reg[0]_0 [8]),
        .I3(ex_bit_extract),
        .I4(ex_bit_insert),
        .I5(\EX_Op2_reg[0]_0 [2]),
        .O(\Use_HW_BS.Using_BitField.mem_mask0[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h333333113F3F3F1D)) 
    \Use_HW_BS.Using_BitField.mem_mask0[24]_i_1 
       (.I0(ex_bit_extract),
        .I1(ex_bit_insert),
        .I2(\EX_Op2_reg[0]_0 [3]),
        .I3(\EX_Op2_reg[0]_0 [9]),
        .I4(\EX_Op2_reg[0]_0 [10]),
        .I5(\EX_Op2_reg[0]_0 [4]),
        .O(EX_Bit_Extract_reg_0[4]));
  LUT6 #(
    .INIT(64'h558FFF8F00F000F0)) 
    \Use_HW_BS.Using_BitField.mem_mask0[25]_i_1 
       (.I0(\EX_Op2_reg[25]_1 ),
        .I1(\EX_Op2_reg[0]_0 [8]),
        .I2(ex_bit_extract),
        .I3(ex_bit_insert),
        .I4(\EX_Op2_reg[0]_0 [2]),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0[25]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg_0[3]));
  LUT6 #(
    .INIT(64'h005503030055FFFF)) 
    \Use_HW_BS.Using_BitField.mem_mask0[25]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [4]),
        .I1(\EX_Op2_reg[0]_0 [10]),
        .I2(\EX_Op2_reg[0]_0 [9]),
        .I3(\EX_Op2_reg[0]_0 [3]),
        .I4(ex_bit_insert),
        .I5(ex_bit_extract),
        .O(\Use_HW_BS.Using_BitField.mem_mask0[25]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0BFBF3F30C0C0C0C)) 
    \Use_HW_BS.Using_BitField.mem_mask0[26]_i_1 
       (.I0(\EX_Op2_reg[0]_0 [7]),
        .I1(ex_bit_extract),
        .I2(ex_bit_insert),
        .I3(\EX_Op2_reg[0]_0 [1]),
        .I4(\EX_Op2_reg[29]_0 ),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0[25]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg_0[2]));
  LUT6 #(
    .INIT(64'hF3F30BFB0C0C0C0C)) 
    \Use_HW_BS.Using_BitField.mem_mask0[27]_i_1 
       (.I0(\EX_Op2_reg[0]_0 [8]),
        .I1(ex_bit_extract),
        .I2(ex_bit_insert),
        .I3(\EX_Op2_reg[0]_0 [2]),
        .I4(\EX_Op2_reg[25]_0 ),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0[25]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg_0[1]));
  LUT6 #(
    .INIT(64'h0000FB444444FB44)) 
    \Use_HW_BS.Using_BitField.mem_mask0[29]_i_1 
       (.I0(\EX_Op2_reg[25]_1 ),
        .I1(\Use_HW_BS.Using_BitField.mem_mask0[25]_i_2_n_0 ),
        .I2(\EX_Op2_reg[0]_0 [8]),
        .I3(ex_bit_extract),
        .I4(ex_bit_insert),
        .I5(\EX_Op2_reg[0]_0 [2]),
        .O(EX_Bit_Extract_reg_0[0]));
  LUT6 #(
    .INIT(64'hF0FFF0FF3A3FF0FF)) 
    \Use_HW_BS.Using_BitField.mem_mask0[2]_i_1 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(\EX_Op2_reg[0]_0 [3]),
        .I2(ex_bit_insert),
        .I3(ex_bit_extract),
        .I4(\Use_HW_BS.Using_BitField.mem_mask0[2]_i_2_n_0 ),
        .I5(\Use_HW_BS.Using_BitField.mem_mask0_reg[2] ),
        .O(EX_Bit_Extract_reg_0[11]));
  LUT6 #(
    .INIT(64'hCCCCA0000000A000)) 
    \Use_HW_BS.Using_BitField.mem_mask0[2]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [7]),
        .I1(\EX_Op2_reg[0]_0 [1]),
        .I2(\EX_Op2_reg[0]_0 [8]),
        .I3(ex_bit_extract),
        .I4(ex_bit_insert),
        .I5(\EX_Op2_reg[0]_0 [2]),
        .O(\Use_HW_BS.Using_BitField.mem_mask0[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB4F4B0F0BFFFBFFF)) 
    \Use_HW_BS.Using_BitField.mem_mask0[3]_i_1 
       (.I0(\EX_Op2_reg[25]_0 ),
        .I1(\Use_HW_BS.Using_BitField.mem_mask0[1]_i_3_n_0 ),
        .I2(ex_bit_insert),
        .I3(\EX_Op2_reg[0]_0 [4]),
        .I4(\EX_Op2_reg[0]_0 [10]),
        .I5(ex_bit_extract),
        .O(EX_Bit_Extract_reg_0[10]));
  LUT6 #(
    .INIT(64'h000005FF333305FF)) 
    \Use_HW_BS.Using_BitField.mem_mask0[3]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [6]),
        .I1(\EX_Op2_reg[0]_0 [0]),
        .I2(\EX_Op2_reg[0]_0 [7]),
        .I3(ex_bit_extract),
        .I4(ex_bit_insert),
        .I5(\EX_Op2_reg[0]_0 [1]),
        .O(\EX_Op2_reg[25]_0 ));
  LUT4 #(
    .INIT(16'hB888)) 
    \Use_HW_BS.Using_BitField.mem_mask0[5]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [2]),
        .I1(ex_bit_insert),
        .I2(ex_bit_extract),
        .I3(\EX_Op2_reg[0]_0 [8]),
        .O(\EX_Op2_reg[29]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT4 #(
    .INIT(16'hB888)) 
    \Use_HW_BS.Using_BitField.mem_mask0[6]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [1]),
        .I1(ex_bit_insert),
        .I2(ex_bit_extract),
        .I3(\EX_Op2_reg[0]_0 [7]),
        .O(\EX_Op2_reg[30]_0 ));
  LUT6 #(
    .INIT(64'h0FDDFFDD0F55FF55)) 
    \Use_HW_BS.Using_BitField.mem_mask0[8]_i_1 
       (.I0(ex_bit_extract),
        .I1(\EX_Op2_reg[0]_0 [10]),
        .I2(\EX_Op2_reg[0]_0 [4]),
        .I3(ex_bit_insert),
        .I4(\EX_Op2_reg[0]_0 [3]),
        .I5(\EX_Op2_reg[0]_0 [9]),
        .O(EX_Bit_Extract_reg_0[9]));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Use_HW_BS.Using_BitField.mem_mask1[0]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[0]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[30]));
  LUT6 #(
    .INIT(64'h0080010000FF01FF)) 
    \Use_HW_BS.Using_BitField.mem_mask1[0]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(\EX_Op2_reg[0]_0 [8]),
        .I2(\EX_Op2_reg[0]_0 [6]),
        .I3(ex_bit_extract),
        .I4(\EX_Op2_reg[0]_0 [7]),
        .I5(ex_bit_insert),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Use_HW_BS.Using_BitField.mem_mask1[10]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[10]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[20]));
  LUT6 #(
    .INIT(64'h0000454455445140)) 
    \Use_HW_BS.Using_BitField.mem_mask1[10]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(ex_bit_extract),
        .I2(\EX_Op2_reg[0]_0 [6]),
        .I3(ex_bit_insert),
        .I4(\EX_Op2_reg[0]_0 [7]),
        .I5(\EX_Op2_reg[0]_0 [8]),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[10]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \Use_HW_BS.Using_BitField.mem_mask1[11]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_3_n_0 ),
        .I2(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[19]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Use_HW_BS.Using_BitField.mem_mask1[12]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[12]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[18]));
  LUT6 #(
    .INIT(64'h0000000054155400)) 
    \Use_HW_BS.Using_BitField.mem_mask1[12]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(\EX_Op2_reg[0]_0 [7]),
        .I2(\EX_Op2_reg[0]_0 [6]),
        .I3(ex_bit_extract),
        .I4(ex_bit_insert),
        .I5(\EX_Op2_reg[0]_0 [8]),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[12]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Use_HW_BS.Using_BitField.mem_mask1[13]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[13]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[17]));
  LUT6 #(
    .INIT(64'h00000000000032C2)) 
    \Use_HW_BS.Using_BitField.mem_mask1[13]_i_2 
       (.I0(ex_bit_insert),
        .I1(\EX_Op2_reg[0]_0 [7]),
        .I2(ex_bit_extract),
        .I3(\EX_Op2_reg[0]_0 [6]),
        .I4(\EX_Op2_reg[0]_0 [8]),
        .I5(\EX_Op2_reg[0]_0 [9]),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[13]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Use_HW_BS.Using_BitField.mem_mask1[14]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[14]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[16]));
  LUT6 #(
    .INIT(64'h0100000101000000)) 
    \Use_HW_BS.Using_BitField.mem_mask1[14]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(\EX_Op2_reg[0]_0 [8]),
        .I2(\EX_Op2_reg[0]_0 [7]),
        .I3(ex_bit_extract),
        .I4(\EX_Op2_reg[0]_0 [6]),
        .I5(ex_bit_insert),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[14]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00E0EE0E)) 
    \Use_HW_BS.Using_BitField.mem_mask1[15]_i_1 
       (.I0(ex_bit_extract),
        .I1(ex_bit_insert),
        .I2(\Use_HW_BS.Using_BitField.mem_mask1[15]_i_2_n_0 ),
        .I3(\EX_Op2_reg[0]_0 [9]),
        .I4(\EX_Op2_reg[0]_0 [10]),
        .O(EX_Bit_Extract_reg[15]));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \Use_HW_BS.Using_BitField.mem_mask1[15]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [7]),
        .I1(ex_bit_extract),
        .I2(\EX_Op2_reg[0]_0 [6]),
        .I3(\EX_Op2_reg[0]_0 [8]),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[15]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_HW_BS.Using_BitField.mem_mask1[16]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[0]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[14]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_HW_BS.Using_BitField.mem_mask1[17]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[1]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[13]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_HW_BS.Using_BitField.mem_mask1[18]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[2]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[12]));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \Use_HW_BS.Using_BitField.mem_mask1[19]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_2_n_0 ),
        .I2(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_3_n_0 ),
        .O(EX_Bit_Extract_reg[11]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Use_HW_BS.Using_BitField.mem_mask1[1]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[1]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[29]));
  LUT6 #(
    .INIT(64'h8088010080FF01FF)) 
    \Use_HW_BS.Using_BitField.mem_mask1[1]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(\EX_Op2_reg[0]_0 [8]),
        .I2(\EX_Op2_reg[0]_0 [6]),
        .I3(ex_bit_extract),
        .I4(\EX_Op2_reg[0]_0 [7]),
        .I5(ex_bit_insert),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_HW_BS.Using_BitField.mem_mask1[20]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[4]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[10]));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT4 #(
    .INIT(16'hAA08)) 
    \Use_HW_BS.Using_BitField.mem_mask1[21]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1_reg[5] ),
        .I2(\EX_Op2_reg[0]_0 [8]),
        .I3(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[9]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_HW_BS.Using_BitField.mem_mask1[22]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[6]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[8]));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_HW_BS.Using_BitField.mem_mask1[23]_i_1 
       (.I0(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_2_n_0 ),
        .I1(\EX_Op2_reg[0]_0 [10]),
        .O(EX_Bit_Extract_reg[7]));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Use_HW_BS.Using_BitField.mem_mask1[24]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[8]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[6]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Use_HW_BS.Using_BitField.mem_mask1[25]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[9]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[5]));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Use_HW_BS.Using_BitField.mem_mask1[26]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[10]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[4]));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \Use_HW_BS.Using_BitField.mem_mask1[27]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_3_n_0 ),
        .I2(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[3]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Use_HW_BS.Using_BitField.mem_mask1[28]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[12]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[2]));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Use_HW_BS.Using_BitField.mem_mask1[29]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[13]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[1]));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Use_HW_BS.Using_BitField.mem_mask1[2]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[2]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[28]));
  LUT6 #(
    .INIT(64'h8888018088FF01FF)) 
    \Use_HW_BS.Using_BitField.mem_mask1[2]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(\EX_Op2_reg[0]_0 [8]),
        .I2(\EX_Op2_reg[0]_0 [6]),
        .I3(ex_bit_extract),
        .I4(\EX_Op2_reg[0]_0 [7]),
        .I5(ex_bit_insert),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Use_HW_BS.Using_BitField.mem_mask1[30]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[14]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[0]));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \Use_HW_BS.Using_BitField.mem_mask1[3]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_2_n_0 ),
        .I2(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_3_n_0 ),
        .O(EX_Bit_Extract_reg[27]));
  LUT6 #(
    .INIT(64'h00000030FAFAFACA)) 
    \Use_HW_BS.Using_BitField.mem_mask1[3]_i_2 
       (.I0(ex_bit_insert),
        .I1(\EX_Op2_reg[0]_0 [7]),
        .I2(ex_bit_extract),
        .I3(\EX_Op2_reg[0]_0 [6]),
        .I4(\EX_Op2_reg[0]_0 [8]),
        .I5(\EX_Op2_reg[0]_0 [9]),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT5 #(
    .INIT(32'h0030FACA)) 
    \Use_HW_BS.Using_BitField.mem_mask1[3]_i_3 
       (.I0(ex_bit_insert),
        .I1(\EX_Op2_reg[0]_0 [6]),
        .I2(ex_bit_extract),
        .I3(\EX_Op2_reg[0]_0 [7]),
        .I4(\EX_Op2_reg[0]_0 [8]),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Use_HW_BS.Using_BitField.mem_mask1[4]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[4]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[26]));
  LUT6 #(
    .INIT(64'hAAAAAAFF018001FF)) 
    \Use_HW_BS.Using_BitField.mem_mask1[4]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(\EX_Op2_reg[0]_0 [7]),
        .I2(\EX_Op2_reg[0]_0 [6]),
        .I3(ex_bit_extract),
        .I4(ex_bit_insert),
        .I5(\EX_Op2_reg[0]_0 [8]),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT4 #(
    .INIT(16'hFFAE)) 
    \Use_HW_BS.Using_BitField.mem_mask1[5]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1_reg[5] ),
        .I2(\EX_Op2_reg[0]_0 [8]),
        .I3(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[25]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Use_HW_BS.Using_BitField.mem_mask1[6]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[6]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[24]));
  LUT6 #(
    .INIT(64'hAAAA89A8AAFF89FF)) 
    \Use_HW_BS.Using_BitField.mem_mask1[6]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(\EX_Op2_reg[0]_0 [8]),
        .I2(\EX_Op2_reg[0]_0 [6]),
        .I3(ex_bit_extract),
        .I4(\EX_Op2_reg[0]_0 [7]),
        .I5(ex_bit_insert),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Use_HW_BS.Using_BitField.mem_mask1[7]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[3]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[23]));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Use_HW_BS.Using_BitField.mem_mask1[8]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[8]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[22]));
  LUT6 #(
    .INIT(64'h5504554455445044)) 
    \Use_HW_BS.Using_BitField.mem_mask1[8]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(ex_bit_insert),
        .I2(\EX_Op2_reg[0]_0 [6]),
        .I3(ex_bit_extract),
        .I4(\EX_Op2_reg[0]_0 [7]),
        .I5(\EX_Op2_reg[0]_0 [8]),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[8]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Use_HW_BS.Using_BitField.mem_mask1[9]_i_1 
       (.I0(EX_Bit_Extract_reg[15]),
        .I1(\Use_HW_BS.Using_BitField.mem_mask1[9]_i_2_n_0 ),
        .O(EX_Bit_Extract_reg[21]));
  LUT6 #(
    .INIT(64'h0050545454545404)) 
    \Use_HW_BS.Using_BitField.mem_mask1[9]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [9]),
        .I1(ex_bit_insert),
        .I2(ex_bit_extract),
        .I3(\EX_Op2_reg[0]_0 [6]),
        .I4(\EX_Op2_reg[0]_0 [7]),
        .I5(\EX_Op2_reg[0]_0 [8]),
        .O(\Use_HW_BS.Using_BitField.mem_mask1[9]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hBBB8)) 
    \Use_HW_BS.mem_mux3[0]_i_1 
       (.I0(\Use_HW_BS.mem_mux3_reg[0] ),
        .I1(\EX_Op2_reg[0]_0 [2]),
        .I2(\Use_HW_BS.mem_mux3[0]_i_3_n_0 ),
        .I3(\Use_HW_BS.mem_mux3[0]_i_4_n_0 ),
        .O(D[3]));
  LUT6 #(
    .INIT(64'h00FF0000B8B80000)) 
    \Use_HW_BS.mem_mux3[0]_i_3 
       (.I0(Q[29]),
        .I1(ex_left_shift_i),
        .I2(Q[2]),
        .I3(\Use_HW_BS.mem_mux3_reg[0]_0 ),
        .I4(\EX_Op2_reg[0]_0 [1]),
        .I5(\EX_Op2_reg[0]_0 [0]),
        .O(\Use_HW_BS.mem_mux3[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h000055550000CFC0)) 
    \Use_HW_BS.mem_mux3[0]_i_4 
       (.I0(\Use_HW_BS.mem_mux3_reg[0]_1 ),
        .I1(Q[31]),
        .I2(ex_left_shift_i),
        .I3(Q[0]),
        .I4(\EX_Op2_reg[0]_0 [1]),
        .I5(\EX_Op2_reg[0]_0 [0]),
        .O(\Use_HW_BS.mem_mux3[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00F1FFFF00F10000)) 
    \Use_HW_BS.mem_mux3[27]_i_1 
       (.I0(\EX_Op2_reg[0]_0 [1]),
        .I1(\EX_Op2_reg[0]_0 [0]),
        .I2(ex_void_bit),
        .I3(\Use_HW_BS.mem_mux3_reg[30] ),
        .I4(\EX_Op2_reg[0]_0 [2]),
        .I5(\Use_HW_BS.mem_mux3_reg[27] ),
        .O(D[2]));
  LUT6 #(
    .INIT(64'hCC88CC8DCCD8CCDD)) 
    \Use_HW_BS.mem_mux3[30]_i_1 
       (.I0(\EX_Op2_reg[0]_0 [2]),
        .I1(ex_void_bit),
        .I2(\EX_Op2_reg[0]_0 [0]),
        .I3(\EX_Op2_reg[0]_0 [1]),
        .I4(\Use_HW_BS.mem_mux3_reg[30]_0 ),
        .I5(\Use_HW_BS.mem_mux3_reg[30] ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h4444F4000000F400)) 
    \Use_HW_BS.mem_mux3[31]_i_1 
       (.I0(\EX_Op2_reg[0]_0 [2]),
        .I1(\Use_HW_BS.mem_mux3[31]_i_2_n_0 ),
        .I2(ex_arith_shift),
        .I3(Q[31]),
        .I4(ex_left_shift_i),
        .I5(Q[0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Use_HW_BS.mem_mux3[31]_i_2 
       (.I0(\EX_Op2_reg[0]_0 [1]),
        .I1(\EX_Op2_reg[0]_0 [0]),
        .O(\Use_HW_BS.mem_mux3[31]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1 
       (.I0(Q[0]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(S));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__0 
       (.I0(Q[1]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[30]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__1 
       (.I0(Q[2]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[29]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__10 
       (.I0(Q[11]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[20]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__11 
       (.I0(Q[12]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[19]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__12 
       (.I0(Q[13]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[18]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__13 
       (.I0(Q[14]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[17]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__14 
       (.I0(Q[15]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[16]_1 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__15 
       (.I0(Q[16]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[15]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__16 
       (.I0(Q[17]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[14]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__17 
       (.I0(Q[18]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[13]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__18 
       (.I0(Q[19]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[12]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__19 
       (.I0(Q[20]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[11]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__2 
       (.I0(Q[3]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[28]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__20 
       (.I0(Q[21]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[10]_1 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__21 
       (.I0(Q[22]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[9]_1 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__22 
       (.I0(Q[23]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[8]_1 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__23 
       (.I0(Q[24]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[7]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__24 
       (.I0(Q[25]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[6]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__25 
       (.I0(Q[26]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[5]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__26 
       (.I0(Q[27]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[4]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__27 
       (.I0(Q[28]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[3]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__28 
       (.I0(Q[29]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[2]_0 ));
  LUT3 #(
    .INIT(8'hB4)) 
    \Using_FPGA.Native_I1_i_1__29 
       (.I0(ex_div_unsigned),
        .I1(Q[31]),
        .I2(Q[30]),
        .O(EX_Div_Unsigned_reg));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__3 
       (.I0(Q[4]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[27]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__4 
       (.I0(Q[5]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[26]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__5 
       (.I0(Q[6]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[25]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__6 
       (.I0(Q[7]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[24]_2 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__7 
       (.I0(Q[8]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[23]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__8 
       (.I0(Q[9]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[22]_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \Using_FPGA.Native_I1_i_1__9 
       (.I0(Q[10]),
        .I1(ex_div_unsigned),
        .I2(Q[31]),
        .O(\EX_Op1_reg[21]_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_I1_i_2 
       (.I0(Q[31]),
        .I1(ex_div_unsigned),
        .O(CI));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.Native_I2_i_1 
       (.I0(Q[31]),
        .I1(ex_div_unsigned),
        .O(\Using_FPGA.D_Handle[0].D_Sel_reg ));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.Native_i_1__109 
       (.I0(ex_branch_cmp_op1[30]),
        .I1(ex_branch_cmp_op1[31]),
        .O(\EX_Branch_CMP_Op1_reg[30]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'h9F)) 
    \Using_FPGA.Native_i_1__134 
       (.I0(\EX_Op2_reg[0]_0 [31]),
        .I1(Q[31]),
        .I2(ex_cmp_op),
        .O(I2));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.Native_i_1__136 
       (.I0(\EX_Op2_reg[0]_0 [31]),
        .I1(ex_alu_sel_logic),
        .O(I0));
  LUT6 #(
    .INIT(64'hF7A3F7A3F7A3F7A0)) 
    \Using_FPGA.Native_i_3__2 
       (.I0(\EX_Op2_reg[0]_0 [6]),
        .I1(ex_msrclr),
        .I2(ex_msrset),
        .I3(\Using_FPGA.Native_i_2__8 ),
        .I4(\Using_FPGA.Native_i_2__8_0 ),
        .I5(m3_div_zero_overflow_ex_hold),
        .O(\EX_Op2_reg[25]_2 ));
  FDRE \imm_reg_reg[0] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [15]),
        .Q(\imm_reg_reg[0]_0 [15]),
        .R(sync_reset));
  FDRE \imm_reg_reg[10] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [5]),
        .Q(\imm_reg_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \imm_reg_reg[11] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [4]),
        .Q(\imm_reg_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \imm_reg_reg[12] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [3]),
        .Q(\imm_reg_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \imm_reg_reg[13] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [2]),
        .Q(\imm_reg_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \imm_reg_reg[14] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [1]),
        .Q(\imm_reg_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \imm_reg_reg[15] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [0]),
        .Q(\imm_reg_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \imm_reg_reg[1] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [14]),
        .Q(\imm_reg_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \imm_reg_reg[2] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [13]),
        .Q(\imm_reg_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \imm_reg_reg[3] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [12]),
        .Q(\imm_reg_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \imm_reg_reg[4] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [11]),
        .Q(\imm_reg_reg[0]_0 [11]),
        .R(sync_reset));
  FDRE \imm_reg_reg[5] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [10]),
        .Q(\imm_reg_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \imm_reg_reg[6] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [9]),
        .Q(\imm_reg_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \imm_reg_reg[7] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [8]),
        .Q(\imm_reg_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \imm_reg_reg[8] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [7]),
        .Q(\imm_reg_reg[0]_0 [7]),
        .R(sync_reset));
  FDRE \imm_reg_reg[9] 
       (.C(Clk),
        .CE(\imm_reg_reg[15]_0 ),
        .D(\imm_reg_reg[0]_1 [6]),
        .Q(\imm_reg_reg[0]_0 [6]),
        .R(sync_reset));
  LUT5 #(
    .INIT(32'h14D417D7)) 
    \m0_Ex_Result_i[16]_i_2 
       (.I0(Q[15]),
        .I1(\m0_Ex_Result_i_reg[17] [1]),
        .I2(\m0_Ex_Result_i_reg[17] [0]),
        .I3(Q[16]),
        .I4(out),
        .O(\EX_Op1_reg[16]_2 ));
  LUT5 #(
    .INIT(32'h1D441D77)) 
    \m0_Ex_Result_i[17]_i_2 
       (.I0(Q[14]),
        .I1(\m0_Ex_Result_i_reg[17] [0]),
        .I2(Q[15]),
        .I3(\m0_Ex_Result_i_reg[17] [1]),
        .I4(out),
        .O(\EX_Op1_reg[17]_1 ));
  LUT5 #(
    .INIT(32'h14D417D7)) 
    \m0_Ex_Result_i[18]_i_2 
       (.I0(Q[13]),
        .I1(\m0_Ex_Result_i_reg[17] [1]),
        .I2(\m0_Ex_Result_i_reg[17] [0]),
        .I3(Q[14]),
        .I4(out),
        .O(\EX_Op1_reg[18]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT5 #(
    .INIT(32'h14D417D7)) 
    \m0_Ex_Result_i[19]_i_2 
       (.I0(Q[12]),
        .I1(\m0_Ex_Result_i_reg[17] [1]),
        .I2(\m0_Ex_Result_i_reg[17] [0]),
        .I3(Q[13]),
        .I4(out),
        .O(\EX_Op1_reg[19]_1 ));
  LUT5 #(
    .INIT(32'h14D417D7)) 
    \m0_Ex_Result_i[20]_i_2 
       (.I0(Q[11]),
        .I1(\m0_Ex_Result_i_reg[17] [1]),
        .I2(\m0_Ex_Result_i_reg[17] [0]),
        .I3(Q[12]),
        .I4(out),
        .O(\EX_Op1_reg[20]_1 ));
  LUT5 #(
    .INIT(32'h14D417D7)) 
    \m0_Ex_Result_i[21]_i_2 
       (.I0(Q[10]),
        .I1(\m0_Ex_Result_i_reg[17] [1]),
        .I2(\m0_Ex_Result_i_reg[17] [0]),
        .I3(Q[11]),
        .I4(out),
        .O(\EX_Op1_reg[21]_1 ));
  LUT5 #(
    .INIT(32'h14D417D7)) 
    \m0_Ex_Result_i[22]_i_2 
       (.I0(Q[9]),
        .I1(\m0_Ex_Result_i_reg[17] [1]),
        .I2(\m0_Ex_Result_i_reg[17] [0]),
        .I3(Q[10]),
        .I4(out),
        .O(\EX_Op1_reg[22]_1 ));
  LUT5 #(
    .INIT(32'h14D417D7)) 
    \m0_Ex_Result_i[23]_i_2 
       (.I0(Q[8]),
        .I1(\m0_Ex_Result_i_reg[17] [1]),
        .I2(\m0_Ex_Result_i_reg[17] [0]),
        .I3(Q[9]),
        .I4(out),
        .O(\EX_Op1_reg[23]_1 ));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \m0_Ex_Result_i[24]_i_1 
       (.I0(ex_databus_addr[3]),
        .I1(ex_sel_alu_res),
        .I2(ex_enable_sext_shift),
        .I3(Q[7]),
        .I4(\m0_Ex_Result_i_reg[24] ),
        .I5(Q[8]),
        .O(ex_sel_alu_reg[6]));
  LUT6 #(
    .INIT(64'hFFFFCA000000CA00)) 
    \m0_Ex_Result_i[25]_i_1 
       (.I0(Q[6]),
        .I1(Q[7]),
        .I2(\m0_Ex_Result_i_reg[24] ),
        .I3(ex_enable_sext_shift),
        .I4(ex_sel_alu_res),
        .I5(ex_databus_addr[2]),
        .O(ex_sel_alu_reg[5]));
  LUT6 #(
    .INIT(64'h8888888A88888888)) 
    \m0_Ex_Result_i[26]_i_1 
       (.I0(\m0_Ex_Result_i_reg[26] ),
        .I1(\m0_Ex_Result_i_reg[26]_0 ),
        .I2(\EX_Op1_reg[9]_0 ),
        .I3(\m0_Ex_Result_i[26]_i_5_n_0 ),
        .I4(\EX_Op1_reg[16]_0 ),
        .I5(\m0_Ex_Result_i[26]_i_7_n_0 ),
        .O(ex_sel_alu_reg[4]));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \m0_Ex_Result_i[26]_i_10 
       (.I0(\EX_Op2_reg[0]_0 [0]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\EX_Op2_reg[0]_0 [1]),
        .I4(Q[2]),
        .I5(\EX_Op2_reg[0]_0 [2]),
        .O(\m0_Ex_Result_i[26]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \m0_Ex_Result_i[26]_i_11 
       (.I0(\EX_Op2_reg[0]_0 [3]),
        .I1(Q[3]),
        .I2(Q[5]),
        .I3(\EX_Op2_reg[0]_0 [5]),
        .I4(Q[4]),
        .I5(\EX_Op2_reg[0]_0 [4]),
        .O(\m0_Ex_Result_i[26]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \m0_Ex_Result_i[26]_i_12 
       (.I0(\EX_Op2_reg[0]_0 [8]),
        .I1(Q[8]),
        .I2(Q[10]),
        .I3(\EX_Op2_reg[0]_0 [10]),
        .I4(Q[9]),
        .I5(\EX_Op2_reg[0]_0 [9]),
        .O(\m0_Ex_Result_i[26]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \m0_Ex_Result_i[26]_i_13 
       (.I0(\EX_Op2_reg[0]_0 [11]),
        .I1(Q[11]),
        .I2(Q[12]),
        .I3(\EX_Op2_reg[0]_0 [12]),
        .I4(Q[13]),
        .I5(\EX_Op2_reg[0]_0 [13]),
        .O(\m0_Ex_Result_i[26]_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \m0_Ex_Result_i[26]_i_14 
       (.I0(\EX_Op2_reg[0]_0 [31]),
        .I1(Q[31]),
        .O(\m0_Ex_Result_i[26]_i_14_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \m0_Ex_Result_i[26]_i_15 
       (.I0(\EX_Op2_reg[0]_0 [27]),
        .I1(Q[27]),
        .I2(Q[29]),
        .I3(\EX_Op2_reg[0]_0 [29]),
        .I4(Q[28]),
        .I5(\EX_Op2_reg[0]_0 [28]),
        .O(\m0_Ex_Result_i[26]_i_15_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \m0_Ex_Result_i[26]_i_16 
       (.I0(\EX_Op2_reg[0]_0 [24]),
        .I1(Q[24]),
        .I2(Q[25]),
        .I3(\EX_Op2_reg[0]_0 [25]),
        .I4(Q[26]),
        .I5(\EX_Op2_reg[0]_0 [26]),
        .O(\m0_Ex_Result_i[26]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \m0_Ex_Result_i[26]_i_4 
       (.I0(Q[22]),
        .I1(\EX_Op2_reg[0]_0 [22]),
        .I2(Q[23]),
        .I3(\EX_Op2_reg[0]_0 [23]),
        .I4(\m0_Ex_Result_i[26]_i_8_n_0 ),
        .I5(\m0_Ex_Result_i[26]_i_9_n_0 ),
        .O(\EX_Op1_reg[9]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \m0_Ex_Result_i[26]_i_5 
       (.I0(Q[6]),
        .I1(\EX_Op2_reg[0]_0 [6]),
        .I2(Q[7]),
        .I3(\EX_Op2_reg[0]_0 [7]),
        .I4(\m0_Ex_Result_i[26]_i_10_n_0 ),
        .I5(\m0_Ex_Result_i[26]_i_11_n_0 ),
        .O(\m0_Ex_Result_i[26]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \m0_Ex_Result_i[26]_i_6 
       (.I0(Q[15]),
        .I1(\EX_Op2_reg[0]_0 [15]),
        .I2(Q[14]),
        .I3(\EX_Op2_reg[0]_0 [14]),
        .I4(\m0_Ex_Result_i[26]_i_12_n_0 ),
        .I5(\m0_Ex_Result_i[26]_i_13_n_0 ),
        .O(\EX_Op1_reg[16]_0 ));
  LUT6 #(
    .INIT(64'h0000410000000000)) 
    \m0_Ex_Result_i[26]_i_7 
       (.I0(\m0_Ex_Result_i[26]_i_14_n_0 ),
        .I1(\EX_Op2_reg[0]_0 [30]),
        .I2(Q[30]),
        .I3(\m0_Ex_Result_i[26]_i_15_n_0 ),
        .I4(\m0_Ex_Result_i[26]_i_16_n_0 ),
        .I5(ex_clz_instr),
        .O(\m0_Ex_Result_i[26]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \m0_Ex_Result_i[26]_i_8 
       (.I0(\EX_Op2_reg[0]_0 [16]),
        .I1(Q[16]),
        .I2(Q[18]),
        .I3(\EX_Op2_reg[0]_0 [18]),
        .I4(Q[17]),
        .I5(\EX_Op2_reg[0]_0 [17]),
        .O(\m0_Ex_Result_i[26]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \m0_Ex_Result_i[26]_i_9 
       (.I0(\EX_Op2_reg[0]_0 [19]),
        .I1(Q[19]),
        .I2(Q[20]),
        .I3(\EX_Op2_reg[0]_0 [20]),
        .I4(Q[21]),
        .I5(\EX_Op2_reg[0]_0 [21]),
        .O(\m0_Ex_Result_i[26]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h08080800AAAAAAAA)) 
    \m0_Ex_Result_i[27]_i_1 
       (.I0(\m0_Ex_Result_i_reg[27] ),
        .I1(\m0_Ex_Result_i[26]_i_7_n_0 ),
        .I2(\EX_Op1_reg[9]_0 ),
        .I3(\m0_Ex_Result_i[26]_i_5_n_0 ),
        .I4(\EX_Op1_reg[16]_0 ),
        .I5(\m0_Ex_Result_i_reg[27]_0 ),
        .O(ex_sel_alu_reg[3]));
  LUT6 #(
    .INIT(64'hFFFF0000EEEAEEEA)) 
    \m0_Ex_Result_i[28]_i_1 
       (.I0(\m0_Ex_Result_i_reg[28] ),
        .I1(\m0_Ex_Result_i[26]_i_7_n_0 ),
        .I2(\m0_Ex_Result_i[28]_i_3_n_0 ),
        .I3(\EX_Op1_reg[9]_0 ),
        .I4(ex_databus_addr[1]),
        .I5(ex_sel_alu_res),
        .O(ex_sel_alu_reg[2]));
  LUT6 #(
    .INIT(64'h00000000000000FE)) 
    \m0_Ex_Result_i[28]_i_3 
       (.I0(\m0_Ex_Result_i[26]_i_11_n_0 ),
        .I1(\m0_Ex_Result_i[26]_i_10_n_0 ),
        .I2(\m0_Ex_Result_i[28]_i_4_n_0 ),
        .I3(\m0_Ex_Result_i[26]_i_13_n_0 ),
        .I4(\m0_Ex_Result_i[26]_i_12_n_0 ),
        .I5(\m0_Ex_Result_i[28]_i_5_n_0 ),
        .O(\m0_Ex_Result_i[28]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT4 #(
    .INIT(16'h6FF6)) 
    \m0_Ex_Result_i[28]_i_4 
       (.I0(\EX_Op2_reg[0]_0 [7]),
        .I1(Q[7]),
        .I2(\EX_Op2_reg[0]_0 [6]),
        .I3(Q[6]),
        .O(\m0_Ex_Result_i[28]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \m0_Ex_Result_i[28]_i_5 
       (.I0(\EX_Op2_reg[0]_0 [14]),
        .I1(Q[14]),
        .I2(\EX_Op2_reg[0]_0 [15]),
        .I3(Q[15]),
        .O(\m0_Ex_Result_i[28]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFF00ABAB)) 
    \m0_Ex_Result_i[29]_i_1 
       (.I0(\EX_Logic_Op_reg[0] ),
        .I1(ex_pattern_cmp_sel),
        .I2(\m0_Ex_Result_i[29]_i_3_n_0 ),
        .I3(ex_databus_addr[0]),
        .I4(ex_sel_alu_res),
        .O(ex_sel_alu_reg[1]));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \m0_Ex_Result_i[29]_i_2 
       (.I0(\EX_Op1_reg[1]_0 ),
        .I1(ex_logic_op[0]),
        .I2(\m0_Ex_Result_i[26]_i_5_n_0 ),
        .I3(\EX_Op1_reg[16]_0 ),
        .I4(ex_pattern_cmp_sel),
        .I5(\EX_Op1_reg[9]_0 ),
        .O(\EX_Logic_Op_reg[0] ));
  LUT6 #(
    .INIT(64'h888AFFFF888A0000)) 
    \m0_Ex_Result_i[29]_i_3 
       (.I0(\EX_Op1_reg[0]_0 ),
        .I1(\EX_Op1_reg[10]_0 ),
        .I2(\m0_Ex_Result_i[29]_i_7_n_0 ),
        .I3(\m0_Ex_Result_i[29]_i_8_n_0 ),
        .I4(ex_clz_instr),
        .I5(\m0_Ex_Result_i_reg[29] ),
        .O(\m0_Ex_Result_i[29]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h4004000000004004)) 
    \m0_Ex_Result_i[29]_i_4 
       (.I0(\m0_Ex_Result_i[26]_i_16_n_0 ),
        .I1(\m0_Ex_Result_i[26]_i_15_n_0 ),
        .I2(Q[30]),
        .I3(\EX_Op2_reg[0]_0 [30]),
        .I4(\EX_Op2_reg[0]_0 [31]),
        .I5(Q[31]),
        .O(\EX_Op1_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \m0_Ex_Result_i[29]_i_5 
       (.I0(Q[31]),
        .I1(\EX_Op1_reg[1]_0 ),
        .I2(Q[30]),
        .I3(Q[29]),
        .I4(Q[28]),
        .O(\EX_Op1_reg[0]_0 ));
  LUT6 #(
    .INIT(64'hFFFE0000FFFFFFFF)) 
    \m0_Ex_Result_i[29]_i_6 
       (.I0(Q[21]),
        .I1(Q[20]),
        .I2(Q[23]),
        .I3(Q[22]),
        .I4(\EX_Op1_reg[9]_0 ),
        .I5(\EX_Op1_reg[1]_0 ),
        .O(\EX_Op1_reg[10]_0 ));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \m0_Ex_Result_i[29]_i_7 
       (.I0(\EX_Op1_reg[16]_0 ),
        .I1(\m0_Ex_Result_i[26]_i_5_n_0 ),
        .I2(Q[4]),
        .I3(Q[5]),
        .I4(Q[6]),
        .I5(Q[7]),
        .O(\m0_Ex_Result_i[29]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAABAAAAAAAA)) 
    \m0_Ex_Result_i[29]_i_8 
       (.I0(\EX_Op1_reg[9]_0 ),
        .I1(Q[15]),
        .I2(Q[14]),
        .I3(Q[13]),
        .I4(Q[12]),
        .I5(\EX_Op1_reg[16]_0 ),
        .O(\m0_Ex_Result_i[29]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEFFFE)) 
    \m0_Ex_Result_i[30]_i_10 
       (.I0(Q[7]),
        .I1(Q[6]),
        .I2(Q[2]),
        .I3(Q[3]),
        .I4(Q[4]),
        .I5(Q[5]),
        .O(\m0_Ex_Result_i[30]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEFFFE)) 
    \m0_Ex_Result_i[30]_i_11 
       (.I0(Q[15]),
        .I1(Q[14]),
        .I2(Q[10]),
        .I3(Q[11]),
        .I4(Q[12]),
        .I5(Q[13]),
        .O(\m0_Ex_Result_i[30]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h8AAAFFFF8AAA0000)) 
    \m0_Ex_Result_i[30]_i_3 
       (.I0(\EX_Op1_reg[0]_1 ),
        .I1(\m0_Ex_Result_i[30]_i_5_n_0 ),
        .I2(\EX_Op1_reg[1]_0 ),
        .I3(\EX_Op1_reg[24]_0 ),
        .I4(ex_clz_instr),
        .I5(\m0_Ex_Result_i_reg[30] ),
        .O(EX_CLZ_Instr_reg_0));
  LUT6 #(
    .INIT(64'hFFFFFFFEFEFEFEFE)) 
    \m0_Ex_Result_i[30]_i_4 
       (.I0(Q[31]),
        .I1(\EX_Op1_reg[1]_0 ),
        .I2(Q[30]),
        .I3(Q[26]),
        .I4(Q[27]),
        .I5(\m0_Ex_Result_i[30]_i_8_n_0 ),
        .O(\EX_Op1_reg[0]_1 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAA8880)) 
    \m0_Ex_Result_i[30]_i_5 
       (.I0(\EX_Op1_reg[9]_0 ),
        .I1(\m0_Ex_Result_i[30]_i_9_n_0 ),
        .I2(Q[19]),
        .I3(Q[18]),
        .I4(Q[22]),
        .I5(Q[23]),
        .O(\m0_Ex_Result_i[30]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF04F4)) 
    \m0_Ex_Result_i[30]_i_6 
       (.I0(\m0_Ex_Result_i[30]_i_10_n_0 ),
        .I1(\m0_Ex_Result_i[26]_i_5_n_0 ),
        .I2(\EX_Op1_reg[16]_0 ),
        .I3(\m0_Ex_Result_i[30]_i_11_n_0 ),
        .I4(\EX_Op1_reg[9]_0 ),
        .O(\EX_Op1_reg[24]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \m0_Ex_Result_i[30]_i_8 
       (.I0(Q[28]),
        .I1(Q[29]),
        .O(\m0_Ex_Result_i[30]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \m0_Ex_Result_i[30]_i_9 
       (.I0(Q[20]),
        .I1(Q[21]),
        .O(\m0_Ex_Result_i[30]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h8B8B8B8B888B8888)) 
    \m0_Ex_Result_i[31]_i_1 
       (.I0(ex_alu_result),
        .I1(ex_sel_alu_res),
        .I2(EX_Pattern_Cmp_Sel_reg),
        .I3(\m0_Ex_Result_i[31]_i_3_n_0 ),
        .I4(ex_clz_instr),
        .I5(\m0_Ex_Result_i_reg[31] ),
        .O(ex_sel_alu_reg[0]));
  LUT6 #(
    .INIT(64'h5555555511110010)) 
    \m0_Ex_Result_i[31]_i_10 
       (.I0(Q[14]),
        .I1(Q[12]),
        .I2(Q[9]),
        .I3(Q[10]),
        .I4(Q[11]),
        .I5(Q[13]),
        .O(\m0_Ex_Result_i[31]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h5555555511110010)) 
    \m0_Ex_Result_i[31]_i_11 
       (.I0(Q[6]),
        .I1(Q[4]),
        .I2(Q[1]),
        .I3(Q[2]),
        .I4(Q[3]),
        .I5(Q[5]),
        .O(\m0_Ex_Result_i[31]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hC01000103010F010)) 
    \m0_Ex_Result_i[31]_i_2 
       (.I0(\m0_Ex_Result_i[31]_i_5_n_0 ),
        .I1(\EX_Op1_reg[1]_0 ),
        .I2(ex_pattern_cmp_sel),
        .I3(ex_logic_op[0]),
        .I4(\m0_Ex_Result_i[31]_i_6_n_0 ),
        .I5(ex_logic_op[1]),
        .O(EX_Pattern_Cmp_Sel_reg));
  LUT6 #(
    .INIT(64'hEFE0FFFFEFE00000)) 
    \m0_Ex_Result_i[31]_i_3 
       (.I0(Q[23]),
        .I1(\m0_Ex_Result_i[31]_i_7_n_0 ),
        .I2(\EX_Op1_reg[9]_0 ),
        .I3(\m0_Ex_Result_i[31]_i_8_n_0 ),
        .I4(\EX_Op1_reg[1]_0 ),
        .I5(\m0_Ex_Result_i[31]_i_9_n_0 ),
        .O(\m0_Ex_Result_i[31]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \m0_Ex_Result_i[31]_i_5 
       (.I0(\EX_Op1_reg[9]_0 ),
        .I1(ex_pattern_cmp_sel),
        .I2(\EX_Op1_reg[16]_0 ),
        .O(\m0_Ex_Result_i[31]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \m0_Ex_Result_i[31]_i_6 
       (.I0(\EX_Op1_reg[16]_0 ),
        .I1(\m0_Ex_Result_i[26]_i_5_n_0 ),
        .I2(\EX_Op1_reg[9]_0 ),
        .O(\m0_Ex_Result_i[31]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h5555555511110010)) 
    \m0_Ex_Result_i[31]_i_7 
       (.I0(Q[22]),
        .I1(Q[20]),
        .I2(Q[17]),
        .I3(Q[18]),
        .I4(Q[19]),
        .I5(Q[21]),
        .O(\m0_Ex_Result_i[31]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEFFF0FFFF)) 
    \m0_Ex_Result_i[31]_i_8 
       (.I0(Q[15]),
        .I1(\m0_Ex_Result_i[31]_i_10_n_0 ),
        .I2(Q[7]),
        .I3(\m0_Ex_Result_i[31]_i_11_n_0 ),
        .I4(\m0_Ex_Result_i[26]_i_5_n_0 ),
        .I5(\EX_Op1_reg[16]_0 ),
        .O(\m0_Ex_Result_i[31]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \m0_Ex_Result_i[31]_i_9 
       (.I0(Q[31]),
        .I1(\EX_Op1[31]_i_11_n_0 ),
        .O(\m0_Ex_Result_i[31]_i_9_n_0 ));
  LUT4 #(
    .INIT(16'h0B08)) 
    sign_doublet_inferred_i_1
       (.I0(Q[15]),
        .I1(\m0_Ex_Result_i_reg[17] [0]),
        .I2(\m0_Ex_Result_i_reg[17] [1]),
        .I3(Q[7]),
        .O(in0));
endmodule

(* ORIG_REF_NAME = "PC_Module_ff" *) 
module microblaze_microblaze_0_0_PC_Module_ff
   (Q,
    S,
    \m3_PC_i_reg[23]_0 ,
    \m3_PC_i_reg[19]_0 ,
    \m3_PC_i_reg[15]_0 ,
    \m3_PC_i_reg[11]_0 ,
    \m3_PC_i_reg[7]_0 ,
    \m3_PC_i_reg[3]_0 ,
    \m3_PC_i_reg[1]_0 ,
    \cur_data_i_reg[31] ,
    \m3_PC_i_reg[29]_0 ,
    \cur_data_i_reg[2] ,
    \cur_data_i_reg[1] ,
    D,
    \Using_FPGA.Native ,
    sync_reset,
    \bp1_PC_i_reg[0]_0 ,
    Clk,
    \WB_Exception_Return_Addr_reg[0] ,
    m3_exception_from_m2,
    if4_sel_input,
    \ex_PC_i_reg[0]_0 ,
    \cur_data_i_reg[31]_0 ,
    \cur_data_i_reg[30] ,
    \bp1_PC_i_reg[0]_1 ,
    bp0_jump,
    DI,
    of_op1_sel_spr_pc,
    \EX_Op1_reg[29] ,
    \EX_Op1_reg[30] ,
    \EX_Op1_reg[30]_0 ,
    ex_set_msr_ie_instr,
    if4_push_instr_fetch,
    if4_pre_buffer_addr,
    Prefetch_Buffer_Full,
    E,
    \m0_PC_i_reg[0]_0 ,
    in0,
    \m2_PC_i_reg[0]_0 ,
    \m3_PC_i_reg[0]_0 ,
    WB_Exception_Return_Addr0);
  output [31:0]Q;
  output [3:0]S;
  output [3:0]\m3_PC_i_reg[23]_0 ;
  output [3:0]\m3_PC_i_reg[19]_0 ;
  output [3:0]\m3_PC_i_reg[15]_0 ;
  output [3:0]\m3_PC_i_reg[11]_0 ;
  output [3:0]\m3_PC_i_reg[7]_0 ;
  output [3:0]\m3_PC_i_reg[3]_0 ;
  output [1:0]\m3_PC_i_reg[1]_0 ;
  output [31:0]\cur_data_i_reg[31] ;
  output [0:0]\m3_PC_i_reg[29]_0 ;
  output \cur_data_i_reg[2] ;
  output \cur_data_i_reg[1] ;
  output [31:0]D;
  output [30:0]\Using_FPGA.Native ;
  input sync_reset;
  input \bp1_PC_i_reg[0]_0 ;
  input Clk;
  input [0:0]\WB_Exception_Return_Addr_reg[0] ;
  input m3_exception_from_m2;
  input [0:0]if4_sel_input;
  input \ex_PC_i_reg[0]_0 ;
  input [31:0]\cur_data_i_reg[31]_0 ;
  input \cur_data_i_reg[30] ;
  input [31:0]\bp1_PC_i_reg[0]_1 ;
  input bp0_jump;
  input [0:0]DI;
  input of_op1_sel_spr_pc;
  input \EX_Op1_reg[29] ;
  input [0:0]\EX_Op1_reg[30] ;
  input \EX_Op1_reg[30]_0 ;
  input ex_set_msr_ie_instr;
  input if4_push_instr_fetch;
  input [0:0]if4_pre_buffer_addr;
  input Prefetch_Buffer_Full;
  input [0:0]E;
  input [0:0]\m0_PC_i_reg[0]_0 ;
  input in0;
  input [0:0]\m2_PC_i_reg[0]_0 ;
  input [0:0]\m3_PC_i_reg[0]_0 ;
  input [29:0]WB_Exception_Return_Addr0;

  wire Clk;
  wire [31:0]D;
  wire [31:1]\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in ;
  wire [0:0]DI;
  wire [0:0]E;
  wire \EX_Op1_reg[29] ;
  wire [0:0]\EX_Op1_reg[30] ;
  wire \EX_Op1_reg[30]_0 ;
  wire Prefetch_Buffer_Full;
  wire [31:0]Q;
  wire [3:0]S;
  wire [30:0]\Using_FPGA.Native ;
  wire [29:0]WB_Exception_Return_Addr0;
  wire \WB_Exception_Return_Addr[27]_i_3_n_0 ;
  wire [0:0]\WB_Exception_Return_Addr_reg[0] ;
  wire \WB_Exception_Return_Addr_reg[0]_i_2_n_2 ;
  wire \WB_Exception_Return_Addr_reg[0]_i_2_n_3 ;
  wire \WB_Exception_Return_Addr_reg[11]_i_2_n_0 ;
  wire \WB_Exception_Return_Addr_reg[11]_i_2_n_1 ;
  wire \WB_Exception_Return_Addr_reg[11]_i_2_n_2 ;
  wire \WB_Exception_Return_Addr_reg[11]_i_2_n_3 ;
  wire \WB_Exception_Return_Addr_reg[15]_i_2_n_0 ;
  wire \WB_Exception_Return_Addr_reg[15]_i_2_n_1 ;
  wire \WB_Exception_Return_Addr_reg[15]_i_2_n_2 ;
  wire \WB_Exception_Return_Addr_reg[15]_i_2_n_3 ;
  wire \WB_Exception_Return_Addr_reg[19]_i_2_n_0 ;
  wire \WB_Exception_Return_Addr_reg[19]_i_2_n_1 ;
  wire \WB_Exception_Return_Addr_reg[19]_i_2_n_2 ;
  wire \WB_Exception_Return_Addr_reg[19]_i_2_n_3 ;
  wire \WB_Exception_Return_Addr_reg[23]_i_2_n_0 ;
  wire \WB_Exception_Return_Addr_reg[23]_i_2_n_1 ;
  wire \WB_Exception_Return_Addr_reg[23]_i_2_n_2 ;
  wire \WB_Exception_Return_Addr_reg[23]_i_2_n_3 ;
  wire \WB_Exception_Return_Addr_reg[27]_i_2_n_0 ;
  wire \WB_Exception_Return_Addr_reg[27]_i_2_n_1 ;
  wire \WB_Exception_Return_Addr_reg[27]_i_2_n_2 ;
  wire \WB_Exception_Return_Addr_reg[27]_i_2_n_3 ;
  wire \WB_Exception_Return_Addr_reg[3]_i_2_n_0 ;
  wire \WB_Exception_Return_Addr_reg[3]_i_2_n_1 ;
  wire \WB_Exception_Return_Addr_reg[3]_i_2_n_2 ;
  wire \WB_Exception_Return_Addr_reg[3]_i_2_n_3 ;
  wire \WB_Exception_Return_Addr_reg[7]_i_2_n_0 ;
  wire \WB_Exception_Return_Addr_reg[7]_i_2_n_1 ;
  wire \WB_Exception_Return_Addr_reg[7]_i_2_n_2 ;
  wire \WB_Exception_Return_Addr_reg[7]_i_2_n_3 ;
  wire bp0_jump;
  wire [0:31]bp0_new_pc;
  wire \bp0_next_pc[10]_i_2_n_0 ;
  wire \bp0_next_pc[10]_i_3_n_0 ;
  wire \bp0_next_pc[10]_i_4_n_0 ;
  wire \bp0_next_pc[10]_i_5_n_0 ;
  wire \bp0_next_pc[14]_i_2_n_0 ;
  wire \bp0_next_pc[14]_i_3_n_0 ;
  wire \bp0_next_pc[14]_i_4_n_0 ;
  wire \bp0_next_pc[14]_i_5_n_0 ;
  wire \bp0_next_pc[18]_i_2_n_0 ;
  wire \bp0_next_pc[18]_i_3_n_0 ;
  wire \bp0_next_pc[18]_i_4_n_0 ;
  wire \bp0_next_pc[18]_i_5_n_0 ;
  wire \bp0_next_pc[22]_i_2_n_0 ;
  wire \bp0_next_pc[22]_i_3_n_0 ;
  wire \bp0_next_pc[22]_i_4_n_0 ;
  wire \bp0_next_pc[22]_i_5_n_0 ;
  wire \bp0_next_pc[26]_i_2_n_0 ;
  wire \bp0_next_pc[26]_i_3_n_0 ;
  wire \bp0_next_pc[26]_i_4_n_0 ;
  wire \bp0_next_pc[26]_i_5_n_0 ;
  wire \bp0_next_pc[2]_i_2_n_0 ;
  wire \bp0_next_pc[2]_i_3_n_0 ;
  wire \bp0_next_pc[2]_i_4_n_0 ;
  wire \bp0_next_pc[30]_i_2_n_0 ;
  wire \bp0_next_pc[30]_i_3_n_0 ;
  wire \bp0_next_pc[30]_i_4_n_0 ;
  wire \bp0_next_pc[30]_i_5_n_0 ;
  wire \bp0_next_pc[6]_i_2_n_0 ;
  wire \bp0_next_pc[6]_i_3_n_0 ;
  wire \bp0_next_pc[6]_i_4_n_0 ;
  wire \bp0_next_pc[6]_i_5_n_0 ;
  wire [0:30]bp0_next_pc_reg;
  wire \bp0_next_pc_reg[10]_i_1_n_0 ;
  wire \bp0_next_pc_reg[10]_i_1_n_1 ;
  wire \bp0_next_pc_reg[10]_i_1_n_2 ;
  wire \bp0_next_pc_reg[10]_i_1_n_3 ;
  wire \bp0_next_pc_reg[10]_i_1_n_4 ;
  wire \bp0_next_pc_reg[10]_i_1_n_5 ;
  wire \bp0_next_pc_reg[10]_i_1_n_6 ;
  wire \bp0_next_pc_reg[10]_i_1_n_7 ;
  wire \bp0_next_pc_reg[14]_i_1_n_0 ;
  wire \bp0_next_pc_reg[14]_i_1_n_1 ;
  wire \bp0_next_pc_reg[14]_i_1_n_2 ;
  wire \bp0_next_pc_reg[14]_i_1_n_3 ;
  wire \bp0_next_pc_reg[14]_i_1_n_4 ;
  wire \bp0_next_pc_reg[14]_i_1_n_5 ;
  wire \bp0_next_pc_reg[14]_i_1_n_6 ;
  wire \bp0_next_pc_reg[14]_i_1_n_7 ;
  wire \bp0_next_pc_reg[18]_i_1_n_0 ;
  wire \bp0_next_pc_reg[18]_i_1_n_1 ;
  wire \bp0_next_pc_reg[18]_i_1_n_2 ;
  wire \bp0_next_pc_reg[18]_i_1_n_3 ;
  wire \bp0_next_pc_reg[18]_i_1_n_4 ;
  wire \bp0_next_pc_reg[18]_i_1_n_5 ;
  wire \bp0_next_pc_reg[18]_i_1_n_6 ;
  wire \bp0_next_pc_reg[18]_i_1_n_7 ;
  wire \bp0_next_pc_reg[22]_i_1_n_0 ;
  wire \bp0_next_pc_reg[22]_i_1_n_1 ;
  wire \bp0_next_pc_reg[22]_i_1_n_2 ;
  wire \bp0_next_pc_reg[22]_i_1_n_3 ;
  wire \bp0_next_pc_reg[22]_i_1_n_4 ;
  wire \bp0_next_pc_reg[22]_i_1_n_5 ;
  wire \bp0_next_pc_reg[22]_i_1_n_6 ;
  wire \bp0_next_pc_reg[22]_i_1_n_7 ;
  wire \bp0_next_pc_reg[26]_i_1_n_0 ;
  wire \bp0_next_pc_reg[26]_i_1_n_1 ;
  wire \bp0_next_pc_reg[26]_i_1_n_2 ;
  wire \bp0_next_pc_reg[26]_i_1_n_3 ;
  wire \bp0_next_pc_reg[26]_i_1_n_4 ;
  wire \bp0_next_pc_reg[26]_i_1_n_5 ;
  wire \bp0_next_pc_reg[26]_i_1_n_6 ;
  wire \bp0_next_pc_reg[26]_i_1_n_7 ;
  wire \bp0_next_pc_reg[2]_i_1_n_2 ;
  wire \bp0_next_pc_reg[2]_i_1_n_3 ;
  wire \bp0_next_pc_reg[2]_i_1_n_5 ;
  wire \bp0_next_pc_reg[2]_i_1_n_6 ;
  wire \bp0_next_pc_reg[2]_i_1_n_7 ;
  wire \bp0_next_pc_reg[30]_i_1_n_0 ;
  wire \bp0_next_pc_reg[30]_i_1_n_1 ;
  wire \bp0_next_pc_reg[30]_i_1_n_2 ;
  wire \bp0_next_pc_reg[30]_i_1_n_3 ;
  wire \bp0_next_pc_reg[30]_i_1_n_4 ;
  wire \bp0_next_pc_reg[30]_i_1_n_5 ;
  wire \bp0_next_pc_reg[30]_i_1_n_6 ;
  wire \bp0_next_pc_reg[30]_i_1_n_7 ;
  wire \bp0_next_pc_reg[6]_i_1_n_0 ;
  wire \bp0_next_pc_reg[6]_i_1_n_1 ;
  wire \bp0_next_pc_reg[6]_i_1_n_2 ;
  wire \bp0_next_pc_reg[6]_i_1_n_3 ;
  wire \bp0_next_pc_reg[6]_i_1_n_4 ;
  wire \bp0_next_pc_reg[6]_i_1_n_5 ;
  wire \bp0_next_pc_reg[6]_i_1_n_6 ;
  wire \bp0_next_pc_reg[6]_i_1_n_7 ;
  wire [0:31]bp1_PC_i;
  wire \bp1_PC_i_reg[0]_0 ;
  wire [31:0]\bp1_PC_i_reg[0]_1 ;
  wire \cur_data_i_reg[1] ;
  wire \cur_data_i_reg[2] ;
  wire \cur_data_i_reg[30] ;
  wire [31:0]\cur_data_i_reg[31] ;
  wire [31:0]\cur_data_i_reg[31]_0 ;
  wire \ex_PC_i_reg[0]_0 ;
  wire \ex_PC_i_reg_n_0_[0] ;
  wire \ex_PC_i_reg_n_0_[10] ;
  wire \ex_PC_i_reg_n_0_[11] ;
  wire \ex_PC_i_reg_n_0_[12] ;
  wire \ex_PC_i_reg_n_0_[13] ;
  wire \ex_PC_i_reg_n_0_[14] ;
  wire \ex_PC_i_reg_n_0_[15] ;
  wire \ex_PC_i_reg_n_0_[16] ;
  wire \ex_PC_i_reg_n_0_[17] ;
  wire \ex_PC_i_reg_n_0_[18] ;
  wire \ex_PC_i_reg_n_0_[19] ;
  wire \ex_PC_i_reg_n_0_[1] ;
  wire \ex_PC_i_reg_n_0_[20] ;
  wire \ex_PC_i_reg_n_0_[21] ;
  wire \ex_PC_i_reg_n_0_[22] ;
  wire \ex_PC_i_reg_n_0_[23] ;
  wire \ex_PC_i_reg_n_0_[24] ;
  wire \ex_PC_i_reg_n_0_[25] ;
  wire \ex_PC_i_reg_n_0_[26] ;
  wire \ex_PC_i_reg_n_0_[27] ;
  wire \ex_PC_i_reg_n_0_[28] ;
  wire \ex_PC_i_reg_n_0_[29] ;
  wire \ex_PC_i_reg_n_0_[2] ;
  wire \ex_PC_i_reg_n_0_[30] ;
  wire \ex_PC_i_reg_n_0_[31] ;
  wire \ex_PC_i_reg_n_0_[3] ;
  wire \ex_PC_i_reg_n_0_[4] ;
  wire \ex_PC_i_reg_n_0_[5] ;
  wire \ex_PC_i_reg_n_0_[6] ;
  wire \ex_PC_i_reg_n_0_[7] ;
  wire \ex_PC_i_reg_n_0_[8] ;
  wire \ex_PC_i_reg_n_0_[9] ;
  wire ex_set_msr_ie_instr;
  wire [0:0]if4_pre_buffer_addr;
  wire if4_push_instr_fetch;
  wire [0:0]if4_sel_input;
  wire in0;
  wire [0:0]\m0_PC_i_reg[0]_0 ;
  wire \m0_PC_i_reg_n_0_[0] ;
  wire \m0_PC_i_reg_n_0_[10] ;
  wire \m0_PC_i_reg_n_0_[11] ;
  wire \m0_PC_i_reg_n_0_[12] ;
  wire \m0_PC_i_reg_n_0_[13] ;
  wire \m0_PC_i_reg_n_0_[14] ;
  wire \m0_PC_i_reg_n_0_[15] ;
  wire \m0_PC_i_reg_n_0_[16] ;
  wire \m0_PC_i_reg_n_0_[17] ;
  wire \m0_PC_i_reg_n_0_[18] ;
  wire \m0_PC_i_reg_n_0_[19] ;
  wire \m0_PC_i_reg_n_0_[1] ;
  wire \m0_PC_i_reg_n_0_[20] ;
  wire \m0_PC_i_reg_n_0_[21] ;
  wire \m0_PC_i_reg_n_0_[22] ;
  wire \m0_PC_i_reg_n_0_[23] ;
  wire \m0_PC_i_reg_n_0_[24] ;
  wire \m0_PC_i_reg_n_0_[25] ;
  wire \m0_PC_i_reg_n_0_[26] ;
  wire \m0_PC_i_reg_n_0_[27] ;
  wire \m0_PC_i_reg_n_0_[28] ;
  wire \m0_PC_i_reg_n_0_[29] ;
  wire \m0_PC_i_reg_n_0_[2] ;
  wire \m0_PC_i_reg_n_0_[30] ;
  wire \m0_PC_i_reg_n_0_[31] ;
  wire \m0_PC_i_reg_n_0_[3] ;
  wire \m0_PC_i_reg_n_0_[4] ;
  wire \m0_PC_i_reg_n_0_[5] ;
  wire \m0_PC_i_reg_n_0_[6] ;
  wire \m0_PC_i_reg_n_0_[7] ;
  wire \m0_PC_i_reg_n_0_[8] ;
  wire \m0_PC_i_reg_n_0_[9] ;
  wire [0:31]m1_PC_i;
  wire [0:31]m2_PC_i;
  wire [0:0]\m2_PC_i_reg[0]_0 ;
  wire [0:0]\m3_PC_i_reg[0]_0 ;
  wire [3:0]\m3_PC_i_reg[11]_0 ;
  wire [3:0]\m3_PC_i_reg[15]_0 ;
  wire [3:0]\m3_PC_i_reg[19]_0 ;
  wire [1:0]\m3_PC_i_reg[1]_0 ;
  wire [3:0]\m3_PC_i_reg[23]_0 ;
  wire [0:0]\m3_PC_i_reg[29]_0 ;
  wire [3:0]\m3_PC_i_reg[3]_0 ;
  wire [3:0]\m3_PC_i_reg[7]_0 ;
  wire m3_exception_from_m2;
  wire of_op1_sel_spr_pc;
  wire sync_reset;
  wire [3:2]\NLW_WB_Exception_Return_Addr_reg[0]_i_2_CO_UNCONNECTED ;
  wire [3:3]\NLW_WB_Exception_Return_Addr_reg[0]_i_2_O_UNCONNECTED ;
  wire [3:2]\NLW_bp0_next_pc_reg[2]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_bp0_next_pc_reg[2]_i_1_O_UNCONNECTED ;

  microblaze_microblaze_0_0_OneHot_Buffer__parameterized3 PC_BUFFER_I1
       (.Clk(Clk),
        .\EX_Op1_reg[29] (\EX_Op1_reg[29] ),
        .\EX_Op1_reg[30] (\EX_Op1_reg[30] ),
        .\EX_Op1_reg[30]_0 (\EX_Op1_reg[30]_0 ),
        .addr({Prefetch_Buffer_Full,if4_pre_buffer_addr}),
        .\cur_data_i_reg[1]_0 (\cur_data_i_reg[1] ),
        .\cur_data_i_reg[2]_0 (\cur_data_i_reg[2] ),
        .\cur_data_i_reg[30]_0 (\cur_data_i_reg[30] ),
        .\cur_data_i_reg[31]_0 (\cur_data_i_reg[31] ),
        .\cur_data_i_reg[31]_1 (\ex_PC_i_reg[0]_0 ),
        .\cur_data_i_reg[31]_2 (\cur_data_i_reg[31]_0 ),
        .ex_set_msr_ie_instr(ex_set_msr_ie_instr),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .if4_sel_input(if4_sel_input),
        .of_op1_sel_spr_pc(of_op1_sel_spr_pc),
        .sync_reset(sync_reset));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__0_i_1
       (.I0(Q[8]),
        .I1(Q[9]),
        .O(\m3_PC_i_reg[23]_0 [3]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__0_i_2
       (.I0(Q[7]),
        .I1(Q[8]),
        .O(\m3_PC_i_reg[23]_0 [2]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__0_i_3
       (.I0(Q[6]),
        .I1(Q[7]),
        .O(\m3_PC_i_reg[23]_0 [1]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__0_i_4
       (.I0(Q[5]),
        .I1(Q[6]),
        .O(\m3_PC_i_reg[23]_0 [0]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__1_i_1
       (.I0(Q[12]),
        .I1(Q[13]),
        .O(\m3_PC_i_reg[19]_0 [3]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__1_i_2
       (.I0(Q[11]),
        .I1(Q[12]),
        .O(\m3_PC_i_reg[19]_0 [2]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__1_i_3
       (.I0(Q[10]),
        .I1(Q[11]),
        .O(\m3_PC_i_reg[19]_0 [1]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__1_i_4
       (.I0(Q[9]),
        .I1(Q[10]),
        .O(\m3_PC_i_reg[19]_0 [0]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__2_i_1
       (.I0(Q[16]),
        .I1(Q[17]),
        .O(\m3_PC_i_reg[15]_0 [3]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__2_i_2
       (.I0(Q[15]),
        .I1(Q[16]),
        .O(\m3_PC_i_reg[15]_0 [2]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__2_i_3
       (.I0(Q[14]),
        .I1(Q[15]),
        .O(\m3_PC_i_reg[15]_0 [1]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__2_i_4
       (.I0(Q[13]),
        .I1(Q[14]),
        .O(\m3_PC_i_reg[15]_0 [0]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__3_i_1
       (.I0(Q[20]),
        .I1(Q[21]),
        .O(\m3_PC_i_reg[11]_0 [3]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__3_i_2
       (.I0(Q[19]),
        .I1(Q[20]),
        .O(\m3_PC_i_reg[11]_0 [2]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__3_i_3
       (.I0(Q[18]),
        .I1(Q[19]),
        .O(\m3_PC_i_reg[11]_0 [1]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__3_i_4
       (.I0(Q[17]),
        .I1(Q[18]),
        .O(\m3_PC_i_reg[11]_0 [0]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__4_i_1
       (.I0(Q[24]),
        .I1(Q[25]),
        .O(\m3_PC_i_reg[7]_0 [3]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__4_i_2
       (.I0(Q[23]),
        .I1(Q[24]),
        .O(\m3_PC_i_reg[7]_0 [2]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__4_i_3
       (.I0(Q[22]),
        .I1(Q[23]),
        .O(\m3_PC_i_reg[7]_0 [1]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__4_i_4
       (.I0(Q[21]),
        .I1(Q[22]),
        .O(\m3_PC_i_reg[7]_0 [0]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__5_i_1
       (.I0(Q[28]),
        .I1(Q[29]),
        .O(\m3_PC_i_reg[3]_0 [3]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__5_i_2
       (.I0(Q[27]),
        .I1(Q[28]),
        .O(\m3_PC_i_reg[3]_0 [2]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__5_i_3
       (.I0(Q[26]),
        .I1(Q[27]),
        .O(\m3_PC_i_reg[3]_0 [1]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__5_i_4
       (.I0(Q[25]),
        .I1(Q[26]),
        .O(\m3_PC_i_reg[3]_0 [0]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__6_i_1
       (.I0(Q[30]),
        .I1(Q[31]),
        .O(\m3_PC_i_reg[1]_0 [1]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry__6_i_2
       (.I0(Q[29]),
        .I1(Q[30]),
        .O(\m3_PC_i_reg[1]_0 [0]));
  LUT3 #(
    .INIT(8'hEA)) 
    WB_Exception_Return_Addr0_carry_i_1
       (.I0(Q[2]),
        .I1(\WB_Exception_Return_Addr_reg[0] ),
        .I2(m3_exception_from_m2),
        .O(\m3_PC_i_reg[29]_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry_i_2
       (.I0(Q[4]),
        .I1(Q[5]),
        .O(S[3]));
  LUT2 #(
    .INIT(4'h9)) 
    WB_Exception_Return_Addr0_carry_i_3
       (.I0(Q[3]),
        .I1(Q[4]),
        .O(S[2]));
  LUT4 #(
    .INIT(16'hF807)) 
    WB_Exception_Return_Addr0_carry_i_4
       (.I0(m3_exception_from_m2),
        .I1(\WB_Exception_Return_Addr_reg[0] ),
        .I2(Q[2]),
        .I3(Q[3]),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h95)) 
    WB_Exception_Return_Addr0_carry_i_5
       (.I0(Q[2]),
        .I1(\WB_Exception_Return_Addr_reg[0] ),
        .I2(m3_exception_from_m2),
        .O(S[0]));
  LUT3 #(
    .INIT(8'h95)) 
    \WB_Exception_Return_Addr[27]_i_3 
       (.I0(Q[2]),
        .I1(\WB_Exception_Return_Addr_reg[0] ),
        .I2(m3_exception_from_m2),
        .O(\WB_Exception_Return_Addr[27]_i_3_n_0 ));
  CARRY4 \WB_Exception_Return_Addr_reg[0]_i_2 
       (.CI(\WB_Exception_Return_Addr_reg[3]_i_2_n_0 ),
        .CO({\NLW_WB_Exception_Return_Addr_reg[0]_i_2_CO_UNCONNECTED [3:2],\WB_Exception_Return_Addr_reg[0]_i_2_n_2 ,\WB_Exception_Return_Addr_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_WB_Exception_Return_Addr_reg[0]_i_2_O_UNCONNECTED [3],\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [31:29]}),
        .S({1'b0,Q[31:29]}));
  CARRY4 \WB_Exception_Return_Addr_reg[11]_i_2 
       (.CI(\WB_Exception_Return_Addr_reg[15]_i_2_n_0 ),
        .CO({\WB_Exception_Return_Addr_reg[11]_i_2_n_0 ,\WB_Exception_Return_Addr_reg[11]_i_2_n_1 ,\WB_Exception_Return_Addr_reg[11]_i_2_n_2 ,\WB_Exception_Return_Addr_reg[11]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [20:17]),
        .S(Q[20:17]));
  CARRY4 \WB_Exception_Return_Addr_reg[15]_i_2 
       (.CI(\WB_Exception_Return_Addr_reg[19]_i_2_n_0 ),
        .CO({\WB_Exception_Return_Addr_reg[15]_i_2_n_0 ,\WB_Exception_Return_Addr_reg[15]_i_2_n_1 ,\WB_Exception_Return_Addr_reg[15]_i_2_n_2 ,\WB_Exception_Return_Addr_reg[15]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [16:13]),
        .S(Q[16:13]));
  CARRY4 \WB_Exception_Return_Addr_reg[19]_i_2 
       (.CI(\WB_Exception_Return_Addr_reg[23]_i_2_n_0 ),
        .CO({\WB_Exception_Return_Addr_reg[19]_i_2_n_0 ,\WB_Exception_Return_Addr_reg[19]_i_2_n_1 ,\WB_Exception_Return_Addr_reg[19]_i_2_n_2 ,\WB_Exception_Return_Addr_reg[19]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [12:9]),
        .S(Q[12:9]));
  CARRY4 \WB_Exception_Return_Addr_reg[23]_i_2 
       (.CI(\WB_Exception_Return_Addr_reg[27]_i_2_n_0 ),
        .CO({\WB_Exception_Return_Addr_reg[23]_i_2_n_0 ,\WB_Exception_Return_Addr_reg[23]_i_2_n_1 ,\WB_Exception_Return_Addr_reg[23]_i_2_n_2 ,\WB_Exception_Return_Addr_reg[23]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [8:5]),
        .S(Q[8:5]));
  CARRY4 \WB_Exception_Return_Addr_reg[27]_i_2 
       (.CI(1'b0),
        .CO({\WB_Exception_Return_Addr_reg[27]_i_2_n_0 ,\WB_Exception_Return_Addr_reg[27]_i_2_n_1 ,\WB_Exception_Return_Addr_reg[27]_i_2_n_2 ,\WB_Exception_Return_Addr_reg[27]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,Q[2],1'b0}),
        .O(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [4:1]),
        .S({Q[4:3],\WB_Exception_Return_Addr[27]_i_3_n_0 ,Q[1]}));
  CARRY4 \WB_Exception_Return_Addr_reg[3]_i_2 
       (.CI(\WB_Exception_Return_Addr_reg[7]_i_2_n_0 ),
        .CO({\WB_Exception_Return_Addr_reg[3]_i_2_n_0 ,\WB_Exception_Return_Addr_reg[3]_i_2_n_1 ,\WB_Exception_Return_Addr_reg[3]_i_2_n_2 ,\WB_Exception_Return_Addr_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [28:25]),
        .S(Q[28:25]));
  CARRY4 \WB_Exception_Return_Addr_reg[7]_i_2 
       (.CI(\WB_Exception_Return_Addr_reg[11]_i_2_n_0 ),
        .CO({\WB_Exception_Return_Addr_reg[7]_i_2_n_0 ,\WB_Exception_Return_Addr_reg[7]_i_2_n_1 ,\WB_Exception_Return_Addr_reg[7]_i_2_n_2 ,\WB_Exception_Return_Addr_reg[7]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [24:21]),
        .S(Q[24:21]));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[10]_i_2 
       (.I0(\bp1_PC_i_reg[0]_1 [24]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[7]),
        .O(\bp0_next_pc[10]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[10]_i_3 
       (.I0(\bp1_PC_i_reg[0]_1 [23]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[8]),
        .O(\bp0_next_pc[10]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[10]_i_4 
       (.I0(\bp1_PC_i_reg[0]_1 [22]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[9]),
        .O(\bp0_next_pc[10]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[10]_i_5 
       (.I0(\bp1_PC_i_reg[0]_1 [21]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[10]),
        .O(\bp0_next_pc[10]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[14]_i_2 
       (.I0(\bp1_PC_i_reg[0]_1 [20]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[11]),
        .O(\bp0_next_pc[14]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[14]_i_3 
       (.I0(\bp1_PC_i_reg[0]_1 [19]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[12]),
        .O(\bp0_next_pc[14]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[14]_i_4 
       (.I0(\bp1_PC_i_reg[0]_1 [18]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[13]),
        .O(\bp0_next_pc[14]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[14]_i_5 
       (.I0(\bp1_PC_i_reg[0]_1 [17]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[14]),
        .O(\bp0_next_pc[14]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[18]_i_2 
       (.I0(\bp1_PC_i_reg[0]_1 [16]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[15]),
        .O(\bp0_next_pc[18]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[18]_i_3 
       (.I0(\bp1_PC_i_reg[0]_1 [15]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[16]),
        .O(\bp0_next_pc[18]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[18]_i_4 
       (.I0(\bp1_PC_i_reg[0]_1 [14]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[17]),
        .O(\bp0_next_pc[18]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[18]_i_5 
       (.I0(\bp1_PC_i_reg[0]_1 [13]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[18]),
        .O(\bp0_next_pc[18]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[22]_i_2 
       (.I0(\bp1_PC_i_reg[0]_1 [12]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[19]),
        .O(\bp0_next_pc[22]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[22]_i_3 
       (.I0(\bp1_PC_i_reg[0]_1 [11]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[20]),
        .O(\bp0_next_pc[22]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[22]_i_4 
       (.I0(\bp1_PC_i_reg[0]_1 [10]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[21]),
        .O(\bp0_next_pc[22]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[22]_i_5 
       (.I0(\bp1_PC_i_reg[0]_1 [9]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[22]),
        .O(\bp0_next_pc[22]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[26]_i_2 
       (.I0(\bp1_PC_i_reg[0]_1 [8]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[23]),
        .O(\bp0_next_pc[26]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[26]_i_3 
       (.I0(\bp1_PC_i_reg[0]_1 [7]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[24]),
        .O(\bp0_next_pc[26]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[26]_i_4 
       (.I0(\bp1_PC_i_reg[0]_1 [6]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[25]),
        .O(\bp0_next_pc[26]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[26]_i_5 
       (.I0(\bp1_PC_i_reg[0]_1 [5]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[26]),
        .O(\bp0_next_pc[26]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[2]_i_2 
       (.I0(\bp1_PC_i_reg[0]_1 [31]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[0]),
        .O(\bp0_next_pc[2]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[2]_i_3 
       (.I0(\bp1_PC_i_reg[0]_1 [30]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[1]),
        .O(\bp0_next_pc[2]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[2]_i_4 
       (.I0(\bp1_PC_i_reg[0]_1 [29]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[2]),
        .O(\bp0_next_pc[2]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[30]_i_2 
       (.I0(\bp1_PC_i_reg[0]_1 [4]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[27]),
        .O(\bp0_next_pc[30]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[30]_i_3 
       (.I0(\bp1_PC_i_reg[0]_1 [3]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[28]),
        .O(\bp0_next_pc[30]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h56A6)) 
    \bp0_next_pc[30]_i_4 
       (.I0(DI),
        .I1(bp0_next_pc_reg[29]),
        .I2(bp0_jump),
        .I3(\bp1_PC_i_reg[0]_1 [2]),
        .O(\bp0_next_pc[30]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[30]_i_5 
       (.I0(\bp1_PC_i_reg[0]_1 [1]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[30]),
        .O(\bp0_next_pc[30]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[6]_i_2 
       (.I0(\bp1_PC_i_reg[0]_1 [28]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[3]),
        .O(\bp0_next_pc[6]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[6]_i_3 
       (.I0(\bp1_PC_i_reg[0]_1 [27]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[4]),
        .O(\bp0_next_pc[6]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[6]_i_4 
       (.I0(\bp1_PC_i_reg[0]_1 [26]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[5]),
        .O(\bp0_next_pc[6]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \bp0_next_pc[6]_i_5 
       (.I0(\bp1_PC_i_reg[0]_1 [25]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[6]),
        .O(\bp0_next_pc[6]_i_5_n_0 ));
  FDRE \bp0_next_pc_reg[0] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[2]_i_1_n_5 ),
        .Q(bp0_next_pc_reg[0]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[10] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[10]_i_1_n_7 ),
        .Q(bp0_next_pc_reg[10]),
        .R(sync_reset));
  CARRY4 \bp0_next_pc_reg[10]_i_1 
       (.CI(\bp0_next_pc_reg[14]_i_1_n_0 ),
        .CO({\bp0_next_pc_reg[10]_i_1_n_0 ,\bp0_next_pc_reg[10]_i_1_n_1 ,\bp0_next_pc_reg[10]_i_1_n_2 ,\bp0_next_pc_reg[10]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\bp0_next_pc_reg[10]_i_1_n_4 ,\bp0_next_pc_reg[10]_i_1_n_5 ,\bp0_next_pc_reg[10]_i_1_n_6 ,\bp0_next_pc_reg[10]_i_1_n_7 }),
        .S({\bp0_next_pc[10]_i_2_n_0 ,\bp0_next_pc[10]_i_3_n_0 ,\bp0_next_pc[10]_i_4_n_0 ,\bp0_next_pc[10]_i_5_n_0 }));
  FDRE \bp0_next_pc_reg[11] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[14]_i_1_n_4 ),
        .Q(bp0_next_pc_reg[11]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[12] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[14]_i_1_n_5 ),
        .Q(bp0_next_pc_reg[12]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[13] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[14]_i_1_n_6 ),
        .Q(bp0_next_pc_reg[13]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[14] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[14]_i_1_n_7 ),
        .Q(bp0_next_pc_reg[14]),
        .R(sync_reset));
  CARRY4 \bp0_next_pc_reg[14]_i_1 
       (.CI(\bp0_next_pc_reg[18]_i_1_n_0 ),
        .CO({\bp0_next_pc_reg[14]_i_1_n_0 ,\bp0_next_pc_reg[14]_i_1_n_1 ,\bp0_next_pc_reg[14]_i_1_n_2 ,\bp0_next_pc_reg[14]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\bp0_next_pc_reg[14]_i_1_n_4 ,\bp0_next_pc_reg[14]_i_1_n_5 ,\bp0_next_pc_reg[14]_i_1_n_6 ,\bp0_next_pc_reg[14]_i_1_n_7 }),
        .S({\bp0_next_pc[14]_i_2_n_0 ,\bp0_next_pc[14]_i_3_n_0 ,\bp0_next_pc[14]_i_4_n_0 ,\bp0_next_pc[14]_i_5_n_0 }));
  FDRE \bp0_next_pc_reg[15] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[18]_i_1_n_4 ),
        .Q(bp0_next_pc_reg[15]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[16] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[18]_i_1_n_5 ),
        .Q(bp0_next_pc_reg[16]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[17] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[18]_i_1_n_6 ),
        .Q(bp0_next_pc_reg[17]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[18] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[18]_i_1_n_7 ),
        .Q(bp0_next_pc_reg[18]),
        .R(sync_reset));
  CARRY4 \bp0_next_pc_reg[18]_i_1 
       (.CI(\bp0_next_pc_reg[22]_i_1_n_0 ),
        .CO({\bp0_next_pc_reg[18]_i_1_n_0 ,\bp0_next_pc_reg[18]_i_1_n_1 ,\bp0_next_pc_reg[18]_i_1_n_2 ,\bp0_next_pc_reg[18]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\bp0_next_pc_reg[18]_i_1_n_4 ,\bp0_next_pc_reg[18]_i_1_n_5 ,\bp0_next_pc_reg[18]_i_1_n_6 ,\bp0_next_pc_reg[18]_i_1_n_7 }),
        .S({\bp0_next_pc[18]_i_2_n_0 ,\bp0_next_pc[18]_i_3_n_0 ,\bp0_next_pc[18]_i_4_n_0 ,\bp0_next_pc[18]_i_5_n_0 }));
  FDRE \bp0_next_pc_reg[19] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[22]_i_1_n_4 ),
        .Q(bp0_next_pc_reg[19]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[1] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[2]_i_1_n_6 ),
        .Q(bp0_next_pc_reg[1]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[20] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[22]_i_1_n_5 ),
        .Q(bp0_next_pc_reg[20]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[21] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[22]_i_1_n_6 ),
        .Q(bp0_next_pc_reg[21]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[22] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[22]_i_1_n_7 ),
        .Q(bp0_next_pc_reg[22]),
        .R(sync_reset));
  CARRY4 \bp0_next_pc_reg[22]_i_1 
       (.CI(\bp0_next_pc_reg[26]_i_1_n_0 ),
        .CO({\bp0_next_pc_reg[22]_i_1_n_0 ,\bp0_next_pc_reg[22]_i_1_n_1 ,\bp0_next_pc_reg[22]_i_1_n_2 ,\bp0_next_pc_reg[22]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\bp0_next_pc_reg[22]_i_1_n_4 ,\bp0_next_pc_reg[22]_i_1_n_5 ,\bp0_next_pc_reg[22]_i_1_n_6 ,\bp0_next_pc_reg[22]_i_1_n_7 }),
        .S({\bp0_next_pc[22]_i_2_n_0 ,\bp0_next_pc[22]_i_3_n_0 ,\bp0_next_pc[22]_i_4_n_0 ,\bp0_next_pc[22]_i_5_n_0 }));
  FDRE \bp0_next_pc_reg[23] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[26]_i_1_n_4 ),
        .Q(bp0_next_pc_reg[23]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[24] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[26]_i_1_n_5 ),
        .Q(bp0_next_pc_reg[24]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[25] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[26]_i_1_n_6 ),
        .Q(bp0_next_pc_reg[25]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[26] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[26]_i_1_n_7 ),
        .Q(bp0_next_pc_reg[26]),
        .R(sync_reset));
  CARRY4 \bp0_next_pc_reg[26]_i_1 
       (.CI(\bp0_next_pc_reg[30]_i_1_n_0 ),
        .CO({\bp0_next_pc_reg[26]_i_1_n_0 ,\bp0_next_pc_reg[26]_i_1_n_1 ,\bp0_next_pc_reg[26]_i_1_n_2 ,\bp0_next_pc_reg[26]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\bp0_next_pc_reg[26]_i_1_n_4 ,\bp0_next_pc_reg[26]_i_1_n_5 ,\bp0_next_pc_reg[26]_i_1_n_6 ,\bp0_next_pc_reg[26]_i_1_n_7 }),
        .S({\bp0_next_pc[26]_i_2_n_0 ,\bp0_next_pc[26]_i_3_n_0 ,\bp0_next_pc[26]_i_4_n_0 ,\bp0_next_pc[26]_i_5_n_0 }));
  FDRE \bp0_next_pc_reg[27] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[30]_i_1_n_4 ),
        .Q(bp0_next_pc_reg[27]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[28] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[30]_i_1_n_5 ),
        .Q(bp0_next_pc_reg[28]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[29] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[30]_i_1_n_6 ),
        .Q(bp0_next_pc_reg[29]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[2] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[2]_i_1_n_7 ),
        .Q(bp0_next_pc_reg[2]),
        .R(sync_reset));
  CARRY4 \bp0_next_pc_reg[2]_i_1 
       (.CI(\bp0_next_pc_reg[6]_i_1_n_0 ),
        .CO({\NLW_bp0_next_pc_reg[2]_i_1_CO_UNCONNECTED [3:2],\bp0_next_pc_reg[2]_i_1_n_2 ,\bp0_next_pc_reg[2]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_bp0_next_pc_reg[2]_i_1_O_UNCONNECTED [3],\bp0_next_pc_reg[2]_i_1_n_5 ,\bp0_next_pc_reg[2]_i_1_n_6 ,\bp0_next_pc_reg[2]_i_1_n_7 }),
        .S({1'b0,\bp0_next_pc[2]_i_2_n_0 ,\bp0_next_pc[2]_i_3_n_0 ,\bp0_next_pc[2]_i_4_n_0 }));
  FDRE \bp0_next_pc_reg[30] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[30]_i_1_n_7 ),
        .Q(bp0_next_pc_reg[30]),
        .R(sync_reset));
  CARRY4 \bp0_next_pc_reg[30]_i_1 
       (.CI(1'b0),
        .CO({\bp0_next_pc_reg[30]_i_1_n_0 ,\bp0_next_pc_reg[30]_i_1_n_1 ,\bp0_next_pc_reg[30]_i_1_n_2 ,\bp0_next_pc_reg[30]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,DI,1'b0}),
        .O({\bp0_next_pc_reg[30]_i_1_n_4 ,\bp0_next_pc_reg[30]_i_1_n_5 ,\bp0_next_pc_reg[30]_i_1_n_6 ,\bp0_next_pc_reg[30]_i_1_n_7 }),
        .S({\bp0_next_pc[30]_i_2_n_0 ,\bp0_next_pc[30]_i_3_n_0 ,\bp0_next_pc[30]_i_4_n_0 ,\bp0_next_pc[30]_i_5_n_0 }));
  FDRE \bp0_next_pc_reg[3] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[6]_i_1_n_4 ),
        .Q(bp0_next_pc_reg[3]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[4] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[6]_i_1_n_5 ),
        .Q(bp0_next_pc_reg[4]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[5] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[6]_i_1_n_6 ),
        .Q(bp0_next_pc_reg[5]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[6] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[6]_i_1_n_7 ),
        .Q(bp0_next_pc_reg[6]),
        .R(sync_reset));
  CARRY4 \bp0_next_pc_reg[6]_i_1 
       (.CI(\bp0_next_pc_reg[10]_i_1_n_0 ),
        .CO({\bp0_next_pc_reg[6]_i_1_n_0 ,\bp0_next_pc_reg[6]_i_1_n_1 ,\bp0_next_pc_reg[6]_i_1_n_2 ,\bp0_next_pc_reg[6]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\bp0_next_pc_reg[6]_i_1_n_4 ,\bp0_next_pc_reg[6]_i_1_n_5 ,\bp0_next_pc_reg[6]_i_1_n_6 ,\bp0_next_pc_reg[6]_i_1_n_7 }),
        .S({\bp0_next_pc[6]_i_2_n_0 ,\bp0_next_pc[6]_i_3_n_0 ,\bp0_next_pc[6]_i_4_n_0 ,\bp0_next_pc[6]_i_5_n_0 }));
  FDRE \bp0_next_pc_reg[7] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[10]_i_1_n_4 ),
        .Q(bp0_next_pc_reg[7]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[8] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[10]_i_1_n_5 ),
        .Q(bp0_next_pc_reg[8]),
        .R(sync_reset));
  FDRE \bp0_next_pc_reg[9] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(\bp0_next_pc_reg[10]_i_1_n_6 ),
        .Q(bp0_next_pc_reg[9]),
        .R(sync_reset));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[0]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [31]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[0]),
        .O(bp0_new_pc[0]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[10]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [21]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[10]),
        .O(bp0_new_pc[10]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[11]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [20]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[11]),
        .O(bp0_new_pc[11]));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[12]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [19]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[12]),
        .O(bp0_new_pc[12]));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[13]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [18]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[13]),
        .O(bp0_new_pc[13]));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[14]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [17]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[14]),
        .O(bp0_new_pc[14]));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[15]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [16]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[15]),
        .O(bp0_new_pc[15]));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[16]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [15]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[16]),
        .O(bp0_new_pc[16]));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[17]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [14]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[17]),
        .O(bp0_new_pc[17]));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[18]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [13]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[18]),
        .O(bp0_new_pc[18]));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[19]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [12]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[19]),
        .O(bp0_new_pc[19]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[1]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [30]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[1]),
        .O(bp0_new_pc[1]));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[20]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [11]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[20]),
        .O(bp0_new_pc[20]));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[21]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [10]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[21]),
        .O(bp0_new_pc[21]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[22]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [9]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[22]),
        .O(bp0_new_pc[22]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[23]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [8]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[23]),
        .O(bp0_new_pc[23]));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[24]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [7]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[24]),
        .O(bp0_new_pc[24]));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[25]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [6]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[25]),
        .O(bp0_new_pc[25]));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[26]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [5]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[26]),
        .O(bp0_new_pc[26]));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[27]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [4]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[27]),
        .O(bp0_new_pc[27]));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[28]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [3]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[28]),
        .O(bp0_new_pc[28]));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[29]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [2]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[29]),
        .O(bp0_new_pc[29]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[2]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [29]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[2]),
        .O(bp0_new_pc[2]));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[30]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [1]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[30]),
        .O(bp0_new_pc[30]));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[31]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [0]),
        .I1(bp0_jump),
        .I2(bp1_PC_i[31]),
        .O(bp0_new_pc[31]));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[3]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [28]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[3]),
        .O(bp0_new_pc[3]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[4]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [27]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[4]),
        .O(bp0_new_pc[4]));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[5]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [26]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[5]),
        .O(bp0_new_pc[5]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[6]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [25]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[6]),
        .O(bp0_new_pc[6]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[7]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [24]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[7]),
        .O(bp0_new_pc[7]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[8]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [23]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[8]),
        .O(bp0_new_pc[8]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \bp1_PC_i[9]_i_1 
       (.I0(\bp1_PC_i_reg[0]_1 [22]),
        .I1(bp0_jump),
        .I2(bp0_next_pc_reg[9]),
        .O(bp0_new_pc[9]));
  FDRE \bp1_PC_i_reg[0] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[0]),
        .Q(bp1_PC_i[0]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[10] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[10]),
        .Q(bp1_PC_i[10]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[11] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[11]),
        .Q(bp1_PC_i[11]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[12] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[12]),
        .Q(bp1_PC_i[12]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[13] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[13]),
        .Q(bp1_PC_i[13]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[14] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[14]),
        .Q(bp1_PC_i[14]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[15] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[15]),
        .Q(bp1_PC_i[15]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[16] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[16]),
        .Q(bp1_PC_i[16]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[17] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[17]),
        .Q(bp1_PC_i[17]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[18] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[18]),
        .Q(bp1_PC_i[18]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[19] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[19]),
        .Q(bp1_PC_i[19]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[1] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[1]),
        .Q(bp1_PC_i[1]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[20] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[20]),
        .Q(bp1_PC_i[20]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[21] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[21]),
        .Q(bp1_PC_i[21]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[22] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[22]),
        .Q(bp1_PC_i[22]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[23] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[23]),
        .Q(bp1_PC_i[23]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[24] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[24]),
        .Q(bp1_PC_i[24]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[25] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[25]),
        .Q(bp1_PC_i[25]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[26] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[26]),
        .Q(bp1_PC_i[26]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[27] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[27]),
        .Q(bp1_PC_i[27]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[28] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[28]),
        .Q(bp1_PC_i[28]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[29] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[29]),
        .Q(bp1_PC_i[29]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[2] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[2]),
        .Q(bp1_PC_i[2]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[30] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[30]),
        .Q(bp1_PC_i[30]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[31] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[31]),
        .Q(bp1_PC_i[31]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[3] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[3]),
        .Q(bp1_PC_i[3]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[4] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[4]),
        .Q(bp1_PC_i[4]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[5] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[5]),
        .Q(bp1_PC_i[5]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[6] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[6]),
        .Q(bp1_PC_i[6]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[7] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[7]),
        .Q(bp1_PC_i[7]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[8] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[8]),
        .Q(bp1_PC_i[8]),
        .R(sync_reset));
  FDRE \bp1_PC_i_reg[9] 
       (.C(Clk),
        .CE(\bp1_PC_i_reg[0]_0 ),
        .D(bp0_new_pc[9]),
        .Q(bp1_PC_i[9]),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[0] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [31]),
        .Q(\ex_PC_i_reg_n_0_[0] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[10] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [21]),
        .Q(\ex_PC_i_reg_n_0_[10] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[11] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [20]),
        .Q(\ex_PC_i_reg_n_0_[11] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[12] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [19]),
        .Q(\ex_PC_i_reg_n_0_[12] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[13] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [18]),
        .Q(\ex_PC_i_reg_n_0_[13] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[14] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [17]),
        .Q(\ex_PC_i_reg_n_0_[14] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[15] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [16]),
        .Q(\ex_PC_i_reg_n_0_[15] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[16] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [15]),
        .Q(\ex_PC_i_reg_n_0_[16] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[17] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [14]),
        .Q(\ex_PC_i_reg_n_0_[17] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[18] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [13]),
        .Q(\ex_PC_i_reg_n_0_[18] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[19] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [12]),
        .Q(\ex_PC_i_reg_n_0_[19] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[1] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [30]),
        .Q(\ex_PC_i_reg_n_0_[1] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[20] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [11]),
        .Q(\ex_PC_i_reg_n_0_[20] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[21] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [10]),
        .Q(\ex_PC_i_reg_n_0_[21] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[22] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [9]),
        .Q(\ex_PC_i_reg_n_0_[22] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[23] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [8]),
        .Q(\ex_PC_i_reg_n_0_[23] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[24] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [7]),
        .Q(\ex_PC_i_reg_n_0_[24] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[25] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [6]),
        .Q(\ex_PC_i_reg_n_0_[25] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[26] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [5]),
        .Q(\ex_PC_i_reg_n_0_[26] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[27] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [4]),
        .Q(\ex_PC_i_reg_n_0_[27] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[28] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [3]),
        .Q(\ex_PC_i_reg_n_0_[28] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[29] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [2]),
        .Q(\ex_PC_i_reg_n_0_[29] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[2] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [29]),
        .Q(\ex_PC_i_reg_n_0_[2] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[30] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [1]),
        .Q(\ex_PC_i_reg_n_0_[30] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[31] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [0]),
        .Q(\ex_PC_i_reg_n_0_[31] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[3] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [28]),
        .Q(\ex_PC_i_reg_n_0_[3] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[4] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [27]),
        .Q(\ex_PC_i_reg_n_0_[4] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[5] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [26]),
        .Q(\ex_PC_i_reg_n_0_[5] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[6] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [25]),
        .Q(\ex_PC_i_reg_n_0_[6] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[7] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [24]),
        .Q(\ex_PC_i_reg_n_0_[7] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[8] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [23]),
        .Q(\ex_PC_i_reg_n_0_[8] ),
        .R(sync_reset));
  FDRE \ex_PC_i_reg[9] 
       (.C(Clk),
        .CE(\ex_PC_i_reg[0]_0 ),
        .D(\cur_data_i_reg[31] [22]),
        .Q(\ex_PC_i_reg_n_0_[9] ),
        .R(sync_reset));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[0]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [31]),
        .I1(WB_Exception_Return_Addr0[29]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [30]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[10]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [21]),
        .I1(WB_Exception_Return_Addr0[19]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [20]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[11]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [20]),
        .I1(WB_Exception_Return_Addr0[18]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [19]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[12]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [19]),
        .I1(WB_Exception_Return_Addr0[17]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [18]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[13]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [18]),
        .I1(WB_Exception_Return_Addr0[16]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [17]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[14]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [17]),
        .I1(WB_Exception_Return_Addr0[15]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [16]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[15]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [16]),
        .I1(WB_Exception_Return_Addr0[14]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [15]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[16]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [15]),
        .I1(WB_Exception_Return_Addr0[13]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [14]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[17]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [14]),
        .I1(WB_Exception_Return_Addr0[12]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [13]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[18]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [13]),
        .I1(WB_Exception_Return_Addr0[11]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [12]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[19]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [12]),
        .I1(WB_Exception_Return_Addr0[10]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [11]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[1]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [30]),
        .I1(WB_Exception_Return_Addr0[28]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [29]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[20]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [11]),
        .I1(WB_Exception_Return_Addr0[9]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [10]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[21]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [10]),
        .I1(WB_Exception_Return_Addr0[8]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [9]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[22]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [9]),
        .I1(WB_Exception_Return_Addr0[7]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [8]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[23]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [8]),
        .I1(WB_Exception_Return_Addr0[6]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [7]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[24]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [7]),
        .I1(WB_Exception_Return_Addr0[5]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [6]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[25]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [6]),
        .I1(WB_Exception_Return_Addr0[4]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [5]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[26]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [5]),
        .I1(WB_Exception_Return_Addr0[3]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [4]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[27]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [4]),
        .I1(WB_Exception_Return_Addr0[2]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [3]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[28]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [3]),
        .I1(WB_Exception_Return_Addr0[1]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [2]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[29]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [2]),
        .I1(WB_Exception_Return_Addr0[0]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [1]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[2]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [29]),
        .I1(WB_Exception_Return_Addr0[27]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [28]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[30]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [1]),
        .I1(Q[1]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [0]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[3]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [28]),
        .I1(WB_Exception_Return_Addr0[26]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [27]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[4]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [27]),
        .I1(WB_Exception_Return_Addr0[25]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [26]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[5]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [26]),
        .I1(WB_Exception_Return_Addr0[24]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [25]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[6]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [25]),
        .I1(WB_Exception_Return_Addr0[23]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [24]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[7]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [24]),
        .I1(WB_Exception_Return_Addr0[22]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [23]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[8]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [23]),
        .I1(WB_Exception_Return_Addr0[21]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [22]));
  LUT4 #(
    .INIT(16'hCAAA)) 
    \exception_registers_I1/WB_Exception_Return_Addr[9]_i_1 
       (.I0(\DATA_FLOW_I1/exception_registers_I1/WB_Exception_Return_Addr01_in [22]),
        .I1(WB_Exception_Return_Addr0[20]),
        .I2(m3_exception_from_m2),
        .I3(\WB_Exception_Return_Addr_reg[0] ),
        .O(\Using_FPGA.Native [21]));
  FDRE \if0_PC_i_reg[0] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[0]),
        .Q(D[31]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[10] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[10]),
        .Q(D[21]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[11] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[11]),
        .Q(D[20]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[12] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[12]),
        .Q(D[19]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[13] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[13]),
        .Q(D[18]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[14] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[14]),
        .Q(D[17]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[15] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[15]),
        .Q(D[16]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[16] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[16]),
        .Q(D[15]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[17] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[17]),
        .Q(D[14]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[18] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[18]),
        .Q(D[13]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[19] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[19]),
        .Q(D[12]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[1] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[1]),
        .Q(D[30]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[20] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[20]),
        .Q(D[11]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[21] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[21]),
        .Q(D[10]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[22] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[22]),
        .Q(D[9]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[23] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[23]),
        .Q(D[8]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[24] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[24]),
        .Q(D[7]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[25] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[25]),
        .Q(D[6]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[26] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[26]),
        .Q(D[5]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[27] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[27]),
        .Q(D[4]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[28] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[28]),
        .Q(D[3]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[29] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[29]),
        .Q(D[2]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[2] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[2]),
        .Q(D[29]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[30] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[30]),
        .Q(D[1]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[31] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[31]),
        .Q(D[0]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[3] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[3]),
        .Q(D[28]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[4] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[4]),
        .Q(D[27]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[5] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[5]),
        .Q(D[26]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[6] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[6]),
        .Q(D[25]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[7] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[7]),
        .Q(D[24]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[8] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[8]),
        .Q(D[23]),
        .R(sync_reset));
  FDRE \if0_PC_i_reg[9] 
       (.C(Clk),
        .CE(E),
        .D(bp1_PC_i[9]),
        .Q(D[22]),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[0] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[0] ),
        .Q(\m0_PC_i_reg_n_0_[0] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[10] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[10] ),
        .Q(\m0_PC_i_reg_n_0_[10] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[11] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[11] ),
        .Q(\m0_PC_i_reg_n_0_[11] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[12] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[12] ),
        .Q(\m0_PC_i_reg_n_0_[12] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[13] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[13] ),
        .Q(\m0_PC_i_reg_n_0_[13] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[14] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[14] ),
        .Q(\m0_PC_i_reg_n_0_[14] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[15] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[15] ),
        .Q(\m0_PC_i_reg_n_0_[15] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[16] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[16] ),
        .Q(\m0_PC_i_reg_n_0_[16] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[17] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[17] ),
        .Q(\m0_PC_i_reg_n_0_[17] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[18] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[18] ),
        .Q(\m0_PC_i_reg_n_0_[18] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[19] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[19] ),
        .Q(\m0_PC_i_reg_n_0_[19] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[1] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[1] ),
        .Q(\m0_PC_i_reg_n_0_[1] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[20] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[20] ),
        .Q(\m0_PC_i_reg_n_0_[20] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[21] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[21] ),
        .Q(\m0_PC_i_reg_n_0_[21] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[22] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[22] ),
        .Q(\m0_PC_i_reg_n_0_[22] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[23] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[23] ),
        .Q(\m0_PC_i_reg_n_0_[23] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[24] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[24] ),
        .Q(\m0_PC_i_reg_n_0_[24] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[25] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[25] ),
        .Q(\m0_PC_i_reg_n_0_[25] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[26] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[26] ),
        .Q(\m0_PC_i_reg_n_0_[26] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[27] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[27] ),
        .Q(\m0_PC_i_reg_n_0_[27] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[28] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[28] ),
        .Q(\m0_PC_i_reg_n_0_[28] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[29] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[29] ),
        .Q(\m0_PC_i_reg_n_0_[29] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[2] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[2] ),
        .Q(\m0_PC_i_reg_n_0_[2] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[30] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[30] ),
        .Q(\m0_PC_i_reg_n_0_[30] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[31] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[31] ),
        .Q(\m0_PC_i_reg_n_0_[31] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[3] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[3] ),
        .Q(\m0_PC_i_reg_n_0_[3] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[4] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[4] ),
        .Q(\m0_PC_i_reg_n_0_[4] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[5] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[5] ),
        .Q(\m0_PC_i_reg_n_0_[5] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[6] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[6] ),
        .Q(\m0_PC_i_reg_n_0_[6] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[7] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[7] ),
        .Q(\m0_PC_i_reg_n_0_[7] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[8] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[8] ),
        .Q(\m0_PC_i_reg_n_0_[8] ),
        .R(sync_reset));
  FDRE \m0_PC_i_reg[9] 
       (.C(Clk),
        .CE(\m0_PC_i_reg[0]_0 ),
        .D(\ex_PC_i_reg_n_0_[9] ),
        .Q(\m0_PC_i_reg_n_0_[9] ),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[0] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[0] ),
        .Q(m1_PC_i[0]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[10] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[10] ),
        .Q(m1_PC_i[10]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[11] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[11] ),
        .Q(m1_PC_i[11]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[12] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[12] ),
        .Q(m1_PC_i[12]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[13] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[13] ),
        .Q(m1_PC_i[13]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[14] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[14] ),
        .Q(m1_PC_i[14]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[15] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[15] ),
        .Q(m1_PC_i[15]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[16] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[16] ),
        .Q(m1_PC_i[16]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[17] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[17] ),
        .Q(m1_PC_i[17]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[18] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[18] ),
        .Q(m1_PC_i[18]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[19] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[19] ),
        .Q(m1_PC_i[19]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[1] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[1] ),
        .Q(m1_PC_i[1]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[20] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[20] ),
        .Q(m1_PC_i[20]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[21] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[21] ),
        .Q(m1_PC_i[21]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[22] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[22] ),
        .Q(m1_PC_i[22]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[23] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[23] ),
        .Q(m1_PC_i[23]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[24] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[24] ),
        .Q(m1_PC_i[24]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[25] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[25] ),
        .Q(m1_PC_i[25]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[26] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[26] ),
        .Q(m1_PC_i[26]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[27] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[27] ),
        .Q(m1_PC_i[27]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[28] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[28] ),
        .Q(m1_PC_i[28]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[29] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[29] ),
        .Q(m1_PC_i[29]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[2] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[2] ),
        .Q(m1_PC_i[2]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[30] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[30] ),
        .Q(m1_PC_i[30]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[31] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[31] ),
        .Q(m1_PC_i[31]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[3] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[3] ),
        .Q(m1_PC_i[3]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[4] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[4] ),
        .Q(m1_PC_i[4]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[5] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[5] ),
        .Q(m1_PC_i[5]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[6] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[6] ),
        .Q(m1_PC_i[6]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[7] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[7] ),
        .Q(m1_PC_i[7]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[8] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[8] ),
        .Q(m1_PC_i[8]),
        .R(sync_reset));
  FDRE \m1_PC_i_reg[9] 
       (.C(Clk),
        .CE(in0),
        .D(\m0_PC_i_reg_n_0_[9] ),
        .Q(m1_PC_i[9]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[0] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[0]),
        .Q(m2_PC_i[0]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[10] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[10]),
        .Q(m2_PC_i[10]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[11] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[11]),
        .Q(m2_PC_i[11]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[12] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[12]),
        .Q(m2_PC_i[12]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[13] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[13]),
        .Q(m2_PC_i[13]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[14] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[14]),
        .Q(m2_PC_i[14]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[15] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[15]),
        .Q(m2_PC_i[15]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[16] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[16]),
        .Q(m2_PC_i[16]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[17] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[17]),
        .Q(m2_PC_i[17]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[18] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[18]),
        .Q(m2_PC_i[18]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[19] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[19]),
        .Q(m2_PC_i[19]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[1] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[1]),
        .Q(m2_PC_i[1]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[20] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[20]),
        .Q(m2_PC_i[20]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[21] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[21]),
        .Q(m2_PC_i[21]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[22] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[22]),
        .Q(m2_PC_i[22]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[23] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[23]),
        .Q(m2_PC_i[23]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[24] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[24]),
        .Q(m2_PC_i[24]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[25] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[25]),
        .Q(m2_PC_i[25]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[26] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[26]),
        .Q(m2_PC_i[26]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[27] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[27]),
        .Q(m2_PC_i[27]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[28] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[28]),
        .Q(m2_PC_i[28]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[29] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[29]),
        .Q(m2_PC_i[29]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[2] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[2]),
        .Q(m2_PC_i[2]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[30] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[30]),
        .Q(m2_PC_i[30]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[31] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[31]),
        .Q(m2_PC_i[31]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[3] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[3]),
        .Q(m2_PC_i[3]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[4] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[4]),
        .Q(m2_PC_i[4]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[5] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[5]),
        .Q(m2_PC_i[5]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[6] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[6]),
        .Q(m2_PC_i[6]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[7] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[7]),
        .Q(m2_PC_i[7]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[8] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[8]),
        .Q(m2_PC_i[8]),
        .R(sync_reset));
  FDRE \m2_PC_i_reg[9] 
       (.C(Clk),
        .CE(\m2_PC_i_reg[0]_0 ),
        .D(m1_PC_i[9]),
        .Q(m2_PC_i[9]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[0] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[0]),
        .Q(Q[31]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[10] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[10]),
        .Q(Q[21]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[11] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[11]),
        .Q(Q[20]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[12] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[12]),
        .Q(Q[19]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[13] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[13]),
        .Q(Q[18]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[14] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[14]),
        .Q(Q[17]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[15] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[15]),
        .Q(Q[16]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[16] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[16]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[17] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[17]),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[18] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[18]),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[19] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[19]),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[1] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[1]),
        .Q(Q[30]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[20] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[20]),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[21] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[21]),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[22] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[22]),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[23] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[23]),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[24] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[24]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[25] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[25]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[26] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[26]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[27] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[27]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[28] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[28]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[29] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[29]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[2] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[2]),
        .Q(Q[29]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[30] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[30]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[31] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[31]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[3] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[3]),
        .Q(Q[28]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[4] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[4]),
        .Q(Q[27]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[5] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[5]),
        .Q(Q[26]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[6] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[6]),
        .Q(Q[25]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[7] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[7]),
        .Q(Q[24]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[8] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[8]),
        .Q(Q[23]),
        .R(sync_reset));
  FDRE \m3_PC_i_reg[9] 
       (.C(Clk),
        .CE(\m3_PC_i_reg[0]_0 ),
        .D(m2_PC_i[9]),
        .Q(Q[22]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "PreFetch_Buffer_ff" *) 
module microblaze_microblaze_0_0_PreFetch_Buffer_ff
   (if4_sel_input,
    of_raw_valid,
    Prefetch_Buffer_Full,
    \Serial_Dbg_Intf.control_reg_reg[8] ,
    Q,
    \cur_data_i_reg[27] ,
    ex_jump_nodelay_reg,
    \Using_FPGA.Native ,
    ex_jump_nodelay_reg_0,
    \cur_data_i_reg[26] ,
    \cur_data_i_reg[28] ,
    ex_jump_nodelay_reg_1,
    \cur_data_i_reg[10] ,
    \cur_data_i_reg[28]_0 ,
    \cur_data_i_reg[26]_0 ,
    \cur_data_i_reg[26]_1 ,
    \cur_data_i_reg[26]_2 ,
    \cur_data_i_reg[26]_3 ,
    \cur_data_i_reg[26]_4 ,
    of_ex_complete_in_later_stage,
    of_m0_complete_in_later_stage,
    if4_pre_buffer_addr,
    \cur_data_i_reg[1] ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \m3_gpr_write_addr_reg[3] ,
    \wb_gpr_write_addr_reg[3] ,
    of_op3_sel,
    \cur_data_i_reg[1]_0 ,
    \cur_data_i_reg[0] ,
    \cur_data_i_reg[26]_5 ,
    \cur_data_i_reg[6] ,
    \cur_data_i_reg[6]_0 ,
    of_m1_complete_in_later_stage,
    of_op1_sel_spr_pc,
    ex_move_to_MSR_instr35_out,
    in0,
    of_gpr_write_dbg,
    \cur_data_i_reg[28]_1 ,
    ex_MSR_set_decode,
    ex_MSR_clear_decode,
    ex_branch_with_delayslot0,
    ex_jump_nodelay0,
    ex_atomic_instruction_pair0,
    \cur_data_i_reg[31] ,
    of_doublet_access,
    EX_Pattern_Cmp_Sel7_out,
    \cur_data_i_reg[7] ,
    \Using_FPGA.Native_2 ,
    ex_set_bip,
    D,
    force12_out,
    use_Reg_Neg_S3_out,
    force_Val10_out,
    use_Reg_Neg_DI1_out,
    ex_op1_cmp_eq1,
    ex_op1_cmp_eq,
    ex_op1_cmp_eq_n7_out,
    \cur_data_i_reg[5] ,
    ex_load_shift_carry0,
    \cur_data_i_reg[5]_0 ,
    ex_databus_read_i0,
    ex_databus_exclusive_i0,
    p_104_in,
    S,
    m3_is_div_instr_i_reg,
    of_is_div_instr,
    \Use_Async_Reset.sync_reset_reg ,
    of_byte_access,
    \cur_data_i_reg[31]_0 ,
    ex_mbar_is_sleep0,
    EX_CMP_Op12_out,
    EX_Unsigned_Op11_out,
    ex_load_alu_carry2_out,
    EX_Use_Carry10_out,
    EX_Bit_Extract0,
    of_is_bsifi,
    OF_Use_Op_B,
    \Using_FPGA.Native_3 ,
    S_0,
    S_1,
    S_2,
    S_3,
    S_4,
    S_5,
    S_6,
    S_7,
    S_8,
    S_9,
    S_10,
    S_11,
    S_12,
    S_13,
    S_14,
    \cur_data_i_reg[30] ,
    \cur_data_i_reg[8] ,
    \m0_gpr_write_addr_reg[2] ,
    \m1_gpr_write_addr_reg[2] ,
    \m2_gpr_write_addr_reg[2] ,
    \m3_gpr_write_addr_reg[2] ,
    \cur_data_i_reg[3] ,
    \m0_gpr_write_addr_reg[2]_0 ,
    \m1_gpr_write_addr_reg[2]_0 ,
    \m2_gpr_write_addr_reg[2]_0 ,
    \m3_gpr_write_addr_reg[2]_0 ,
    \cur_data_i_reg[28]_2 ,
    \cur_data_i_reg[28]_3 ,
    \cur_data_i_reg[28]_4 ,
    \cur_data_i_reg[28]_5 ,
    \ex_gpr_write_addr_reg[2] ,
    \m0_gpr_write_addr_reg[2]_1 ,
    \m1_gpr_write_addr_reg[2]_1 ,
    \m2_gpr_write_addr_reg[2]_1 ,
    \m3_gpr_write_addr_reg[2]_1 ,
    \cur_data_i_reg[26]_6 ,
    \cur_data_i_reg[31]_1 ,
    \cur_data_i_reg[26]_7 ,
    \cur_data_i_reg[31]_2 ,
    \cur_data_i_reg[26]_8 ,
    \cur_data_i_reg[31]_3 ,
    \cur_data_i_reg[26]_9 ,
    \cur_data_i_reg[31]_4 ,
    EX_CLZ_Instr_reg,
    m2_m1_sel_res_reg,
    \EX_Op3[0]_i_6 ,
    \EX_Op3[0]_i_7 ,
    \m1_M0_Result_i_reg[0] ,
    \m1_M0_Result_i_reg[2] ,
    \m1_M0_Result_i_reg[5] ,
    \m1_M0_Result_i_reg[8] ,
    \m1_M0_Result_i_reg[9] ,
    \m1_M0_Result_i_reg[12] ,
    \m1_M0_Result_i_reg[13] ,
    \m1_M0_Result_i_reg[14] ,
    \WB_Exception_Return_Addr_reg[16] ,
    \WB_Exception_Return_Addr_reg[18] ,
    \WB_Exception_Return_Addr_reg[21] ,
    \WB_Exception_Return_Addr_reg[25] ,
    M1_Sel_Mul_Res_reg,
    m2_m1_sel_res_reg_0,
    \EX_Op2[0]_i_6 ,
    \EX_Op2[0]_i_7 ,
    \WB_Exception_Return_Addr_reg[20] ,
    \WB_Exception_Return_Addr_reg[17] ,
    \m1_M0_Result_i_reg[1] ,
    \m1_M0_Result_i_reg[3] ,
    \m1_M0_Result_i_reg[4] ,
    \m1_M0_Result_i_reg[6] ,
    \m1_M0_Result_i_reg[7] ,
    \m1_M0_Result_i_reg[10] ,
    \m1_M0_Result_i_reg[11] ,
    \m1_M0_Result_i_reg[15] ,
    M1_Sel_Mul_Res_reg_0,
    \cur_data_i_reg[31]_5 ,
    \m2_M1_Result_i_reg[29] ,
    \EX_Branch_CMP_Op1[29]_i_3 ,
    \EX_Branch_CMP_Op1[30]_i_3 ,
    \cur_data_i_reg[3]_0 ,
    \cur_data_i_reg[4] ,
    \cur_data_i_reg[5]_1 ,
    \cur_data_i_reg[7]_0 ,
    \cur_data_i_reg[8]_0 ,
    \cur_data_i_reg[9] ,
    \cur_data_i_reg[12] ,
    if4_push_instr_fetch,
    \cur_data_i_reg[0]_0 ,
    Clear_Buffer,
    sync_reset,
    Clk,
    \Performance_Debug_Control.ex_brki_hit_reg ,
    \Performance_Debug_Control.ex_brki_hit_reg_0 ,
    ex_jump_nodelay,
    ex_jump,
    ex_branch_with_delayslot,
    \Using_FPGA.Native_4 ,
    if4_data,
    \cur_data_i_reg[10]_0 ,
    in,
    \EX_Op3[0]_i_4 ,
    \EX_Op3[0]_i_18 ,
    \EX_Op3[0]_i_7_0 ,
    m3_gpr_write,
    \EX_Branch_CMP_Op1[30]_i_3_0 ,
    \EX_Op3[0]_i_17 ,
    \EX_Op3[0]_i_7_1 ,
    m2_gpr_write,
    \EX_Branch_CMP_Op1[30]_i_7 ,
    \EX_Op3[0]_i_16 ,
    \EX_Op3[0]_i_7_2 ,
    m1_gpr_write,
    \EX_Branch_CMP_Op1[30]_i_3_1 ,
    \EX_Op3[0]_i_15 ,
    \EX_Op3[0]_i_7_3 ,
    \EX_Branch_CMP_Op1[30]_i_8 ,
    m0_gpr_write,
    ex_gpr_write,
    \EX_Op3[29]_i_3 ,
    ex_gpr_write_addr,
    ex_databus_access_i_reg,
    ex_jump_hold,
    \Using_FPGA.Native_5 ,
    m2_is_div_instr,
    m1_is_div_instr_i,
    m0_is_div_instr_i,
    \Using_FPGA.Native_6 ,
    if0_pause,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \EX_Op3[0]_i_12 ,
    \EX_Op3[0]_i_6_0 ,
    \EX_Op2[0]_i_12 ,
    \EX_Op3_reg[30] ,
    \EX_Op2_reg[30] ,
    \EX_Op1_reg[30] ,
    GPR_Op3,
    \EX_Op3_reg[31] ,
    wb_fwd,
    \EX_Op2_reg[31] ,
    \EX_Op2_reg[31]_0 ,
    \EX_Op2_reg[31]_1 ,
    \EX_Op2_reg[31]_2 ,
    \EX_Op2_reg[31]_3 ,
    \EX_Op2_reg[0] ,
    \EX_Op2_reg[0]_0 ,
    \EX_Op2_reg[0]_1 ,
    \EX_Op2_reg[2] ,
    \EX_Op2_reg[2]_0 ,
    \EX_Op2_reg[2]_1 ,
    \EX_Op2_reg[5] ,
    \EX_Op2_reg[5]_0 ,
    \EX_Op2_reg[5]_1 ,
    \EX_Op2_reg[8] ,
    \EX_Op2_reg[8]_0 ,
    \EX_Op2_reg[8]_1 ,
    \EX_Op2_reg[9] ,
    \EX_Op2_reg[9]_0 ,
    \EX_Op2_reg[9]_1 ,
    \EX_Op2_reg[12] ,
    \EX_Op2_reg[12]_0 ,
    \EX_Op2_reg[12]_1 ,
    \EX_Op2_reg[13] ,
    \EX_Op2_reg[13]_0 ,
    \EX_Op2_reg[13]_1 ,
    \EX_Op2_reg[14] ,
    \EX_Op2_reg[14]_0 ,
    \EX_Op2_reg[14]_1 ,
    \EX_Op2_reg[16] ,
    \EX_Op2_reg[18] ,
    \EX_Op2_reg[21] ,
    \EX_Op2_reg[25] ,
    \EX_Op2[25]_i_2 ,
    GPR_Op2,
    \EX_Op2_reg[29] ,
    \EX_Op2_reg[29]_0 ,
    \EX_Op2_reg[29]_1 ,
    \EX_Op2_reg[31]_4 ,
    \EX_Op2_reg[20] ,
    \EX_Op2_reg[17] ,
    \EX_Op2_reg[1] ,
    \EX_Op2_reg[1]_0 ,
    \EX_Op2_reg[1]_1 ,
    \EX_Op2_reg[3] ,
    \EX_Op2_reg[3]_0 ,
    \EX_Op2_reg[3]_1 ,
    \EX_Op2_reg[4] ,
    \EX_Op2_reg[4]_0 ,
    \EX_Op2_reg[4]_1 ,
    \EX_Op2_reg[6] ,
    \EX_Op2_reg[6]_0 ,
    \EX_Op2_reg[6]_1 ,
    \EX_Op2_reg[7] ,
    \EX_Op2_reg[7]_0 ,
    \EX_Op2_reg[7]_1 ,
    \EX_Op2_reg[10] ,
    \EX_Op2_reg[10]_0 ,
    \EX_Op2_reg[10]_1 ,
    \EX_Op2_reg[11] ,
    \EX_Op2_reg[11]_0 ,
    \EX_Op2_reg[11]_1 ,
    \EX_Op2_reg[15] ,
    \EX_Op2_reg[15]_0 ,
    \EX_Op2_reg[15]_1 ,
    \EX_Op2[16]_i_2 ,
    \EX_Op2_reg[30]_0 ,
    \EX_Op1_reg[0] ,
    \EX_Op1_reg[0]_0 ,
    \EX_Op1_reg[0]_1 ,
    ex_set_msr_ee_instr,
    \EX_Op1_reg[23] ,
    \EX_Op1_reg[25] ,
    of_msr,
    \EX_Op1_reg[29] ,
    \EX_Op1_reg[29]_0 ,
    \EX_Branch_CMP_Op1_reg[29] ,
    \EX_Branch_CMP_Op1_reg[29]_0 ,
    \EX_Op1_reg[29]_1 ,
    \EX_Op1_reg[29]_2 ,
    \EX_Op1_reg[29]_3 ,
    \EX_Op1_reg[29]_4 ,
    \EX_Op1_reg[30]_0 ,
    \EX_Op1_reg[30]_1 ,
    \EX_Branch_CMP_Op1_reg[30] ,
    GPR_Op1,
    \EX_Branch_CMP_Op1_reg[30]_0 ,
    \EX_Branch_CMP_Op1_reg[30]_1 ,
    ex_alu_result,
    \EX_Op1_reg[31] ,
    \EX_Op1_reg[31]_0 ,
    \EX_Branch_CMP_Op1_reg[30]_2 ,
    \EX_Branch_CMP_Op1_reg[30]_3 ,
    of_read_imm_reg,
    \EX_Op2[0]_i_4 );
  output [1:0]if4_sel_input;
  output of_raw_valid;
  output Prefetch_Buffer_Full;
  output \Serial_Dbg_Intf.control_reg_reg[8] ;
  output [31:0]Q;
  output \cur_data_i_reg[27] ;
  output ex_jump_nodelay_reg;
  output [0:0]\Using_FPGA.Native ;
  output ex_jump_nodelay_reg_0;
  output \cur_data_i_reg[26] ;
  output \cur_data_i_reg[28] ;
  output ex_jump_nodelay_reg_1;
  output \cur_data_i_reg[10] ;
  output \cur_data_i_reg[28]_0 ;
  output \cur_data_i_reg[26]_0 ;
  output \cur_data_i_reg[26]_1 ;
  output \cur_data_i_reg[26]_2 ;
  output \cur_data_i_reg[26]_3 ;
  output \cur_data_i_reg[26]_4 ;
  output of_ex_complete_in_later_stage;
  output of_m0_complete_in_later_stage;
  output [0:0]if4_pre_buffer_addr;
  output [0:0]\cur_data_i_reg[1] ;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \m3_gpr_write_addr_reg[3] ;
  output \wb_gpr_write_addr_reg[3] ;
  output [0:0]of_op3_sel;
  output \cur_data_i_reg[1]_0 ;
  output \cur_data_i_reg[0] ;
  output \cur_data_i_reg[26]_5 ;
  output \cur_data_i_reg[6] ;
  output \cur_data_i_reg[6]_0 ;
  output of_m1_complete_in_later_stage;
  output of_op1_sel_spr_pc;
  output ex_move_to_MSR_instr35_out;
  output in0;
  output of_gpr_write_dbg;
  output \cur_data_i_reg[28]_1 ;
  output ex_MSR_set_decode;
  output ex_MSR_clear_decode;
  output ex_branch_with_delayslot0;
  output ex_jump_nodelay0;
  output ex_atomic_instruction_pair0;
  output \cur_data_i_reg[31] ;
  output of_doublet_access;
  output EX_Pattern_Cmp_Sel7_out;
  output \cur_data_i_reg[7] ;
  output \Using_FPGA.Native_2 ;
  output ex_set_bip;
  output [1:0]D;
  output force12_out;
  output use_Reg_Neg_S3_out;
  output force_Val10_out;
  output use_Reg_Neg_DI1_out;
  output ex_op1_cmp_eq1;
  output ex_op1_cmp_eq;
  output ex_op1_cmp_eq_n7_out;
  output [1:0]\cur_data_i_reg[5] ;
  output ex_load_shift_carry0;
  output \cur_data_i_reg[5]_0 ;
  output ex_databus_read_i0;
  output ex_databus_exclusive_i0;
  output p_104_in;
  output S;
  output m3_is_div_instr_i_reg;
  output of_is_div_instr;
  output \Use_Async_Reset.sync_reset_reg ;
  output of_byte_access;
  output \cur_data_i_reg[31]_0 ;
  output ex_mbar_is_sleep0;
  output EX_CMP_Op12_out;
  output EX_Unsigned_Op11_out;
  output ex_load_alu_carry2_out;
  output EX_Use_Carry10_out;
  output EX_Bit_Extract0;
  output of_is_bsifi;
  output OF_Use_Op_B;
  output \Using_FPGA.Native_3 ;
  output S_0;
  output S_1;
  output S_2;
  output S_3;
  output S_4;
  output S_5;
  output S_6;
  output S_7;
  output S_8;
  output S_9;
  output S_10;
  output S_11;
  output S_12;
  output S_13;
  output S_14;
  output \cur_data_i_reg[30] ;
  output \cur_data_i_reg[8] ;
  output \m0_gpr_write_addr_reg[2] ;
  output \m1_gpr_write_addr_reg[2] ;
  output \m2_gpr_write_addr_reg[2] ;
  output \m3_gpr_write_addr_reg[2] ;
  output \cur_data_i_reg[3] ;
  output \m0_gpr_write_addr_reg[2]_0 ;
  output \m1_gpr_write_addr_reg[2]_0 ;
  output \m2_gpr_write_addr_reg[2]_0 ;
  output \m3_gpr_write_addr_reg[2]_0 ;
  output \cur_data_i_reg[28]_2 ;
  output \cur_data_i_reg[28]_3 ;
  output \cur_data_i_reg[28]_4 ;
  output \cur_data_i_reg[28]_5 ;
  output \ex_gpr_write_addr_reg[2] ;
  output \m0_gpr_write_addr_reg[2]_1 ;
  output \m1_gpr_write_addr_reg[2]_1 ;
  output \m2_gpr_write_addr_reg[2]_1 ;
  output \m3_gpr_write_addr_reg[2]_1 ;
  output \cur_data_i_reg[26]_6 ;
  output \cur_data_i_reg[31]_1 ;
  output \cur_data_i_reg[26]_7 ;
  output \cur_data_i_reg[31]_2 ;
  output \cur_data_i_reg[26]_8 ;
  output \cur_data_i_reg[31]_3 ;
  output \cur_data_i_reg[26]_9 ;
  output \cur_data_i_reg[31]_4 ;
  output EX_CLZ_Instr_reg;
  output [0:0]m2_m1_sel_res_reg;
  output \EX_Op3[0]_i_6 ;
  output \EX_Op3[0]_i_7 ;
  output \m1_M0_Result_i_reg[0] ;
  output \m1_M0_Result_i_reg[2] ;
  output \m1_M0_Result_i_reg[5] ;
  output \m1_M0_Result_i_reg[8] ;
  output \m1_M0_Result_i_reg[9] ;
  output \m1_M0_Result_i_reg[12] ;
  output \m1_M0_Result_i_reg[13] ;
  output \m1_M0_Result_i_reg[14] ;
  output \WB_Exception_Return_Addr_reg[16] ;
  output \WB_Exception_Return_Addr_reg[18] ;
  output \WB_Exception_Return_Addr_reg[21] ;
  output \WB_Exception_Return_Addr_reg[25] ;
  output M1_Sel_Mul_Res_reg;
  output [0:0]m2_m1_sel_res_reg_0;
  output \EX_Op2[0]_i_6 ;
  output \EX_Op2[0]_i_7 ;
  output \WB_Exception_Return_Addr_reg[20] ;
  output \WB_Exception_Return_Addr_reg[17] ;
  output \m1_M0_Result_i_reg[1] ;
  output \m1_M0_Result_i_reg[3] ;
  output \m1_M0_Result_i_reg[4] ;
  output \m1_M0_Result_i_reg[6] ;
  output \m1_M0_Result_i_reg[7] ;
  output \m1_M0_Result_i_reg[10] ;
  output \m1_M0_Result_i_reg[11] ;
  output \m1_M0_Result_i_reg[15] ;
  output M1_Sel_Mul_Res_reg_0;
  output [31:0]\cur_data_i_reg[31]_5 ;
  output [2:0]\m2_M1_Result_i_reg[29] ;
  output \EX_Branch_CMP_Op1[29]_i_3 ;
  output \EX_Branch_CMP_Op1[30]_i_3 ;
  output \cur_data_i_reg[3]_0 ;
  output \cur_data_i_reg[4] ;
  output \cur_data_i_reg[5]_1 ;
  output \cur_data_i_reg[7]_0 ;
  output \cur_data_i_reg[8]_0 ;
  output \cur_data_i_reg[9] ;
  output \cur_data_i_reg[12] ;
  input if4_push_instr_fetch;
  input \cur_data_i_reg[0]_0 ;
  input Clear_Buffer;
  input sync_reset;
  input Clk;
  input [0:0]\Performance_Debug_Control.ex_brki_hit_reg ;
  input \Performance_Debug_Control.ex_brki_hit_reg_0 ;
  input ex_jump_nodelay;
  input ex_jump;
  input ex_branch_with_delayslot;
  input \Using_FPGA.Native_4 ;
  input [0:31]if4_data;
  input \cur_data_i_reg[10]_0 ;
  input [0:0]in;
  input \EX_Op3[0]_i_4 ;
  input [4:0]\EX_Op3[0]_i_18 ;
  input \EX_Op3[0]_i_7_0 ;
  input m3_gpr_write;
  input \EX_Branch_CMP_Op1[30]_i_3_0 ;
  input [4:0]\EX_Op3[0]_i_17 ;
  input \EX_Op3[0]_i_7_1 ;
  input m2_gpr_write;
  input \EX_Branch_CMP_Op1[30]_i_7 ;
  input [4:0]\EX_Op3[0]_i_16 ;
  input \EX_Op3[0]_i_7_2 ;
  input m1_gpr_write;
  input \EX_Branch_CMP_Op1[30]_i_3_1 ;
  input [4:0]\EX_Op3[0]_i_15 ;
  input \EX_Op3[0]_i_7_3 ;
  input \EX_Branch_CMP_Op1[30]_i_8 ;
  input m0_gpr_write;
  input ex_gpr_write;
  input \EX_Op3[29]_i_3 ;
  input [2:0]ex_gpr_write_addr;
  input ex_databus_access_i_reg;
  input ex_jump_hold;
  input \Using_FPGA.Native_5 ;
  input m2_is_div_instr;
  input m1_is_div_instr_i;
  input m0_is_div_instr_i;
  input \Using_FPGA.Native_6 ;
  input if0_pause;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input [1:0]\Using_FPGA.Native_9 ;
  input [4:0]\EX_Op3[0]_i_12 ;
  input \EX_Op3[0]_i_6_0 ;
  input \EX_Op2[0]_i_12 ;
  input \EX_Op3_reg[30] ;
  input \EX_Op2_reg[30] ;
  input \EX_Op1_reg[30] ;
  input [1:0]GPR_Op3;
  input \EX_Op3_reg[31] ;
  input [8:0]wb_fwd;
  input \EX_Op2_reg[31] ;
  input \EX_Op2_reg[31]_0 ;
  input \EX_Op2_reg[31]_1 ;
  input \EX_Op2_reg[31]_2 ;
  input \EX_Op2_reg[31]_3 ;
  input \EX_Op2_reg[0] ;
  input \EX_Op2_reg[0]_0 ;
  input [0:0]\EX_Op2_reg[0]_1 ;
  input \EX_Op2_reg[2] ;
  input \EX_Op2_reg[2]_0 ;
  input \EX_Op2_reg[2]_1 ;
  input \EX_Op2_reg[5] ;
  input \EX_Op2_reg[5]_0 ;
  input \EX_Op2_reg[5]_1 ;
  input \EX_Op2_reg[8] ;
  input \EX_Op2_reg[8]_0 ;
  input \EX_Op2_reg[8]_1 ;
  input \EX_Op2_reg[9] ;
  input \EX_Op2_reg[9]_0 ;
  input \EX_Op2_reg[9]_1 ;
  input \EX_Op2_reg[12] ;
  input \EX_Op2_reg[12]_0 ;
  input \EX_Op2_reg[12]_1 ;
  input \EX_Op2_reg[13] ;
  input \EX_Op2_reg[13]_0 ;
  input \EX_Op2_reg[13]_1 ;
  input \EX_Op2_reg[14] ;
  input \EX_Op2_reg[14]_0 ;
  input \EX_Op2_reg[14]_1 ;
  input \EX_Op2_reg[16] ;
  input \EX_Op2_reg[18] ;
  input \EX_Op2_reg[21] ;
  input \EX_Op2_reg[25] ;
  input \EX_Op2[25]_i_2 ;
  input [0:31]GPR_Op2;
  input \EX_Op2_reg[29] ;
  input \EX_Op2_reg[29]_0 ;
  input \EX_Op2_reg[29]_1 ;
  input \EX_Op2_reg[31]_4 ;
  input \EX_Op2_reg[20] ;
  input \EX_Op2_reg[17] ;
  input \EX_Op2_reg[1] ;
  input \EX_Op2_reg[1]_0 ;
  input \EX_Op2_reg[1]_1 ;
  input \EX_Op2_reg[3] ;
  input \EX_Op2_reg[3]_0 ;
  input \EX_Op2_reg[3]_1 ;
  input \EX_Op2_reg[4] ;
  input \EX_Op2_reg[4]_0 ;
  input \EX_Op2_reg[4]_1 ;
  input \EX_Op2_reg[6] ;
  input \EX_Op2_reg[6]_0 ;
  input \EX_Op2_reg[6]_1 ;
  input \EX_Op2_reg[7] ;
  input \EX_Op2_reg[7]_0 ;
  input \EX_Op2_reg[7]_1 ;
  input \EX_Op2_reg[10] ;
  input \EX_Op2_reg[10]_0 ;
  input \EX_Op2_reg[10]_1 ;
  input \EX_Op2_reg[11] ;
  input \EX_Op2_reg[11]_0 ;
  input \EX_Op2_reg[11]_1 ;
  input \EX_Op2_reg[15] ;
  input \EX_Op2_reg[15]_0 ;
  input \EX_Op2_reg[15]_1 ;
  input [6:0]\EX_Op2[16]_i_2 ;
  input \EX_Op2_reg[30]_0 ;
  input [29:0]\EX_Op1_reg[0] ;
  input \EX_Op1_reg[0]_0 ;
  input [28:0]\EX_Op1_reg[0]_1 ;
  input ex_set_msr_ee_instr;
  input \EX_Op1_reg[23] ;
  input [0:0]\EX_Op1_reg[25] ;
  input [0:0]of_msr;
  input \EX_Op1_reg[29] ;
  input \EX_Op1_reg[29]_0 ;
  input \EX_Branch_CMP_Op1_reg[29] ;
  input \EX_Branch_CMP_Op1_reg[29]_0 ;
  input \EX_Op1_reg[29]_1 ;
  input \EX_Op1_reg[29]_2 ;
  input [0:0]\EX_Op1_reg[29]_3 ;
  input \EX_Op1_reg[29]_4 ;
  input \EX_Op1_reg[30]_0 ;
  input \EX_Op1_reg[30]_1 ;
  input \EX_Branch_CMP_Op1_reg[30] ;
  input [2:0]GPR_Op1;
  input \EX_Branch_CMP_Op1_reg[30]_0 ;
  input \EX_Branch_CMP_Op1_reg[30]_1 ;
  input [1:0]ex_alu_result;
  input \EX_Op1_reg[31] ;
  input \EX_Op1_reg[31]_0 ;
  input \EX_Branch_CMP_Op1_reg[30]_2 ;
  input \EX_Branch_CMP_Op1_reg[30]_3 ;
  input of_read_imm_reg;
  input [15:0]\EX_Op2[0]_i_4 ;

  wire Clear_Buffer;
  wire Clk;
  wire [1:0]D;
  wire EX_Bit_Extract0;
  wire \EX_Branch_CMP_Op1[29]_i_3 ;
  wire \EX_Branch_CMP_Op1[30]_i_3 ;
  wire \EX_Branch_CMP_Op1[30]_i_3_0 ;
  wire \EX_Branch_CMP_Op1[30]_i_3_1 ;
  wire \EX_Branch_CMP_Op1[30]_i_7 ;
  wire \EX_Branch_CMP_Op1[30]_i_8 ;
  wire \EX_Branch_CMP_Op1_reg[29] ;
  wire \EX_Branch_CMP_Op1_reg[29]_0 ;
  wire \EX_Branch_CMP_Op1_reg[30] ;
  wire \EX_Branch_CMP_Op1_reg[30]_0 ;
  wire \EX_Branch_CMP_Op1_reg[30]_1 ;
  wire \EX_Branch_CMP_Op1_reg[30]_2 ;
  wire \EX_Branch_CMP_Op1_reg[30]_3 ;
  wire EX_CLZ_Instr_reg;
  wire EX_CMP_Op12_out;
  wire [29:0]\EX_Op1_reg[0] ;
  wire \EX_Op1_reg[0]_0 ;
  wire [28:0]\EX_Op1_reg[0]_1 ;
  wire \EX_Op1_reg[23] ;
  wire [0:0]\EX_Op1_reg[25] ;
  wire \EX_Op1_reg[29] ;
  wire \EX_Op1_reg[29]_0 ;
  wire \EX_Op1_reg[29]_1 ;
  wire \EX_Op1_reg[29]_2 ;
  wire [0:0]\EX_Op1_reg[29]_3 ;
  wire \EX_Op1_reg[29]_4 ;
  wire \EX_Op1_reg[30] ;
  wire \EX_Op1_reg[30]_0 ;
  wire \EX_Op1_reg[30]_1 ;
  wire \EX_Op1_reg[31] ;
  wire \EX_Op1_reg[31]_0 ;
  wire \EX_Op2[0]_i_12 ;
  wire [15:0]\EX_Op2[0]_i_4 ;
  wire \EX_Op2[0]_i_6 ;
  wire \EX_Op2[0]_i_7 ;
  wire [6:0]\EX_Op2[16]_i_2 ;
  wire \EX_Op2[25]_i_2 ;
  wire \EX_Op2_reg[0] ;
  wire \EX_Op2_reg[0]_0 ;
  wire [0:0]\EX_Op2_reg[0]_1 ;
  wire \EX_Op2_reg[10] ;
  wire \EX_Op2_reg[10]_0 ;
  wire \EX_Op2_reg[10]_1 ;
  wire \EX_Op2_reg[11] ;
  wire \EX_Op2_reg[11]_0 ;
  wire \EX_Op2_reg[11]_1 ;
  wire \EX_Op2_reg[12] ;
  wire \EX_Op2_reg[12]_0 ;
  wire \EX_Op2_reg[12]_1 ;
  wire \EX_Op2_reg[13] ;
  wire \EX_Op2_reg[13]_0 ;
  wire \EX_Op2_reg[13]_1 ;
  wire \EX_Op2_reg[14] ;
  wire \EX_Op2_reg[14]_0 ;
  wire \EX_Op2_reg[14]_1 ;
  wire \EX_Op2_reg[15] ;
  wire \EX_Op2_reg[15]_0 ;
  wire \EX_Op2_reg[15]_1 ;
  wire \EX_Op2_reg[16] ;
  wire \EX_Op2_reg[17] ;
  wire \EX_Op2_reg[18] ;
  wire \EX_Op2_reg[1] ;
  wire \EX_Op2_reg[1]_0 ;
  wire \EX_Op2_reg[1]_1 ;
  wire \EX_Op2_reg[20] ;
  wire \EX_Op2_reg[21] ;
  wire \EX_Op2_reg[25] ;
  wire \EX_Op2_reg[29] ;
  wire \EX_Op2_reg[29]_0 ;
  wire \EX_Op2_reg[29]_1 ;
  wire \EX_Op2_reg[2] ;
  wire \EX_Op2_reg[2]_0 ;
  wire \EX_Op2_reg[2]_1 ;
  wire \EX_Op2_reg[30] ;
  wire \EX_Op2_reg[30]_0 ;
  wire \EX_Op2_reg[31] ;
  wire \EX_Op2_reg[31]_0 ;
  wire \EX_Op2_reg[31]_1 ;
  wire \EX_Op2_reg[31]_2 ;
  wire \EX_Op2_reg[31]_3 ;
  wire \EX_Op2_reg[31]_4 ;
  wire \EX_Op2_reg[3] ;
  wire \EX_Op2_reg[3]_0 ;
  wire \EX_Op2_reg[3]_1 ;
  wire \EX_Op2_reg[4] ;
  wire \EX_Op2_reg[4]_0 ;
  wire \EX_Op2_reg[4]_1 ;
  wire \EX_Op2_reg[5] ;
  wire \EX_Op2_reg[5]_0 ;
  wire \EX_Op2_reg[5]_1 ;
  wire \EX_Op2_reg[6] ;
  wire \EX_Op2_reg[6]_0 ;
  wire \EX_Op2_reg[6]_1 ;
  wire \EX_Op2_reg[7] ;
  wire \EX_Op2_reg[7]_0 ;
  wire \EX_Op2_reg[7]_1 ;
  wire \EX_Op2_reg[8] ;
  wire \EX_Op2_reg[8]_0 ;
  wire \EX_Op2_reg[8]_1 ;
  wire \EX_Op2_reg[9] ;
  wire \EX_Op2_reg[9]_0 ;
  wire \EX_Op2_reg[9]_1 ;
  wire [4:0]\EX_Op3[0]_i_12 ;
  wire [4:0]\EX_Op3[0]_i_15 ;
  wire [4:0]\EX_Op3[0]_i_16 ;
  wire [4:0]\EX_Op3[0]_i_17 ;
  wire [4:0]\EX_Op3[0]_i_18 ;
  wire \EX_Op3[0]_i_4 ;
  wire \EX_Op3[0]_i_6 ;
  wire \EX_Op3[0]_i_6_0 ;
  wire \EX_Op3[0]_i_7 ;
  wire \EX_Op3[0]_i_7_0 ;
  wire \EX_Op3[0]_i_7_1 ;
  wire \EX_Op3[0]_i_7_2 ;
  wire \EX_Op3[0]_i_7_3 ;
  wire \EX_Op3[29]_i_3 ;
  wire \EX_Op3_reg[30] ;
  wire \EX_Op3_reg[31] ;
  wire EX_Pattern_Cmp_Sel7_out;
  wire EX_Unsigned_Op11_out;
  wire EX_Use_Carry10_out;
  wire [2:0]GPR_Op1;
  wire [0:31]GPR_Op2;
  wire [1:0]GPR_Op3;
  wire INSTR_BUFFER_I1_n_116;
  wire INSTR_BUFFER_I1_n_138;
  wire INSTR_BUFFER_I1_n_139;
  wire INSTR_BUFFER_I1_n_140;
  wire INSTR_BUFFER_I1_n_141;
  wire INSTR_BUFFER_I1_n_142;
  wire INSTR_BUFFER_I1_n_143;
  wire INSTR_BUFFER_I1_n_173;
  wire INSTR_BUFFER_I1_n_174;
  wire INSTR_BUFFER_I1_n_175;
  wire INSTR_BUFFER_I1_n_176;
  wire INSTR_BUFFER_I1_n_177;
  wire INSTR_BUFFER_I1_n_178;
  wire INSTR_BUFFER_I1_n_179;
  wire INSTR_BUFFER_I1_n_180;
  wire INSTR_BUFFER_I1_n_181;
  wire INSTR_BUFFER_I1_n_182;
  wire INSTR_BUFFER_I1_n_183;
  wire INSTR_BUFFER_I1_n_184;
  wire INSTR_BUFFER_I1_n_185;
  wire INSTR_BUFFER_I1_n_186;
  wire INSTR_BUFFER_I1_n_187;
  wire INSTR_BUFFER_I1_n_188;
  wire INSTR_BUFFER_I1_n_189;
  wire INSTR_BUFFER_I1_n_190;
  wire INSTR_BUFFER_I1_n_191;
  wire INSTR_BUFFER_I1_n_192;
  wire INSTR_BUFFER_I1_n_38;
  wire INSTR_BUFFER_I1_n_44;
  wire M1_Sel_Mul_Res_reg;
  wire M1_Sel_Mul_Res_reg_0;
  wire OF_Use_Op_B;
  wire [0:0]\Performance_Debug_Control.ex_brki_hit_reg ;
  wire \Performance_Debug_Control.ex_brki_hit_reg_0 ;
  wire Prefetch_Buffer_Full;
  wire [31:0]Q;
  wire S;
  wire S_0;
  wire S_1;
  wire S_10;
  wire S_11;
  wire S_12;
  wire S_13;
  wire S_14;
  wire S_2;
  wire S_3;
  wire S_4;
  wire S_5;
  wire S_6;
  wire S_7;
  wire S_8;
  wire S_9;
  wire \Serial_Dbg_Intf.control_reg_reg[8] ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire [1:0]\Using_FPGA.Native_9 ;
  wire \WB_Exception_Return_Addr_reg[16] ;
  wire \WB_Exception_Return_Addr_reg[17] ;
  wire \WB_Exception_Return_Addr_reg[18] ;
  wire \WB_Exception_Return_Addr_reg[20] ;
  wire \WB_Exception_Return_Addr_reg[21] ;
  wire \WB_Exception_Return_Addr_reg[25] ;
  wire \cur_data_i_reg[0] ;
  wire \cur_data_i_reg[0]_0 ;
  wire \cur_data_i_reg[10] ;
  wire \cur_data_i_reg[10]_0 ;
  wire \cur_data_i_reg[12] ;
  wire [0:0]\cur_data_i_reg[1] ;
  wire \cur_data_i_reg[1]_0 ;
  wire \cur_data_i_reg[26] ;
  wire \cur_data_i_reg[26]_0 ;
  wire \cur_data_i_reg[26]_1 ;
  wire \cur_data_i_reg[26]_2 ;
  wire \cur_data_i_reg[26]_3 ;
  wire \cur_data_i_reg[26]_4 ;
  wire \cur_data_i_reg[26]_5 ;
  wire \cur_data_i_reg[26]_6 ;
  wire \cur_data_i_reg[26]_7 ;
  wire \cur_data_i_reg[26]_8 ;
  wire \cur_data_i_reg[26]_9 ;
  wire \cur_data_i_reg[27] ;
  wire \cur_data_i_reg[28] ;
  wire \cur_data_i_reg[28]_0 ;
  wire \cur_data_i_reg[28]_1 ;
  wire \cur_data_i_reg[28]_2 ;
  wire \cur_data_i_reg[28]_3 ;
  wire \cur_data_i_reg[28]_4 ;
  wire \cur_data_i_reg[28]_5 ;
  wire \cur_data_i_reg[30] ;
  wire \cur_data_i_reg[31] ;
  wire \cur_data_i_reg[31]_0 ;
  wire \cur_data_i_reg[31]_1 ;
  wire \cur_data_i_reg[31]_2 ;
  wire \cur_data_i_reg[31]_3 ;
  wire \cur_data_i_reg[31]_4 ;
  wire [31:0]\cur_data_i_reg[31]_5 ;
  wire \cur_data_i_reg[3] ;
  wire \cur_data_i_reg[3]_0 ;
  wire \cur_data_i_reg[4] ;
  wire [1:0]\cur_data_i_reg[5] ;
  wire \cur_data_i_reg[5]_0 ;
  wire \cur_data_i_reg[5]_1 ;
  wire \cur_data_i_reg[6] ;
  wire \cur_data_i_reg[6]_0 ;
  wire \cur_data_i_reg[7] ;
  wire \cur_data_i_reg[7]_0 ;
  wire \cur_data_i_reg[8] ;
  wire \cur_data_i_reg[8]_0 ;
  wire \cur_data_i_reg[9] ;
  wire ex_MSR_clear_decode;
  wire ex_MSR_set_decode;
  wire [1:0]ex_alu_result;
  wire ex_atomic_instruction_pair0;
  wire ex_branch_with_delayslot;
  wire ex_branch_with_delayslot0;
  wire ex_databus_access_i_reg;
  wire ex_databus_exclusive_i0;
  wire ex_databus_read_i0;
  wire ex_gpr_write;
  wire [2:0]ex_gpr_write_addr;
  wire \ex_gpr_write_addr_reg[2] ;
  wire ex_jump;
  wire ex_jump_hold;
  wire ex_jump_nodelay;
  wire ex_jump_nodelay0;
  wire ex_jump_nodelay_reg;
  wire ex_jump_nodelay_reg_0;
  wire ex_jump_nodelay_reg_1;
  wire ex_load_alu_carry2_out;
  wire ex_load_shift_carry0;
  wire ex_mbar_is_sleep0;
  wire ex_move_to_MSR_instr35_out;
  wire ex_op1_cmp_eq;
  wire ex_op1_cmp_eq1;
  wire ex_op1_cmp_eq_n7_out;
  wire ex_set_bip;
  wire ex_set_msr_ee_instr;
  wire force12_out;
  wire force_Val10_out;
  wire if0_pause;
  wire [0:31]if4_data;
  wire [0:0]if4_pre_buffer_addr;
  wire if4_push_instr_fetch;
  wire [1:0]if4_sel_input;
  wire [0:0]in;
  wire in0;
  wire m0_gpr_write;
  wire \m0_gpr_write_addr_reg[2] ;
  wire \m0_gpr_write_addr_reg[2]_0 ;
  wire \m0_gpr_write_addr_reg[2]_1 ;
  wire m0_is_div_instr_i;
  wire \m1_M0_Result_i_reg[0] ;
  wire \m1_M0_Result_i_reg[10] ;
  wire \m1_M0_Result_i_reg[11] ;
  wire \m1_M0_Result_i_reg[12] ;
  wire \m1_M0_Result_i_reg[13] ;
  wire \m1_M0_Result_i_reg[14] ;
  wire \m1_M0_Result_i_reg[15] ;
  wire \m1_M0_Result_i_reg[1] ;
  wire \m1_M0_Result_i_reg[2] ;
  wire \m1_M0_Result_i_reg[3] ;
  wire \m1_M0_Result_i_reg[4] ;
  wire \m1_M0_Result_i_reg[5] ;
  wire \m1_M0_Result_i_reg[6] ;
  wire \m1_M0_Result_i_reg[7] ;
  wire \m1_M0_Result_i_reg[8] ;
  wire \m1_M0_Result_i_reg[9] ;
  wire m1_gpr_write;
  wire \m1_gpr_write_addr_reg[2] ;
  wire \m1_gpr_write_addr_reg[2]_0 ;
  wire \m1_gpr_write_addr_reg[2]_1 ;
  wire m1_is_div_instr_i;
  wire [2:0]\m2_M1_Result_i_reg[29] ;
  wire m2_gpr_write;
  wire \m2_gpr_write_addr_reg[2] ;
  wire \m2_gpr_write_addr_reg[2]_0 ;
  wire \m2_gpr_write_addr_reg[2]_1 ;
  wire m2_is_div_instr;
  wire [0:0]m2_m1_sel_res_reg;
  wire [0:0]m2_m1_sel_res_reg_0;
  wire m3_gpr_write;
  wire \m3_gpr_write_addr_reg[2] ;
  wire \m3_gpr_write_addr_reg[2]_0 ;
  wire \m3_gpr_write_addr_reg[2]_1 ;
  wire \m3_gpr_write_addr_reg[3] ;
  wire m3_is_div_instr_i_reg;
  wire of_byte_access;
  wire of_doublet_access;
  wire of_ex_complete_in_later_stage;
  wire of_gpr_write_dbg;
  wire of_is_bsifi;
  wire of_is_div_instr;
  wire of_m0_complete_in_later_stage;
  wire of_m1_complete_in_later_stage;
  wire [0:0]of_msr;
  wire of_op1_sel_spr;
  wire of_op1_sel_spr_pc;
  wire [0:0]of_op3_sel;
  wire [0:0]of_predecode;
  wire of_raw_valid;
  wire of_read_imm_reg;
  wire p_104_in;
  wire sync_reset;
  wire use_Reg_Neg_DI1_out;
  wire use_Reg_Neg_S3_out;
  wire [8:0]wb_fwd;
  wire \wb_gpr_write_addr_reg[3] ;

  microblaze_microblaze_0_0_OneHot_Buffer INSTR_BUFFER_I1
       (.Clear_Buffer(Clear_Buffer),
        .Clk(Clk),
        .D(D),
        .EX_Bit_Extract0(EX_Bit_Extract0),
        .EX_CLZ_Instr_reg(EX_CLZ_Instr_reg),
        .EX_CMP_Op12_out(EX_CMP_Op12_out),
        .\EX_Op1_reg[0] (\EX_Op1_reg[0] ),
        .\EX_Op1_reg[0]_0 (\EX_Op1_reg[0]_0 ),
        .\EX_Op1_reg[0]_1 (\EX_Op1_reg[0]_1 ),
        .\EX_Op1_reg[23] (\EX_Op1_reg[23] ),
        .\EX_Op1_reg[25] (\EX_Op1_reg[25] ),
        .\EX_Op2[0]_i_4 (\EX_Op2[0]_i_4 ),
        .\EX_Op2[16]_i_2 (\EX_Op2[16]_i_2 [6:2]),
        .\EX_Op2[21]_i_2 (\cur_data_i_reg[1]_0 ),
        .\EX_Op2[25]_i_2 (\EX_Op2[25]_i_2 ),
        .\EX_Op3[0]_i_12_0 (\EX_Op3[0]_i_12 ),
        .\EX_Op3[0]_i_15_0 (\EX_Op3[0]_i_15 ),
        .\EX_Op3[0]_i_16_0 (\EX_Op3[0]_i_16 ),
        .\EX_Op3[0]_i_17_0 (\EX_Op3[0]_i_17 ),
        .\EX_Op3[0]_i_18_0 (\EX_Op3[0]_i_18 ),
        .\EX_Op3[0]_i_4 (\EX_Op3[0]_i_4 ),
        .\EX_Op3[0]_i_6_0 (\EX_Op3[0]_i_6 ),
        .\EX_Op3[0]_i_6_1 (\EX_Op3[0]_i_6_0 ),
        .\EX_Op3[0]_i_7_0 (\EX_Op3[0]_i_7 ),
        .\EX_Op3[0]_i_7_1 (\EX_Op3[0]_i_7_0 ),
        .\EX_Op3[0]_i_7_2 (\EX_Op3[0]_i_7_1 ),
        .\EX_Op3[0]_i_7_3 (\EX_Op3[0]_i_7_2 ),
        .\EX_Op3[0]_i_7_4 (\EX_Op3[0]_i_7_3 ),
        .\EX_Op3[0]_i_7_5 (of_predecode),
        .\EX_Op3[29]_i_3 (\EX_Op3[29]_i_3 ),
        .\EX_Op3_reg[30] (\EX_Op3_reg[30] ),
        .\EX_Op3_reg[30]_0 (\EX_Op2_reg[30] ),
        .\EX_Op3_reg[30]_1 (\EX_Op1_reg[30] ),
        .\EX_Op3_reg[31] (\EX_Op3_reg[31] ),
        .\EX_Op3_reg[31]_0 (\EX_Op2_reg[31] ),
        .\EX_Op3_reg[31]_1 (\EX_Op2_reg[31]_0 ),
        .\EX_Op3_reg[31]_2 (\EX_Op2_reg[31]_1 ),
        .\EX_Op3_reg[31]_3 (\EX_Op2_reg[31]_2 ),
        .\EX_Op3_reg[31]_4 (\EX_Op2_reg[31]_3 ),
        .EX_Pattern_Cmp_Sel7_out(EX_Pattern_Cmp_Sel7_out),
        .EX_Unsigned_Op11_out(EX_Unsigned_Op11_out),
        .EX_Use_Carry10_out(EX_Use_Carry10_out),
        .GPR_Op2(GPR_Op2),
        .GPR_Op3(GPR_Op3),
        .OF_Use_Op_B(OF_Use_Op_B),
        .\Performance_Debug_Control.ex_brki_hit_reg (\Performance_Debug_Control.ex_brki_hit_reg ),
        .\Performance_Debug_Control.ex_brki_hit_reg_0 (\Performance_Debug_Control.ex_brki_hit_reg_0 ),
        .Q(Q),
        .S(S),
        .S_10(S_10),
        .S_11(S_11),
        .S_12(S_12),
        .S_13(S_13),
        .S_14(S_14),
        .\Serial_Dbg_Intf.control_reg_reg[8] (\Serial_Dbg_Intf.control_reg_reg[8] ),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native (if4_sel_input[0]),
        .\Using_FPGA.Native_0 (if4_sel_input[1]),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_6 (\cur_data_i_reg[0]_0 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_6 ),
        .addr({Prefetch_Buffer_Full,if4_pre_buffer_addr}),
        .\cur_data_i_reg[0]_0 (INSTR_BUFFER_I1_n_173),
        .\cur_data_i_reg[0]_1 (INSTR_BUFFER_I1_n_190),
        .\cur_data_i_reg[0]_2 (\cur_data_i_reg[10]_0 ),
        .\cur_data_i_reg[10]_0 (\cur_data_i_reg[10] ),
        .\cur_data_i_reg[10]_1 (INSTR_BUFFER_I1_n_143),
        .\cur_data_i_reg[11]_0 (INSTR_BUFFER_I1_n_142),
        .\cur_data_i_reg[12]_0 (\cur_data_i_reg[12] ),
        .\cur_data_i_reg[13]_0 (INSTR_BUFFER_I1_n_141),
        .\cur_data_i_reg[14]_0 (INSTR_BUFFER_I1_n_140),
        .\cur_data_i_reg[15]_0 (INSTR_BUFFER_I1_n_139),
        .\cur_data_i_reg[15]_1 (INSTR_BUFFER_I1_n_174),
        .\cur_data_i_reg[18]_0 (of_gpr_write_dbg),
        .\cur_data_i_reg[1]_0 (INSTR_BUFFER_I1_n_191),
        .\cur_data_i_reg[26]_0 (INSTR_BUFFER_I1_n_38),
        .\cur_data_i_reg[26]_1 (\cur_data_i_reg[26] ),
        .\cur_data_i_reg[26]_10 (\cur_data_i_reg[26]_8 ),
        .\cur_data_i_reg[26]_11 (\cur_data_i_reg[26]_9 ),
        .\cur_data_i_reg[26]_2 (INSTR_BUFFER_I1_n_44),
        .\cur_data_i_reg[26]_3 (\cur_data_i_reg[26]_0 ),
        .\cur_data_i_reg[26]_4 (\cur_data_i_reg[26]_1 ),
        .\cur_data_i_reg[26]_5 (\cur_data_i_reg[26]_2 ),
        .\cur_data_i_reg[26]_6 (\cur_data_i_reg[26]_3 ),
        .\cur_data_i_reg[26]_7 (\cur_data_i_reg[26]_4 ),
        .\cur_data_i_reg[26]_8 (\cur_data_i_reg[26]_6 ),
        .\cur_data_i_reg[26]_9 (\cur_data_i_reg[26]_7 ),
        .\cur_data_i_reg[27]_0 (\cur_data_i_reg[27] ),
        .\cur_data_i_reg[27]_1 (of_op1_sel_spr_pc),
        .\cur_data_i_reg[28]_0 (\cur_data_i_reg[28] ),
        .\cur_data_i_reg[28]_1 (\cur_data_i_reg[28]_0 ),
        .\cur_data_i_reg[28]_2 (\cur_data_i_reg[28]_1 ),
        .\cur_data_i_reg[28]_3 (\cur_data_i_reg[28]_2 ),
        .\cur_data_i_reg[28]_4 (\cur_data_i_reg[28]_3 ),
        .\cur_data_i_reg[28]_5 (\cur_data_i_reg[28]_4 ),
        .\cur_data_i_reg[28]_6 (\cur_data_i_reg[28]_5 ),
        .\cur_data_i_reg[29]_0 (INSTR_BUFFER_I1_n_116),
        .\cur_data_i_reg[2]_0 (INSTR_BUFFER_I1_n_192),
        .\cur_data_i_reg[30]_0 (\cur_data_i_reg[30] ),
        .\cur_data_i_reg[31]_0 (\cur_data_i_reg[31] ),
        .\cur_data_i_reg[31]_1 (\cur_data_i_reg[31]_0 ),
        .\cur_data_i_reg[31]_2 (\cur_data_i_reg[31]_1 ),
        .\cur_data_i_reg[31]_3 (\cur_data_i_reg[31]_2 ),
        .\cur_data_i_reg[31]_4 (\cur_data_i_reg[31]_3 ),
        .\cur_data_i_reg[31]_5 (\cur_data_i_reg[31]_4 ),
        .\cur_data_i_reg[31]_6 (\cur_data_i_reg[31]_5 [31:3]),
        .\cur_data_i_reg[3]_0 (\cur_data_i_reg[3]_0 ),
        .\cur_data_i_reg[4]_0 (\cur_data_i_reg[4] ),
        .\cur_data_i_reg[5]_0 (\cur_data_i_reg[5] ),
        .\cur_data_i_reg[5]_1 (\cur_data_i_reg[5]_0 ),
        .\cur_data_i_reg[5]_2 (\cur_data_i_reg[5]_1 ),
        .\cur_data_i_reg[6]_0 (INSTR_BUFFER_I1_n_138),
        .\cur_data_i_reg[7]_0 (\cur_data_i_reg[7] ),
        .\cur_data_i_reg[7]_1 (\cur_data_i_reg[7]_0 ),
        .\cur_data_i_reg[8]_0 (\cur_data_i_reg[8]_0 ),
        .\cur_data_i_reg[9]_0 (\cur_data_i_reg[9] ),
        .ex_MSR_clear_decode(ex_MSR_clear_decode),
        .ex_MSR_set_decode(ex_MSR_set_decode),
        .ex_atomic_instruction_pair0(ex_atomic_instruction_pair0),
        .ex_branch_with_delayslot(ex_branch_with_delayslot),
        .ex_branch_with_delayslot0(ex_branch_with_delayslot0),
        .ex_databus_access_i_reg(ex_databus_access_i_reg),
        .ex_databus_exclusive_i0(ex_databus_exclusive_i0),
        .ex_databus_read_i0(ex_databus_read_i0),
        .ex_gpr_write(ex_gpr_write),
        .ex_gpr_write_addr(ex_gpr_write_addr),
        .\ex_gpr_write_addr_reg[2] (\ex_gpr_write_addr_reg[2] ),
        .ex_jump(ex_jump),
        .ex_jump_hold(ex_jump_hold),
        .ex_jump_nodelay(ex_jump_nodelay),
        .ex_jump_nodelay0(ex_jump_nodelay0),
        .ex_jump_nodelay_reg(ex_jump_nodelay_reg),
        .ex_jump_nodelay_reg_0(ex_jump_nodelay_reg_0),
        .ex_jump_nodelay_reg_1(ex_jump_nodelay_reg_1),
        .ex_load_alu_carry2_out(ex_load_alu_carry2_out),
        .ex_load_shift_carry0(ex_load_shift_carry0),
        .ex_mbar_is_sleep0(ex_mbar_is_sleep0),
        .ex_move_to_MSR_instr35_out(ex_move_to_MSR_instr35_out),
        .ex_op1_cmp_eq(ex_op1_cmp_eq),
        .ex_op1_cmp_eq1(ex_op1_cmp_eq1),
        .ex_op1_cmp_eq_n7_out(ex_op1_cmp_eq_n7_out),
        .ex_set_bip(ex_set_bip),
        .ex_set_msr_ee_instr(ex_set_msr_ee_instr),
        .force12_out(force12_out),
        .force_Val10_out(force_Val10_out),
        .if0_pause(if0_pause),
        .if4_data(if4_data),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .\imm_reg_reg[0] (INSTR_BUFFER_I1_n_189),
        .\imm_reg_reg[10] (INSTR_BUFFER_I1_n_183),
        .\imm_reg_reg[11] (INSTR_BUFFER_I1_n_184),
        .\imm_reg_reg[12] (INSTR_BUFFER_I1_n_185),
        .\imm_reg_reg[13] (INSTR_BUFFER_I1_n_186),
        .\imm_reg_reg[14] (INSTR_BUFFER_I1_n_187),
        .\imm_reg_reg[15] (INSTR_BUFFER_I1_n_188),
        .\imm_reg_reg[2] (INSTR_BUFFER_I1_n_175),
        .\imm_reg_reg[3] (INSTR_BUFFER_I1_n_176),
        .\imm_reg_reg[4] (INSTR_BUFFER_I1_n_177),
        .\imm_reg_reg[5] (INSTR_BUFFER_I1_n_178),
        .\imm_reg_reg[6] (INSTR_BUFFER_I1_n_179),
        .\imm_reg_reg[7] (INSTR_BUFFER_I1_n_180),
        .\imm_reg_reg[8] (INSTR_BUFFER_I1_n_181),
        .\imm_reg_reg[9] (INSTR_BUFFER_I1_n_182),
        .in0(in0),
        .\m0_gpr_write_addr_reg[2] (\m0_gpr_write_addr_reg[2]_1 ),
        .m0_is_div_instr_i(m0_is_div_instr_i),
        .\m1_gpr_write_addr_reg[2] (\m1_gpr_write_addr_reg[2]_1 ),
        .m1_is_div_instr_i(m1_is_div_instr_i),
        .\m2_gpr_write_addr_reg[2] (\m2_gpr_write_addr_reg[2]_1 ),
        .m2_is_div_instr(m2_is_div_instr),
        .m2_m1_sel_res_reg(m2_m1_sel_res_reg),
        .\m3_gpr_write_addr_reg[2] (\m3_gpr_write_addr_reg[2]_1 ),
        .\m3_gpr_write_addr_reg[3] (\m3_gpr_write_addr_reg[3] ),
        .m3_is_div_instr_i_reg(m3_is_div_instr_i_reg),
        .of_byte_access(of_byte_access),
        .of_doublet_access(of_doublet_access),
        .of_ex_complete_in_later_stage(of_ex_complete_in_later_stage),
        .of_is_bsifi(of_is_bsifi),
        .of_is_div_instr(of_is_div_instr),
        .of_m0_complete_in_later_stage(of_m0_complete_in_later_stage),
        .of_m1_complete_in_later_stage(of_m1_complete_in_later_stage),
        .of_msr(of_msr),
        .of_op1_sel_spr(of_op1_sel_spr),
        .of_op3_sel(of_op3_sel),
        .of_raw_valid(of_raw_valid),
        .of_read_imm_reg(of_read_imm_reg),
        .p_104_in(p_104_in),
        .sync_reset(sync_reset),
        .use_Reg_Neg_DI1_out(use_Reg_Neg_DI1_out),
        .use_Reg_Neg_S3_out(use_Reg_Neg_S3_out),
        .wb_fwd(wb_fwd[0]),
        .\wb_gpr_write_addr_reg[3] (\wb_gpr_write_addr_reg[3] ));
  microblaze_microblaze_0_0_OneHot_Buffer__parameterized1 PREDECODE_BUFFER_I1
       (.Clk(Clk),
        .\EX_Branch_CMP_Op1[29]_i_3_0 (\EX_Branch_CMP_Op1[29]_i_3 ),
        .\EX_Branch_CMP_Op1[30]_i_3_0 (\EX_Branch_CMP_Op1[30]_i_3 ),
        .\EX_Branch_CMP_Op1[30]_i_3_1 (\EX_Branch_CMP_Op1[30]_i_3_0 ),
        .\EX_Branch_CMP_Op1[30]_i_3_2 (\EX_Branch_CMP_Op1[30]_i_3_1 ),
        .\EX_Branch_CMP_Op1[30]_i_3_3 (\EX_Op3[0]_i_6_0 ),
        .\EX_Branch_CMP_Op1[30]_i_7_0 (\EX_Op3[0]_i_18 ),
        .\EX_Branch_CMP_Op1[30]_i_7_1 (\EX_Op3[0]_i_17 ),
        .\EX_Branch_CMP_Op1[30]_i_7_2 (\EX_Branch_CMP_Op1[30]_i_7 ),
        .\EX_Branch_CMP_Op1[30]_i_8_0 (\EX_Op3[0]_i_16 ),
        .\EX_Branch_CMP_Op1[30]_i_8_1 (\EX_Op3[0]_i_15 ),
        .\EX_Branch_CMP_Op1[30]_i_8_2 (\EX_Branch_CMP_Op1[30]_i_8 ),
        .\EX_Branch_CMP_Op1_reg[29] (\EX_Op2[16]_i_2 [1:0]),
        .\EX_Branch_CMP_Op1_reg[29]_0 (\EX_Branch_CMP_Op1_reg[29] ),
        .\EX_Branch_CMP_Op1_reg[29]_1 (\EX_Branch_CMP_Op1_reg[29]_0 ),
        .\EX_Branch_CMP_Op1_reg[30] (\EX_Branch_CMP_Op1_reg[30] ),
        .\EX_Branch_CMP_Op1_reg[30]_0 (\EX_Branch_CMP_Op1_reg[30]_0 ),
        .\EX_Branch_CMP_Op1_reg[30]_1 (\EX_Branch_CMP_Op1_reg[30]_1 ),
        .\EX_Branch_CMP_Op1_reg[30]_2 (\EX_Branch_CMP_Op1_reg[30]_2 ),
        .\EX_Branch_CMP_Op1_reg[30]_3 (\EX_Branch_CMP_Op1_reg[30]_3 ),
        .\EX_Op1_reg[29] (\EX_Op1_reg[29] ),
        .\EX_Op1_reg[29]_0 (\EX_Op1_reg[29]_0 ),
        .\EX_Op1_reg[29]_1 (\EX_Op1_reg[29]_1 ),
        .\EX_Op1_reg[29]_2 (\EX_Op1_reg[29]_2 ),
        .\EX_Op1_reg[29]_3 (\EX_Op1_reg[29]_3 ),
        .\EX_Op1_reg[29]_4 (\EX_Op1_reg[29]_4 ),
        .\EX_Op1_reg[30] (\EX_Op1_reg[30] ),
        .\EX_Op1_reg[30]_0 (\EX_Op1_reg[30]_0 ),
        .\EX_Op1_reg[30]_1 (\EX_Op1_reg[30]_1 ),
        .\EX_Op1_reg[31] (INSTR_BUFFER_I1_n_173),
        .\EX_Op1_reg[31]_0 (\EX_Op1_reg[31] ),
        .\EX_Op1_reg[31]_1 (\EX_Op1_reg[31]_0 ),
        .\EX_Op2[0]_i_12_0 (\EX_Op2[0]_i_12 ),
        .\EX_Op2[0]_i_6_0 (\EX_Op2[0]_i_6 ),
        .\EX_Op2[0]_i_6_1 (INSTR_BUFFER_I1_n_38),
        .\EX_Op2[0]_i_6_2 (INSTR_BUFFER_I1_n_44),
        .\EX_Op2[0]_i_6_3 (\EX_Op3[0]_i_12 ),
        .\EX_Op2[0]_i_7_0 (\EX_Op2[0]_i_7 ),
        .\EX_Op2[0]_i_7_1 (\EX_Op3[0]_i_7_0 ),
        .\EX_Op2[0]_i_7_2 (\EX_Op3[0]_i_7_1 ),
        .\EX_Op2[0]_i_7_3 (\EX_Op3[0]_i_7_2 ),
        .\EX_Op2[0]_i_7_4 (\EX_Op3[0]_i_7_3 ),
        .\EX_Op2[0]_i_7_5 (\EX_Op3[0]_i_4 ),
        .\EX_Op2[16]_i_3 (INSTR_BUFFER_I1_n_116),
        .\EX_Op2_reg[0] (\EX_Op2_reg[0] ),
        .\EX_Op2_reg[0]_0 (\EX_Op2_reg[0]_0 ),
        .\EX_Op2_reg[0]_1 (\EX_Op2_reg[0]_1 ),
        .\EX_Op2_reg[0]_2 (INSTR_BUFFER_I1_n_189),
        .\EX_Op2_reg[10] (\EX_Op2_reg[10] ),
        .\EX_Op2_reg[10]_0 (\EX_Op2_reg[10]_0 ),
        .\EX_Op2_reg[10]_1 (\EX_Op2_reg[10]_1 ),
        .\EX_Op2_reg[10]_2 (INSTR_BUFFER_I1_n_183),
        .\EX_Op2_reg[11] (\EX_Op2_reg[11] ),
        .\EX_Op2_reg[11]_0 (\EX_Op2_reg[11]_0 ),
        .\EX_Op2_reg[11]_1 (\EX_Op2_reg[11]_1 ),
        .\EX_Op2_reg[11]_2 (INSTR_BUFFER_I1_n_184),
        .\EX_Op2_reg[12] (\EX_Op2_reg[12] ),
        .\EX_Op2_reg[12]_0 (\EX_Op2_reg[12]_0 ),
        .\EX_Op2_reg[12]_1 (\EX_Op2_reg[12]_1 ),
        .\EX_Op2_reg[12]_2 (INSTR_BUFFER_I1_n_185),
        .\EX_Op2_reg[13] (\EX_Op2_reg[13] ),
        .\EX_Op2_reg[13]_0 (\EX_Op2_reg[13]_0 ),
        .\EX_Op2_reg[13]_1 (\EX_Op2_reg[13]_1 ),
        .\EX_Op2_reg[13]_2 (INSTR_BUFFER_I1_n_186),
        .\EX_Op2_reg[14] (\EX_Op2_reg[14] ),
        .\EX_Op2_reg[14]_0 (\EX_Op2_reg[14]_0 ),
        .\EX_Op2_reg[14]_1 (\EX_Op2_reg[14]_1 ),
        .\EX_Op2_reg[14]_2 (INSTR_BUFFER_I1_n_187),
        .\EX_Op2_reg[15] (\EX_Op2_reg[15] ),
        .\EX_Op2_reg[15]_0 (\EX_Op2_reg[15]_0 ),
        .\EX_Op2_reg[15]_1 (\EX_Op2_reg[15]_1 ),
        .\EX_Op2_reg[15]_2 (INSTR_BUFFER_I1_n_188),
        .\EX_Op2_reg[16] (\EX_Op2_reg[16] ),
        .\EX_Op2_reg[16]_0 (INSTR_BUFFER_I1_n_139),
        .\EX_Op2_reg[17] (\EX_Op2_reg[17] ),
        .\EX_Op2_reg[17]_0 (INSTR_BUFFER_I1_n_140),
        .\EX_Op2_reg[18] (\EX_Op2_reg[18] ),
        .\EX_Op2_reg[18]_0 (INSTR_BUFFER_I1_n_141),
        .\EX_Op2_reg[1] (\EX_Op2_reg[1] ),
        .\EX_Op2_reg[1]_0 (\EX_Op2_reg[1]_0 ),
        .\EX_Op2_reg[1]_1 (\EX_Op2_reg[1]_1 ),
        .\EX_Op2_reg[1]_2 (INSTR_BUFFER_I1_n_174),
        .\EX_Op2_reg[20] (\EX_Op2_reg[20] ),
        .\EX_Op2_reg[20]_0 (INSTR_BUFFER_I1_n_142),
        .\EX_Op2_reg[21] (\EX_Op2_reg[21] ),
        .\EX_Op2_reg[21]_0 (INSTR_BUFFER_I1_n_143),
        .\EX_Op2_reg[25] (\EX_Op2_reg[25] ),
        .\EX_Op2_reg[25]_0 (INSTR_BUFFER_I1_n_138),
        .\EX_Op2_reg[29] (\EX_Op2_reg[29] ),
        .\EX_Op2_reg[29]_0 (\EX_Op2_reg[29]_0 ),
        .\EX_Op2_reg[29]_1 (\EX_Op2_reg[29]_1 ),
        .\EX_Op2_reg[29]_2 (INSTR_BUFFER_I1_n_192),
        .\EX_Op2_reg[2] (\EX_Op2_reg[2] ),
        .\EX_Op2_reg[2]_0 (\EX_Op2_reg[2]_0 ),
        .\EX_Op2_reg[2]_1 (\EX_Op2_reg[2]_1 ),
        .\EX_Op2_reg[2]_2 (INSTR_BUFFER_I1_n_175),
        .\EX_Op2_reg[30] (\EX_Op2_reg[30]_0 ),
        .\EX_Op2_reg[30]_0 (\EX_Op2_reg[30] ),
        .\EX_Op2_reg[30]_1 (INSTR_BUFFER_I1_n_191),
        .\EX_Op2_reg[31] (\EX_Op2_reg[31]_4 ),
        .\EX_Op2_reg[31]_0 (\EX_Op2_reg[31] ),
        .\EX_Op2_reg[31]_1 (\EX_Op2_reg[31]_0 ),
        .\EX_Op2_reg[31]_2 (INSTR_BUFFER_I1_n_190),
        .\EX_Op2_reg[31]_3 (\EX_Op2_reg[31]_1 ),
        .\EX_Op2_reg[31]_4 (\EX_Op2_reg[31]_2 ),
        .\EX_Op2_reg[31]_5 (\EX_Op2_reg[31]_3 ),
        .\EX_Op2_reg[3] (\EX_Op2_reg[3] ),
        .\EX_Op2_reg[3]_0 (\EX_Op2_reg[3]_0 ),
        .\EX_Op2_reg[3]_1 (\EX_Op2_reg[3]_1 ),
        .\EX_Op2_reg[3]_2 (INSTR_BUFFER_I1_n_176),
        .\EX_Op2_reg[4] (\EX_Op2_reg[4] ),
        .\EX_Op2_reg[4]_0 (\EX_Op2_reg[4]_0 ),
        .\EX_Op2_reg[4]_1 (\EX_Op2_reg[4]_1 ),
        .\EX_Op2_reg[4]_2 (INSTR_BUFFER_I1_n_177),
        .\EX_Op2_reg[5] (\EX_Op2_reg[5] ),
        .\EX_Op2_reg[5]_0 (\EX_Op2_reg[5]_0 ),
        .\EX_Op2_reg[5]_1 (\EX_Op2_reg[5]_1 ),
        .\EX_Op2_reg[5]_2 (INSTR_BUFFER_I1_n_178),
        .\EX_Op2_reg[6] (\EX_Op2_reg[6] ),
        .\EX_Op2_reg[6]_0 (\EX_Op2_reg[6]_0 ),
        .\EX_Op2_reg[6]_1 (\EX_Op2_reg[6]_1 ),
        .\EX_Op2_reg[6]_2 (INSTR_BUFFER_I1_n_179),
        .\EX_Op2_reg[7] (\EX_Op2_reg[7] ),
        .\EX_Op2_reg[7]_0 (\EX_Op2_reg[7]_0 ),
        .\EX_Op2_reg[7]_1 (\EX_Op2_reg[7]_1 ),
        .\EX_Op2_reg[7]_2 (INSTR_BUFFER_I1_n_180),
        .\EX_Op2_reg[8] (\EX_Op2_reg[8] ),
        .\EX_Op2_reg[8]_0 (\EX_Op2_reg[8]_0 ),
        .\EX_Op2_reg[8]_1 (\EX_Op2_reg[8]_1 ),
        .\EX_Op2_reg[8]_2 (INSTR_BUFFER_I1_n_181),
        .\EX_Op2_reg[9] (\EX_Op2_reg[9] ),
        .\EX_Op2_reg[9]_0 (\EX_Op2_reg[9]_0 ),
        .\EX_Op2_reg[9]_1 (\EX_Op2_reg[9]_1 ),
        .\EX_Op2_reg[9]_2 (INSTR_BUFFER_I1_n_182),
        .GPR_Op1(GPR_Op1),
        .M1_Sel_Mul_Res_reg(M1_Sel_Mul_Res_reg),
        .M1_Sel_Mul_Res_reg_0(M1_Sel_Mul_Res_reg_0),
        .Q({of_predecode,\cur_data_i_reg[1] }),
        .S_0(S_0),
        .S_1(S_1),
        .S_2(S_2),
        .S_3(S_3),
        .S_4(S_4),
        .S_5(S_5),
        .S_6(S_6),
        .S_7(S_7),
        .S_8(S_8),
        .S_9(S_9),
        .\Using_FPGA.Native (\Using_FPGA.Native_9 ),
        .\WB_Exception_Return_Addr_reg[16] (\WB_Exception_Return_Addr_reg[16] ),
        .\WB_Exception_Return_Addr_reg[17] (\WB_Exception_Return_Addr_reg[17] ),
        .\WB_Exception_Return_Addr_reg[18] (\WB_Exception_Return_Addr_reg[18] ),
        .\WB_Exception_Return_Addr_reg[20] (\WB_Exception_Return_Addr_reg[20] ),
        .\WB_Exception_Return_Addr_reg[21] (\WB_Exception_Return_Addr_reg[21] ),
        .\WB_Exception_Return_Addr_reg[25] (\WB_Exception_Return_Addr_reg[25] ),
        .addr({Prefetch_Buffer_Full,if4_pre_buffer_addr}),
        .\cur_data_i_reg[0]_0 (\cur_data_i_reg[0] ),
        .\cur_data_i_reg[0]_1 (\cur_data_i_reg[0]_0 ),
        .\cur_data_i_reg[10]_0 (if4_sel_input[1]),
        .\cur_data_i_reg[10]_1 (\cur_data_i_reg[10]_0 ),
        .\cur_data_i_reg[1]_0 (\cur_data_i_reg[1]_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26]_5 ),
        .\cur_data_i_reg[2]_0 (\cur_data_i_reg[31]_5 [2:0]),
        .\cur_data_i_reg[3]_0 (\cur_data_i_reg[3] ),
        .\cur_data_i_reg[6]_0 (\cur_data_i_reg[6] ),
        .\cur_data_i_reg[6]_1 (\cur_data_i_reg[6]_0 ),
        .\cur_data_i_reg[8]_0 (\cur_data_i_reg[8] ),
        .ex_alu_result(ex_alu_result),
        .ex_gpr_write_addr(ex_gpr_write_addr),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .in({in,if4_data[11],if4_data[12],if4_data[13],if4_data[14],if4_data[15],if4_data[16],if4_data[17],if4_data[18],if4_data[19],if4_data[20]}),
        .m0_gpr_write(m0_gpr_write),
        .\m0_gpr_write_addr_reg[2] (\m0_gpr_write_addr_reg[2] ),
        .\m0_gpr_write_addr_reg[2]_0 (\m0_gpr_write_addr_reg[2]_0 ),
        .\m1_M0_Result_i_reg[0] (\m1_M0_Result_i_reg[0] ),
        .\m1_M0_Result_i_reg[10] (\m1_M0_Result_i_reg[10] ),
        .\m1_M0_Result_i_reg[11] (\m1_M0_Result_i_reg[11] ),
        .\m1_M0_Result_i_reg[12] (\m1_M0_Result_i_reg[12] ),
        .\m1_M0_Result_i_reg[13] (\m1_M0_Result_i_reg[13] ),
        .\m1_M0_Result_i_reg[14] (\m1_M0_Result_i_reg[14] ),
        .\m1_M0_Result_i_reg[15] (\m1_M0_Result_i_reg[15] ),
        .\m1_M0_Result_i_reg[1] (\m1_M0_Result_i_reg[1] ),
        .\m1_M0_Result_i_reg[2] (\m1_M0_Result_i_reg[2] ),
        .\m1_M0_Result_i_reg[3] (\m1_M0_Result_i_reg[3] ),
        .\m1_M0_Result_i_reg[4] (\m1_M0_Result_i_reg[4] ),
        .\m1_M0_Result_i_reg[5] (\m1_M0_Result_i_reg[5] ),
        .\m1_M0_Result_i_reg[6] (\m1_M0_Result_i_reg[6] ),
        .\m1_M0_Result_i_reg[7] (\m1_M0_Result_i_reg[7] ),
        .\m1_M0_Result_i_reg[8] (\m1_M0_Result_i_reg[8] ),
        .\m1_M0_Result_i_reg[9] (\m1_M0_Result_i_reg[9] ),
        .m1_gpr_write(m1_gpr_write),
        .\m1_gpr_write_addr_reg[2] (\m1_gpr_write_addr_reg[2] ),
        .\m1_gpr_write_addr_reg[2]_0 (\m1_gpr_write_addr_reg[2]_0 ),
        .\m2_M1_Result_i_reg[29] (\m2_M1_Result_i_reg[29] ),
        .m2_gpr_write(m2_gpr_write),
        .\m2_gpr_write_addr_reg[2] (\m2_gpr_write_addr_reg[2] ),
        .\m2_gpr_write_addr_reg[2]_0 (\m2_gpr_write_addr_reg[2]_0 ),
        .m2_m1_sel_res_reg(m2_m1_sel_res_reg_0),
        .m3_gpr_write(m3_gpr_write),
        .\m3_gpr_write_addr_reg[2] (\m3_gpr_write_addr_reg[2] ),
        .\m3_gpr_write_addr_reg[2]_0 (\m3_gpr_write_addr_reg[2]_0 ),
        .of_op1_sel_spr(of_op1_sel_spr),
        .sync_reset(sync_reset),
        .wb_fwd(wb_fwd));
endmodule

(* ORIG_REF_NAME = "Read_Data_Mux_ff" *) 
module microblaze_microblaze_0_0_Read_Data_Mux_ff
   (wb_databus_read_data,
    Q,
    \trace_new_reg_value_i_reg[0] );
  output [15:0]wb_databus_read_data;
  input [15:0]Q;
  input [15:0]\trace_new_reg_value_i_reg[0] ;

  wire [15:0]Q;
  wire [15:0]\trace_new_reg_value_i_reg[0] ;
  wire [15:0]wb_databus_read_data;

  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[0]_i_3 
       (.I0(Q[15]),
        .I1(\trace_new_reg_value_i_reg[0] [15]),
        .O(wb_databus_read_data[15]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[10]_i_2 
       (.I0(Q[5]),
        .I1(\trace_new_reg_value_i_reg[0] [5]),
        .O(wb_databus_read_data[5]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[11]_i_2 
       (.I0(Q[4]),
        .I1(\trace_new_reg_value_i_reg[0] [4]),
        .O(wb_databus_read_data[4]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[12]_i_2 
       (.I0(Q[3]),
        .I1(\trace_new_reg_value_i_reg[0] [3]),
        .O(wb_databus_read_data[3]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[13]_i_2 
       (.I0(Q[2]),
        .I1(\trace_new_reg_value_i_reg[0] [2]),
        .O(wb_databus_read_data[2]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[14]_i_2 
       (.I0(Q[1]),
        .I1(\trace_new_reg_value_i_reg[0] [1]),
        .O(wb_databus_read_data[1]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[15]_i_2 
       (.I0(Q[0]),
        .I1(\trace_new_reg_value_i_reg[0] [0]),
        .O(wb_databus_read_data[0]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[1]_i_2 
       (.I0(Q[14]),
        .I1(\trace_new_reg_value_i_reg[0] [14]),
        .O(wb_databus_read_data[14]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[2]_i_2 
       (.I0(Q[13]),
        .I1(\trace_new_reg_value_i_reg[0] [13]),
        .O(wb_databus_read_data[13]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[3]_i_2 
       (.I0(Q[12]),
        .I1(\trace_new_reg_value_i_reg[0] [12]),
        .O(wb_databus_read_data[12]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[4]_i_2 
       (.I0(Q[11]),
        .I1(\trace_new_reg_value_i_reg[0] [11]),
        .O(wb_databus_read_data[11]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[5]_i_2 
       (.I0(Q[10]),
        .I1(\trace_new_reg_value_i_reg[0] [10]),
        .O(wb_databus_read_data[10]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[6]_i_2 
       (.I0(Q[9]),
        .I1(\trace_new_reg_value_i_reg[0] [9]),
        .O(wb_databus_read_data[9]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[7]_i_2 
       (.I0(Q[8]),
        .I1(\trace_new_reg_value_i_reg[0] [8]),
        .O(wb_databus_read_data[8]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[8]_i_2 
       (.I0(Q[7]),
        .I1(\trace_new_reg_value_i_reg[0] [7]),
        .O(wb_databus_read_data[7]));
  LUT2 #(
    .INIT(4'hE)) 
    \trace_new_reg_value_i[9]_i_2 
       (.I0(Q[6]),
        .I1(\trace_new_reg_value_i_reg[0] [6]),
        .O(wb_databus_read_data[6]));
endmodule

(* ORIG_REF_NAME = "Register_File_gti" *) 
module microblaze_microblaze_0_0_Register_File_gti
   (GPR_Op1,
    GPR_Op2,
    GPR_Op3,
    Clk,
    wb_gpr_wr,
    WB_Fwd,
    \EX_Op3[1]_i_2 ,
    ADDRD);
  output [0:31]GPR_Op1;
  output [0:31]GPR_Op2;
  output [0:31]GPR_Op3;
  input Clk;
  input wb_gpr_wr;
  input [0:31]WB_Fwd;
  input [14:0]\EX_Op3[1]_i_2 ;
  input [4:0]ADDRD;

  wire [4:0]ADDRD;
  wire Clk;
  wire [14:0]\EX_Op3[1]_i_2 ;
  wire [0:31]GPR_Op1;
  wire [0:31]GPR_Op2;
  wire [0:31]GPR_Op3;
  wire [0:31]WB_Fwd;
  wire wb_gpr_wr;

  microblaze_microblaze_0_0_MB_RAM32M \Using_LUT6.All_RAM32M[0].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[1]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[0],GPR_Op1[1]}),
        .GPR_Op2({GPR_Op2[0],GPR_Op2[1]}),
        .GPR_Op3({GPR_Op3[0],GPR_Op3[1]}),
        .WB_Fwd({WB_Fwd[0],WB_Fwd[1]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_685 \Using_LUT6.All_RAM32M[10].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[21]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[20],GPR_Op1[21]}),
        .GPR_Op2({GPR_Op2[20],GPR_Op2[21]}),
        .GPR_Op3({GPR_Op3[20],GPR_Op3[21]}),
        .WB_Fwd({WB_Fwd[20],WB_Fwd[21]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_686 \Using_LUT6.All_RAM32M[11].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[23]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[22],GPR_Op1[23]}),
        .GPR_Op2({GPR_Op2[22],GPR_Op2[23]}),
        .GPR_Op3({GPR_Op3[22],GPR_Op3[23]}),
        .WB_Fwd({WB_Fwd[22],WB_Fwd[23]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_687 \Using_LUT6.All_RAM32M[12].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[25]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[24],GPR_Op1[25]}),
        .GPR_Op2({GPR_Op2[24],GPR_Op2[25]}),
        .GPR_Op3({GPR_Op3[24],GPR_Op3[25]}),
        .WB_Fwd({WB_Fwd[24],WB_Fwd[25]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_688 \Using_LUT6.All_RAM32M[13].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[27]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[26],GPR_Op1[27]}),
        .GPR_Op2({GPR_Op2[26],GPR_Op2[27]}),
        .GPR_Op3({GPR_Op3[26],GPR_Op3[27]}),
        .WB_Fwd({WB_Fwd[26],WB_Fwd[27]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_689 \Using_LUT6.All_RAM32M[14].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[29]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[28],GPR_Op1[29]}),
        .GPR_Op2({GPR_Op2[28],GPR_Op2[29]}),
        .GPR_Op3({GPR_Op3[28],GPR_Op3[29]}),
        .WB_Fwd({WB_Fwd[28],WB_Fwd[29]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_690 \Using_LUT6.All_RAM32M[15].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[31]_i_3 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[30],GPR_Op1[31]}),
        .GPR_Op2({GPR_Op2[30],GPR_Op2[31]}),
        .GPR_Op3({GPR_Op3[30],GPR_Op3[31]}),
        .WB_Fwd({WB_Fwd[30],WB_Fwd[31]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_691 \Using_LUT6.All_RAM32M[1].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[3]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[2],GPR_Op1[3]}),
        .GPR_Op2({GPR_Op2[2],GPR_Op2[3]}),
        .GPR_Op3({GPR_Op3[2],GPR_Op3[3]}),
        .WB_Fwd({WB_Fwd[2],WB_Fwd[3]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_692 \Using_LUT6.All_RAM32M[2].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[5]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[4],GPR_Op1[5]}),
        .GPR_Op2({GPR_Op2[4],GPR_Op2[5]}),
        .GPR_Op3({GPR_Op3[4],GPR_Op3[5]}),
        .WB_Fwd({WB_Fwd[4],WB_Fwd[5]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_693 \Using_LUT6.All_RAM32M[3].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[7]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[6],GPR_Op1[7]}),
        .GPR_Op2({GPR_Op2[6],GPR_Op2[7]}),
        .GPR_Op3({GPR_Op3[6],GPR_Op3[7]}),
        .WB_Fwd({WB_Fwd[6],WB_Fwd[7]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_694 \Using_LUT6.All_RAM32M[4].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[9]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[8],GPR_Op1[9]}),
        .GPR_Op2({GPR_Op2[8],GPR_Op2[9]}),
        .GPR_Op3({GPR_Op3[8],GPR_Op3[9]}),
        .WB_Fwd({WB_Fwd[8],WB_Fwd[9]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_695 \Using_LUT6.All_RAM32M[5].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[11]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[10],GPR_Op1[11]}),
        .GPR_Op2({GPR_Op2[10],GPR_Op2[11]}),
        .GPR_Op3({GPR_Op3[10],GPR_Op3[11]}),
        .WB_Fwd({WB_Fwd[10],WB_Fwd[11]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_696 \Using_LUT6.All_RAM32M[6].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[13]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[12],GPR_Op1[13]}),
        .GPR_Op2({GPR_Op2[12],GPR_Op2[13]}),
        .GPR_Op3({GPR_Op3[12],GPR_Op3[13]}),
        .WB_Fwd({WB_Fwd[12],WB_Fwd[13]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_697 \Using_LUT6.All_RAM32M[7].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[15]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[14],GPR_Op1[15]}),
        .GPR_Op2({GPR_Op2[14],GPR_Op2[15]}),
        .GPR_Op3({GPR_Op3[14],GPR_Op3[15]}),
        .WB_Fwd({WB_Fwd[14],WB_Fwd[15]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_698 \Using_LUT6.All_RAM32M[8].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[17]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[16],GPR_Op1[17]}),
        .GPR_Op2({GPR_Op2[16],GPR_Op2[17]}),
        .GPR_Op3({GPR_Op3[16],GPR_Op3[17]}),
        .WB_Fwd({WB_Fwd[16],WB_Fwd[17]}),
        .wb_gpr_wr(wb_gpr_wr));
  microblaze_microblaze_0_0_MB_RAM32M_699 \Using_LUT6.All_RAM32M[9].ram32m_i 
       (.ADDRD(ADDRD),
        .Clk(Clk),
        .\EX_Op3[19]_i_2 (\EX_Op3[1]_i_2 ),
        .GPR_Op1({GPR_Op1[18],GPR_Op1[19]}),
        .GPR_Op2({GPR_Op2[18],GPR_Op2[19]}),
        .GPR_Op3({GPR_Op3[18],GPR_Op3[19]}),
        .WB_Fwd({WB_Fwd[18],WB_Fwd[19]}),
        .wb_gpr_wr(wb_gpr_wr));
endmodule

(* ORIG_REF_NAME = "Shift_Logic_Module_gti" *) 
module microblaze_microblaze_0_0_Shift_Logic_Module_gti
   (out,
    \EX_Op1_reg[16] ,
    in0,
    \m0_Ex_Result_i_reg[0] );
  output out;
  output \EX_Op1_reg[16] ;
  input in0;
  input \m0_Ex_Result_i_reg[0] ;

  (* RTL_KEEP = "true" *) wire sign_byte;
  (* RTL_KEEP = "true" *) wire sign_doublet;

  assign \EX_Op1_reg[16]  = sign_doublet;
  assign out = sign_byte;
  assign sign_byte = in0;
  assign sign_doublet = \m0_Ex_Result_i_reg[0] ;
endmodule

(* ORIG_REF_NAME = "Zero_Detect_gti" *) 
module microblaze_microblaze_0_0_Zero_Detect_gti
   (EX_Op1_Zero,
    div_iterations_early,
    EX_Op1_CMP_Equal,
    ex_op1_cmp_equal_n,
    div_busy_reg,
    \Using_FPGA.Native ,
    ex_start_div,
    div_busy_reg_0,
    div_busy_reg_1,
    lopt,
    lopt_1,
    lopt_2);
  output EX_Op1_Zero;
  output div_iterations_early;
  input EX_Op1_CMP_Equal;
  input ex_op1_cmp_equal_n;
  input div_busy_reg;
  input [29:0]\Using_FPGA.Native ;
  input ex_start_div;
  input div_busy_reg_0;
  input div_busy_reg_1;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire EX_Op1_CMP_Equal;
  wire EX_Op1_Zero;
  wire S;
  wire \S0_inferred__0/i__n_0 ;
  wire \S0_inferred__1/i__n_0 ;
  wire \S0_inferred__2/i__n_0 ;
  wire \S0_inferred__3/i__n_0 ;
  wire [29:0]\Using_FPGA.Native ;
  wire div_busy_reg;
  wire div_busy_reg_0;
  wire div_busy_reg_1;
  wire div_iterations_early;
  wire ex_op1_cmp_equal_n;
  wire ex_start_div;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire zero_CI_1;
  wire zero_CI_2;
  wire zero_CI_3;
  wire zero_CI_4;
  wire zero_CI_5;
  wire zero_CI_6;

  assign lopt = lopt_5;
  assign lopt_6 = lopt_1;
  assign lopt_7 = lopt_2;
  microblaze_microblaze_0_0_MB_MUXCY_584 Part_Of_Zero_Carry_Start
       (.EX_Op1_CMP_Equal(EX_Op1_CMP_Equal),
        .lopt(\^lopt ),
        .lopt_1(ex_op1_cmp_equal_n),
        .lopt_2(S),
        .lopt_3(\^lopt_1 ),
        .lopt_4(\S0_inferred__3/i__n_0 ),
        .lopt_5(\^lopt_2 ),
        .lopt_6(\S0_inferred__2/i__n_0 ),
        .zero_CI_6(zero_CI_6));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__0/i_ 
       (.I0(\Using_FPGA.Native [0]),
        .I1(\Using_FPGA.Native [5]),
        .I2(\Using_FPGA.Native [3]),
        .I3(\Using_FPGA.Native [4]),
        .I4(\Using_FPGA.Native [1]),
        .I5(\Using_FPGA.Native [2]),
        .O(\S0_inferred__0/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__1/i_ 
       (.I0(\Using_FPGA.Native [6]),
        .I1(\Using_FPGA.Native [11]),
        .I2(\Using_FPGA.Native [9]),
        .I3(\Using_FPGA.Native [10]),
        .I4(\Using_FPGA.Native [7]),
        .I5(\Using_FPGA.Native [8]),
        .O(\S0_inferred__1/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__2/i_ 
       (.I0(\Using_FPGA.Native [12]),
        .I1(\Using_FPGA.Native [17]),
        .I2(\Using_FPGA.Native [15]),
        .I3(\Using_FPGA.Native [16]),
        .I4(\Using_FPGA.Native [13]),
        .I5(\Using_FPGA.Native [14]),
        .O(\S0_inferred__2/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__3/i_ 
       (.I0(\Using_FPGA.Native [18]),
        .I1(\Using_FPGA.Native [23]),
        .I2(\Using_FPGA.Native [21]),
        .I3(\Using_FPGA.Native [22]),
        .I4(\Using_FPGA.Native [19]),
        .I5(\Using_FPGA.Native [20]),
        .O(\S0_inferred__3/i__n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \S0_inferred__4/i_ 
       (.I0(\Using_FPGA.Native [24]),
        .I1(\Using_FPGA.Native [29]),
        .I2(\Using_FPGA.Native [27]),
        .I3(\Using_FPGA.Native [28]),
        .I4(\Using_FPGA.Native [25]),
        .I5(\Using_FPGA.Native [26]),
        .O(S));
  microblaze_microblaze_0_0_MB_MUXCY_585 \Zero_Detecting[1].I_Part_Of_Zero_Detect 
       (.EX_Op1_Zero(EX_Op1_Zero),
        .div_busy_reg(div_busy_reg),
        .div_busy_reg_0(div_busy_reg_0),
        .div_busy_reg_1(div_busy_reg_1),
        .div_iterations_early(div_iterations_early),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .ex_start_div(ex_start_div),
        .lopt(lopt_4),
        .zero_CI_1(zero_CI_1));
  microblaze_microblaze_0_0_MB_MUXCY_586 \Zero_Detecting[2].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__0/i__n_0 ),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .lopt(lopt_3),
        .zero_CI_1(zero_CI_1),
        .zero_CI_2(zero_CI_2));
  microblaze_microblaze_0_0_MB_MUXCY_587 \Zero_Detecting[3].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__1/i__n_0 ),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .lopt(lopt_3),
        .lopt_1(\S0_inferred__0/i__n_0 ),
        .lopt_2(lopt_4),
        .lopt_3(div_busy_reg),
        .lopt_4(lopt_5),
        .lopt_5(lopt_6),
        .lopt_6(lopt_7),
        .zero_CI_2(zero_CI_2),
        .zero_CI_3(zero_CI_3));
  microblaze_microblaze_0_0_MB_MUXCY_588 \Zero_Detecting[4].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__2/i__n_0 ),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .lopt(\^lopt_2 ),
        .zero_CI_3(zero_CI_3),
        .zero_CI_4(zero_CI_4));
  microblaze_microblaze_0_0_MB_MUXCY_589 \Zero_Detecting[5].I_Part_Of_Zero_Detect 
       (.\Using_FPGA.Native_0 (\S0_inferred__3/i__n_0 ),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .lopt(\^lopt_1 ),
        .zero_CI_4(zero_CI_4),
        .zero_CI_5(zero_CI_5));
  microblaze_microblaze_0_0_MB_MUXCY_590 \Zero_Detecting[6].I_Part_Of_Zero_Detect 
       (.S(S),
        .ex_op1_cmp_equal_n(ex_op1_cmp_equal_n),
        .lopt(\^lopt ),
        .zero_CI_5(zero_CI_5),
        .zero_CI_6(zero_CI_6));
endmodule

(* ORIG_REF_NAME = "address_hit" *) 
module microblaze_microblaze_0_0_address_hit
   (single_Step_N_reg,
    Hit,
    Dbg_Reg_En,
    single_Step_N,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3 ,
    force_stop_i,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3_0 ,
    Dbg_TDI,
    Address,
    Dbg_Clk,
    Q);
  output single_Step_N_reg;
  output Hit;
  input [0:7]Dbg_Reg_En;
  input single_Step_N;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3 ;
  input force_stop_i;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3_0 ;
  input Dbg_TDI;
  input [0:31]Address;
  input Dbg_Clk;
  input [0:0]Q;

  wire [0:31]Address;
  wire Dbg_Clk;
  wire [0:7]Dbg_Reg_En;
  wire Dbg_TDI;
  wire Hit;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_i_3_0 ;
  wire [0:0]Q;
  wire SRL16_MC15_1;
  wire SRL16_MC15_2;
  wire SRL16_MC15_3;
  wire SRL16_MC15_4;
  wire SRL16_MC15_5;
  wire SRL16_MC15_6;
  wire SRL16_MC15_7;
  wire SRL16_Sel_0;
  wire SRL16_Sel_1;
  wire SRL16_Sel_2;
  wire SRL16_Sel_3;
  wire SRL16_Sel_4;
  wire SRL16_Sel_5;
  wire SRL16_Sel_6;
  wire SRL16_Sel_7;
  wire carry_0;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire carry_6;
  wire carry_7;
  wire force_stop_i;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire single_Step_N;
  wire single_Step_N_reg;
  wire which_pc__0;

  microblaze_microblaze_0_0_MB_MUXCY \Compare[0].MUXCY_I 
       (.Q(Q),
        .SRL16_Sel_7(SRL16_Sel_7),
        .carry_7(carry_7),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(SRL16_Sel_6),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(SRL16_Sel_5),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(SRL16_Sel_4));
  microblaze_microblaze_0_0_MB_SRLC16E \Compare[0].SRLC16E_I 
       (.Address({Address[28],Address[29],Address[30],Address[31]}),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_Reg_En(Dbg_Reg_En),
        .SRL16_MC15_7(SRL16_MC15_7),
        .SRL16_Sel_7(SRL16_Sel_7),
        .which_pc__0(which_pc__0));
  microblaze_microblaze_0_0_MB_MUXCY_15 \Compare[1].MUXCY_I 
       (.SRL16_Sel_6(SRL16_Sel_6),
        .carry_6(carry_6),
        .carry_7(carry_7),
        .lopt(lopt),
        .lopt_1(lopt_1));
  microblaze_microblaze_0_0_MB_SRLC16E_16 \Compare[1].SRLC16E_I 
       (.Address({Address[24],Address[25],Address[26],Address[27]}),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_6(SRL16_MC15_6),
        .SRL16_MC15_7(SRL16_MC15_7),
        .SRL16_Sel_6(SRL16_Sel_6),
        .which_pc__0(which_pc__0));
  microblaze_microblaze_0_0_MB_MUXCY_17 \Compare[2].MUXCY_I 
       (.SRL16_Sel_5(SRL16_Sel_5),
        .carry_5(carry_5),
        .carry_6(carry_6),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  microblaze_microblaze_0_0_MB_SRLC16E_18 \Compare[2].SRLC16E_I 
       (.Address({Address[20],Address[21],Address[22],Address[23]}),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_5(SRL16_MC15_5),
        .SRL16_MC15_6(SRL16_MC15_6),
        .SRL16_Sel_5(SRL16_Sel_5),
        .which_pc__0(which_pc__0));
  microblaze_microblaze_0_0_MB_MUXCY_19 \Compare[3].MUXCY_I 
       (.SRL16_Sel_4(SRL16_Sel_4),
        .carry_4(carry_4),
        .carry_5(carry_5),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  microblaze_microblaze_0_0_MB_SRLC16E_20 \Compare[3].SRLC16E_I 
       (.Address({Address[16],Address[17],Address[18],Address[19]}),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_4(SRL16_MC15_4),
        .SRL16_MC15_5(SRL16_MC15_5),
        .SRL16_Sel_4(SRL16_Sel_4),
        .which_pc__0(which_pc__0));
  microblaze_microblaze_0_0_MB_MUXCY_21 \Compare[4].MUXCY_I 
       (.SRL16_Sel_3(SRL16_Sel_3),
        .carry_3(carry_3),
        .carry_4(carry_4),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(SRL16_Sel_2),
        .lopt_3(lopt_8),
        .lopt_4(lopt_9),
        .lopt_5(SRL16_Sel_1),
        .lopt_6(lopt_10),
        .lopt_7(lopt_11),
        .lopt_8(SRL16_Sel_0));
  microblaze_microblaze_0_0_MB_SRLC16E_22 \Compare[4].SRLC16E_I 
       (.Address({Address[12],Address[13],Address[14],Address[15]}),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_3(SRL16_MC15_3),
        .SRL16_MC15_4(SRL16_MC15_4),
        .SRL16_Sel_3(SRL16_Sel_3),
        .which_pc__0(which_pc__0));
  microblaze_microblaze_0_0_MB_MUXCY_23 \Compare[5].MUXCY_I 
       (.SRL16_Sel_2(SRL16_Sel_2),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7));
  microblaze_microblaze_0_0_MB_SRLC16E_24 \Compare[5].SRLC16E_I 
       (.Address({Address[8],Address[9],Address[10],Address[11]}),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_2(SRL16_MC15_2),
        .SRL16_MC15_3(SRL16_MC15_3),
        .SRL16_Sel_2(SRL16_Sel_2),
        .which_pc__0(which_pc__0));
  microblaze_microblaze_0_0_MB_MUXCY_25 \Compare[6].MUXCY_I 
       (.SRL16_Sel_1(SRL16_Sel_1),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_8),
        .lopt_1(lopt_9));
  microblaze_microblaze_0_0_MB_SRLC16E_26 \Compare[6].SRLC16E_I 
       (.Address({Address[4],Address[5],Address[6],Address[7]}),
        .Dbg_Clk(Dbg_Clk),
        .SRL16_MC15_1(SRL16_MC15_1),
        .SRL16_MC15_2(SRL16_MC15_2),
        .SRL16_Sel_1(SRL16_Sel_1),
        .which_pc__0(which_pc__0));
  microblaze_microblaze_0_0_MB_MUXCY_27 \Compare[7].MUXCY_I 
       (.SRL16_Sel_0(SRL16_Sel_0),
        .carry_0(carry_0),
        .carry_1(carry_1),
        .lopt(lopt_10),
        .lopt_1(lopt_11));
  microblaze_microblaze_0_0_MB_SRLC16E_28 \Compare[7].SRLC16E_I 
       (.Address({Address[0],Address[1],Address[2],Address[3]}),
        .Dbg_Clk(Dbg_Clk),
        .Dbg_TDI(Dbg_TDI),
        .SRL16_MC15_1(SRL16_MC15_1),
        .SRL16_Sel_0(SRL16_Sel_0),
        .which_pc__0(which_pc__0));
  microblaze_microblaze_0_0_MB_MUXCY_29 \The_First_BreakPoints.MUXCY_Post 
       (.Hit(Hit),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_i_3 (\Performance_Debug_Control.ex_dbg_pc_hit_i_i_3 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_i_3_0 (\Performance_Debug_Control.ex_dbg_pc_hit_i_i_3_0 ),
        .carry_0(carry_0),
        .force_stop_i(force_stop_i),
        .single_Step_N(single_Step_N),
        .single_Step_N_reg(single_Step_N_reg));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and
   (if4_ready_tmp3,
    \Using_FPGA.Native ,
    if4_ready_tmp2,
    lopt,
    lopt_1);
  output if4_ready_tmp3;
  input \Using_FPGA.Native ;
  input if4_ready_tmp2;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire if4_ready_tmp2;
  wire if4_ready_tmp3;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_48 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .if4_ready_tmp2(if4_ready_tmp2),
        .if4_ready_tmp3(if4_ready_tmp3),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_144
   (of_piperun_masked_no9,
    ex_is_div_instr_i_reg,
    \Using_FPGA.Native ,
    of_piperun_masked_no8,
    \Using_FPGA.Native_i_1__8 ,
    \Using_FPGA.Native_i_1__8_0 ,
    \Using_FPGA.Native_i_1__8_1 ,
    ex_dead_valid_hold,
    lopt,
    lopt_1);
  output of_piperun_masked_no9;
  output ex_is_div_instr_i_reg;
  input \Using_FPGA.Native ;
  input of_piperun_masked_no8;
  input \Using_FPGA.Native_i_1__8 ;
  input \Using_FPGA.Native_i_1__8_0 ;
  input \Using_FPGA.Native_i_1__8_1 ;
  input ex_dead_valid_hold;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_i_1__8 ;
  wire \Using_FPGA.Native_i_1__8_0 ;
  wire \Using_FPGA.Native_i_1__8_1 ;
  wire ex_dead_valid_hold;
  wire ex_is_div_instr_i_reg;
  wire lopt;
  wire lopt_1;
  wire of_piperun_masked_no8;
  wire of_piperun_masked_no9;

  microblaze_microblaze_0_0_MB_MUXCY_145 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_i_1__8 (\Using_FPGA.Native_i_1__8 ),
        .\Using_FPGA.Native_i_1__8_0 (\Using_FPGA.Native_i_1__8_0 ),
        .\Using_FPGA.Native_i_1__8_1 (\Using_FPGA.Native_i_1__8_1 ),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_is_div_instr_i_reg(ex_is_div_instr_i_reg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_piperun_masked_no8(of_piperun_masked_no8),
        .of_piperun_masked_no9(of_piperun_masked_no9));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_146
   (of_piperun_masked_no8,
    of_piperun_masked_no7,
    lopt,
    lopt_1,
    lopt_2);
  output of_piperun_masked_no8;
  input of_piperun_masked_no7;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire of_piperun_masked_no7;
  wire of_piperun_masked_no8;

  microblaze_microblaze_0_0_MB_MUXCY_147 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .of_piperun_masked_no7(of_piperun_masked_no7),
        .of_piperun_masked_no8(of_piperun_masked_no8));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_148
   (of_piperun_masked_no7,
    of_piperun_masked_no6,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_piperun_masked_no7;
  input of_piperun_masked_no6;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_piperun_masked_no6;
  wire of_piperun_masked_no7;

  microblaze_microblaze_0_0_MB_MUXCY_149 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_piperun_masked_no6(of_piperun_masked_no6),
        .of_piperun_masked_no7(of_piperun_masked_no7));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_150
   (of_piperun_masked_no6,
    \Using_FPGA.Native ,
    of_piperun_masked_no5,
    lopt,
    lopt_1);
  output of_piperun_masked_no6;
  input \Using_FPGA.Native ;
  input of_piperun_masked_no5;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_piperun_masked_no5;
  wire of_piperun_masked_no6;

  microblaze_microblaze_0_0_MB_MUXCY_151 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_piperun_masked_no5(of_piperun_masked_no5),
        .of_piperun_masked_no6(of_piperun_masked_no6));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_152
   (of_piperun_masked_no5,
    \Using_FPGA.Native ,
    of_piperun_masked_no4,
    lopt,
    lopt_1);
  output of_piperun_masked_no5;
  input \Using_FPGA.Native ;
  input of_piperun_masked_no4;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_piperun_masked_no4;
  wire of_piperun_masked_no5;

  microblaze_microblaze_0_0_MB_MUXCY_153 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_piperun_masked_no4(of_piperun_masked_no4),
        .of_piperun_masked_no5(of_piperun_masked_no5));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_154
   (of_piperun_masked_no4,
    \Using_FPGA.Native ,
    of_piperun_masked_no3,
    lopt,
    lopt_1);
  output of_piperun_masked_no4;
  input \Using_FPGA.Native ;
  input of_piperun_masked_no3;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_piperun_masked_no3;
  wire of_piperun_masked_no4;

  microblaze_microblaze_0_0_MB_MUXCY_155 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_piperun_masked_no3(of_piperun_masked_no3),
        .of_piperun_masked_no4(of_piperun_masked_no4));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_156
   (of_piperun_masked_no3,
    \Using_FPGA.Native ,
    of_piperun_masked_no2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_piperun_masked_no3;
  input \Using_FPGA.Native ;
  input of_piperun_masked_no2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_piperun_masked_no2;
  wire of_piperun_masked_no3;

  microblaze_microblaze_0_0_MB_MUXCY_157 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_piperun_masked_no2(of_piperun_masked_no2),
        .of_piperun_masked_no3(of_piperun_masked_no3));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_158
   (of_piperun_masked_no2,
    \Using_FPGA.Native ,
    of_piperun_masked_no1,
    lopt,
    lopt_1);
  output of_piperun_masked_no2;
  input \Using_FPGA.Native ;
  input of_piperun_masked_no1;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_piperun_masked_no1;
  wire of_piperun_masked_no2;

  microblaze_microblaze_0_0_MB_MUXCY_159 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_piperun_masked_no1(of_piperun_masked_no1),
        .of_piperun_masked_no2(of_piperun_masked_no2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_160
   (\Using_FPGA.Native ,
    p_48_out,
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ,
    \Use_Async_Reset.sync_reset_reg ,
    D,
    D_0,
    WB_Div_Zero_Overflow_reg,
    of_raw_valid,
    of_piperun_masked_no10,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 ,
    p_43_out__4,
    \Using_FPGA.Native_0 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 ,
    sync_reset,
    of_dead_valid_hold_reg,
    of_dead_valid_hold,
    out,
    ex_gpr_write,
    \Using_FPGA.Native_1 ,
    ex_gpr_write_dbg,
    \of_MSR_i_reg[30] ,
    \of_MSR_i_reg[30]_0 ,
    \of_MSR_i_reg[25] ,
    \of_MSR_i_reg[25]_0 ,
    \of_MSR_i_reg[25]_1 ,
    \of_MSR_i_reg[25]_2 );
  output \Using_FPGA.Native ;
  output p_48_out;
  output \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  output \Use_Async_Reset.sync_reset_reg ;
  output D;
  output D_0;
  output [1:0]WB_Div_Zero_Overflow_reg;
  input of_raw_valid;
  input of_piperun_masked_no10;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ;
  input [0:0]\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 ;
  input p_43_out__4;
  input [0:0]\Using_FPGA.Native_0 ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 ;
  input sync_reset;
  input of_dead_valid_hold_reg;
  input of_dead_valid_hold;
  input out;
  input ex_gpr_write;
  input \Using_FPGA.Native_1 ;
  input ex_gpr_write_dbg;
  input \of_MSR_i_reg[30] ;
  input \of_MSR_i_reg[30]_0 ;
  input [1:0]\of_MSR_i_reg[25] ;
  input [1:0]\of_MSR_i_reg[25]_0 ;
  input \of_MSR_i_reg[25]_1 ;
  input [0:0]\of_MSR_i_reg[25]_2 ;

  wire D;
  wire D_0;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ;
  wire [0:0]\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [1:0]WB_Div_Zero_Overflow_reg;
  wire ex_gpr_write;
  wire ex_gpr_write_dbg;
  wire [1:0]\of_MSR_i_reg[25] ;
  wire [1:0]\of_MSR_i_reg[25]_0 ;
  wire \of_MSR_i_reg[25]_1 ;
  wire [0:0]\of_MSR_i_reg[25]_2 ;
  wire \of_MSR_i_reg[30] ;
  wire \of_MSR_i_reg[30]_0 ;
  wire of_dead_valid_hold;
  wire of_dead_valid_hold_reg;
  wire of_piperun_masked_no10;
  wire of_raw_valid;
  wire out;
  wire p_43_out__4;
  wire p_48_out;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_MUXCY_161 MUXCY_I
       (.D(D),
        .D_0(D_0),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg (\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg),
        .ex_gpr_write(ex_gpr_write),
        .ex_gpr_write_dbg(ex_gpr_write_dbg),
        .\of_MSR_i_reg[25] (\of_MSR_i_reg[25] ),
        .\of_MSR_i_reg[25]_0 (\of_MSR_i_reg[25]_0 ),
        .\of_MSR_i_reg[25]_1 (\of_MSR_i_reg[25]_1 ),
        .\of_MSR_i_reg[25]_2 (\of_MSR_i_reg[25]_2 ),
        .\of_MSR_i_reg[30] (\of_MSR_i_reg[30] ),
        .\of_MSR_i_reg[30]_0 (\of_MSR_i_reg[30]_0 ),
        .of_dead_valid_hold(of_dead_valid_hold),
        .of_dead_valid_hold_reg(of_dead_valid_hold_reg),
        .of_piperun_masked_no10(of_piperun_masked_no10),
        .of_raw_valid(of_raw_valid),
        .out(out),
        .p_43_out__4(p_43_out__4),
        .p_48_out(p_48_out),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_162
   (of_piperun_masked_no10,
    of_piperun_masked_no9,
    lopt,
    lopt_1,
    lopt_2);
  output of_piperun_masked_no10;
  input of_piperun_masked_no9;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire of_piperun_masked_no10;
  wire of_piperun_masked_no9;

  microblaze_microblaze_0_0_MB_MUXCY_163 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .of_piperun_masked_no10(of_piperun_masked_no10),
        .of_piperun_masked_no9(of_piperun_masked_no9));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_164
   (of_piperun_masked_no1,
    \Using_FPGA.Native ,
    of_piperun_raw,
    lopt,
    lopt_1);
  output of_piperun_masked_no1;
  input \Using_FPGA.Native ;
  input of_piperun_raw;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_piperun_masked_no1;
  wire of_piperun_raw;

  microblaze_microblaze_0_0_MB_MUXCY_165 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_piperun_masked_no1(of_piperun_masked_no1),
        .of_piperun_raw(of_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_168
   (m3_raw_valid_reg,
    \Use_Async_Reset.sync_reset_reg ,
    m3_raw_valid_reg_0,
    wb_piperun_i_reg,
    D,
    wb_exception_from_m3_reg_rep__0,
    \wb_exception_raw_kind_reg[31] ,
    wb_exception_from_m3_reg_rep__0_0,
    m3_dead_valid_hold_reg,
    m3_piperun_masked_no3,
    sync_reset,
    m3_active_access,
    m3_raw_valid_reg_1,
    m3_raw_valid_reg_2,
    wb_raw_valid_reg,
    wb_raw_valid_reg_0,
    wb_raw_valid_reg_1,
    m3_gpr_write_dbg,
    m3_dead_valid_hold_reg_0,
    m3_dead_valid_hold,
    Q,
    \wb_PC_i_reg[31] ,
    \wb_PC_i_reg[31]_0 ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    m3_msr,
    lopt,
    lopt_1);
  output m3_raw_valid_reg;
  output \Use_Async_Reset.sync_reset_reg ;
  output m3_raw_valid_reg_0;
  output wb_piperun_i_reg;
  output D;
  output wb_exception_from_m3_reg_rep__0;
  output [0:0]\wb_exception_raw_kind_reg[31] ;
  output wb_exception_from_m3_reg_rep__0_0;
  input m3_dead_valid_hold_reg;
  input m3_piperun_masked_no3;
  input sync_reset;
  input m3_active_access;
  input m3_raw_valid_reg_1;
  input [0:0]m3_raw_valid_reg_2;
  input wb_raw_valid_reg;
  input wb_raw_valid_reg_0;
  input wb_raw_valid_reg_1;
  input m3_gpr_write_dbg;
  input m3_dead_valid_hold_reg_0;
  input m3_dead_valid_hold;
  input [2:0]Q;
  input \wb_PC_i_reg[31] ;
  input \wb_PC_i_reg[31]_0 ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:0]m3_msr;
  input lopt;
  output lopt_1;

  wire D;
  wire [2:0]Q;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire m3_active_access;
  wire m3_dead_valid_hold;
  wire m3_dead_valid_hold_reg;
  wire m3_dead_valid_hold_reg_0;
  wire m3_gpr_write_dbg;
  wire [0:0]m3_msr;
  wire m3_piperun_masked_no3;
  wire m3_raw_valid_reg;
  wire m3_raw_valid_reg_0;
  wire m3_raw_valid_reg_1;
  wire [0:0]m3_raw_valid_reg_2;
  wire sync_reset;
  wire \wb_PC_i_reg[31] ;
  wire \wb_PC_i_reg[31]_0 ;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;
  wire [0:0]\wb_exception_raw_kind_reg[31] ;
  wire wb_piperun_i_reg;
  wire wb_raw_valid_reg;
  wire wb_raw_valid_reg_0;
  wire wb_raw_valid_reg_1;

  microblaze_microblaze_0_0_MB_MUXCY_169 MUXCY_I
       (.D(D),
        .Q(Q),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m3_active_access(m3_active_access),
        .m3_dead_valid_hold(m3_dead_valid_hold),
        .m3_dead_valid_hold_reg(m3_dead_valid_hold_reg),
        .m3_dead_valid_hold_reg_0(m3_dead_valid_hold_reg_0),
        .m3_gpr_write_dbg(m3_gpr_write_dbg),
        .m3_msr(m3_msr),
        .m3_piperun_masked_no3(m3_piperun_masked_no3),
        .m3_raw_valid_reg(m3_raw_valid_reg),
        .m3_raw_valid_reg_0(m3_raw_valid_reg_0),
        .m3_raw_valid_reg_1(m3_raw_valid_reg_1),
        .m3_raw_valid_reg_2(m3_raw_valid_reg_2),
        .sync_reset(sync_reset),
        .\wb_PC_i_reg[31] (\wb_PC_i_reg[31] ),
        .\wb_PC_i_reg[31]_0 (\wb_PC_i_reg[31]_0 ),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_0),
        .\wb_exception_raw_kind_reg[31] (\wb_exception_raw_kind_reg[31] ),
        .wb_piperun_i_reg(wb_piperun_i_reg),
        .wb_raw_valid_reg(wb_raw_valid_reg),
        .wb_raw_valid_reg_0(wb_raw_valid_reg_0),
        .wb_raw_valid_reg_1(wb_raw_valid_reg_1));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_170
   (m3_piperun_masked_no3,
    WB_MSR_Set_IE_reg,
    m3_piperun_masked_no2,
    lopt,
    lopt_1);
  output m3_piperun_masked_no3;
  input WB_MSR_Set_IE_reg;
  input m3_piperun_masked_no2;
  input lopt;
  output lopt_1;

  wire WB_MSR_Set_IE_reg;
  wire lopt;
  wire lopt_1;
  wire m3_piperun_masked_no2;
  wire m3_piperun_masked_no3;

  microblaze_microblaze_0_0_MB_MUXCY_171 MUXCY_I
       (.WB_MSR_Set_IE_reg(WB_MSR_Set_IE_reg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m3_piperun_masked_no2(m3_piperun_masked_no2),
        .m3_piperun_masked_no3(m3_piperun_masked_no3));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_172
   (m3_piperun_masked_no2,
    m3_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output m3_piperun_masked_no2;
  input m3_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m3_piperun_masked_no1;
  wire m3_piperun_masked_no2;

  microblaze_microblaze_0_0_MB_MUXCY_173 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m3_piperun_masked_no1(m3_piperun_masked_no1),
        .m3_piperun_masked_no2(m3_piperun_masked_no2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_174
   (m3_piperun_masked_no1,
    \Using_FPGA.Native ,
    m3_piperun_raw,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m3_piperun_masked_no1;
  input \Using_FPGA.Native ;
  input m3_piperun_raw;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m3_piperun_masked_no1;
  wire m3_piperun_raw;

  microblaze_microblaze_0_0_MB_MUXCY_175 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m3_piperun_masked_no1(m3_piperun_masked_no1),
        .m3_piperun_raw(m3_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_180
   (m2_raw_valid_reg,
    \Use_DLMB.m2_potential_bubble_reg ,
    \Use_Async_Reset.sync_reset_reg ,
    \Use_DAXI.M_AXI_DP_BREADY_I_reg ,
    \Use_DAXI.M_AXI_DP_RREADY_I_reg ,
    m2_raw_valid_reg_0,
    wb_exception_from_m3_reg_rep__0,
    D_0,
    D_1,
    D_2,
    WB_Div_Zero_Overflow_reg,
    wb_exception_from_m3_reg_rep__0_0,
    m2_dead_valid_hold_reg,
    m2_piperun_masked_no5,
    m2_potential_bubble,
    \Use_DLMB.m2_potential_bubble_reg_0 ,
    D,
    \Use_DLMB.m2_dready_hold_reg ,
    m2_dlmb_dready,
    \Use_DLMB.m2_dready_hold_reg_0 ,
    sync_reset,
    M_AXI_DP_RVALID,
    M_AXI_DP_BVALID,
    \Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ,
    m2_databus_write,
    \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ,
    m2_dlmb_drop_request,
    m2_raw_valid_reg_1,
    \Using_FPGA.Native ,
    m2_dead_valid_hold,
    m2_gpr_write,
    m1_gpr_write,
    m2_gpr_write_dbg,
    m1_gpr_write_dbg,
    m2_is_div_instr,
    m1_is_div_instr_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    lopt,
    lopt_1);
  output m2_raw_valid_reg;
  output \Use_DLMB.m2_potential_bubble_reg ;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Use_DAXI.M_AXI_DP_BREADY_I_reg ;
  output \Use_DAXI.M_AXI_DP_RREADY_I_reg ;
  output m2_raw_valid_reg_0;
  output wb_exception_from_m3_reg_rep__0;
  output D_0;
  output D_1;
  output D_2;
  output WB_Div_Zero_Overflow_reg;
  output wb_exception_from_m3_reg_rep__0_0;
  input m2_dead_valid_hold_reg;
  input m2_piperun_masked_no5;
  input m2_potential_bubble;
  input \Use_DLMB.m2_potential_bubble_reg_0 ;
  input [0:0]D;
  input [0:0]\Use_DLMB.m2_dready_hold_reg ;
  input m2_dlmb_dready;
  input \Use_DLMB.m2_dready_hold_reg_0 ;
  input sync_reset;
  input M_AXI_DP_RVALID;
  input M_AXI_DP_BVALID;
  input [1:0]\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ;
  input m2_databus_write;
  input \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ;
  input m2_dlmb_drop_request;
  input m2_raw_valid_reg_1;
  input \Using_FPGA.Native ;
  input m2_dead_valid_hold;
  input m2_gpr_write;
  input m1_gpr_write;
  input m2_gpr_write_dbg;
  input m1_gpr_write_dbg;
  input m2_is_div_instr;
  input m1_is_div_instr_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input lopt;
  output lopt_1;

  wire [0:0]D;
  wire D_0;
  wire D_1;
  wire D_2;
  wire M_AXI_DP_BVALID;
  wire M_AXI_DP_RVALID;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_DAXI.M_AXI_DP_BREADY_I_reg ;
  wire [1:0]\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_RREADY_I_reg ;
  wire \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ;
  wire [0:0]\Use_DLMB.m2_dready_hold_reg ;
  wire \Use_DLMB.m2_dready_hold_reg_0 ;
  wire \Use_DLMB.m2_potential_bubble_reg ;
  wire \Use_DLMB.m2_potential_bubble_reg_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire WB_Div_Zero_Overflow_reg;
  wire lopt;
  wire lopt_1;
  wire m1_gpr_write;
  wire m1_gpr_write_dbg;
  wire m1_is_div_instr_i;
  wire m2_databus_write;
  wire m2_dead_valid_hold;
  wire m2_dead_valid_hold_reg;
  wire m2_dlmb_dready;
  wire m2_dlmb_drop_request;
  wire m2_gpr_write;
  wire m2_gpr_write_dbg;
  wire m2_is_div_instr;
  wire m2_piperun_masked_no5;
  wire m2_potential_bubble;
  wire m2_raw_valid_reg;
  wire m2_raw_valid_reg_0;
  wire m2_raw_valid_reg_1;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;

  microblaze_microblaze_0_0_MB_MUXCY_181 MUXCY_I
       (.D(D),
        .D_0(D_0),
        .D_1(D_1),
        .D_2(D_2),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Use_DAXI.M_AXI_DP_BREADY_I_reg (\Use_DAXI.M_AXI_DP_BREADY_I_reg ),
        .\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 (\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ),
        .\Use_DAXI.M_AXI_DP_RREADY_I_reg (\Use_DAXI.M_AXI_DP_RREADY_I_reg ),
        .\Use_DAXI.M_AXI_DP_RREADY_I_reg_0 (\Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ),
        .\Use_DLMB.m2_dready_hold_reg (\Use_DLMB.m2_dready_hold_reg ),
        .\Use_DLMB.m2_dready_hold_reg_0 (\Use_DLMB.m2_dready_hold_reg_0 ),
        .\Use_DLMB.m2_potential_bubble_reg (\Use_DLMB.m2_potential_bubble_reg ),
        .\Use_DLMB.m2_potential_bubble_reg_0 (\Use_DLMB.m2_potential_bubble_reg_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_6 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m1_gpr_write(m1_gpr_write),
        .m1_gpr_write_dbg(m1_gpr_write_dbg),
        .m1_is_div_instr_i(m1_is_div_instr_i),
        .m2_databus_write(m2_databus_write),
        .m2_dead_valid_hold(m2_dead_valid_hold),
        .m2_dead_valid_hold_reg(m2_dead_valid_hold_reg),
        .m2_dlmb_dready(m2_dlmb_dready),
        .m2_dlmb_drop_request(m2_dlmb_drop_request),
        .m2_gpr_write(m2_gpr_write),
        .m2_gpr_write_dbg(m2_gpr_write_dbg),
        .m2_is_div_instr(m2_is_div_instr),
        .m2_piperun_masked_no5(m2_piperun_masked_no5),
        .m2_potential_bubble(m2_potential_bubble),
        .m2_raw_valid_reg(m2_raw_valid_reg),
        .m2_raw_valid_reg_0(m2_raw_valid_reg_0),
        .m2_raw_valid_reg_1(m2_raw_valid_reg_1),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_0));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_182
   (m2_piperun_masked_no5,
    m2_piperun_masked_no4,
    lopt,
    lopt_1,
    lopt_2);
  output m2_piperun_masked_no5;
  input m2_piperun_masked_no4;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m2_piperun_masked_no4;
  wire m2_piperun_masked_no5;

  microblaze_microblaze_0_0_MB_MUXCY_183 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m2_piperun_masked_no4(m2_piperun_masked_no4),
        .m2_piperun_masked_no5(m2_piperun_masked_no5));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_184
   (m2_piperun_masked_no4,
    m2_piperun_masked_no3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m2_piperun_masked_no4;
  input m2_piperun_masked_no3;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m2_piperun_masked_no3;
  wire m2_piperun_masked_no4;

  microblaze_microblaze_0_0_MB_MUXCY_185 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m2_piperun_masked_no3(m2_piperun_masked_no3),
        .m2_piperun_masked_no4(m2_piperun_masked_no4));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_186
   (m2_piperun_masked_no3,
    m2_piperun_masked_no2,
    lopt,
    lopt_1,
    lopt_2);
  output m2_piperun_masked_no3;
  input m2_piperun_masked_no2;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m2_piperun_masked_no2;
  wire m2_piperun_masked_no3;

  microblaze_microblaze_0_0_MB_MUXCY_187 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m2_piperun_masked_no2(m2_piperun_masked_no2),
        .m2_piperun_masked_no3(m2_piperun_masked_no3));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_188
   (m2_piperun_masked_no2,
    \Using_FPGA.Native ,
    m2_piperun_masked_no1,
    lopt,
    lopt_1);
  output m2_piperun_masked_no2;
  input \Using_FPGA.Native ;
  input m2_piperun_masked_no1;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire m2_piperun_masked_no1;
  wire m2_piperun_masked_no2;

  microblaze_microblaze_0_0_MB_MUXCY_189 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m2_piperun_masked_no1(m2_piperun_masked_no1),
        .m2_piperun_masked_no2(m2_piperun_masked_no2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_190
   (m2_piperun_masked_no1,
    m2_piperun_raw,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    m2_allow_dready,
    DReady,
    \Using_FPGA.Native_1 ,
    DWait,
    lopt,
    lopt_1,
    lopt_2);
  output m2_piperun_masked_no1;
  input m2_piperun_raw;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input m2_allow_dready;
  input DReady;
  input \Using_FPGA.Native_1 ;
  input DWait;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire DReady;
  wire DWait;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m2_allow_dready;
  wire m2_piperun_masked_no1;
  wire m2_piperun_raw;

  microblaze_microblaze_0_0_MB_MUXCY_191 MUXCY_I
       (.DReady(DReady),
        .DWait(DWait),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m2_allow_dready(m2_allow_dready),
        .m2_piperun_masked_no1(m2_piperun_masked_no1),
        .m2_piperun_raw(m2_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_194
   (m1_raw_valid_reg,
    m1_databus_write_from_m0_reg,
    m1_databus_write_from_m0_reg_0,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ,
    m1_databus_addr_from_m0_reg,
    m1_databus_access_from_m0_reg,
    \Use_DLMB.m1_dlmb_issued_reg ,
    m1_raw_valid_reg_0,
    wb_exception_from_m3_reg_rep__0,
    D_0,
    D_1,
    D_2,
    WB_Div_Zero_Overflow_reg,
    wb_exception_from_m3_reg_rep__0_0,
    \m2_PC_i_reg[0] ,
    m1_piperun_masked_no2,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ,
    m1_databus_access,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ,
    \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ,
    M_AXI_DP_AWREADY,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ,
    M_AXI_DP_WREADY,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ,
    D,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ,
    DWait,
    m2_allow_dready,
    m2_dlmb_drop_request,
    \Use_DAXI.m2_active_access_unmasked_reg ,
    m1_dlmb_issued,
    sync_reset,
    A_N201_out,
    in0,
    \Using_FPGA.Native ,
    m1_dead_valid_hold,
    m1_is_div_instr_i,
    m0_is_div_instr_i,
    m1_gpr_write_dbg,
    m0_gpr_write_dbg,
    m1_gpr_write,
    m0_gpr_write,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    lopt,
    lopt_1);
  output m1_raw_valid_reg;
  output m1_databus_write_from_m0_reg;
  output m1_databus_write_from_m0_reg_0;
  output \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ;
  output m1_databus_addr_from_m0_reg;
  output m1_databus_access_from_m0_reg;
  output \Use_DLMB.m1_dlmb_issued_reg ;
  output m1_raw_valid_reg_0;
  output wb_exception_from_m3_reg_rep__0;
  output D_0;
  output D_1;
  output D_2;
  output WB_Div_Zero_Overflow_reg;
  output wb_exception_from_m3_reg_rep__0_0;
  input \m2_PC_i_reg[0] ;
  input m1_piperun_masked_no2;
  input \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ;
  input m1_databus_access;
  input \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ;
  input \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ;
  input M_AXI_DP_AWREADY;
  input \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ;
  input M_AXI_DP_WREADY;
  input \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ;
  input [1:0]D;
  input \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ;
  input DWait;
  input m2_allow_dready;
  input m2_dlmb_drop_request;
  input \Use_DAXI.m2_active_access_unmasked_reg ;
  input m1_dlmb_issued;
  input sync_reset;
  input A_N201_out;
  input in0;
  input \Using_FPGA.Native ;
  input m1_dead_valid_hold;
  input m1_is_div_instr_i;
  input m0_is_div_instr_i;
  input m1_gpr_write_dbg;
  input m0_gpr_write_dbg;
  input m1_gpr_write;
  input m0_gpr_write;
  input \Using_FPGA.Native_0 ;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input lopt;
  output lopt_1;

  wire A_N201_out;
  wire [1:0]D;
  wire DWait;
  wire D_0;
  wire D_1;
  wire D_2;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_WREADY;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ;
  wire \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ;
  wire \Use_DAXI.m2_active_access_unmasked_reg ;
  wire \Use_DLMB.m1_dlmb_issued_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire WB_Div_Zero_Overflow_reg;
  wire in0;
  wire lopt;
  wire lopt_1;
  wire m0_gpr_write;
  wire m0_gpr_write_dbg;
  wire m0_is_div_instr_i;
  wire m1_databus_access;
  wire m1_databus_access_from_m0_reg;
  wire m1_databus_addr_from_m0_reg;
  wire m1_databus_write_from_m0_reg;
  wire m1_databus_write_from_m0_reg_0;
  wire m1_dead_valid_hold;
  wire m1_dlmb_issued;
  wire m1_gpr_write;
  wire m1_gpr_write_dbg;
  wire m1_is_div_instr_i;
  wire m1_piperun_masked_no2;
  wire m1_raw_valid_reg;
  wire m1_raw_valid_reg_0;
  wire \m2_PC_i_reg[0] ;
  wire m2_allow_dready;
  wire m2_dlmb_drop_request;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;

  microblaze_microblaze_0_0_MB_MUXCY_195 MUXCY_I
       (.A_N201_out(A_N201_out),
        .D(D),
        .DWait(DWait),
        .D_0(D_0),
        .D_1(D_1),
        .D_2(D_2),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg (\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 (\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 (\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ),
        .\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg (\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg (\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 (\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 (\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ),
        .\Use_DAXI.m2_active_access_unmasked_reg (\Use_DAXI.m2_active_access_unmasked_reg ),
        .\Use_DLMB.m1_dlmb_issued_reg (\Use_DLMB.m1_dlmb_issued_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_6 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg),
        .in0(in0),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m0_gpr_write(m0_gpr_write),
        .m0_gpr_write_dbg(m0_gpr_write_dbg),
        .m0_is_div_instr_i(m0_is_div_instr_i),
        .m1_databus_access(m1_databus_access),
        .m1_databus_access_from_m0_reg(m1_databus_access_from_m0_reg),
        .m1_databus_addr_from_m0_reg(m1_databus_addr_from_m0_reg),
        .m1_databus_write_from_m0_reg(m1_databus_write_from_m0_reg),
        .m1_databus_write_from_m0_reg_0(m1_databus_write_from_m0_reg_0),
        .m1_dead_valid_hold(m1_dead_valid_hold),
        .m1_dlmb_issued(m1_dlmb_issued),
        .m1_gpr_write(m1_gpr_write),
        .m1_gpr_write_dbg(m1_gpr_write_dbg),
        .m1_is_div_instr_i(m1_is_div_instr_i),
        .m1_piperun_masked_no2(m1_piperun_masked_no2),
        .m1_raw_valid_reg(m1_raw_valid_reg),
        .m1_raw_valid_reg_0(m1_raw_valid_reg_0),
        .\m2_PC_i_reg[0] (\m2_PC_i_reg[0] ),
        .m2_allow_dready(m2_allow_dready),
        .m2_dlmb_drop_request(m2_dlmb_drop_request),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_0));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_196
   (m1_piperun_masked_no2,
    m1_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output m1_piperun_masked_no2;
  input m1_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m1_piperun_masked_no1;
  wire m1_piperun_masked_no2;

  microblaze_microblaze_0_0_MB_MUXCY_197 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m1_piperun_masked_no1(m1_piperun_masked_no1),
        .m1_piperun_masked_no2(m1_piperun_masked_no2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_198
   (m1_piperun_masked_no1,
    m1_piperun_raw,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m1_piperun_masked_no1;
  input m1_piperun_raw;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m1_piperun_masked_no1;
  wire m1_piperun_raw;

  microblaze_microblaze_0_0_MB_MUXCY_199 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m1_piperun_masked_no1(m1_piperun_masked_no1),
        .m1_piperun_raw(m1_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_202
   (\Using_FPGA.Native ,
    m0_raw_valid_reg,
    wb_exception_from_m3_reg_rep__0,
    D,
    D_0,
    WB_Div_Zero_Overflow_reg,
    wb_exception_from_m3_reg_rep__0_0,
    m0_piperun_masked_no4,
    m0_raw_valid_reg_0,
    \Using_FPGA.Native_0 ,
    m0_raw_valid_reg_1,
    sync_reset,
    \Using_FPGA.Native_1 ,
    m0_dead_valid_hold,
    m0_gpr_write_dbg,
    ex_gpr_write_dbg,
    m0_gpr_write,
    ex_gpr_write,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native ;
  output m0_raw_valid_reg;
  output wb_exception_from_m3_reg_rep__0;
  output D;
  output D_0;
  output WB_Div_Zero_Overflow_reg;
  output wb_exception_from_m3_reg_rep__0_0;
  input m0_piperun_masked_no4;
  input m0_raw_valid_reg_0;
  input [0:0]\Using_FPGA.Native_0 ;
  input m0_raw_valid_reg_1;
  input sync_reset;
  input \Using_FPGA.Native_1 ;
  input m0_dead_valid_hold;
  input m0_gpr_write_dbg;
  input ex_gpr_write_dbg;
  input m0_gpr_write;
  input ex_gpr_write;
  input \Using_FPGA.Native_2 ;
  input [0:0]\Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire D;
  wire D_0;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire [0:0]\Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire WB_Div_Zero_Overflow_reg;
  wire ex_gpr_write;
  wire ex_gpr_write_dbg;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m0_dead_valid_hold;
  wire m0_gpr_write;
  wire m0_gpr_write_dbg;
  wire m0_piperun_masked_no4;
  wire m0_raw_valid_reg;
  wire m0_raw_valid_reg_0;
  wire m0_raw_valid_reg_1;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;

  microblaze_microblaze_0_0_MB_MUXCY_203 MUXCY_I
       (.D(D),
        .D_0(D_0),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_8 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg),
        .ex_gpr_write(ex_gpr_write),
        .ex_gpr_write_dbg(ex_gpr_write_dbg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m0_dead_valid_hold(m0_dead_valid_hold),
        .m0_gpr_write(m0_gpr_write),
        .m0_gpr_write_dbg(m0_gpr_write_dbg),
        .m0_piperun_masked_no4(m0_piperun_masked_no4),
        .m0_raw_valid_reg(m0_raw_valid_reg),
        .m0_raw_valid_reg_0(m0_raw_valid_reg_0),
        .m0_raw_valid_reg_1(m0_raw_valid_reg_1),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_0));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_204
   (m0_piperun_masked_no4,
    m0_piperun_masked_no3,
    lopt,
    lopt_1,
    lopt_2);
  output m0_piperun_masked_no4;
  input m0_piperun_masked_no3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m0_piperun_masked_no3;
  wire m0_piperun_masked_no4;

  microblaze_microblaze_0_0_MB_MUXCY_205 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m0_piperun_masked_no3(m0_piperun_masked_no3),
        .m0_piperun_masked_no4(m0_piperun_masked_no4));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_206
   (m0_piperun_masked_no3,
    m0_piperun_masked_no2,
    lopt,
    lopt_1,
    lopt_2);
  output m0_piperun_masked_no3;
  input m0_piperun_masked_no2;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m0_piperun_masked_no2;
  wire m0_piperun_masked_no3;

  microblaze_microblaze_0_0_MB_MUXCY_207 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m0_piperun_masked_no2(m0_piperun_masked_no2),
        .m0_piperun_masked_no3(m0_piperun_masked_no3));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_208
   (m0_piperun_masked_no2,
    m0_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output m0_piperun_masked_no2;
  input m0_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m0_piperun_masked_no1;
  wire m0_piperun_masked_no2;

  microblaze_microblaze_0_0_MB_MUXCY_209 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m0_piperun_masked_no1(m0_piperun_masked_no1),
        .m0_piperun_masked_no2(m0_piperun_masked_no2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_210
   (m0_piperun_masked_no1,
    \Using_FPGA.Native ,
    m0_piperun_raw,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m0_piperun_masked_no1;
  input \Using_FPGA.Native ;
  input m0_piperun_raw;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m0_piperun_masked_no1;
  wire m0_piperun_raw;

  microblaze_microblaze_0_0_MB_MUXCY_211 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m0_piperun_masked_no1(m0_piperun_masked_no1),
        .m0_piperun_raw(m0_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_218
   (if4_piperun_masked_no4,
    if4_piperun_masked_no3,
    lopt,
    lopt_1,
    lopt_2);
  output if4_piperun_masked_no4;
  input if4_piperun_masked_no3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire if4_piperun_masked_no3;
  wire if4_piperun_masked_no4;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_MB_MUXCY_219 MUXCY_I
       (.if4_piperun_masked_no3(if4_piperun_masked_no3),
        .if4_piperun_masked_no4(if4_piperun_masked_no4),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_220
   (if4_piperun_masked_no3,
    \Using_FPGA.Native ,
    if4_piperun_masked_no2,
    lopt,
    lopt_1);
  output if4_piperun_masked_no3;
  input \Using_FPGA.Native ;
  input if4_piperun_masked_no2;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire if4_piperun_masked_no2;
  wire if4_piperun_masked_no3;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_221 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .if4_piperun_masked_no2(if4_piperun_masked_no2),
        .if4_piperun_masked_no3(if4_piperun_masked_no3),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_224
   (\Using_FPGA.Native ,
    \Use_Async_Reset.sync_reset_reg ,
    \Use_Async_Reset.sync_reset_reg_0 ,
    if4_dead_fetch_hold_reg,
    if3_piperun_masked_no3,
    \Use_ILMB.if3_iready_hold_reg ,
    sync_reset,
    \Use_ILMB.if3_potential_bubble_reg ,
    if3_potential_bubble,
    D,
    if3_ilmb_iready,
    if4_dead_fetch_hold_reg_0,
    if4_dead_fetch_hold_reg_1,
    kill_fetch,
    if4_dead_fetch_hold_reg_2,
    if4_dead_fetch_hold_reg_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native ;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Use_Async_Reset.sync_reset_reg_0 ;
  output if4_dead_fetch_hold_reg;
  input if3_piperun_masked_no3;
  input \Use_ILMB.if3_iready_hold_reg ;
  input sync_reset;
  input \Use_ILMB.if3_potential_bubble_reg ;
  input if3_potential_bubble;
  input [0:0]D;
  input if3_ilmb_iready;
  input if4_dead_fetch_hold_reg_0;
  input if4_dead_fetch_hold_reg_1;
  input kill_fetch;
  input if4_dead_fetch_hold_reg_2;
  input if4_dead_fetch_hold_reg_3;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_Async_Reset.sync_reset_reg_0 ;
  wire \Use_ILMB.if3_iready_hold_reg ;
  wire \Use_ILMB.if3_potential_bubble_reg ;
  wire \Using_FPGA.Native ;
  wire if3_ilmb_iready;
  wire if3_piperun_masked_no3;
  wire if3_potential_bubble;
  wire if4_dead_fetch_hold_reg;
  wire if4_dead_fetch_hold_reg_0;
  wire if4_dead_fetch_hold_reg_1;
  wire if4_dead_fetch_hold_reg_2;
  wire if4_dead_fetch_hold_reg_3;
  wire kill_fetch;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_MUXCY_225 MUXCY_I
       (.D(D),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Use_Async_Reset.sync_reset_reg_0 (\Use_Async_Reset.sync_reset_reg_0 ),
        .\Use_ILMB.if3_iready_hold_reg (\Use_ILMB.if3_iready_hold_reg ),
        .\Use_ILMB.if3_potential_bubble_reg (\Use_ILMB.if3_potential_bubble_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .if3_ilmb_iready(if3_ilmb_iready),
        .if3_piperun_masked_no3(if3_piperun_masked_no3),
        .if3_potential_bubble(if3_potential_bubble),
        .if4_dead_fetch_hold_reg(if4_dead_fetch_hold_reg),
        .if4_dead_fetch_hold_reg_0(if4_dead_fetch_hold_reg_0),
        .if4_dead_fetch_hold_reg_1(if4_dead_fetch_hold_reg_1),
        .if4_dead_fetch_hold_reg_2(if4_dead_fetch_hold_reg_2),
        .if4_dead_fetch_hold_reg_3(if4_dead_fetch_hold_reg_3),
        .kill_fetch(kill_fetch),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_226
   (if3_piperun_masked_no3,
    if4_ibus_access_i_reg,
    if3_piperun_masked_no2,
    lopt,
    lopt_1);
  output if3_piperun_masked_no3;
  input if4_ibus_access_i_reg;
  input if3_piperun_masked_no2;
  input lopt;
  output lopt_1;

  wire if3_piperun_masked_no2;
  wire if3_piperun_masked_no3;
  wire if4_ibus_access_i_reg;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_227 MUXCY_I
       (.if3_piperun_masked_no2(if3_piperun_masked_no2),
        .if3_piperun_masked_no3(if3_piperun_masked_no3),
        .if4_ibus_access_i_reg(if4_ibus_access_i_reg),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_228
   (if3_piperun_masked_no2,
    if3_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output if3_piperun_masked_no2;
  input if3_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire if3_piperun_masked_no1;
  wire if3_piperun_masked_no2;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_MB_MUXCY_229 MUXCY_I
       (.if3_piperun_masked_no1(if3_piperun_masked_no1),
        .if3_piperun_masked_no2(if3_piperun_masked_no2),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_232
   (\Using_FPGA.Native ,
    if2_ibus_first_cycle_raw_reg,
    \Use_ILMB.if2_ilmb_issued_reg ,
    if3_dead_fetch_hold_reg,
    if2_piperun_masked_no2,
    \Use_ILMB.if2_ilmb_issued_reg_0 ,
    IWAIT,
    if3_allow_iready,
    if2_ilmb_issued,
    sync_reset,
    if3_dead_fetch_hold_reg_0,
    if3_dead_fetch_hold_reg_1,
    kill_fetch,
    if3_dead_fetch_hold_reg_2,
    if3_dead_fetch_hold_reg_3,
    lopt,
    lopt_1,
    lopt_2);
  output \Using_FPGA.Native ;
  output if2_ibus_first_cycle_raw_reg;
  output \Use_ILMB.if2_ilmb_issued_reg ;
  output if3_dead_fetch_hold_reg;
  input if2_piperun_masked_no2;
  input \Use_ILMB.if2_ilmb_issued_reg_0 ;
  input IWAIT;
  input if3_allow_iready;
  input if2_ilmb_issued;
  input sync_reset;
  input if3_dead_fetch_hold_reg_0;
  input if3_dead_fetch_hold_reg_1;
  input kill_fetch;
  input if3_dead_fetch_hold_reg_2;
  input if3_dead_fetch_hold_reg_3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire IWAIT;
  wire \Use_ILMB.if2_ilmb_issued_reg ;
  wire \Use_ILMB.if2_ilmb_issued_reg_0 ;
  wire \Using_FPGA.Native ;
  wire if2_ibus_first_cycle_raw_reg;
  wire if2_ilmb_issued;
  wire if2_piperun_masked_no2;
  wire if3_allow_iready;
  wire if3_dead_fetch_hold_reg;
  wire if3_dead_fetch_hold_reg_0;
  wire if3_dead_fetch_hold_reg_1;
  wire if3_dead_fetch_hold_reg_2;
  wire if3_dead_fetch_hold_reg_3;
  wire kill_fetch;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_MUXCY_233 MUXCY_I
       (.IWAIT(IWAIT),
        .\Use_ILMB.if2_ilmb_issued_reg (\Use_ILMB.if2_ilmb_issued_reg ),
        .\Use_ILMB.if2_ilmb_issued_reg_0 (\Use_ILMB.if2_ilmb_issued_reg_0 ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .if2_ibus_first_cycle_raw_reg(if2_ibus_first_cycle_raw_reg),
        .if2_ilmb_issued(if2_ilmb_issued),
        .if2_piperun_masked_no2(if2_piperun_masked_no2),
        .if3_allow_iready(if3_allow_iready),
        .if3_dead_fetch_hold_reg(if3_dead_fetch_hold_reg),
        .if3_dead_fetch_hold_reg_0(if3_dead_fetch_hold_reg_0),
        .if3_dead_fetch_hold_reg_1(if3_dead_fetch_hold_reg_1),
        .if3_dead_fetch_hold_reg_2(if3_dead_fetch_hold_reg_2),
        .if3_dead_fetch_hold_reg_3(if3_dead_fetch_hold_reg_3),
        .kill_fetch(kill_fetch),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_234
   (if2_piperun_masked_no2,
    if3_ibus_access_i_reg,
    if2_piperun_masked_no1,
    lopt,
    lopt_1);
  output if2_piperun_masked_no2;
  input if3_ibus_access_i_reg;
  input if2_piperun_masked_no1;
  input lopt;
  output lopt_1;

  wire if2_piperun_masked_no1;
  wire if2_piperun_masked_no2;
  wire if3_ibus_access_i_reg;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_235 MUXCY_I
       (.if2_piperun_masked_no1(if2_piperun_masked_no1),
        .if2_piperun_masked_no2(if2_piperun_masked_no2),
        .if3_ibus_access_i_reg(if3_ibus_access_i_reg),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_238
   (if2_raw_valid_reg,
    if0_raw_valid_reg,
    lopt,
    lopt_1,
    lopt_2);
  output if2_raw_valid_reg;
  input if0_raw_valid_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire if0_raw_valid_reg;
  wire if2_raw_valid_reg;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_MB_MUXCY_239 MUXCY_I
       (.if0_raw_valid_reg(if0_raw_valid_reg),
        .if2_raw_valid_reg(if2_raw_valid_reg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_242
   (ex_raw_valid_reg,
    \Using_FPGA.Native ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ,
    D,
    \ex_gpr_write_addr_reg[3] ,
    \ex_gpr_write_addr_reg[2] ,
    wb_exception_from_m3_reg_rep,
    D_0,
    \Use_Async_Reset.sync_reset_reg ,
    ex_raw_valid_reg_0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    wb_exception_from_m3_reg_rep__0,
    \Using_FPGA.Native_3 ,
    D_1,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    WB_Div_Zero_Overflow_reg,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \m0_PC_i_reg[0] ,
    ex_piperun_masked_no6,
    ex_jump_hold,
    ex_jump,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \m0_exception_raw_kind_reg[30] ,
    m0_exception_raw_kind,
    sync_reset,
    m0_exception_from_ex,
    in0,
    of_clear_msr_bip_hold_reg,
    ex_gpr_write_addr,
    of_clear_msr_bip_hold_reg_0,
    of_set_msr_ie_hold_reg,
    of_clear_msr_bip_hold_reg_1,
    of_set_msr_ee_hold_reg,
    \Using_FPGA.Native_14 ,
    of_set_msr_ie,
    of_set_msr_ie_hold_reg_0,
    \Using_FPGA.Native_15 ,
    m0_is_div_instr_i,
    ex_reservation,
    ex_reservation_reg,
    ex_reservation_reg_0,
    wb_exception_taken,
    \Using_FPGA.Native_16 ,
    ex_dead_valid_hold,
    \Using_FPGA.Native_17 ,
    wb_msr_clear_bip,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    wb_MSR_i,
    ex_MSR_i,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    EX_CarryIn,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output ex_raw_valid_reg;
  output \Using_FPGA.Native ;
  output \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  output D;
  output \ex_gpr_write_addr_reg[3] ;
  output \ex_gpr_write_addr_reg[2] ;
  output wb_exception_from_m3_reg_rep;
  output D_0;
  output \Use_Async_Reset.sync_reset_reg ;
  output ex_raw_valid_reg_0;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output wb_exception_from_m3_reg_rep__0;
  output \Using_FPGA.Native_3 ;
  output D_1;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output WB_Div_Zero_Overflow_reg;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  input \m0_PC_i_reg[0] ;
  input ex_piperun_masked_no6;
  input ex_jump_hold;
  input ex_jump;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \m0_exception_raw_kind_reg[30] ;
  input [0:0]m0_exception_raw_kind;
  input sync_reset;
  input m0_exception_from_ex;
  input in0;
  input of_clear_msr_bip_hold_reg;
  input [1:0]ex_gpr_write_addr;
  input of_clear_msr_bip_hold_reg_0;
  input of_set_msr_ie_hold_reg;
  input of_clear_msr_bip_hold_reg_1;
  input of_set_msr_ee_hold_reg;
  input \Using_FPGA.Native_14 ;
  input of_set_msr_ie;
  input of_set_msr_ie_hold_reg_0;
  input \Using_FPGA.Native_15 ;
  input m0_is_div_instr_i;
  input ex_reservation;
  input ex_reservation_reg;
  input ex_reservation_reg_0;
  input wb_exception_taken;
  input \Using_FPGA.Native_16 ;
  input ex_dead_valid_hold;
  input [2:0]\Using_FPGA.Native_17 ;
  input wb_msr_clear_bip;
  input [13:0]\Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input [10:0]wb_MSR_i;
  input [10:0]ex_MSR_i;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input EX_CarryIn;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire D;
  wire D_0;
  wire D_1;
  wire EX_CarryIn;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire [2:0]\Using_FPGA.Native_17 ;
  wire [13:0]\Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire WB_Div_Zero_Overflow_reg;
  wire [10:0]ex_MSR_i;
  wire ex_dead_valid_hold;
  wire [1:0]ex_gpr_write_addr;
  wire \ex_gpr_write_addr_reg[2] ;
  wire \ex_gpr_write_addr_reg[3] ;
  wire ex_jump;
  wire ex_jump_hold;
  wire ex_piperun_masked_no6;
  wire ex_raw_valid_reg;
  wire ex_raw_valid_reg_0;
  wire ex_reservation;
  wire ex_reservation_reg;
  wire ex_reservation_reg_0;
  wire in0;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire \m0_PC_i_reg[0] ;
  wire m0_exception_from_ex;
  wire [0:0]m0_exception_raw_kind;
  wire \m0_exception_raw_kind_reg[30] ;
  wire m0_is_div_instr_i;
  wire of_clear_msr_bip_hold_reg;
  wire of_clear_msr_bip_hold_reg_0;
  wire of_clear_msr_bip_hold_reg_1;
  wire of_set_msr_ee_hold_reg;
  wire of_set_msr_ie;
  wire of_set_msr_ie_hold_reg;
  wire of_set_msr_ie_hold_reg_0;
  wire sync_reset;
  wire [10:0]wb_MSR_i;
  wire wb_exception_from_m3_reg_rep;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_taken;
  wire wb_msr_clear_bip;

  microblaze_microblaze_0_0_MB_MUXCY_243 MUXCY_I
       (.D(D),
        .D_0(D_0),
        .D_1(D_1),
        .EX_CarryIn(EX_CarryIn),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_13 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_14 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_15 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_16 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_17 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_18 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_19 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_20 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_21 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_22 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_23 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_24 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_25 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_8 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg),
        .ex_MSR_i(ex_MSR_i),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_gpr_write_addr(ex_gpr_write_addr),
        .\ex_gpr_write_addr_reg[2] (\ex_gpr_write_addr_reg[2] ),
        .\ex_gpr_write_addr_reg[3] (\ex_gpr_write_addr_reg[3] ),
        .ex_jump(ex_jump),
        .ex_jump_hold(ex_jump_hold),
        .ex_piperun_masked_no6(ex_piperun_masked_no6),
        .ex_raw_valid_reg(ex_raw_valid_reg),
        .ex_raw_valid_reg_0(ex_raw_valid_reg_0),
        .ex_reservation(ex_reservation),
        .ex_reservation_reg(ex_reservation_reg),
        .ex_reservation_reg_0(ex_reservation_reg_0),
        .in0(in0),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .\m0_PC_i_reg[0] (\m0_PC_i_reg[0] ),
        .m0_exception_from_ex(m0_exception_from_ex),
        .m0_exception_raw_kind(m0_exception_raw_kind),
        .\m0_exception_raw_kind_reg[30] (\m0_exception_raw_kind_reg[30] ),
        .m0_is_div_instr_i(m0_is_div_instr_i),
        .of_clear_msr_bip_hold_reg(of_clear_msr_bip_hold_reg),
        .of_clear_msr_bip_hold_reg_0(of_clear_msr_bip_hold_reg_0),
        .of_clear_msr_bip_hold_reg_1(of_clear_msr_bip_hold_reg_1),
        .of_set_msr_ee_hold_reg(of_set_msr_ee_hold_reg),
        .of_set_msr_ie(of_set_msr_ie),
        .of_set_msr_ie_hold_reg(of_set_msr_ie_hold_reg),
        .of_set_msr_ie_hold_reg_0(of_set_msr_ie_hold_reg_0),
        .sync_reset(sync_reset),
        .wb_MSR_i(wb_MSR_i),
        .wb_exception_from_m3_reg_rep(wb_exception_from_m3_reg_rep),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_exception_taken(wb_exception_taken),
        .wb_msr_clear_bip(wb_msr_clear_bip));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_244
   (ex_piperun_masked_no6,
    ex_piperun_masked_no5,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_masked_no6;
  input ex_piperun_masked_no5;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire ex_piperun_masked_no5;
  wire ex_piperun_masked_no6;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_MB_MUXCY_245 MUXCY_I
       (.ex_piperun_masked_no5(ex_piperun_masked_no5),
        .ex_piperun_masked_no6(ex_piperun_masked_no6),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_246
   (ex_piperun_masked_no5,
    ex_piperun_masked_no4,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_masked_no5;
  input ex_piperun_masked_no4;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire ex_piperun_masked_no4;
  wire ex_piperun_masked_no5;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_MB_MUXCY_247 MUXCY_I
       (.ex_piperun_masked_no4(ex_piperun_masked_no4),
        .ex_piperun_masked_no5(ex_piperun_masked_no5),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_248
   (ex_piperun_masked_no4,
    ex_piperun_masked_no3,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_masked_no4;
  input ex_piperun_masked_no3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire ex_piperun_masked_no3;
  wire ex_piperun_masked_no4;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_MB_MUXCY_249 MUXCY_I
       (.ex_piperun_masked_no3(ex_piperun_masked_no3),
        .ex_piperun_masked_no4(ex_piperun_masked_no4),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_250
   (ex_piperun_masked_no3,
    ex_piperun_masked_no2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output ex_piperun_masked_no3;
  input ex_piperun_masked_no2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire ex_piperun_masked_no2;
  wire ex_piperun_masked_no3;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_MB_MUXCY_251 MUXCY_I
       (.ex_piperun_masked_no2(ex_piperun_masked_no2),
        .ex_piperun_masked_no3(ex_piperun_masked_no3),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_252
   (ex_piperun_masked_no2,
    ex_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_masked_no2;
  input ex_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire ex_piperun_masked_no1;
  wire ex_piperun_masked_no2;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_MB_MUXCY_253 MUXCY_I
       (.ex_piperun_masked_no1(ex_piperun_masked_no1),
        .ex_piperun_masked_no2(ex_piperun_masked_no2),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_254
   (ex_piperun_masked_no1,
    \Using_FPGA.Native ,
    ex_piperun_raw,
    lopt,
    lopt_1);
  output ex_piperun_masked_no1;
  input \Using_FPGA.Native ;
  input ex_piperun_raw;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire ex_piperun_masked_no1;
  wire ex_piperun_raw;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_255 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_piperun_masked_no1(ex_piperun_masked_no1),
        .ex_piperun_raw(ex_piperun_raw),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_258
   (E,
    bp1_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]E;
  input bp1_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [0:0]E;
  wire bp1_piperun_masked_no1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_MB_MUXCY_259 MUXCY_I
       (.E(E),
        .bp1_piperun_masked_no1(bp1_piperun_masked_no1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_262
   (bp1_raw_valid_reg,
    bp1_dead_fetch_hold_bt,
    bp1_dead_fetch_hold_reg,
    bp0_piperun_masked_no1,
    sync_reset,
    E,
    bp1_dead_fetch_hold_reg_0,
    bp1_dead_fetch_hold_reg_1,
    kill_fetch_mmu,
    bp0_dead_fetch_hold,
    lopt,
    lopt_1,
    lopt_2);
  output bp1_raw_valid_reg;
  output bp1_dead_fetch_hold_bt;
  output bp1_dead_fetch_hold_reg;
  input bp0_piperun_masked_no1;
  input sync_reset;
  input [0:0]E;
  input bp1_dead_fetch_hold_reg_0;
  input bp1_dead_fetch_hold_reg_1;
  input kill_fetch_mmu;
  input bp0_dead_fetch_hold;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [0:0]E;
  wire bp0_dead_fetch_hold;
  wire bp0_piperun_masked_no1;
  wire bp1_dead_fetch_hold_bt;
  wire bp1_dead_fetch_hold_reg;
  wire bp1_dead_fetch_hold_reg_0;
  wire bp1_dead_fetch_hold_reg_1;
  wire bp1_raw_valid_reg;
  wire kill_fetch_mmu;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_MUXCY_263 MUXCY_I
       (.E(E),
        .bp0_dead_fetch_hold(bp0_dead_fetch_hold),
        .bp0_piperun_masked_no1(bp0_piperun_masked_no1),
        .bp1_dead_fetch_hold_bt(bp1_dead_fetch_hold_bt),
        .bp1_dead_fetch_hold_reg(bp1_dead_fetch_hold_reg),
        .bp1_dead_fetch_hold_reg_0(bp1_dead_fetch_hold_reg_0),
        .bp1_dead_fetch_hold_reg_1(bp1_dead_fetch_hold_reg_1),
        .bp1_raw_valid_reg(bp1_raw_valid_reg),
        .kill_fetch_mmu(kill_fetch_mmu),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_304
   (of_m3_stall_conflict,
    of_read_m3_write_op_conflict,
    m3_complete_in_later_stage,
    m3_div_stall,
    lopt,
    lopt_1,
    lopt_2);
  output of_m3_stall_conflict;
  input of_read_m3_write_op_conflict;
  input m3_complete_in_later_stage;
  input m3_div_stall;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m3_complete_in_later_stage;
  wire m3_div_stall;
  wire of_m3_stall_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_305 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m3_complete_in_later_stage(m3_complete_in_later_stage),
        .m3_div_stall(m3_div_stall),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_306
   (of_read_m3_write_op_conflict,
    A0_out,
    of_m3_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m3_write_op_conflict;
  input A0_out;
  input of_m3_addr_conflict;
  input lopt;
  output lopt_1;

  wire A0_out;
  wire lopt;
  wire lopt_1;
  wire of_m3_addr_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_307 MUXCY_I
       (.A0_out(A0_out),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_310
   (m2_complete_in_later_stage_reg,
    m2_complete_in_later_stage,
    of_read_m2_write_op_conflict,
    of_m2_no_stall_conflict,
    of_m3_stall_conflict,
    of_m1_no_stall_conflict,
    And_OUT,
    of_m0_no_stall_conflict,
    lopt,
    lopt_1);
  output m2_complete_in_later_stage_reg;
  input m2_complete_in_later_stage;
  input of_read_m2_write_op_conflict;
  input of_m2_no_stall_conflict;
  input of_m3_stall_conflict;
  input of_m1_no_stall_conflict;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input lopt;
  output lopt_1;

  wire And_OUT;
  wire lopt;
  wire lopt_1;
  wire m2_complete_in_later_stage;
  wire m2_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_no_stall_conflict;
  wire of_m2_no_stall_conflict;
  wire of_m3_stall_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_311 MUXCY_I
       (.And_OUT(And_OUT),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .m2_complete_in_later_stage_reg(m2_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_m2_no_stall_conflict(of_m2_no_stall_conflict),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_313
   (of_read_m2_write_op_conflict,
    A1_out,
    of_m2_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m2_write_op_conflict;
  input A1_out;
  input of_m2_addr_conflict;
  input lopt;
  output lopt_1;

  wire A1_out;
  wire lopt;
  wire lopt_1;
  wire of_m2_addr_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_314 MUXCY_I
       (.A1_out(A1_out),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_318
   (of_m1_stall_conflict,
    m1_m2_complete_in_later_stage,
    of_read_m1_write_op_conflict,
    lopt,
    lopt_1);
  output of_m1_stall_conflict;
  input m1_m2_complete_in_later_stage;
  input of_read_m1_write_op_conflict;
  input lopt;
  output lopt_1;

  wire lopt;
  wire lopt_1;
  wire m1_m2_complete_in_later_stage;
  wire of_m1_stall_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_319 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_321
   (of_read_m1_write_op_conflict,
    A2_out,
    of_m1_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m1_write_op_conflict;
  input A2_out;
  input of_m1_addr_conflict;
  input lopt;
  output lopt_1;

  wire A2_out;
  wire lopt;
  wire lopt_1;
  wire of_m1_addr_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_322 MUXCY_I
       (.A2_out(A2_out),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_326
   (m0_complete_in_later_stage_reg,
    m0_complete_in_later_stage,
    of_read_m0_write_op_conflict,
    of_op3_ex_stall,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m1_stall_conflict,
    lopt,
    lopt_1);
  output m0_complete_in_later_stage_reg;
  input m0_complete_in_later_stage;
  input of_read_m0_write_op_conflict;
  input of_op3_ex_stall;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m1_stall_conflict;
  input lopt;
  output lopt_1;

  wire And_OUT;
  wire lopt;
  wire lopt_1;
  wire m0_complete_in_later_stage;
  wire m0_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_stall_conflict;
  wire of_op3_ex_stall;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_327 MUXCY_I
       (.And_OUT(And_OUT),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m0_complete_in_later_stage(m0_complete_in_later_stage),
        .m0_complete_in_later_stage_reg(m0_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_op3_ex_stall(of_op3_ex_stall),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_329
   (of_read_m0_write_op_conflict,
    A3_out,
    of_m0_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m0_write_op_conflict;
  input A3_out;
  input of_m0_addr_conflict;
  input lopt;
  output lopt_1;

  wire A3_out;
  wire lopt;
  wire lopt_1;
  wire of_m0_addr_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_330 MUXCY_I
       (.A3_out(A3_out),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_334
   (of_op3_ex_stall,
    ex_complete_in_later_stage,
    of_read_ex_write_op_conflict,
    lopt,
    lopt_1);
  output of_op3_ex_stall;
  input ex_complete_in_later_stage;
  input of_read_ex_write_op_conflict;
  input lopt;
  output lopt_1;

  wire ex_complete_in_later_stage;
  wire lopt;
  wire lopt_1;
  wire of_op3_ex_stall;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_335 MUXCY_I
       (.ex_complete_in_later_stage(ex_complete_in_later_stage),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_op3_ex_stall(of_op3_ex_stall),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_337
   (of_read_ex_write_op_conflict,
    A4_out,
    of_ex_addr_conflict,
    lopt,
    lopt_1);
  output of_read_ex_write_op_conflict;
  input A4_out;
  input of_ex_addr_conflict;
  input lopt;
  output lopt_1;

  wire A4_out;
  wire lopt;
  wire lopt_1;
  wire of_ex_addr_conflict;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_338 MUXCY_I
       (.A4_out(A4_out),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_344
   (\cur_data_i_reg[26] ,
    OF_Use_Op_B,
    \Using_FPGA.Native ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input OF_Use_Op_B;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;

  wire OF_Use_Op_B;
  wire \Using_FPGA.Native ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_345 MUXCY_I
       (.OF_Use_Op_B(OF_Use_Op_B),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_346
   (\cur_data_i_reg[15] ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \cur_data_i_reg[15] ;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \cur_data_i_reg[15] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_MB_MUXCY_347 MUXCY_I
       (.Q(Q),
        .\cur_data_i_reg[15] (\cur_data_i_reg[15] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_350
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_351 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_352
   (\cur_data_i_reg[15] ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \cur_data_i_reg[15] ;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \cur_data_i_reg[15] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_MB_MUXCY_353 MUXCY_I
       (.Q(Q),
        .\cur_data_i_reg[15] (\cur_data_i_reg[15] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_356
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_357 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_358
   (\cur_data_i_reg[15] ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \cur_data_i_reg[15] ;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \cur_data_i_reg[15] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_MB_MUXCY_359 MUXCY_I
       (.Q(Q),
        .\cur_data_i_reg[15] (\cur_data_i_reg[15] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_362
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_363 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_364
   (\cur_data_i_reg[15] ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \cur_data_i_reg[15] ;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \cur_data_i_reg[15] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_MB_MUXCY_365 MUXCY_I
       (.Q(Q),
        .\cur_data_i_reg[15] (\cur_data_i_reg[15] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_368
   (part_c_and_b,
    \Using_FPGA.Native ,
    part_c,
    lopt,
    lopt_1);
  output part_c_and_b;
  input \Using_FPGA.Native ;
  input part_c;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire part_c;
  wire part_c_and_b;

  microblaze_microblaze_0_0_MB_MUXCY_369 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .part_c(part_c),
        .part_c_and_b(part_c_and_b));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_370
   (part_c,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output part_c;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire part_c;

  microblaze_microblaze_0_0_MB_MUXCY_371 MUXCY_I
       (.Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .part_c(part_c));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_406
   (of_m3_stall_conflict,
    of_read_m3_write_op_conflict,
    m3_complete_in_later_stage,
    m3_div_stall,
    lopt,
    lopt_1,
    lopt_2);
  output of_m3_stall_conflict;
  input of_read_m3_write_op_conflict;
  input m3_complete_in_later_stage;
  input m3_div_stall;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m3_complete_in_later_stage;
  wire m3_div_stall;
  wire of_m3_stall_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_407 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m3_complete_in_later_stage(m3_complete_in_later_stage),
        .m3_div_stall(m3_div_stall),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_408
   (of_read_m3_write_op_conflict,
    \Using_FPGA.Native ,
    of_m3_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m3_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m3_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m3_addr_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_409 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_413
   (of_m2_stall_conflict,
    m2_complete_in_later_stage,
    of_read_m2_write_op_conflict,
    lopt,
    lopt_1);
  output of_m2_stall_conflict;
  input m2_complete_in_later_stage;
  input of_read_m2_write_op_conflict;
  input lopt;
  output lopt_1;

  wire lopt;
  wire lopt_1;
  wire m2_complete_in_later_stage;
  wire of_m2_stall_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_414 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .of_m2_stall_conflict(of_m2_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_416
   (of_read_m2_write_op_conflict,
    \Using_FPGA.Native ,
    of_m2_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m2_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m2_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m2_addr_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_417 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_421
   (of_m1_stall_conflict,
    m1_m2_complete_in_later_stage,
    of_read_m1_write_op_conflict,
    lopt,
    lopt_1);
  output of_m1_stall_conflict;
  input m1_m2_complete_in_later_stage;
  input of_read_m1_write_op_conflict;
  input lopt;
  output lopt_1;

  wire lopt;
  wire lopt_1;
  wire m1_m2_complete_in_later_stage;
  wire of_m1_stall_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_422 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_424
   (of_read_m1_write_op_conflict,
    \Using_FPGA.Native ,
    of_m1_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m1_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m1_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m1_addr_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_425 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_429
   (m0_complete_in_later_stage_reg,
    m0_complete_in_later_stage,
    of_read_m0_write_op_conflict,
    OF_Op_EX_Stall4_in,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m1_stall_conflict,
    lopt,
    lopt_1);
  output m0_complete_in_later_stage_reg;
  input m0_complete_in_later_stage;
  input of_read_m0_write_op_conflict;
  input OF_Op_EX_Stall4_in;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m1_stall_conflict;
  input lopt;
  output lopt_1;

  wire And_OUT;
  wire OF_Op_EX_Stall4_in;
  wire lopt;
  wire lopt_1;
  wire m0_complete_in_later_stage;
  wire m0_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_stall_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_430 MUXCY_I
       (.And_OUT(And_OUT),
        .OF_Op_EX_Stall4_in(OF_Op_EX_Stall4_in),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m0_complete_in_later_stage(m0_complete_in_later_stage),
        .m0_complete_in_later_stage_reg(m0_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_432
   (of_read_m0_write_op_conflict,
    \Using_FPGA.Native ,
    of_m0_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m0_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m0_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m0_addr_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_433 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_437
   (OF_Op_EX_Stall4_in,
    ex_complete_in_later_stage,
    of_read_ex_write_op_conflict,
    lopt,
    lopt_1);
  output OF_Op_EX_Stall4_in;
  input ex_complete_in_later_stage;
  input of_read_ex_write_op_conflict;
  input lopt;
  output lopt_1;

  wire OF_Op_EX_Stall4_in;
  wire ex_complete_in_later_stage;
  wire lopt;
  wire lopt_1;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_438 MUXCY_I
       (.OF_Op_EX_Stall4_in(OF_Op_EX_Stall4_in),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_440
   (of_read_ex_write_op_conflict,
    \Using_FPGA.Native ,
    of_ex_addr_conflict,
    lopt,
    lopt_1);
  output of_read_ex_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_ex_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_ex_addr_conflict;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_441 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_445
   (of_m3_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m3_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m3_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_446 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_use_conflict(of_m3_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_449
   (\Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_MB_MUXCY_450 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_451
   (of_m2_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m2_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m2_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_452 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_use_conflict(of_m2_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_455
   (\Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_MB_MUXCY_456 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_457
   (of_m1_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m1_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m1_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_458 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_use_conflict(of_m1_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_461
   (\Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_MB_MUXCY_462 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_463
   (of_m0_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m0_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m0_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_464 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_use_conflict(of_m0_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_467
   (\Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_MB_MUXCY_468 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_469
   (of_ex_use_conflict,
    \Using_FPGA.Native ,
    part_c_or_not_b,
    lopt,
    lopt_1);
  output of_ex_use_conflict;
  input \Using_FPGA.Native ;
  input part_c_or_not_b;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_ex_use_conflict;
  wire part_c_or_not_b;

  microblaze_microblaze_0_0_MB_MUXCY_470 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_use_conflict(of_ex_use_conflict),
        .part_c_or_not_b(part_c_or_not_b));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_473
   (part_c,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output part_c;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire part_c;

  microblaze_microblaze_0_0_MB_MUXCY_474 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .part_c(part_c));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_499
   (of_m3_stall_conflict,
    of_read_m3_write_op_conflict,
    m3_complete_in_later_stage,
    m3_div_stall);
  output of_m3_stall_conflict;
  input of_read_m3_write_op_conflict;
  input m3_complete_in_later_stage;
  input m3_div_stall;

  wire m3_complete_in_later_stage;
  wire m3_div_stall;
  wire of_m3_stall_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_500 MUXCY_I
       (.m3_complete_in_later_stage(m3_complete_in_later_stage),
        .m3_div_stall(m3_div_stall),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_501
   (of_read_m3_write_op_conflict,
    \Using_FPGA.Native ,
    of_m3_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m3_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m3_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m3_addr_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_502 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_506
   (of_m2_stall_conflict,
    m2_complete_in_later_stage,
    of_read_m2_write_op_conflict);
  output of_m2_stall_conflict;
  input m2_complete_in_later_stage;
  input of_read_m2_write_op_conflict;

  wire m2_complete_in_later_stage;
  wire of_m2_stall_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_507 MUXCY_I
       (.m2_complete_in_later_stage(m2_complete_in_later_stage),
        .of_m2_stall_conflict(of_m2_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_509
   (of_read_m2_write_op_conflict,
    \Using_FPGA.Native ,
    of_m2_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m2_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m2_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m2_addr_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_510 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_514
   (of_m1_stall_conflict,
    m1_m2_complete_in_later_stage,
    of_read_m1_write_op_conflict);
  output of_m1_stall_conflict;
  input m1_m2_complete_in_later_stage;
  input of_read_m1_write_op_conflict;

  wire m1_m2_complete_in_later_stage;
  wire of_m1_stall_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_515 MUXCY_I
       (.m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_517
   (of_read_m1_write_op_conflict,
    \Using_FPGA.Native ,
    of_m1_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m1_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m1_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m1_addr_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_518 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_522
   (m0_complete_in_later_stage_reg,
    m0_complete_in_later_stage,
    of_read_m0_write_op_conflict,
    OF_Op_EX_Stall,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m1_stall_conflict);
  output m0_complete_in_later_stage_reg;
  input m0_complete_in_later_stage;
  input of_read_m0_write_op_conflict;
  input OF_Op_EX_Stall;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m1_stall_conflict;

  wire And_OUT;
  wire OF_Op_EX_Stall;
  wire m0_complete_in_later_stage;
  wire m0_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_stall_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_523 MUXCY_I
       (.And_OUT(And_OUT),
        .OF_Op_EX_Stall(OF_Op_EX_Stall),
        .m0_complete_in_later_stage(m0_complete_in_later_stage),
        .m0_complete_in_later_stage_reg(m0_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_525
   (of_read_m0_write_op_conflict,
    \Using_FPGA.Native ,
    of_m0_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m0_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m0_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m0_addr_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_526 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_530
   (OF_Op_EX_Stall,
    ex_complete_in_later_stage,
    of_read_ex_write_op_conflict);
  output OF_Op_EX_Stall;
  input ex_complete_in_later_stage;
  input of_read_ex_write_op_conflict;

  wire OF_Op_EX_Stall;
  wire ex_complete_in_later_stage;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_531 MUXCY_I
       (.OF_Op_EX_Stall(OF_Op_EX_Stall),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_533
   (of_read_ex_write_op_conflict,
    \Using_FPGA.Native ,
    of_ex_addr_conflict,
    lopt,
    lopt_1);
  output of_read_ex_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_ex_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_ex_addr_conflict;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_534 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_538
   (of_m3_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_m3_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_m3_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_539 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_m3_use_conflict(of_m3_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_540
   (of_m2_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_m2_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_m2_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_541 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_m2_use_conflict(of_m2_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_542
   (of_m1_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_m1_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_m1_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_543 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_m1_use_conflict(of_m1_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_544
   (of_m0_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_m0_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_m0_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_545 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_m0_use_conflict(of_m0_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module microblaze_microblaze_0_0_carry_and_546
   (of_ex_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_ex_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_ex_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_547 MUXCY_I
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_ex_use_conflict(of_ex_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb
   (ex_PipeRun_for_ce,
    \Using_FPGA.Native ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ,
    D,
    \ex_gpr_write_addr_reg[3] ,
    \ex_gpr_write_addr_reg[2] ,
    wb_exception_from_m3_reg_rep,
    D_0,
    \Use_Async_Reset.sync_reset_reg ,
    ex_raw_valid_reg,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    wb_exception_from_m3_reg_rep__0,
    \Using_FPGA.Native_3 ,
    D_1,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    WB_Div_Zero_Overflow_reg,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \m0_PC_i_reg[0] ,
    ex_piperun_masked_no6,
    ex_jump_hold,
    ex_jump,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \m0_exception_raw_kind_reg[30] ,
    m0_exception_raw_kind,
    sync_reset,
    m0_exception_from_ex,
    in0,
    of_clear_msr_bip_hold_reg,
    ex_gpr_write_addr,
    of_clear_msr_bip_hold_reg_0,
    of_set_msr_ie_hold_reg,
    of_clear_msr_bip_hold_reg_1,
    of_set_msr_ee_hold_reg,
    \Using_FPGA.Native_14 ,
    of_set_msr_ie,
    of_set_msr_ie_hold_reg_0,
    \Using_FPGA.Native_15 ,
    m0_is_div_instr_i,
    ex_reservation,
    ex_reservation_reg,
    ex_reservation_reg_0,
    wb_exception_taken,
    \Using_FPGA.Native_16 ,
    ex_dead_valid_hold,
    \Using_FPGA.Native_17 ,
    wb_msr_clear_bip,
    \Using_FPGA.Native_18 ,
    \Using_FPGA.Native_19 ,
    wb_MSR_i,
    ex_MSR_i,
    \Using_FPGA.Native_20 ,
    \Using_FPGA.Native_21 ,
    EX_CarryIn,
    \Using_FPGA.Native_22 ,
    \Using_FPGA.Native_23 ,
    \Using_FPGA.Native_24 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]ex_PipeRun_for_ce;
  output \Using_FPGA.Native ;
  output \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  output D;
  output \ex_gpr_write_addr_reg[3] ;
  output \ex_gpr_write_addr_reg[2] ;
  output wb_exception_from_m3_reg_rep;
  output D_0;
  output \Use_Async_Reset.sync_reset_reg ;
  output ex_raw_valid_reg;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  output \Using_FPGA.Native_2 ;
  output wb_exception_from_m3_reg_rep__0;
  output \Using_FPGA.Native_3 ;
  output D_1;
  output \Using_FPGA.Native_4 ;
  output \Using_FPGA.Native_5 ;
  output \Using_FPGA.Native_6 ;
  output \Using_FPGA.Native_7 ;
  output \Using_FPGA.Native_8 ;
  output WB_Div_Zero_Overflow_reg;
  output \Using_FPGA.Native_9 ;
  output \Using_FPGA.Native_10 ;
  output \Using_FPGA.Native_11 ;
  input \m0_PC_i_reg[0] ;
  input ex_piperun_masked_no6;
  input ex_jump_hold;
  input ex_jump;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \m0_exception_raw_kind_reg[30] ;
  input [0:0]m0_exception_raw_kind;
  input sync_reset;
  input m0_exception_from_ex;
  input in0;
  input of_clear_msr_bip_hold_reg;
  input [1:0]ex_gpr_write_addr;
  input of_clear_msr_bip_hold_reg_0;
  input of_set_msr_ie_hold_reg;
  input of_clear_msr_bip_hold_reg_1;
  input of_set_msr_ee_hold_reg;
  input \Using_FPGA.Native_14 ;
  input of_set_msr_ie;
  input of_set_msr_ie_hold_reg_0;
  input \Using_FPGA.Native_15 ;
  input m0_is_div_instr_i;
  input ex_reservation;
  input ex_reservation_reg;
  input ex_reservation_reg_0;
  input wb_exception_taken;
  input \Using_FPGA.Native_16 ;
  input ex_dead_valid_hold;
  input [2:0]\Using_FPGA.Native_17 ;
  input wb_msr_clear_bip;
  input [13:0]\Using_FPGA.Native_18 ;
  input \Using_FPGA.Native_19 ;
  input [10:0]wb_MSR_i;
  input [10:0]ex_MSR_i;
  input \Using_FPGA.Native_20 ;
  input \Using_FPGA.Native_21 ;
  input EX_CarryIn;
  input \Using_FPGA.Native_22 ;
  input \Using_FPGA.Native_23 ;
  input \Using_FPGA.Native_24 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire D;
  wire D_0;
  wire D_1;
  wire EX_CarryIn;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire [2:0]\Using_FPGA.Native_17 ;
  wire [13:0]\Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_19 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_20 ;
  wire \Using_FPGA.Native_21 ;
  wire \Using_FPGA.Native_22 ;
  wire \Using_FPGA.Native_23 ;
  wire \Using_FPGA.Native_24 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire WB_Div_Zero_Overflow_reg;
  wire [10:0]ex_MSR_i;
  wire [0:0]ex_PipeRun_for_ce;
  wire ex_dead_valid_hold;
  wire [1:0]ex_gpr_write_addr;
  wire \ex_gpr_write_addr_reg[2] ;
  wire \ex_gpr_write_addr_reg[3] ;
  wire ex_jump;
  wire ex_jump_hold;
  wire ex_piperun_masked_no6;
  wire ex_raw_valid_reg;
  wire ex_reservation;
  wire ex_reservation_reg;
  wire ex_reservation_reg_0;
  wire in0;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire \m0_PC_i_reg[0] ;
  wire m0_exception_from_ex;
  wire [0:0]m0_exception_raw_kind;
  wire \m0_exception_raw_kind_reg[30] ;
  wire m0_is_div_instr_i;
  wire of_clear_msr_bip_hold_reg;
  wire of_clear_msr_bip_hold_reg_0;
  wire of_clear_msr_bip_hold_reg_1;
  wire of_set_msr_ee_hold_reg;
  wire of_set_msr_ie;
  wire of_set_msr_ie_hold_reg;
  wire of_set_msr_ie_hold_reg_0;
  wire sync_reset;
  wire [10:0]wb_MSR_i;
  wire wb_exception_from_m3_reg_rep;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_taken;
  wire wb_msr_clear_bip;

  microblaze_microblaze_0_0_carry_and_242 carry_and_i1
       (.D(D),
        .D_0(D_0),
        .D_1(D_1),
        .EX_CarryIn(EX_CarryIn),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_10 (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_11 (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_12 (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_13 (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_14 (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_15 (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_16 (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_17 (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_18 (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_19 (\Using_FPGA.Native_19 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_20 (\Using_FPGA.Native_20 ),
        .\Using_FPGA.Native_21 (\Using_FPGA.Native_21 ),
        .\Using_FPGA.Native_22 (\Using_FPGA.Native_22 ),
        .\Using_FPGA.Native_23 (\Using_FPGA.Native_23 ),
        .\Using_FPGA.Native_24 (\Using_FPGA.Native_24 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_9 (\Using_FPGA.Native_9 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg),
        .ex_MSR_i(ex_MSR_i),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_gpr_write_addr(ex_gpr_write_addr),
        .\ex_gpr_write_addr_reg[2] (\ex_gpr_write_addr_reg[2] ),
        .\ex_gpr_write_addr_reg[3] (\ex_gpr_write_addr_reg[3] ),
        .ex_jump(ex_jump),
        .ex_jump_hold(ex_jump_hold),
        .ex_piperun_masked_no6(ex_piperun_masked_no6),
        .ex_raw_valid_reg(ex_PipeRun_for_ce),
        .ex_raw_valid_reg_0(ex_raw_valid_reg),
        .ex_reservation(ex_reservation),
        .ex_reservation_reg(ex_reservation_reg),
        .ex_reservation_reg_0(ex_reservation_reg_0),
        .in0(in0),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .\m0_PC_i_reg[0] (\m0_PC_i_reg[0] ),
        .m0_exception_from_ex(m0_exception_from_ex),
        .m0_exception_raw_kind(m0_exception_raw_kind),
        .\m0_exception_raw_kind_reg[30] (\m0_exception_raw_kind_reg[30] ),
        .m0_is_div_instr_i(m0_is_div_instr_i),
        .of_clear_msr_bip_hold_reg(of_clear_msr_bip_hold_reg),
        .of_clear_msr_bip_hold_reg_0(of_clear_msr_bip_hold_reg_0),
        .of_clear_msr_bip_hold_reg_1(of_clear_msr_bip_hold_reg_1),
        .of_set_msr_ee_hold_reg(of_set_msr_ee_hold_reg),
        .of_set_msr_ie(of_set_msr_ie),
        .of_set_msr_ie_hold_reg(of_set_msr_ie_hold_reg),
        .of_set_msr_ie_hold_reg_0(of_set_msr_ie_hold_reg_0),
        .sync_reset(sync_reset),
        .wb_MSR_i(wb_MSR_i),
        .wb_exception_from_m3_reg_rep(wb_exception_from_m3_reg_rep),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_exception_taken(wb_exception_taken),
        .wb_msr_clear_bip(wb_msr_clear_bip));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_104
   (m0_piperun_masked_no1,
    \Using_FPGA.Native ,
    m0_piperun_raw,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m0_piperun_masked_no1;
  input \Using_FPGA.Native ;
  input m0_piperun_raw;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m0_piperun_masked_no1;
  wire m0_piperun_raw;

  microblaze_microblaze_0_0_carry_and_210 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m0_piperun_masked_no1(m0_piperun_masked_no1),
        .m0_piperun_raw(m0_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_112
   (m1_PipeRun_for_ce,
    m1_databus_write_from_m0_reg,
    m1_databus_write_from_m0_reg_0,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ,
    m1_databus_addr_from_m0_reg,
    m1_databus_access_from_m0_reg,
    \Use_DLMB.m1_dlmb_issued_reg ,
    m1_raw_valid_reg,
    wb_exception_from_m3_reg_rep__0,
    D_0,
    D_1,
    D_2,
    WB_Div_Zero_Overflow_reg,
    wb_exception_from_m3_reg_rep__0_0,
    \m2_PC_i_reg[0] ,
    m1_piperun_masked_no2,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ,
    m1_databus_access,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ,
    \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ,
    M_AXI_DP_AWREADY,
    \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ,
    M_AXI_DP_WREADY,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ,
    D,
    \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ,
    DWait,
    m2_allow_dready,
    m2_dlmb_drop_request,
    \Use_DAXI.m2_active_access_unmasked_reg ,
    m1_dlmb_issued,
    sync_reset,
    A_N201_out,
    in0,
    \Using_FPGA.Native ,
    m1_dead_valid_hold,
    m1_is_div_instr_i,
    m0_is_div_instr_i,
    m1_gpr_write_dbg,
    m0_gpr_write_dbg,
    m1_gpr_write,
    m0_gpr_write,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    lopt,
    lopt_1);
  output [0:0]m1_PipeRun_for_ce;
  output m1_databus_write_from_m0_reg;
  output m1_databus_write_from_m0_reg_0;
  output \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ;
  output m1_databus_addr_from_m0_reg;
  output m1_databus_access_from_m0_reg;
  output \Use_DLMB.m1_dlmb_issued_reg ;
  output m1_raw_valid_reg;
  output wb_exception_from_m3_reg_rep__0;
  output D_0;
  output D_1;
  output D_2;
  output WB_Div_Zero_Overflow_reg;
  output wb_exception_from_m3_reg_rep__0_0;
  input \m2_PC_i_reg[0] ;
  input m1_piperun_masked_no2;
  input \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ;
  input m1_databus_access;
  input \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ;
  input \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ;
  input M_AXI_DP_AWREADY;
  input \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ;
  input M_AXI_DP_WREADY;
  input \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ;
  input [1:0]D;
  input \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ;
  input DWait;
  input m2_allow_dready;
  input m2_dlmb_drop_request;
  input \Use_DAXI.m2_active_access_unmasked_reg ;
  input m1_dlmb_issued;
  input sync_reset;
  input A_N201_out;
  input in0;
  input \Using_FPGA.Native ;
  input m1_dead_valid_hold;
  input m1_is_div_instr_i;
  input m0_is_div_instr_i;
  input m1_gpr_write_dbg;
  input m0_gpr_write_dbg;
  input m1_gpr_write;
  input m0_gpr_write;
  input \Using_FPGA.Native_0 ;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input lopt;
  output lopt_1;

  wire A_N201_out;
  wire [1:0]D;
  wire DWait;
  wire D_0;
  wire D_1;
  wire D_2;
  wire M_AXI_DP_AWREADY;
  wire M_AXI_DP_WREADY;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ;
  wire \Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ;
  wire \Use_DAXI.m2_active_access_unmasked_reg ;
  wire \Use_DLMB.m1_dlmb_issued_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire WB_Div_Zero_Overflow_reg;
  wire in0;
  wire lopt;
  wire lopt_1;
  wire m0_gpr_write;
  wire m0_gpr_write_dbg;
  wire m0_is_div_instr_i;
  wire [0:0]m1_PipeRun_for_ce;
  wire m1_databus_access;
  wire m1_databus_access_from_m0_reg;
  wire m1_databus_addr_from_m0_reg;
  wire m1_databus_write_from_m0_reg;
  wire m1_databus_write_from_m0_reg_0;
  wire m1_dead_valid_hold;
  wire m1_dlmb_issued;
  wire m1_gpr_write;
  wire m1_gpr_write_dbg;
  wire m1_is_div_instr_i;
  wire m1_piperun_masked_no2;
  wire m1_raw_valid_reg;
  wire \m2_PC_i_reg[0] ;
  wire m2_allow_dready;
  wire m2_dlmb_drop_request;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;

  microblaze_microblaze_0_0_carry_and_194 carry_and_i1
       (.A_N201_out(A_N201_out),
        .D(D),
        .DWait(DWait),
        .D_0(D_0),
        .D_1(D_1),
        .D_2(D_2),
        .M_AXI_DP_AWREADY(M_AXI_DP_AWREADY),
        .M_AXI_DP_WREADY(M_AXI_DP_WREADY),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg (\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg ),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 (\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_0 ),
        .\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 (\Use_DAXI.M_AXI_DP_ARVALID_unmasked_reg_1 ),
        .\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg (\Use_DAXI.M_AXI_DP_AWVALID_unmasked_reg ),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg (\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg ),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 (\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_0 ),
        .\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 (\Use_DAXI.M_AXI_DP_WVALID_unmasked_reg_1 ),
        .\Use_DAXI.m2_active_access_unmasked_reg (\Use_DAXI.m2_active_access_unmasked_reg ),
        .\Use_DLMB.m1_dlmb_issued_reg (\Use_DLMB.m1_dlmb_issued_reg ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_6 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg),
        .in0(in0),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m0_gpr_write(m0_gpr_write),
        .m0_gpr_write_dbg(m0_gpr_write_dbg),
        .m0_is_div_instr_i(m0_is_div_instr_i),
        .m1_databus_access(m1_databus_access),
        .m1_databus_access_from_m0_reg(m1_databus_access_from_m0_reg),
        .m1_databus_addr_from_m0_reg(m1_databus_addr_from_m0_reg),
        .m1_databus_write_from_m0_reg(m1_databus_write_from_m0_reg),
        .m1_databus_write_from_m0_reg_0(m1_databus_write_from_m0_reg_0),
        .m1_dead_valid_hold(m1_dead_valid_hold),
        .m1_dlmb_issued(m1_dlmb_issued),
        .m1_gpr_write(m1_gpr_write),
        .m1_gpr_write_dbg(m1_gpr_write_dbg),
        .m1_is_div_instr_i(m1_is_div_instr_i),
        .m1_piperun_masked_no2(m1_piperun_masked_no2),
        .m1_raw_valid_reg(m1_PipeRun_for_ce),
        .m1_raw_valid_reg_0(m1_raw_valid_reg),
        .\m2_PC_i_reg[0] (\m2_PC_i_reg[0] ),
        .m2_allow_dready(m2_allow_dready),
        .m2_dlmb_drop_request(m2_dlmb_drop_request),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_0));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_119
   (m2_PipeRun_for_ce,
    \Use_DLMB.m2_potential_bubble_reg ,
    \Use_Async_Reset.sync_reset_reg ,
    \Use_DAXI.M_AXI_DP_BREADY_I_reg ,
    \Use_DAXI.M_AXI_DP_RREADY_I_reg ,
    m2_raw_valid_reg,
    wb_exception_from_m3_reg_rep__0,
    D_0,
    D_1,
    D_2,
    WB_Div_Zero_Overflow_reg,
    wb_exception_from_m3_reg_rep__0_0,
    m2_dead_valid_hold_reg,
    m2_piperun_masked_no5,
    m2_potential_bubble,
    \Use_DLMB.m2_potential_bubble_reg_0 ,
    D,
    \Use_DLMB.m2_dready_hold_reg ,
    m2_dlmb_dready,
    \Use_DLMB.m2_dready_hold_reg_0 ,
    sync_reset,
    M_AXI_DP_RVALID,
    M_AXI_DP_BVALID,
    \Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ,
    m2_databus_write,
    \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ,
    m2_dlmb_drop_request,
    m2_raw_valid_reg_0,
    \Using_FPGA.Native ,
    m2_dead_valid_hold,
    m2_gpr_write,
    m1_gpr_write,
    m2_gpr_write_dbg,
    m1_gpr_write_dbg,
    m2_is_div_instr,
    m1_is_div_instr_i,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    lopt,
    lopt_1);
  output [0:0]m2_PipeRun_for_ce;
  output \Use_DLMB.m2_potential_bubble_reg ;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Use_DAXI.M_AXI_DP_BREADY_I_reg ;
  output \Use_DAXI.M_AXI_DP_RREADY_I_reg ;
  output m2_raw_valid_reg;
  output wb_exception_from_m3_reg_rep__0;
  output D_0;
  output D_1;
  output D_2;
  output WB_Div_Zero_Overflow_reg;
  output wb_exception_from_m3_reg_rep__0_0;
  input m2_dead_valid_hold_reg;
  input m2_piperun_masked_no5;
  input m2_potential_bubble;
  input \Use_DLMB.m2_potential_bubble_reg_0 ;
  input [0:0]D;
  input [0:0]\Use_DLMB.m2_dready_hold_reg ;
  input m2_dlmb_dready;
  input \Use_DLMB.m2_dready_hold_reg_0 ;
  input sync_reset;
  input M_AXI_DP_RVALID;
  input M_AXI_DP_BVALID;
  input [1:0]\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ;
  input m2_databus_write;
  input \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ;
  input m2_dlmb_drop_request;
  input m2_raw_valid_reg_0;
  input \Using_FPGA.Native ;
  input m2_dead_valid_hold;
  input m2_gpr_write;
  input m1_gpr_write;
  input m2_gpr_write_dbg;
  input m1_gpr_write_dbg;
  input m2_is_div_instr;
  input m1_is_div_instr_i;
  input \Using_FPGA.Native_0 ;
  input [0:0]\Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input lopt;
  output lopt_1;

  wire [0:0]D;
  wire D_0;
  wire D_1;
  wire D_2;
  wire M_AXI_DP_BVALID;
  wire M_AXI_DP_RVALID;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_DAXI.M_AXI_DP_BREADY_I_reg ;
  wire [1:0]\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ;
  wire \Use_DAXI.M_AXI_DP_RREADY_I_reg ;
  wire \Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ;
  wire [0:0]\Use_DLMB.m2_dready_hold_reg ;
  wire \Use_DLMB.m2_dready_hold_reg_0 ;
  wire \Use_DLMB.m2_potential_bubble_reg ;
  wire \Use_DLMB.m2_potential_bubble_reg_0 ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [0:0]\Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire WB_Div_Zero_Overflow_reg;
  wire lopt;
  wire lopt_1;
  wire m1_gpr_write;
  wire m1_gpr_write_dbg;
  wire m1_is_div_instr_i;
  wire [0:0]m2_PipeRun_for_ce;
  wire m2_databus_write;
  wire m2_dead_valid_hold;
  wire m2_dead_valid_hold_reg;
  wire m2_dlmb_dready;
  wire m2_dlmb_drop_request;
  wire m2_gpr_write;
  wire m2_gpr_write_dbg;
  wire m2_is_div_instr;
  wire m2_piperun_masked_no5;
  wire m2_potential_bubble;
  wire m2_raw_valid_reg;
  wire m2_raw_valid_reg_0;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;

  microblaze_microblaze_0_0_carry_and_180 carry_and_i1
       (.D(D),
        .D_0(D_0),
        .D_1(D_1),
        .D_2(D_2),
        .M_AXI_DP_BVALID(M_AXI_DP_BVALID),
        .M_AXI_DP_RVALID(M_AXI_DP_RVALID),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Use_DAXI.M_AXI_DP_BREADY_I_reg (\Use_DAXI.M_AXI_DP_BREADY_I_reg ),
        .\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 (\Use_DAXI.M_AXI_DP_BREADY_I_reg_0 ),
        .\Use_DAXI.M_AXI_DP_RREADY_I_reg (\Use_DAXI.M_AXI_DP_RREADY_I_reg ),
        .\Use_DAXI.M_AXI_DP_RREADY_I_reg_0 (\Use_DAXI.M_AXI_DP_RREADY_I_reg_0 ),
        .\Use_DLMB.m2_dready_hold_reg (\Use_DLMB.m2_dready_hold_reg ),
        .\Use_DLMB.m2_dready_hold_reg_0 (\Use_DLMB.m2_dready_hold_reg_0 ),
        .\Use_DLMB.m2_potential_bubble_reg (\Use_DLMB.m2_potential_bubble_reg ),
        .\Use_DLMB.m2_potential_bubble_reg_0 (\Use_DLMB.m2_potential_bubble_reg_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_6 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m1_gpr_write(m1_gpr_write),
        .m1_gpr_write_dbg(m1_gpr_write_dbg),
        .m1_is_div_instr_i(m1_is_div_instr_i),
        .m2_databus_write(m2_databus_write),
        .m2_dead_valid_hold(m2_dead_valid_hold),
        .m2_dead_valid_hold_reg(m2_dead_valid_hold_reg),
        .m2_dlmb_dready(m2_dlmb_dready),
        .m2_dlmb_drop_request(m2_dlmb_drop_request),
        .m2_gpr_write(m2_gpr_write),
        .m2_gpr_write_dbg(m2_gpr_write_dbg),
        .m2_is_div_instr(m2_is_div_instr),
        .m2_piperun_masked_no5(m2_piperun_masked_no5),
        .m2_potential_bubble(m2_potential_bubble),
        .m2_raw_valid_reg(m2_PipeRun_for_ce),
        .m2_raw_valid_reg_0(m2_raw_valid_reg),
        .m2_raw_valid_reg_1(m2_raw_valid_reg_0),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_0));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_125
   (m3_PipeRun_for_ce,
    \Use_Async_Reset.sync_reset_reg ,
    m3_raw_valid_reg,
    wb_piperun_i_reg,
    D,
    wb_exception_from_m3_reg_rep__0,
    \wb_exception_raw_kind_reg[31] ,
    wb_exception_from_m3_reg_rep__0_0,
    m3_dead_valid_hold_reg,
    m3_piperun_masked_no3,
    sync_reset,
    m3_active_access,
    m3_raw_valid_reg_0,
    m3_raw_valid_reg_1,
    wb_raw_valid_reg,
    wb_raw_valid_reg_0,
    wb_raw_valid_reg_1,
    m3_gpr_write_dbg,
    m3_dead_valid_hold_reg_0,
    m3_dead_valid_hold,
    Q,
    \wb_PC_i_reg[31] ,
    \wb_PC_i_reg[31]_0 ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    m3_msr,
    lopt,
    lopt_1);
  output m3_PipeRun_for_ce;
  output \Use_Async_Reset.sync_reset_reg ;
  output m3_raw_valid_reg;
  output wb_piperun_i_reg;
  output D;
  output wb_exception_from_m3_reg_rep__0;
  output [0:0]\wb_exception_raw_kind_reg[31] ;
  output wb_exception_from_m3_reg_rep__0_0;
  input m3_dead_valid_hold_reg;
  input m3_piperun_masked_no3;
  input sync_reset;
  input m3_active_access;
  input m3_raw_valid_reg_0;
  input [0:0]m3_raw_valid_reg_1;
  input wb_raw_valid_reg;
  input wb_raw_valid_reg_0;
  input wb_raw_valid_reg_1;
  input m3_gpr_write_dbg;
  input m3_dead_valid_hold_reg_0;
  input m3_dead_valid_hold;
  input [2:0]Q;
  input \wb_PC_i_reg[31] ;
  input \wb_PC_i_reg[31]_0 ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input [0:0]m3_msr;
  input lopt;
  output lopt_1;

  wire D;
  wire [2:0]Q;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire m3_PipeRun_for_ce;
  wire m3_active_access;
  wire m3_dead_valid_hold;
  wire m3_dead_valid_hold_reg;
  wire m3_dead_valid_hold_reg_0;
  wire m3_gpr_write_dbg;
  wire [0:0]m3_msr;
  wire m3_piperun_masked_no3;
  wire m3_raw_valid_reg;
  wire m3_raw_valid_reg_0;
  wire [0:0]m3_raw_valid_reg_1;
  wire sync_reset;
  wire \wb_PC_i_reg[31] ;
  wire \wb_PC_i_reg[31]_0 ;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;
  wire [0:0]\wb_exception_raw_kind_reg[31] ;
  wire wb_piperun_i_reg;
  wire wb_raw_valid_reg;
  wire wb_raw_valid_reg_0;
  wire wb_raw_valid_reg_1;

  microblaze_microblaze_0_0_carry_and_168 carry_and_i1
       (.D(D),
        .Q(Q),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m3_active_access(m3_active_access),
        .m3_dead_valid_hold(m3_dead_valid_hold),
        .m3_dead_valid_hold_reg(m3_dead_valid_hold_reg),
        .m3_dead_valid_hold_reg_0(m3_dead_valid_hold_reg_0),
        .m3_gpr_write_dbg(m3_gpr_write_dbg),
        .m3_msr(m3_msr),
        .m3_piperun_masked_no3(m3_piperun_masked_no3),
        .m3_raw_valid_reg(m3_PipeRun_for_ce),
        .m3_raw_valid_reg_0(m3_raw_valid_reg),
        .m3_raw_valid_reg_1(m3_raw_valid_reg_0),
        .m3_raw_valid_reg_2(m3_raw_valid_reg_1),
        .sync_reset(sync_reset),
        .\wb_PC_i_reg[31] (\wb_PC_i_reg[31] ),
        .\wb_PC_i_reg[31]_0 (\wb_PC_i_reg[31]_0 ),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_0),
        .\wb_exception_raw_kind_reg[31] (\wb_exception_raw_kind_reg[31] ),
        .wb_piperun_i_reg(wb_piperun_i_reg),
        .wb_raw_valid_reg(wb_raw_valid_reg),
        .wb_raw_valid_reg_0(wb_raw_valid_reg_0),
        .wb_raw_valid_reg_1(wb_raw_valid_reg_1));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_129
   (of_PipeRun_for_ce,
    p_48_out,
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ,
    \Use_Async_Reset.sync_reset_reg ,
    D,
    D_0,
    WB_Div_Zero_Overflow_reg,
    of_raw_valid,
    of_piperun_masked_no10,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 ,
    p_43_out__4,
    \Using_FPGA.Native ,
    \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 ,
    sync_reset,
    of_dead_valid_hold_reg,
    of_dead_valid_hold,
    out,
    ex_gpr_write,
    \Using_FPGA.Native_0 ,
    ex_gpr_write_dbg,
    \of_MSR_i_reg[30] ,
    \of_MSR_i_reg[30]_0 ,
    \of_MSR_i_reg[25] ,
    \of_MSR_i_reg[25]_0 ,
    \of_MSR_i_reg[25]_1 ,
    \of_MSR_i_reg[25]_2 );
  output of_PipeRun_for_ce;
  output p_48_out;
  output \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  output \Use_Async_Reset.sync_reset_reg ;
  output D;
  output D_0;
  output [1:0]WB_Div_Zero_Overflow_reg;
  input of_raw_valid;
  input of_piperun_masked_no10;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ;
  input [0:0]\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 ;
  input p_43_out__4;
  input [0:0]\Using_FPGA.Native ;
  input \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 ;
  input sync_reset;
  input of_dead_valid_hold_reg;
  input of_dead_valid_hold;
  input out;
  input ex_gpr_write;
  input \Using_FPGA.Native_0 ;
  input ex_gpr_write_dbg;
  input \of_MSR_i_reg[30] ;
  input \of_MSR_i_reg[30]_0 ;
  input [1:0]\of_MSR_i_reg[25] ;
  input [1:0]\of_MSR_i_reg[25]_0 ;
  input \of_MSR_i_reg[25]_1 ;
  input [0:0]\of_MSR_i_reg[25]_2 ;

  wire D;
  wire D_0;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ;
  wire [0:0]\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire [1:0]WB_Div_Zero_Overflow_reg;
  wire ex_gpr_write;
  wire ex_gpr_write_dbg;
  wire [1:0]\of_MSR_i_reg[25] ;
  wire [1:0]\of_MSR_i_reg[25]_0 ;
  wire \of_MSR_i_reg[25]_1 ;
  wire [0:0]\of_MSR_i_reg[25]_2 ;
  wire \of_MSR_i_reg[30] ;
  wire \of_MSR_i_reg[30]_0 ;
  wire of_PipeRun_for_ce;
  wire of_dead_valid_hold;
  wire of_dead_valid_hold_reg;
  wire of_piperun_masked_no10;
  wire of_raw_valid;
  wire out;
  wire p_43_out__4;
  wire p_48_out;
  wire sync_reset;

  microblaze_microblaze_0_0_carry_and_160 carry_and_i1
       (.D(D),
        .D_0(D_0),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_0 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_1 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_2 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_3 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_4 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 (\Performance_Debug_Control.ex_dbg_pc_hit_i_reg_5 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg (\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native (of_PipeRun_for_ce),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg),
        .ex_gpr_write(ex_gpr_write),
        .ex_gpr_write_dbg(ex_gpr_write_dbg),
        .\of_MSR_i_reg[25] (\of_MSR_i_reg[25] ),
        .\of_MSR_i_reg[25]_0 (\of_MSR_i_reg[25]_0 ),
        .\of_MSR_i_reg[25]_1 (\of_MSR_i_reg[25]_1 ),
        .\of_MSR_i_reg[25]_2 (\of_MSR_i_reg[25]_2 ),
        .\of_MSR_i_reg[30] (\of_MSR_i_reg[30] ),
        .\of_MSR_i_reg[30]_0 (\of_MSR_i_reg[30]_0 ),
        .of_dead_valid_hold(of_dead_valid_hold),
        .of_dead_valid_hold_reg(of_dead_valid_hold_reg),
        .of_piperun_masked_no10(of_piperun_masked_no10),
        .of_raw_valid(of_raw_valid),
        .out(out),
        .p_43_out__4(p_43_out__4),
        .p_48_out(p_48_out),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_272
   (part_c,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output part_c;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire part_c;

  microblaze_microblaze_0_0_carry_and_370 carry_and_i1
       (.Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .part_c(part_c));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_273
   (part_c_and_b,
    \Using_FPGA.Native ,
    part_c,
    lopt,
    lopt_1);
  output part_c_and_b;
  input \Using_FPGA.Native ;
  input part_c;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire part_c;
  wire part_c_and_b;

  microblaze_microblaze_0_0_carry_and_368 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .part_c(part_c),
        .part_c_and_b(part_c_and_b));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_275
   (\cur_data_i_reg[15] ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \cur_data_i_reg[15] ;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \cur_data_i_reg[15] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_carry_and_364 carry_and_i1
       (.Q(Q),
        .\cur_data_i_reg[15] (\cur_data_i_reg[15] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_276
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_and_362 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_278
   (\cur_data_i_reg[15] ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \cur_data_i_reg[15] ;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \cur_data_i_reg[15] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_carry_and_358 carry_and_i1
       (.Q(Q),
        .\cur_data_i_reg[15] (\cur_data_i_reg[15] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_279
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_and_356 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_281
   (\cur_data_i_reg[15] ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \cur_data_i_reg[15] ;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \cur_data_i_reg[15] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_carry_and_352 carry_and_i1
       (.Q(Q),
        .\cur_data_i_reg[15] (\cur_data_i_reg[15] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_282
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_and_350 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_284
   (\cur_data_i_reg[15] ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \cur_data_i_reg[15] ;
  input [0:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \cur_data_i_reg[15] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_carry_and_346 carry_and_i1
       (.Q(Q),
        .\cur_data_i_reg[15] (\cur_data_i_reg[15] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_285
   (\cur_data_i_reg[26] ,
    OF_Use_Op_B,
    \Using_FPGA.Native ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input OF_Use_Op_B;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;

  wire OF_Use_Op_B;
  wire \Using_FPGA.Native ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_and_344 carry_and_i1
       (.OF_Use_Op_B(OF_Use_Op_B),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_287
   (of_read_ex_write_op_conflict,
    A4_out,
    of_ex_addr_conflict,
    lopt,
    lopt_1);
  output of_read_ex_write_op_conflict;
  input A4_out;
  input of_ex_addr_conflict;
  input lopt;
  output lopt_1;

  wire A4_out;
  wire lopt;
  wire lopt_1;
  wire of_ex_addr_conflict;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_337 carry_and_i1
       (.A4_out(A4_out),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_288
   (of_op3_ex_stall,
    ex_complete_in_later_stage,
    of_read_ex_write_op_conflict,
    lopt,
    lopt_1);
  output of_op3_ex_stall;
  input ex_complete_in_later_stage;
  input of_read_ex_write_op_conflict;
  input lopt;
  output lopt_1;

  wire ex_complete_in_later_stage;
  wire lopt;
  wire lopt_1;
  wire of_op3_ex_stall;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_334 carry_and_i1
       (.ex_complete_in_later_stage(ex_complete_in_later_stage),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_op3_ex_stall(of_op3_ex_stall),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_290
   (of_read_m0_write_op_conflict,
    A3_out,
    of_m0_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m0_write_op_conflict;
  input A3_out;
  input of_m0_addr_conflict;
  input lopt;
  output lopt_1;

  wire A3_out;
  wire lopt;
  wire lopt_1;
  wire of_m0_addr_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_329 carry_and_i1
       (.A3_out(A3_out),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_292
   (m0_complete_in_later_stage_reg,
    m0_complete_in_later_stage,
    of_read_m0_write_op_conflict,
    of_op3_ex_stall,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m1_stall_conflict,
    lopt,
    lopt_1);
  output m0_complete_in_later_stage_reg;
  input m0_complete_in_later_stage;
  input of_read_m0_write_op_conflict;
  input of_op3_ex_stall;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m1_stall_conflict;
  input lopt;
  output lopt_1;

  wire And_OUT;
  wire lopt;
  wire lopt_1;
  wire m0_complete_in_later_stage;
  wire m0_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_stall_conflict;
  wire of_op3_ex_stall;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_326 carry_and_i1
       (.And_OUT(And_OUT),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m0_complete_in_later_stage(m0_complete_in_later_stage),
        .m0_complete_in_later_stage_reg(m0_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_op3_ex_stall(of_op3_ex_stall),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_294
   (of_read_m1_write_op_conflict,
    A2_out,
    of_m1_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m1_write_op_conflict;
  input A2_out;
  input of_m1_addr_conflict;
  input lopt;
  output lopt_1;

  wire A2_out;
  wire lopt;
  wire lopt_1;
  wire of_m1_addr_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_321 carry_and_i1
       (.A2_out(A2_out),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_296
   (of_m1_stall_conflict,
    m1_m2_complete_in_later_stage,
    of_read_m1_write_op_conflict,
    lopt,
    lopt_1);
  output of_m1_stall_conflict;
  input m1_m2_complete_in_later_stage;
  input of_read_m1_write_op_conflict;
  input lopt;
  output lopt_1;

  wire lopt;
  wire lopt_1;
  wire m1_m2_complete_in_later_stage;
  wire of_m1_stall_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_318 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_298
   (of_read_m2_write_op_conflict,
    A1_out,
    of_m2_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m2_write_op_conflict;
  input A1_out;
  input of_m2_addr_conflict;
  input lopt;
  output lopt_1;

  wire A1_out;
  wire lopt;
  wire lopt_1;
  wire of_m2_addr_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_313 carry_and_i1
       (.A1_out(A1_out),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_300
   (m2_complete_in_later_stage_reg,
    m2_complete_in_later_stage,
    of_read_m2_write_op_conflict,
    of_m2_no_stall_conflict,
    of_m3_stall_conflict,
    of_m1_no_stall_conflict,
    And_OUT,
    of_m0_no_stall_conflict,
    lopt,
    lopt_1);
  output m2_complete_in_later_stage_reg;
  input m2_complete_in_later_stage;
  input of_read_m2_write_op_conflict;
  input of_m2_no_stall_conflict;
  input of_m3_stall_conflict;
  input of_m1_no_stall_conflict;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input lopt;
  output lopt_1;

  wire And_OUT;
  wire lopt;
  wire lopt_1;
  wire m2_complete_in_later_stage;
  wire m2_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_no_stall_conflict;
  wire of_m2_no_stall_conflict;
  wire of_m3_stall_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_310 carry_and_i1
       (.And_OUT(And_OUT),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .m2_complete_in_later_stage_reg(m2_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_m2_no_stall_conflict(of_m2_no_stall_conflict),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_302
   (of_read_m3_write_op_conflict,
    A0_out,
    of_m3_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m3_write_op_conflict;
  input A0_out;
  input of_m3_addr_conflict;
  input lopt;
  output lopt_1;

  wire A0_out;
  wire lopt;
  wire lopt_1;
  wire of_m3_addr_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_306 carry_and_i1
       (.A0_out(A0_out),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_303
   (of_m3_stall_conflict,
    of_read_m3_write_op_conflict,
    m3_complete_in_later_stage,
    m3_div_stall,
    lopt,
    lopt_1,
    lopt_2);
  output of_m3_stall_conflict;
  input of_read_m3_write_op_conflict;
  input m3_complete_in_later_stage;
  input m3_div_stall;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m3_complete_in_later_stage;
  wire m3_div_stall;
  wire of_m3_stall_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_304 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m3_complete_in_later_stage(m3_complete_in_later_stage),
        .m3_div_stall(m3_div_stall),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_372
   (part_c,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output part_c;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire part_c;

  microblaze_microblaze_0_0_carry_and_473 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .part_c(part_c));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_375
   (\Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_carry_and_467 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_378
   (\Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_carry_and_461 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_381
   (\Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_carry_and_455 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_384
   (\Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_carry_and_449 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_388
   (of_read_ex_write_op_conflict,
    \Using_FPGA.Native ,
    of_ex_addr_conflict,
    lopt,
    lopt_1);
  output of_read_ex_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_ex_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_ex_addr_conflict;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_440 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_390
   (OF_Op_EX_Stall4_in,
    ex_complete_in_later_stage,
    of_read_ex_write_op_conflict,
    lopt,
    lopt_1);
  output OF_Op_EX_Stall4_in;
  input ex_complete_in_later_stage;
  input of_read_ex_write_op_conflict;
  input lopt;
  output lopt_1;

  wire OF_Op_EX_Stall4_in;
  wire ex_complete_in_later_stage;
  wire lopt;
  wire lopt_1;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_437 carry_and_i1
       (.OF_Op_EX_Stall4_in(OF_Op_EX_Stall4_in),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_392
   (of_read_m0_write_op_conflict,
    \Using_FPGA.Native ,
    of_m0_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m0_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m0_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m0_addr_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_432 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_394
   (m0_complete_in_later_stage_reg,
    m0_complete_in_later_stage,
    of_read_m0_write_op_conflict,
    OF_Op_EX_Stall4_in,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m1_stall_conflict,
    lopt,
    lopt_1);
  output m0_complete_in_later_stage_reg;
  input m0_complete_in_later_stage;
  input of_read_m0_write_op_conflict;
  input OF_Op_EX_Stall4_in;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m1_stall_conflict;
  input lopt;
  output lopt_1;

  wire And_OUT;
  wire OF_Op_EX_Stall4_in;
  wire lopt;
  wire lopt_1;
  wire m0_complete_in_later_stage;
  wire m0_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_stall_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_429 carry_and_i1
       (.And_OUT(And_OUT),
        .OF_Op_EX_Stall4_in(OF_Op_EX_Stall4_in),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m0_complete_in_later_stage(m0_complete_in_later_stage),
        .m0_complete_in_later_stage_reg(m0_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_396
   (of_read_m1_write_op_conflict,
    \Using_FPGA.Native ,
    of_m1_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m1_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m1_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m1_addr_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_424 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_398
   (of_m1_stall_conflict,
    m1_m2_complete_in_later_stage,
    of_read_m1_write_op_conflict,
    lopt,
    lopt_1);
  output of_m1_stall_conflict;
  input m1_m2_complete_in_later_stage;
  input of_read_m1_write_op_conflict;
  input lopt;
  output lopt_1;

  wire lopt;
  wire lopt_1;
  wire m1_m2_complete_in_later_stage;
  wire of_m1_stall_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_421 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_400
   (of_read_m2_write_op_conflict,
    \Using_FPGA.Native ,
    of_m2_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m2_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m2_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m2_addr_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_416 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_402
   (of_m2_stall_conflict,
    m2_complete_in_later_stage,
    of_read_m2_write_op_conflict,
    lopt,
    lopt_1);
  output of_m2_stall_conflict;
  input m2_complete_in_later_stage;
  input of_read_m2_write_op_conflict;
  input lopt;
  output lopt_1;

  wire lopt;
  wire lopt_1;
  wire m2_complete_in_later_stage;
  wire of_m2_stall_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_413 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .of_m2_stall_conflict(of_m2_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_404
   (of_read_m3_write_op_conflict,
    \Using_FPGA.Native ,
    of_m3_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m3_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m3_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m3_addr_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_408 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_405
   (of_m3_stall_conflict,
    of_read_m3_write_op_conflict,
    m3_complete_in_later_stage,
    m3_div_stall,
    lopt,
    lopt_1,
    lopt_2);
  output of_m3_stall_conflict;
  input of_read_m3_write_op_conflict;
  input m3_complete_in_later_stage;
  input m3_div_stall;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m3_complete_in_later_stage;
  wire m3_div_stall;
  wire of_m3_stall_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_406 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m3_complete_in_later_stage(m3_complete_in_later_stage),
        .m3_div_stall(m3_div_stall),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_475
   (of_ex_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_ex_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_ex_use_conflict;

  microblaze_microblaze_0_0_carry_and_546 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_ex_use_conflict(of_ex_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_476
   (of_m0_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_m0_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_m0_use_conflict;

  microblaze_microblaze_0_0_carry_and_544 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_m0_use_conflict(of_m0_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_477
   (of_m1_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_m1_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_m1_use_conflict;

  microblaze_microblaze_0_0_carry_and_542 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_m1_use_conflict(of_m1_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_478
   (of_m2_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_m2_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_m2_use_conflict;

  microblaze_microblaze_0_0_carry_and_540 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_m2_use_conflict(of_m2_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_479
   (of_m3_use_conflict,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_m3_use_conflict;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_m3_use_conflict;

  microblaze_microblaze_0_0_carry_and_538 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_m3_use_conflict(of_m3_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_481
   (of_read_ex_write_op_conflict,
    \Using_FPGA.Native ,
    of_ex_addr_conflict,
    lopt,
    lopt_1);
  output of_read_ex_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_ex_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_ex_addr_conflict;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_533 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_483
   (OF_Op_EX_Stall,
    ex_complete_in_later_stage,
    of_read_ex_write_op_conflict);
  output OF_Op_EX_Stall;
  input ex_complete_in_later_stage;
  input of_read_ex_write_op_conflict;

  wire OF_Op_EX_Stall;
  wire ex_complete_in_later_stage;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_530 carry_and_i1
       (.OF_Op_EX_Stall(OF_Op_EX_Stall),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_485
   (of_read_m0_write_op_conflict,
    \Using_FPGA.Native ,
    of_m0_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m0_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m0_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m0_addr_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_525 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_487
   (m0_complete_in_later_stage_reg,
    m0_complete_in_later_stage,
    of_read_m0_write_op_conflict,
    OF_Op_EX_Stall,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m1_stall_conflict);
  output m0_complete_in_later_stage_reg;
  input m0_complete_in_later_stage;
  input of_read_m0_write_op_conflict;
  input OF_Op_EX_Stall;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m1_stall_conflict;

  wire And_OUT;
  wire OF_Op_EX_Stall;
  wire m0_complete_in_later_stage;
  wire m0_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_stall_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_522 carry_and_i1
       (.And_OUT(And_OUT),
        .OF_Op_EX_Stall(OF_Op_EX_Stall),
        .m0_complete_in_later_stage(m0_complete_in_later_stage),
        .m0_complete_in_later_stage_reg(m0_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_489
   (of_read_m1_write_op_conflict,
    \Using_FPGA.Native ,
    of_m1_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m1_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m1_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m1_addr_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_517 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_491
   (of_m1_stall_conflict,
    m1_m2_complete_in_later_stage,
    of_read_m1_write_op_conflict);
  output of_m1_stall_conflict;
  input m1_m2_complete_in_later_stage;
  input of_read_m1_write_op_conflict;

  wire m1_m2_complete_in_later_stage;
  wire of_m1_stall_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_514 carry_and_i1
       (.m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_493
   (of_read_m2_write_op_conflict,
    \Using_FPGA.Native ,
    of_m2_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m2_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m2_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m2_addr_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_509 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_495
   (of_m2_stall_conflict,
    m2_complete_in_later_stage,
    of_read_m2_write_op_conflict);
  output of_m2_stall_conflict;
  input m2_complete_in_later_stage;
  input of_read_m2_write_op_conflict;

  wire m2_complete_in_later_stage;
  wire of_m2_stall_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_506 carry_and_i1
       (.m2_complete_in_later_stage(m2_complete_in_later_stage),
        .of_m2_stall_conflict(of_m2_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_497
   (of_read_m3_write_op_conflict,
    \Using_FPGA.Native ,
    of_m3_addr_conflict,
    lopt,
    lopt_1);
  output of_read_m3_write_op_conflict;
  input \Using_FPGA.Native ;
  input of_m3_addr_conflict;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m3_addr_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_501 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_498
   (of_m3_stall_conflict,
    of_read_m3_write_op_conflict,
    m3_complete_in_later_stage,
    m3_div_stall);
  output of_m3_stall_conflict;
  input of_read_m3_write_op_conflict;
  input m3_complete_in_later_stage;
  input m3_div_stall;

  wire m3_complete_in_later_stage;
  wire m3_div_stall;
  wire of_m3_stall_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_499 carry_and_i1
       (.m3_complete_in_later_stage(m3_complete_in_later_stage),
        .m3_div_stall(m3_div_stall),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_bb" *) 
module microblaze_microblaze_0_0_carry_and_bb_99
   (if4_piperun_masked_no3,
    \Using_FPGA.Native ,
    if4_piperun_masked_no2,
    lopt,
    lopt_1);
  output if4_piperun_masked_no3;
  input \Using_FPGA.Native ;
  input if4_piperun_masked_no2;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire if4_piperun_masked_no2;
  wire if4_piperun_masked_no3;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_and_220 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .if4_piperun_masked_no2(if4_piperun_masked_no2),
        .if4_piperun_masked_no3(if4_piperun_masked_no3),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb
   (if4_ready_tmp3,
    \Using_FPGA.Native ,
    if4_ready_tmp2,
    lopt,
    lopt_1);
  output if4_ready_tmp3;
  input \Using_FPGA.Native ;
  input if4_ready_tmp2;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire if4_ready_tmp2;
  wire if4_ready_tmp3;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_and carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .if4_ready_tmp2(if4_ready_tmp2),
        .if4_ready_tmp3(if4_ready_tmp3),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_100
   (if4_piperun_masked_no4,
    if4_piperun_masked_no3,
    lopt,
    lopt_1,
    lopt_2);
  output if4_piperun_masked_no4;
  input if4_piperun_masked_no3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire if4_piperun_masked_no3;
  wire if4_piperun_masked_no4;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_carry_and_218 carry_and_i1
       (.if4_piperun_masked_no3(if4_piperun_masked_no3),
        .if4_piperun_masked_no4(if4_piperun_masked_no4),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_105
   (m0_piperun_masked_no2,
    m0_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output m0_piperun_masked_no2;
  input m0_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m0_piperun_masked_no1;
  wire m0_piperun_masked_no2;

  microblaze_microblaze_0_0_carry_and_208 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m0_piperun_masked_no1(m0_piperun_masked_no1),
        .m0_piperun_masked_no2(m0_piperun_masked_no2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_106
   (m0_piperun_masked_no3,
    m0_piperun_masked_no2,
    lopt,
    lopt_1,
    lopt_2);
  output m0_piperun_masked_no3;
  input m0_piperun_masked_no2;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m0_piperun_masked_no2;
  wire m0_piperun_masked_no3;

  microblaze_microblaze_0_0_carry_and_206 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m0_piperun_masked_no2(m0_piperun_masked_no2),
        .m0_piperun_masked_no3(m0_piperun_masked_no3));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_107
   (m0_piperun_masked_no4,
    m0_piperun_masked_no3,
    lopt,
    lopt_1,
    lopt_2);
  output m0_piperun_masked_no4;
  input m0_piperun_masked_no3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m0_piperun_masked_no3;
  wire m0_piperun_masked_no4;

  microblaze_microblaze_0_0_carry_and_204 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m0_piperun_masked_no3(m0_piperun_masked_no3),
        .m0_piperun_masked_no4(m0_piperun_masked_no4));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_108
   (in0,
    m0_raw_valid_reg,
    wb_exception_from_m3_reg_rep__0,
    D,
    D_0,
    WB_Div_Zero_Overflow_reg,
    wb_exception_from_m3_reg_rep__0_0,
    m0_piperun_masked_no4,
    m0_raw_valid_reg_0,
    \Using_FPGA.Native ,
    m0_raw_valid_reg_1,
    sync_reset,
    \Using_FPGA.Native_0 ,
    m0_dead_valid_hold,
    m0_gpr_write_dbg,
    ex_gpr_write_dbg,
    m0_gpr_write,
    ex_gpr_write,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output in0;
  output m0_raw_valid_reg;
  output wb_exception_from_m3_reg_rep__0;
  output D;
  output D_0;
  output WB_Div_Zero_Overflow_reg;
  output wb_exception_from_m3_reg_rep__0_0;
  input m0_piperun_masked_no4;
  input m0_raw_valid_reg_0;
  input [0:0]\Using_FPGA.Native ;
  input m0_raw_valid_reg_1;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input m0_dead_valid_hold;
  input m0_gpr_write_dbg;
  input ex_gpr_write_dbg;
  input m0_gpr_write;
  input ex_gpr_write;
  input \Using_FPGA.Native_1 ;
  input [0:0]\Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire D;
  wire D_0;
  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire WB_Div_Zero_Overflow_reg;
  wire ex_gpr_write;
  wire ex_gpr_write_dbg;
  wire in0;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m0_dead_valid_hold;
  wire m0_gpr_write;
  wire m0_gpr_write_dbg;
  wire m0_piperun_masked_no4;
  wire m0_raw_valid_reg;
  wire m0_raw_valid_reg_0;
  wire m0_raw_valid_reg_1;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;

  microblaze_microblaze_0_0_carry_and_202 carry_and_i1
       (.D(D),
        .D_0(D_0),
        .\Using_FPGA.Native (in0),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_4 ),
        .\Using_FPGA.Native_6 (\Using_FPGA.Native_5 ),
        .\Using_FPGA.Native_7 (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_8 (\Using_FPGA.Native_7 ),
        .WB_Div_Zero_Overflow_reg(WB_Div_Zero_Overflow_reg),
        .ex_gpr_write(ex_gpr_write),
        .ex_gpr_write_dbg(ex_gpr_write_dbg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m0_dead_valid_hold(m0_dead_valid_hold),
        .m0_gpr_write(m0_gpr_write),
        .m0_gpr_write_dbg(m0_gpr_write_dbg),
        .m0_piperun_masked_no4(m0_piperun_masked_no4),
        .m0_raw_valid_reg(m0_raw_valid_reg),
        .m0_raw_valid_reg_0(m0_raw_valid_reg_0),
        .m0_raw_valid_reg_1(m0_raw_valid_reg_1),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_0));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_110
   (m1_piperun_masked_no1,
    m1_piperun_raw,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m1_piperun_masked_no1;
  input m1_piperun_raw;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m1_piperun_masked_no1;
  wire m1_piperun_raw;

  microblaze_microblaze_0_0_carry_and_198 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m1_piperun_masked_no1(m1_piperun_masked_no1),
        .m1_piperun_raw(m1_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_111
   (m1_piperun_masked_no2,
    m1_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output m1_piperun_masked_no2;
  input m1_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m1_piperun_masked_no1;
  wire m1_piperun_masked_no2;

  microblaze_microblaze_0_0_carry_and_196 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m1_piperun_masked_no1(m1_piperun_masked_no1),
        .m1_piperun_masked_no2(m1_piperun_masked_no2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_114
   (m2_piperun_masked_no1,
    m2_piperun_raw,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    m2_allow_dready,
    DReady,
    \Using_FPGA.Native_1 ,
    DWait,
    lopt,
    lopt_1,
    lopt_2);
  output m2_piperun_masked_no1;
  input m2_piperun_raw;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input m2_allow_dready;
  input DReady;
  input \Using_FPGA.Native_1 ;
  input DWait;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire DReady;
  wire DWait;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m2_allow_dready;
  wire m2_piperun_masked_no1;
  wire m2_piperun_raw;

  microblaze_microblaze_0_0_carry_and_190 carry_and_i1
       (.DReady(DReady),
        .DWait(DWait),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m2_allow_dready(m2_allow_dready),
        .m2_piperun_masked_no1(m2_piperun_masked_no1),
        .m2_piperun_raw(m2_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_115
   (m2_piperun_masked_no2,
    \Using_FPGA.Native ,
    m2_piperun_masked_no1,
    lopt,
    lopt_1);
  output m2_piperun_masked_no2;
  input \Using_FPGA.Native ;
  input m2_piperun_masked_no1;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire m2_piperun_masked_no1;
  wire m2_piperun_masked_no2;

  microblaze_microblaze_0_0_carry_and_188 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m2_piperun_masked_no1(m2_piperun_masked_no1),
        .m2_piperun_masked_no2(m2_piperun_masked_no2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_116
   (m2_piperun_masked_no3,
    m2_piperun_masked_no2,
    lopt,
    lopt_1,
    lopt_2);
  output m2_piperun_masked_no3;
  input m2_piperun_masked_no2;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m2_piperun_masked_no2;
  wire m2_piperun_masked_no3;

  microblaze_microblaze_0_0_carry_and_186 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m2_piperun_masked_no2(m2_piperun_masked_no2),
        .m2_piperun_masked_no3(m2_piperun_masked_no3));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_117
   (m2_piperun_masked_no4,
    m2_piperun_masked_no3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m2_piperun_masked_no4;
  input m2_piperun_masked_no3;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m2_piperun_masked_no3;
  wire m2_piperun_masked_no4;

  microblaze_microblaze_0_0_carry_and_184 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m2_piperun_masked_no3(m2_piperun_masked_no3),
        .m2_piperun_masked_no4(m2_piperun_masked_no4));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_118
   (m2_piperun_masked_no5,
    m2_piperun_masked_no4,
    lopt,
    lopt_1,
    lopt_2);
  output m2_piperun_masked_no5;
  input m2_piperun_masked_no4;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m2_piperun_masked_no4;
  wire m2_piperun_masked_no5;

  microblaze_microblaze_0_0_carry_and_182 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m2_piperun_masked_no4(m2_piperun_masked_no4),
        .m2_piperun_masked_no5(m2_piperun_masked_no5));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_122
   (m3_piperun_masked_no1,
    \Using_FPGA.Native ,
    m3_piperun_raw,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m3_piperun_masked_no1;
  input \Using_FPGA.Native ;
  input m3_piperun_raw;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m3_piperun_masked_no1;
  wire m3_piperun_raw;

  microblaze_microblaze_0_0_carry_and_174 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m3_piperun_masked_no1(m3_piperun_masked_no1),
        .m3_piperun_raw(m3_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_123
   (m3_piperun_masked_no2,
    m3_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output m3_piperun_masked_no2;
  input m3_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m3_piperun_masked_no1;
  wire m3_piperun_masked_no2;

  microblaze_microblaze_0_0_carry_and_172 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m3_piperun_masked_no1(m3_piperun_masked_no1),
        .m3_piperun_masked_no2(m3_piperun_masked_no2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_124
   (m3_piperun_masked_no3,
    WB_MSR_Set_IE_reg,
    m3_piperun_masked_no2,
    lopt,
    lopt_1);
  output m3_piperun_masked_no3;
  input WB_MSR_Set_IE_reg;
  input m3_piperun_masked_no2;
  input lopt;
  output lopt_1;

  wire WB_MSR_Set_IE_reg;
  wire lopt;
  wire lopt_1;
  wire m3_piperun_masked_no2;
  wire m3_piperun_masked_no3;

  microblaze_microblaze_0_0_carry_and_170 carry_and_i1
       (.WB_MSR_Set_IE_reg(WB_MSR_Set_IE_reg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m3_piperun_masked_no2(m3_piperun_masked_no2),
        .m3_piperun_masked_no3(m3_piperun_masked_no3));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_127
   (of_piperun_masked_no1,
    \Using_FPGA.Native ,
    of_piperun_raw,
    lopt,
    lopt_1);
  output of_piperun_masked_no1;
  input \Using_FPGA.Native ;
  input of_piperun_raw;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_piperun_masked_no1;
  wire of_piperun_raw;

  microblaze_microblaze_0_0_carry_and_164 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_piperun_masked_no1(of_piperun_masked_no1),
        .of_piperun_raw(of_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_128
   (of_piperun_masked_no10,
    of_piperun_masked_no9,
    lopt,
    lopt_1,
    lopt_2);
  output of_piperun_masked_no10;
  input of_piperun_masked_no9;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire of_piperun_masked_no10;
  wire of_piperun_masked_no9;

  microblaze_microblaze_0_0_carry_and_162 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .of_piperun_masked_no10(of_piperun_masked_no10),
        .of_piperun_masked_no9(of_piperun_masked_no9));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_130
   (of_piperun_masked_no2,
    \Using_FPGA.Native ,
    of_piperun_masked_no1,
    lopt,
    lopt_1);
  output of_piperun_masked_no2;
  input \Using_FPGA.Native ;
  input of_piperun_masked_no1;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_piperun_masked_no1;
  wire of_piperun_masked_no2;

  microblaze_microblaze_0_0_carry_and_158 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_piperun_masked_no1(of_piperun_masked_no1),
        .of_piperun_masked_no2(of_piperun_masked_no2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_131
   (of_piperun_masked_no3,
    \Using_FPGA.Native ,
    of_piperun_masked_no2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_piperun_masked_no3;
  input \Using_FPGA.Native ;
  input of_piperun_masked_no2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_piperun_masked_no2;
  wire of_piperun_masked_no3;

  microblaze_microblaze_0_0_carry_and_156 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_piperun_masked_no2(of_piperun_masked_no2),
        .of_piperun_masked_no3(of_piperun_masked_no3));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_132
   (of_piperun_masked_no4,
    \Using_FPGA.Native ,
    of_piperun_masked_no3,
    lopt,
    lopt_1);
  output of_piperun_masked_no4;
  input \Using_FPGA.Native ;
  input of_piperun_masked_no3;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_piperun_masked_no3;
  wire of_piperun_masked_no4;

  microblaze_microblaze_0_0_carry_and_154 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_piperun_masked_no3(of_piperun_masked_no3),
        .of_piperun_masked_no4(of_piperun_masked_no4));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_133
   (of_piperun_masked_no5,
    \Using_FPGA.Native ,
    of_piperun_masked_no4,
    lopt,
    lopt_1);
  output of_piperun_masked_no5;
  input \Using_FPGA.Native ;
  input of_piperun_masked_no4;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_piperun_masked_no4;
  wire of_piperun_masked_no5;

  microblaze_microblaze_0_0_carry_and_152 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_piperun_masked_no4(of_piperun_masked_no4),
        .of_piperun_masked_no5(of_piperun_masked_no5));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_134
   (of_piperun_masked_no6,
    \Using_FPGA.Native ,
    of_piperun_masked_no5,
    lopt,
    lopt_1);
  output of_piperun_masked_no6;
  input \Using_FPGA.Native ;
  input of_piperun_masked_no5;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_piperun_masked_no5;
  wire of_piperun_masked_no6;

  microblaze_microblaze_0_0_carry_and_150 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_piperun_masked_no5(of_piperun_masked_no5),
        .of_piperun_masked_no6(of_piperun_masked_no6));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_135
   (of_piperun_masked_no7,
    of_piperun_masked_no6,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output of_piperun_masked_no7;
  input of_piperun_masked_no6;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire of_piperun_masked_no6;
  wire of_piperun_masked_no7;

  microblaze_microblaze_0_0_carry_and_148 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .of_piperun_masked_no6(of_piperun_masked_no6),
        .of_piperun_masked_no7(of_piperun_masked_no7));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_136
   (of_piperun_masked_no8,
    of_piperun_masked_no7,
    lopt,
    lopt_1,
    lopt_2);
  output of_piperun_masked_no8;
  input of_piperun_masked_no7;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire of_piperun_masked_no7;
  wire of_piperun_masked_no8;

  microblaze_microblaze_0_0_carry_and_146 carry_and_i1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .of_piperun_masked_no7(of_piperun_masked_no7),
        .of_piperun_masked_no8(of_piperun_masked_no8));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_137
   (of_piperun_masked_no9,
    ex_is_div_instr_i_reg,
    \Using_FPGA.Native ,
    of_piperun_masked_no8,
    \Using_FPGA.Native_i_1__8 ,
    \Using_FPGA.Native_i_1__8_0 ,
    \Using_FPGA.Native_i_1__8_1 ,
    ex_dead_valid_hold,
    lopt,
    lopt_1);
  output of_piperun_masked_no9;
  output ex_is_div_instr_i_reg;
  input \Using_FPGA.Native ;
  input of_piperun_masked_no8;
  input \Using_FPGA.Native_i_1__8 ;
  input \Using_FPGA.Native_i_1__8_0 ;
  input \Using_FPGA.Native_i_1__8_1 ;
  input ex_dead_valid_hold;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_i_1__8 ;
  wire \Using_FPGA.Native_i_1__8_0 ;
  wire \Using_FPGA.Native_i_1__8_1 ;
  wire ex_dead_valid_hold;
  wire ex_is_div_instr_i_reg;
  wire lopt;
  wire lopt_1;
  wire of_piperun_masked_no8;
  wire of_piperun_masked_no9;

  microblaze_microblaze_0_0_carry_and_144 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_i_1__8 (\Using_FPGA.Native_i_1__8 ),
        .\Using_FPGA.Native_i_1__8_0 (\Using_FPGA.Native_i_1__8_0 ),
        .\Using_FPGA.Native_i_1__8_1 (\Using_FPGA.Native_i_1__8_1 ),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_is_div_instr_i_reg(ex_is_div_instr_i_reg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_piperun_masked_no8(of_piperun_masked_no8),
        .of_piperun_masked_no9(of_piperun_masked_no9));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_374
   (of_ex_use_conflict,
    \Using_FPGA.Native ,
    part_c_or_not_b,
    lopt,
    lopt_1);
  output of_ex_use_conflict;
  input \Using_FPGA.Native ;
  input part_c_or_not_b;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_ex_use_conflict;
  wire part_c_or_not_b;

  microblaze_microblaze_0_0_carry_and_469 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_use_conflict(of_ex_use_conflict),
        .part_c_or_not_b(part_c_or_not_b));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_377
   (of_m0_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m0_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m0_use_conflict;

  microblaze_microblaze_0_0_carry_and_463 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_use_conflict(of_m0_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_380
   (of_m1_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m1_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m1_use_conflict;

  microblaze_microblaze_0_0_carry_and_457 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_use_conflict(of_m1_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_383
   (of_m2_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m2_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m2_use_conflict;

  microblaze_microblaze_0_0_carry_and_451 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_use_conflict(of_m2_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_386
   (of_m3_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m3_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m3_use_conflict;

  microblaze_microblaze_0_0_carry_and_445 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_use_conflict(of_m3_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_80
   (bp1_raw_valid_reg,
    bp1_dead_fetch_hold_bt,
    bp1_dead_fetch_hold_reg,
    bp0_piperun_masked_no1,
    sync_reset,
    E,
    bp1_dead_fetch_hold_reg_0,
    bp1_dead_fetch_hold_reg_1,
    kill_fetch_mmu,
    bp0_dead_fetch_hold,
    lopt,
    lopt_1,
    lopt_2);
  output bp1_raw_valid_reg;
  output bp1_dead_fetch_hold_bt;
  output bp1_dead_fetch_hold_reg;
  input bp0_piperun_masked_no1;
  input sync_reset;
  input [0:0]E;
  input bp1_dead_fetch_hold_reg_0;
  input bp1_dead_fetch_hold_reg_1;
  input kill_fetch_mmu;
  input bp0_dead_fetch_hold;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [0:0]E;
  wire bp0_dead_fetch_hold;
  wire bp0_piperun_masked_no1;
  wire bp1_dead_fetch_hold_bt;
  wire bp1_dead_fetch_hold_reg;
  wire bp1_dead_fetch_hold_reg_0;
  wire bp1_dead_fetch_hold_reg_1;
  wire bp1_raw_valid_reg;
  wire kill_fetch_mmu;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire sync_reset;

  microblaze_microblaze_0_0_carry_and_262 carry_and_i1
       (.E(E),
        .bp0_dead_fetch_hold(bp0_dead_fetch_hold),
        .bp0_piperun_masked_no1(bp0_piperun_masked_no1),
        .bp1_dead_fetch_hold_bt(bp1_dead_fetch_hold_bt),
        .bp1_dead_fetch_hold_reg(bp1_dead_fetch_hold_reg),
        .bp1_dead_fetch_hold_reg_0(bp1_dead_fetch_hold_reg_0),
        .bp1_dead_fetch_hold_reg_1(bp1_dead_fetch_hold_reg_1),
        .bp1_raw_valid_reg(bp1_raw_valid_reg),
        .kill_fetch_mmu(kill_fetch_mmu),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_81
   (E,
    bp1_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]E;
  input bp1_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [0:0]E;
  wire bp1_piperun_masked_no1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_carry_and_258 carry_and_i1
       (.E(E),
        .bp1_piperun_masked_no1(bp1_piperun_masked_no1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_83
   (ex_piperun_masked_no1,
    \Using_FPGA.Native ,
    ex_piperun_raw,
    lopt,
    lopt_1);
  output ex_piperun_masked_no1;
  input \Using_FPGA.Native ;
  input ex_piperun_raw;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire ex_piperun_masked_no1;
  wire ex_piperun_raw;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_and_254 carry_and_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .ex_piperun_masked_no1(ex_piperun_masked_no1),
        .ex_piperun_raw(ex_piperun_raw),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_84
   (ex_piperun_masked_no2,
    ex_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_masked_no2;
  input ex_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire ex_piperun_masked_no1;
  wire ex_piperun_masked_no2;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_carry_and_252 carry_and_i1
       (.ex_piperun_masked_no1(ex_piperun_masked_no1),
        .ex_piperun_masked_no2(ex_piperun_masked_no2),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_85
   (ex_piperun_masked_no3,
    ex_piperun_masked_no2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output ex_piperun_masked_no3;
  input ex_piperun_masked_no2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire ex_piperun_masked_no2;
  wire ex_piperun_masked_no3;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_carry_and_250 carry_and_i1
       (.ex_piperun_masked_no2(ex_piperun_masked_no2),
        .ex_piperun_masked_no3(ex_piperun_masked_no3),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_86
   (ex_piperun_masked_no4,
    ex_piperun_masked_no3,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_masked_no4;
  input ex_piperun_masked_no3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire ex_piperun_masked_no3;
  wire ex_piperun_masked_no4;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_carry_and_248 carry_and_i1
       (.ex_piperun_masked_no3(ex_piperun_masked_no3),
        .ex_piperun_masked_no4(ex_piperun_masked_no4),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_87
   (ex_piperun_masked_no5,
    ex_piperun_masked_no4,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_masked_no5;
  input ex_piperun_masked_no4;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire ex_piperun_masked_no4;
  wire ex_piperun_masked_no5;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_carry_and_246 carry_and_i1
       (.ex_piperun_masked_no4(ex_piperun_masked_no4),
        .ex_piperun_masked_no5(ex_piperun_masked_no5),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_88
   (ex_piperun_masked_no6,
    ex_piperun_masked_no5,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_masked_no6;
  input ex_piperun_masked_no5;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire ex_piperun_masked_no5;
  wire ex_piperun_masked_no6;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_carry_and_244 carry_and_i1
       (.ex_piperun_masked_no5(ex_piperun_masked_no5),
        .ex_piperun_masked_no6(ex_piperun_masked_no6),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_90
   (if2_raw_valid_reg,
    if0_raw_valid_reg,
    lopt,
    lopt_1,
    lopt_2);
  output if2_raw_valid_reg;
  input if0_raw_valid_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire if0_raw_valid_reg;
  wire if2_raw_valid_reg;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_carry_and_238 carry_and_i1
       (.if0_raw_valid_reg(if0_raw_valid_reg),
        .if2_raw_valid_reg(if2_raw_valid_reg),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_92
   (if2_piperun_masked_no2,
    if3_ibus_access_i_reg,
    if2_piperun_masked_no1,
    lopt,
    lopt_1);
  output if2_piperun_masked_no2;
  input if3_ibus_access_i_reg;
  input if2_piperun_masked_no1;
  input lopt;
  output lopt_1;

  wire if2_piperun_masked_no1;
  wire if2_piperun_masked_no2;
  wire if3_ibus_access_i_reg;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_and_234 carry_and_i1
       (.if2_piperun_masked_no1(if2_piperun_masked_no1),
        .if2_piperun_masked_no2(if2_piperun_masked_no2),
        .if3_ibus_access_i_reg(if3_ibus_access_i_reg),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_93
   (\Using_FPGA.Native ,
    if2_ibus_first_cycle_raw_reg,
    \Use_ILMB.if2_ilmb_issued_reg ,
    if3_dead_fetch_hold_reg,
    if2_piperun_masked_no2,
    \Use_ILMB.if2_ilmb_issued_reg_0 ,
    IWAIT,
    if3_allow_iready,
    if2_ilmb_issued,
    sync_reset,
    if3_dead_fetch_hold_reg_0,
    if3_dead_fetch_hold_reg_1,
    kill_fetch,
    if3_dead_fetch_hold_reg_2,
    if3_dead_fetch_hold_reg_3,
    lopt,
    lopt_1,
    lopt_2);
  output \Using_FPGA.Native ;
  output if2_ibus_first_cycle_raw_reg;
  output \Use_ILMB.if2_ilmb_issued_reg ;
  output if3_dead_fetch_hold_reg;
  input if2_piperun_masked_no2;
  input \Use_ILMB.if2_ilmb_issued_reg_0 ;
  input IWAIT;
  input if3_allow_iready;
  input if2_ilmb_issued;
  input sync_reset;
  input if3_dead_fetch_hold_reg_0;
  input if3_dead_fetch_hold_reg_1;
  input kill_fetch;
  input if3_dead_fetch_hold_reg_2;
  input if3_dead_fetch_hold_reg_3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire IWAIT;
  wire \Use_ILMB.if2_ilmb_issued_reg ;
  wire \Use_ILMB.if2_ilmb_issued_reg_0 ;
  wire \Using_FPGA.Native ;
  wire if2_ibus_first_cycle_raw_reg;
  wire if2_ilmb_issued;
  wire if2_piperun_masked_no2;
  wire if3_allow_iready;
  wire if3_dead_fetch_hold_reg;
  wire if3_dead_fetch_hold_reg_0;
  wire if3_dead_fetch_hold_reg_1;
  wire if3_dead_fetch_hold_reg_2;
  wire if3_dead_fetch_hold_reg_3;
  wire kill_fetch;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire sync_reset;

  microblaze_microblaze_0_0_carry_and_232 carry_and_i1
       (.IWAIT(IWAIT),
        .\Use_ILMB.if2_ilmb_issued_reg (\Use_ILMB.if2_ilmb_issued_reg ),
        .\Use_ILMB.if2_ilmb_issued_reg_0 (\Use_ILMB.if2_ilmb_issued_reg_0 ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .if2_ibus_first_cycle_raw_reg(if2_ibus_first_cycle_raw_reg),
        .if2_ilmb_issued(if2_ilmb_issued),
        .if2_piperun_masked_no2(if2_piperun_masked_no2),
        .if3_allow_iready(if3_allow_iready),
        .if3_dead_fetch_hold_reg(if3_dead_fetch_hold_reg),
        .if3_dead_fetch_hold_reg_0(if3_dead_fetch_hold_reg_0),
        .if3_dead_fetch_hold_reg_1(if3_dead_fetch_hold_reg_1),
        .if3_dead_fetch_hold_reg_2(if3_dead_fetch_hold_reg_2),
        .if3_dead_fetch_hold_reg_3(if3_dead_fetch_hold_reg_3),
        .kill_fetch(kill_fetch),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_95
   (if3_piperun_masked_no2,
    if3_piperun_masked_no1,
    lopt,
    lopt_1,
    lopt_2);
  output if3_piperun_masked_no2;
  input if3_piperun_masked_no1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire if3_piperun_masked_no1;
  wire if3_piperun_masked_no2;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_carry_and_228 carry_and_i1
       (.if3_piperun_masked_no1(if3_piperun_masked_no1),
        .if3_piperun_masked_no2(if3_piperun_masked_no2),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_96
   (if3_piperun_masked_no3,
    if4_ibus_access_i_reg,
    if3_piperun_masked_no2,
    lopt,
    lopt_1);
  output if3_piperun_masked_no3;
  input if4_ibus_access_i_reg;
  input if3_piperun_masked_no2;
  input lopt;
  output lopt_1;

  wire if3_piperun_masked_no2;
  wire if3_piperun_masked_no3;
  wire if4_ibus_access_i_reg;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_and_226 carry_and_i1
       (.if3_piperun_masked_no2(if3_piperun_masked_no2),
        .if3_piperun_masked_no3(if3_piperun_masked_no3),
        .if4_ibus_access_i_reg(if4_ibus_access_i_reg),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_and_n_bb_97
   (\Using_FPGA.Native ,
    \Use_Async_Reset.sync_reset_reg ,
    \Use_Async_Reset.sync_reset_reg_0 ,
    if4_dead_fetch_hold_reg,
    if3_piperun_masked_no3,
    \Use_ILMB.if3_iready_hold_reg ,
    sync_reset,
    \Use_ILMB.if3_potential_bubble_reg ,
    if3_potential_bubble,
    D,
    if3_ilmb_iready,
    if4_dead_fetch_hold_reg_0,
    if4_dead_fetch_hold_reg_1,
    kill_fetch,
    if4_dead_fetch_hold_reg_2,
    if4_dead_fetch_hold_reg_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Using_FPGA.Native ;
  output \Use_Async_Reset.sync_reset_reg ;
  output \Use_Async_Reset.sync_reset_reg_0 ;
  output if4_dead_fetch_hold_reg;
  input if3_piperun_masked_no3;
  input \Use_ILMB.if3_iready_hold_reg ;
  input sync_reset;
  input \Use_ILMB.if3_potential_bubble_reg ;
  input if3_potential_bubble;
  input [0:0]D;
  input if3_ilmb_iready;
  input if4_dead_fetch_hold_reg_0;
  input if4_dead_fetch_hold_reg_1;
  input kill_fetch;
  input if4_dead_fetch_hold_reg_2;
  input if4_dead_fetch_hold_reg_3;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Use_Async_Reset.sync_reset_reg_0 ;
  wire \Use_ILMB.if3_iready_hold_reg ;
  wire \Use_ILMB.if3_potential_bubble_reg ;
  wire \Using_FPGA.Native ;
  wire if3_ilmb_iready;
  wire if3_piperun_masked_no3;
  wire if3_potential_bubble;
  wire if4_dead_fetch_hold_reg;
  wire if4_dead_fetch_hold_reg_0;
  wire if4_dead_fetch_hold_reg_1;
  wire if4_dead_fetch_hold_reg_2;
  wire if4_dead_fetch_hold_reg_3;
  wire kill_fetch;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire sync_reset;

  microblaze_microblaze_0_0_carry_and_224 carry_and_i1
       (.D(D),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Use_Async_Reset.sync_reset_reg_0 (\Use_Async_Reset.sync_reset_reg_0 ),
        .\Use_ILMB.if3_iready_hold_reg (\Use_ILMB.if3_iready_hold_reg ),
        .\Use_ILMB.if3_potential_bubble_reg (\Use_ILMB.if3_potential_bubble_reg ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .if3_ilmb_iready(if3_ilmb_iready),
        .if3_piperun_masked_no3(if3_piperun_masked_no3),
        .if3_potential_bubble(if3_potential_bubble),
        .if4_dead_fetch_hold_reg(if4_dead_fetch_hold_reg),
        .if4_dead_fetch_hold_reg_0(if4_dead_fetch_hold_reg_0),
        .if4_dead_fetch_hold_reg_1(if4_dead_fetch_hold_reg_1),
        .if4_dead_fetch_hold_reg_2(if4_dead_fetch_hold_reg_2),
        .if4_dead_fetch_hold_reg_3(if4_dead_fetch_hold_reg_3),
        .kill_fetch(kill_fetch),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_bb
   (if4_push_instr_fetch,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    if4_sel_input);
  output if4_push_instr_fetch;
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input [0:0]if4_sel_input;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire if4_push_instr_fetch;
  wire [0:0]if4_sel_input;

  microblaze_microblaze_0_0_MB_AND2B1L carry_and_i1
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .if4_push_instr_fetch(if4_push_instr_fetch),
        .if4_sel_input(if4_sel_input));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_n_bb
   (And_OUT,
    of_read_ex_write_op_conflict,
    ex_complete_in_later_stage);
  output And_OUT;
  input of_read_ex_write_op_conflict;
  input ex_complete_in_later_stage;

  wire And_OUT;
  wire ex_complete_in_later_stage;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_MB_AND2B1L_336 carry_and_i1
       (.And_OUT(And_OUT),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_n_bb_291
   (of_m0_no_stall_conflict,
    of_read_m0_write_op_conflict,
    m0_complete_in_later_stage);
  output of_m0_no_stall_conflict;
  input of_read_m0_write_op_conflict;
  input m0_complete_in_later_stage;

  wire m0_complete_in_later_stage;
  wire of_m0_no_stall_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_MB_AND2B1L_328 carry_and_i1
       (.m0_complete_in_later_stage(m0_complete_in_later_stage),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_n_bb_295
   (of_m1_no_stall_conflict,
    of_read_m1_write_op_conflict,
    m1_m2_complete_in_later_stage);
  output of_m1_no_stall_conflict;
  input of_read_m1_write_op_conflict;
  input m1_m2_complete_in_later_stage;

  wire m1_m2_complete_in_later_stage;
  wire of_m1_no_stall_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_MB_AND2B1L_320 carry_and_i1
       (.m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_n_bb_299
   (of_m2_no_stall_conflict,
    of_read_m2_write_op_conflict,
    m2_complete_in_later_stage);
  output of_m2_no_stall_conflict;
  input of_read_m2_write_op_conflict;
  input m2_complete_in_later_stage;

  wire m2_complete_in_later_stage;
  wire of_m2_no_stall_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_MB_AND2B1L_312 carry_and_i1
       (.m2_complete_in_later_stage(m2_complete_in_later_stage),
        .of_m2_no_stall_conflict(of_m2_no_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_n_bb_389
   (And_OUT,
    of_read_ex_write_op_conflict,
    ex_complete_in_later_stage);
  output And_OUT;
  input of_read_ex_write_op_conflict;
  input ex_complete_in_later_stage;

  wire And_OUT;
  wire ex_complete_in_later_stage;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_MB_AND2B1L_439 carry_and_i1
       (.And_OUT(And_OUT),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_n_bb_393
   (of_m0_no_stall_conflict,
    of_read_m0_write_op_conflict,
    m0_complete_in_later_stage);
  output of_m0_no_stall_conflict;
  input of_read_m0_write_op_conflict;
  input m0_complete_in_later_stage;

  wire m0_complete_in_later_stage;
  wire of_m0_no_stall_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_MB_AND2B1L_431 carry_and_i1
       (.m0_complete_in_later_stage(m0_complete_in_later_stage),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_n_bb_397
   (of_m1_no_stall_conflict,
    of_read_m1_write_op_conflict,
    m1_m2_complete_in_later_stage);
  output of_m1_no_stall_conflict;
  input of_read_m1_write_op_conflict;
  input m1_m2_complete_in_later_stage;

  wire m1_m2_complete_in_later_stage;
  wire of_m1_no_stall_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_MB_AND2B1L_423 carry_and_i1
       (.m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_n_bb_401
   (m2_complete_in_later_stage_reg,
    of_read_m2_write_op_conflict,
    m2_complete_in_later_stage,
    of_m3_stall_conflict,
    of_m1_no_stall_conflict,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m2_stall_conflict);
  output m2_complete_in_later_stage_reg;
  input of_read_m2_write_op_conflict;
  input m2_complete_in_later_stage;
  input of_m3_stall_conflict;
  input of_m1_no_stall_conflict;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m2_stall_conflict;

  wire And_OUT;
  wire m2_complete_in_later_stage;
  wire m2_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_no_stall_conflict;
  wire of_m2_stall_conflict;
  wire of_m3_stall_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_MB_AND2B1L_415 carry_and_i1
       (.And_OUT(And_OUT),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .m2_complete_in_later_stage_reg(m2_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_m2_stall_conflict(of_m2_stall_conflict),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_n_bb_482
   (And_OUT,
    of_read_ex_write_op_conflict,
    ex_complete_in_later_stage);
  output And_OUT;
  input of_read_ex_write_op_conflict;
  input ex_complete_in_later_stage;

  wire And_OUT;
  wire ex_complete_in_later_stage;
  wire of_read_ex_write_op_conflict;

  microblaze_microblaze_0_0_MB_AND2B1L_532 carry_and_i1
       (.And_OUT(And_OUT),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_n_bb_486
   (of_m0_no_stall_conflict,
    of_read_m0_write_op_conflict,
    m0_complete_in_later_stage);
  output of_m0_no_stall_conflict;
  input of_read_m0_write_op_conflict;
  input m0_complete_in_later_stage;

  wire m0_complete_in_later_stage;
  wire of_m0_no_stall_conflict;
  wire of_read_m0_write_op_conflict;

  microblaze_microblaze_0_0_MB_AND2B1L_524 carry_and_i1
       (.m0_complete_in_later_stage(m0_complete_in_later_stage),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_n_bb_490
   (of_m1_no_stall_conflict,
    of_read_m1_write_op_conflict,
    m1_m2_complete_in_later_stage);
  output of_m1_no_stall_conflict;
  input of_read_m1_write_op_conflict;
  input m1_m2_complete_in_later_stage;

  wire m1_m2_complete_in_later_stage;
  wire of_m1_no_stall_conflict;
  wire of_read_m1_write_op_conflict;

  microblaze_microblaze_0_0_MB_AND2B1L_516 carry_and_i1
       (.m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n_bb" *) 
module microblaze_microblaze_0_0_carry_latch_and_n_bb_494
   (m2_complete_in_later_stage_reg,
    of_read_m2_write_op_conflict,
    m2_complete_in_later_stage,
    of_m3_stall_conflict,
    of_m1_no_stall_conflict,
    And_OUT,
    of_m0_no_stall_conflict,
    of_m2_stall_conflict);
  output m2_complete_in_later_stage_reg;
  input of_read_m2_write_op_conflict;
  input m2_complete_in_later_stage;
  input of_m3_stall_conflict;
  input of_m1_no_stall_conflict;
  input And_OUT;
  input of_m0_no_stall_conflict;
  input of_m2_stall_conflict;

  wire And_OUT;
  wire m2_complete_in_later_stage;
  wire m2_complete_in_later_stage_reg;
  wire of_m0_no_stall_conflict;
  wire of_m1_no_stall_conflict;
  wire of_m2_stall_conflict;
  wire of_m3_stall_conflict;
  wire of_read_m2_write_op_conflict;

  microblaze_microblaze_0_0_MB_AND2B1L_508 carry_and_i1
       (.And_OUT(And_OUT),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .m2_complete_in_later_stage_reg(m2_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_m2_stall_conflict(of_m2_stall_conflict),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or
   (if4_ready,
    S_0,
    if4_ready_tmp3,
    lopt,
    lopt_1);
  output if4_ready;
  input S_0;
  input if4_ready_tmp3;
  input lopt;
  output lopt_1;

  wire S_0;
  wire if4_ready;
  wire if4_ready_tmp3;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_43 MUXCY_I
       (.S_0(S_0),
        .if4_ready(if4_ready),
        .if4_ready_tmp3(if4_ready_tmp3),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_142
   (of_piperun_raw,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    ex_dead_valid_hold,
    lopt,
    lopt_1,
    lopt_2);
  output of_piperun_raw;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input ex_dead_valid_hold;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire ex_dead_valid_hold;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire of_piperun_raw;

  microblaze_microblaze_0_0_MB_MUXCY_143 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .of_piperun_raw(of_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_166
   (m3_piperun_raw,
    m3_piperun_data_raw,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output m3_piperun_raw;
  input m3_piperun_data_raw;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m3_piperun_data_raw;
  wire m3_piperun_raw;

  microblaze_microblaze_0_0_MB_MUXCY_167 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m3_piperun_data_raw(m3_piperun_data_raw),
        .m3_piperun_raw(m3_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_176
   (m3_piperun_data_raw,
    m3_databus_ready,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output m3_piperun_data_raw;
  input m3_databus_ready;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m3_databus_ready;
  wire m3_piperun_data_raw;

  microblaze_microblaze_0_0_MB_MUXCY_177 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m3_databus_ready(m3_databus_ready),
        .m3_piperun_data_raw(m3_piperun_data_raw));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_178
   (m2_piperun_raw,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    m3_dead_valid_hold,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m2_piperun_raw;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input m3_dead_valid_hold;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m2_piperun_raw;
  wire m3_dead_valid_hold;

  microblaze_microblaze_0_0_MB_MUXCY_179 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m2_piperun_raw(m2_piperun_raw),
        .m3_dead_valid_hold(m3_dead_valid_hold));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_192
   (m1_piperun_raw,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    m2_dead_valid_hold,
    lopt,
    lopt_1,
    lopt_2);
  output m1_piperun_raw;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input m2_dead_valid_hold;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m1_piperun_raw;
  wire m2_dead_valid_hold;

  microblaze_microblaze_0_0_MB_MUXCY_193 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m1_piperun_raw(m1_piperun_raw),
        .m2_dead_valid_hold(m2_dead_valid_hold));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_200
   (m0_piperun_raw,
    \Using_FPGA.Native ,
    m1_dead_valid_hold,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output m0_piperun_raw;
  input [0:0]\Using_FPGA.Native ;
  input m1_dead_valid_hold;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m0_piperun_raw;
  wire m1_dead_valid_hold;

  microblaze_microblaze_0_0_MB_MUXCY_201 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m0_piperun_raw(m0_piperun_raw),
        .m1_dead_valid_hold(m1_dead_valid_hold));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_212
   (\Serial_Dbg_Intf.if_debug_ready_i_reg ,
    \Use_ILMB.if4_ILMB_Data_Strobe_i_reg ,
    if4_piperun_masked_no4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input \Use_ILMB.if4_ILMB_Data_Strobe_i_reg ;
  input if4_piperun_masked_no4;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire \Use_ILMB.if4_ILMB_Data_Strobe_i_reg ;
  wire if4_piperun_masked_no4;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_MB_MUXCY_213 MUXCY_I
       (.\Serial_Dbg_Intf.if_debug_ready_i_reg (\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .\Use_ILMB.if4_ILMB_Data_Strobe_i_reg (\Use_ILMB.if4_ILMB_Data_Strobe_i_reg ),
        .if4_piperun_masked_no4(if4_piperun_masked_no4),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_214
   (if4_piperun_masked_no2,
    if4_piperun_masked_no1,
    lopt,
    lopt_1);
  output if4_piperun_masked_no2;
  input if4_piperun_masked_no1;
  input lopt;
  output lopt_1;

  wire if4_piperun_masked_no1;
  wire if4_piperun_masked_no2;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_215 MUXCY_I
       (.if4_piperun_masked_no1(if4_piperun_masked_no1),
        .if4_piperun_masked_no2(if4_piperun_masked_no2),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_216
   (if4_piperun_masked_no1,
    if4_ready,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output if4_piperun_masked_no1;
  input if4_ready;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire if4_piperun_masked_no1;
  wire if4_ready;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;

  microblaze_microblaze_0_0_MB_MUXCY_217 MUXCY_I
       (.if4_piperun_masked_no1(if4_piperun_masked_no1),
        .if4_ready(if4_ready),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_222
   (if3_piperun_masked_no1,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output if3_piperun_masked_no1;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire if3_piperun_masked_no1;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_223 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .if3_piperun_masked_no1(if3_piperun_masked_no1),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_230
   (if2_piperun_masked_no1,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output if2_piperun_masked_no1;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire if2_piperun_masked_no1;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_231 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .if2_piperun_masked_no1(if2_piperun_masked_no1),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_236
   (if2_raw_valid_reg,
    if2_dead_fetch_hold_reg,
    if2_dead_fetch_hold_reg_0,
    if2_dead_fetch_hold_reg_1,
    sync_reset,
    if2_dead_fetch_hold_reg_2,
    if2_dead_fetch_hold_reg_3,
    kill_fetch_mmu,
    if2_dead_fetch_hold_reg_4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output if2_raw_valid_reg;
  output if2_dead_fetch_hold_reg;
  input if2_dead_fetch_hold_reg_0;
  input if2_dead_fetch_hold_reg_1;
  input sync_reset;
  input if2_dead_fetch_hold_reg_2;
  input if2_dead_fetch_hold_reg_3;
  input kill_fetch_mmu;
  input if2_dead_fetch_hold_reg_4;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire if2_dead_fetch_hold_reg;
  wire if2_dead_fetch_hold_reg_0;
  wire if2_dead_fetch_hold_reg_1;
  wire if2_dead_fetch_hold_reg_2;
  wire if2_dead_fetch_hold_reg_3;
  wire if2_dead_fetch_hold_reg_4;
  wire if2_raw_valid_reg;
  wire kill_fetch_mmu;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_MUXCY_237 MUXCY_I
       (.if2_dead_fetch_hold_reg(if2_dead_fetch_hold_reg),
        .if2_dead_fetch_hold_reg_0(if2_dead_fetch_hold_reg_0),
        .if2_dead_fetch_hold_reg_1(if2_dead_fetch_hold_reg_1),
        .if2_dead_fetch_hold_reg_2(if2_dead_fetch_hold_reg_2),
        .if2_dead_fetch_hold_reg_3(if2_dead_fetch_hold_reg_3),
        .if2_dead_fetch_hold_reg_4(if2_dead_fetch_hold_reg_4),
        .if2_raw_valid_reg(if2_raw_valid_reg),
        .kill_fetch_mmu(kill_fetch_mmu),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_240
   (ex_piperun_raw,
    in0,
    \Using_FPGA.Native ,
    m0_dead_valid_hold,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_raw;
  input in0;
  input \Using_FPGA.Native ;
  input m0_dead_valid_hold;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire ex_piperun_raw;
  wire in0;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m0_dead_valid_hold;

  microblaze_microblaze_0_0_MB_MUXCY_241 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .ex_piperun_raw(ex_piperun_raw),
        .in0(in0),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m0_dead_valid_hold(m0_dead_valid_hold));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_256
   (bp1_piperun_masked_no1,
    \if0_PC_i_reg[0] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output bp1_piperun_masked_no1;
  input \if0_PC_i_reg[0] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire bp1_piperun_masked_no1;
  wire \if0_PC_i_reg[0] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_MB_MUXCY_257 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .bp1_piperun_masked_no1(bp1_piperun_masked_no1),
        .\if0_PC_i_reg[0] (\if0_PC_i_reg[0] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_260
   (bp0_piperun_masked_no1,
    \bp1_PC_i_reg[0] ,
    E,
    lopt,
    lopt_1,
    lopt_2);
  output bp0_piperun_masked_no1;
  input \bp1_PC_i_reg[0] ;
  input [0:0]E;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [0:0]E;
  wire bp0_piperun_masked_no1;
  wire \bp1_PC_i_reg[0] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_MB_MUXCY_261 MUXCY_I
       (.E(E),
        .bp0_piperun_masked_no1(bp0_piperun_masked_no1),
        .\bp1_PC_i_reg[0] (\bp1_PC_i_reg[0] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_342
   (of_m3_use_conflict,
    S_4,
    \Using_FPGA.Native ,
    lopt,
    lopt_1);
  output of_m3_use_conflict;
  input S_4;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;

  wire S_4;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m3_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_343 MUXCY_I
       (.S_4(S_4),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_use_conflict(of_m3_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_348
   (of_m2_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m2_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m2_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_349 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_use_conflict(of_m2_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_354
   (of_m1_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m1_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m1_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_355 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_use_conflict(of_m1_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_360
   (of_m0_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m0_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m0_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_361 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_use_conflict(of_m0_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_366
   (of_ex_use_conflict,
    \Using_FPGA.Native ,
    part_c_and_b,
    lopt,
    lopt_1);
  output of_ex_use_conflict;
  input \Using_FPGA.Native ;
  input part_c_and_b;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_ex_use_conflict;
  wire part_c_and_b;

  microblaze_microblaze_0_0_MB_MUXCY_367 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_use_conflict(of_ex_use_conflict),
        .part_c_and_b(part_c_and_b));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_44
   (if4_ready_tmp2,
    S,
    if4_ready_tmp1,
    lopt,
    lopt_1);
  output if4_ready_tmp2;
  input S;
  input if4_ready_tmp1;
  input lopt;
  output lopt_1;

  wire S;
  wire if4_ready_tmp1;
  wire if4_ready_tmp2;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_45 MUXCY_I
       (.S(S),
        .if4_ready_tmp1(if4_ready_tmp1),
        .if4_ready_tmp2(if4_ready_tmp2),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_447
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_448 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_453
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_454 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_459
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_460 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_46
   (if4_ready_tmp1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output if4_ready_tmp1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire if4_ready_tmp1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_MB_MUXCY_47 MUXCY_I
       (.if4_ready_tmp1(if4_ready_tmp1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_465
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_MB_MUXCY_466 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_471
   (part_c_or_not_b,
    \Using_FPGA.Native ,
    part_c,
    lopt,
    lopt_1);
  output part_c_or_not_b;
  input \Using_FPGA.Native ;
  input part_c;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire part_c;
  wire part_c_or_not_b;

  microblaze_microblaze_0_0_MB_MUXCY_472 MUXCY_I
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .part_c(part_c),
        .part_c_or_not_b(part_c_or_not_b));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_51
   (m3_databus_ready,
    S_0,
    m3_ready_tmp,
    lopt,
    lopt_1);
  output m3_databus_ready;
  input S_0;
  input m3_ready_tmp;
  input lopt;
  output lopt_1;

  wire S_0;
  wire lopt;
  wire lopt_1;
  wire m3_databus_ready;
  wire m3_ready_tmp;

  microblaze_microblaze_0_0_MB_MUXCY_52 MUXCY_I
       (.S_0(S_0),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m3_databus_ready(m3_databus_ready),
        .m3_ready_tmp(m3_ready_tmp));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_53
   (m3_ready_tmp,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m3_ready_tmp;
  input S;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m3_ready_tmp;

  microblaze_microblaze_0_0_MB_MUXCY_54 MUXCY_I
       (.S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m3_ready_tmp(m3_ready_tmp));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_568
   (\Using_FPGA.Native ,
    bp1_dead_fetch_hold_reg,
    if2_ibus_access_raw0,
    bp0_dead_fetch_hold_reg,
    kill_fetch,
    if2_ibus_first_cycle_raw_reg,
    if2_ibus_first_cycle_raw_reg_0,
    if2_ibus_first_cycle_raw_reg_1,
    sync_reset,
    bp0_dead_fetch_hold,
    DI,
    bp0_dead_fetch_hold_reg_0,
    lopt,
    lopt_1);
  output \Using_FPGA.Native ;
  output bp1_dead_fetch_hold_reg;
  output if2_ibus_access_raw0;
  output bp0_dead_fetch_hold_reg;
  input kill_fetch;
  input if2_ibus_first_cycle_raw_reg;
  input if2_ibus_first_cycle_raw_reg_0;
  input if2_ibus_first_cycle_raw_reg_1;
  input sync_reset;
  input bp0_dead_fetch_hold;
  input [0:0]DI;
  input bp0_dead_fetch_hold_reg_0;
  input lopt;
  output lopt_1;

  wire [0:0]DI;
  wire \Using_FPGA.Native ;
  wire bp0_dead_fetch_hold;
  wire bp0_dead_fetch_hold_reg;
  wire bp0_dead_fetch_hold_reg_0;
  wire bp1_dead_fetch_hold_reg;
  wire if2_ibus_access_raw0;
  wire if2_ibus_first_cycle_raw_reg;
  wire if2_ibus_first_cycle_raw_reg_0;
  wire if2_ibus_first_cycle_raw_reg_1;
  wire kill_fetch;
  wire lopt;
  wire lopt_1;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_MUXCY_569 MUXCY_I
       (.DI(DI),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .bp0_dead_fetch_hold(bp0_dead_fetch_hold),
        .bp0_dead_fetch_hold_reg(bp0_dead_fetch_hold_reg),
        .bp0_dead_fetch_hold_reg_0(bp0_dead_fetch_hold_reg_0),
        .bp1_dead_fetch_hold_reg(bp1_dead_fetch_hold_reg),
        .if2_ibus_access_raw0(if2_ibus_access_raw0),
        .if2_ibus_first_cycle_raw_reg(if2_ibus_first_cycle_raw_reg),
        .if2_ibus_first_cycle_raw_reg_0(if2_ibus_first_cycle_raw_reg_0),
        .if2_ibus_first_cycle_raw_reg_1(if2_ibus_first_cycle_raw_reg_1),
        .kill_fetch(kill_fetch),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module microblaze_microblaze_0_0_carry_or_570
   (kill_fetch,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    if2_raw_valid_reg,
    ex_jump,
    ex_gpr_write_addr,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    ex_dead_valid_hold,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    if2_dead_fetch_hold_reg,
    if2_dead_fetch_hold_reg_0,
    lopt,
    lopt_1,
    lopt_2);
  output kill_fetch;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  output if2_raw_valid_reg;
  input ex_jump;
  input [0:0]ex_gpr_write_addr;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input ex_dead_valid_hold;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input if2_dead_fetch_hold_reg;
  input if2_dead_fetch_hold_reg_0;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire ex_dead_valid_hold;
  wire [0:0]ex_gpr_write_addr;
  wire ex_jump;
  wire if2_dead_fetch_hold_reg;
  wire if2_dead_fetch_hold_reg_0;
  wire if2_raw_valid_reg;
  wire kill_fetch;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_MB_MUXCY_571 MUXCY_I
       (.\Serial_Dbg_Intf.if_debug_ready_i_reg (\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_4 ),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_gpr_write_addr(ex_gpr_write_addr),
        .ex_jump(ex_jump),
        .if2_dead_fetch_hold_reg(if2_dead_fetch_hold_reg),
        .if2_dead_fetch_hold_reg_0(if2_dead_fetch_hold_reg_0),
        .if2_raw_valid_reg(if2_raw_valid_reg),
        .kill_fetch(kill_fetch),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb
   (if4_ready_tmp1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output if4_ready_tmp1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire if4_ready_tmp1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_carry_or_46 carry_or_i1
       (.if4_ready_tmp1(if4_ready_tmp1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_101
   (if4_piperun_masked_no1,
    if4_ready,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output if4_piperun_masked_no1;
  input if4_ready;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire if4_piperun_masked_no1;
  wire if4_ready;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;

  microblaze_microblaze_0_0_carry_or_216 carry_or_i1
       (.if4_piperun_masked_no1(if4_piperun_masked_no1),
        .if4_ready(if4_ready),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_102
   (if4_piperun_masked_no2,
    if4_piperun_masked_no1,
    lopt,
    lopt_1);
  output if4_piperun_masked_no2;
  input if4_piperun_masked_no1;
  input lopt;
  output lopt_1;

  wire if4_piperun_masked_no1;
  wire if4_piperun_masked_no2;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_or_214 carry_or_i1
       (.if4_piperun_masked_no1(if4_piperun_masked_no1),
        .if4_piperun_masked_no2(if4_piperun_masked_no2),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_103
   (\Serial_Dbg_Intf.if_debug_ready_i_reg ,
    \Use_ILMB.if4_ILMB_Data_Strobe_i_reg ,
    if4_piperun_masked_no4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  input \Use_ILMB.if4_ILMB_Data_Strobe_i_reg ;
  input if4_piperun_masked_no4;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire \Use_ILMB.if4_ILMB_Data_Strobe_i_reg ;
  wire if4_piperun_masked_no4;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  microblaze_microblaze_0_0_carry_or_212 carry_or_i1
       (.\Serial_Dbg_Intf.if_debug_ready_i_reg (\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .\Use_ILMB.if4_ILMB_Data_Strobe_i_reg (\Use_ILMB.if4_ILMB_Data_Strobe_i_reg ),
        .if4_piperun_masked_no4(if4_piperun_masked_no4),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_274
   (of_ex_use_conflict,
    \Using_FPGA.Native ,
    part_c_and_b,
    lopt,
    lopt_1);
  output of_ex_use_conflict;
  input \Using_FPGA.Native ;
  input part_c_and_b;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_ex_use_conflict;
  wire part_c_and_b;

  microblaze_microblaze_0_0_carry_or_366 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_use_conflict(of_ex_use_conflict),
        .part_c_and_b(part_c_and_b));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_277
   (of_m0_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m0_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m0_use_conflict;

  microblaze_microblaze_0_0_carry_or_360 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_use_conflict(of_m0_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_280
   (of_m1_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m1_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m1_use_conflict;

  microblaze_microblaze_0_0_carry_or_354 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_use_conflict(of_m1_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_283
   (of_m2_use_conflict,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output of_m2_use_conflict;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire of_m2_use_conflict;

  microblaze_microblaze_0_0_carry_or_348 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_use_conflict(of_m2_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_286
   (of_m3_use_conflict,
    S_4,
    \Using_FPGA.Native ,
    lopt,
    lopt_1);
  output of_m3_use_conflict;
  input S_4;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;

  wire S_4;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire of_m3_use_conflict;

  microblaze_microblaze_0_0_carry_or_342 carry_or_i1
       (.S_4(S_4),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_use_conflict(of_m3_use_conflict));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_41
   (if4_ready_tmp2,
    S,
    if4_ready_tmp1,
    lopt,
    lopt_1);
  output if4_ready_tmp2;
  input S;
  input if4_ready_tmp1;
  input lopt;
  output lopt_1;

  wire S;
  wire if4_ready_tmp1;
  wire if4_ready_tmp2;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_or_44 carry_or_i1
       (.S(S),
        .if4_ready_tmp1(if4_ready_tmp1),
        .if4_ready_tmp2(if4_ready_tmp2),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_42
   (if4_ready,
    S_0,
    if4_ready_tmp3,
    lopt,
    lopt_1);
  output if4_ready;
  input S_0;
  input if4_ready_tmp3;
  input lopt;
  output lopt_1;

  wire S_0;
  wire if4_ready;
  wire if4_ready_tmp3;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_or carry_or_i1
       (.S_0(S_0),
        .if4_ready(if4_ready),
        .if4_ready_tmp3(if4_ready_tmp3),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_49
   (m3_ready_tmp,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m3_ready_tmp;
  input S;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m3_ready_tmp;

  microblaze_microblaze_0_0_carry_or_53 carry_or_i1
       (.S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m3_ready_tmp(m3_ready_tmp));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_50
   (m3_databus_ready,
    S_0,
    m3_ready_tmp,
    lopt,
    lopt_1);
  output m3_databus_ready;
  input S_0;
  input m3_ready_tmp;
  input lopt;
  output lopt_1;

  wire S_0;
  wire lopt;
  wire lopt_1;
  wire m3_databus_ready;
  wire m3_ready_tmp;

  microblaze_microblaze_0_0_carry_or_51 carry_or_i1
       (.S_0(S_0),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .m3_databus_ready(m3_databus_ready),
        .m3_ready_tmp(m3_ready_tmp));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_58
   (kill_fetch,
    \Serial_Dbg_Intf.if_debug_ready_i_reg ,
    if2_raw_valid_reg,
    ex_jump,
    ex_gpr_write_addr,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    ex_dead_valid_hold,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    if2_dead_fetch_hold_reg,
    if2_dead_fetch_hold_reg_0,
    lopt,
    lopt_1,
    lopt_2);
  output kill_fetch;
  output \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  output if2_raw_valid_reg;
  input ex_jump;
  input [0:0]ex_gpr_write_addr;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input ex_dead_valid_hold;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input if2_dead_fetch_hold_reg;
  input if2_dead_fetch_hold_reg_0;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \Serial_Dbg_Intf.if_debug_ready_i_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire ex_dead_valid_hold;
  wire [0:0]ex_gpr_write_addr;
  wire ex_jump;
  wire if2_dead_fetch_hold_reg;
  wire if2_dead_fetch_hold_reg_0;
  wire if2_raw_valid_reg;
  wire kill_fetch;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_carry_or_570 carry_or_i1
       (.\Serial_Dbg_Intf.if_debug_ready_i_reg (\Serial_Dbg_Intf.if_debug_ready_i_reg ),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_4 ),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_gpr_write_addr(ex_gpr_write_addr),
        .ex_jump(ex_jump),
        .if2_dead_fetch_hold_reg(if2_dead_fetch_hold_reg),
        .if2_dead_fetch_hold_reg_0(if2_dead_fetch_hold_reg_0),
        .if2_raw_valid_reg(if2_raw_valid_reg),
        .kill_fetch(kill_fetch),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_or_bb" *) 
module microblaze_microblaze_0_0_carry_or_bb_59
   (\Using_FPGA.Native ,
    bp1_dead_fetch_hold_reg,
    if2_ibus_access_raw0,
    bp0_dead_fetch_hold_reg,
    kill_fetch,
    if2_ibus_first_cycle_raw_reg,
    if2_ibus_first_cycle_raw_reg_0,
    if2_ibus_first_cycle_raw_reg_1,
    sync_reset,
    bp0_dead_fetch_hold,
    DI,
    bp0_dead_fetch_hold_reg_0,
    lopt,
    lopt_1);
  output \Using_FPGA.Native ;
  output bp1_dead_fetch_hold_reg;
  output if2_ibus_access_raw0;
  output bp0_dead_fetch_hold_reg;
  input kill_fetch;
  input if2_ibus_first_cycle_raw_reg;
  input if2_ibus_first_cycle_raw_reg_0;
  input if2_ibus_first_cycle_raw_reg_1;
  input sync_reset;
  input bp0_dead_fetch_hold;
  input [0:0]DI;
  input bp0_dead_fetch_hold_reg_0;
  input lopt;
  output lopt_1;

  wire [0:0]DI;
  wire \Using_FPGA.Native ;
  wire bp0_dead_fetch_hold;
  wire bp0_dead_fetch_hold_reg;
  wire bp0_dead_fetch_hold_reg_0;
  wire bp1_dead_fetch_hold_reg;
  wire if2_ibus_access_raw0;
  wire if2_ibus_first_cycle_raw_reg;
  wire if2_ibus_first_cycle_raw_reg_0;
  wire if2_ibus_first_cycle_raw_reg_1;
  wire kill_fetch;
  wire lopt;
  wire lopt_1;
  wire sync_reset;

  microblaze_microblaze_0_0_carry_or_568 carry_or_i1
       (.DI(DI),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .bp0_dead_fetch_hold(bp0_dead_fetch_hold),
        .bp0_dead_fetch_hold_reg(bp0_dead_fetch_hold_reg),
        .bp0_dead_fetch_hold_reg_0(bp0_dead_fetch_hold_reg_0),
        .bp1_dead_fetch_hold_reg(bp1_dead_fetch_hold_reg),
        .if2_ibus_access_raw0(if2_ibus_access_raw0),
        .if2_ibus_first_cycle_raw_reg(if2_ibus_first_cycle_raw_reg),
        .if2_ibus_first_cycle_raw_reg_0(if2_ibus_first_cycle_raw_reg_0),
        .if2_ibus_first_cycle_raw_reg_1(if2_ibus_first_cycle_raw_reg_1),
        .kill_fetch(kill_fetch),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb
   (bp0_piperun_masked_no1,
    \bp1_PC_i_reg[0] ,
    E,
    lopt,
    lopt_1,
    lopt_2);
  output bp0_piperun_masked_no1;
  input \bp1_PC_i_reg[0] ;
  input [0:0]E;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [0:0]E;
  wire bp0_piperun_masked_no1;
  wire \bp1_PC_i_reg[0] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_carry_or_260 carry_or_i1
       (.E(E),
        .bp0_piperun_masked_no1(bp0_piperun_masked_no1),
        .\bp1_PC_i_reg[0] (\bp1_PC_i_reg[0] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_109
   (m0_piperun_raw,
    \Using_FPGA.Native ,
    m1_dead_valid_hold,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output m0_piperun_raw;
  input [0:0]\Using_FPGA.Native ;
  input m1_dead_valid_hold;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m0_piperun_raw;
  wire m1_dead_valid_hold;

  microblaze_microblaze_0_0_carry_or_200 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m0_piperun_raw(m0_piperun_raw),
        .m1_dead_valid_hold(m1_dead_valid_hold));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_113
   (m1_piperun_raw,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    m2_dead_valid_hold,
    lopt,
    lopt_1,
    lopt_2);
  output m1_piperun_raw;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input m2_dead_valid_hold;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m1_piperun_raw;
  wire m2_dead_valid_hold;

  microblaze_microblaze_0_0_carry_or_192 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m1_piperun_raw(m1_piperun_raw),
        .m2_dead_valid_hold(m2_dead_valid_hold));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_120
   (m2_piperun_raw,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    m3_dead_valid_hold,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output m2_piperun_raw;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input m3_dead_valid_hold;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire m2_piperun_raw;
  wire m3_dead_valid_hold;

  microblaze_microblaze_0_0_carry_or_178 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .m2_piperun_raw(m2_piperun_raw),
        .m3_dead_valid_hold(m3_dead_valid_hold));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_121
   (m3_piperun_data_raw,
    m3_databus_ready,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output m3_piperun_data_raw;
  input m3_databus_ready;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m3_databus_ready;
  wire m3_piperun_data_raw;

  microblaze_microblaze_0_0_carry_or_176 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m3_databus_ready(m3_databus_ready),
        .m3_piperun_data_raw(m3_piperun_data_raw));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_126
   (m3_piperun_raw,
    m3_piperun_data_raw,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output m3_piperun_raw;
  input m3_piperun_data_raw;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m3_piperun_data_raw;
  wire m3_piperun_raw;

  microblaze_microblaze_0_0_carry_or_166 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m3_piperun_data_raw(m3_piperun_data_raw),
        .m3_piperun_raw(m3_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_138
   (of_piperun_raw,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    ex_dead_valid_hold,
    lopt,
    lopt_1,
    lopt_2);
  output of_piperun_raw;
  input [0:0]\Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input ex_dead_valid_hold;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [0:0]\Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire ex_dead_valid_hold;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire of_piperun_raw;

  microblaze_microblaze_0_0_carry_or_142 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_1 ),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .of_piperun_raw(of_piperun_raw));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_373
   (part_c_or_not_b,
    \Using_FPGA.Native ,
    part_c,
    lopt,
    lopt_1);
  output part_c_or_not_b;
  input \Using_FPGA.Native ;
  input part_c;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire part_c;
  wire part_c_or_not_b;

  microblaze_microblaze_0_0_carry_or_471 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .part_c(part_c),
        .part_c_or_not_b(part_c_or_not_b));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_376
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_or_465 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_379
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_or_459 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_382
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_or_453 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_385
   (\cur_data_i_reg[26] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output \cur_data_i_reg[26] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \cur_data_i_reg[26] ;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_or_447 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .\cur_data_i_reg[26] (\cur_data_i_reg[26] ),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_82
   (bp1_piperun_masked_no1,
    \if0_PC_i_reg[0] ,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output bp1_piperun_masked_no1;
  input \if0_PC_i_reg[0] ;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire bp1_piperun_masked_no1;
  wire \if0_PC_i_reg[0] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  microblaze_microblaze_0_0_carry_or_256 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .bp1_piperun_masked_no1(bp1_piperun_masked_no1),
        .\if0_PC_i_reg[0] (\if0_PC_i_reg[0] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_89
   (ex_piperun_raw,
    in0,
    \Using_FPGA.Native ,
    m0_dead_valid_hold,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output ex_piperun_raw;
  input in0;
  input \Using_FPGA.Native ;
  input m0_dead_valid_hold;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire ex_piperun_raw;
  wire in0;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire m0_dead_valid_hold;

  microblaze_microblaze_0_0_carry_or_240 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .ex_piperun_raw(ex_piperun_raw),
        .in0(in0),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .m0_dead_valid_hold(m0_dead_valid_hold));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_91
   (if2_raw_valid_reg,
    if2_dead_fetch_hold_reg,
    if2_dead_fetch_hold_reg_0,
    if2_dead_fetch_hold_reg_1,
    sync_reset,
    if2_dead_fetch_hold_reg_2,
    if2_dead_fetch_hold_reg_3,
    kill_fetch_mmu,
    if2_dead_fetch_hold_reg_4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output if2_raw_valid_reg;
  output if2_dead_fetch_hold_reg;
  input if2_dead_fetch_hold_reg_0;
  input if2_dead_fetch_hold_reg_1;
  input sync_reset;
  input if2_dead_fetch_hold_reg_2;
  input if2_dead_fetch_hold_reg_3;
  input kill_fetch_mmu;
  input if2_dead_fetch_hold_reg_4;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire if2_dead_fetch_hold_reg;
  wire if2_dead_fetch_hold_reg_0;
  wire if2_dead_fetch_hold_reg_1;
  wire if2_dead_fetch_hold_reg_2;
  wire if2_dead_fetch_hold_reg_3;
  wire if2_dead_fetch_hold_reg_4;
  wire if2_raw_valid_reg;
  wire kill_fetch_mmu;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire sync_reset;

  microblaze_microblaze_0_0_carry_or_236 carry_or_i1
       (.if2_dead_fetch_hold_reg(if2_dead_fetch_hold_reg),
        .if2_dead_fetch_hold_reg_0(if2_dead_fetch_hold_reg_0),
        .if2_dead_fetch_hold_reg_1(if2_dead_fetch_hold_reg_1),
        .if2_dead_fetch_hold_reg_2(if2_dead_fetch_hold_reg_2),
        .if2_dead_fetch_hold_reg_3(if2_dead_fetch_hold_reg_3),
        .if2_dead_fetch_hold_reg_4(if2_dead_fetch_hold_reg_4),
        .if2_raw_valid_reg(if2_raw_valid_reg),
        .kill_fetch_mmu(kill_fetch_mmu),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_94
   (if2_piperun_masked_no1,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output if2_piperun_masked_no1;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire if2_piperun_masked_no1;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_or_230 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .if2_piperun_masked_no1(if2_piperun_masked_no1),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_or_n_bb" *) 
module microblaze_microblaze_0_0_carry_or_n_bb_98
   (if3_piperun_masked_no1,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    lopt,
    lopt_1);
  output if3_piperun_masked_no1;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input lopt;
  output lopt_1;

  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire if3_piperun_masked_no1;
  wire lopt;
  wire lopt_1;

  microblaze_microblaze_0_0_carry_or_222 carry_or_i1
       (.\Using_FPGA.Native (\Using_FPGA.Native ),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native_0 ),
        .if3_piperun_masked_no1(if3_piperun_masked_no1),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator
   (of_m3_addr_conflict,
    S_3,
    of_m3_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m3_addr_conflict;
  input S_3;
  input of_m3_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_3;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m3_addr_conflict;
  wire of_m3_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_308 \Comp_Carry_Chain[0].MUXCY_I 
       (.S_3(S_3),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_use_conflict(of_m3_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_309 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .of_m3_addr_conflict(of_m3_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_315
   (of_m2_addr_conflict,
    S_2,
    of_m2_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m2_addr_conflict;
  input S_2;
  input of_m2_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_2;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m2_addr_conflict;
  wire of_m2_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_316 \Comp_Carry_Chain[0].MUXCY_I 
       (.S_2(S_2),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_use_conflict(of_m2_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_317 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .of_m2_addr_conflict(of_m2_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_323
   (of_m1_addr_conflict,
    S_1,
    of_m1_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m1_addr_conflict;
  input S_1;
  input of_m1_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_1;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m1_addr_conflict;
  wire of_m1_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_324 \Comp_Carry_Chain[0].MUXCY_I 
       (.S_1(S_1),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_use_conflict(of_m1_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_325 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .of_m1_addr_conflict(of_m1_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_331
   (of_m0_addr_conflict,
    S_0,
    of_m0_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m0_addr_conflict;
  input S_0;
  input of_m0_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_0;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m0_addr_conflict;
  wire of_m0_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_332 \Comp_Carry_Chain[0].MUXCY_I 
       (.S_0(S_0),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_use_conflict(of_m0_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_333 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .of_m0_addr_conflict(of_m0_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_339
   (of_ex_addr_conflict,
    S,
    of_ex_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_ex_addr_conflict;
  input S;
  input of_ex_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_ex_addr_conflict;
  wire of_ex_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_340 \Comp_Carry_Chain[0].MUXCY_I 
       (.S(S),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_use_conflict(of_ex_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_341 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .of_ex_addr_conflict(of_ex_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_410
   (of_m3_addr_conflict,
    S_3,
    of_m3_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m3_addr_conflict;
  input S_3;
  input of_m3_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_3;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m3_addr_conflict;
  wire of_m3_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_411 \Comp_Carry_Chain[0].MUXCY_I 
       (.S_3(S_3),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_use_conflict(of_m3_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_412 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .of_m3_addr_conflict(of_m3_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_418
   (of_m2_addr_conflict,
    S_2,
    of_m2_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m2_addr_conflict;
  input S_2;
  input of_m2_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_2;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m2_addr_conflict;
  wire of_m2_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_419 \Comp_Carry_Chain[0].MUXCY_I 
       (.S_2(S_2),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_use_conflict(of_m2_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_420 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .of_m2_addr_conflict(of_m2_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_426
   (of_m1_addr_conflict,
    S_1,
    of_m1_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m1_addr_conflict;
  input S_1;
  input of_m1_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_1;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m1_addr_conflict;
  wire of_m1_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_427 \Comp_Carry_Chain[0].MUXCY_I 
       (.S_1(S_1),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_use_conflict(of_m1_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_428 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .of_m1_addr_conflict(of_m1_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_434
   (of_m0_addr_conflict,
    S_0,
    of_m0_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m0_addr_conflict;
  input S_0;
  input of_m0_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_0;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m0_addr_conflict;
  wire of_m0_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_435 \Comp_Carry_Chain[0].MUXCY_I 
       (.S_0(S_0),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_use_conflict(of_m0_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_436 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .of_m0_addr_conflict(of_m0_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_442
   (of_ex_addr_conflict,
    S,
    of_ex_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_ex_addr_conflict;
  input S;
  input of_ex_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_ex_addr_conflict;
  wire of_ex_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_443 \Comp_Carry_Chain[0].MUXCY_I 
       (.S(S),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_use_conflict(of_ex_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_444 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .of_ex_addr_conflict(of_ex_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_503
   (of_m3_addr_conflict,
    S_3,
    of_m3_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output of_m3_addr_conflict;
  input S_3;
  input of_m3_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;

  wire S_3;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire of_m3_addr_conflict;
  wire of_m3_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_504 \Comp_Carry_Chain[0].MUXCY_I 
       (.S_3(S_3),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m3_use_conflict(of_m3_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_505 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .of_m3_addr_conflict(of_m3_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_511
   (of_m2_addr_conflict,
    S_2,
    of_m2_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output of_m2_addr_conflict;
  input S_2;
  input of_m2_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;

  wire S_2;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire of_m2_addr_conflict;
  wire of_m2_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_512 \Comp_Carry_Chain[0].MUXCY_I 
       (.S_2(S_2),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m2_use_conflict(of_m2_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_513 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .of_m2_addr_conflict(of_m2_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_519
   (of_m1_addr_conflict,
    S_1,
    of_m1_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output of_m1_addr_conflict;
  input S_1;
  input of_m1_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;

  wire S_1;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire of_m1_addr_conflict;
  wire of_m1_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_520 \Comp_Carry_Chain[0].MUXCY_I 
       (.S_1(S_1),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m1_use_conflict(of_m1_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_521 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .of_m1_addr_conflict(of_m1_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_527
   (of_m0_addr_conflict,
    S_0,
    of_m0_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output of_m0_addr_conflict;
  input S_0;
  input of_m0_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;

  wire S_0;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire of_m0_addr_conflict;
  wire of_m0_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_528 \Comp_Carry_Chain[0].MUXCY_I 
       (.S_0(S_0),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_m0_use_conflict(of_m0_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_529 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .of_m0_addr_conflict(of_m0_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module microblaze_microblaze_0_0_comparator_535
   (of_ex_addr_conflict,
    S,
    of_ex_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output of_ex_addr_conflict;
  input S;
  input of_ex_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;

  wire S;
  wire \Using_FPGA.Native ;
  wire carry_chain_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire of_ex_addr_conflict;
  wire of_ex_use_conflict;

  microblaze_microblaze_0_0_MB_MUXCY_536 \Comp_Carry_Chain[0].MUXCY_I 
       (.S(S),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .of_ex_use_conflict(of_ex_use_conflict));
  microblaze_microblaze_0_0_MB_MUXCY_537 \Comp_Carry_Chain[1].MUXCY_I 
       (.\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .carry_chain_1(carry_chain_1),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .of_ex_addr_conflict(of_ex_addr_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool
   (of_ex_addr_conflict,
    S,
    of_ex_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_ex_addr_conflict;
  input S;
  input of_ex_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_ex_addr_conflict;
  wire of_ex_use_conflict;

  microblaze_microblaze_0_0_comparator_339 comparator_i1
       (.S(S),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_ex_use_conflict(of_ex_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_289
   (of_m0_addr_conflict,
    S_0,
    of_m0_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m0_addr_conflict;
  input S_0;
  input of_m0_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_0;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m0_addr_conflict;
  wire of_m0_use_conflict;

  microblaze_microblaze_0_0_comparator_331 comparator_i1
       (.S_0(S_0),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_m0_use_conflict(of_m0_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_293
   (of_m1_addr_conflict,
    S_1,
    of_m1_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m1_addr_conflict;
  input S_1;
  input of_m1_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_1;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m1_addr_conflict;
  wire of_m1_use_conflict;

  microblaze_microblaze_0_0_comparator_323 comparator_i1
       (.S_1(S_1),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_m1_use_conflict(of_m1_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_297
   (of_m2_addr_conflict,
    S_2,
    of_m2_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m2_addr_conflict;
  input S_2;
  input of_m2_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_2;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m2_addr_conflict;
  wire of_m2_use_conflict;

  microblaze_microblaze_0_0_comparator_315 comparator_i1
       (.S_2(S_2),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_m2_use_conflict(of_m2_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_301
   (of_m3_addr_conflict,
    S_3,
    of_m3_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m3_addr_conflict;
  input S_3;
  input of_m3_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_3;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m3_addr_conflict;
  wire of_m3_use_conflict;

  microblaze_microblaze_0_0_comparator comparator_i1
       (.S_3(S_3),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_m3_use_conflict(of_m3_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_387
   (of_ex_addr_conflict,
    S,
    of_ex_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_ex_addr_conflict;
  input S;
  input of_ex_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_ex_addr_conflict;
  wire of_ex_use_conflict;

  microblaze_microblaze_0_0_comparator_442 comparator_i1
       (.S(S),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_ex_use_conflict(of_ex_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_391
   (of_m0_addr_conflict,
    S_0,
    of_m0_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m0_addr_conflict;
  input S_0;
  input of_m0_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_0;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m0_addr_conflict;
  wire of_m0_use_conflict;

  microblaze_microblaze_0_0_comparator_434 comparator_i1
       (.S_0(S_0),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_m0_use_conflict(of_m0_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_395
   (of_m1_addr_conflict,
    S_1,
    of_m1_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m1_addr_conflict;
  input S_1;
  input of_m1_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_1;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m1_addr_conflict;
  wire of_m1_use_conflict;

  microblaze_microblaze_0_0_comparator_426 comparator_i1
       (.S_1(S_1),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_m1_use_conflict(of_m1_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_399
   (of_m2_addr_conflict,
    S_2,
    of_m2_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m2_addr_conflict;
  input S_2;
  input of_m2_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_2;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m2_addr_conflict;
  wire of_m2_use_conflict;

  microblaze_microblaze_0_0_comparator_418 comparator_i1
       (.S_2(S_2),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_m2_use_conflict(of_m2_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_403
   (of_m3_addr_conflict,
    S_3,
    of_m3_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output of_m3_addr_conflict;
  input S_3;
  input of_m3_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S_3;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire of_m3_addr_conflict;
  wire of_m3_use_conflict;

  microblaze_microblaze_0_0_comparator_410 comparator_i1
       (.S_3(S_3),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_m3_use_conflict(of_m3_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_480
   (of_ex_addr_conflict,
    S,
    of_ex_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output of_ex_addr_conflict;
  input S;
  input of_ex_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;

  wire S;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire of_ex_addr_conflict;
  wire of_ex_use_conflict;

  microblaze_microblaze_0_0_comparator_535 comparator_i1
       (.S(S),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_ex_use_conflict(of_ex_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_484
   (of_m0_addr_conflict,
    S_0,
    of_m0_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output of_m0_addr_conflict;
  input S_0;
  input of_m0_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;

  wire S_0;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire of_m0_addr_conflict;
  wire of_m0_use_conflict;

  microblaze_microblaze_0_0_comparator_527 comparator_i1
       (.S_0(S_0),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_m0_use_conflict(of_m0_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_488
   (of_m1_addr_conflict,
    S_1,
    of_m1_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output of_m1_addr_conflict;
  input S_1;
  input of_m1_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;

  wire S_1;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire of_m1_addr_conflict;
  wire of_m1_use_conflict;

  microblaze_microblaze_0_0_comparator_519 comparator_i1
       (.S_1(S_1),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_m1_use_conflict(of_m1_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_492
   (of_m2_addr_conflict,
    S_2,
    of_m2_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output of_m2_addr_conflict;
  input S_2;
  input of_m2_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;

  wire S_2;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire of_m2_addr_conflict;
  wire of_m2_use_conflict;

  microblaze_microblaze_0_0_comparator_511 comparator_i1
       (.S_2(S_2),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_m2_use_conflict(of_m2_use_conflict));
endmodule

(* ORIG_REF_NAME = "comparator_bool" *) 
module microblaze_microblaze_0_0_comparator_bool_496
   (of_m3_addr_conflict,
    S_3,
    of_m3_use_conflict,
    \Using_FPGA.Native ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output of_m3_addr_conflict;
  input S_3;
  input of_m3_use_conflict;
  input \Using_FPGA.Native ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;

  wire S_3;
  wire \Using_FPGA.Native ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire of_m3_addr_conflict;
  wire of_m3_use_conflict;

  microblaze_microblaze_0_0_comparator_503 comparator_i1
       (.S_3(S_3),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_m3_use_conflict(of_m3_use_conflict));
endmodule

(* ORIG_REF_NAME = "decode_conflict_ff" *) 
module microblaze_microblaze_0_0_decode_conflict_ff
   (m0_complete_in_later_stage_reg,
    m2_complete_in_later_stage_reg,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    S_0,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    S_1,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    S_2,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    S_3,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    ex_complete_in_later_stage,
    m0_complete_in_later_stage,
    m1_m2_complete_in_later_stage,
    m2_complete_in_later_stage,
    m3_complete_in_later_stage,
    m3_div_stall);
  output m0_complete_in_later_stage_reg;
  output m2_complete_in_later_stage_reg;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input S_0;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input S_1;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input S_2;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input S_3;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input ex_complete_in_later_stage;
  input m0_complete_in_later_stage;
  input m1_m2_complete_in_later_stage;
  input m2_complete_in_later_stage;
  input m3_complete_in_later_stage;
  input m3_div_stall;

  wire And_OUT;
  wire OF_Op_EX_Stall;
  wire S;
  wire S_0;
  wire S_1;
  wire S_2;
  wire S_3;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire ex_complete_in_later_stage;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire m0_complete_in_later_stage;
  wire m0_complete_in_later_stage_reg;
  wire m1_m2_complete_in_later_stage;
  wire m2_complete_in_later_stage;
  wire m2_complete_in_later_stage_reg;
  wire m3_complete_in_later_stage;
  wire m3_div_stall;
  wire of_ex_addr_conflict;
  wire of_ex_use_conflict;
  wire of_m0_addr_conflict;
  wire of_m0_no_stall_conflict;
  wire of_m0_use_conflict;
  wire of_m1_addr_conflict;
  wire of_m1_no_stall_conflict;
  wire of_m1_stall_conflict;
  wire of_m1_use_conflict;
  wire of_m2_addr_conflict;
  wire of_m2_stall_conflict;
  wire of_m2_use_conflict;
  wire of_m3_addr_conflict;
  wire of_m3_stall_conflict;
  wire of_m3_use_conflict;
  wire of_read_ex_write_op_conflict;
  wire of_read_m0_write_op_conflict;
  wire of_read_m1_write_op_conflict;
  wire of_read_m2_write_op_conflict;
  wire of_read_m3_write_op_conflict;

  microblaze_microblaze_0_0_carry_and_bb_475 \EX_Simple_Carry.OF_EX_Use 
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(S),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(\Using_FPGA.Native ),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(\Using_FPGA.Native_0 ),
        .of_ex_use_conflict(of_ex_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_476 \M0_Simple_Carry.OF_M0_Use 
       (.lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(S_0),
        .lopt_3(lopt_8),
        .lopt_4(lopt_9),
        .lopt_5(\Using_FPGA.Native_1 ),
        .lopt_6(lopt_10),
        .lopt_7(lopt_11),
        .lopt_8(\Using_FPGA.Native_2 ),
        .of_m0_use_conflict(of_m0_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_477 \M1_Simple_Carry.OF_M1_Use 
       (.lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(S_1),
        .lopt_3(lopt_14),
        .lopt_4(lopt_15),
        .lopt_5(\Using_FPGA.Native_3 ),
        .lopt_6(lopt_16),
        .lopt_7(lopt_17),
        .lopt_8(\Using_FPGA.Native_4 ),
        .of_m1_use_conflict(of_m1_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_478 \M2_Simple_Carry.OF_M2_Use 
       (.lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(S_2),
        .lopt_3(lopt_20),
        .lopt_4(lopt_21),
        .lopt_5(\Using_FPGA.Native_5 ),
        .lopt_6(lopt_22),
        .lopt_7(lopt_23),
        .lopt_8(\Using_FPGA.Native_6 ),
        .of_m2_use_conflict(of_m2_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_479 \M3_Simple_Carry.OF_M3_Use 
       (.lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_2(S_3),
        .lopt_3(lopt_26),
        .lopt_4(lopt_27),
        .lopt_5(\Using_FPGA.Native_7 ),
        .lopt_6(lopt_28),
        .lopt_7(lopt_29),
        .lopt_8(\Using_FPGA.Native_8 ),
        .of_m3_use_conflict(of_m3_use_conflict));
  microblaze_microblaze_0_0_comparator_bool_480 OF_EX_Cmp
       (.S(S),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_ex_use_conflict(of_ex_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_481 OF_EX_Conflict
       (.\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .lopt(lopt_4),
        .lopt_1(lopt_5),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
  microblaze_microblaze_0_0_carry_latch_and_n_bb_482 OF_EX_Mask_No_Stall
       (.And_OUT(And_OUT),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_483 OF_EX_Mask_Stall
       (.OF_Op_EX_Stall(OF_Op_EX_Stall),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
  microblaze_microblaze_0_0_comparator_bool_484 OF_M0_Cmp
       (.S_0(S_0),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_m0_use_conflict(of_m0_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_485 OF_M0_Conflict
       (.\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .lopt(lopt_10),
        .lopt_1(lopt_11),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
  microblaze_microblaze_0_0_carry_latch_and_n_bb_486 OF_M0_Mask_No_Stall
       (.m0_complete_in_later_stage(m0_complete_in_later_stage),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_487 OF_M0_Mask_Stall
       (.And_OUT(And_OUT),
        .OF_Op_EX_Stall(OF_Op_EX_Stall),
        .m0_complete_in_later_stage(m0_complete_in_later_stage),
        .m0_complete_in_later_stage_reg(m0_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
  microblaze_microblaze_0_0_comparator_bool_488 OF_M1_Cmp
       (.S_1(S_1),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14),
        .lopt_3(lopt_15),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_m1_use_conflict(of_m1_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_489 OF_M1_Conflict
       (.\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .lopt(lopt_16),
        .lopt_1(lopt_17),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
  microblaze_microblaze_0_0_carry_latch_and_n_bb_490 OF_M1_Mask_No_Stall
       (.m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_491 OF_M1_Mask_Stall
       (.m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
  microblaze_microblaze_0_0_comparator_bool_492 OF_M2_Cmp
       (.S_2(S_2),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 ),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(lopt_20),
        .lopt_3(lopt_21),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_m2_use_conflict(of_m2_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_493 OF_M2_Conflict
       (.\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .lopt(lopt_22),
        .lopt_1(lopt_23),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
  microblaze_microblaze_0_0_carry_latch_and_n_bb_494 OF_M2_Mask_No_Stall
       (.And_OUT(And_OUT),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .m2_complete_in_later_stage_reg(m2_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_m2_stall_conflict(of_m2_stall_conflict),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_495 OF_M2_Mask_Stall
       (.m2_complete_in_later_stage(m2_complete_in_later_stage),
        .of_m2_stall_conflict(of_m2_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
  microblaze_microblaze_0_0_comparator_bool_496 OF_M3_Cmp
       (.S_3(S_3),
        .\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_2(lopt_26),
        .lopt_3(lopt_27),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_m3_use_conflict(of_m3_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_497 OF_M3_Conflict
       (.\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .lopt(lopt_28),
        .lopt_1(lopt_29),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_498 OF_M3_Mask_Stall
       (.m3_complete_in_later_stage(m3_complete_in_later_stage),
        .m3_div_stall(m3_div_stall),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "decode_conflict_ff" *) 
module microblaze_microblaze_0_0_decode_conflict_ff__parameterized1
   (m0_complete_in_later_stage_reg,
    m2_complete_in_later_stage_reg,
    S,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    S_0,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    S_1,
    \Using_FPGA.Native_3 ,
    \Using_FPGA.Native_4 ,
    S_2,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    S_3,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    ex_complete_in_later_stage,
    m0_complete_in_later_stage,
    m1_m2_complete_in_later_stage,
    m2_complete_in_later_stage,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    \Using_FPGA.Native_12 ,
    \Using_FPGA.Native_13 ,
    \Using_FPGA.Native_14 ,
    \Using_FPGA.Native_15 ,
    \Using_FPGA.Native_16 ,
    \Using_FPGA.Native_17 ,
    \Using_FPGA.Native_18 ,
    m3_complete_in_later_stage,
    m3_div_stall);
  output m0_complete_in_later_stage_reg;
  output m2_complete_in_later_stage_reg;
  input S;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input S_0;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input S_1;
  input \Using_FPGA.Native_3 ;
  input \Using_FPGA.Native_4 ;
  input S_2;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input S_3;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input ex_complete_in_later_stage;
  input m0_complete_in_later_stage;
  input m1_m2_complete_in_later_stage;
  input m2_complete_in_later_stage;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input \Using_FPGA.Native_12 ;
  input \Using_FPGA.Native_13 ;
  input \Using_FPGA.Native_14 ;
  input \Using_FPGA.Native_15 ;
  input \Using_FPGA.Native_16 ;
  input \Using_FPGA.Native_17 ;
  input \Using_FPGA.Native_18 ;
  input m3_complete_in_later_stage;
  input m3_div_stall;

  wire And_OUT;
  wire \M0_Advanced_Carry.OF_M0_Use1_n_0 ;
  wire \M0_Advanced_Carry.OF_M0_Use2_n_0 ;
  wire \M1_Advanced_Carry.OF_M1_Use1_n_0 ;
  wire \M1_Advanced_Carry.OF_M1_Use2_n_0 ;
  wire \M2_Advanced_Carry.OF_M2_Use1_n_0 ;
  wire \M2_Advanced_Carry.OF_M2_Use2_n_0 ;
  wire \M3_Advanced_Carry.OF_M3_Use1_n_0 ;
  wire \M3_Advanced_Carry.OF_M3_Use2_n_0 ;
  wire OF_Op_EX_Stall4_in;
  wire S;
  wire S_0;
  wire S_1;
  wire S_2;
  wire S_3;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_12 ;
  wire \Using_FPGA.Native_13 ;
  wire \Using_FPGA.Native_14 ;
  wire \Using_FPGA.Native_15 ;
  wire \Using_FPGA.Native_16 ;
  wire \Using_FPGA.Native_17 ;
  wire \Using_FPGA.Native_18 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire ex_complete_in_later_stage;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire m0_complete_in_later_stage;
  wire m0_complete_in_later_stage_reg;
  wire m1_m2_complete_in_later_stage;
  wire m2_complete_in_later_stage;
  wire m2_complete_in_later_stage_reg;
  wire m3_complete_in_later_stage;
  wire m3_div_stall;
  wire of_ex_addr_conflict;
  wire of_ex_use_conflict;
  wire of_m0_addr_conflict;
  wire of_m0_no_stall_conflict;
  wire of_m0_use_conflict;
  wire of_m1_addr_conflict;
  wire of_m1_no_stall_conflict;
  wire of_m1_stall_conflict;
  wire of_m1_use_conflict;
  wire of_m2_addr_conflict;
  wire of_m2_stall_conflict;
  wire of_m2_use_conflict;
  wire of_m3_addr_conflict;
  wire of_m3_stall_conflict;
  wire of_m3_use_conflict;
  wire of_read_ex_write_op_conflict;
  wire of_read_m0_write_op_conflict;
  wire of_read_m1_write_op_conflict;
  wire of_read_m2_write_op_conflict;
  wire of_read_m3_write_op_conflict;
  wire part_c;
  wire part_c_or_not_b;

  microblaze_microblaze_0_0_carry_and_bb_372 \EX_Advanced_Carry.OF_EX_Use1 
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\Using_FPGA.Native_9 ),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(\Using_FPGA.Native_10 ),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(S),
        .part_c(part_c));
  microblaze_microblaze_0_0_carry_or_n_bb_373 \EX_Advanced_Carry.OF_EX_Use2 
       (.\Using_FPGA.Native (\Using_FPGA.Native_9 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .part_c(part_c),
        .part_c_or_not_b(part_c_or_not_b));
  microblaze_microblaze_0_0_carry_and_n_bb_374 \EX_Advanced_Carry.OF_EX_Use3 
       (.\Using_FPGA.Native (\Using_FPGA.Native_10 ),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .of_ex_use_conflict(of_ex_use_conflict),
        .part_c_or_not_b(part_c_or_not_b));
  microblaze_microblaze_0_0_carry_and_bb_375 \M0_Advanced_Carry.OF_M0_Use1 
       (.\Using_FPGA.Native (\M0_Advanced_Carry.OF_M0_Use1_n_0 ),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(\Using_FPGA.Native_11 ),
        .lopt_3(lopt_8),
        .lopt_4(lopt_9),
        .lopt_5(\Using_FPGA.Native_12 ),
        .lopt_6(lopt_10),
        .lopt_7(lopt_11),
        .lopt_8(S_0));
  microblaze_microblaze_0_0_carry_or_n_bb_376 \M0_Advanced_Carry.OF_M0_Use2 
       (.\Using_FPGA.Native (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_0 (\M0_Advanced_Carry.OF_M0_Use1_n_0 ),
        .\cur_data_i_reg[26] (\M0_Advanced_Carry.OF_M0_Use2_n_0 ),
        .lopt(lopt_6),
        .lopt_1(lopt_7));
  microblaze_microblaze_0_0_carry_and_n_bb_377 \M0_Advanced_Carry.OF_M0_Use3 
       (.\Using_FPGA.Native (\Using_FPGA.Native_12 ),
        .\Using_FPGA.Native_0 (\M0_Advanced_Carry.OF_M0_Use2_n_0 ),
        .lopt(lopt_8),
        .lopt_1(lopt_9),
        .of_m0_use_conflict(of_m0_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_378 \M1_Advanced_Carry.OF_M1_Use1 
       (.\Using_FPGA.Native (\M1_Advanced_Carry.OF_M1_Use1_n_0 ),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(\Using_FPGA.Native_13 ),
        .lopt_3(lopt_14),
        .lopt_4(lopt_15),
        .lopt_5(\Using_FPGA.Native_14 ),
        .lopt_6(lopt_16),
        .lopt_7(lopt_17),
        .lopt_8(S_1));
  microblaze_microblaze_0_0_carry_or_n_bb_379 \M1_Advanced_Carry.OF_M1_Use2 
       (.\Using_FPGA.Native (\Using_FPGA.Native_13 ),
        .\Using_FPGA.Native_0 (\M1_Advanced_Carry.OF_M1_Use1_n_0 ),
        .\cur_data_i_reg[26] (\M1_Advanced_Carry.OF_M1_Use2_n_0 ),
        .lopt(lopt_12),
        .lopt_1(lopt_13));
  microblaze_microblaze_0_0_carry_and_n_bb_380 \M1_Advanced_Carry.OF_M1_Use3 
       (.\Using_FPGA.Native (\Using_FPGA.Native_14 ),
        .\Using_FPGA.Native_0 (\M1_Advanced_Carry.OF_M1_Use2_n_0 ),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .of_m1_use_conflict(of_m1_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_381 \M2_Advanced_Carry.OF_M2_Use1 
       (.\Using_FPGA.Native (\M2_Advanced_Carry.OF_M2_Use1_n_0 ),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(\Using_FPGA.Native_15 ),
        .lopt_3(lopt_20),
        .lopt_4(lopt_21),
        .lopt_5(\Using_FPGA.Native_16 ),
        .lopt_6(lopt_22),
        .lopt_7(lopt_23),
        .lopt_8(S_2));
  microblaze_microblaze_0_0_carry_or_n_bb_382 \M2_Advanced_Carry.OF_M2_Use2 
       (.\Using_FPGA.Native (\Using_FPGA.Native_15 ),
        .\Using_FPGA.Native_0 (\M2_Advanced_Carry.OF_M2_Use1_n_0 ),
        .\cur_data_i_reg[26] (\M2_Advanced_Carry.OF_M2_Use2_n_0 ),
        .lopt(lopt_18),
        .lopt_1(lopt_19));
  microblaze_microblaze_0_0_carry_and_n_bb_383 \M2_Advanced_Carry.OF_M2_Use3 
       (.\Using_FPGA.Native (\Using_FPGA.Native_16 ),
        .\Using_FPGA.Native_0 (\M2_Advanced_Carry.OF_M2_Use2_n_0 ),
        .lopt(lopt_20),
        .lopt_1(lopt_21),
        .of_m2_use_conflict(of_m2_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_384 \M3_Advanced_Carry.OF_M3_Use1 
       (.\Using_FPGA.Native (\M3_Advanced_Carry.OF_M3_Use1_n_0 ),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_2(\Using_FPGA.Native_17 ),
        .lopt_3(lopt_26),
        .lopt_4(lopt_27),
        .lopt_5(\Using_FPGA.Native_18 ),
        .lopt_6(lopt_28),
        .lopt_7(lopt_29),
        .lopt_8(S_3));
  microblaze_microblaze_0_0_carry_or_n_bb_385 \M3_Advanced_Carry.OF_M3_Use2 
       (.\Using_FPGA.Native (\Using_FPGA.Native_17 ),
        .\Using_FPGA.Native_0 (\M3_Advanced_Carry.OF_M3_Use1_n_0 ),
        .\cur_data_i_reg[26] (\M3_Advanced_Carry.OF_M3_Use2_n_0 ),
        .lopt(lopt_24),
        .lopt_1(lopt_25));
  microblaze_microblaze_0_0_carry_and_n_bb_386 \M3_Advanced_Carry.OF_M3_Use3 
       (.\Using_FPGA.Native (\Using_FPGA.Native_18 ),
        .\Using_FPGA.Native_0 (\M3_Advanced_Carry.OF_M3_Use2_n_0 ),
        .lopt(lopt_26),
        .lopt_1(lopt_27),
        .of_m3_use_conflict(of_m3_use_conflict));
  microblaze_microblaze_0_0_comparator_bool_387 OF_EX_Cmp
       (.S(S),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt_4),
        .lopt_1(lopt_5),
        .lopt_2(lopt_30),
        .lopt_3(lopt_31),
        .lopt_4(\Using_FPGA.Native_0 ),
        .lopt_5(lopt_32),
        .lopt_6(lopt_33),
        .lopt_7(ex_complete_in_later_stage),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_ex_use_conflict(of_ex_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_388 OF_EX_Conflict
       (.\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .lopt(lopt_30),
        .lopt_1(lopt_31),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
  microblaze_microblaze_0_0_carry_latch_and_n_bb_389 OF_EX_Mask_No_Stall
       (.And_OUT(And_OUT),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_390 OF_EX_Mask_Stall
       (.OF_Op_EX_Stall4_in(OF_Op_EX_Stall4_in),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .lopt(lopt_32),
        .lopt_1(lopt_33),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
  microblaze_microblaze_0_0_comparator_bool_391 OF_M0_Cmp
       (.S_0(S_0),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .lopt(lopt_10),
        .lopt_1(lopt_11),
        .lopt_2(lopt_34),
        .lopt_3(lopt_35),
        .lopt_4(\Using_FPGA.Native_2 ),
        .lopt_5(lopt_36),
        .lopt_6(lopt_37),
        .lopt_7(m0_complete_in_later_stage),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_m0_use_conflict(of_m0_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_392 OF_M0_Conflict
       (.\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .lopt(lopt_34),
        .lopt_1(lopt_35),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
  microblaze_microblaze_0_0_carry_latch_and_n_bb_393 OF_M0_Mask_No_Stall
       (.m0_complete_in_later_stage(m0_complete_in_later_stage),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_394 OF_M0_Mask_Stall
       (.And_OUT(And_OUT),
        .OF_Op_EX_Stall4_in(OF_Op_EX_Stall4_in),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .m0_complete_in_later_stage(m0_complete_in_later_stage),
        .m0_complete_in_later_stage_reg(m0_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
  microblaze_microblaze_0_0_comparator_bool_395 OF_M1_Cmp
       (.S_1(S_1),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .lopt(lopt_16),
        .lopt_1(lopt_17),
        .lopt_2(lopt_38),
        .lopt_3(lopt_39),
        .lopt_4(\Using_FPGA.Native_4 ),
        .lopt_5(lopt_40),
        .lopt_6(lopt_41),
        .lopt_7(m1_m2_complete_in_later_stage),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_m1_use_conflict(of_m1_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_396 OF_M1_Conflict
       (.\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .lopt(lopt_38),
        .lopt_1(lopt_39),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
  microblaze_microblaze_0_0_carry_latch_and_n_bb_397 OF_M1_Mask_No_Stall
       (.m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_398 OF_M1_Mask_Stall
       (.lopt(lopt_40),
        .lopt_1(lopt_41),
        .m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
  microblaze_microblaze_0_0_comparator_bool_399 OF_M2_Cmp
       (.S_2(S_2),
        .\Using_FPGA.Native (\Using_FPGA.Native_5 ),
        .lopt(lopt_22),
        .lopt_1(lopt_23),
        .lopt_2(lopt_42),
        .lopt_3(lopt_43),
        .lopt_4(\Using_FPGA.Native_6 ),
        .lopt_5(lopt_44),
        .lopt_6(lopt_45),
        .lopt_7(m2_complete_in_later_stage),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_m2_use_conflict(of_m2_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_400 OF_M2_Conflict
       (.\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .lopt(lopt_42),
        .lopt_1(lopt_43),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
  microblaze_microblaze_0_0_carry_latch_and_n_bb_401 OF_M2_Mask_No_Stall
       (.And_OUT(And_OUT),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .m2_complete_in_later_stage_reg(m2_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_m2_stall_conflict(of_m2_stall_conflict),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_402 OF_M2_Mask_Stall
       (.lopt(lopt_44),
        .lopt_1(lopt_45),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .of_m2_stall_conflict(of_m2_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
  microblaze_microblaze_0_0_comparator_bool_403 OF_M3_Cmp
       (.S_3(S_3),
        .\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .lopt(lopt_28),
        .lopt_1(lopt_29),
        .lopt_2(lopt_46),
        .lopt_3(lopt_47),
        .lopt_4(\Using_FPGA.Native_8 ),
        .lopt_5(lopt_48),
        .lopt_6(lopt_49),
        .lopt_7(lopt_50),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_m3_use_conflict(of_m3_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_404 OF_M3_Conflict
       (.\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .lopt(lopt_46),
        .lopt_1(lopt_47),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_405 OF_M3_Mask_Stall
       (.lopt(lopt_48),
        .lopt_1(lopt_49),
        .lopt_2(lopt_50),
        .m3_complete_in_later_stage(m3_complete_in_later_stage),
        .m3_div_stall(m3_div_stall),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "decode_conflict_ff" *) 
module microblaze_microblaze_0_0_decode_conflict_ff__parameterized3
   (m0_complete_in_later_stage_reg,
    m2_complete_in_later_stage_reg,
    S,
    \Using_FPGA.Native ,
    A4_out,
    S_0,
    \Using_FPGA.Native_0 ,
    A3_out,
    S_1,
    \Using_FPGA.Native_1 ,
    A2_out,
    S_2,
    \Using_FPGA.Native_2 ,
    A1_out,
    S_3,
    \Using_FPGA.Native_3 ,
    A0_out,
    ex_complete_in_later_stage,
    m0_complete_in_later_stage,
    m1_m2_complete_in_later_stage,
    m2_complete_in_later_stage,
    Q,
    \Using_FPGA.Native_4 ,
    \Using_FPGA.Native_5 ,
    \Using_FPGA.Native_6 ,
    \Using_FPGA.Native_7 ,
    \Using_FPGA.Native_8 ,
    \Using_FPGA.Native_9 ,
    \Using_FPGA.Native_10 ,
    \Using_FPGA.Native_11 ,
    OF_Use_Op_B,
    S_4,
    m3_complete_in_later_stage,
    m3_div_stall);
  output m0_complete_in_later_stage_reg;
  output m2_complete_in_later_stage_reg;
  input S;
  input \Using_FPGA.Native ;
  input A4_out;
  input S_0;
  input \Using_FPGA.Native_0 ;
  input A3_out;
  input S_1;
  input \Using_FPGA.Native_1 ;
  input A2_out;
  input S_2;
  input \Using_FPGA.Native_2 ;
  input A1_out;
  input S_3;
  input \Using_FPGA.Native_3 ;
  input A0_out;
  input ex_complete_in_later_stage;
  input m0_complete_in_later_stage;
  input m1_m2_complete_in_later_stage;
  input m2_complete_in_later_stage;
  input [0:0]Q;
  input \Using_FPGA.Native_4 ;
  input \Using_FPGA.Native_5 ;
  input \Using_FPGA.Native_6 ;
  input \Using_FPGA.Native_7 ;
  input \Using_FPGA.Native_8 ;
  input \Using_FPGA.Native_9 ;
  input \Using_FPGA.Native_10 ;
  input \Using_FPGA.Native_11 ;
  input OF_Use_Op_B;
  input S_4;
  input m3_complete_in_later_stage;
  input m3_div_stall;

  wire A0_out;
  wire A1_out;
  wire A2_out;
  wire A3_out;
  wire A4_out;
  wire And_OUT;
  wire \M0_Big_Carry.OF_M0_Use1_n_0 ;
  wire \M0_Big_Carry.OF_M0_Use2_n_0 ;
  wire \M1_Big_Carry.OF_M1_Use1_n_0 ;
  wire \M1_Big_Carry.OF_M1_Use2_n_0 ;
  wire \M2_Big_Carry.OF_M2_Use1_n_0 ;
  wire \M2_Big_Carry.OF_M2_Use2_n_0 ;
  wire \M3_Big_Carry.OF_M3_Use1_n_0 ;
  wire \M3_Big_Carry.OF_M3_Use2_n_0 ;
  wire OF_Use_Op_B;
  wire [0:0]Q;
  wire S;
  wire S_0;
  wire S_1;
  wire S_2;
  wire S_3;
  wire S_4;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_10 ;
  wire \Using_FPGA.Native_11 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire \Using_FPGA.Native_5 ;
  wire \Using_FPGA.Native_6 ;
  wire \Using_FPGA.Native_7 ;
  wire \Using_FPGA.Native_8 ;
  wire \Using_FPGA.Native_9 ;
  wire ex_complete_in_later_stage;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire lopt_3;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire lopt_4;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire m0_complete_in_later_stage;
  wire m0_complete_in_later_stage_reg;
  wire m1_m2_complete_in_later_stage;
  wire m2_complete_in_later_stage;
  wire m2_complete_in_later_stage_reg;
  wire m3_complete_in_later_stage;
  wire m3_div_stall;
  wire of_ex_addr_conflict;
  wire of_ex_use_conflict;
  wire of_m0_addr_conflict;
  wire of_m0_no_stall_conflict;
  wire of_m0_use_conflict;
  wire of_m1_addr_conflict;
  wire of_m1_no_stall_conflict;
  wire of_m1_stall_conflict;
  wire of_m1_use_conflict;
  wire of_m2_addr_conflict;
  wire of_m2_no_stall_conflict;
  wire of_m2_use_conflict;
  wire of_m3_addr_conflict;
  wire of_m3_stall_conflict;
  wire of_m3_use_conflict;
  wire of_op3_ex_stall;
  wire of_read_ex_write_op_conflict;
  wire of_read_m0_write_op_conflict;
  wire of_read_m1_write_op_conflict;
  wire of_read_m2_write_op_conflict;
  wire of_read_m3_write_op_conflict;
  wire part_c;
  wire part_c_and_b;

  microblaze_microblaze_0_0_carry_and_bb_272 \EX_Big_Carry.OF_EX_Use1 
       (.Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(\Using_FPGA.Native_4 ),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(\Using_FPGA.Native_5 ),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(S),
        .part_c(part_c));
  microblaze_microblaze_0_0_carry_and_bb_273 \EX_Big_Carry.OF_EX_Use2 
       (.\Using_FPGA.Native (\Using_FPGA.Native_4 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .part_c(part_c),
        .part_c_and_b(part_c_and_b));
  microblaze_microblaze_0_0_carry_or_bb_274 \EX_Big_Carry.OF_EX_Use3 
       (.\Using_FPGA.Native (\Using_FPGA.Native_5 ),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .of_ex_use_conflict(of_ex_use_conflict),
        .part_c_and_b(part_c_and_b));
  microblaze_microblaze_0_0_carry_and_bb_275 \M0_Big_Carry.OF_M0_Use1 
       (.Q(Q),
        .\cur_data_i_reg[15] (\M0_Big_Carry.OF_M0_Use1_n_0 ),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(\Using_FPGA.Native_6 ),
        .lopt_3(lopt_8),
        .lopt_4(lopt_9),
        .lopt_5(\Using_FPGA.Native_7 ),
        .lopt_6(lopt_10),
        .lopt_7(lopt_11),
        .lopt_8(S_0));
  microblaze_microblaze_0_0_carry_and_bb_276 \M0_Big_Carry.OF_M0_Use2 
       (.\Using_FPGA.Native (\Using_FPGA.Native_6 ),
        .\Using_FPGA.Native_0 (\M0_Big_Carry.OF_M0_Use1_n_0 ),
        .\cur_data_i_reg[26] (\M0_Big_Carry.OF_M0_Use2_n_0 ),
        .lopt(lopt_6),
        .lopt_1(lopt_7));
  microblaze_microblaze_0_0_carry_or_bb_277 \M0_Big_Carry.OF_M0_Use3 
       (.\Using_FPGA.Native (\Using_FPGA.Native_7 ),
        .\Using_FPGA.Native_0 (\M0_Big_Carry.OF_M0_Use2_n_0 ),
        .lopt(lopt_8),
        .lopt_1(lopt_9),
        .of_m0_use_conflict(of_m0_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_278 \M1_Big_Carry.OF_M1_Use1 
       (.Q(Q),
        .\cur_data_i_reg[15] (\M1_Big_Carry.OF_M1_Use1_n_0 ),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(\Using_FPGA.Native_8 ),
        .lopt_3(lopt_14),
        .lopt_4(lopt_15),
        .lopt_5(\Using_FPGA.Native_9 ),
        .lopt_6(lopt_16),
        .lopt_7(lopt_17),
        .lopt_8(S_1));
  microblaze_microblaze_0_0_carry_and_bb_279 \M1_Big_Carry.OF_M1_Use2 
       (.\Using_FPGA.Native (\Using_FPGA.Native_8 ),
        .\Using_FPGA.Native_0 (\M1_Big_Carry.OF_M1_Use1_n_0 ),
        .\cur_data_i_reg[26] (\M1_Big_Carry.OF_M1_Use2_n_0 ),
        .lopt(lopt_12),
        .lopt_1(lopt_13));
  microblaze_microblaze_0_0_carry_or_bb_280 \M1_Big_Carry.OF_M1_Use3 
       (.\Using_FPGA.Native (\Using_FPGA.Native_9 ),
        .\Using_FPGA.Native_0 (\M1_Big_Carry.OF_M1_Use2_n_0 ),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .of_m1_use_conflict(of_m1_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_281 \M2_Big_Carry.OF_M2_Use1 
       (.Q(Q),
        .\cur_data_i_reg[15] (\M2_Big_Carry.OF_M2_Use1_n_0 ),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(\Using_FPGA.Native_10 ),
        .lopt_3(lopt_20),
        .lopt_4(lopt_21),
        .lopt_5(\Using_FPGA.Native_11 ),
        .lopt_6(lopt_22),
        .lopt_7(lopt_23),
        .lopt_8(S_2));
  microblaze_microblaze_0_0_carry_and_bb_282 \M2_Big_Carry.OF_M2_Use2 
       (.\Using_FPGA.Native (\Using_FPGA.Native_10 ),
        .\Using_FPGA.Native_0 (\M2_Big_Carry.OF_M2_Use1_n_0 ),
        .\cur_data_i_reg[26] (\M2_Big_Carry.OF_M2_Use2_n_0 ),
        .lopt(lopt_18),
        .lopt_1(lopt_19));
  microblaze_microblaze_0_0_carry_or_bb_283 \M2_Big_Carry.OF_M2_Use3 
       (.\Using_FPGA.Native (\Using_FPGA.Native_11 ),
        .\Using_FPGA.Native_0 (\M2_Big_Carry.OF_M2_Use2_n_0 ),
        .lopt(lopt_20),
        .lopt_1(lopt_21),
        .of_m2_use_conflict(of_m2_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_284 \M3_Big_Carry.OF_M3_Use1 
       (.Q(Q),
        .\cur_data_i_reg[15] (\M3_Big_Carry.OF_M3_Use1_n_0 ),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_2(OF_Use_Op_B),
        .lopt_3(lopt_26),
        .lopt_4(lopt_27),
        .lopt_5(S_4),
        .lopt_6(lopt_28),
        .lopt_7(lopt_29),
        .lopt_8(S_3));
  microblaze_microblaze_0_0_carry_and_bb_285 \M3_Big_Carry.OF_M3_Use2 
       (.OF_Use_Op_B(OF_Use_Op_B),
        .\Using_FPGA.Native (\M3_Big_Carry.OF_M3_Use1_n_0 ),
        .\cur_data_i_reg[26] (\M3_Big_Carry.OF_M3_Use2_n_0 ),
        .lopt(lopt_24),
        .lopt_1(lopt_25));
  microblaze_microblaze_0_0_carry_or_bb_286 \M3_Big_Carry.OF_M3_Use3 
       (.S_4(S_4),
        .\Using_FPGA.Native (\M3_Big_Carry.OF_M3_Use2_n_0 ),
        .lopt(lopt_26),
        .lopt_1(lopt_27),
        .of_m3_use_conflict(of_m3_use_conflict));
  microblaze_microblaze_0_0_comparator_bool OF_EX_Cmp
       (.S(S),
        .\Using_FPGA.Native (\Using_FPGA.Native ),
        .lopt(lopt_4),
        .lopt_1(lopt_5),
        .lopt_2(lopt_30),
        .lopt_3(lopt_31),
        .lopt_4(A4_out),
        .lopt_5(lopt_32),
        .lopt_6(lopt_33),
        .lopt_7(ex_complete_in_later_stage),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_ex_use_conflict(of_ex_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_287 OF_EX_Conflict
       (.A4_out(A4_out),
        .lopt(lopt_30),
        .lopt_1(lopt_31),
        .of_ex_addr_conflict(of_ex_addr_conflict),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
  microblaze_microblaze_0_0_carry_latch_and_n_bb OF_EX_Mask_No_Stall
       (.And_OUT(And_OUT),
        .ex_complete_in_later_stage(ex_complete_in_later_stage),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_288 OF_EX_Mask_Stall
       (.ex_complete_in_later_stage(ex_complete_in_later_stage),
        .lopt(lopt_32),
        .lopt_1(lopt_33),
        .of_op3_ex_stall(of_op3_ex_stall),
        .of_read_ex_write_op_conflict(of_read_ex_write_op_conflict));
  microblaze_microblaze_0_0_comparator_bool_289 OF_M0_Cmp
       (.S_0(S_0),
        .\Using_FPGA.Native (\Using_FPGA.Native_0 ),
        .lopt(lopt_10),
        .lopt_1(lopt_11),
        .lopt_2(lopt_34),
        .lopt_3(lopt_35),
        .lopt_4(A3_out),
        .lopt_5(lopt_36),
        .lopt_6(lopt_37),
        .lopt_7(m0_complete_in_later_stage),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_m0_use_conflict(of_m0_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_290 OF_M0_Conflict
       (.A3_out(A3_out),
        .lopt(lopt_34),
        .lopt_1(lopt_35),
        .of_m0_addr_conflict(of_m0_addr_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
  microblaze_microblaze_0_0_carry_latch_and_n_bb_291 OF_M0_Mask_No_Stall
       (.m0_complete_in_later_stage(m0_complete_in_later_stage),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_292 OF_M0_Mask_Stall
       (.And_OUT(And_OUT),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .m0_complete_in_later_stage(m0_complete_in_later_stage),
        .m0_complete_in_later_stage_reg(m0_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_op3_ex_stall(of_op3_ex_stall),
        .of_read_m0_write_op_conflict(of_read_m0_write_op_conflict));
  microblaze_microblaze_0_0_comparator_bool_293 OF_M1_Cmp
       (.S_1(S_1),
        .\Using_FPGA.Native (\Using_FPGA.Native_1 ),
        .lopt(lopt_16),
        .lopt_1(lopt_17),
        .lopt_2(lopt_38),
        .lopt_3(lopt_39),
        .lopt_4(A2_out),
        .lopt_5(lopt_40),
        .lopt_6(lopt_41),
        .lopt_7(m1_m2_complete_in_later_stage),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_m1_use_conflict(of_m1_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_294 OF_M1_Conflict
       (.A2_out(A2_out),
        .lopt(lopt_38),
        .lopt_1(lopt_39),
        .of_m1_addr_conflict(of_m1_addr_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
  microblaze_microblaze_0_0_carry_latch_and_n_bb_295 OF_M1_Mask_No_Stall
       (.m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_296 OF_M1_Mask_Stall
       (.lopt(lopt_40),
        .lopt_1(lopt_41),
        .m1_m2_complete_in_later_stage(m1_m2_complete_in_later_stage),
        .of_m1_stall_conflict(of_m1_stall_conflict),
        .of_read_m1_write_op_conflict(of_read_m1_write_op_conflict));
  microblaze_microblaze_0_0_comparator_bool_297 OF_M2_Cmp
       (.S_2(S_2),
        .\Using_FPGA.Native (\Using_FPGA.Native_2 ),
        .lopt(lopt_22),
        .lopt_1(lopt_23),
        .lopt_2(lopt_42),
        .lopt_3(lopt_43),
        .lopt_4(A1_out),
        .lopt_5(lopt_44),
        .lopt_6(lopt_45),
        .lopt_7(m2_complete_in_later_stage),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_m2_use_conflict(of_m2_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_298 OF_M2_Conflict
       (.A1_out(A1_out),
        .lopt(lopt_42),
        .lopt_1(lopt_43),
        .of_m2_addr_conflict(of_m2_addr_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
  microblaze_microblaze_0_0_carry_latch_and_n_bb_299 OF_M2_Mask_No_Stall
       (.m2_complete_in_later_stage(m2_complete_in_later_stage),
        .of_m2_no_stall_conflict(of_m2_no_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_300 OF_M2_Mask_Stall
       (.And_OUT(And_OUT),
        .lopt(lopt_44),
        .lopt_1(lopt_45),
        .m2_complete_in_later_stage(m2_complete_in_later_stage),
        .m2_complete_in_later_stage_reg(m2_complete_in_later_stage_reg),
        .of_m0_no_stall_conflict(of_m0_no_stall_conflict),
        .of_m1_no_stall_conflict(of_m1_no_stall_conflict),
        .of_m2_no_stall_conflict(of_m2_no_stall_conflict),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m2_write_op_conflict(of_read_m2_write_op_conflict));
  microblaze_microblaze_0_0_comparator_bool_301 OF_M3_Cmp
       (.S_3(S_3),
        .\Using_FPGA.Native (\Using_FPGA.Native_3 ),
        .lopt(lopt_28),
        .lopt_1(lopt_29),
        .lopt_2(lopt_46),
        .lopt_3(lopt_47),
        .lopt_4(A0_out),
        .lopt_5(lopt_48),
        .lopt_6(lopt_49),
        .lopt_7(lopt_50),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_m3_use_conflict(of_m3_use_conflict));
  microblaze_microblaze_0_0_carry_and_bb_302 OF_M3_Conflict
       (.A0_out(A0_out),
        .lopt(lopt_46),
        .lopt_1(lopt_47),
        .of_m3_addr_conflict(of_m3_addr_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
  microblaze_microblaze_0_0_carry_and_bb_303 OF_M3_Mask_Stall
       (.lopt(lopt_48),
        .lopt_1(lopt_49),
        .lopt_2(lopt_50),
        .m3_complete_in_later_stage(m3_complete_in_later_stage),
        .m3_div_stall(m3_div_stall),
        .of_m3_stall_conflict(of_m3_stall_conflict),
        .of_read_m3_write_op_conflict(of_read_m3_write_op_conflict));
endmodule

(* ORIG_REF_NAME = "dsp_module" *) 
module microblaze_microblaze_0_0_dsp_module
   (D,
    \Using_FPGA.DSP48E1_I1 ,
    \Using_FPGA.DSP48E1_I1_0 ,
    Clk,
    Q,
    \Using_FPGA.DSP48E1_I1_1 );
  output [16:0]D;
  output [47:0]\Using_FPGA.DSP48E1_I1 ;
  input \Using_FPGA.DSP48E1_I1_0 ;
  input Clk;
  input [16:0]Q;
  input [16:0]\Using_FPGA.DSP48E1_I1_1 ;

  wire Clk;
  wire [16:0]D;
  wire [16:0]Q;
  wire [47:0]\Using_FPGA.DSP48E1_I1 ;
  wire \Using_FPGA.DSP48E1_I1_0 ;
  wire [16:0]\Using_FPGA.DSP48E1_I1_1 ;

  microblaze_microblaze_0_0_MB_DSP48E1 \Using_DSP48E1.DSP48E1_I1 
       (.Clk(Clk),
        .D(D),
        .Q(Q),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1 ),
        .\Using_FPGA.DSP48E1_I1_1 (\Using_FPGA.DSP48E1_I1_0 ),
        .\Using_FPGA.DSP48E1_I1_2 (\Using_FPGA.DSP48E1_I1_1 ));
endmodule

(* ORIG_REF_NAME = "dsp_module" *) 
module microblaze_microblaze_0_0_dsp_module__parameterized1
   (PCOUT,
    \Using_FPGA.DSP48E1_I1 ,
    m0_piperun,
    Clk,
    Q,
    \Using_FPGA.DSP48E1_I1_0 ,
    \Using_FPGA.DSP48E1_I1_1 );
  output [47:0]PCOUT;
  input \Using_FPGA.DSP48E1_I1 ;
  input m0_piperun;
  input Clk;
  input [16:0]Q;
  input [14:0]\Using_FPGA.DSP48E1_I1_0 ;
  input [47:0]\Using_FPGA.DSP48E1_I1_1 ;

  wire Clk;
  wire [47:0]PCOUT;
  wire [16:0]Q;
  wire \Using_FPGA.DSP48E1_I1 ;
  wire [14:0]\Using_FPGA.DSP48E1_I1_0 ;
  wire [47:0]\Using_FPGA.DSP48E1_I1_1 ;
  wire m0_piperun;

  microblaze_microblaze_0_0_MB_DSP48E1__parameterized1 \Using_DSP48E1.DSP48E1_I1 
       (.Clk(Clk),
        .PCOUT(PCOUT),
        .Q(Q),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1 ),
        .\Using_FPGA.DSP48E1_I1_1 (\Using_FPGA.DSP48E1_I1_0 ),
        .\Using_FPGA.DSP48E1_I1_2 (\Using_FPGA.DSP48E1_I1_1 ),
        .m0_piperun(m0_piperun));
endmodule

(* ORIG_REF_NAME = "dsp_module" *) 
module microblaze_microblaze_0_0_dsp_module__parameterized3
   (m1_mul_result,
    \Using_FPGA.DSP48E1_I1 ,
    m0_piperun,
    Clk,
    Q,
    \Using_FPGA.DSP48E1_I1_0 ,
    PCOUT);
  output [14:0]m1_mul_result;
  input \Using_FPGA.DSP48E1_I1 ;
  input m0_piperun;
  input Clk;
  input [14:0]Q;
  input [16:0]\Using_FPGA.DSP48E1_I1_0 ;
  input [47:0]PCOUT;

  wire Clk;
  wire [47:0]PCOUT;
  wire [14:0]Q;
  wire \Using_FPGA.DSP48E1_I1 ;
  wire [16:0]\Using_FPGA.DSP48E1_I1_0 ;
  wire m0_piperun;
  wire [14:0]m1_mul_result;

  microblaze_microblaze_0_0_MB_DSP48E1__parameterized3 \Using_DSP48E1.DSP48E1_I1 
       (.Clk(Clk),
        .PCOUT(PCOUT),
        .Q(Q),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1 ),
        .\Using_FPGA.DSP48E1_I1_1 (\Using_FPGA.DSP48E1_I1_0 ),
        .m0_piperun(m0_piperun),
        .m1_mul_result(m1_mul_result));
endmodule

(* ORIG_REF_NAME = "exception_registers_ff" *) 
module microblaze_microblaze_0_0_exception_registers_ff
   (WB_Exception_Return_Addr0,
    \wb_PC_i_reg[0]_0 ,
    Q,
    \wb_PC_i_reg[0]_1 ,
    DI,
    S,
    \WB_Exception_Return_Addr_reg[22]_0 ,
    \WB_Exception_Return_Addr_reg[18]_0 ,
    \WB_Exception_Return_Addr_reg[14]_0 ,
    \WB_Exception_Return_Addr_reg[10]_0 ,
    \WB_Exception_Return_Addr_reg[6]_0 ,
    \WB_Exception_Return_Addr_reg[2]_0 ,
    \WB_Exception_Return_Addr_reg[0]_0 ,
    sync_reset,
    \wb_PC_i_reg[31]_0 ,
    Clk,
    m3_piperun,
    \WB_Exception_Return_Addr_reg[0]_1 );
  output [29:0]WB_Exception_Return_Addr0;
  output [31:0]\wb_PC_i_reg[0]_0 ;
  output [31:0]Q;
  input [31:0]\wb_PC_i_reg[0]_1 ;
  input [0:0]DI;
  input [3:0]S;
  input [3:0]\WB_Exception_Return_Addr_reg[22]_0 ;
  input [3:0]\WB_Exception_Return_Addr_reg[18]_0 ;
  input [3:0]\WB_Exception_Return_Addr_reg[14]_0 ;
  input [3:0]\WB_Exception_Return_Addr_reg[10]_0 ;
  input [3:0]\WB_Exception_Return_Addr_reg[6]_0 ;
  input [3:0]\WB_Exception_Return_Addr_reg[2]_0 ;
  input [1:0]\WB_Exception_Return_Addr_reg[0]_0 ;
  input sync_reset;
  input [0:0]\wb_PC_i_reg[31]_0 ;
  input Clk;
  input m3_piperun;
  input [30:0]\WB_Exception_Return_Addr_reg[0]_1 ;

  wire Clk;
  wire [0:0]DI;
  wire [31:0]Q;
  wire [3:0]S;
  wire [29:0]WB_Exception_Return_Addr0;
  wire WB_Exception_Return_Addr0_carry__0_n_0;
  wire WB_Exception_Return_Addr0_carry__0_n_1;
  wire WB_Exception_Return_Addr0_carry__0_n_2;
  wire WB_Exception_Return_Addr0_carry__0_n_3;
  wire WB_Exception_Return_Addr0_carry__1_n_0;
  wire WB_Exception_Return_Addr0_carry__1_n_1;
  wire WB_Exception_Return_Addr0_carry__1_n_2;
  wire WB_Exception_Return_Addr0_carry__1_n_3;
  wire WB_Exception_Return_Addr0_carry__2_n_0;
  wire WB_Exception_Return_Addr0_carry__2_n_1;
  wire WB_Exception_Return_Addr0_carry__2_n_2;
  wire WB_Exception_Return_Addr0_carry__2_n_3;
  wire WB_Exception_Return_Addr0_carry__3_n_0;
  wire WB_Exception_Return_Addr0_carry__3_n_1;
  wire WB_Exception_Return_Addr0_carry__3_n_2;
  wire WB_Exception_Return_Addr0_carry__3_n_3;
  wire WB_Exception_Return_Addr0_carry__4_n_0;
  wire WB_Exception_Return_Addr0_carry__4_n_1;
  wire WB_Exception_Return_Addr0_carry__4_n_2;
  wire WB_Exception_Return_Addr0_carry__4_n_3;
  wire WB_Exception_Return_Addr0_carry__5_n_0;
  wire WB_Exception_Return_Addr0_carry__5_n_1;
  wire WB_Exception_Return_Addr0_carry__5_n_2;
  wire WB_Exception_Return_Addr0_carry__5_n_3;
  wire WB_Exception_Return_Addr0_carry__6_n_3;
  wire WB_Exception_Return_Addr0_carry_n_0;
  wire WB_Exception_Return_Addr0_carry_n_1;
  wire WB_Exception_Return_Addr0_carry_n_2;
  wire WB_Exception_Return_Addr0_carry_n_3;
  wire [1:0]\WB_Exception_Return_Addr_reg[0]_0 ;
  wire [30:0]\WB_Exception_Return_Addr_reg[0]_1 ;
  wire [3:0]\WB_Exception_Return_Addr_reg[10]_0 ;
  wire [3:0]\WB_Exception_Return_Addr_reg[14]_0 ;
  wire [3:0]\WB_Exception_Return_Addr_reg[18]_0 ;
  wire [3:0]\WB_Exception_Return_Addr_reg[22]_0 ;
  wire [3:0]\WB_Exception_Return_Addr_reg[2]_0 ;
  wire [3:0]\WB_Exception_Return_Addr_reg[6]_0 ;
  wire m3_piperun;
  wire sync_reset;
  wire [31:0]\wb_PC_i_reg[0]_0 ;
  wire [31:0]\wb_PC_i_reg[0]_1 ;
  wire [0:0]\wb_PC_i_reg[31]_0 ;
  wire [3:1]NLW_WB_Exception_Return_Addr0_carry__6_CO_UNCONNECTED;
  wire [3:2]NLW_WB_Exception_Return_Addr0_carry__6_O_UNCONNECTED;

  CARRY4 WB_Exception_Return_Addr0_carry
       (.CI(1'b0),
        .CO({WB_Exception_Return_Addr0_carry_n_0,WB_Exception_Return_Addr0_carry_n_1,WB_Exception_Return_Addr0_carry_n_2,WB_Exception_Return_Addr0_carry_n_3}),
        .CYINIT(1'b0),
        .DI({\wb_PC_i_reg[0]_1 [4:3],DI,1'b0}),
        .O(WB_Exception_Return_Addr0[3:0]),
        .S(S));
  CARRY4 WB_Exception_Return_Addr0_carry__0
       (.CI(WB_Exception_Return_Addr0_carry_n_0),
        .CO({WB_Exception_Return_Addr0_carry__0_n_0,WB_Exception_Return_Addr0_carry__0_n_1,WB_Exception_Return_Addr0_carry__0_n_2,WB_Exception_Return_Addr0_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI(\wb_PC_i_reg[0]_1 [8:5]),
        .O(WB_Exception_Return_Addr0[7:4]),
        .S(\WB_Exception_Return_Addr_reg[22]_0 ));
  CARRY4 WB_Exception_Return_Addr0_carry__1
       (.CI(WB_Exception_Return_Addr0_carry__0_n_0),
        .CO({WB_Exception_Return_Addr0_carry__1_n_0,WB_Exception_Return_Addr0_carry__1_n_1,WB_Exception_Return_Addr0_carry__1_n_2,WB_Exception_Return_Addr0_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI(\wb_PC_i_reg[0]_1 [12:9]),
        .O(WB_Exception_Return_Addr0[11:8]),
        .S(\WB_Exception_Return_Addr_reg[18]_0 ));
  CARRY4 WB_Exception_Return_Addr0_carry__2
       (.CI(WB_Exception_Return_Addr0_carry__1_n_0),
        .CO({WB_Exception_Return_Addr0_carry__2_n_0,WB_Exception_Return_Addr0_carry__2_n_1,WB_Exception_Return_Addr0_carry__2_n_2,WB_Exception_Return_Addr0_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI(\wb_PC_i_reg[0]_1 [16:13]),
        .O(WB_Exception_Return_Addr0[15:12]),
        .S(\WB_Exception_Return_Addr_reg[14]_0 ));
  CARRY4 WB_Exception_Return_Addr0_carry__3
       (.CI(WB_Exception_Return_Addr0_carry__2_n_0),
        .CO({WB_Exception_Return_Addr0_carry__3_n_0,WB_Exception_Return_Addr0_carry__3_n_1,WB_Exception_Return_Addr0_carry__3_n_2,WB_Exception_Return_Addr0_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI(\wb_PC_i_reg[0]_1 [20:17]),
        .O(WB_Exception_Return_Addr0[19:16]),
        .S(\WB_Exception_Return_Addr_reg[10]_0 ));
  CARRY4 WB_Exception_Return_Addr0_carry__4
       (.CI(WB_Exception_Return_Addr0_carry__3_n_0),
        .CO({WB_Exception_Return_Addr0_carry__4_n_0,WB_Exception_Return_Addr0_carry__4_n_1,WB_Exception_Return_Addr0_carry__4_n_2,WB_Exception_Return_Addr0_carry__4_n_3}),
        .CYINIT(1'b0),
        .DI(\wb_PC_i_reg[0]_1 [24:21]),
        .O(WB_Exception_Return_Addr0[23:20]),
        .S(\WB_Exception_Return_Addr_reg[6]_0 ));
  CARRY4 WB_Exception_Return_Addr0_carry__5
       (.CI(WB_Exception_Return_Addr0_carry__4_n_0),
        .CO({WB_Exception_Return_Addr0_carry__5_n_0,WB_Exception_Return_Addr0_carry__5_n_1,WB_Exception_Return_Addr0_carry__5_n_2,WB_Exception_Return_Addr0_carry__5_n_3}),
        .CYINIT(1'b0),
        .DI(\wb_PC_i_reg[0]_1 [28:25]),
        .O(WB_Exception_Return_Addr0[27:24]),
        .S(\WB_Exception_Return_Addr_reg[2]_0 ));
  CARRY4 WB_Exception_Return_Addr0_carry__6
       (.CI(WB_Exception_Return_Addr0_carry__5_n_0),
        .CO({NLW_WB_Exception_Return_Addr0_carry__6_CO_UNCONNECTED[3:1],WB_Exception_Return_Addr0_carry__6_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,\wb_PC_i_reg[0]_1 [29]}),
        .O({NLW_WB_Exception_Return_Addr0_carry__6_O_UNCONNECTED[3:2],WB_Exception_Return_Addr0[29:28]}),
        .S({1'b0,1'b0,\WB_Exception_Return_Addr_reg[0]_0 }));
  FDRE \WB_Exception_Return_Addr_reg[0] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [30]),
        .Q(Q[31]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[10] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [20]),
        .Q(Q[21]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[11] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [19]),
        .Q(Q[20]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[12] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [18]),
        .Q(Q[19]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[13] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [17]),
        .Q(Q[18]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[14] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [16]),
        .Q(Q[17]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[15] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [15]),
        .Q(Q[16]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[16] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [14]),
        .Q(Q[15]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[17] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [13]),
        .Q(Q[14]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[18] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [12]),
        .Q(Q[13]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[19] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [11]),
        .Q(Q[12]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[1] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [29]),
        .Q(Q[30]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[20] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [10]),
        .Q(Q[11]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[21] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [9]),
        .Q(Q[10]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[22] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [8]),
        .Q(Q[9]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[23] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [7]),
        .Q(Q[8]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[24] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [6]),
        .Q(Q[7]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[25] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [5]),
        .Q(Q[6]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[26] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [4]),
        .Q(Q[5]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[27] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [3]),
        .Q(Q[4]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[28] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [2]),
        .Q(Q[3]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[29] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [1]),
        .Q(Q[2]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[2] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [28]),
        .Q(Q[29]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[30] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [0]),
        .Q(Q[1]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[31] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\wb_PC_i_reg[0]_1 [0]),
        .Q(Q[0]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[3] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [27]),
        .Q(Q[28]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[4] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [26]),
        .Q(Q[27]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[5] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [25]),
        .Q(Q[26]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[6] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [24]),
        .Q(Q[25]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[7] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [23]),
        .Q(Q[24]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[8] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [22]),
        .Q(Q[23]),
        .R(sync_reset));
  FDRE \WB_Exception_Return_Addr_reg[9] 
       (.C(Clk),
        .CE(m3_piperun),
        .D(\WB_Exception_Return_Addr_reg[0]_1 [21]),
        .Q(Q[22]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[0] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [31]),
        .Q(\wb_PC_i_reg[0]_0 [31]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[10] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [21]),
        .Q(\wb_PC_i_reg[0]_0 [21]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[11] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [20]),
        .Q(\wb_PC_i_reg[0]_0 [20]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[12] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [19]),
        .Q(\wb_PC_i_reg[0]_0 [19]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[13] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [18]),
        .Q(\wb_PC_i_reg[0]_0 [18]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[14] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [17]),
        .Q(\wb_PC_i_reg[0]_0 [17]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[15] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [16]),
        .Q(\wb_PC_i_reg[0]_0 [16]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[16] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [15]),
        .Q(\wb_PC_i_reg[0]_0 [15]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[17] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [14]),
        .Q(\wb_PC_i_reg[0]_0 [14]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[18] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [13]),
        .Q(\wb_PC_i_reg[0]_0 [13]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[19] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [12]),
        .Q(\wb_PC_i_reg[0]_0 [12]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[1] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [30]),
        .Q(\wb_PC_i_reg[0]_0 [30]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[20] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [11]),
        .Q(\wb_PC_i_reg[0]_0 [11]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[21] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [10]),
        .Q(\wb_PC_i_reg[0]_0 [10]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[22] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [9]),
        .Q(\wb_PC_i_reg[0]_0 [9]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[23] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [8]),
        .Q(\wb_PC_i_reg[0]_0 [8]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[24] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [7]),
        .Q(\wb_PC_i_reg[0]_0 [7]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[25] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [6]),
        .Q(\wb_PC_i_reg[0]_0 [6]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[26] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [5]),
        .Q(\wb_PC_i_reg[0]_0 [5]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[27] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [4]),
        .Q(\wb_PC_i_reg[0]_0 [4]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[28] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [3]),
        .Q(\wb_PC_i_reg[0]_0 [3]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[29] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [2]),
        .Q(\wb_PC_i_reg[0]_0 [2]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[2] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [29]),
        .Q(\wb_PC_i_reg[0]_0 [29]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[30] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [1]),
        .Q(\wb_PC_i_reg[0]_0 [1]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[31] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [0]),
        .Q(\wb_PC_i_reg[0]_0 [0]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[3] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [28]),
        .Q(\wb_PC_i_reg[0]_0 [28]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[4] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [27]),
        .Q(\wb_PC_i_reg[0]_0 [27]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[5] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [26]),
        .Q(\wb_PC_i_reg[0]_0 [26]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[6] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [25]),
        .Q(\wb_PC_i_reg[0]_0 [25]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[7] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [24]),
        .Q(\wb_PC_i_reg[0]_0 [24]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[8] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [23]),
        .Q(\wb_PC_i_reg[0]_0 [23]),
        .R(sync_reset));
  FDRE \wb_PC_i_reg[9] 
       (.C(Clk),
        .CE(\wb_PC_i_reg[31]_0 ),
        .D(\wb_PC_i_reg[0]_1 [22]),
        .Q(\wb_PC_i_reg[0]_0 [22]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit
   (out,
    reset_temp,
    Clk);
  output [0:0]out;
  input reset_temp;
  input Clk;

  wire Clk;
  wire reset_temp;
  (* async_reg = "true" *) wire [1:2]sync;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(reset_temp),
        .Q(sync[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit_0
   (out,
    SR,
    Wakeup,
    Clk);
  output [0:0]out;
  input [0:0]SR;
  input [0:0]Wakeup;
  input Clk;

  wire Clk;
  wire [0:0]SR;
  wire [0:0]Wakeup;
  (* async_reg = "true" *) wire [1:2]sync;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Wakeup),
        .Q(sync[1]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit_1
   (out,
    SR,
    Wakeup,
    Clk);
  output [0:0]out;
  input [0:0]SR;
  input [0:0]Wakeup;
  input Clk;

  wire Clk;
  wire [0:0]SR;
  wire [0:0]Wakeup;
  (* async_reg = "true" *) wire [1:2]sync;

  assign out[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Wakeup),
        .Q(sync[1]),
        .R(SR));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit_30
   (sample_synced,
    p_97_out,
    Q,
    sync_reset,
    D,
    Clk);
  output [0:0]sample_synced;
  output p_97_out;
  input [0:0]Q;
  input sync_reset;
  input [0:0]D;
  input Clk;

  wire Clk;
  wire [0:0]D;
  wire [0:0]Q;
  wire p_97_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.normal_stop_cmd_i_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(p_97_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(D),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit_31
   (sample_synced,
    p_94_out,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output p_94_out;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire p_94_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.force_stop_cmd_i_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(p_94_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit_32
   (sample_synced,
    p_91_out,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output p_91_out;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire p_91_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.start_single_cmd_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(p_91_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit_33
   (sample_synced,
    p_89_out,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output p_89_out;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire p_89_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.read_register_MSR_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(p_89_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit_34
   (sample_synced,
    p_86_out,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output p_86_out;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire p_86_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.read_register_PC_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(p_86_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit_35
   (sample_synced,
    \Use_Async_Reset.sync_reset_reg ,
    sync_reset,
    \Serial_Dbg_Intf.trig_in_1_reg ,
    Q,
    Dbg_Trig_In,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output \Use_Async_Reset.sync_reset_reg ;
  input sync_reset;
  input [1:0]\Serial_Dbg_Intf.trig_in_1_reg ;
  input [2:0]Q;
  input [0:0]Dbg_Trig_In;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_In;
  wire [2:0]Q;
  wire \Serial_Dbg_Intf.trig_in_1_i_2_n_0 ;
  wire [1:0]\Serial_Dbg_Intf.trig_in_1_reg ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire \Use_Async_Reset.sync_reset_reg ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT4 #(
    .INIT(16'h2202)) 
    \Serial_Dbg_Intf.trig_in_1_i_1 
       (.I0(\Serial_Dbg_Intf.trig_in_1_i_2_n_0 ),
        .I1(sync_reset),
        .I2(\Serial_Dbg_Intf.trig_in_1_reg [0]),
        .I3(Q[0]),
        .O(\Use_Async_Reset.sync_reset_reg ));
  LUT5 #(
    .INIT(32'hFFFF22F2)) 
    \Serial_Dbg_Intf.trig_in_1_i_2 
       (.I0(sync[2]),
        .I1(Q[1]),
        .I2(\Serial_Dbg_Intf.trig_in_1_reg [1]),
        .I3(Q[2]),
        .I4(Dbg_Trig_In),
        .O(\Serial_Dbg_Intf.trig_in_1_i_2_n_0 ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit_36
   (sample_synced,
    p_79_out,
    Q,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  output p_79_out;
  input [0:0]Q;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]Q;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire p_79_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT2 #(
    .INIT(4'h2)) 
    \Serial_Dbg_Intf.if_debug_ready_i_i_1 
       (.I0(sync[2]),
        .I1(Q),
        .O(p_79_out));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit_37
   (sample_synced,
    p_11_out,
    \Serial_Dbg_Intf.trig_ack_out_1_reg ,
    Q,
    \Serial_Dbg_Intf.continue_from_brk_reg ,
    Dbg_Trig_Ack_Out,
    sync_reset,
    Dbg_Trig_Out,
    Clk);
  output [0:0]sample_synced;
  output p_11_out;
  output \Serial_Dbg_Intf.trig_ack_out_1_reg ;
  input [1:0]Q;
  input [0:0]\Serial_Dbg_Intf.continue_from_brk_reg ;
  input [0:0]Dbg_Trig_Ack_Out;
  input sync_reset;
  input [0:0]Dbg_Trig_Out;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_Out;
  wire [1:0]Q;
  wire [0:0]\Serial_Dbg_Intf.continue_from_brk_reg ;
  wire \Serial_Dbg_Intf.trig_ack_out_1_reg ;
  wire p_11_out;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  LUT4 #(
    .INIT(16'h4F44)) 
    \Serial_Dbg_Intf.continue_from_brk_i_1 
       (.I0(Q[0]),
        .I1(sync[2]),
        .I2(Q[1]),
        .I3(\Serial_Dbg_Intf.continue_from_brk_reg ),
        .O(p_11_out));
  LUT4 #(
    .INIT(16'h2302)) 
    \Serial_Dbg_Intf.trig_ack_out_1_i_1 
       (.I0(Dbg_Trig_Ack_Out),
        .I1(sync_reset),
        .I2(Q[0]),
        .I3(sync[2]),
        .O(\Serial_Dbg_Intf.trig_ack_out_1_reg ));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit_38
   (sample_synced,
    sync_reset,
    Dbg_Trig_Ack_In,
    Clk);
  output [0:0]sample_synced;
  input sync_reset;
  input [0:0]Dbg_Trig_Ack_In;
  input Clk;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_In;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Ack_In),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit_39
   (sample_synced,
    sync_reset,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    Clk);
  output [0:0]sample_synced;
  input sync_reset;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input Clk;

  wire Clk;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  (* async_reg = "true" *) wire [1:2]sync;
  wire sync_reset;

  assign sample_synced[0] = sync[2];
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[1] 
       (.C(Clk),
        .CE(1'b1),
        .D(\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .Q(sync[1]),
        .R(sync_reset));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Synchronize.use_sync_reset.sync_reg[2] 
       (.C(Clk),
        .CE(1'b1),
        .D(sync[1]),
        .Q(sync[2]),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit__parameterized2
   (D,
    dbg_brki_hit,
    Dbg_Clk,
    async_reset);
  output [0:0]D;
  input dbg_brki_hit;
  input Dbg_Clk;
  input async_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire async_reset;
  wire dbg_brki_hit;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(dbg_brki_hit),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit__parameterized2_10
   (D,
    running_clock,
    Dbg_Clk,
    async_reset);
  output [0:0]D;
  input running_clock;
  input Dbg_Clk;
  input async_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire async_reset;
  wire running_clock;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(running_clock),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit__parameterized2_11
   (D,
    Sleep,
    Dbg_Clk,
    async_reset);
  output [0:0]D;
  input Sleep;
  input Dbg_Clk;
  input async_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Sleep;
  wire async_reset;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(Sleep),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit__parameterized2_12
   (D,
    \Single_Synchronize.use_async_reset.sync_reg_0 ,
    Dbg_Clk,
    async_reset);
  output [0:0]D;
  input \Single_Synchronize.use_async_reset.sync_reg_0 ;
  input Dbg_Clk;
  input async_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire \Single_Synchronize.use_async_reset.sync_reg_0 ;
  wire async_reset;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(\Single_Synchronize.use_async_reset.sync_reg_0 ),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit__parameterized2_40
   (D,
    async_reset,
    Raw,
    Dbg_Clk,
    Scan_Reset,
    Scan_En,
    Config_Reset,
    Scan_Reset_Sel);
  output [0:0]D;
  output async_reset;
  input Raw;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_En;
  input Config_Reset;
  input Scan_Reset_Sel;

  wire Config_Reset;
  wire [0:0]D;
  wire Dbg_Clk;
  wire Raw;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  LUT4 #(
    .INIT(16'h2230)) 
    \Single_Synchronize.use_async_reset.sync_i_1 
       (.I0(Scan_Reset),
        .I1(Scan_En),
        .I2(Config_Reset),
        .I3(Scan_Reset_Sel),
        .O(async_reset));
  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(Raw),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit__parameterized2_9
   (D,
    Pause,
    Dbg_Clk,
    async_reset);
  output [0:0]D;
  input Pause;
  input Dbg_Clk;
  input async_reset;

  wire [0:0]D;
  wire Dbg_Clk;
  wire Pause;
  wire async_reset;

  FDCE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_async_reset.sync_reg 
       (.C(Dbg_Clk),
        .CE(1'b1),
        .CLR(async_reset),
        .D(Pause),
        .Q(D));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit__parameterized4
   (\Serial_Dbg_Intf.force_stop_cmd_i_reg ,
    sync_reset,
    LOCKSTEP_Master_Out,
    Clk,
    dbg_continue_i_reg,
    dbg_continue_i_reg_0,
    dbg_continue_i_reg_1,
    dbg_continue_i_reg_2,
    dbg_continue_i_reg_3,
    start_single_cmd,
    if0_pause);
  output \Serial_Dbg_Intf.force_stop_cmd_i_reg ;
  input sync_reset;
  input [1:0]LOCKSTEP_Master_Out;
  input Clk;
  input dbg_continue_i_reg;
  input dbg_continue_i_reg_0;
  input dbg_continue_i_reg_1;
  input dbg_continue_i_reg_2;
  input dbg_continue_i_reg_3;
  input start_single_cmd;
  input if0_pause;

  wire Clk;
  wire [1:0]LOCKSTEP_Master_Out;
  wire \Serial_Dbg_Intf.force_stop_cmd_i_reg ;
  wire dbg_continue_i_i_2_n_0;
  wire dbg_continue_i_reg;
  wire dbg_continue_i_reg_0;
  wire dbg_continue_i_reg_1;
  wire dbg_continue_i_reg_2;
  wire dbg_continue_i_reg_3;
  wire dbg_wakeup_synced;
  wire if0_pause;
  wire start_single_cmd;
  wire sync_reset;

  FDRE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_sync_reset.sync_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(LOCKSTEP_Master_Out[1]),
        .Q(dbg_wakeup_synced),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'hFF00FF00FF00FE00)) 
    dbg_continue_i_i_1
       (.I0(dbg_continue_i_reg_2),
        .I1(dbg_continue_i_reg_3),
        .I2(start_single_cmd),
        .I3(if0_pause),
        .I4(dbg_continue_i_i_2_n_0),
        .I5(LOCKSTEP_Master_Out[0]),
        .O(\Serial_Dbg_Intf.force_stop_cmd_i_reg ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    dbg_continue_i_i_2
       (.I0(dbg_continue_i_reg),
        .I1(dbg_continue_i_reg_0),
        .I2(dbg_wakeup_synced),
        .I3(dbg_continue_i_reg_1),
        .O(dbg_continue_i_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit__parameterized4_13
   (trig_ack_in_0_synced,
    trig_in_0_reg,
    sync_reset,
    Dbg_Trig_Ack_In,
    Clk,
    Dbg_Trig_In,
    D,
    mb_halted_1,
    trig_ack_in_0_synced_1);
  output trig_ack_in_0_synced;
  output trig_in_0_reg;
  input sync_reset;
  input [0:0]Dbg_Trig_Ack_In;
  input Clk;
  input [0:0]Dbg_Trig_In;
  input [0:0]D;
  input mb_halted_1;
  input trig_ack_in_0_synced_1;

  wire Clk;
  wire [0:0]D;
  wire [0:0]Dbg_Trig_Ack_In;
  wire [0:0]Dbg_Trig_In;
  wire mb_halted_1;
  wire sync_reset;
  wire trig_ack_in_0_synced;
  wire trig_ack_in_0_synced_1;
  wire trig_in_0_reg;

  FDRE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_sync_reset.sync_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Ack_In),
        .Q(trig_ack_in_0_synced),
        .R(sync_reset));
  LUT6 #(
    .INIT(64'h00AE00AE000000AE)) 
    trig_in_0_i_1
       (.I0(Dbg_Trig_In),
        .I1(D),
        .I2(mb_halted_1),
        .I3(sync_reset),
        .I4(trig_ack_in_0_synced),
        .I5(trig_ack_in_0_synced_1),
        .O(trig_in_0_reg));
endmodule

(* ORIG_REF_NAME = "mb_sync_bit" *) 
module microblaze_microblaze_0_0_mb_sync_bit__parameterized4_14
   (trig_out_0_synced,
    \Performance_Debug_Control.trig_ack_out_0_reg ,
    sync_reset,
    Dbg_Trig_Out,
    Clk,
    Dbg_Trig_Ack_Out,
    trig_out_0_synced_1);
  output trig_out_0_synced;
  output \Performance_Debug_Control.trig_ack_out_0_reg ;
  input sync_reset;
  input [0:0]Dbg_Trig_Out;
  input Clk;
  input [0:0]Dbg_Trig_Ack_Out;
  input trig_out_0_synced_1;

  wire Clk;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_Out;
  wire \Performance_Debug_Control.trig_ack_out_0_reg ;
  wire sync_reset;
  wire trig_out_0_synced;
  wire trig_out_0_synced_1;

  LUT4 #(
    .INIT(16'h2302)) 
    \Performance_Debug_Control.trig_ack_out_0_i_1 
       (.I0(Dbg_Trig_Ack_Out),
        .I1(sync_reset),
        .I2(trig_out_0_synced_1),
        .I3(trig_out_0_synced),
        .O(\Performance_Debug_Control.trig_ack_out_0_reg ));
  FDRE #(
    .INIT(1'b0)) 
    \Single_Synchronize.use_sync_reset.sync_reg 
       (.C(Clk),
        .CE(1'b1),
        .D(Dbg_Trig_Out),
        .Q(trig_out_0_synced),
        .R(sync_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_vec" *) 
module microblaze_microblaze_0_0_mb_sync_vec
   (D,
    async_reset,
    Raw,
    Dbg_Clk,
    Scan_Reset,
    Scan_En,
    Config_Reset,
    Scan_Reset_Sel);
  output [0:0]D;
  output async_reset;
  input Raw;
  input Dbg_Clk;
  input Scan_Reset;
  input Scan_En;
  input Config_Reset;
  input Scan_Reset_Sel;

  wire Config_Reset;
  wire [0:0]D;
  wire Dbg_Clk;
  wire Raw;
  wire Scan_En;
  wire Scan_Reset;
  wire Scan_Reset_Sel;
  wire async_reset;

  microblaze_microblaze_0_0_mb_sync_bit__parameterized2_40 \sync_bits[0].sync_bit 
       (.Config_Reset(Config_Reset),
        .D(D),
        .Dbg_Clk(Dbg_Clk),
        .Raw(Raw),
        .Scan_En(Scan_En),
        .Scan_Reset(Scan_Reset),
        .Scan_Reset_Sel(Scan_Reset_Sel),
        .async_reset(async_reset));
endmodule

(* ORIG_REF_NAME = "mb_sync_vec" *) 
module microblaze_microblaze_0_0_mb_sync_vec__parameterized1
   (sample_synced,
    p_11_out,
    \Serial_Dbg_Intf.trig_ack_out_1_reg ,
    \Use_Async_Reset.sync_reset_reg ,
    p_91_out,
    p_94_out,
    p_79_out,
    p_89_out,
    p_86_out,
    p_97_out,
    Q,
    Dbg_Trig_Ack_Out,
    sync_reset,
    Dbg_Trig_In,
    D,
    Clk,
    \Synchronize.use_sync_reset.sync_reg[1] ,
    \Synchronize.use_sync_reset.sync_reg[1]_0 ,
    \Synchronize.use_sync_reset.sync_reg[1]_1 ,
    \Synchronize.use_sync_reset.sync_reg[1]_2 ,
    \Synchronize.use_sync_reset.sync_reg[1]_3 ,
    Dbg_Trig_Out,
    Dbg_Trig_Ack_In,
    \Synchronize.use_sync_reset.sync_reg[1]_4 );
  output [0:9]sample_synced;
  output p_11_out;
  output \Serial_Dbg_Intf.trig_ack_out_1_reg ;
  output \Use_Async_Reset.sync_reset_reg ;
  output p_91_out;
  output p_94_out;
  output p_79_out;
  output p_89_out;
  output p_86_out;
  output p_97_out;
  input [8:0]Q;
  input [0:0]Dbg_Trig_Ack_Out;
  input sync_reset;
  input [0:0]Dbg_Trig_In;
  input [0:0]D;
  input Clk;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  input [1:0]\Synchronize.use_sync_reset.sync_reg[1]_1 ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_2 ;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_3 ;
  input [0:0]Dbg_Trig_Out;
  input [0:0]Dbg_Trig_Ack_In;
  input [0:0]\Synchronize.use_sync_reset.sync_reg[1]_4 ;

  wire Clk;
  wire [0:0]D;
  wire [0:0]Dbg_Trig_Ack_In;
  wire [0:0]Dbg_Trig_Ack_Out;
  wire [0:0]Dbg_Trig_In;
  wire [0:0]Dbg_Trig_Out;
  wire [8:0]Q;
  wire \Serial_Dbg_Intf.trig_ack_out_1_reg ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1] ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_0 ;
  wire [1:0]\Synchronize.use_sync_reset.sync_reg[1]_1 ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_2 ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_3 ;
  wire [0:0]\Synchronize.use_sync_reset.sync_reg[1]_4 ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire p_11_out;
  wire p_79_out;
  wire p_86_out;
  wire p_89_out;
  wire p_91_out;
  wire p_94_out;
  wire p_97_out;
  wire [0:9]sample_synced;
  wire sync_reset;

  microblaze_microblaze_0_0_mb_sync_bit_30 \sync_bits[0].sync_bit 
       (.Clk(Clk),
        .D(D),
        .Q(Q[8]),
        .p_97_out(p_97_out),
        .sample_synced(sample_synced[0]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_mb_sync_bit_31 \sync_bits[1].sync_bit 
       (.Clk(Clk),
        .Q(Q[7]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1] ),
        .p_94_out(p_94_out),
        .sample_synced(sample_synced[1]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_mb_sync_bit_32 \sync_bits[2].sync_bit 
       (.Clk(Clk),
        .Q(Q[6]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_0 ),
        .p_91_out(p_91_out),
        .sample_synced(sample_synced[2]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_mb_sync_bit_33 \sync_bits[3].sync_bit 
       (.Clk(Clk),
        .Q(Q[5]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_1 [1]),
        .p_89_out(p_89_out),
        .sample_synced(sample_synced[3]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_mb_sync_bit_34 \sync_bits[4].sync_bit 
       (.Clk(Clk),
        .Q(Q[4]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_1 [0]),
        .p_86_out(p_86_out),
        .sample_synced(sample_synced[4]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_mb_sync_bit_35 \sync_bits[5].sync_bit 
       (.Clk(Clk),
        .Dbg_Trig_In(Dbg_Trig_In),
        .Q({Q[6],Q[3],Q[0]}),
        .\Serial_Dbg_Intf.trig_in_1_reg ({sample_synced[2],sample_synced[8]}),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_2 ),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .sample_synced(sample_synced[5]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_mb_sync_bit_36 \sync_bits[6].sync_bit 
       (.Clk(Clk),
        .Q(Q[2]),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_3 ),
        .p_79_out(p_79_out),
        .sample_synced(sample_synced[6]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_mb_sync_bit_37 \sync_bits[7].sync_bit 
       (.Clk(Clk),
        .Dbg_Trig_Ack_Out(Dbg_Trig_Ack_Out),
        .Dbg_Trig_Out(Dbg_Trig_Out),
        .Q({Q[3],Q[1]}),
        .\Serial_Dbg_Intf.continue_from_brk_reg (sample_synced[5]),
        .\Serial_Dbg_Intf.trig_ack_out_1_reg (\Serial_Dbg_Intf.trig_ack_out_1_reg ),
        .p_11_out(p_11_out),
        .sample_synced(sample_synced[7]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_mb_sync_bit_38 \sync_bits[8].sync_bit 
       (.Clk(Clk),
        .Dbg_Trig_Ack_In(Dbg_Trig_Ack_In),
        .sample_synced(sample_synced[8]),
        .sync_reset(sync_reset));
  microblaze_microblaze_0_0_mb_sync_bit_39 \sync_bits[9].sync_bit 
       (.Clk(Clk),
        .\Synchronize.use_sync_reset.sync_reg[1]_0 (\Synchronize.use_sync_reset.sync_reg[1]_4 ),
        .sample_synced(sample_synced[9]),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "mul_unit_ff" *) 
module microblaze_microblaze_0_0_mul_unit_ff
   (m1_mul_result,
    \Using_FPGA.DSP48E1_I1 ,
    Clk,
    Q,
    \Using_FPGA.DSP48E1_I1_0 ,
    m0_piperun,
    sync_reset);
  output [0:31]m1_mul_result;
  input \Using_FPGA.DSP48E1_I1 ;
  input Clk;
  input [31:0]Q;
  input [31:0]\Using_FPGA.DSP48E1_I1_0 ;
  input m0_piperun;
  input sync_reset;

  wire Clk;
  wire [31:0]Q;
  wire \Using_FPGA.DSP48E1_I1 ;
  wire [31:0]\Using_FPGA.DSP48E1_I1_0 ;
  wire [31:47]m0_bd_p;
  wire [0:47]m0_bd_pout;
  wire m0_piperun;
  wire [0:47]m1_ad_pout;
  wire [0:31]m1_mul_result;
  wire sync_reset;

  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[15] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[31]),
        .Q(m1_mul_result[15]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[16] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[32]),
        .Q(m1_mul_result[16]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[17] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[33]),
        .Q(m1_mul_result[17]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[18] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[34]),
        .Q(m1_mul_result[18]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[19] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[35]),
        .Q(m1_mul_result[19]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[20] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[36]),
        .Q(m1_mul_result[20]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[21] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[37]),
        .Q(m1_mul_result[21]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[22] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[38]),
        .Q(m1_mul_result[22]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[23] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[39]),
        .Q(m1_mul_result[23]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[24] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[40]),
        .Q(m1_mul_result[24]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[25] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[41]),
        .Q(m1_mul_result[25]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[26] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[42]),
        .Q(m1_mul_result[26]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[27] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[43]),
        .Q(m1_mul_result[27]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[28] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[44]),
        .Q(m1_mul_result[28]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[29] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[45]),
        .Q(m1_mul_result[29]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[30] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[46]),
        .Q(m1_mul_result[30]),
        .R(sync_reset));
  FDRE \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.M1_Mul_Result_reg[31] 
       (.C(Clk),
        .CE(m0_piperun),
        .D(m0_bd_p[47]),
        .Q(m1_mul_result[31]),
        .R(sync_reset));
  microblaze_microblaze_0_0_dsp_module__parameterized1 \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.dsp_module_I2 
       (.Clk(Clk),
        .PCOUT({m1_ad_pout[0],m1_ad_pout[1],m1_ad_pout[2],m1_ad_pout[3],m1_ad_pout[4],m1_ad_pout[5],m1_ad_pout[6],m1_ad_pout[7],m1_ad_pout[8],m1_ad_pout[9],m1_ad_pout[10],m1_ad_pout[11],m1_ad_pout[12],m1_ad_pout[13],m1_ad_pout[14],m1_ad_pout[15],m1_ad_pout[16],m1_ad_pout[17],m1_ad_pout[18],m1_ad_pout[19],m1_ad_pout[20],m1_ad_pout[21],m1_ad_pout[22],m1_ad_pout[23],m1_ad_pout[24],m1_ad_pout[25],m1_ad_pout[26],m1_ad_pout[27],m1_ad_pout[28],m1_ad_pout[29],m1_ad_pout[30],m1_ad_pout[31],m1_ad_pout[32],m1_ad_pout[33],m1_ad_pout[34],m1_ad_pout[35],m1_ad_pout[36],m1_ad_pout[37],m1_ad_pout[38],m1_ad_pout[39],m1_ad_pout[40],m1_ad_pout[41],m1_ad_pout[42],m1_ad_pout[43],m1_ad_pout[44],m1_ad_pout[45],m1_ad_pout[46],m1_ad_pout[47]}),
        .Q(Q[16:0]),
        .\Using_FPGA.DSP48E1_I1 (\Using_FPGA.DSP48E1_I1 ),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1_0 [31:17]),
        .\Using_FPGA.DSP48E1_I1_1 ({m0_bd_pout[0],m0_bd_pout[1],m0_bd_pout[2],m0_bd_pout[3],m0_bd_pout[4],m0_bd_pout[5],m0_bd_pout[6],m0_bd_pout[7],m0_bd_pout[8],m0_bd_pout[9],m0_bd_pout[10],m0_bd_pout[11],m0_bd_pout[12],m0_bd_pout[13],m0_bd_pout[14],m0_bd_pout[15],m0_bd_pout[16],m0_bd_pout[17],m0_bd_pout[18],m0_bd_pout[19],m0_bd_pout[20],m0_bd_pout[21],m0_bd_pout[22],m0_bd_pout[23],m0_bd_pout[24],m0_bd_pout[25],m0_bd_pout[26],m0_bd_pout[27],m0_bd_pout[28],m0_bd_pout[29],m0_bd_pout[30],m0_bd_pout[31],m0_bd_pout[32],m0_bd_pout[33],m0_bd_pout[34],m0_bd_pout[35],m0_bd_pout[36],m0_bd_pout[37],m0_bd_pout[38],m0_bd_pout[39],m0_bd_pout[40],m0_bd_pout[41],m0_bd_pout[42],m0_bd_pout[43],m0_bd_pout[44],m0_bd_pout[45],m0_bd_pout[46],m0_bd_pout[47]}),
        .m0_piperun(m0_piperun));
  microblaze_microblaze_0_0_dsp_module__parameterized3 \Use_HW_MUL.Using_DSP48_Architectures.No_MUL64.dsp_module_I3 
       (.Clk(Clk),
        .PCOUT({m1_ad_pout[0],m1_ad_pout[1],m1_ad_pout[2],m1_ad_pout[3],m1_ad_pout[4],m1_ad_pout[5],m1_ad_pout[6],m1_ad_pout[7],m1_ad_pout[8],m1_ad_pout[9],m1_ad_pout[10],m1_ad_pout[11],m1_ad_pout[12],m1_ad_pout[13],m1_ad_pout[14],m1_ad_pout[15],m1_ad_pout[16],m1_ad_pout[17],m1_ad_pout[18],m1_ad_pout[19],m1_ad_pout[20],m1_ad_pout[21],m1_ad_pout[22],m1_ad_pout[23],m1_ad_pout[24],m1_ad_pout[25],m1_ad_pout[26],m1_ad_pout[27],m1_ad_pout[28],m1_ad_pout[29],m1_ad_pout[30],m1_ad_pout[31],m1_ad_pout[32],m1_ad_pout[33],m1_ad_pout[34],m1_ad_pout[35],m1_ad_pout[36],m1_ad_pout[37],m1_ad_pout[38],m1_ad_pout[39],m1_ad_pout[40],m1_ad_pout[41],m1_ad_pout[42],m1_ad_pout[43],m1_ad_pout[44],m1_ad_pout[45],m1_ad_pout[46],m1_ad_pout[47]}),
        .Q(Q[31:17]),
        .\Using_FPGA.DSP48E1_I1 (\Using_FPGA.DSP48E1_I1 ),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1_0 [16:0]),
        .m0_piperun(m0_piperun),
        .m1_mul_result({m1_mul_result[0],m1_mul_result[1],m1_mul_result[2],m1_mul_result[3],m1_mul_result[4],m1_mul_result[5],m1_mul_result[6],m1_mul_result[7],m1_mul_result[8],m1_mul_result[9],m1_mul_result[10],m1_mul_result[11],m1_mul_result[12],m1_mul_result[13],m1_mul_result[14]}));
  microblaze_microblaze_0_0_dsp_module \Use_HW_MUL.Using_DSP48_Architectures.dsp_module_I1 
       (.Clk(Clk),
        .D({m0_bd_p[31],m0_bd_p[32],m0_bd_p[33],m0_bd_p[34],m0_bd_p[35],m0_bd_p[36],m0_bd_p[37],m0_bd_p[38],m0_bd_p[39],m0_bd_p[40],m0_bd_p[41],m0_bd_p[42],m0_bd_p[43],m0_bd_p[44],m0_bd_p[45],m0_bd_p[46],m0_bd_p[47]}),
        .Q(Q[16:0]),
        .\Using_FPGA.DSP48E1_I1 ({m0_bd_pout[0],m0_bd_pout[1],m0_bd_pout[2],m0_bd_pout[3],m0_bd_pout[4],m0_bd_pout[5],m0_bd_pout[6],m0_bd_pout[7],m0_bd_pout[8],m0_bd_pout[9],m0_bd_pout[10],m0_bd_pout[11],m0_bd_pout[12],m0_bd_pout[13],m0_bd_pout[14],m0_bd_pout[15],m0_bd_pout[16],m0_bd_pout[17],m0_bd_pout[18],m0_bd_pout[19],m0_bd_pout[20],m0_bd_pout[21],m0_bd_pout[22],m0_bd_pout[23],m0_bd_pout[24],m0_bd_pout[25],m0_bd_pout[26],m0_bd_pout[27],m0_bd_pout[28],m0_bd_pout[29],m0_bd_pout[30],m0_bd_pout[31],m0_bd_pout[32],m0_bd_pout[33],m0_bd_pout[34],m0_bd_pout[35],m0_bd_pout[36],m0_bd_pout[37],m0_bd_pout[38],m0_bd_pout[39],m0_bd_pout[40],m0_bd_pout[41],m0_bd_pout[42],m0_bd_pout[43],m0_bd_pout[44],m0_bd_pout[45],m0_bd_pout[46],m0_bd_pout[47]}),
        .\Using_FPGA.DSP48E1_I1_0 (\Using_FPGA.DSP48E1_I1 ),
        .\Using_FPGA.DSP48E1_I1_1 (\Using_FPGA.DSP48E1_I1_0 [16:0]));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd
   (m3_div_zero_overflow_ex_hold,
    sync_reset,
    Clk,
    \Using_FPGA.Native ,
    m3_div_by_zero,
    m3_div_overflow,
    \Using_FPGA.Native_0 ,
    E);
  output m3_div_zero_overflow_ex_hold;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native ;
  input m3_div_by_zero;
  input m3_div_overflow;
  input \Using_FPGA.Native_0 ;
  input [0:0]E;

  wire Clk;
  wire [0:0]E;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire m3_div_zero_overflow_ex_hold;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_FDR_583 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .E(E),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow(m3_div_overflow),
        .m3_div_zero_overflow_ex_hold(m3_div_zero_overflow_ex_hold),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_139
   (wb_gpr_wr_dbg,
    \Using_FPGA.Native ,
    D,
    Clk);
  output wb_gpr_wr_dbg;
  input \Using_FPGA.Native ;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native ;
  wire wb_gpr_wr_dbg;

  microblaze_microblaze_0_0_MB_FDR_141 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .wb_gpr_wr_dbg(wb_gpr_wr_dbg));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_140
   (wb_gpr_wr,
    wb_reset_reg,
    wb_raw_valid_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    D,
    Clk,
    \Using_FPGA.Native_1 ,
    trace_reg_write_i_reg,
    trace_reg_write_i_reg_0,
    wb_reset,
    \EX_Op2[0]_i_20 ,
    Q);
  output wb_gpr_wr;
  output wb_reset_reg;
  output wb_raw_valid_reg;
  output \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input D;
  input Clk;
  input \Using_FPGA.Native_1 ;
  input trace_reg_write_i_reg;
  input trace_reg_write_i_reg_0;
  input wb_reset;
  input [0:0]\EX_Op2[0]_i_20 ;
  input [0:0]Q;

  wire Clk;
  wire D;
  wire [0:0]\EX_Op2[0]_i_20 ;
  wire [0:0]Q;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire trace_reg_write_i_reg;
  wire trace_reg_write_i_reg_0;
  wire wb_gpr_wr;
  wire wb_raw_valid_reg;
  wire wb_reset;
  wire wb_reset_reg;

  microblaze_microblaze_0_0_MB_FDR \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .\EX_Op2[0]_i_20 (\EX_Op2[0]_i_20 ),
        .Q(Q),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .trace_reg_write_i_reg(trace_reg_write_i_reg),
        .trace_reg_write_i_reg_0(trace_reg_write_i_reg_0),
        .wb_gpr_wr(wb_gpr_wr),
        .wb_raw_valid_reg(wb_raw_valid_reg),
        .wb_reset(wb_reset),
        .wb_reset_reg(wb_reset_reg));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_55
   (ex_gpr_write_dbg,
    \Using_FPGA.Native ,
    D,
    Clk);
  output ex_gpr_write_dbg;
  input \Using_FPGA.Native ;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native ;
  wire ex_gpr_write_dbg;

  microblaze_microblaze_0_0_MB_FDR_582 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .ex_gpr_write_dbg(ex_gpr_write_dbg));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_56
   (ex_gpr_write,
    A4_out,
    ex_raw_valid_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    Clk,
    \Using_FPGA.Native_2 );
  output ex_gpr_write;
  output A4_out;
  output ex_raw_valid_reg;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input D;
  input Clk;
  input \Using_FPGA.Native_2 ;

  wire A4_out;
  wire Clk;
  wire D;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire ex_gpr_write;
  wire ex_raw_valid_reg;

  microblaze_microblaze_0_0_MB_FDR_581 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.A4_out(A4_out),
        .Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (ex_gpr_write),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_2 ),
        .ex_raw_valid_reg(ex_raw_valid_reg));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_57
   (ex_jump_hold,
    flush_pipe_for_rst,
    ex_sleep_i0,
    ex_mbar_decode_reg,
    ex_mbar_decode_reg_0,
    \Using_FPGA.Native ,
    Clk,
    sync_reset,
    \Using_FPGA.Native_0 ,
    ex_mbar_sleep,
    ex_mbar_wait_1,
    ex_first_cycle,
    ex_hibernate_i_reg,
    ex_hibernate_i_reg_0);
  output ex_jump_hold;
  output flush_pipe_for_rst;
  output ex_sleep_i0;
  output ex_mbar_decode_reg;
  output ex_mbar_decode_reg_0;
  input \Using_FPGA.Native ;
  input Clk;
  input sync_reset;
  input \Using_FPGA.Native_0 ;
  input ex_mbar_sleep;
  input ex_mbar_wait_1;
  input ex_first_cycle;
  input ex_hibernate_i_reg;
  input ex_hibernate_i_reg_0;

  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire ex_first_cycle;
  wire ex_hibernate_i_reg;
  wire ex_hibernate_i_reg_0;
  wire ex_jump_hold;
  wire ex_mbar_decode_reg;
  wire ex_mbar_decode_reg_0;
  wire ex_mbar_sleep;
  wire ex_mbar_wait_1;
  wire ex_sleep_i0;
  wire flush_pipe_for_rst;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_FDR_580 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .\Use_Async_Reset.sync_reset_reg (flush_pipe_for_rst),
        .\Using_FPGA.Native_0 (ex_jump_hold),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .ex_first_cycle(ex_first_cycle),
        .ex_hibernate_i_reg(ex_hibernate_i_reg),
        .ex_hibernate_i_reg_0(ex_hibernate_i_reg_0),
        .ex_mbar_decode_reg(ex_mbar_decode_reg),
        .ex_mbar_decode_reg_0(ex_mbar_decode_reg_0),
        .ex_mbar_sleep(ex_mbar_sleep),
        .ex_mbar_wait_1(ex_mbar_wait_1),
        .ex_sleep_i0(ex_sleep_i0),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_60
   (m0_is_div_instr_i,
    sync_reset,
    D,
    Clk);
  output m0_is_div_instr_i;
  input sync_reset;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire m0_is_div_instr_i;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_FDR_567 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .m0_is_div_instr_i(m0_is_div_instr_i),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_61
   (wb_exception_from_m3_reg_rep__0,
    sync_reset,
    Clk,
    \Using_FPGA.Native ,
    m3_div_by_zero,
    m3_div_overflow,
    \Using_FPGA.Native_0 ,
    in0,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output wb_exception_from_m3_reg_rep__0;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native ;
  input m3_div_by_zero;
  input m3_div_overflow;
  input \Using_FPGA.Native_0 ;
  input in0;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire in0;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;

  microblaze_microblaze_0_0_MB_FDR_566 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .in0(in0),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow(m3_div_overflow),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_62
   (m0_exception_from_ex,
    p_43_out__4,
    single_Step_N_reg,
    \Use_Async_Reset.sync_reset_reg ,
    wb_exception_from_m3_reg_rep,
    D_0,
    m0_raw_valid_reg,
    wb_exception_from_m3_reg_rep__0,
    ex_dead_valid_hold_reg,
    wb_exception_from_m3_reg_rep_0,
    of_next_ex_valid,
    \Using_FPGA.Native ,
    D_1,
    D,
    sync_reset,
    D_2,
    Clk,
    A_N201_out,
    m3_exception_taken,
    \Using_FPGA.Native_0 ,
    wb_exception_taken,
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ,
    single_Step_N,
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ,
    E,
    \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ,
    p_48_out,
    ex_first_cycle_reg,
    ex_raw_valid_reg,
    ex_raw_valid_reg_0,
    \Using_FPGA.Native_1 ,
    in0,
    m1_databus_addr_from_m0_reg,
    m1_databus_addr_from_m0_reg_0,
    of_read_imm_reg_raw_reg,
    of_raw_valid,
    of_dead_valid_hold,
    ex_jump,
    ex_jump_nodelay,
    ex_dead_valid_hold,
    of_read_imm_reg_raw_reg_0,
    of_read_imm_reg_raw_reg_1,
    m0_dead_valid_hold,
    m1_databus_addr_from_m0_reg_1,
    m1_databus_addr_from_m0_reg_2,
    m1_exception_from_m0,
    \Using_FPGA.Native_2 ,
    m0_exception_raw_kind);
  output m0_exception_from_ex;
  output p_43_out__4;
  output single_Step_N_reg;
  output \Use_Async_Reset.sync_reset_reg ;
  output wb_exception_from_m3_reg_rep;
  output D_0;
  output m0_raw_valid_reg;
  output wb_exception_from_m3_reg_rep__0;
  output ex_dead_valid_hold_reg;
  output wb_exception_from_m3_reg_rep_0;
  output of_next_ex_valid;
  output \Using_FPGA.Native ;
  output D_1;
  output [2:0]D;
  input sync_reset;
  input D_2;
  input Clk;
  input A_N201_out;
  input m3_exception_taken;
  input \Using_FPGA.Native_0 ;
  input wb_exception_taken;
  input \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  input single_Step_N;
  input \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ;
  input [0:0]E;
  input \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ;
  input p_48_out;
  input ex_first_cycle_reg;
  input ex_raw_valid_reg;
  input ex_raw_valid_reg_0;
  input \Using_FPGA.Native_1 ;
  input in0;
  input m1_databus_addr_from_m0_reg;
  input m1_databus_addr_from_m0_reg_0;
  input of_read_imm_reg_raw_reg;
  input of_raw_valid;
  input of_dead_valid_hold;
  input ex_jump;
  input ex_jump_nodelay;
  input ex_dead_valid_hold;
  input of_read_imm_reg_raw_reg_0;
  input of_read_imm_reg_raw_reg_1;
  input m0_dead_valid_hold;
  input m1_databus_addr_from_m0_reg_1;
  input m1_databus_addr_from_m0_reg_2;
  input m1_exception_from_m0;
  input [0:0]\Using_FPGA.Native_2 ;
  input [2:0]m0_exception_raw_kind;

  wire A_N201_out;
  wire Clk;
  wire [2:0]D;
  wire D_0;
  wire D_1;
  wire D_2;
  wire [0:0]E;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ;
  wire \Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ;
  wire \Use_Async_Reset.sync_reset_reg ;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire [0:0]\Using_FPGA.Native_2 ;
  wire ex_dead_valid_hold;
  wire ex_dead_valid_hold_reg;
  wire ex_first_cycle_reg;
  wire ex_jump;
  wire ex_jump_nodelay;
  wire ex_raw_valid_reg;
  wire ex_raw_valid_reg_0;
  wire in0;
  wire m0_dead_valid_hold;
  wire m0_exception_from_ex;
  wire [2:0]m0_exception_raw_kind;
  wire m0_raw_valid_reg;
  wire m1_databus_addr_from_m0_reg;
  wire m1_databus_addr_from_m0_reg_0;
  wire m1_databus_addr_from_m0_reg_1;
  wire m1_databus_addr_from_m0_reg_2;
  wire m1_exception_from_m0;
  wire m3_exception_taken;
  wire of_dead_valid_hold;
  wire of_next_ex_valid;
  wire of_raw_valid;
  wire of_read_imm_reg_raw_reg;
  wire of_read_imm_reg_raw_reg_0;
  wire of_read_imm_reg_raw_reg_1;
  wire p_43_out__4;
  wire p_48_out;
  wire single_Step_N;
  wire single_Step_N_reg;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep;
  wire wb_exception_from_m3_reg_rep_0;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_taken;

  microblaze_microblaze_0_0_MB_FDR_565 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.A_N201_out(A_N201_out),
        .Clk(Clk),
        .D(D),
        .D_0(D_0),
        .D_1(D_1),
        .D_2(D_2),
        .E(E),
        .\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg (\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 (\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_0 ),
        .\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 (\Performance_Debug_Control.ex_dbg_pc_hit_single_step_reg_1 ),
        .\Use_Async_Reset.sync_reset_reg (\Use_Async_Reset.sync_reset_reg ),
        .\Using_FPGA.Native_0 (m0_exception_from_ex),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_2 ),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_dead_valid_hold_reg(ex_dead_valid_hold_reg),
        .ex_first_cycle_reg(ex_first_cycle_reg),
        .ex_jump(ex_jump),
        .ex_jump_nodelay(ex_jump_nodelay),
        .ex_raw_valid_reg(ex_raw_valid_reg),
        .ex_raw_valid_reg_0(ex_raw_valid_reg_0),
        .in0(in0),
        .m0_dead_valid_hold(m0_dead_valid_hold),
        .m0_exception_raw_kind(m0_exception_raw_kind),
        .m0_raw_valid_reg(m0_raw_valid_reg),
        .m1_databus_addr_from_m0_reg(m1_databus_addr_from_m0_reg),
        .m1_databus_addr_from_m0_reg_0(m1_databus_addr_from_m0_reg_0),
        .m1_databus_addr_from_m0_reg_1(m1_databus_addr_from_m0_reg_1),
        .m1_databus_addr_from_m0_reg_2(m1_databus_addr_from_m0_reg_2),
        .m1_exception_from_m0(m1_exception_from_m0),
        .m3_exception_taken(m3_exception_taken),
        .of_dead_valid_hold(of_dead_valid_hold),
        .of_next_ex_valid(of_next_ex_valid),
        .of_raw_valid(of_raw_valid),
        .of_read_imm_reg_raw_reg(of_read_imm_reg_raw_reg),
        .of_read_imm_reg_raw_reg_0(of_read_imm_reg_raw_reg_0),
        .of_read_imm_reg_raw_reg_1(of_read_imm_reg_raw_reg_1),
        .p_43_out__4(p_43_out__4),
        .p_48_out(p_48_out),
        .single_Step_N(single_Step_N),
        .single_Step_N_reg(single_Step_N_reg),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep(wb_exception_from_m3_reg_rep),
        .wb_exception_from_m3_reg_rep_0(wb_exception_from_m3_reg_rep_0),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_exception_taken(wb_exception_taken));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_63
   (m0_gpr_write_dbg,
    \Using_FPGA.Native ,
    D,
    Clk);
  output m0_gpr_write_dbg;
  input \Using_FPGA.Native ;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native ;
  wire m0_gpr_write_dbg;

  microblaze_microblaze_0_0_MB_FDR_564 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .m0_gpr_write_dbg(m0_gpr_write_dbg));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_64
   (m0_gpr_write,
    A3_out,
    \Using_FPGA.Native ,
    m0_raw_valid_reg,
    m0_raw_valid_reg_0,
    \Using_FPGA.Native_0 ,
    D,
    Clk,
    \Using_FPGA.Native_1 );
  output m0_gpr_write;
  output A3_out;
  output \Using_FPGA.Native ;
  output m0_raw_valid_reg;
  output m0_raw_valid_reg_0;
  input \Using_FPGA.Native_0 ;
  input D;
  input Clk;
  input \Using_FPGA.Native_1 ;

  wire A3_out;
  wire Clk;
  wire D;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire m0_gpr_write;
  wire m0_raw_valid_reg;
  wire m0_raw_valid_reg_0;

  microblaze_microblaze_0_0_MB_FDR_563 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.A3_out(A3_out),
        .Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (m0_gpr_write),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_1 ),
        .m0_raw_valid_reg(m0_raw_valid_reg),
        .m0_raw_valid_reg_0(m0_raw_valid_reg_0));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_65
   (\Using_FPGA.Native ,
    ex_Interrupt_raw_reg,
    m1_databus_access_from_m00,
    ex_reservation_reg,
    sync_reset,
    D,
    Clk,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 ,
    m1_databus_access_from_m0_reg,
    ex_dead_valid_hold,
    m0_dead_valid_hold,
    m1_databus_access_from_m0_reg_0,
    ex_reservation,
    \Using_FPGA.Native_3 ,
    m0_databus_read_i0,
    \Using_FPGA.Native_4 );
  output \Using_FPGA.Native ;
  output ex_Interrupt_raw_reg;
  output m1_databus_access_from_m00;
  output ex_reservation_reg;
  input sync_reset;
  input D;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;
  input m1_databus_access_from_m0_reg;
  input ex_dead_valid_hold;
  input m0_dead_valid_hold;
  input m1_databus_access_from_m0_reg_0;
  input ex_reservation;
  input \Using_FPGA.Native_3 ;
  input m0_databus_read_i0;
  input \Using_FPGA.Native_4 ;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire \Using_FPGA.Native_4 ;
  wire ex_Interrupt_raw_reg;
  wire ex_dead_valid_hold;
  wire ex_reservation;
  wire ex_reservation_reg;
  wire m0_databus_read_i0;
  wire m0_dead_valid_hold;
  wire m1_databus_access_from_m00;
  wire m1_databus_access_from_m0_reg;
  wire m1_databus_access_from_m0_reg_0;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_FDR_562 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_3 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_4 ),
        .ex_Interrupt_raw_reg(ex_Interrupt_raw_reg),
        .ex_dead_valid_hold(ex_dead_valid_hold),
        .ex_reservation(ex_reservation),
        .ex_reservation_reg(ex_reservation_reg),
        .m0_databus_read_i0(m0_databus_read_i0),
        .m0_dead_valid_hold(m0_dead_valid_hold),
        .m1_databus_access_from_m00(m1_databus_access_from_m00),
        .m1_databus_access_from_m0_reg(m1_databus_access_from_m0_reg),
        .m1_databus_access_from_m0_reg_0(m1_databus_access_from_m0_reg_0),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_66
   (m1_is_div_instr_i,
    sync_reset,
    D,
    Clk);
  output m1_is_div_instr_i;
  input sync_reset;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire m1_is_div_instr_i;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_FDR_561 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .m1_is_div_instr_i(m1_is_div_instr_i),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_67
   (wb_exception_from_m3_reg_rep__0,
    sync_reset,
    Clk,
    \Using_FPGA.Native ,
    m3_div_by_zero,
    m3_div_overflow,
    \Using_FPGA.Native_0 ,
    E,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output wb_exception_from_m3_reg_rep__0;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native ;
  input m3_div_by_zero;
  input m3_div_overflow;
  input \Using_FPGA.Native_0 ;
  input [0:0]E;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire Clk;
  wire [0:0]E;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;

  microblaze_microblaze_0_0_MB_FDR_560 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .E(E),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow(m3_div_overflow),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_68
   (m1_exception_from_m0,
    D_0,
    A_N201_out,
    D,
    sync_reset,
    D_1,
    Clk,
    \Using_FPGA.Native ,
    E,
    m2_exception_from_m1,
    \Using_FPGA.Native_0 ,
    m1_raw_valid_reg,
    m0_dead_valid_hold,
    m1_raw_valid_reg_0,
    Q);
  output m1_exception_from_m0;
  output D_0;
  output A_N201_out;
  output [2:0]D;
  input sync_reset;
  input D_1;
  input Clk;
  input \Using_FPGA.Native ;
  input [0:0]E;
  input m2_exception_from_m1;
  input [0:0]\Using_FPGA.Native_0 ;
  input m1_raw_valid_reg;
  input m0_dead_valid_hold;
  input m1_raw_valid_reg_0;
  input [2:0]Q;

  wire A_N201_out;
  wire Clk;
  wire [2:0]D;
  wire D_0;
  wire D_1;
  wire [0:0]E;
  wire [2:0]Q;
  wire \Using_FPGA.Native ;
  wire [0:0]\Using_FPGA.Native_0 ;
  wire m0_dead_valid_hold;
  wire m1_exception_from_m0;
  wire m1_raw_valid_reg;
  wire m1_raw_valid_reg_0;
  wire m2_exception_from_m1;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_FDR_559 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.A_N201_out(A_N201_out),
        .Clk(Clk),
        .D(D),
        .D_0(D_0),
        .D_1(D_1),
        .E(E),
        .Q(Q),
        .\Using_FPGA.Native_0 (m1_exception_from_m0),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .m0_dead_valid_hold(m0_dead_valid_hold),
        .m1_raw_valid_reg(m1_raw_valid_reg),
        .m1_raw_valid_reg_0(m1_raw_valid_reg_0),
        .m2_exception_from_m1(m2_exception_from_m1),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_69
   (m1_gpr_write_dbg,
    \Using_FPGA.Native ,
    D,
    Clk);
  output m1_gpr_write_dbg;
  input \Using_FPGA.Native ;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native ;
  wire m1_gpr_write_dbg;

  microblaze_microblaze_0_0_MB_FDR_558 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .m1_gpr_write_dbg(m1_gpr_write_dbg));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_70
   (m1_gpr_write,
    A2_out,
    m1_raw_valid_reg,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D,
    Clk,
    \Using_FPGA.Native_2 );
  output m1_gpr_write;
  output A2_out;
  output m1_raw_valid_reg;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input D;
  input Clk;
  input \Using_FPGA.Native_2 ;

  wire A2_out;
  wire Clk;
  wire D;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire m1_gpr_write;
  wire m1_raw_valid_reg;

  microblaze_microblaze_0_0_MB_FDR_557 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.A2_out(A2_out),
        .Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (m1_gpr_write),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_2 ),
        .m1_raw_valid_reg(m1_raw_valid_reg));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_71
   (\Using_FPGA.Native ,
    floating_hold_div_by_zero_reg,
    floating_hold_div_by_zero_reg_0,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    sync_reset,
    D,
    Clk,
    floating_hold_div_by_zero__0,
    E,
    floating_hold_div_by_zero_reg_1,
    EX_Op1_Zero,
    floating_hold_div_by_zero_reg_2,
    m3_div_by_zero,
    floating_hold_div_overflow_reg,
    last_cycle,
    floating_hold_div_overflow_reg_0,
    m3_div_overflow_i_reg,
    m3_div_overflow_i_reg_0);
  output \Using_FPGA.Native ;
  output floating_hold_div_by_zero_reg;
  output floating_hold_div_by_zero_reg_0;
  output \Using_FPGA.Native_0 ;
  output \Using_FPGA.Native_1 ;
  input sync_reset;
  input D;
  input Clk;
  input floating_hold_div_by_zero__0;
  input [0:0]E;
  input floating_hold_div_by_zero_reg_1;
  input EX_Op1_Zero;
  input floating_hold_div_by_zero_reg_2;
  input m3_div_by_zero;
  input floating_hold_div_overflow_reg;
  input last_cycle;
  input floating_hold_div_overflow_reg_0;
  input m3_div_overflow_i_reg;
  input m3_div_overflow_i_reg_0;

  wire Clk;
  wire D;
  wire [0:0]E;
  wire EX_Op1_Zero;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire floating_hold_div_by_zero__0;
  wire floating_hold_div_by_zero_reg;
  wire floating_hold_div_by_zero_reg_0;
  wire floating_hold_div_by_zero_reg_1;
  wire floating_hold_div_by_zero_reg_2;
  wire floating_hold_div_overflow_reg;
  wire floating_hold_div_overflow_reg_0;
  wire last_cycle;
  wire m3_div_by_zero;
  wire m3_div_overflow_i_reg;
  wire m3_div_overflow_i_reg_0;
  wire sync_reset;

  microblaze_microblaze_0_0_MB_FDR_556 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .E(E),
        .EX_Op1_Zero(EX_Op1_Zero),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .floating_hold_div_by_zero__0(floating_hold_div_by_zero__0),
        .floating_hold_div_by_zero_reg(floating_hold_div_by_zero_reg),
        .floating_hold_div_by_zero_reg_0(floating_hold_div_by_zero_reg_0),
        .floating_hold_div_by_zero_reg_1(floating_hold_div_by_zero_reg_1),
        .floating_hold_div_by_zero_reg_2(floating_hold_div_by_zero_reg_2),
        .floating_hold_div_overflow_reg(floating_hold_div_overflow_reg),
        .floating_hold_div_overflow_reg_0(floating_hold_div_overflow_reg_0),
        .last_cycle(last_cycle),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow_i_reg(m3_div_overflow_i_reg),
        .m3_div_overflow_i_reg_0(m3_div_overflow_i_reg_0),
        .sync_reset(sync_reset));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_72
   (wb_exception_from_m3_reg_rep__0,
    sync_reset,
    Clk,
    E,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    m3_div_overflow,
    m3_div_by_zero,
    \Using_FPGA.Native_1 ,
    \Using_FPGA.Native_2 );
  output wb_exception_from_m3_reg_rep__0;
  input sync_reset;
  input Clk;
  input [0:0]E;
  input \Using_FPGA.Native ;
  input \Using_FPGA.Native_0 ;
  input m3_div_overflow;
  input m3_div_by_zero;
  input \Using_FPGA.Native_1 ;
  input \Using_FPGA.Native_2 ;

  wire Clk;
  wire [0:0]E;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;

  microblaze_microblaze_0_0_MB_FDR_555 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .E(E),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_2 ),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow(m3_div_overflow),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_73
   (m2_exception_from_m1,
    \Using_FPGA.Native ,
    m2_databus_access_i0,
    wb_exception_from_m3_reg_rep__0,
    D_0,
    m2_exception_taken,
    D,
    sync_reset,
    D_1,
    Clk,
    \Using_FPGA.Native_0 ,
    m2_databus_access_i_reg,
    m2_raw_valid_reg,
    m1_dead_valid_hold,
    m1_exception_from_m0,
    m1_databus_access,
    m3_exception_from_m2,
    m3_dead_valid_hold,
    m2_databus_access_i_reg_0,
    E,
    \Using_FPGA.Native_1 ,
    m2_dead_valid_hold,
    m1_databus_addr_from_m0_i_3,
    Q);
  output m2_exception_from_m1;
  output \Using_FPGA.Native ;
  output m2_databus_access_i0;
  output wb_exception_from_m3_reg_rep__0;
  output D_0;
  output m2_exception_taken;
  output [2:0]D;
  input sync_reset;
  input D_1;
  input Clk;
  input \Using_FPGA.Native_0 ;
  input m2_databus_access_i_reg;
  input m2_raw_valid_reg;
  input m1_dead_valid_hold;
  input m1_exception_from_m0;
  input m1_databus_access;
  input m3_exception_from_m2;
  input m3_dead_valid_hold;
  input m2_databus_access_i_reg_0;
  input [0:0]E;
  input \Using_FPGA.Native_1 ;
  input m2_dead_valid_hold;
  input m1_databus_addr_from_m0_i_3;
  input [2:0]Q;

  wire Clk;
  wire [2:0]D;
  wire D_0;
  wire D_1;
  wire [0:0]E;
  wire [2:0]Q;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire m1_databus_access;
  wire m1_databus_addr_from_m0_i_3;
  wire m1_dead_valid_hold;
  wire m1_exception_from_m0;
  wire m2_databus_access_i0;
  wire m2_databus_access_i_reg;
  wire m2_databus_access_i_reg_0;
  wire m2_dead_valid_hold;
  wire m2_exception_from_m1;
  wire m2_exception_taken;
  wire m2_raw_valid_reg;
  wire m3_dead_valid_hold;
  wire m3_exception_from_m2;
  wire sync_reset;
  wire wb_exception_from_m3_reg_rep__0;

  microblaze_microblaze_0_0_MB_FDR_554 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .D_0(D_0),
        .D_1(D_1),
        .E(E),
        .Q(Q),
        .\Using_FPGA.Native_0 (m2_exception_from_m1),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_1 ),
        .m1_databus_access(m1_databus_access),
        .m1_databus_addr_from_m0_i_3(m1_databus_addr_from_m0_i_3),
        .m1_dead_valid_hold(m1_dead_valid_hold),
        .m1_exception_from_m0(m1_exception_from_m0),
        .m2_databus_access_i0(m2_databus_access_i0),
        .m2_databus_access_i_reg(m2_databus_access_i_reg),
        .m2_databus_access_i_reg_0(m2_databus_access_i_reg_0),
        .m2_dead_valid_hold(m2_dead_valid_hold),
        .m2_exception_taken(m2_exception_taken),
        .m2_raw_valid_reg(m2_raw_valid_reg),
        .m3_dead_valid_hold(m3_dead_valid_hold),
        .m3_exception_from_m2(m3_exception_from_m2),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_74
   (m2_gpr_write_dbg,
    D,
    \Using_FPGA.Native ,
    D_0,
    Clk,
    E,
    m3_gpr_write_dbg,
    \Using_FPGA.Native_0 );
  output m2_gpr_write_dbg;
  output D;
  input \Using_FPGA.Native ;
  input D_0;
  input Clk;
  input [0:0]E;
  input m3_gpr_write_dbg;
  input \Using_FPGA.Native_0 ;

  wire Clk;
  wire D;
  wire D_0;
  wire [0:0]E;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire m2_gpr_write_dbg;
  wire m3_gpr_write_dbg;

  microblaze_microblaze_0_0_MB_FDR_553 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .D_0(D_0),
        .E(E),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .m2_gpr_write_dbg(m2_gpr_write_dbg),
        .m3_gpr_write_dbg(m3_gpr_write_dbg));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_75
   (m2_gpr_write,
    A1_out,
    m2_raw_valid_reg,
    D,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D_0,
    Clk,
    \Using_FPGA.Native_2 ,
    E,
    m3_gpr_write,
    \Using_FPGA.Native_3 );
  output m2_gpr_write;
  output A1_out;
  output m2_raw_valid_reg;
  output D;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input D_0;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input [0:0]E;
  input m3_gpr_write;
  input \Using_FPGA.Native_3 ;

  wire A1_out;
  wire Clk;
  wire D;
  wire D_0;
  wire [0:0]E;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire m2_gpr_write;
  wire m2_raw_valid_reg;
  wire m3_gpr_write;

  microblaze_microblaze_0_0_MB_FDR_552 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.A1_out(A1_out),
        .Clk(Clk),
        .D(D),
        .D_0(D_0),
        .E(E),
        .\Using_FPGA.Native_0 (m2_gpr_write),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_3 ),
        .m2_raw_valid_reg(m2_raw_valid_reg),
        .m3_gpr_write(m3_gpr_write));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_76
   (m3_exception_from_m2,
    wb_exception_from_m3_reg_rep__0,
    wb_exception_from_m3_reg_rep__0_0,
    m3_exception_taken,
    m3_databus_access_i0,
    wb_exception_from_m3_reg,
    D,
    wb_exception_from_m3_reg_0,
    wb_exception_from_m3_reg_1,
    sync_reset,
    D_0,
    Clk,
    m3_databus_access_i_reg,
    m3_databus_access_i_reg_0,
    m2_dead_valid_hold,
    m2_exception_taken,
    m1_databus_addr_from_m0_i_2,
    m1_dead_valid_hold,
    m1_exception_from_m0,
    m3_databus_access_i_reg_1,
    m2_exception_from_m1,
    wb_abort_div,
    wb_exception_from_m3_reg_2,
    m3_dead_valid_hold,
    wb_exception_from_m3_reg_3,
    Q);
  output m3_exception_from_m2;
  output wb_exception_from_m3_reg_rep__0;
  output wb_exception_from_m3_reg_rep__0_0;
  output m3_exception_taken;
  output m3_databus_access_i0;
  output wb_exception_from_m3_reg;
  output [2:0]D;
  output wb_exception_from_m3_reg_0;
  output wb_exception_from_m3_reg_1;
  input sync_reset;
  input D_0;
  input Clk;
  input m3_databus_access_i_reg;
  input m3_databus_access_i_reg_0;
  input m2_dead_valid_hold;
  input m2_exception_taken;
  input m1_databus_addr_from_m0_i_2;
  input m1_dead_valid_hold;
  input m1_exception_from_m0;
  input m3_databus_access_i_reg_1;
  input m2_exception_from_m1;
  input wb_abort_div;
  input wb_exception_from_m3_reg_2;
  input m3_dead_valid_hold;
  input wb_exception_from_m3_reg_3;
  input [2:0]Q;

  wire Clk;
  wire [2:0]D;
  wire D_0;
  wire [2:0]Q;
  wire m1_databus_addr_from_m0_i_2;
  wire m1_dead_valid_hold;
  wire m1_exception_from_m0;
  wire m2_dead_valid_hold;
  wire m2_exception_from_m1;
  wire m2_exception_taken;
  wire m3_databus_access_i0;
  wire m3_databus_access_i_reg;
  wire m3_databus_access_i_reg_0;
  wire m3_databus_access_i_reg_1;
  wire m3_dead_valid_hold;
  wire m3_exception_from_m2;
  wire m3_exception_taken;
  wire sync_reset;
  wire wb_abort_div;
  wire wb_exception_from_m3_reg;
  wire wb_exception_from_m3_reg_0;
  wire wb_exception_from_m3_reg_1;
  wire wb_exception_from_m3_reg_2;
  wire wb_exception_from_m3_reg_3;
  wire wb_exception_from_m3_reg_rep__0;
  wire wb_exception_from_m3_reg_rep__0_0;

  microblaze_microblaze_0_0_MB_FDR_551 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .D_0(D_0),
        .Q(Q),
        .\Using_FPGA.Native_0 (m3_exception_from_m2),
        .m1_databus_addr_from_m0_i_2(m1_databus_addr_from_m0_i_2),
        .m1_dead_valid_hold(m1_dead_valid_hold),
        .m1_exception_from_m0(m1_exception_from_m0),
        .m2_dead_valid_hold(m2_dead_valid_hold),
        .m2_exception_from_m1(m2_exception_from_m1),
        .m2_exception_taken(m2_exception_taken),
        .m3_databus_access_i0(m3_databus_access_i0),
        .m3_databus_access_i_reg(m3_databus_access_i_reg),
        .m3_databus_access_i_reg_0(m3_databus_access_i_reg_0),
        .m3_databus_access_i_reg_1(m3_databus_access_i_reg_1),
        .m3_dead_valid_hold(m3_dead_valid_hold),
        .m3_exception_taken(m3_exception_taken),
        .sync_reset(sync_reset),
        .wb_abort_div(wb_abort_div),
        .wb_exception_from_m3_reg(wb_exception_from_m3_reg),
        .wb_exception_from_m3_reg_0(wb_exception_from_m3_reg_0),
        .wb_exception_from_m3_reg_1(wb_exception_from_m3_reg_1),
        .wb_exception_from_m3_reg_2(wb_exception_from_m3_reg_2),
        .wb_exception_from_m3_reg_3(wb_exception_from_m3_reg_3),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0),
        .wb_exception_from_m3_reg_rep__0_0(wb_exception_from_m3_reg_rep__0_0));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_77
   (m3_gpr_write_dbg,
    \Using_FPGA.Native ,
    D,
    Clk);
  output m3_gpr_write_dbg;
  input \Using_FPGA.Native ;
  input D;
  input Clk;

  wire Clk;
  wire D;
  wire \Using_FPGA.Native ;
  wire m3_gpr_write_dbg;

  microblaze_microblaze_0_0_MB_FDR_550 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .D(D),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .m3_gpr_write_dbg(m3_gpr_write_dbg));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_78
   (m3_gpr_write,
    A0_out,
    m3_raw_valid_reg,
    D,
    \Using_FPGA.Native ,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    D_0,
    Clk,
    \Using_FPGA.Native_2 ,
    \Using_FPGA.Native_3 );
  output m3_gpr_write;
  output A0_out;
  output m3_raw_valid_reg;
  output D;
  output \Using_FPGA.Native ;
  output \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input D_0;
  input Clk;
  input \Using_FPGA.Native_2 ;
  input \Using_FPGA.Native_3 ;

  wire A0_out;
  wire Clk;
  wire D;
  wire D_0;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire \Using_FPGA.Native_2 ;
  wire \Using_FPGA.Native_3 ;
  wire m3_gpr_write;
  wire m3_raw_valid_reg;

  microblaze_microblaze_0_0_MB_FDR_549 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.A0_out(A0_out),
        .Clk(Clk),
        .D(D),
        .D_0(D_0),
        .\Using_FPGA.Native_0 (m3_gpr_write),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_3 (\Using_FPGA.Native_1 ),
        .\Using_FPGA.Native_4 (\Using_FPGA.Native_2 ),
        .\Using_FPGA.Native_5 (\Using_FPGA.Native_3 ),
        .m3_raw_valid_reg(m3_raw_valid_reg));
endmodule

(* ORIG_REF_NAME = "two_piperun_fd" *) 
module microblaze_microblaze_0_0_two_piperun_fd_79
   (wb_exception_from_m3_reg_rep__0,
    sync_reset,
    Clk,
    \Using_FPGA.Native ,
    m3_div_by_zero,
    m3_div_overflow,
    \Using_FPGA.Native_0 ,
    \Using_FPGA.Native_1 ,
    \of_MSR_i_reg[25] ,
    \of_MSR_i_reg[25]_0 );
  output [0:0]wb_exception_from_m3_reg_rep__0;
  input sync_reset;
  input Clk;
  input \Using_FPGA.Native ;
  input m3_div_by_zero;
  input m3_div_overflow;
  input \Using_FPGA.Native_0 ;
  input \Using_FPGA.Native_1 ;
  input \of_MSR_i_reg[25] ;
  input \of_MSR_i_reg[25]_0 ;

  wire Clk;
  wire \Using_FPGA.Native ;
  wire \Using_FPGA.Native_0 ;
  wire \Using_FPGA.Native_1 ;
  wire m3_div_by_zero;
  wire m3_div_overflow;
  wire \of_MSR_i_reg[25] ;
  wire \of_MSR_i_reg[25]_0 ;
  wire sync_reset;
  wire [0:0]wb_exception_from_m3_reg_rep__0;

  microblaze_microblaze_0_0_MB_FDR_548 \Using_0.TWO_PIPE_ZERO_DFF_DFF 
       (.Clk(Clk),
        .\Using_FPGA.Native_0 (\Using_FPGA.Native ),
        .\Using_FPGA.Native_1 (\Using_FPGA.Native_0 ),
        .\Using_FPGA.Native_2 (\Using_FPGA.Native_1 ),
        .m3_div_by_zero(m3_div_by_zero),
        .m3_div_overflow(m3_div_overflow),
        .\of_MSR_i_reg[25] (\of_MSR_i_reg[25] ),
        .\of_MSR_i_reg[25]_0 (\of_MSR_i_reg[25]_0 ),
        .sync_reset(sync_reset),
        .wb_exception_from_m3_reg_rep__0(wb_exception_from_m3_reg_rep__0));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
